Version 4.0 HI-TECH Software Intermediate Code
"6 ./shapes.h
[; ;./shapes.h: 6: {
[s S281 `us -> 8 `i `uc 1 `uc 1 `uc 1 ]
[n S281 shape graphic x y limitedRotation ]
"8 ./screen.h
[; ;./screen.h: 8: void set_splashscreen(const uint16_t *newData);
[v _set_splashscreen `(v ~T0 @X0 0 ef1`*Cus ]
"49 ./shared_logic.h
[; ;./shared_logic.h: 49: void waitms(unsigned);
[v _waitms `(v ~T0 @X0 0 ef1`ui ]
"14 tetris.c
[; ;tetris.c: 14: {
[s S282 `S281 1 `a 1 `uc 1 `uc -> 7 `i ]
[n S282 tetris currentblock IsRotated countblocks randomobjects ]
"4 ./randgen.h
[; ;./randgen.h: 4: uint16_t rnd_get_num(void);
[v _rnd_get_num `(us ~T0 @X0 0 ef ]
"51 ./shared_logic.h
[; ;./shared_logic.h: 51: volatile void *memcpyvol (volatile void *restrict, const void *restrict, size_t);
[v _memcpyvol `(*Vv ~T0 @X0 0 ef3`*Vv`*Cv`ui ]
"46
[; ;./shared_logic.h: 46: void set_mS(uint16_t);
[v _set_mS `(v ~T0 @X0 0 ef1`us ]
"98 tetris.c
[; ;tetris.c: 98: void moveObjecttetris(struct shape *tetrisblock, direction_t direction, uint8_t cycles)
[c E2580 0 1 2 3 .. ]
[n E2580 . DOWN UP LEFT RIGHT  ]
"149
[; ;tetris.c: 149:         mergeObjects(tetrisblock->graphic, BackgroundData, MERGE);
[c E2575 0 1 2 .. ]
[n E2575 . OVERRIDE MERGE INVERT  ]
"56 ./shared_logic.h
[; ;./shared_logic.h: 56: void mergeObjects(volatile uint16_t * , volatile uint16_t *, mode_t );
[v _mergeObjects `(v ~T0 @X0 0 ef3`*Vus`*Vus`E2575 ]
"59
[; ;./shared_logic.h: 59: _Bool collisionDetect(volatile uint16_t * , volatile uint16_t * );
[v _collisionDetect `(a ~T0 @X0 0 ef2`*Vus`*Vus ]
"196 tetris.c
[; ;tetris.c: 196: void newRotation(struct tetris *tetris, uint16_t * pTarget, rotation_t *rotation)
[c E2586 0 1 .. ]
[n E2586 . CCW CW  ]
"55 ./shared_logic.h
[; ;./shared_logic.h: 55: void clearArray(volatile uint16_t *, size_t );
[v _clearArray `(v ~T0 @X0 0 ef2`*Vus`ui ]
"61
[; ;./shared_logic.h: 61: void removeLine(volatile uint16_t * , uint8_t );
[v _removeLine `(v ~T0 @X0 0 ef2`*Vus`uc ]
"57
[; ;./shared_logic.h: 57: _Bool checkForLeftWall(volatile uint16_t * );
[v _checkForLeftWall `(a ~T0 @X0 0 ef1`*Vus ]
"65
[; ;./shared_logic.h: 65: void moveObject(uint16_t *, direction_t , uint8_t );
[v _moveObject `(v ~T0 @X0 0 ef3`*us`E2580`uc ]
"11 ./screen.h
[; ;./screen.h: 11: void pauseMultiplexing(void);
[v _pauseMultiplexing `(v ~T0 @X0 0 ef ]
"12
[; ;./screen.h: 12: void resumeMultiplexing(void);
[v _resumeMultiplexing `(v ~T0 @X0 0 ef ]
"58 ./shared_logic.h
[; ;./shared_logic.h: 58: _Bool checkForRightWall(volatile uint16_t * );
[v _checkForRightWall `(a ~T0 @X0 0 ef1`*Vus ]
"60
[; ;./shared_logic.h: 60: uint8_t pixelCount(volatile uint16_t * );
[v _pixelCount `(uc ~T0 @X0 0 ef1`*Vus ]
"7 ./buttons.h
[; ;./buttons.h: 7: _Bool checkLeft(_Bool);
[v _checkLeft `(a ~T0 @X0 0 ef1`a ]
"8
[; ;./buttons.h: 8: _Bool checkRight(_Bool);
[v _checkRight `(a ~T0 @X0 0 ef1`a ]
"9
[; ;./buttons.h: 9: _Bool checkUp(_Bool);
[v _checkUp `(a ~T0 @X0 0 ef1`a ]
"10
[; ;./buttons.h: 10: _Bool checkDown(_Bool);
[v _checkDown `(a ~T0 @X0 0 ef1`a ]
"63 ./shared_logic.h
[; ;./shared_logic.h: 63: uint8_t readHighScore(uint8_t );
[v _readHighScore `(uc ~T0 @X0 0 ef1`uc ]
"66
[; ;./shared_logic.h: 66: void show_score(uint8_t);
[v _show_score `(v ~T0 @X0 0 ef1`uc ]
"7 ./screen.h
[; ;./screen.h: 7: void set_screen(uint16_t *newData);
[v _set_screen `(v ~T0 @X0 0 ef1`*us ]
"64 ./shared_logic.h
[; ;./shared_logic.h: 64: void writeHighScore(uint8_t , uint8_t , uint8_t );
[v _writeHighScore `(v ~T0 @X0 0 ef3`uc`uc`uc ]
"54 C:\Program Files (x86)\Microchip\xc8\v2.05\pic\include\pic18f4520.h
[; ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\include\pic18f4520.h: 54: __asm("PORTA equ 0F80h");
[; <" PORTA equ 0F80h ;# ">
"273
[; ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\include\pic18f4520.h: 273: __asm("PORTB equ 0F81h");
[; <" PORTB equ 0F81h ;# ">
"452
[; ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\include\pic18f4520.h: 452: __asm("PORTC equ 0F82h");
[; <" PORTC equ 0F82h ;# ">
"634
[; ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\include\pic18f4520.h: 634: __asm("PORTD equ 0F83h");
[; <" PORTD equ 0F83h ;# ">
"776
[; ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\include\pic18f4520.h: 776: __asm("PORTE equ 0F84h");
[; <" PORTE equ 0F84h ;# ">
"979
[; ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\include\pic18f4520.h: 979: __asm("LATA equ 0F89h");
[; <" LATA equ 0F89h ;# ">
"1091
[; ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\include\pic18f4520.h: 1091: __asm("LATB equ 0F8Ah");
[; <" LATB equ 0F8Ah ;# ">
"1203
[; ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\include\pic18f4520.h: 1203: __asm("LATC equ 0F8Bh");
[; <" LATC equ 0F8Bh ;# ">
"1315
[; ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\include\pic18f4520.h: 1315: __asm("LATD equ 0F8Ch");
[; <" LATD equ 0F8Ch ;# ">
"1427
[; ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\include\pic18f4520.h: 1427: __asm("LATE equ 0F8Dh");
[; <" LATE equ 0F8Dh ;# ">
"1479
[; ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\include\pic18f4520.h: 1479: __asm("TRISA equ 0F92h");
[; <" TRISA equ 0F92h ;# ">
"1484
[; ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\include\pic18f4520.h: 1484: __asm("DDRA equ 0F92h");
[; <" DDRA equ 0F92h ;# ">
"1701
[; ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\include\pic18f4520.h: 1701: __asm("TRISB equ 0F93h");
[; <" TRISB equ 0F93h ;# ">
"1706
[; ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\include\pic18f4520.h: 1706: __asm("DDRB equ 0F93h");
[; <" DDRB equ 0F93h ;# ">
"1923
[; ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\include\pic18f4520.h: 1923: __asm("TRISC equ 0F94h");
[; <" TRISC equ 0F94h ;# ">
"1928
[; ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\include\pic18f4520.h: 1928: __asm("DDRC equ 0F94h");
[; <" DDRC equ 0F94h ;# ">
"2145
[; ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\include\pic18f4520.h: 2145: __asm("TRISD equ 0F95h");
[; <" TRISD equ 0F95h ;# ">
"2150
[; ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\include\pic18f4520.h: 2150: __asm("DDRD equ 0F95h");
[; <" DDRD equ 0F95h ;# ">
"2367
[; ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\include\pic18f4520.h: 2367: __asm("TRISE equ 0F96h");
[; <" TRISE equ 0F96h ;# ">
"2372
[; ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\include\pic18f4520.h: 2372: __asm("DDRE equ 0F96h");
[; <" DDRE equ 0F96h ;# ">
"2531
[; ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\include\pic18f4520.h: 2531: __asm("OSCTUNE equ 0F9Bh");
[; <" OSCTUNE equ 0F9Bh ;# ">
"2596
[; ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\include\pic18f4520.h: 2596: __asm("PIE1 equ 0F9Dh");
[; <" PIE1 equ 0F9Dh ;# ">
"2673
[; ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\include\pic18f4520.h: 2673: __asm("PIR1 equ 0F9Eh");
[; <" PIR1 equ 0F9Eh ;# ">
"2750
[; ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\include\pic18f4520.h: 2750: __asm("IPR1 equ 0F9Fh");
[; <" IPR1 equ 0F9Fh ;# ">
"2827
[; ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\include\pic18f4520.h: 2827: __asm("PIE2 equ 0FA0h");
[; <" PIE2 equ 0FA0h ;# ">
"2893
[; ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\include\pic18f4520.h: 2893: __asm("PIR2 equ 0FA1h");
[; <" PIR2 equ 0FA1h ;# ">
"2959
[; ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\include\pic18f4520.h: 2959: __asm("IPR2 equ 0FA2h");
[; <" IPR2 equ 0FA2h ;# ">
"3025
[; ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\include\pic18f4520.h: 3025: __asm("EECON1 equ 0FA6h");
[; <" EECON1 equ 0FA6h ;# ">
"3091
[; ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\include\pic18f4520.h: 3091: __asm("EECON2 equ 0FA7h");
[; <" EECON2 equ 0FA7h ;# ">
"3098
[; ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\include\pic18f4520.h: 3098: __asm("EEDATA equ 0FA8h");
[; <" EEDATA equ 0FA8h ;# ">
"3105
[; ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\include\pic18f4520.h: 3105: __asm("EEADR equ 0FA9h");
[; <" EEADR equ 0FA9h ;# ">
"3112
[; ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\include\pic18f4520.h: 3112: __asm("RCSTA equ 0FABh");
[; <" RCSTA equ 0FABh ;# ">
"3117
[; ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\include\pic18f4520.h: 3117: __asm("RCSTA1 equ 0FABh");
[; <" RCSTA1 equ 0FABh ;# ">
"3322
[; ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\include\pic18f4520.h: 3322: __asm("TXSTA equ 0FACh");
[; <" TXSTA equ 0FACh ;# ">
"3327
[; ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\include\pic18f4520.h: 3327: __asm("TXSTA1 equ 0FACh");
[; <" TXSTA1 equ 0FACh ;# ">
"3578
[; ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\include\pic18f4520.h: 3578: __asm("TXREG equ 0FADh");
[; <" TXREG equ 0FADh ;# ">
"3583
[; ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\include\pic18f4520.h: 3583: __asm("TXREG1 equ 0FADh");
[; <" TXREG1 equ 0FADh ;# ">
"3590
[; ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\include\pic18f4520.h: 3590: __asm("RCREG equ 0FAEh");
[; <" RCREG equ 0FAEh ;# ">
"3595
[; ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\include\pic18f4520.h: 3595: __asm("RCREG1 equ 0FAEh");
[; <" RCREG1 equ 0FAEh ;# ">
"3602
[; ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\include\pic18f4520.h: 3602: __asm("SPBRG equ 0FAFh");
[; <" SPBRG equ 0FAFh ;# ">
"3607
[; ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\include\pic18f4520.h: 3607: __asm("SPBRG1 equ 0FAFh");
[; <" SPBRG1 equ 0FAFh ;# ">
"3614
[; ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\include\pic18f4520.h: 3614: __asm("SPBRGH equ 0FB0h");
[; <" SPBRGH equ 0FB0h ;# ">
"3621
[; ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\include\pic18f4520.h: 3621: __asm("T3CON equ 0FB1h");
[; <" T3CON equ 0FB1h ;# ">
"3733
[; ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\include\pic18f4520.h: 3733: __asm("TMR3 equ 0FB2h");
[; <" TMR3 equ 0FB2h ;# ">
"3740
[; ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\include\pic18f4520.h: 3740: __asm("TMR3L equ 0FB2h");
[; <" TMR3L equ 0FB2h ;# ">
"3747
[; ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\include\pic18f4520.h: 3747: __asm("TMR3H equ 0FB3h");
[; <" TMR3H equ 0FB3h ;# ">
"3754
[; ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\include\pic18f4520.h: 3754: __asm("CMCON equ 0FB4h");
[; <" CMCON equ 0FB4h ;# ">
"3844
[; ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\include\pic18f4520.h: 3844: __asm("CVRCON equ 0FB5h");
[; <" CVRCON equ 0FB5h ;# ">
"3923
[; ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\include\pic18f4520.h: 3923: __asm("ECCP1AS equ 0FB6h");
[; <" ECCP1AS equ 0FB6h ;# ">
"3928
[; ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\include\pic18f4520.h: 3928: __asm("ECCPAS equ 0FB6h");
[; <" ECCPAS equ 0FB6h ;# ">
"4085
[; ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\include\pic18f4520.h: 4085: __asm("PWM1CON equ 0FB7h");
[; <" PWM1CON equ 0FB7h ;# ">
"4090
[; ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\include\pic18f4520.h: 4090: __asm("ECCP1DEL equ 0FB7h");
[; <" ECCP1DEL equ 0FB7h ;# ">
"4223
[; ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\include\pic18f4520.h: 4223: __asm("BAUDCON equ 0FB8h");
[; <" BAUDCON equ 0FB8h ;# ">
"4228
[; ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\include\pic18f4520.h: 4228: __asm("BAUDCTL equ 0FB8h");
[; <" BAUDCTL equ 0FB8h ;# ">
"4403
[; ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\include\pic18f4520.h: 4403: __asm("CCP2CON equ 0FBAh");
[; <" CCP2CON equ 0FBAh ;# ">
"4482
[; ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\include\pic18f4520.h: 4482: __asm("CCPR2 equ 0FBBh");
[; <" CCPR2 equ 0FBBh ;# ">
"4489
[; ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\include\pic18f4520.h: 4489: __asm("CCPR2L equ 0FBBh");
[; <" CCPR2L equ 0FBBh ;# ">
"4496
[; ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\include\pic18f4520.h: 4496: __asm("CCPR2H equ 0FBCh");
[; <" CCPR2H equ 0FBCh ;# ">
"4503
[; ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\include\pic18f4520.h: 4503: __asm("CCP1CON equ 0FBDh");
[; <" CCP1CON equ 0FBDh ;# ">
"4600
[; ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\include\pic18f4520.h: 4600: __asm("CCPR1 equ 0FBEh");
[; <" CCPR1 equ 0FBEh ;# ">
"4607
[; ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\include\pic18f4520.h: 4607: __asm("CCPR1L equ 0FBEh");
[; <" CCPR1L equ 0FBEh ;# ">
"4614
[; ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\include\pic18f4520.h: 4614: __asm("CCPR1H equ 0FBFh");
[; <" CCPR1H equ 0FBFh ;# ">
"4621
[; ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\include\pic18f4520.h: 4621: __asm("ADCON2 equ 0FC0h");
[; <" ADCON2 equ 0FC0h ;# ">
"4692
[; ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\include\pic18f4520.h: 4692: __asm("ADCON1 equ 0FC1h");
[; <" ADCON1 equ 0FC1h ;# ">
"4777
[; ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\include\pic18f4520.h: 4777: __asm("ADCON0 equ 0FC2h");
[; <" ADCON0 equ 0FC2h ;# ">
"4896
[; ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\include\pic18f4520.h: 4896: __asm("ADRES equ 0FC3h");
[; <" ADRES equ 0FC3h ;# ">
"4903
[; ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\include\pic18f4520.h: 4903: __asm("ADRESL equ 0FC3h");
[; <" ADRESL equ 0FC3h ;# ">
"4910
[; ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\include\pic18f4520.h: 4910: __asm("ADRESH equ 0FC4h");
[; <" ADRESH equ 0FC4h ;# ">
"4917
[; ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\include\pic18f4520.h: 4917: __asm("SSPCON2 equ 0FC5h");
[; <" SSPCON2 equ 0FC5h ;# ">
"5012
[; ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\include\pic18f4520.h: 5012: __asm("SSPCON1 equ 0FC6h");
[; <" SSPCON1 equ 0FC6h ;# ">
"5082
[; ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\include\pic18f4520.h: 5082: __asm("SSPSTAT equ 0FC7h");
[; <" SSPSTAT equ 0FC7h ;# ">
"5303
[; ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\include\pic18f4520.h: 5303: __asm("SSPADD equ 0FC8h");
[; <" SSPADD equ 0FC8h ;# ">
"5310
[; ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\include\pic18f4520.h: 5310: __asm("SSPBUF equ 0FC9h");
[; <" SSPBUF equ 0FC9h ;# ">
"5317
[; ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\include\pic18f4520.h: 5317: __asm("T2CON equ 0FCAh");
[; <" T2CON equ 0FCAh ;# ">
"5415
[; ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\include\pic18f4520.h: 5415: __asm("PR2 equ 0FCBh");
[; <" PR2 equ 0FCBh ;# ">
"5420
[; ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\include\pic18f4520.h: 5420: __asm("MEMCON equ 0FCBh");
[; <" MEMCON equ 0FCBh ;# ">
"5525
[; ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\include\pic18f4520.h: 5525: __asm("TMR2 equ 0FCCh");
[; <" TMR2 equ 0FCCh ;# ">
"5532
[; ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\include\pic18f4520.h: 5532: __asm("T1CON equ 0FCDh");
[; <" T1CON equ 0FCDh ;# ">
"5635
[; ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\include\pic18f4520.h: 5635: __asm("TMR1 equ 0FCEh");
[; <" TMR1 equ 0FCEh ;# ">
"5642
[; ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\include\pic18f4520.h: 5642: __asm("TMR1L equ 0FCEh");
[; <" TMR1L equ 0FCEh ;# ">
"5649
[; ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\include\pic18f4520.h: 5649: __asm("TMR1H equ 0FCFh");
[; <" TMR1H equ 0FCFh ;# ">
"5656
[; ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\include\pic18f4520.h: 5656: __asm("RCON equ 0FD0h");
[; <" RCON equ 0FD0h ;# ">
"5789
[; ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\include\pic18f4520.h: 5789: __asm("WDTCON equ 0FD1h");
[; <" WDTCON equ 0FD1h ;# ">
"5817
[; ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\include\pic18f4520.h: 5817: __asm("HLVDCON equ 0FD2h");
[; <" HLVDCON equ 0FD2h ;# ">
"5822
[; ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\include\pic18f4520.h: 5822: __asm("LVDCON equ 0FD2h");
[; <" LVDCON equ 0FD2h ;# ">
"6087
[; ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\include\pic18f4520.h: 6087: __asm("OSCCON equ 0FD3h");
[; <" OSCCON equ 0FD3h ;# ">
"6170
[; ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\include\pic18f4520.h: 6170: __asm("T0CON equ 0FD5h");
[; <" T0CON equ 0FD5h ;# ">
"6253
[; ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\include\pic18f4520.h: 6253: __asm("TMR0 equ 0FD6h");
[; <" TMR0 equ 0FD6h ;# ">
"6260
[; ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\include\pic18f4520.h: 6260: __asm("TMR0L equ 0FD6h");
[; <" TMR0L equ 0FD6h ;# ">
"6267
[; ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\include\pic18f4520.h: 6267: __asm("TMR0H equ 0FD7h");
[; <" TMR0H equ 0FD7h ;# ">
"6274
[; ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\include\pic18f4520.h: 6274: __asm("STATUS equ 0FD8h");
[; <" STATUS equ 0FD8h ;# ">
"6345
[; ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\include\pic18f4520.h: 6345: __asm("FSR2 equ 0FD9h");
[; <" FSR2 equ 0FD9h ;# ">
"6352
[; ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\include\pic18f4520.h: 6352: __asm("FSR2L equ 0FD9h");
[; <" FSR2L equ 0FD9h ;# ">
"6359
[; ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\include\pic18f4520.h: 6359: __asm("FSR2H equ 0FDAh");
[; <" FSR2H equ 0FDAh ;# ">
"6366
[; ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\include\pic18f4520.h: 6366: __asm("PLUSW2 equ 0FDBh");
[; <" PLUSW2 equ 0FDBh ;# ">
"6373
[; ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\include\pic18f4520.h: 6373: __asm("PREINC2 equ 0FDCh");
[; <" PREINC2 equ 0FDCh ;# ">
"6380
[; ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\include\pic18f4520.h: 6380: __asm("POSTDEC2 equ 0FDDh");
[; <" POSTDEC2 equ 0FDDh ;# ">
"6387
[; ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\include\pic18f4520.h: 6387: __asm("POSTINC2 equ 0FDEh");
[; <" POSTINC2 equ 0FDEh ;# ">
"6394
[; ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\include\pic18f4520.h: 6394: __asm("INDF2 equ 0FDFh");
[; <" INDF2 equ 0FDFh ;# ">
"6401
[; ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\include\pic18f4520.h: 6401: __asm("BSR equ 0FE0h");
[; <" BSR equ 0FE0h ;# ">
"6408
[; ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\include\pic18f4520.h: 6408: __asm("FSR1 equ 0FE1h");
[; <" FSR1 equ 0FE1h ;# ">
"6415
[; ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\include\pic18f4520.h: 6415: __asm("FSR1L equ 0FE1h");
[; <" FSR1L equ 0FE1h ;# ">
"6422
[; ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\include\pic18f4520.h: 6422: __asm("FSR1H equ 0FE2h");
[; <" FSR1H equ 0FE2h ;# ">
"6429
[; ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\include\pic18f4520.h: 6429: __asm("PLUSW1 equ 0FE3h");
[; <" PLUSW1 equ 0FE3h ;# ">
"6436
[; ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\include\pic18f4520.h: 6436: __asm("PREINC1 equ 0FE4h");
[; <" PREINC1 equ 0FE4h ;# ">
"6443
[; ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\include\pic18f4520.h: 6443: __asm("POSTDEC1 equ 0FE5h");
[; <" POSTDEC1 equ 0FE5h ;# ">
"6450
[; ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\include\pic18f4520.h: 6450: __asm("POSTINC1 equ 0FE6h");
[; <" POSTINC1 equ 0FE6h ;# ">
"6457
[; ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\include\pic18f4520.h: 6457: __asm("INDF1 equ 0FE7h");
[; <" INDF1 equ 0FE7h ;# ">
"6464
[; ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\include\pic18f4520.h: 6464: __asm("WREG equ 0FE8h");
[; <" WREG equ 0FE8h ;# ">
"6476
[; ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\include\pic18f4520.h: 6476: __asm("FSR0 equ 0FE9h");
[; <" FSR0 equ 0FE9h ;# ">
"6483
[; ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\include\pic18f4520.h: 6483: __asm("FSR0L equ 0FE9h");
[; <" FSR0L equ 0FE9h ;# ">
"6490
[; ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\include\pic18f4520.h: 6490: __asm("FSR0H equ 0FEAh");
[; <" FSR0H equ 0FEAh ;# ">
"6497
[; ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\include\pic18f4520.h: 6497: __asm("PLUSW0 equ 0FEBh");
[; <" PLUSW0 equ 0FEBh ;# ">
"6504
[; ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\include\pic18f4520.h: 6504: __asm("PREINC0 equ 0FECh");
[; <" PREINC0 equ 0FECh ;# ">
"6511
[; ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\include\pic18f4520.h: 6511: __asm("POSTDEC0 equ 0FEDh");
[; <" POSTDEC0 equ 0FEDh ;# ">
"6518
[; ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\include\pic18f4520.h: 6518: __asm("POSTINC0 equ 0FEEh");
[; <" POSTINC0 equ 0FEEh ;# ">
"6525
[; ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\include\pic18f4520.h: 6525: __asm("INDF0 equ 0FEFh");
[; <" INDF0 equ 0FEFh ;# ">
"6532
[; ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\include\pic18f4520.h: 6532: __asm("INTCON3 equ 0FF0h");
[; <" INTCON3 equ 0FF0h ;# ">
"6624
[; ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\include\pic18f4520.h: 6624: __asm("INTCON2 equ 0FF1h");
[; <" INTCON2 equ 0FF1h ;# ">
"6694
[; ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\include\pic18f4520.h: 6694: __asm("INTCON equ 0FF2h");
[; <" INTCON equ 0FF2h ;# ">
"6811
[; ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\include\pic18f4520.h: 6811: __asm("PROD equ 0FF3h");
[; <" PROD equ 0FF3h ;# ">
"6818
[; ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\include\pic18f4520.h: 6818: __asm("PRODL equ 0FF3h");
[; <" PRODL equ 0FF3h ;# ">
"6825
[; ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\include\pic18f4520.h: 6825: __asm("PRODH equ 0FF4h");
[; <" PRODH equ 0FF4h ;# ">
"6832
[; ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\include\pic18f4520.h: 6832: __asm("TABLAT equ 0FF5h");
[; <" TABLAT equ 0FF5h ;# ">
"6841
[; ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\include\pic18f4520.h: 6841: __asm("TBLPTR equ 0FF6h");
[; <" TBLPTR equ 0FF6h ;# ">
"6848
[; ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\include\pic18f4520.h: 6848: __asm("TBLPTRL equ 0FF6h");
[; <" TBLPTRL equ 0FF6h ;# ">
"6855
[; ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\include\pic18f4520.h: 6855: __asm("TBLPTRH equ 0FF7h");
[; <" TBLPTRH equ 0FF7h ;# ">
"6862
[; ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\include\pic18f4520.h: 6862: __asm("TBLPTRU equ 0FF8h");
[; <" TBLPTRU equ 0FF8h ;# ">
"6871
[; ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\include\pic18f4520.h: 6871: __asm("PCLAT equ 0FF9h");
[; <" PCLAT equ 0FF9h ;# ">
"6878
[; ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\include\pic18f4520.h: 6878: __asm("PC equ 0FF9h");
[; <" PC equ 0FF9h ;# ">
"6885
[; ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\include\pic18f4520.h: 6885: __asm("PCL equ 0FF9h");
[; <" PCL equ 0FF9h ;# ">
"6892
[; ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\include\pic18f4520.h: 6892: __asm("PCLATH equ 0FFAh");
[; <" PCLATH equ 0FFAh ;# ">
"6899
[; ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\include\pic18f4520.h: 6899: __asm("PCLATU equ 0FFBh");
[; <" PCLATU equ 0FFBh ;# ">
"6906
[; ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\include\pic18f4520.h: 6906: __asm("STKPTR equ 0FFCh");
[; <" STKPTR equ 0FFCh ;# ">
"6980
[; ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\include\pic18f4520.h: 6980: __asm("TOS equ 0FFDh");
[; <" TOS equ 0FFDh ;# ">
"6987
[; ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\include\pic18f4520.h: 6987: __asm("TOSL equ 0FFDh");
[; <" TOSL equ 0FFDh ;# ">
"6994
[; ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\include\pic18f4520.h: 6994: __asm("TOSH equ 0FFEh");
[; <" TOSH equ 0FFEh ;# ">
"7001
[; ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\include\pic18f4520.h: 7001: __asm("TOSU equ 0FFFh");
[; <" TOSU equ 0FFFh ;# ">
"11 ./shapes.h
[; ;./shapes.h: 11: shapes[] =
[v _shapes `S281 ~T0 @X0 -> 7 `i e ]
[i _shapes
:U ..
:U ..
:U ..
-> -> 0 `i `us
-> -> 0 `i `us
-> -> 0 `i `us
-> -> 1 `i `us
-> -> 3 `i `us
-> -> 1 `i `us
-> -> 0 `i `us
-> -> 0 `i `us
..
-> -> 4 `i `uc
-> -> 0 `i `uc
-> -> 0 `i `uc
..
:U ..
:U ..
-> -> 0 `i `us
-> -> 0 `i `us
-> -> 1 `i `us
-> -> 1 `i `us
-> -> 1 `i `us
-> -> 1 `i `us
-> -> 0 `i `us
-> -> 0 `i `us
..
-> -> 4 `i `uc
-> -> 0 `i `uc
-> -> 1 `i `uc
..
:U ..
:U ..
-> -> 0 `i `us
-> -> 0 `i `us
-> -> 0 `i `us
-> -> 3 `i `us
-> -> 1 `i `us
-> -> 1 `i `us
-> -> 0 `i `us
-> -> 0 `i `us
..
-> -> 4 `i `uc
-> -> 0 `i `uc
-> -> 0 `i `uc
..
:U ..
:U ..
-> -> 0 `i `us
-> -> 0 `i `us
-> -> 0 `i `us
-> -> 1 `i `us
-> -> 1 `i `us
-> -> 3 `i `us
-> -> 0 `i `us
-> -> 0 `i `us
..
-> -> 4 `i `uc
-> -> 0 `i `uc
-> -> 0 `i `uc
..
:U ..
:U ..
-> -> 0 `i `us
-> -> 0 `i `us
-> -> 0 `i `us
-> -> 3 `i `us
-> -> 3 `i `us
-> -> 0 `i `us
-> -> 0 `i `us
-> -> 0 `i `us
..
-> -> 3 `i `uc
-> -> 1 `i `uc
-> -> 2 `i `uc
..
:U ..
:U ..
-> -> 0 `i `us
-> -> 0 `i `us
-> -> 0 `i `us
-> -> 2 `i `us
-> -> 3 `i `us
-> -> 1 `i `us
-> -> 0 `i `us
-> -> 0 `i `us
..
-> -> 4 `i `uc
-> -> 1 `i `uc
-> -> 1 `i `uc
..
:U ..
:U ..
-> -> 0 `i `us
-> -> 0 `i `us
-> -> 0 `i `us
-> -> 1 `i `us
-> -> 3 `i `us
-> -> 2 `i `us
-> -> 0 `i `us
-> -> 0 `i `us
..
-> -> 4 `i `uc
-> -> 1 `i `uc
-> -> 1 `i `uc
..
..
]
"6 ./config.h
[p x OSC = INTIO67 ]
"7
[p x FCMEN = OFF ]
"8
[p x IESO = OFF ]
"11
[p x PWRT = OFF ]
"12
[p x BOREN = SBORDIS ]
"13
[p x BORV = 3 ]
"16
[p x WDT = OFF ]
"17
[p x WDTPS = 32768 ]
"20
[p x CCP2MX = PORTC ]
"21
[p x PBADEN = OFF ]
"22
[p x LPT1OSC = OFF ]
"23
[p x MCLRE = ON ]
"26
[p x STVREN = ON ]
"27
[p x LVP = OFF ]
"28
[p x XINST = OFF ]
"31
[p x CP0 = OFF ]
"32
[p x CP1 = OFF ]
"33
[p x CP2 = OFF ]
"34
[p x CP3 = OFF ]
"37
[p x CPB = OFF ]
"38
[p x CPD = OFF ]
"41
[p x WRT0 = OFF ]
"42
[p x WRT1 = OFF ]
"43
[p x WRT2 = OFF ]
"44
[p x WRT3 = OFF ]
"47
[p x WRTC = OFF ]
"48
[p x WRTB = OFF ]
"49
[p x WRTD = OFF ]
"52
[p x EBTR0 = OFF ]
"53
[p x EBTR1 = OFF ]
"54
[p x EBTR2 = OFF ]
"55
[p x EBTR3 = OFF ]
"58
[p x EBTRB = OFF ]
"22 tetris.c
[; ;tetris.c: 22: const uint16_t TETRIS[] = {
[v _TETRIS `Cus ~T0 @X0 -> 8 `i e ]
[i _TETRIS
:U ..
-> -> 34881 `ui `us
-> -> 64479 `ui `us
-> -> 34881 `ui `us
-> -> 0 `i `us
-> -> 39903 `ui `us
-> -> 43349 `ui `us
-> -> 51857 `ui `us
-> -> 0 `i `us
..
]
"33
[; ;tetris.c: 33: volatile _Bool DropObject;
[v _DropObject `Va ~T0 @X0 1 e ]
"35
[; ;tetris.c: 35: void tetris_screen(void)
[v _tetris_screen `(v ~T0 @X0 1 ef ]
"36
[; ;tetris.c: 36: {
{
[e :U _tetris_screen ]
[f ]
"37
[; ;tetris.c: 37:     set_splashscreen(TETRIS);
[e ( _set_splashscreen (1 &U _TETRIS ]
"38
[; ;tetris.c: 38:     waitms(3500);
[e ( _waitms (1 -> -> 3500 `i `ui ]
"39
[; ;tetris.c: 39: }
[e :UE 283 ]
}
"41
[; ;tetris.c: 41: void selectNextObject(struct tetris *tetris)
[v _selectNextObject `(v ~T0 @X0 1 ef1`*S282 ]
"42
[; ;tetris.c: 42: {
{
[e :U _selectNextObject ]
"41
[; ;tetris.c: 41: void selectNextObject(struct tetris *tetris)
[v _tetris `*S282 ~T0 @X0 1 r1 ]
"42
[; ;tetris.c: 42: {
[f ]
"43
[; ;tetris.c: 43:     struct shape *s;
[v _s `*S281 ~T0 @X0 1 a ]
"44
[; ;tetris.c: 44:     if (tetris->countblocks == 7)
[e $ ! == -> . *U _tetris 2 `i -> 7 `i 285  ]
"45
[; ;tetris.c: 45:     {
{
"46
[; ;tetris.c: 46:         _Bool check[7];
[v _check `a ~T0 @X0 -> 7 `i a ]
"47
[; ;tetris.c: 47:         tetris->countblocks = 0;
[e = . *U _tetris 2 -> -> 0 `i `uc ]
"48
[; ;tetris.c: 48:         {
{
"49
[; ;tetris.c: 49:         uint8_t counter = 7;
[v _counter `uc ~T0 @X0 1 a ]
[e = _counter -> -> 7 `i `uc ]
"50
[; ;tetris.c: 50:         while(counter--)
[e $U 286  ]
[e :U 287 ]
"51
[; ;tetris.c: 51:         {
{
"52
[; ;tetris.c: 52:             tetris->randomobjects[counter] = 255;
[e = *U + &U . *U _tetris 3 * -> _counter `ux -> -> # *U &U . *U _tetris 3 `ui `ux -> -> 255 `i `uc ]
"53
[; ;tetris.c: 53:             check[counter] = 0;
[e = *U + &U _check * -> _counter `ux -> -> # *U &U _check `ui `ux -> -> 0 `i `a ]
"54
[; ;tetris.c: 54:         }
}
[e :U 286 ]
"50
[; ;tetris.c: 50:         while(counter--)
[e $ != -> -- _counter -> -> 1 `i `uc `i -> 0 `i 287  ]
[e :U 288 ]
"55
[; ;tetris.c: 55:         }
}
"56
[; ;tetris.c: 56:         {
{
"57
[; ;tetris.c: 57:         uint8_t counter = 7;
[v _counter `uc ~T0 @X0 1 a ]
[e = _counter -> -> 7 `i `uc ]
"58
[; ;tetris.c: 58:         while(counter--)
[e $U 289  ]
[e :U 290 ]
"59
[; ;tetris.c: 59:         {
{
"60
[; ;tetris.c: 60:             _Bool fill = 0;
[v _fill `a ~T0 @X0 1 a ]
[e = _fill -> -> 0 `i `a ]
"61
[; ;tetris.c: 61:             do
[e :U 294 ]
"62
[; ;tetris.c: 62:             {
{
"63
[; ;tetris.c: 63:                 uint8_t rndSelection = rnd_get_num();
[v _rndSelection `uc ~T0 @X0 1 a ]
[e = _rndSelection -> ( _rnd_get_num ..  `uc ]
"64
[; ;tetris.c: 64:                 rndSelection = rndSelection % 7;
[e = _rndSelection -> % -> _rndSelection `i -> 7 `i `uc ]
"65
[; ;tetris.c: 65:                 if(check[rndSelection] == 0)
[e $ ! == -> *U + &U _check * -> _rndSelection `ux -> -> # *U &U _check `ui `ux `i -> 0 `i 295  ]
"66
[; ;tetris.c: 66:                 {
{
"67
[; ;tetris.c: 67:                     tetris->randomobjects[counter] = rndSelection;
[e = *U + &U . *U _tetris 3 * -> _counter `ux -> -> # *U &U . *U _tetris 3 `ui `ux _rndSelection ]
"68
[; ;tetris.c: 68:                     check[rndSelection] = 1;
[e = *U + &U _check * -> _rndSelection `ux -> -> # *U &U _check `ui `ux -> -> 1 `i `a ]
"69
[; ;tetris.c: 69:                     fill = 1;
[e = _fill -> -> 1 `i `a ]
"70
[; ;tetris.c: 70:                 }
}
[e :U 295 ]
"71
[; ;tetris.c: 71:             }
}
[e $ ! != -> _fill `i -> 0 `i 294  ]
[e :U 293 ]
"73
[; ;tetris.c: 73:         }
}
[e :U 289 ]
"58
[; ;tetris.c: 58:         while(counter--)
[e $ != -> -- _counter -> -> 1 `i `uc `i -> 0 `i 290  ]
[e :U 291 ]
"74
[; ;tetris.c: 74:         }
}
"75
[; ;tetris.c: 75:     }
}
[e :U 285 ]
"76
[; ;tetris.c: 76:     s = &shapes[tetris->randomobjects[tetris->countblocks]];
[e = _s &U *U + &U _shapes * -> *U + &U . *U _tetris 3 * -> . *U _tetris 2 `ux -> -> # *U &U . *U _tetris 3 `ui `ux `ux -> -> # *U &U _shapes `ui `ux ]
"77
[; ;tetris.c: 77:     struct shape *NewBlock = &tetris->currentblock;
[v _NewBlock `*S281 ~T0 @X0 1 a ]
[e = _NewBlock &U . *U _tetris 0 ]
"78
[; ;tetris.c: 78:     memcpyvol(NewBlock->graphic, s->graphic, 16);
[e ( _memcpyvol (3 , , -> &U . *U _NewBlock 0 `*Vv -> &U . *U _s 0 `*Cv -> -> 16 `i `ui ]
"79
[; ;tetris.c: 79:     NewBlock->x = s->x;
[e = . *U _NewBlock 1 . *U _s 1 ]
"80
[; ;tetris.c: 80:     NewBlock->y = s->y;
[e = . *U _NewBlock 2 . *U _s 2 ]
"81
[; ;tetris.c: 81:     tetris->IsRotated = 0;
[e = . *U _tetris 1 -> -> 0 `i `a ]
"82
[; ;tetris.c: 82:     NewBlock->limitedRotation = s->limitedRotation;
[e = . *U _NewBlock 3 . *U _s 3 ]
"83
[; ;tetris.c: 83:     set_mS(0);
[e ( _set_mS (1 -> -> 0 `i `us ]
"84
[; ;tetris.c: 84:     tetris->countblocks++;
[e ++ . *U _tetris 2 -> -> 1 `i `uc ]
"85
[; ;tetris.c: 85: }
[e :UE 284 ]
}
"87
[; ;tetris.c: 87: _Bool checkForBottom(volatile uint16_t * pObject)
[v _checkForBottom `(a ~T0 @X0 1 ef1`*Vus ]
"88
[; ;tetris.c: 88: {
{
[e :U _checkForBottom ]
"87
[; ;tetris.c: 87: _Bool checkForBottom(volatile uint16_t * pObject)
[v _pObject `*Vus ~T0 @X0 1 r1 ]
"88
[; ;tetris.c: 88: {
[f ]
"89
[; ;tetris.c: 89:     for(uint8_t i = 0; i < 8; i++)
{
[v _i `uc ~T0 @X0 1 a ]
[e = _i -> -> 0 `i `uc ]
[e $ < -> _i `i -> 8 `i 297  ]
[e $U 298  ]
[e :U 297 ]
"90
[; ;tetris.c: 90:         if(pObject[i] & (1<<15))
[e $ ! != & -> *U + _pObject * -> _i `ux -> -> # *U _pObject `ui `ux `ui -> << -> 1 `i -> 15 `i `ui -> -> 0 `i `ui 300  ]
"91
[; ;tetris.c: 91:             return 1;
[e ) -> -> 1 `i `a ]
[e $UE 296  ]
[e :U 300 ]
[e ++ _i -> -> 1 `i `uc ]
[e $ < -> _i `i -> 8 `i 297  ]
[e :U 298 ]
}
"92
[; ;tetris.c: 92:     return 0;
[e ) -> -> 0 `i `a ]
[e $UE 296  ]
"93
[; ;tetris.c: 93: }
[e :UE 296 ]
}
"98
[; ;tetris.c: 98: void moveObjecttetris(struct shape *tetrisblock, direction_t direction, uint8_t cycles)
[v _moveObjecttetris `(v ~T0 @X0 1 ef3`*S281`E2580`uc ]
"99
[; ;tetris.c: 99: {
{
[e :U _moveObjecttetris ]
"98
[; ;tetris.c: 98: void moveObjecttetris(struct shape *tetrisblock, direction_t direction, uint8_t cycles)
[v _tetrisblock `*S281 ~T0 @X0 1 r1 ]
[v _direction `E2580 ~T0 @X0 1 r2 ]
[v _cycles `uc ~T0 @X0 1 r3 ]
"99
[; ;tetris.c: 99: {
[f ]
"100
[; ;tetris.c: 100:     uint8_t i, c;
[v _i `uc ~T0 @X0 1 a ]
[v _c `uc ~T0 @X0 1 a ]
"102
[; ;tetris.c: 102:     switch(direction)
[e $U 303  ]
"103
[; ;tetris.c: 103:     {
{
"104
[; ;tetris.c: 104:         case DOWN:
[e :U 304 ]
"105
[; ;tetris.c: 105:             for(c = 0; c < cycles; c++)
{
[e = _c -> -> 0 `i `uc ]
[e $U 308  ]
[e :U 305 ]
"106
[; ;tetris.c: 106:             {
{
"107
[; ;tetris.c: 107:                 for(i = 0; i < 8; i++) {tetrisblock->graphic[i] <<= 1; }
{
[e = _i -> -> 0 `i `uc ]
[e $ < -> _i `i -> 8 `i 309  ]
[e $U 310  ]
[e :U 309 ]
{
[e =<< *U + &U . *U _tetrisblock 0 * -> _i `ux -> -> # *U &U . *U _tetrisblock 0 `ui `ux -> -> 1 `i `us ]
}
[e ++ _i -> -> 1 `i `uc ]
[e $ < -> _i `i -> 8 `i 309  ]
[e :U 310 ]
}
"108
[; ;tetris.c: 108:                 tetrisblock->y = tetrisblock->y + 1;
[e = . *U _tetrisblock 2 -> + -> . *U _tetrisblock 2 `i -> 1 `i `uc ]
"109
[; ;tetris.c: 109:             }
}
[e ++ _c -> -> 1 `i `uc ]
[e :U 308 ]
[e $ < -> _c `i -> _cycles `i 305  ]
[e :U 306 ]
}
"110
[; ;tetris.c: 110:             break;
[e $U 302  ]
"111
[; ;tetris.c: 111:         case UP:
[e :U 312 ]
"112
[; ;tetris.c: 112:             for(c = 0; c < cycles; c++)
{
[e = _c -> -> 0 `i `uc ]
[e $U 316  ]
[e :U 313 ]
"113
[; ;tetris.c: 113:             {
{
"114
[; ;tetris.c: 114:                 for(i = 0; i < 8; i++) {tetrisblock->graphic[i] >>= 1; }
{
[e = _i -> -> 0 `i `uc ]
[e $ < -> _i `i -> 8 `i 317  ]
[e $U 318  ]
[e :U 317 ]
{
[e =>> *U + &U . *U _tetrisblock 0 * -> _i `ux -> -> # *U &U . *U _tetrisblock 0 `ui `ux -> -> 1 `i `us ]
}
[e ++ _i -> -> 1 `i `uc ]
[e $ < -> _i `i -> 8 `i 317  ]
[e :U 318 ]
}
"115
[; ;tetris.c: 115:                 tetrisblock->y = tetrisblock->y - 1;
[e = . *U _tetrisblock 2 -> - -> . *U _tetrisblock 2 `i -> 1 `i `uc ]
"116
[; ;tetris.c: 116:             }
}
[e ++ _c -> -> 1 `i `uc ]
[e :U 316 ]
[e $ < -> _c `i -> _cycles `i 313  ]
[e :U 314 ]
}
"117
[; ;tetris.c: 117:             break;
[e $U 302  ]
"118
[; ;tetris.c: 118:         case RIGHT:
[e :U 320 ]
"119
[; ;tetris.c: 119:             for(c = 0; c < cycles; c++)
{
[e = _c -> -> 0 `i `uc ]
[e $U 324  ]
[e :U 321 ]
"120
[; ;tetris.c: 120:             {
{
"121
[; ;tetris.c: 121:                 for(i = 7; i > 0; i--) {tetrisblock->graphic[i] = tetrisblock->graphic[i - 1]; }
{
[e = _i -> -> 7 `i `uc ]
[e $ > -> _i `i -> 0 `i 325  ]
[e $U 326  ]
[e :U 325 ]
{
[e = *U + &U . *U _tetrisblock 0 * -> _i `ux -> -> # *U &U . *U _tetrisblock 0 `ui `ux *U + &U . *U _tetrisblock 0 * -> -> - -> _i `i -> 1 `i `ui `ux -> -> # *U &U . *U _tetrisblock 0 `ui `ux ]
}
[e -- _i -> -> 1 `i `uc ]
[e $ > -> _i `i -> 0 `i 325  ]
[e :U 326 ]
}
"122
[; ;tetris.c: 122:                 tetrisblock->graphic[0] = 0;
[e = *U + &U . *U _tetrisblock 0 * -> -> -> 0 `i `ui `ux -> -> # *U &U . *U _tetrisblock 0 `ui `ux -> -> 0 `i `us ]
"123
[; ;tetris.c: 123:                 tetrisblock->x = tetrisblock->x + 1;
[e = . *U _tetrisblock 1 -> + -> . *U _tetrisblock 1 `i -> 1 `i `uc ]
"124
[; ;tetris.c: 124:             }
}
[e ++ _c -> -> 1 `i `uc ]
[e :U 324 ]
[e $ < -> _c `i -> _cycles `i 321  ]
[e :U 322 ]
}
"125
[; ;tetris.c: 125:             break;
[e $U 302  ]
"126
[; ;tetris.c: 126:         case LEFT:
[e :U 328 ]
"127
[; ;tetris.c: 127:             for(c = 0; c < cycles; c++)
{
[e = _c -> -> 0 `i `uc ]
[e $U 332  ]
[e :U 329 ]
"128
[; ;tetris.c: 128:             {
{
"129
[; ;tetris.c: 129:                 for(i = 0; i < 7; i++) {tetrisblock->graphic[i] = tetrisblock->graphic[i + 1];}
{
[e = _i -> -> 0 `i `uc ]
[e $ < -> _i `i -> 7 `i 333  ]
[e $U 334  ]
[e :U 333 ]
{
[e = *U + &U . *U _tetrisblock 0 * -> _i `ux -> -> # *U &U . *U _tetrisblock 0 `ui `ux *U + &U . *U _tetrisblock 0 * -> -> + -> _i `i -> 1 `i `ui `ux -> -> # *U &U . *U _tetrisblock 0 `ui `ux ]
}
[e ++ _i -> -> 1 `i `uc ]
[e $ < -> _i `i -> 7 `i 333  ]
[e :U 334 ]
}
"130
[; ;tetris.c: 130:                 tetrisblock->graphic[7] = 0;
[e = *U + &U . *U _tetrisblock 0 * -> -> -> 7 `i `ui `ux -> -> # *U &U . *U _tetrisblock 0 `ui `ux -> -> 0 `i `us ]
"131
[; ;tetris.c: 131:                 tetrisblock->x = tetrisblock->x - 1;
[e = . *U _tetrisblock 1 -> - -> . *U _tetrisblock 1 `i -> 1 `i `uc ]
"132
[; ;tetris.c: 132:             }
}
[e ++ _c -> -> 1 `i `uc ]
[e :U 332 ]
[e $ < -> _c `i -> _cycles `i 329  ]
[e :U 330 ]
}
"133
[; ;tetris.c: 133:     }
}
[e $U 302  ]
[e :U 303 ]
[e [\ -> _direction `ui , $ -> . `E2580 0 `ui 304
 , $ -> . `E2580 1 `ui 312
 , $ -> . `E2580 3 `ui 320
 , $ -> . `E2580 2 `ui 328
 302 ]
[e :U 302 ]
"134
[; ;tetris.c: 134: }
[e :UE 301 ]
}
"138
[; ;tetris.c: 138: _Bool moveObjectDown(struct tetris *tetris, uint16_t *BackgroundData, _Bool *CheckForNewLines, _Bool *EndOfGame)
[v _moveObjectDown `(a ~T0 @X0 1 ef4`*S282`*us`*a`*a ]
"139
[; ;tetris.c: 139: {
{
[e :U _moveObjectDown ]
"138
[; ;tetris.c: 138: _Bool moveObjectDown(struct tetris *tetris, uint16_t *BackgroundData, _Bool *CheckForNewLines, _Bool *EndOfGame)
[v _tetris `*S282 ~T0 @X0 1 r1 ]
[v _BackgroundData `*us ~T0 @X0 1 r2 ]
[v _CheckForNewLines `*a ~T0 @X0 1 r3 ]
[v _EndOfGame `*a ~T0 @X0 1 r4 ]
"139
[; ;tetris.c: 139: {
[f ]
"140
[; ;tetris.c: 140:     struct shape *tetrisblock = &tetris->currentblock;
[v _tetrisblock `*S281 ~T0 @X0 1 a ]
[e = _tetrisblock &U . *U _tetris 0 ]
"141
[; ;tetris.c: 141:     _Bool result = 1;
[v _result `a ~T0 @X0 1 a ]
[e = _result -> -> 1 `i `a ]
"144
[; ;tetris.c: 144:     if(checkForBottom(tetrisblock->graphic))
[e $ ! != -> ( _checkForBottom (1 -> &U . *U _tetrisblock 0 `*Vus `i -> 0 `i 337  ]
"145
[; ;tetris.c: 145:     {
{
"147
[; ;tetris.c: 147:         result = 0;
[e = _result -> -> 0 `i `a ]
"149
[; ;tetris.c: 149:         mergeObjects(tetrisblock->graphic, BackgroundData, MERGE);
[e ( _mergeObjects (3 , , -> &U . *U _tetrisblock 0 `*Vus -> _BackgroundData `*Vus . `E2575 1 ]
"151
[; ;tetris.c: 151:         selectNextObject(tetris);
[e ( _selectNextObject (1 _tetris ]
"153
[; ;tetris.c: 153:         *CheckForNewLines = 1;
[e = *U _CheckForNewLines -> -> 1 `i `a ]
"154
[; ;tetris.c: 154:     }
}
[e $U 338  ]
"155
[; ;tetris.c: 155:     else
[e :U 337 ]
"156
[; ;tetris.c: 156:     {
{
"158
[; ;tetris.c: 158:         moveObjecttetris(tetrisblock, DOWN, 1);
[e ( _moveObjecttetris (3 , , _tetrisblock . `E2580 0 -> -> 1 `i `uc ]
"160
[; ;tetris.c: 160:         if(collisionDetect(tetrisblock->graphic, BackgroundData))
[e $ ! != -> ( _collisionDetect (2 , -> &U . *U _tetrisblock 0 `*Vus -> _BackgroundData `*Vus `i -> 0 `i 339  ]
"161
[; ;tetris.c: 161:         {
{
"164
[; ;tetris.c: 164:             result = 0;
[e = _result -> -> 0 `i `a ]
"166
[; ;tetris.c: 166:             moveObjecttetris(tetrisblock, UP, 1);
[e ( _moveObjecttetris (3 , , _tetrisblock . `E2580 1 -> -> 1 `i `uc ]
"168
[; ;tetris.c: 168:             mergeObjects(tetrisblock->graphic, BackgroundData, MERGE);
[e ( _mergeObjects (3 , , -> &U . *U _tetrisblock 0 `*Vus -> _BackgroundData `*Vus . `E2575 1 ]
"170
[; ;tetris.c: 170:             selectNextObject(tetris);
[e ( _selectNextObject (1 _tetris ]
"173
[; ;tetris.c: 173:             *EndOfGame = collisionDetect(tetrisblock->graphic, BackgroundData);
[e = *U _EndOfGame ( _collisionDetect (2 , -> &U . *U _tetrisblock 0 `*Vus -> _BackgroundData `*Vus ]
"175
[; ;tetris.c: 175:             *CheckForNewLines = 1;
[e = *U _CheckForNewLines -> -> 1 `i `a ]
"176
[; ;tetris.c: 176:         }
}
[e :U 339 ]
"177
[; ;tetris.c: 177:     }
}
[e :U 338 ]
"178
[; ;tetris.c: 178:     set_mS(0);
[e ( _set_mS (1 -> -> 0 `i `us ]
"180
[; ;tetris.c: 180:     return result;
[e ) _result ]
[e $UE 336  ]
"181
[; ;tetris.c: 181: }
[e :UE 336 ]
}
"196
[; ;tetris.c: 196: void newRotation(struct tetris *tetris, uint16_t * pTarget, rotation_t *rotation)
[v _newRotation `(v ~T0 @X0 1 ef3`*S282`*us`*E2586 ]
"197
[; ;tetris.c: 197: {
{
[e :U _newRotation ]
"196
[; ;tetris.c: 196: void newRotation(struct tetris *tetris, uint16_t * pTarget, rotation_t *rotation)
[v _tetris `*S282 ~T0 @X0 1 r1 ]
[v _pTarget `*us ~T0 @X0 1 r2 ]
[v _rotation `*E2586 ~T0 @X0 1 r3 ]
"197
[; ;tetris.c: 197: {
[f ]
"198
[; ;tetris.c: 198:     int8_t x2, y2;
[v _x2 `c ~T0 @X0 1 a ]
[v _y2 `c ~T0 @X0 1 a ]
"199
[; ;tetris.c: 199:     uint8_t x1, y1;
[v _x1 `uc ~T0 @X0 1 a ]
[v _y1 `uc ~T0 @X0 1 a ]
"200
[; ;tetris.c: 200:     struct shape *tetrisblock = &tetris->currentblock;
[v _tetrisblock `*S281 ~T0 @X0 1 a ]
[e = _tetrisblock &U . *U _tetris 0 ]
"202
[; ;tetris.c: 202:     if(tetrisblock->limitedRotation == 2)
[e $ ! == -> . *U _tetrisblock 3 `i -> 2 `i 341  ]
"203
[; ;tetris.c: 203:     {
{
"204
[; ;tetris.c: 204:         memcpyvol(pTarget, tetrisblock->graphic, 16);
[e ( _memcpyvol (3 , , -> _pTarget `*Vv -> &U . *U _tetrisblock 0 `*Cv -> -> 16 `i `ui ]
"205
[; ;tetris.c: 205:     }
}
[e $U 342  ]
"206
[; ;tetris.c: 206:     else
[e :U 341 ]
"207
[; ;tetris.c: 207:     {
{
"209
[; ;tetris.c: 209:         clearArray(pTarget, 8);
[e ( _clearArray (2 , -> _pTarget `*Vus -> -> 8 `i `ui ]
"214
[; ;tetris.c: 214:         if(tetrisblock->limitedRotation == 1 && tetris->IsRotated)
[e $ ! && == -> . *U _tetrisblock 3 `i -> 1 `i != -> . *U _tetris 1 `i -> 0 `i 343  ]
"215
[; ;tetris.c: 215:         {
{
"216
[; ;tetris.c: 216:             *rotation = CCW;
[e = *U _rotation . `E2586 0 ]
"217
[; ;tetris.c: 217:         }
}
[e :U 343 ]
"219
[; ;tetris.c: 219:         for(x1 = 0; x1 < 8; x1++)
{
[e = _x1 -> -> 0 `i `uc ]
[e $ < -> _x1 `i -> 8 `i 344  ]
[e $U 345  ]
[e :U 344 ]
"220
[; ;tetris.c: 220:         {
{
"221
[; ;tetris.c: 221:             for(y1 = 0; y1 < 16; y1++)
{
[e = _y1 -> -> 0 `i `uc ]
[e $ < -> _y1 `i -> 16 `i 347  ]
[e $U 348  ]
[e :U 347 ]
"222
[; ;tetris.c: 222:             {
{
"223
[; ;tetris.c: 223:                 if(tetrisblock->graphic[x1] & (1<<y1))
[e $ ! != & -> *U + &U . *U _tetrisblock 0 * -> _x1 `ux -> -> # *U &U . *U _tetrisblock 0 `ui `ux `ui -> << -> 1 `i -> _y1 `i `ui -> -> 0 `i `ui 350  ]
"224
[; ;tetris.c: 224:                 {
{
"225
[; ;tetris.c: 225:                     if(*rotation == CW)
[e $ ! == -> *U _rotation `ui -> . `E2586 1 `ui 351  ]
"226
[; ;tetris.c: 226:                     {
{
"227
[; ;tetris.c: 227:                         x2 = tetrisblock->x + tetrisblock->y - y1;
[e = _x2 -> - + -> . *U _tetrisblock 1 `i -> . *U _tetrisblock 2 `i -> _y1 `i `c ]
"228
[; ;tetris.c: 228:                         y2 = x1 + tetrisblock->y - tetrisblock->x;
[e = _y2 -> - + -> _x1 `i -> . *U _tetrisblock 2 `i -> . *U _tetrisblock 1 `i `c ]
"229
[; ;tetris.c: 229:                     }
}
[e $U 352  ]
"230
[; ;tetris.c: 230:                     else
[e :U 351 ]
"231
[; ;tetris.c: 231:                     {
{
"232
[; ;tetris.c: 232:                         x2 = y1 + tetrisblock->x - tetrisblock->y;
[e = _x2 -> - + -> _y1 `i -> . *U _tetrisblock 1 `i -> . *U _tetrisblock 2 `i `c ]
"233
[; ;tetris.c: 233:                         y2 = tetrisblock->x + tetrisblock->y - x1;
[e = _y2 -> - + -> . *U _tetrisblock 1 `i -> . *U _tetrisblock 2 `i -> _x1 `i `c ]
"234
[; ;tetris.c: 234:                     }
}
[e :U 352 ]
"235
[; ;tetris.c: 235:                     if(x2 >= 0 && x2 < 8 && y2 >= 0 && y2 < 16)
[e $ ! && && && >= -> _x2 `i -> 0 `i < -> _x2 `i -> 8 `i >= -> _y2 `i -> 0 `i < -> _y2 `i -> 16 `i 353  ]
"236
[; ;tetris.c: 236:                         pTarget[x2] |= (1<<y2);
[e =| *U + _pTarget * -> _x2 `x -> -> # *U _pTarget `i `x -> << -> 1 `i -> _y2 `i `us ]
[e :U 353 ]
"237
[; ;tetris.c: 237:                 }
}
[e :U 350 ]
"238
[; ;tetris.c: 238:             }
}
[e ++ _y1 -> -> 1 `i `uc ]
[e $ < -> _y1 `i -> 16 `i 347  ]
[e :U 348 ]
}
"239
[; ;tetris.c: 239:         }
}
[e ++ _x1 -> -> 1 `i `uc ]
[e $ < -> _x1 `i -> 8 `i 344  ]
[e :U 345 ]
}
"240
[; ;tetris.c: 240:     }
}
[e :U 342 ]
"241
[; ;tetris.c: 241: }
[e :UE 340 ]
}
"245
[; ;tetris.c: 245: uint8_t checkForLines(uint16_t * pObject)
[v _checkForLines `(uc ~T0 @X0 1 ef1`*us ]
"246
[; ;tetris.c: 246: {
{
[e :U _checkForLines ]
"245
[; ;tetris.c: 245: uint8_t checkForLines(uint16_t * pObject)
[v _pObject `*us ~T0 @X0 1 r1 ]
"246
[; ;tetris.c: 246: {
[f ]
"247
[; ;tetris.c: 247:     uint8_t x, y, pixels;
[v _x `uc ~T0 @X0 1 a ]
[v _y `uc ~T0 @X0 1 a ]
[v _pixels `uc ~T0 @X0 1 a ]
"248
[; ;tetris.c: 248:     uint8_t NumberOfLines = 0;
[v _NumberOfLines `uc ~T0 @X0 1 a ]
[e = _NumberOfLines -> -> 0 `i `uc ]
"249
[; ;tetris.c: 249:     for(y = 0; y < 16; y++)
{
[e = _y -> -> 0 `i `uc ]
[e $ < -> _y `i -> 16 `i 355  ]
[e $U 356  ]
[e :U 355 ]
"250
[; ;tetris.c: 250:     {
{
"251
[; ;tetris.c: 251:         pixels = 0;
[e = _pixels -> -> 0 `i `uc ]
"252
[; ;tetris.c: 252:         for(x = 0; x < 8; x++)
{
[e = _x -> -> 0 `i `uc ]
[e $ < -> _x `i -> 8 `i 358  ]
[e $U 359  ]
[e :U 358 ]
"253
[; ;tetris.c: 253:             if(pObject[x] & (1<<y))
[e $ ! != & -> *U + _pObject * -> _x `ux -> -> # *U _pObject `ui `ux `ui -> << -> 1 `i -> _y `i `ui -> -> 0 `i `ui 361  ]
"254
[; ;tetris.c: 254:                 pixels++;
[e ++ _pixels -> -> 1 `i `uc ]
[e :U 361 ]
[e ++ _x -> -> 1 `i `uc ]
[e $ < -> _x `i -> 8 `i 358  ]
[e :U 359 ]
}
"255
[; ;tetris.c: 255:         if(pixels == 8)
[e $ ! == -> _pixels `i -> 8 `i 362  ]
"256
[; ;tetris.c: 256:         {
{
"257
[; ;tetris.c: 257:             removeLine(pObject, y);
[e ( _removeLine (2 , -> _pObject `*Vus _y ]
"258
[; ;tetris.c: 258:             NumberOfLines++;
[e ++ _NumberOfLines -> -> 1 `i `uc ]
"259
[; ;tetris.c: 259:         }
}
[e :U 362 ]
"260
[; ;tetris.c: 260:     }
}
[e ++ _y -> -> 1 `i `uc ]
[e $ < -> _y `i -> 16 `i 355  ]
[e :U 356 ]
}
"261
[; ;tetris.c: 261:     return NumberOfLines;
[e ) _NumberOfLines ]
[e $UE 354  ]
"262
[; ;tetris.c: 262: }
[e :UE 354 ]
}
"264
[; ;tetris.c: 264: _Bool tetris_button_left(struct shape *tetrisblock, uint16_t *BackgroundData)
[v _tetris_button_left `(a ~T0 @X0 1 ef2`*S281`*us ]
"265
[; ;tetris.c: 265: {
{
[e :U _tetris_button_left ]
"264
[; ;tetris.c: 264: _Bool tetris_button_left(struct shape *tetrisblock, uint16_t *BackgroundData)
[v _tetrisblock `*S281 ~T0 @X0 1 r1 ]
[v _BackgroundData `*us ~T0 @X0 1 r2 ]
"265
[; ;tetris.c: 265: {
[f ]
"266
[; ;tetris.c: 266:     if(!checkForLeftWall(tetrisblock->graphic))
[e $ ! ! != -> ( _checkForLeftWall (1 -> &U . *U _tetrisblock 0 `*Vus `i -> 0 `i 364  ]
"267
[; ;tetris.c: 267:     {
{
"268
[; ;tetris.c: 268:         uint16_t tmpObjectData[8];
[v _tmpObjectData `us ~T0 @X0 -> 8 `i a ]
"272
[; ;tetris.c: 272:         memcpyvol(tmpObjectData, tetrisblock->graphic, 16);
[e ( _memcpyvol (3 , , -> &U _tmpObjectData `*Vv -> &U . *U _tetrisblock 0 `*Cv -> -> 16 `i `ui ]
"274
[; ;tetris.c: 274:         moveObject(tmpObjectData, LEFT, 1);
[e ( _moveObject (3 , , &U _tmpObjectData . `E2580 2 -> -> 1 `i `uc ]
"276
[; ;tetris.c: 276:         if(!collisionDetect(tmpObjectData, BackgroundData))
[e $ ! ! != -> ( _collisionDetect (2 , -> &U _tmpObjectData `*Vus -> _BackgroundData `*Vus `i -> 0 `i 365  ]
"277
[; ;tetris.c: 277:         {
{
"278
[; ;tetris.c: 278:             pauseMultiplexing();
[e ( _pauseMultiplexing ..  ]
"279
[; ;tetris.c: 279:             mergeObjects(tmpObjectData, tetrisblock->graphic, OVERRIDE);
[e ( _mergeObjects (3 , , -> &U _tmpObjectData `*Vus -> &U . *U _tetrisblock 0 `*Vus . `E2575 0 ]
"280
[; ;tetris.c: 280:             resumeMultiplexing();
[e ( _resumeMultiplexing ..  ]
"281
[; ;tetris.c: 281:             tetrisblock->x--;
[e -- . *U _tetrisblock 1 -> -> 1 `i `uc ]
"282
[; ;tetris.c: 282:             return 1;
[e ) -> -> 1 `i `a ]
[e $UE 363  ]
"283
[; ;tetris.c: 283:         }
}
[e :U 365 ]
"284
[; ;tetris.c: 284:     }
}
[e :U 364 ]
"285
[; ;tetris.c: 285:     return 0;
[e ) -> -> 0 `i `a ]
[e $UE 363  ]
"287
[; ;tetris.c: 287: }
[e :UE 363 ]
}
"289
[; ;tetris.c: 289: _Bool tetris_button_right(struct shape *tetrisblock, uint16_t *BackgroundData)
[v _tetris_button_right `(a ~T0 @X0 1 ef2`*S281`*us ]
"290
[; ;tetris.c: 290: {
{
[e :U _tetris_button_right ]
"289
[; ;tetris.c: 289: _Bool tetris_button_right(struct shape *tetrisblock, uint16_t *BackgroundData)
[v _tetrisblock `*S281 ~T0 @X0 1 r1 ]
[v _BackgroundData `*us ~T0 @X0 1 r2 ]
"290
[; ;tetris.c: 290: {
[f ]
"291
[; ;tetris.c: 291:     if(!checkForRightWall(tetrisblock->graphic))
[e $ ! ! != -> ( _checkForRightWall (1 -> &U . *U _tetrisblock 0 `*Vus `i -> 0 `i 367  ]
"292
[; ;tetris.c: 292:     {
{
"293
[; ;tetris.c: 293:         uint16_t tmpObjectData[8];
[v _tmpObjectData `us ~T0 @X0 -> 8 `i a ]
"295
[; ;tetris.c: 295:         mergeObjects(tetrisblock->graphic, tmpObjectData, OVERRIDE);
[e ( _mergeObjects (3 , , -> &U . *U _tetrisblock 0 `*Vus -> &U _tmpObjectData `*Vus . `E2575 0 ]
"296
[; ;tetris.c: 296:         moveObject(tmpObjectData, RIGHT, 1);
[e ( _moveObject (3 , , &U _tmpObjectData . `E2580 3 -> -> 1 `i `uc ]
"298
[; ;tetris.c: 298:         if(!collisionDetect(tmpObjectData, BackgroundData))
[e $ ! ! != -> ( _collisionDetect (2 , -> &U _tmpObjectData `*Vus -> _BackgroundData `*Vus `i -> 0 `i 368  ]
"299
[; ;tetris.c: 299:         {
{
"300
[; ;tetris.c: 300:             pauseMultiplexing();
[e ( _pauseMultiplexing ..  ]
"301
[; ;tetris.c: 301:             mergeObjects(tmpObjectData, tetrisblock->graphic, OVERRIDE);
[e ( _mergeObjects (3 , , -> &U _tmpObjectData `*Vus -> &U . *U _tetrisblock 0 `*Vus . `E2575 0 ]
"302
[; ;tetris.c: 302:             resumeMultiplexing();
[e ( _resumeMultiplexing ..  ]
"303
[; ;tetris.c: 303:             tetrisblock->x++;
[e ++ . *U _tetrisblock 1 -> -> 1 `i `uc ]
"304
[; ;tetris.c: 304:             return 1;
[e ) -> -> 1 `i `a ]
[e $UE 366  ]
"305
[; ;tetris.c: 305:         }
}
[e :U 368 ]
"306
[; ;tetris.c: 306:     }
}
[e :U 367 ]
"307
[; ;tetris.c: 307:     return 0;
[e ) -> -> 0 `i `a ]
[e $UE 366  ]
"308
[; ;tetris.c: 308: }
[e :UE 366 ]
}
"310
[; ;tetris.c: 310: void tetris_button_up(struct tetris *tetris, uint16_t *BackgroundData, rotation_t *rotation)
[v _tetris_button_up `(v ~T0 @X0 1 ef3`*S282`*us`*E2586 ]
"311
[; ;tetris.c: 311: {
{
[e :U _tetris_button_up ]
"310
[; ;tetris.c: 310: void tetris_button_up(struct tetris *tetris, uint16_t *BackgroundData, rotation_t *rotation)
[v _tetris `*S282 ~T0 @X0 1 r1 ]
[v _BackgroundData `*us ~T0 @X0 1 r2 ]
[v _rotation `*E2586 ~T0 @X0 1 r3 ]
"311
[; ;tetris.c: 311: {
[f ]
"312
[; ;tetris.c: 312:     uint16_t tmpObjectData[8];
[v _tmpObjectData `us ~T0 @X0 -> 8 `i a ]
"313
[; ;tetris.c: 313:     clearArray(tmpObjectData, 8);
[e ( _clearArray (2 , -> &U _tmpObjectData `*Vus -> -> 8 `i `ui ]
"315
[; ;tetris.c: 315:     newRotation(tetris, tmpObjectData, rotation);
[e ( _newRotation (3 , , _tetris &U _tmpObjectData _rotation ]
"317
[; ;tetris.c: 317:     {
{
"318
[; ;tetris.c: 318:     struct shape *tetrisblock = &tetris->currentblock;
[v _tetrisblock `*S281 ~T0 @X0 1 a ]
[e = _tetrisblock &U . *U _tetris 0 ]
"320
[; ;tetris.c: 320:     if(pixelCount(tetrisblock->graphic) == pixelCount(tmpObjectData))
[e $ ! == -> ( _pixelCount (1 -> &U . *U _tetrisblock 0 `*Vus `i -> ( _pixelCount (1 -> &U _tmpObjectData `*Vus `i 370  ]
"321
[; ;tetris.c: 321:     {
{
"323
[; ;tetris.c: 323:         if(!collisionDetect(tmpObjectData, BackgroundData))
[e $ ! ! != -> ( _collisionDetect (2 , -> &U _tmpObjectData `*Vus -> _BackgroundData `*Vus `i -> 0 `i 371  ]
"324
[; ;tetris.c: 324:         {
{
"328
[; ;tetris.c: 328:             mergeObjects(tmpObjectData, tetrisblock->graphic, OVERRIDE);
[e ( _mergeObjects (3 , , -> &U _tmpObjectData `*Vus -> &U . *U _tetrisblock 0 `*Vus . `E2575 0 ]
"329
[; ;tetris.c: 329:             tetris->IsRotated = ~tetris->IsRotated;
[e = . *U _tetris 1 -> ~ -> . *U _tetris 1 `i `a ]
"330
[; ;tetris.c: 330:         }
}
[e :U 371 ]
"331
[; ;tetris.c: 331:     }
}
[e :U 370 ]
"332
[; ;tetris.c: 332:     }
}
"333
[; ;tetris.c: 333: }
[e :UE 369 ]
}
"335
[; ;tetris.c: 335: void tetris_button_down(struct tetris *tetris, uint16_t *BackgroundData, _Bool *CheckForNewLines, _Bool *EndOfGame)
[v _tetris_button_down `(v ~T0 @X0 1 ef4`*S282`*us`*a`*a ]
"336
[; ;tetris.c: 336: {
{
[e :U _tetris_button_down ]
"335
[; ;tetris.c: 335: void tetris_button_down(struct tetris *tetris, uint16_t *BackgroundData, _Bool *CheckForNewLines, _Bool *EndOfGame)
[v _tetris `*S282 ~T0 @X0 1 r1 ]
[v _BackgroundData `*us ~T0 @X0 1 r2 ]
[v _CheckForNewLines `*a ~T0 @X0 1 r3 ]
[v _EndOfGame `*a ~T0 @X0 1 r4 ]
"336
[; ;tetris.c: 336: {
[f ]
"337
[; ;tetris.c: 337:     while(moveObjectDown(tetris, BackgroundData, CheckForNewLines, EndOfGame))
[e $U 373  ]
[e :U 374 ]
"338
[; ;tetris.c: 338:     {
{
"339
[; ;tetris.c: 339:         continue;
[e $U 373  ]
"340
[; ;tetris.c: 340:     }
}
[e :U 373 ]
"337
[; ;tetris.c: 337:     while(moveObjectDown(tetris, BackgroundData, CheckForNewLines, EndOfGame))
[e $ != -> ( _moveObjectDown (4 , , , _tetris _BackgroundData _CheckForNewLines _EndOfGame `i -> 0 `i 374  ]
[e :U 375 ]
"341
[; ;tetris.c: 341: }
[e :UE 372 ]
}
"343
[; ;tetris.c: 343: void tetris_timer(void)
[v _tetris_timer `(v ~T0 @X0 1 ef ]
"344
[; ;tetris.c: 344: {
{
[e :U _tetris_timer ]
[f ]
"345
[; ;tetris.c: 345:     DropObject = 1;
[e = _DropObject -> -> 1 `i `a ]
"346
[; ;tetris.c: 346: }
[e :UE 376 ]
}
"348
[; ;tetris.c: 348: _Bool tetris_buttons(struct tetris *tetris, uint16_t *BackgroundData, _Bool *CheckForNewLines, _Bool *EndOfGame, rotation_t *rotation)
[v _tetris_buttons `(a ~T0 @X0 1 ef5`*S282`*us`*a`*a`*E2586 ]
"349
[; ;tetris.c: 349: {
{
[e :U _tetris_buttons ]
"348
[; ;tetris.c: 348: _Bool tetris_buttons(struct tetris *tetris, uint16_t *BackgroundData, _Bool *CheckForNewLines, _Bool *EndOfGame, rotation_t *rotation)
[v _tetris `*S282 ~T0 @X0 1 r1 ]
[v _BackgroundData `*us ~T0 @X0 1 r2 ]
[v _CheckForNewLines `*a ~T0 @X0 1 r3 ]
[v _EndOfGame `*a ~T0 @X0 1 r4 ]
[v _rotation `*E2586 ~T0 @X0 1 r5 ]
"349
[; ;tetris.c: 349: {
[f ]
"350
[; ;tetris.c: 350:     _Bool returnbool = 0;
[v _returnbool `a ~T0 @X0 1 a ]
[e = _returnbool -> -> 0 `i `a ]
"351
[; ;tetris.c: 351:     if(checkLeft(1))
[e $ ! != -> ( _checkLeft (1 -> -> 1 `i `a `i -> 0 `i 378  ]
"352
[; ;tetris.c: 352:     {
{
"353
[; ;tetris.c: 353:         *CheckForNewLines = tetris_button_left(&tetris->currentblock, BackgroundData);
[e = *U _CheckForNewLines ( _tetris_button_left (2 , &U . *U _tetris 0 _BackgroundData ]
"354
[; ;tetris.c: 354:         returnbool = 1;
[e = _returnbool -> -> 1 `i `a ]
"355
[; ;tetris.c: 355:     }
}
[e :U 378 ]
"356
[; ;tetris.c: 356:     if(checkRight(1))
[e $ ! != -> ( _checkRight (1 -> -> 1 `i `a `i -> 0 `i 379  ]
"357
[; ;tetris.c: 357:     {
{
"358
[; ;tetris.c: 358:         *CheckForNewLines = tetris_button_right(&tetris->currentblock, BackgroundData);
[e = *U _CheckForNewLines ( _tetris_button_right (2 , &U . *U _tetris 0 _BackgroundData ]
"359
[; ;tetris.c: 359:         returnbool = 1;
[e = _returnbool -> -> 1 `i `a ]
"360
[; ;tetris.c: 360:     }
}
[e :U 379 ]
"361
[; ;tetris.c: 361:     if(checkUp(1))
[e $ ! != -> ( _checkUp (1 -> -> 1 `i `a `i -> 0 `i 380  ]
"362
[; ;tetris.c: 362:     {
{
"363
[; ;tetris.c: 363:         tetris_button_up(tetris, BackgroundData, rotation);
[e ( _tetris_button_up (3 , , _tetris _BackgroundData _rotation ]
"364
[; ;tetris.c: 364:         returnbool = 1;
[e = _returnbool -> -> 1 `i `a ]
"365
[; ;tetris.c: 365:     }
}
[e :U 380 ]
"366
[; ;tetris.c: 366:     if(checkDown(1))
[e $ ! != -> ( _checkDown (1 -> -> 1 `i `a `i -> 0 `i 381  ]
"367
[; ;tetris.c: 367:     {
{
"368
[; ;tetris.c: 368:         tetris_button_down(tetris, BackgroundData, CheckForNewLines, EndOfGame);
[e ( _tetris_button_down (4 , , , _tetris _BackgroundData _CheckForNewLines _EndOfGame ]
"369
[; ;tetris.c: 369:         returnbool = 1;
[e = _returnbool -> -> 1 `i `a ]
"370
[; ;tetris.c: 370:     }
}
[e :U 381 ]
"371
[; ;tetris.c: 371:     return returnbool;
[e ) _returnbool ]
[e $UE 377  ]
"372
[; ;tetris.c: 372: }
[e :UE 377 ]
}
"374
[; ;tetris.c: 374: void tetris_main(void)
[v _tetris_main `(v ~T0 @X0 1 ef ]
"375
[; ;tetris.c: 375: {
{
[e :U _tetris_main ]
[f ]
"376
[; ;tetris.c: 376:     uint16_t BackgroundData[8];
[v _BackgroundData `us ~T0 @X0 -> 8 `i a ]
"377
[; ;tetris.c: 377:     clearArray(BackgroundData, 8);
[e ( _clearArray (2 , -> &U _BackgroundData `*Vus -> -> 8 `i `ui ]
"379
[; ;tetris.c: 379:     tetris_screen();
[e ( _tetris_screen ..  ]
"380
[; ;tetris.c: 380:     uint8_t LastHighScore = readHighScore(0);
[v _LastHighScore `uc ~T0 @X0 1 a ]
[e = _LastHighScore ( _readHighScore (1 -> -> 0 `i `uc ]
"381
[; ;tetris.c: 381:     show_score(LastHighScore);
[e ( _show_score (1 _LastHighScore ]
"383
[; ;tetris.c: 383:     struct tetris tetris;
[v _tetris `S282 ~T0 @X0 1 a ]
"384
[; ;tetris.c: 384:     clearArray(tetris.currentblock.graphic, 8);
[e ( _clearArray (2 , -> &U . . _tetris 0 0 `*Vus -> -> 8 `i `ui ]
"386
[; ;tetris.c: 386:     tetris.countblocks = 7;
[e = . _tetris 2 -> -> 7 `i `uc ]
"388
[; ;tetris.c: 388:     uint8_t NumberOfLines = 0;
[v _NumberOfLines `uc ~T0 @X0 1 a ]
[e = _NumberOfLines -> -> 0 `i `uc ]
"390
[; ;tetris.c: 390:     _Bool CheckForNewLines = 0;
[v _CheckForNewLines `a ~T0 @X0 1 a ]
[e = _CheckForNewLines -> -> 0 `i `a ]
"392
[; ;tetris.c: 392:     selectNextObject(&tetris);
[e ( _selectNextObject (1 &U _tetris ]
"393
[; ;tetris.c: 393:     set_screen(tetris.currentblock.graphic);
[e ( _set_screen (1 &U . . _tetris 0 0 ]
"395
[; ;tetris.c: 395:     rotation_t rotation;
[v _rotation `E2586 ~T0 @X0 1 a ]
"397
[; ;tetris.c: 397:     _Bool EndOfGame = 0;
[v _EndOfGame `a ~T0 @X0 1 a ]
[e = _EndOfGame -> -> 0 `i `a ]
"398
[; ;tetris.c: 398:     DropObject = 0;
[e = _DropObject -> -> 0 `i `a ]
"399
[; ;tetris.c: 399:     do
[e :U 385 ]
"400
[; ;tetris.c: 400:     {
{
"401
[; ;tetris.c: 401:         _Bool newScreen;
[v _newScreen `a ~T0 @X0 1 a ]
"402
[; ;tetris.c: 402:         newScreen = tetris_buttons(&tetris, BackgroundData, &CheckForNewLines, &EndOfGame, &rotation) || newScreen;
[e = _newScreen -> -> || != -> ( _tetris_buttons (4 , , , , &U _tetris &U _BackgroundData &U _CheckForNewLines &U _EndOfGame &U _rotation `i -> 0 `i != -> _newScreen `i -> 0 `i `i `a ]
"403
[; ;tetris.c: 403:         if(DropObject)
[e $ ! != -> _DropObject `i -> 0 `i 386  ]
"404
[; ;tetris.c: 404:         {
{
"405
[; ;tetris.c: 405:             DropObject = 0;
[e = _DropObject -> -> 0 `i `a ]
"406
[; ;tetris.c: 406:             moveObjectDown(&tetris, BackgroundData, &CheckForNewLines, &EndOfGame);
[e ( _moveObjectDown (4 , , , &U _tetris &U _BackgroundData &U _CheckForNewLines &U _EndOfGame ]
"407
[; ;tetris.c: 407:             newScreen = 1;
[e = _newScreen -> -> 1 `i `a ]
"408
[; ;tetris.c: 408:         }
}
[e :U 386 ]
"409
[; ;tetris.c: 409:         if(CheckForNewLines)
[e $ ! != -> _CheckForNewLines `i -> 0 `i 387  ]
"410
[; ;tetris.c: 410:         {
{
"411
[; ;tetris.c: 411:             NumberOfLines = NumberOfLines + checkForLines(BackgroundData);
[e = _NumberOfLines -> + -> _NumberOfLines `i -> ( _checkForLines (1 &U _BackgroundData `i `uc ]
"412
[; ;tetris.c: 412:             newScreen = 1;
[e = _newScreen -> -> 1 `i `a ]
"413
[; ;tetris.c: 413:         }
}
[e :U 387 ]
"414
[; ;tetris.c: 414:         if(newScreen)
[e $ ! != -> _newScreen `i -> 0 `i 388  ]
"415
[; ;tetris.c: 415:         {
{
"416
[; ;tetris.c: 416:             uint16_t Screen_Data[8];
[v _Screen_Data `us ~T0 @X0 -> 8 `i a ]
"417
[; ;tetris.c: 417:             mergeObjects(BackgroundData, Screen_Data, OVERRIDE);
[e ( _mergeObjects (3 , , -> &U _BackgroundData `*Vus -> &U _Screen_Data `*Vus . `E2575 0 ]
"418
[; ;tetris.c: 418:             mergeObjects(tetris.currentblock.graphic, Screen_Data, MERGE);
[e ( _mergeObjects (3 , , -> &U . . _tetris 0 0 `*Vus -> &U _Screen_Data `*Vus . `E2575 1 ]
"419
[; ;tetris.c: 419:             set_screen(Screen_Data);
[e ( _set_screen (1 &U _Screen_Data ]
"420
[; ;tetris.c: 420:             newScreen = 0;
[e = _newScreen -> -> 0 `i `a ]
"421
[; ;tetris.c: 421:         }
}
[e :U 388 ]
"422
[; ;tetris.c: 422:     }
}
[e $ ! != -> _EndOfGame `i -> 0 `i 385  ]
[e :U 384 ]
"424
[; ;tetris.c: 424:     writeHighScore(0, LastHighScore, NumberOfLines);
[e ( _writeHighScore (3 , , -> -> 0 `i `uc _LastHighScore _NumberOfLines ]
"425
[; ;tetris.c: 425:     show_score(NumberOfLines);
[e ( _show_score (1 _NumberOfLines ]
"426
[; ;tetris.c: 426: }
[e :UE 382 ]
}
