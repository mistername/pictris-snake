Version 4.0 HI-TECH Software Intermediate Code
"6 ./shapes.h
[; ;./shapes.h: 6: {
[s S281 `us -> 8 `i `uc 1 `uc 1 `uc 1 ]
[n S281 shape graphic x y limitedRotation ]
"7 ./screen.h
[; ;./screen.h: 7: void set_screen(volatile uint16_t *newData);
[v _set_screen `(v ~T0 @X0 0 ef1`*Vus ]
"41 ./tetris.h
[; ;./tetris.h: 41: _Bool checkForBottom(volatile uint16_t *);
[v _checkForBottom `(a ~T0 @X0 0 ef1`*Vus ]
"62 tetris.c
[; ;tetris.c: 62:         mergeObjects(pObject, BackgroundData, MERGE);
[c E2573 0 1 2 .. ]
[n E2573 . OVERRIDE MERGE INVERT  ]
"55 ./shared_logic.h
[; ;./shared_logic.h: 55: void mergeObjects(volatile uint16_t * , volatile uint16_t *, mode_t );
[v _mergeObjects `(v ~T0 @X0 0 ef3`*Vus`*Vus`E2573 ]
"40 ./tetris.h
[; ;./tetris.h: 40: void selectNextObject(volatile uint16_t *);
[v _selectNextObject `(v ~T0 @X0 0 ef1`*Vus ]
"71 tetris.c
[; ;tetris.c: 71:         moveObject(pObject, DOWN, 1);
[c E2578 0 1 2 3 .. ]
[n E2578 . DOWN UP LEFT RIGHT  ]
"56 ./shared_logic.h
[; ;./shared_logic.h: 56: void moveObject(volatile uint16_t * , direction_t, uint8_t );
[v _moveObject `(v ~T0 @X0 0 ef3`*Vus`E2578`uc ]
"59
[; ;./shared_logic.h: 59: _Bool collisionDetect(volatile uint16_t * , volatile uint16_t * );
[v _collisionDetect `(a ~T0 @X0 0 ef2`*Vus`*Vus ]
"68
[; ;./shared_logic.h: 68: void set_mS(uint16_t);
[v _set_mS `(v ~T0 @X0 0 ef1`us ]
"153 tetris.c
[; ;tetris.c: 153: void newRotation(volatile uint16_t * pSource, uint16_t * pTarget, rotation_t rotation)
[c E2584 0 1 .. ]
[n E2584 . CCW CW  ]
"50 ./shared_logic.h
[; ;./shared_logic.h: 50: volatile void *memcpyvol (volatile void *restrict, volatile const void *restrict, size_t);
[v _memcpyvol `(*Vv ~T0 @X0 0 ef3`*Vv`*CVv`ui ]
"54
[; ;./shared_logic.h: 54: void clearArray(volatile uint16_t *, size_t );
[v _clearArray `(v ~T0 @X0 0 ef2`*Vus`ui ]
"26 ./randgen.h
[; ;./randgen.h: 26: uint8_t rnd_get_num(void);
[v _rnd_get_num `(uc ~T0 @X0 0 ef ]
"67 ./shared_logic.h
[; ;./shared_logic.h: 67: void removeLine(volatile uint16_t * , uint8_t );
[v _removeLine `(v ~T0 @X0 0 ef2`*Vus`uc ]
"57
[; ;./shared_logic.h: 57: _Bool checkForLeftWall(volatile uint16_t * );
[v _checkForLeftWall `(a ~T0 @X0 0 ef1`*Vus ]
"9 ./screen.h
[; ;./screen.h: 9: void pauseMultiplexing(void);
[v _pauseMultiplexing `(v ~T0 @X0 0 ef ]
"10
[; ;./screen.h: 10: void resumeMultiplexing(void);
[v _resumeMultiplexing `(v ~T0 @X0 0 ef ]
"58 ./shared_logic.h
[; ;./shared_logic.h: 58: _Bool checkForRightWall(volatile uint16_t * );
[v _checkForRightWall `(a ~T0 @X0 0 ef1`*Vus ]
"61
[; ;./shared_logic.h: 61: uint8_t pixelCount(volatile uint16_t * );
[v _pixelCount `(uc ~T0 @X0 0 ef1`*Vus ]
"7 ./buttons.h
[; ;./buttons.h: 7: _Bool checkLeft(_Bool);
[v _checkLeft `(a ~T0 @X0 0 ef1`a ]
"8
[; ;./buttons.h: 8: _Bool checkRight(_Bool);
[v _checkRight `(a ~T0 @X0 0 ef1`a ]
"9
[; ;./buttons.h: 9: _Bool checkUp(_Bool);
[v _checkUp `(a ~T0 @X0 0 ef1`a ]
"10
[; ;./buttons.h: 10: _Bool checkDown(_Bool);
[v _checkDown `(a ~T0 @X0 0 ef1`a ]
"64 ./shared_logic.h
[; ;./shared_logic.h: 64: uint8_t readHighScore(uint8_t );
[v _readHighScore `(uc ~T0 @X0 0 ef1`uc ]
"66
[; ;./shared_logic.h: 66: void show_score(uint8_t);
[v _show_score `(v ~T0 @X0 0 ef1`uc ]
"65
[; ;./shared_logic.h: 65: void writeHighScore(uint8_t , uint8_t , uint8_t );
[v _writeHighScore `(v ~T0 @X0 0 ef3`uc`uc`uc ]
"54 C:\Program Files (x86)\Microchip\xc8\v2.05\pic\include\pic18f4520.h
[; ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\include\pic18f4520.h: 54: __asm("PORTA equ 0F80h");
[; <" PORTA equ 0F80h ;# ">
"273
[; ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\include\pic18f4520.h: 273: __asm("PORTB equ 0F81h");
[; <" PORTB equ 0F81h ;# ">
"452
[; ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\include\pic18f4520.h: 452: __asm("PORTC equ 0F82h");
[; <" PORTC equ 0F82h ;# ">
"634
[; ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\include\pic18f4520.h: 634: __asm("PORTD equ 0F83h");
[; <" PORTD equ 0F83h ;# ">
"776
[; ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\include\pic18f4520.h: 776: __asm("PORTE equ 0F84h");
[; <" PORTE equ 0F84h ;# ">
"979
[; ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\include\pic18f4520.h: 979: __asm("LATA equ 0F89h");
[; <" LATA equ 0F89h ;# ">
"1091
[; ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\include\pic18f4520.h: 1091: __asm("LATB equ 0F8Ah");
[; <" LATB equ 0F8Ah ;# ">
"1203
[; ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\include\pic18f4520.h: 1203: __asm("LATC equ 0F8Bh");
[; <" LATC equ 0F8Bh ;# ">
"1315
[; ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\include\pic18f4520.h: 1315: __asm("LATD equ 0F8Ch");
[; <" LATD equ 0F8Ch ;# ">
"1427
[; ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\include\pic18f4520.h: 1427: __asm("LATE equ 0F8Dh");
[; <" LATE equ 0F8Dh ;# ">
"1479
[; ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\include\pic18f4520.h: 1479: __asm("TRISA equ 0F92h");
[; <" TRISA equ 0F92h ;# ">
"1484
[; ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\include\pic18f4520.h: 1484: __asm("DDRA equ 0F92h");
[; <" DDRA equ 0F92h ;# ">
"1701
[; ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\include\pic18f4520.h: 1701: __asm("TRISB equ 0F93h");
[; <" TRISB equ 0F93h ;# ">
"1706
[; ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\include\pic18f4520.h: 1706: __asm("DDRB equ 0F93h");
[; <" DDRB equ 0F93h ;# ">
"1923
[; ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\include\pic18f4520.h: 1923: __asm("TRISC equ 0F94h");
[; <" TRISC equ 0F94h ;# ">
"1928
[; ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\include\pic18f4520.h: 1928: __asm("DDRC equ 0F94h");
[; <" DDRC equ 0F94h ;# ">
"2145
[; ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\include\pic18f4520.h: 2145: __asm("TRISD equ 0F95h");
[; <" TRISD equ 0F95h ;# ">
"2150
[; ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\include\pic18f4520.h: 2150: __asm("DDRD equ 0F95h");
[; <" DDRD equ 0F95h ;# ">
"2367
[; ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\include\pic18f4520.h: 2367: __asm("TRISE equ 0F96h");
[; <" TRISE equ 0F96h ;# ">
"2372
[; ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\include\pic18f4520.h: 2372: __asm("DDRE equ 0F96h");
[; <" DDRE equ 0F96h ;# ">
"2531
[; ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\include\pic18f4520.h: 2531: __asm("OSCTUNE equ 0F9Bh");
[; <" OSCTUNE equ 0F9Bh ;# ">
"2596
[; ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\include\pic18f4520.h: 2596: __asm("PIE1 equ 0F9Dh");
[; <" PIE1 equ 0F9Dh ;# ">
"2673
[; ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\include\pic18f4520.h: 2673: __asm("PIR1 equ 0F9Eh");
[; <" PIR1 equ 0F9Eh ;# ">
"2750
[; ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\include\pic18f4520.h: 2750: __asm("IPR1 equ 0F9Fh");
[; <" IPR1 equ 0F9Fh ;# ">
"2827
[; ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\include\pic18f4520.h: 2827: __asm("PIE2 equ 0FA0h");
[; <" PIE2 equ 0FA0h ;# ">
"2893
[; ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\include\pic18f4520.h: 2893: __asm("PIR2 equ 0FA1h");
[; <" PIR2 equ 0FA1h ;# ">
"2959
[; ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\include\pic18f4520.h: 2959: __asm("IPR2 equ 0FA2h");
[; <" IPR2 equ 0FA2h ;# ">
"3025
[; ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\include\pic18f4520.h: 3025: __asm("EECON1 equ 0FA6h");
[; <" EECON1 equ 0FA6h ;# ">
"3091
[; ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\include\pic18f4520.h: 3091: __asm("EECON2 equ 0FA7h");
[; <" EECON2 equ 0FA7h ;# ">
"3098
[; ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\include\pic18f4520.h: 3098: __asm("EEDATA equ 0FA8h");
[; <" EEDATA equ 0FA8h ;# ">
"3105
[; ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\include\pic18f4520.h: 3105: __asm("EEADR equ 0FA9h");
[; <" EEADR equ 0FA9h ;# ">
"3112
[; ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\include\pic18f4520.h: 3112: __asm("RCSTA equ 0FABh");
[; <" RCSTA equ 0FABh ;# ">
"3117
[; ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\include\pic18f4520.h: 3117: __asm("RCSTA1 equ 0FABh");
[; <" RCSTA1 equ 0FABh ;# ">
"3322
[; ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\include\pic18f4520.h: 3322: __asm("TXSTA equ 0FACh");
[; <" TXSTA equ 0FACh ;# ">
"3327
[; ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\include\pic18f4520.h: 3327: __asm("TXSTA1 equ 0FACh");
[; <" TXSTA1 equ 0FACh ;# ">
"3578
[; ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\include\pic18f4520.h: 3578: __asm("TXREG equ 0FADh");
[; <" TXREG equ 0FADh ;# ">
"3583
[; ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\include\pic18f4520.h: 3583: __asm("TXREG1 equ 0FADh");
[; <" TXREG1 equ 0FADh ;# ">
"3590
[; ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\include\pic18f4520.h: 3590: __asm("RCREG equ 0FAEh");
[; <" RCREG equ 0FAEh ;# ">
"3595
[; ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\include\pic18f4520.h: 3595: __asm("RCREG1 equ 0FAEh");
[; <" RCREG1 equ 0FAEh ;# ">
"3602
[; ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\include\pic18f4520.h: 3602: __asm("SPBRG equ 0FAFh");
[; <" SPBRG equ 0FAFh ;# ">
"3607
[; ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\include\pic18f4520.h: 3607: __asm("SPBRG1 equ 0FAFh");
[; <" SPBRG1 equ 0FAFh ;# ">
"3614
[; ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\include\pic18f4520.h: 3614: __asm("SPBRGH equ 0FB0h");
[; <" SPBRGH equ 0FB0h ;# ">
"3621
[; ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\include\pic18f4520.h: 3621: __asm("T3CON equ 0FB1h");
[; <" T3CON equ 0FB1h ;# ">
"3733
[; ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\include\pic18f4520.h: 3733: __asm("TMR3 equ 0FB2h");
[; <" TMR3 equ 0FB2h ;# ">
"3740
[; ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\include\pic18f4520.h: 3740: __asm("TMR3L equ 0FB2h");
[; <" TMR3L equ 0FB2h ;# ">
"3747
[; ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\include\pic18f4520.h: 3747: __asm("TMR3H equ 0FB3h");
[; <" TMR3H equ 0FB3h ;# ">
"3754
[; ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\include\pic18f4520.h: 3754: __asm("CMCON equ 0FB4h");
[; <" CMCON equ 0FB4h ;# ">
"3844
[; ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\include\pic18f4520.h: 3844: __asm("CVRCON equ 0FB5h");
[; <" CVRCON equ 0FB5h ;# ">
"3923
[; ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\include\pic18f4520.h: 3923: __asm("ECCP1AS equ 0FB6h");
[; <" ECCP1AS equ 0FB6h ;# ">
"3928
[; ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\include\pic18f4520.h: 3928: __asm("ECCPAS equ 0FB6h");
[; <" ECCPAS equ 0FB6h ;# ">
"4085
[; ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\include\pic18f4520.h: 4085: __asm("PWM1CON equ 0FB7h");
[; <" PWM1CON equ 0FB7h ;# ">
"4090
[; ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\include\pic18f4520.h: 4090: __asm("ECCP1DEL equ 0FB7h");
[; <" ECCP1DEL equ 0FB7h ;# ">
"4223
[; ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\include\pic18f4520.h: 4223: __asm("BAUDCON equ 0FB8h");
[; <" BAUDCON equ 0FB8h ;# ">
"4228
[; ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\include\pic18f4520.h: 4228: __asm("BAUDCTL equ 0FB8h");
[; <" BAUDCTL equ 0FB8h ;# ">
"4403
[; ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\include\pic18f4520.h: 4403: __asm("CCP2CON equ 0FBAh");
[; <" CCP2CON equ 0FBAh ;# ">
"4482
[; ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\include\pic18f4520.h: 4482: __asm("CCPR2 equ 0FBBh");
[; <" CCPR2 equ 0FBBh ;# ">
"4489
[; ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\include\pic18f4520.h: 4489: __asm("CCPR2L equ 0FBBh");
[; <" CCPR2L equ 0FBBh ;# ">
"4496
[; ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\include\pic18f4520.h: 4496: __asm("CCPR2H equ 0FBCh");
[; <" CCPR2H equ 0FBCh ;# ">
"4503
[; ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\include\pic18f4520.h: 4503: __asm("CCP1CON equ 0FBDh");
[; <" CCP1CON equ 0FBDh ;# ">
"4600
[; ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\include\pic18f4520.h: 4600: __asm("CCPR1 equ 0FBEh");
[; <" CCPR1 equ 0FBEh ;# ">
"4607
[; ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\include\pic18f4520.h: 4607: __asm("CCPR1L equ 0FBEh");
[; <" CCPR1L equ 0FBEh ;# ">
"4614
[; ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\include\pic18f4520.h: 4614: __asm("CCPR1H equ 0FBFh");
[; <" CCPR1H equ 0FBFh ;# ">
"4621
[; ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\include\pic18f4520.h: 4621: __asm("ADCON2 equ 0FC0h");
[; <" ADCON2 equ 0FC0h ;# ">
"4692
[; ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\include\pic18f4520.h: 4692: __asm("ADCON1 equ 0FC1h");
[; <" ADCON1 equ 0FC1h ;# ">
"4777
[; ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\include\pic18f4520.h: 4777: __asm("ADCON0 equ 0FC2h");
[; <" ADCON0 equ 0FC2h ;# ">
"4896
[; ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\include\pic18f4520.h: 4896: __asm("ADRES equ 0FC3h");
[; <" ADRES equ 0FC3h ;# ">
"4903
[; ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\include\pic18f4520.h: 4903: __asm("ADRESL equ 0FC3h");
[; <" ADRESL equ 0FC3h ;# ">
"4910
[; ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\include\pic18f4520.h: 4910: __asm("ADRESH equ 0FC4h");
[; <" ADRESH equ 0FC4h ;# ">
"4917
[; ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\include\pic18f4520.h: 4917: __asm("SSPCON2 equ 0FC5h");
[; <" SSPCON2 equ 0FC5h ;# ">
"5012
[; ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\include\pic18f4520.h: 5012: __asm("SSPCON1 equ 0FC6h");
[; <" SSPCON1 equ 0FC6h ;# ">
"5082
[; ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\include\pic18f4520.h: 5082: __asm("SSPSTAT equ 0FC7h");
[; <" SSPSTAT equ 0FC7h ;# ">
"5303
[; ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\include\pic18f4520.h: 5303: __asm("SSPADD equ 0FC8h");
[; <" SSPADD equ 0FC8h ;# ">
"5310
[; ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\include\pic18f4520.h: 5310: __asm("SSPBUF equ 0FC9h");
[; <" SSPBUF equ 0FC9h ;# ">
"5317
[; ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\include\pic18f4520.h: 5317: __asm("T2CON equ 0FCAh");
[; <" T2CON equ 0FCAh ;# ">
"5415
[; ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\include\pic18f4520.h: 5415: __asm("PR2 equ 0FCBh");
[; <" PR2 equ 0FCBh ;# ">
"5420
[; ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\include\pic18f4520.h: 5420: __asm("MEMCON equ 0FCBh");
[; <" MEMCON equ 0FCBh ;# ">
"5525
[; ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\include\pic18f4520.h: 5525: __asm("TMR2 equ 0FCCh");
[; <" TMR2 equ 0FCCh ;# ">
"5532
[; ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\include\pic18f4520.h: 5532: __asm("T1CON equ 0FCDh");
[; <" T1CON equ 0FCDh ;# ">
"5635
[; ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\include\pic18f4520.h: 5635: __asm("TMR1 equ 0FCEh");
[; <" TMR1 equ 0FCEh ;# ">
"5642
[; ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\include\pic18f4520.h: 5642: __asm("TMR1L equ 0FCEh");
[; <" TMR1L equ 0FCEh ;# ">
"5649
[; ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\include\pic18f4520.h: 5649: __asm("TMR1H equ 0FCFh");
[; <" TMR1H equ 0FCFh ;# ">
"5656
[; ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\include\pic18f4520.h: 5656: __asm("RCON equ 0FD0h");
[; <" RCON equ 0FD0h ;# ">
"5789
[; ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\include\pic18f4520.h: 5789: __asm("WDTCON equ 0FD1h");
[; <" WDTCON equ 0FD1h ;# ">
"5817
[; ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\include\pic18f4520.h: 5817: __asm("HLVDCON equ 0FD2h");
[; <" HLVDCON equ 0FD2h ;# ">
"5822
[; ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\include\pic18f4520.h: 5822: __asm("LVDCON equ 0FD2h");
[; <" LVDCON equ 0FD2h ;# ">
"6087
[; ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\include\pic18f4520.h: 6087: __asm("OSCCON equ 0FD3h");
[; <" OSCCON equ 0FD3h ;# ">
"6170
[; ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\include\pic18f4520.h: 6170: __asm("T0CON equ 0FD5h");
[; <" T0CON equ 0FD5h ;# ">
"6253
[; ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\include\pic18f4520.h: 6253: __asm("TMR0 equ 0FD6h");
[; <" TMR0 equ 0FD6h ;# ">
"6260
[; ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\include\pic18f4520.h: 6260: __asm("TMR0L equ 0FD6h");
[; <" TMR0L equ 0FD6h ;# ">
"6267
[; ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\include\pic18f4520.h: 6267: __asm("TMR0H equ 0FD7h");
[; <" TMR0H equ 0FD7h ;# ">
"6274
[; ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\include\pic18f4520.h: 6274: __asm("STATUS equ 0FD8h");
[; <" STATUS equ 0FD8h ;# ">
"6345
[; ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\include\pic18f4520.h: 6345: __asm("FSR2 equ 0FD9h");
[; <" FSR2 equ 0FD9h ;# ">
"6352
[; ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\include\pic18f4520.h: 6352: __asm("FSR2L equ 0FD9h");
[; <" FSR2L equ 0FD9h ;# ">
"6359
[; ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\include\pic18f4520.h: 6359: __asm("FSR2H equ 0FDAh");
[; <" FSR2H equ 0FDAh ;# ">
"6366
[; ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\include\pic18f4520.h: 6366: __asm("PLUSW2 equ 0FDBh");
[; <" PLUSW2 equ 0FDBh ;# ">
"6373
[; ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\include\pic18f4520.h: 6373: __asm("PREINC2 equ 0FDCh");
[; <" PREINC2 equ 0FDCh ;# ">
"6380
[; ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\include\pic18f4520.h: 6380: __asm("POSTDEC2 equ 0FDDh");
[; <" POSTDEC2 equ 0FDDh ;# ">
"6387
[; ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\include\pic18f4520.h: 6387: __asm("POSTINC2 equ 0FDEh");
[; <" POSTINC2 equ 0FDEh ;# ">
"6394
[; ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\include\pic18f4520.h: 6394: __asm("INDF2 equ 0FDFh");
[; <" INDF2 equ 0FDFh ;# ">
"6401
[; ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\include\pic18f4520.h: 6401: __asm("BSR equ 0FE0h");
[; <" BSR equ 0FE0h ;# ">
"6408
[; ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\include\pic18f4520.h: 6408: __asm("FSR1 equ 0FE1h");
[; <" FSR1 equ 0FE1h ;# ">
"6415
[; ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\include\pic18f4520.h: 6415: __asm("FSR1L equ 0FE1h");
[; <" FSR1L equ 0FE1h ;# ">
"6422
[; ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\include\pic18f4520.h: 6422: __asm("FSR1H equ 0FE2h");
[; <" FSR1H equ 0FE2h ;# ">
"6429
[; ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\include\pic18f4520.h: 6429: __asm("PLUSW1 equ 0FE3h");
[; <" PLUSW1 equ 0FE3h ;# ">
"6436
[; ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\include\pic18f4520.h: 6436: __asm("PREINC1 equ 0FE4h");
[; <" PREINC1 equ 0FE4h ;# ">
"6443
[; ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\include\pic18f4520.h: 6443: __asm("POSTDEC1 equ 0FE5h");
[; <" POSTDEC1 equ 0FE5h ;# ">
"6450
[; ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\include\pic18f4520.h: 6450: __asm("POSTINC1 equ 0FE6h");
[; <" POSTINC1 equ 0FE6h ;# ">
"6457
[; ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\include\pic18f4520.h: 6457: __asm("INDF1 equ 0FE7h");
[; <" INDF1 equ 0FE7h ;# ">
"6464
[; ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\include\pic18f4520.h: 6464: __asm("WREG equ 0FE8h");
[; <" WREG equ 0FE8h ;# ">
"6476
[; ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\include\pic18f4520.h: 6476: __asm("FSR0 equ 0FE9h");
[; <" FSR0 equ 0FE9h ;# ">
"6483
[; ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\include\pic18f4520.h: 6483: __asm("FSR0L equ 0FE9h");
[; <" FSR0L equ 0FE9h ;# ">
"6490
[; ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\include\pic18f4520.h: 6490: __asm("FSR0H equ 0FEAh");
[; <" FSR0H equ 0FEAh ;# ">
"6497
[; ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\include\pic18f4520.h: 6497: __asm("PLUSW0 equ 0FEBh");
[; <" PLUSW0 equ 0FEBh ;# ">
"6504
[; ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\include\pic18f4520.h: 6504: __asm("PREINC0 equ 0FECh");
[; <" PREINC0 equ 0FECh ;# ">
"6511
[; ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\include\pic18f4520.h: 6511: __asm("POSTDEC0 equ 0FEDh");
[; <" POSTDEC0 equ 0FEDh ;# ">
"6518
[; ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\include\pic18f4520.h: 6518: __asm("POSTINC0 equ 0FEEh");
[; <" POSTINC0 equ 0FEEh ;# ">
"6525
[; ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\include\pic18f4520.h: 6525: __asm("INDF0 equ 0FEFh");
[; <" INDF0 equ 0FEFh ;# ">
"6532
[; ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\include\pic18f4520.h: 6532: __asm("INTCON3 equ 0FF0h");
[; <" INTCON3 equ 0FF0h ;# ">
"6624
[; ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\include\pic18f4520.h: 6624: __asm("INTCON2 equ 0FF1h");
[; <" INTCON2 equ 0FF1h ;# ">
"6694
[; ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\include\pic18f4520.h: 6694: __asm("INTCON equ 0FF2h");
[; <" INTCON equ 0FF2h ;# ">
"6811
[; ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\include\pic18f4520.h: 6811: __asm("PROD equ 0FF3h");
[; <" PROD equ 0FF3h ;# ">
"6818
[; ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\include\pic18f4520.h: 6818: __asm("PRODL equ 0FF3h");
[; <" PRODL equ 0FF3h ;# ">
"6825
[; ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\include\pic18f4520.h: 6825: __asm("PRODH equ 0FF4h");
[; <" PRODH equ 0FF4h ;# ">
"6832
[; ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\include\pic18f4520.h: 6832: __asm("TABLAT equ 0FF5h");
[; <" TABLAT equ 0FF5h ;# ">
"6841
[; ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\include\pic18f4520.h: 6841: __asm("TBLPTR equ 0FF6h");
[; <" TBLPTR equ 0FF6h ;# ">
"6848
[; ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\include\pic18f4520.h: 6848: __asm("TBLPTRL equ 0FF6h");
[; <" TBLPTRL equ 0FF6h ;# ">
"6855
[; ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\include\pic18f4520.h: 6855: __asm("TBLPTRH equ 0FF7h");
[; <" TBLPTRH equ 0FF7h ;# ">
"6862
[; ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\include\pic18f4520.h: 6862: __asm("TBLPTRU equ 0FF8h");
[; <" TBLPTRU equ 0FF8h ;# ">
"6871
[; ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\include\pic18f4520.h: 6871: __asm("PCLAT equ 0FF9h");
[; <" PCLAT equ 0FF9h ;# ">
"6878
[; ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\include\pic18f4520.h: 6878: __asm("PC equ 0FF9h");
[; <" PC equ 0FF9h ;# ">
"6885
[; ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\include\pic18f4520.h: 6885: __asm("PCL equ 0FF9h");
[; <" PCL equ 0FF9h ;# ">
"6892
[; ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\include\pic18f4520.h: 6892: __asm("PCLATH equ 0FFAh");
[; <" PCLATH equ 0FFAh ;# ">
"6899
[; ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\include\pic18f4520.h: 6899: __asm("PCLATU equ 0FFBh");
[; <" PCLATU equ 0FFBh ;# ">
"6906
[; ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\include\pic18f4520.h: 6906: __asm("STKPTR equ 0FFCh");
[; <" STKPTR equ 0FFCh ;# ">
"6980
[; ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\include\pic18f4520.h: 6980: __asm("TOS equ 0FFDh");
[; <" TOS equ 0FFDh ;# ">
"6987
[; ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\include\pic18f4520.h: 6987: __asm("TOSL equ 0FFDh");
[; <" TOSL equ 0FFDh ;# ">
"6994
[; ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\include\pic18f4520.h: 6994: __asm("TOSH equ 0FFEh");
[; <" TOSH equ 0FFEh ;# ">
"7001
[; ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\include\pic18f4520.h: 7001: __asm("TOSU equ 0FFFh");
[; <" TOSU equ 0FFFh ;# ">
"10 ./shapes.h
[; ;./shapes.h: 10: } shapes[] =
[v _shapes `S281 ~T0 @X0 -> 7 `i e ]
[i _shapes
:U ..
:U ..
:U ..
-> -> 0 `i `us
-> -> 0 `i `us
-> -> 0 `i `us
-> -> 1 `i `us
-> -> 3 `i `us
-> -> 1 `i `us
-> -> 0 `i `us
-> -> 0 `i `us
..
-> -> 4 `i `uc
-> -> 0 `i `uc
-> -> 0 `i `uc
..
:U ..
:U ..
-> -> 0 `i `us
-> -> 0 `i `us
-> -> 1 `i `us
-> -> 1 `i `us
-> -> 1 `i `us
-> -> 1 `i `us
-> -> 0 `i `us
-> -> 0 `i `us
..
-> -> 4 `i `uc
-> -> 0 `i `uc
-> -> 1 `i `uc
..
:U ..
:U ..
-> -> 0 `i `us
-> -> 0 `i `us
-> -> 0 `i `us
-> -> 3 `i `us
-> -> 1 `i `us
-> -> 1 `i `us
-> -> 0 `i `us
-> -> 0 `i `us
..
-> -> 4 `i `uc
-> -> 0 `i `uc
-> -> 0 `i `uc
..
:U ..
:U ..
-> -> 0 `i `us
-> -> 0 `i `us
-> -> 0 `i `us
-> -> 1 `i `us
-> -> 1 `i `us
-> -> 3 `i `us
-> -> 0 `i `us
-> -> 0 `i `us
..
-> -> 4 `i `uc
-> -> 0 `i `uc
-> -> 0 `i `uc
..
:U ..
:U ..
-> -> 0 `i `us
-> -> 0 `i `us
-> -> 0 `i `us
-> -> 3 `i `us
-> -> 3 `i `us
-> -> 0 `i `us
-> -> 0 `i `us
-> -> 0 `i `us
..
-> -> 3 `i `uc
-> -> 1 `i `uc
-> -> 2 `i `uc
..
:U ..
:U ..
-> -> 0 `i `us
-> -> 0 `i `us
-> -> 0 `i `us
-> -> 2 `i `us
-> -> 3 `i `us
-> -> 1 `i `us
-> -> 0 `i `us
-> -> 0 `i `us
..
-> -> 4 `i `uc
-> -> 1 `i `uc
-> -> 1 `i `uc
..
:U ..
:U ..
-> -> 0 `i `us
-> -> 0 `i `us
-> -> 0 `i `us
-> -> 1 `i `us
-> -> 3 `i `us
-> -> 2 `i `us
-> -> 0 `i `us
-> -> 0 `i `us
..
-> -> 4 `i `uc
-> -> 1 `i `uc
-> -> 1 `i `uc
..
..
]
"6 ./config.h
[p x OSC = INTIO67 ]
"7
[p x FCMEN = OFF ]
"8
[p x IESO = OFF ]
"11
[p x PWRT = OFF ]
"12
[p x BOREN = SBORDIS ]
"13
[p x BORV = 3 ]
"16
[p x WDT = OFF ]
"17
[p x WDTPS = 32768 ]
"20
[p x CCP2MX = PORTC ]
"21
[p x PBADEN = OFF ]
"22
[p x LPT1OSC = OFF ]
"23
[p x MCLRE = ON ]
"26
[p x STVREN = ON ]
"27
[p x LVP = OFF ]
"28
[p x XINST = OFF ]
"31
[p x CP0 = OFF ]
"32
[p x CP1 = OFF ]
"33
[p x CP2 = OFF ]
"34
[p x CP3 = OFF ]
"37
[p x CPB = OFF ]
"38
[p x CPD = OFF ]
"41
[p x WRT0 = OFF ]
"42
[p x WRT1 = OFF ]
"43
[p x WRT2 = OFF ]
"44
[p x WRT3 = OFF ]
"47
[p x WRTC = OFF ]
"48
[p x WRTB = OFF ]
"49
[p x WRTD = OFF ]
"52
[p x EBTR0 = OFF ]
"53
[p x EBTR1 = OFF ]
"54
[p x EBTR2 = OFF ]
"55
[p x EBTR3 = OFF ]
"58
[p x EBTRB = OFF ]
"15 tetris.c
[; ;tetris.c: 15: volatile uint16_t ObjectData[8];
[v _ObjectData `Vus ~T0 @X0 -> 8 `i e ]
"16
[; ;tetris.c: 16: volatile uint16_t BackgroundData[8];
[v _BackgroundData `Vus ~T0 @X0 -> 8 `i e ]
"17
[; ;tetris.c: 17: volatile uint16_t Screen_Data[8];
[v _Screen_Data `Vus ~T0 @X0 -> 8 `i e ]
"18
[; ;tetris.c: 18: uint16_t tmpObjectData[8];
[v _tmpObjectData `us ~T0 @X0 -> 8 `i e ]
"19
[; ;tetris.c: 19: volatile _Bool EndOfGame;
[v _EndOfGame `Va ~T0 @X0 1 e ]
"21
[; ;tetris.c: 21: const uint16_t TETRIS[] =
[v _TETRIS `Cus ~T0 @X0 -> 8 `i e ]
[i _TETRIS
:U ..
-> -> 34881 `ui `us
-> -> 64479 `ui `us
-> -> 34881 `ui `us
-> -> 0 `i `us
-> -> 39903 `ui `us
-> -> 43349 `ui `us
-> -> 51857 `ui `us
-> -> 0 `i `us
..
]
"33
[; ;tetris.c: 33: uint8_t randomobjects[8];
[v _randomobjects `uc ~T0 @X0 -> 8 `i e ]
"35
[; ;tetris.c: 35: uint8_t LimitedRotation;
[v _LimitedRotation `uc ~T0 @X0 1 e ]
"36
[; ;tetris.c: 36: uint8_t NumberOfLines;
[v _NumberOfLines `uc ~T0 @X0 1 e ]
"38
[; ;tetris.c: 38: _Bool IsRotated;
[v _IsRotated `a ~T0 @X0 1 e ]
"40
[; ;tetris.c: 40: _Bool CheckForNewLines;
[v _CheckForNewLines `a ~T0 @X0 1 e ]
"42
[; ;tetris.c: 42: uint8_t countblocks;
[v _countblocks `uc ~T0 @X0 1 e ]
"44
[; ;tetris.c: 44: volatile _Bool DropObject;
[v _DropObject `Va ~T0 @X0 1 e ]
"45
[; ;tetris.c: 45: uint8_t OriginX, OriginY;
[v _OriginX `uc ~T0 @X0 1 e ]
[v _OriginY `uc ~T0 @X0 1 e ]
"46
[; ;tetris.c: 46: volatile _Bool game = 0;
[v _game `Va ~T0 @X0 1 e ]
[i _game
-> -> 0 `i `a
]
"48
[; ;tetris.c: 48: void tetris_screen(void){
[v _tetris_screen `(v ~T0 @X0 1 ef ]
{
[e :U _tetris_screen ]
[f ]
"49
[; ;tetris.c: 49: set_screen(TETRIS);
[e ( _set_screen (1 -> &U _TETRIS `*Vus ]
"50
[; ;tetris.c: 50: }
[e :UE 282 ]
}
"52
[; ;tetris.c: 52: _Bool moveObjectDown(volatile uint16_t * pObject)
[v _moveObjectDown `(a ~T0 @X0 1 ef1`*Vus ]
"53
[; ;tetris.c: 53: {
{
[e :U _moveObjectDown ]
"52
[; ;tetris.c: 52: _Bool moveObjectDown(volatile uint16_t * pObject)
[v _pObject `*Vus ~T0 @X0 1 r1 ]
"53
[; ;tetris.c: 53: {
[f ]
"54
[; ;tetris.c: 54:     _Bool result = 1;
[v _result `a ~T0 @X0 1 a ]
[e = _result -> -> 1 `i `a ]
"57
[; ;tetris.c: 57:     if (checkForBottom(pObject))
[e $ ! != -> ( _checkForBottom (1 _pObject `i -> 0 `i 284  ]
"58
[; ;tetris.c: 58:     {
{
"60
[; ;tetris.c: 60:         result = 0;
[e = _result -> -> 0 `i `a ]
"62
[; ;tetris.c: 62:         mergeObjects(pObject, BackgroundData, MERGE);
[e ( _mergeObjects (3 , , _pObject &U _BackgroundData . `E2573 1 ]
"64
[; ;tetris.c: 64:         selectNextObject(pObject);
[e ( _selectNextObject (1 _pObject ]
"66
[; ;tetris.c: 66:         CheckForNewLines = 1;
[e = _CheckForNewLines -> -> 1 `i `a ]
"67
[; ;tetris.c: 67:     }
}
[e $U 285  ]
"68
[; ;tetris.c: 68:     else
[e :U 284 ]
"69
[; ;tetris.c: 69:     {
{
"71
[; ;tetris.c: 71:         moveObject(pObject, DOWN, 1);
[e ( _moveObject (3 , , _pObject . `E2578 0 -> -> 1 `i `uc ]
"73
[; ;tetris.c: 73:         if (collisionDetect(pObject, BackgroundData))
[e $ ! != -> ( _collisionDetect (2 , _pObject &U _BackgroundData `i -> 0 `i 286  ]
"74
[; ;tetris.c: 74:         {
{
"77
[; ;tetris.c: 77:             result = 0;
[e = _result -> -> 0 `i `a ]
"79
[; ;tetris.c: 79:             moveObject(pObject, UP, 1);
[e ( _moveObject (3 , , _pObject . `E2578 1 -> -> 1 `i `uc ]
"81
[; ;tetris.c: 81:             mergeObjects(pObject, BackgroundData, MERGE);
[e ( _mergeObjects (3 , , _pObject &U _BackgroundData . `E2573 1 ]
"83
[; ;tetris.c: 83:             selectNextObject(pObject);
[e ( _selectNextObject (1 _pObject ]
"86
[; ;tetris.c: 86:             EndOfGame = collisionDetect(pObject, BackgroundData);
[e = _EndOfGame ( _collisionDetect (2 , _pObject &U _BackgroundData ]
"88
[; ;tetris.c: 88:             CheckForNewLines = 1;
[e = _CheckForNewLines -> -> 1 `i `a ]
"89
[; ;tetris.c: 89:         }
}
[e :U 286 ]
"90
[; ;tetris.c: 90:     }
}
[e :U 285 ]
"91
[; ;tetris.c: 91:     set_mS(0);
[e ( _set_mS (1 -> -> 0 `i `us ]
"93
[; ;tetris.c: 93:     return result;
[e ) _result ]
[e $UE 283  ]
"94
[; ;tetris.c: 94: }
[e :UE 283 ]
}
"98
[; ;tetris.c: 98: void moveObject(volatile uint16_t * pObject, direction_t direction, uint8_t cycles)
[v _moveObject `(v ~T0 @X0 1 ef3`*Vus`E2578`uc ]
"99
[; ;tetris.c: 99: {
{
[e :U _moveObject ]
"98
[; ;tetris.c: 98: void moveObject(volatile uint16_t * pObject, direction_t direction, uint8_t cycles)
[v _pObject `*Vus ~T0 @X0 1 r1 ]
[v _direction `E2578 ~T0 @X0 1 r2 ]
[v _cycles `uc ~T0 @X0 1 r3 ]
"99
[; ;tetris.c: 99: {
[f ]
"100
[; ;tetris.c: 100:     uint8_t i, c;
[v _i `uc ~T0 @X0 1 a ]
[v _c `uc ~T0 @X0 1 a ]
"102
[; ;tetris.c: 102:     switch (direction)
[e $U 289  ]
"103
[; ;tetris.c: 103:     {
{
"104
[; ;tetris.c: 104:     case DOWN:
[e :U 290 ]
"105
[; ;tetris.c: 105:         for (c = 0; c < cycles; c++)
{
[e = _c -> -> 0 `i `uc ]
[e $U 294  ]
[e :U 291 ]
"106
[; ;tetris.c: 106:         {
{
"107
[; ;tetris.c: 107:             for (i = 0; i < 8; i++)
{
[e = _i -> -> 0 `i `uc ]
[e $ < -> _i `i -> 8 `i 295  ]
[e $U 296  ]
[e :U 295 ]
"108
[; ;tetris.c: 108:                 pObject[i] <<= 1;
[e =<< *U + _pObject * -> _i `ux -> -> # *U _pObject `ui `ux -> -> 1 `i `us ]
[e ++ _i -> -> 1 `i `uc ]
[e $ < -> _i `i -> 8 `i 295  ]
[e :U 296 ]
}
"109
[; ;tetris.c: 109:             OriginY++;
[e ++ _OriginY -> -> 1 `i `uc ]
"110
[; ;tetris.c: 110:         }
}
[e ++ _c -> -> 1 `i `uc ]
[e :U 294 ]
[e $ < -> _c `i -> _cycles `i 291  ]
[e :U 292 ]
}
"111
[; ;tetris.c: 111:         break;
[e $U 288  ]
"112
[; ;tetris.c: 112:     case UP:
[e :U 298 ]
"113
[; ;tetris.c: 113:         for (c = 0; c < cycles; c++)
{
[e = _c -> -> 0 `i `uc ]
[e $U 302  ]
[e :U 299 ]
"114
[; ;tetris.c: 114:         {
{
"115
[; ;tetris.c: 115:             for (i = 0; i < 8; i++)
{
[e = _i -> -> 0 `i `uc ]
[e $ < -> _i `i -> 8 `i 303  ]
[e $U 304  ]
[e :U 303 ]
"116
[; ;tetris.c: 116:                 pObject[i] >>= 1;
[e =>> *U + _pObject * -> _i `ux -> -> # *U _pObject `ui `ux -> -> 1 `i `us ]
[e ++ _i -> -> 1 `i `uc ]
[e $ < -> _i `i -> 8 `i 303  ]
[e :U 304 ]
}
"117
[; ;tetris.c: 117:             OriginY--;
[e -- _OriginY -> -> 1 `i `uc ]
"118
[; ;tetris.c: 118:         }
}
[e ++ _c -> -> 1 `i `uc ]
[e :U 302 ]
[e $ < -> _c `i -> _cycles `i 299  ]
[e :U 300 ]
}
"119
[; ;tetris.c: 119:         break;
[e $U 288  ]
"120
[; ;tetris.c: 120:     case RIGHT:
[e :U 306 ]
"121
[; ;tetris.c: 121:         for (c = 0; c < cycles; c++)
{
[e = _c -> -> 0 `i `uc ]
[e $U 310  ]
[e :U 307 ]
"122
[; ;tetris.c: 122:         {
{
"123
[; ;tetris.c: 123:             for (i = 7; i > 0; i--)
{
[e = _i -> -> 7 `i `uc ]
[e $ > -> _i `i -> 0 `i 311  ]
[e $U 312  ]
[e :U 311 ]
"124
[; ;tetris.c: 124:                 pObject[i] = pObject[i-1];
[e = *U + _pObject * -> _i `ux -> -> # *U _pObject `ui `ux *U + _pObject * -> - -> _i `i -> 1 `i `x -> -> # *U _pObject `i `x ]
[e -- _i -> -> 1 `i `uc ]
[e $ > -> _i `i -> 0 `i 311  ]
[e :U 312 ]
}
"125
[; ;tetris.c: 125:             pObject[0] = 0;
[e = *U + _pObject * -> -> 0 `i `x -> -> # *U _pObject `i `x -> -> 0 `i `us ]
"126
[; ;tetris.c: 126:             OriginX++;
[e ++ _OriginX -> -> 1 `i `uc ]
"127
[; ;tetris.c: 127:         }
}
[e ++ _c -> -> 1 `i `uc ]
[e :U 310 ]
[e $ < -> _c `i -> _cycles `i 307  ]
[e :U 308 ]
}
"128
[; ;tetris.c: 128:         break;
[e $U 288  ]
"129
[; ;tetris.c: 129:     case LEFT:
[e :U 314 ]
"130
[; ;tetris.c: 130:         for (c = 0; c < cycles; c++)
{
[e = _c -> -> 0 `i `uc ]
[e $U 318  ]
[e :U 315 ]
"131
[; ;tetris.c: 131:         {
{
"132
[; ;tetris.c: 132:             for (i = 0; i < 7; i++)
{
[e = _i -> -> 0 `i `uc ]
[e $ < -> _i `i -> 7 `i 319  ]
[e $U 320  ]
[e :U 319 ]
"133
[; ;tetris.c: 133:                 pObject[i] = pObject[i+1];
[e = *U + _pObject * -> _i `ux -> -> # *U _pObject `ui `ux *U + _pObject * -> + -> _i `i -> 1 `i `x -> -> # *U _pObject `i `x ]
[e ++ _i -> -> 1 `i `uc ]
[e $ < -> _i `i -> 7 `i 319  ]
[e :U 320 ]
}
"134
[; ;tetris.c: 134:             pObject[7] = 0;
[e = *U + _pObject * -> -> 7 `i `x -> -> # *U _pObject `i `x -> -> 0 `i `us ]
"135
[; ;tetris.c: 135:             OriginX--;
[e -- _OriginX -> -> 1 `i `uc ]
"136
[; ;tetris.c: 136:         }
}
[e ++ _c -> -> 1 `i `uc ]
[e :U 318 ]
[e $ < -> _c `i -> _cycles `i 315  ]
[e :U 316 ]
}
"137
[; ;tetris.c: 137:     }
}
[e $U 288  ]
[e :U 289 ]
[e [\ -> _direction `ui , $ -> . `E2578 0 `ui 290
 , $ -> . `E2578 1 `ui 298
 , $ -> . `E2578 3 `ui 306
 , $ -> . `E2578 2 `ui 314
 288 ]
[e :U 288 ]
"138
[; ;tetris.c: 138: }
[e :UE 287 ]
}
"153
[; ;tetris.c: 153: void newRotation(volatile uint16_t * pSource, uint16_t * pTarget, rotation_t rotation)
[v _newRotation `(v ~T0 @X0 1 ef3`*Vus`*us`E2584 ]
"154
[; ;tetris.c: 154: {
{
[e :U _newRotation ]
"153
[; ;tetris.c: 153: void newRotation(volatile uint16_t * pSource, uint16_t * pTarget, rotation_t rotation)
[v _pSource `*Vus ~T0 @X0 1 r1 ]
[v _pTarget `*us ~T0 @X0 1 r2 ]
[v _rotation `E2584 ~T0 @X0 1 r3 ]
"154
[; ;tetris.c: 154: {
[f ]
"155
[; ;tetris.c: 155:     int8_t x2, y2;
[v _x2 `c ~T0 @X0 1 a ]
[v _y2 `c ~T0 @X0 1 a ]
"156
[; ;tetris.c: 156:     uint8_t x1, y1;
[v _x1 `uc ~T0 @X0 1 a ]
[v _y1 `uc ~T0 @X0 1 a ]
"159
[; ;tetris.c: 159:     if (LimitedRotation == 2)
[e $ ! == -> _LimitedRotation `i -> 2 `i 323  ]
"160
[; ;tetris.c: 160:         memcpyvol(pTarget, pSource, 16);
[e ( _memcpyvol (3 , , -> _pTarget `*Vv -> _pSource `*CVv -> -> 16 `i `ui ]
[e $U 324  ]
"161
[; ;tetris.c: 161:     else
[e :U 323 ]
"162
[; ;tetris.c: 162:     {
{
"164
[; ;tetris.c: 164:         clearArray(pTarget, 8);
[e ( _clearArray (2 , -> _pTarget `*Vus -> -> 8 `i `ui ]
"169
[; ;tetris.c: 169:         if (LimitedRotation == 1 && IsRotated)
[e $ ! && == -> _LimitedRotation `i -> 1 `i != -> _IsRotated `i -> 0 `i 325  ]
"170
[; ;tetris.c: 170:             rotation = CCW;
[e = _rotation . `E2584 0 ]
[e :U 325 ]
"172
[; ;tetris.c: 172:         for (x1 = 0; x1 < 8; x1++)
{
[e = _x1 -> -> 0 `i `uc ]
[e $ < -> _x1 `i -> 8 `i 326  ]
[e $U 327  ]
[e :U 326 ]
"173
[; ;tetris.c: 173:             for (y1 = 0; y1 < 16; y1++)
{
[e = _y1 -> -> 0 `i `uc ]
[e $ < -> _y1 `i -> 16 `i 329  ]
[e $U 330  ]
[e :U 329 ]
"174
[; ;tetris.c: 174:             {
{
"175
[; ;tetris.c: 175:                 if (pSource[x1] & (1<<y1))
[e $ ! != & -> *U + _pSource * -> _x1 `ux -> -> # *U _pSource `ui `ux `ui -> << -> 1 `i -> _y1 `i `ui -> -> 0 `i `ui 332  ]
"176
[; ;tetris.c: 176:                 {
{
"177
[; ;tetris.c: 177:                     if (rotation == CW)
[e $ ! == -> _rotation `ui -> . `E2584 1 `ui 333  ]
"178
[; ;tetris.c: 178:                     {
{
"179
[; ;tetris.c: 179:                         x2 = OriginX + OriginY - y1;
[e = _x2 -> - + -> _OriginX `i -> _OriginY `i -> _y1 `i `c ]
"180
[; ;tetris.c: 180:                         y2 = x1 + OriginY - OriginX;
[e = _y2 -> - + -> _x1 `i -> _OriginY `i -> _OriginX `i `c ]
"181
[; ;tetris.c: 181:                     }
}
[e $U 334  ]
"182
[; ;tetris.c: 182:                     else
[e :U 333 ]
"183
[; ;tetris.c: 183:                     {
{
"184
[; ;tetris.c: 184:                         x2 = y1 + OriginX - OriginY;
[e = _x2 -> - + -> _y1 `i -> _OriginX `i -> _OriginY `i `c ]
"185
[; ;tetris.c: 185:                         y2 = OriginX + OriginY - x1;
[e = _y2 -> - + -> _OriginX `i -> _OriginY `i -> _x1 `i `c ]
"186
[; ;tetris.c: 186:                     }
}
[e :U 334 ]
"187
[; ;tetris.c: 187:                     if (x2 >= 0 && x2 < 8 &&
[e $ ! && && && >= -> _x2 `i -> 0 `i < -> _x2 `i -> 8 `i >= -> _y2 `i -> 0 `i < -> _y2 `i -> 16 `i 335  ]
"189
[; ;tetris.c: 189:                         pTarget[x2] |= (1<<y2);
[e =| *U + _pTarget * -> _x2 `x -> -> # *U _pTarget `i `x -> << -> 1 `i -> _y2 `i `us ]
[e :U 335 ]
"190
[; ;tetris.c: 190:                 }
}
[e :U 332 ]
"191
[; ;tetris.c: 191:             }
}
[e ++ _y1 -> -> 1 `i `uc ]
[e $ < -> _y1 `i -> 16 `i 329  ]
[e :U 330 ]
}
[e ++ _x1 -> -> 1 `i `uc ]
[e $ < -> _x1 `i -> 8 `i 326  ]
[e :U 327 ]
}
"192
[; ;tetris.c: 192:     }
}
[e :U 324 ]
"193
[; ;tetris.c: 193: }
[e :UE 322 ]
}
"195
[; ;tetris.c: 195: void selectNextObject(volatile uint16_t *pTarget)
[v _selectNextObject `(v ~T0 @X0 1 ef1`*Vus ]
"196
[; ;tetris.c: 196: {
{
[e :U _selectNextObject ]
"195
[; ;tetris.c: 195: void selectNextObject(volatile uint16_t *pTarget)
[v _pTarget `*Vus ~T0 @X0 1 r1 ]
"196
[; ;tetris.c: 196: {
[f ]
"197
[; ;tetris.c: 197:     uint8_t rndSelection, counter, selection;
[v _rndSelection `uc ~T0 @X0 1 a ]
[v _counter `uc ~T0 @X0 1 a ]
[v _selection `uc ~T0 @X0 1 a ]
"198
[; ;tetris.c: 198:     struct shape * s;
[v _s `*S281 ~T0 @X0 1 a ]
"199
[; ;tetris.c: 199:     _Bool check[7];
[v _check `a ~T0 @X0 -> 7 `i a ]
"200
[; ;tetris.c: 200:     if(countblocks == 7){
[e $ ! == -> _countblocks `i -> 7 `i 337  ]
{
"201
[; ;tetris.c: 201:         countblocks = 0;
[e = _countblocks -> -> 0 `i `uc ]
"203
[; ;tetris.c: 203:         for(counter=0; counter<7;counter++){
{
[e = _counter -> -> 0 `i `uc ]
[e $ < -> _counter `i -> 7 `i 338  ]
[e $U 339  ]
[e :U 338 ]
{
"204
[; ;tetris.c: 204:             randomobjects[counter] = 255;
[e = *U + &U _randomobjects * -> _counter `ux -> -> # *U &U _randomobjects `ui `ux -> -> 255 `i `uc ]
"205
[; ;tetris.c: 205:             check[counter] = 0;
[e = *U + &U _check * -> _counter `ux -> -> # *U &U _check `ui `ux -> -> 0 `i `a ]
"206
[; ;tetris.c: 206:         }
}
[e ++ _counter -> -> 1 `i `uc ]
[e $ < -> _counter `i -> 7 `i 338  ]
[e :U 339 ]
}
"207
[; ;tetris.c: 207:         for(counter=0; counter<7;counter++){
{
[e = _counter -> -> 0 `i `uc ]
[e $ < -> _counter `i -> 7 `i 341  ]
[e $U 342  ]
[e :U 341 ]
{
"208
[; ;tetris.c: 208:             _Bool fill = 0;
[v _fill `a ~T0 @X0 1 a ]
[e = _fill -> -> 0 `i `a ]
"209
[; ;tetris.c: 209:             do {
[e :U 346 ]
{
"210
[; ;tetris.c: 210:                 rndSelection = rnd_get_num();
[e = _rndSelection ( _rnd_get_num ..  ]
"211
[; ;tetris.c: 211:                 rndSelection = rndSelection % 7;
[e = _rndSelection -> % -> _rndSelection `i -> 7 `i `uc ]
"212
[; ;tetris.c: 212:                 if (check[rndSelection] == 0) {
[e $ ! == -> *U + &U _check * -> _rndSelection `ux -> -> # *U &U _check `ui `ux `i -> 0 `i 347  ]
{
"213
[; ;tetris.c: 213:                     randomobjects[counter] = rndSelection;
[e = *U + &U _randomobjects * -> _counter `ux -> -> # *U &U _randomobjects `ui `ux _rndSelection ]
"214
[; ;tetris.c: 214:                     check[rndSelection] = 1;
[e = *U + &U _check * -> _rndSelection `ux -> -> # *U &U _check `ui `ux -> -> 1 `i `a ]
"215
[; ;tetris.c: 215:                     fill = 1;
[e = _fill -> -> 1 `i `a ]
"216
[; ;tetris.c: 216:                 }
}
[e :U 347 ]
"217
[; ;tetris.c: 217:             } while (!fill);
}
[e $ ! != -> _fill `i -> 0 `i 346  ]
[e :U 345 ]
"218
[; ;tetris.c: 218:         }
}
[e ++ _counter -> -> 1 `i `uc ]
[e $ < -> _counter `i -> 7 `i 341  ]
[e :U 342 ]
}
"219
[; ;tetris.c: 219:     }
}
[e :U 337 ]
"220
[; ;tetris.c: 220:     s = &shapes[randomobjects[countblocks]];
[e = _s &U *U + &U _shapes * -> *U + &U _randomobjects * -> _countblocks `ux -> -> # *U &U _randomobjects `ui `ux `ux -> -> # *U &U _shapes `ui `ux ]
"221
[; ;tetris.c: 221:     countblocks++;
[e ++ _countblocks -> -> 1 `i `uc ]
"223
[; ;tetris.c: 223:     memcpyvol(pTarget, s->graphic, 16);
[e ( _memcpyvol (3 , , -> _pTarget `*Vv -> &U . *U _s 0 `*CVv -> -> 16 `i `ui ]
"224
[; ;tetris.c: 224:     OriginX = s->x;
[e = _OriginX . *U _s 1 ]
"225
[; ;tetris.c: 225:     OriginY = s->y;
[e = _OriginY . *U _s 2 ]
"226
[; ;tetris.c: 226:     IsRotated = 0;
[e = _IsRotated -> -> 0 `i `a ]
"227
[; ;tetris.c: 227:     LimitedRotation = s->limitedRotation;
[e = _LimitedRotation . *U _s 3 ]
"228
[; ;tetris.c: 228:     set_mS(0);
[e ( _set_mS (1 -> -> 0 `i `us ]
"229
[; ;tetris.c: 229: }
[e :UE 336 ]
}
"231
[; ;tetris.c: 231: _Bool checkForBottom(volatile uint16_t * pObject)
[v _checkForBottom `(a ~T0 @X0 1 ef1`*Vus ]
"232
[; ;tetris.c: 232: {
{
[e :U _checkForBottom ]
"231
[; ;tetris.c: 231: _Bool checkForBottom(volatile uint16_t * pObject)
[v _pObject `*Vus ~T0 @X0 1 r1 ]
"232
[; ;tetris.c: 232: {
[f ]
"233
[; ;tetris.c: 233:     for (uint8_t i = 0; i < 8; i++)
{
[v _i `uc ~T0 @X0 1 a ]
[e = _i -> -> 0 `i `uc ]
[e $ < -> _i `i -> 8 `i 349  ]
[e $U 350  ]
[e :U 349 ]
"234
[; ;tetris.c: 234:         if (pObject[i] & (1<<15))
[e $ ! != & -> *U + _pObject * -> _i `ux -> -> # *U _pObject `ui `ux `ui -> << -> 1 `i -> 15 `i `ui -> -> 0 `i `ui 352  ]
"235
[; ;tetris.c: 235:             return 1;
[e ) -> -> 1 `i `a ]
[e $UE 348  ]
[e :U 352 ]
[e ++ _i -> -> 1 `i `uc ]
[e $ < -> _i `i -> 8 `i 349  ]
[e :U 350 ]
}
"236
[; ;tetris.c: 236:     return 0;
[e ) -> -> 0 `i `a ]
[e $UE 348  ]
"237
[; ;tetris.c: 237: }
[e :UE 348 ]
}
"240
[; ;tetris.c: 240: void checkForLines(volatile uint16_t * pObject)
[v _checkForLines `(v ~T0 @X0 1 ef1`*Vus ]
"241
[; ;tetris.c: 241: {
{
[e :U _checkForLines ]
"240
[; ;tetris.c: 240: void checkForLines(volatile uint16_t * pObject)
[v _pObject `*Vus ~T0 @X0 1 r1 ]
"241
[; ;tetris.c: 241: {
[f ]
"242
[; ;tetris.c: 242:     uint8_t x, y, pixels;
[v _x `uc ~T0 @X0 1 a ]
[v _y `uc ~T0 @X0 1 a ]
[v _pixels `uc ~T0 @X0 1 a ]
"244
[; ;tetris.c: 244:     for (y = 0; y < 16; y++)
{
[e = _y -> -> 0 `i `uc ]
[e $ < -> _y `i -> 16 `i 354  ]
[e $U 355  ]
[e :U 354 ]
"245
[; ;tetris.c: 245:     {
{
"246
[; ;tetris.c: 246:         pixels = 0;
[e = _pixels -> -> 0 `i `uc ]
"247
[; ;tetris.c: 247:         for (x = 0; x < 8; x++)
{
[e = _x -> -> 0 `i `uc ]
[e $ < -> _x `i -> 8 `i 357  ]
[e $U 358  ]
[e :U 357 ]
"248
[; ;tetris.c: 248:             if (pObject[x] & (1<<y))
[e $ ! != & -> *U + _pObject * -> _x `ux -> -> # *U _pObject `ui `ux `ui -> << -> 1 `i -> _y `i `ui -> -> 0 `i `ui 360  ]
"249
[; ;tetris.c: 249:                 pixels++;
[e ++ _pixels -> -> 1 `i `uc ]
[e :U 360 ]
[e ++ _x -> -> 1 `i `uc ]
[e $ < -> _x `i -> 8 `i 357  ]
[e :U 358 ]
}
"250
[; ;tetris.c: 250:         if (pixels == 8)
[e $ ! == -> _pixels `i -> 8 `i 361  ]
"251
[; ;tetris.c: 251:         {
{
"252
[; ;tetris.c: 252:             removeLine(pObject, y);
[e ( _removeLine (2 , _pObject _y ]
"253
[; ;tetris.c: 253:             NumberOfLines++;
[e ++ _NumberOfLines -> -> 1 `i `uc ]
"254
[; ;tetris.c: 254:         }
}
[e :U 361 ]
"255
[; ;tetris.c: 255:     }
}
[e ++ _y -> -> 1 `i `uc ]
[e $ < -> _y `i -> 16 `i 354  ]
[e :U 355 ]
}
"256
[; ;tetris.c: 256: }
[e :UE 353 ]
}
"258
[; ;tetris.c: 258: _Bool tetris_button_left(void) {
[v _tetris_button_left `(a ~T0 @X0 1 ef ]
{
[e :U _tetris_button_left ]
[f ]
"259
[; ;tetris.c: 259:     if (game)
[e $ ! != -> _game `i -> 0 `i 363  ]
"260
[; ;tetris.c: 260:     {
{
"261
[; ;tetris.c: 261:         if (!checkForLeftWall(ObjectData))
[e $ ! ! != -> ( _checkForLeftWall (1 &U _ObjectData `i -> 0 `i 364  ]
"262
[; ;tetris.c: 262:         {
{
"265
[; ;tetris.c: 265:             memcpyvol(tmpObjectData, ObjectData, 16);
[e ( _memcpyvol (3 , , -> &U _tmpObjectData `*Vv -> &U _ObjectData `*CVv -> -> 16 `i `ui ]
"267
[; ;tetris.c: 267:             moveObject(tmpObjectData, LEFT, 1);
[e ( _moveObject (3 , , -> &U _tmpObjectData `*Vus . `E2578 2 -> -> 1 `i `uc ]
"269
[; ;tetris.c: 269:             if (!collisionDetect(tmpObjectData, BackgroundData))
[e $ ! ! != -> ( _collisionDetect (2 , -> &U _tmpObjectData `*Vus &U _BackgroundData `i -> 0 `i 365  ]
"270
[; ;tetris.c: 270:             {
{
"272
[; ;tetris.c: 272:                 pauseMultiplexing();
[e ( _pauseMultiplexing ..  ]
"274
[; ;tetris.c: 274:                 mergeObjects(tmpObjectData, ObjectData, OVERRIDE);
[e ( _mergeObjects (3 , , -> &U _tmpObjectData `*Vus &U _ObjectData . `E2573 0 ]
"276
[; ;tetris.c: 276:                 resumeMultiplexing();
[e ( _resumeMultiplexing ..  ]
"278
[; ;tetris.c: 278:                 CheckForNewLines = 1;
[e = _CheckForNewLines -> -> 1 `i `a ]
"279
[; ;tetris.c: 279:             }
}
[e :U 365 ]
"280
[; ;tetris.c: 280:         }
}
[e :U 364 ]
"281
[; ;tetris.c: 281:     }
}
[e :U 363 ]
"282
[; ;tetris.c: 282:     return game;
[e ) _game ]
[e $UE 362  ]
"283
[; ;tetris.c: 283: }
[e :UE 362 ]
}
"285
[; ;tetris.c: 285: _Bool tetris_button_right(void){
[v _tetris_button_right `(a ~T0 @X0 1 ef ]
{
[e :U _tetris_button_right ]
[f ]
"286
[; ;tetris.c: 286:     if (game)
[e $ ! != -> _game `i -> 0 `i 367  ]
"287
[; ;tetris.c: 287:     {
{
"288
[; ;tetris.c: 288:         if (!checkForRightWall(ObjectData))
[e $ ! ! != -> ( _checkForRightWall (1 &U _ObjectData `i -> 0 `i 368  ]
"289
[; ;tetris.c: 289:         {
{
"290
[; ;tetris.c: 290:             mergeObjects(ObjectData, tmpObjectData, OVERRIDE);
[e ( _mergeObjects (3 , , &U _ObjectData -> &U _tmpObjectData `*Vus . `E2573 0 ]
"291
[; ;tetris.c: 291:             moveObject(tmpObjectData, RIGHT, 1);
[e ( _moveObject (3 , , -> &U _tmpObjectData `*Vus . `E2578 3 -> -> 1 `i `uc ]
"293
[; ;tetris.c: 293:             if (!collisionDetect(tmpObjectData, BackgroundData))
[e $ ! ! != -> ( _collisionDetect (2 , -> &U _tmpObjectData `*Vus &U _BackgroundData `i -> 0 `i 369  ]
"294
[; ;tetris.c: 294:             {
{
"295
[; ;tetris.c: 295:                 pauseMultiplexing();
[e ( _pauseMultiplexing ..  ]
"296
[; ;tetris.c: 296:                 mergeObjects(tmpObjectData, ObjectData, OVERRIDE);
[e ( _mergeObjects (3 , , -> &U _tmpObjectData `*Vus &U _ObjectData . `E2573 0 ]
"297
[; ;tetris.c: 297:                 resumeMultiplexing();
[e ( _resumeMultiplexing ..  ]
"298
[; ;tetris.c: 298:                 CheckForNewLines = 1;
[e = _CheckForNewLines -> -> 1 `i `a ]
"299
[; ;tetris.c: 299:             }
}
[e :U 369 ]
"300
[; ;tetris.c: 300:         }
}
[e :U 368 ]
"301
[; ;tetris.c: 301:     }
}
[e :U 367 ]
"302
[; ;tetris.c: 302:     return game;
[e ) _game ]
[e $UE 366  ]
"303
[; ;tetris.c: 303: }
[e :UE 366 ]
}
"305
[; ;tetris.c: 305: _Bool tetris_button_up(void){
[v _tetris_button_up `(a ~T0 @X0 1 ef ]
{
[e :U _tetris_button_up ]
[f ]
"306
[; ;tetris.c: 306:     if (game)
[e $ ! != -> _game `i -> 0 `i 371  ]
"307
[; ;tetris.c: 307:     {
{
"308
[; ;tetris.c: 308:         newRotation(ObjectData, tmpObjectData, CW);
[e ( _newRotation (3 , , &U _ObjectData &U _tmpObjectData . `E2584 1 ]
"310
[; ;tetris.c: 310:         if (pixelCount(ObjectData) == pixelCount(tmpObjectData))
[e $ ! == -> ( _pixelCount (1 &U _ObjectData `i -> ( _pixelCount (1 -> &U _tmpObjectData `*Vus `i 372  ]
"311
[; ;tetris.c: 311:         {
{
"313
[; ;tetris.c: 313:             if (!collisionDetect(tmpObjectData, BackgroundData))
[e $ ! ! != -> ( _collisionDetect (2 , -> &U _tmpObjectData `*Vus &U _BackgroundData `i -> 0 `i 373  ]
"314
[; ;tetris.c: 314:             {
{
"317
[; ;tetris.c: 317:                 pauseMultiplexing();
[e ( _pauseMultiplexing ..  ]
"319
[; ;tetris.c: 319:                 mergeObjects(tmpObjectData, ObjectData, OVERRIDE);
[e ( _mergeObjects (3 , , -> &U _tmpObjectData `*Vus &U _ObjectData . `E2573 0 ]
"320
[; ;tetris.c: 320:                 resumeMultiplexing();
[e ( _resumeMultiplexing ..  ]
"321
[; ;tetris.c: 321:                 IsRotated = !IsRotated;
[e = _IsRotated -> -> ! != -> _IsRotated `i -> 0 `i `i `a ]
"322
[; ;tetris.c: 322:             }
}
[e :U 373 ]
"323
[; ;tetris.c: 323:         }
}
[e :U 372 ]
"324
[; ;tetris.c: 324:     }
}
[e :U 371 ]
"325
[; ;tetris.c: 325:     return game;
[e ) _game ]
[e $UE 370  ]
"326
[; ;tetris.c: 326: }
[e :UE 370 ]
}
"328
[; ;tetris.c: 328: _Bool tetris_button_down(void) {
[v _tetris_button_down `(a ~T0 @X0 1 ef ]
{
[e :U _tetris_button_down ]
[f ]
"329
[; ;tetris.c: 329:     if (game)
[e $ ! != -> _game `i -> 0 `i 375  ]
"330
[; ;tetris.c: 330:     {
{
"331
[; ;tetris.c: 331:     while (moveObjectDown(ObjectData))
[e $U 376  ]
[e :U 377 ]
"332
[; ;tetris.c: 332:             continue;
[e $U 376  ]
[e :U 376 ]
"331
[; ;tetris.c: 331:     while (moveObjectDown(ObjectData))
[e $ != -> ( _moveObjectDown (1 &U _ObjectData `i -> 0 `i 377  ]
[e :U 378 ]
"333
[; ;tetris.c: 333:     }
}
[e :U 375 ]
"334
[; ;tetris.c: 334:     return game;
[e ) _game ]
[e $UE 374  ]
"335
[; ;tetris.c: 335: }
[e :UE 374 ]
}
"336
[; ;tetris.c: 336: _Bool tetris_timer(void){
[v _tetris_timer `(a ~T0 @X0 1 ef ]
{
[e :U _tetris_timer ]
[f ]
"337
[; ;tetris.c: 337:     if (game) {
[e $ ! != -> _game `i -> 0 `i 380  ]
{
"338
[; ;tetris.c: 338:     DropObject = 1;
[e = _DropObject -> -> 1 `i `a ]
"339
[; ;tetris.c: 339:     }
}
[e :U 380 ]
"340
[; ;tetris.c: 340:     return game;
[e ) _game ]
[e $UE 379  ]
"341
[; ;tetris.c: 341: }
[e :UE 379 ]
}
"343
[; ;tetris.c: 343: void initialise_tetris(void) {
[v _initialise_tetris `(v ~T0 @X0 1 ef ]
{
[e :U _initialise_tetris ]
[f ]
"344
[; ;tetris.c: 344:     OriginX = 0;
[e = _OriginX -> -> 0 `i `uc ]
"345
[; ;tetris.c: 345:     OriginY = 0;
[e = _OriginY -> -> 0 `i `uc ]
"347
[; ;tetris.c: 347:     NumberOfLines = 0;
[e = _NumberOfLines -> -> 0 `i `uc ]
"349
[; ;tetris.c: 349:     DropObject = 0;
[e = _DropObject -> -> 0 `i `a ]
"350
[; ;tetris.c: 350:     CheckForNewLines = 0;
[e = _CheckForNewLines -> -> 0 `i `a ]
"351
[; ;tetris.c: 351:     randomobjects[7] = 255;
[e = *U + &U _randomobjects * -> -> -> 7 `i `ui `ux -> -> # *U &U _randomobjects `ui `ux -> -> 255 `i `uc ]
"352
[; ;tetris.c: 352:     countblocks = 7;
[e = _countblocks -> -> 7 `i `uc ]
"353
[; ;tetris.c: 353:     game = 1;
[e = _game -> -> 1 `i `a ]
"354
[; ;tetris.c: 354: }
[e :UE 381 ]
}
"355
[; ;tetris.c: 355: _Bool tetris_buttons(void)
[v _tetris_buttons `(a ~T0 @X0 1 ef ]
"356
[; ;tetris.c: 356: {
{
[e :U _tetris_buttons ]
[f ]
"357
[; ;tetris.c: 357:     _Bool returnbool = 0;
[v _returnbool `a ~T0 @X0 1 a ]
[e = _returnbool -> -> 0 `i `a ]
"358
[; ;tetris.c: 358:     if(checkLeft(1)){ tetris_button_left(); returnbool = 1; }
[e $ ! != -> ( _checkLeft (1 -> -> 1 `i `a `i -> 0 `i 383  ]
{
[e ( _tetris_button_left ..  ]
[e = _returnbool -> -> 1 `i `a ]
}
[e :U 383 ]
"359
[; ;tetris.c: 359:     if(checkRight(1)){ tetris_button_right(); returnbool = 1; }
[e $ ! != -> ( _checkRight (1 -> -> 1 `i `a `i -> 0 `i 384  ]
{
[e ( _tetris_button_right ..  ]
[e = _returnbool -> -> 1 `i `a ]
}
[e :U 384 ]
"360
[; ;tetris.c: 360:     if(checkUp(1)){ tetris_button_up(); returnbool = 1; }
[e $ ! != -> ( _checkUp (1 -> -> 1 `i `a `i -> 0 `i 385  ]
{
[e ( _tetris_button_up ..  ]
[e = _returnbool -> -> 1 `i `a ]
}
[e :U 385 ]
"361
[; ;tetris.c: 361:     if(checkDown(1)){ tetris_button_down(); returnbool = 1; }
[e $ ! != -> ( _checkDown (1 -> -> 1 `i `a `i -> 0 `i 386  ]
{
[e ( _tetris_button_down ..  ]
[e = _returnbool -> -> 1 `i `a ]
}
[e :U 386 ]
"362
[; ;tetris.c: 362:     return returnbool;
[e ) _returnbool ]
[e $UE 382  ]
"363
[; ;tetris.c: 363: }
[e :UE 382 ]
}
"365
[; ;tetris.c: 365: void tetris_main(void) {
[v _tetris_main `(v ~T0 @X0 1 ef ]
{
[e :U _tetris_main ]
[f ]
"366
[; ;tetris.c: 366:     initialise_tetris();
[e ( _initialise_tetris ..  ]
"367
[; ;tetris.c: 367:     uint8_t LastHighScore = readHighScore(0);
[v _LastHighScore `uc ~T0 @X0 1 a ]
[e = _LastHighScore ( _readHighScore (1 -> -> 0 `i `uc ]
"368
[; ;tetris.c: 368:     show_score(LastHighScore);
[e ( _show_score (1 _LastHighScore ]
"369
[; ;tetris.c: 369:     EndOfGame = 0;
[e = _EndOfGame -> -> 0 `i `a ]
"370
[; ;tetris.c: 370:     selectNextObject(ObjectData);
[e ( _selectNextObject (1 &U _ObjectData ]
"371
[; ;tetris.c: 371:     set_screen(ObjectData);
[e ( _set_screen (1 &U _ObjectData ]
"372
[; ;tetris.c: 372:      do {
[e :U 390 ]
{
"373
[; ;tetris.c: 373:         _Bool newScreen;
[v _newScreen `a ~T0 @X0 1 a ]
"374
[; ;tetris.c: 374:         newScreen = tetris_buttons() || newScreen;
[e = _newScreen -> -> || != -> ( _tetris_buttons ..  `i -> 0 `i != -> _newScreen `i -> 0 `i `i `a ]
"375
[; ;tetris.c: 375:         if (DropObject)
[e $ ! != -> _DropObject `i -> 0 `i 391  ]
"376
[; ;tetris.c: 376:         {
{
"377
[; ;tetris.c: 377:             DropObject = 0;
[e = _DropObject -> -> 0 `i `a ]
"378
[; ;tetris.c: 378:             moveObjectDown(ObjectData);
[e ( _moveObjectDown (1 &U _ObjectData ]
"379
[; ;tetris.c: 379:             newScreen = newScreen || 1;
[e = _newScreen -> -> || != -> _newScreen `i -> 0 `i != -> 1 `i -> 0 `i `i `a ]
"380
[; ;tetris.c: 380:         }
}
[e :U 391 ]
"381
[; ;tetris.c: 381:         if (CheckForNewLines)
[e $ ! != -> _CheckForNewLines `i -> 0 `i 392  ]
"382
[; ;tetris.c: 382:         {
{
"383
[; ;tetris.c: 383:             checkForLines(BackgroundData);
[e ( _checkForLines (1 &U _BackgroundData ]
"384
[; ;tetris.c: 384:             newScreen = newScreen || 1;
[e = _newScreen -> -> || != -> _newScreen `i -> 0 `i != -> 1 `i -> 0 `i `i `a ]
"385
[; ;tetris.c: 385:         }
}
[e :U 392 ]
"386
[; ;tetris.c: 386:         if (newScreen)
[e $ ! != -> _newScreen `i -> 0 `i 393  ]
"387
[; ;tetris.c: 387:         {
{
"388
[; ;tetris.c: 388:             mergeObjects(BackgroundData, Screen_Data, OVERRIDE);
[e ( _mergeObjects (3 , , &U _BackgroundData &U _Screen_Data . `E2573 0 ]
"389
[; ;tetris.c: 389:             mergeObjects(ObjectData, Screen_Data, MERGE);
[e ( _mergeObjects (3 , , &U _ObjectData &U _Screen_Data . `E2573 1 ]
"390
[; ;tetris.c: 390:             set_screen(Screen_Data);
[e ( _set_screen (1 &U _Screen_Data ]
"391
[; ;tetris.c: 391:             newScreen = 0;
[e = _newScreen -> -> 0 `i `a ]
"392
[; ;tetris.c: 392:         }
}
[e :U 393 ]
"393
[; ;tetris.c: 393:     } while (!EndOfGame);
}
[e $ ! != -> _EndOfGame `i -> 0 `i 390  ]
[e :U 389 ]
"394
[; ;tetris.c: 394:     writeHighScore(0, LastHighScore, NumberOfLines);
[e ( _writeHighScore (3 , , -> -> 0 `i `uc _LastHighScore _NumberOfLines ]
"395
[; ;tetris.c: 395: }
[e :UE 387 ]
}
