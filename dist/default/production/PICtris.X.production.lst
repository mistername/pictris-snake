

Microchip Technology PIC18 LITE Macro Assembler V2.00 build -1524193055 
                                                                                               Mon Jan 28 22:58:44 2019

Microchip Technology Omniscient Code Generator v2.00 (Free mode) build 20180527130849
     1                           	processor	18F4520
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	idataBANK0,global,class=CODE,delta=1,noexec
     7                           	psect	idataBANK2,global,class=CODE,delta=1,noexec
     8                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     9                           	psect	cinit,global,reloc=2,class=CODE,delta=1
    10                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    11                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    12                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    13                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    14                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    15                           	psect	dataBANK2,global,class=BANK2,space=1,delta=1,lowdata,noexec
    16                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    17                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    18                           	psect	text0,global,reloc=2,class=CODE,delta=1
    19                           	psect	text1,global,reloc=2,class=CODE,delta=1
    20                           	psect	text2,global,reloc=2,class=CODE,delta=1
    21                           	psect	text3,global,reloc=2,class=CODE,delta=1
    22                           	psect	text4,global,reloc=2,class=CODE,delta=1
    23                           	psect	text5,global,reloc=2,class=CODE,delta=1
    24                           	psect	text6,global,reloc=2,class=CODE,delta=1
    25                           	psect	text7,global,reloc=2,class=CODE,delta=1
    26                           	psect	text8,global,reloc=2,class=CODE,delta=1
    27                           	psect	text9,global,reloc=2,class=CODE,delta=1
    28                           	psect	text10,global,reloc=2,class=CODE,delta=1
    29                           	psect	text11,global,reloc=2,class=CODE,delta=1
    30                           	psect	text12,global,reloc=2,class=CODE,delta=1
    31                           	psect	text13,global,reloc=2,class=CODE,delta=1,group=1
    32                           	psect	text14,global,reloc=2,class=CODE,delta=1
    33                           	psect	text15,global,reloc=2,class=CODE,delta=1
    34                           	psect	text16,global,reloc=2,class=CODE,delta=1
    35                           	psect	text17,global,reloc=2,class=CODE,delta=1
    36                           	psect	text18,global,reloc=2,class=CODE,delta=1
    37                           	psect	text19,global,reloc=2,class=CODE,delta=1
    38                           	psect	text20,global,reloc=2,class=CODE,delta=1
    39                           	psect	text21,global,reloc=2,class=CODE,delta=1
    40                           	psect	text22,global,reloc=2,class=CODE,delta=1
    41                           	psect	text23,global,reloc=2,class=CODE,delta=1
    42                           	psect	text24,global,reloc=2,class=CODE,delta=1,group=1
    43                           	psect	text25,global,reloc=2,class=CODE,delta=1,group=1
    44                           	psect	text26,global,reloc=2,class=CODE,delta=1
    45                           	psect	text27,global,reloc=2,class=CODE,delta=1
    46                           	psect	text28,global,reloc=2,class=CODE,delta=1
    47                           	psect	text29,global,reloc=2,class=CODE,delta=1
    48                           	psect	text30,global,reloc=2,class=CODE,delta=1
    49                           	psect	text31,global,reloc=2,class=CODE,delta=1
    50                           	psect	text32,global,reloc=2,class=CODE,delta=1
    51                           	psect	text33,global,reloc=2,class=CODE,delta=1
    52                           	psect	text34,global,reloc=2,class=CODE,delta=1
    53                           	psect	text35,global,reloc=2,class=CODE,delta=1
    54                           	psect	text36,global,reloc=2,class=CODE,delta=1,group=1
    55                           	psect	text37,global,reloc=2,class=CODE,delta=1
    56                           	psect	text38,global,reloc=2,class=CODE,delta=1
    57                           	psect	text39,global,reloc=2,class=CODE,delta=1
    58                           	psect	text40,global,reloc=2,class=CODE,delta=1
    59                           	psect	text41,global,reloc=2,class=CODE,delta=1
    60                           	psect	text42,global,reloc=2,class=CODE,delta=1
    61                           	psect	text43,global,reloc=2,class=CODE,delta=1
    62                           	psect	text44,global,reloc=2,class=CODE,delta=1
    63                           	psect	text45,global,reloc=2,class=CODE,delta=1
    64                           	psect	text46,global,reloc=2,class=CODE,delta=1
    65                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    66                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    67                           	psect	text48,global,reloc=2,class=CODE,delta=1
    68                           	psect	text49,global,reloc=2,class=CODE,delta=1,group=1
    69                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    70                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    71                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    72  0000                     
    73                           ; Version 2.00
    74                           ; Generated 27/05/2018 GMT
    75                           ; 
    76                           ; Copyright Â© 2018, Microchip Technology Inc. and its subsidiaries ("Microchip")
    77                           ; All rights reserved.
    78                           ; 
    79                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    80                           ; 
    81                           ; Redistribution and use in source and binary forms, with or without modification, are
    82                           ; permitted provided that the following conditions are met:
    83                           ; 
    84                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    85                           ;        conditions and the following disclaimer.
    86                           ; 
    87                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    88                           ;        of conditions and the following disclaimer in the documentation and/or other
    89                           ;        materials provided with the distribution.
    90                           ; 
    91                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    92                           ;        software without specific prior written permission.
    93                           ; 
    94                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    95                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    96                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    97                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    98                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    99                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   100                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   101                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   102                           ; 
   103                           ; 
   104                           ; Code-generator required, PIC18F4520 Definitions
   105                           ; 
   106                           ; SFR Addresses
   107  0000                     
   108                           	psect	idataCOMRAM
   109  0021B6                     __pidataCOMRAM:
   110                           	opt stack 0
   111                           
   112                           ;initializer for __lfsr
   113  0021B6  FF                 	db	255
   114                           
   115                           	psect	idataBANK0
   116  002160                     __pidataBANK0:
   117                           	opt stack 0
   118                           
   119                           ;initializer for show_score@F2907
   120  002160  FFFF               	dw	65535
   121  002162  FFFF               	dw	65535
   122  002164  FFFF               	dw	65535
   123  002166  FFFF               	dw	65535
   124  002168  FFFF               	dw	65535
   125  00216A  FFFF               	dw	65535
   126  00216C  FFFF               	dw	65535
   127  00216E  FFFF               	dw	65535
   128                           
   129                           	psect	idataBANK2
   130  001936                     __pidataBANK2:
   131                           	opt stack 0
   132                           
   133                           ;initializer for _shapes
   134  001936  0000               	dw	0
   135  001938  0000               	dw	0
   136  00193A  0000               	dw	0
   137  00193C  0001               	dw	1
   138  00193E  0003               	dw	3
   139  001940  0001               	dw	1
   140  001942  0000               	dw	0
   141  001944  0000               	dw	0
   142  001946  04                 	db	4
   143  001947  00                 	db	0
   144  001948  00                 	db	0
   145  001949  0000               	dw	0
   146  00194B  0000               	dw	0
   147  00194D  0001               	dw	1
   148  00194F  0001               	dw	1
   149  001951  0001               	dw	1
   150  001953  0001               	dw	1
   151  001955  0000               	dw	0
   152  001957  0000               	dw	0
   153  001959  04                 	db	4
   154  00195A  00                 	db	0
   155  00195B  01                 	db	1
   156  00195C  0000               	dw	0
   157  00195E  0000               	dw	0
   158  001960  0000               	dw	0
   159  001962  0003               	dw	3
   160  001964  0001               	dw	1
   161  001966  0001               	dw	1
   162  001968  0000               	dw	0
   163  00196A  0000               	dw	0
   164  00196C  04                 	db	4
   165  00196D  00                 	db	0
   166  00196E  00                 	db	0
   167  00196F  0000               	dw	0
   168  001971  0000               	dw	0
   169  001973  0000               	dw	0
   170  001975  0001               	dw	1
   171  001977  0001               	dw	1
   172  001979  0003               	dw	3
   173  00197B  0000               	dw	0
   174  00197D  0000               	dw	0
   175  00197F  04                 	db	4
   176  001980  00                 	db	0
   177  001981  00                 	db	0
   178  001982  0000               	dw	0
   179  001984  0000               	dw	0
   180  001986  0000               	dw	0
   181  001988  0003               	dw	3
   182  00198A  0003               	dw	3
   183  00198C  0000               	dw	0
   184  00198E  0000               	dw	0
   185  001990  0000               	dw	0
   186  001992  03                 	db	3
   187  001993  01                 	db	1
   188  001994  02                 	db	2
   189  001995  0000               	dw	0
   190  001997  0000               	dw	0
   191  001999  0000               	dw	0
   192  00199B  0002               	dw	2
   193  00199D  0003               	dw	3
   194  00199F  0001               	dw	1
   195  0019A1  0000               	dw	0
   196  0019A3  0000               	dw	0
   197  0019A5  04                 	db	4
   198  0019A6  01                 	db	1
   199  0019A7  01                 	db	1
   200  0019A8  0000               	dw	0
   201  0019AA  0000               	dw	0
   202  0019AC  0000               	dw	0
   203  0019AE  0001               	dw	1
   204  0019B0  0003               	dw	3
   205  0019B2  0002               	dw	2
   206  0019B4  0000               	dw	0
   207  0019B6  0000               	dw	0
   208  0019B8  04                 	db	4
   209  0019B9  01                 	db	1
   210  0019BA  01                 	db	1
   211                           
   212                           	psect	smallconst
   213  000600                     __psmallconst:
   214                           	opt stack 0
   215  000600  00                 	db	0
   216  000601                     _SnakeYtext:
   217                           	opt stack 0
   218  000601  0001               	dw	1
   219  000603  0002               	dw	2
   220  000605  0004               	dw	4
   221  000607  0008               	dw	8
   222  000609  0010               	dw	16
   223  00060B  0020               	dw	32
   224  00060D  0040               	dw	64
   225  00060F  0080               	dw	128
   226  000611  0100               	dw	256
   227  000613  0200               	dw	512
   228  000615  0400               	dw	1024
   229  000617  0800               	dw	2048
   230  000619  1000               	dw	4096
   231  00061B  2000               	dw	8192
   232  00061D  4000               	dw	16384
   233  00061F  8000               	dw	32768
   234  000621                     __end_of_SnakeYtext:
   235                           	opt stack 0
   236  000621                     _choose_screen:
   237                           	opt stack 0
   238  000621  FFFF               	dw	65535
   239  000623  8181               	dw	33153
   240  000625  BD81               	dw	48513
   241  000627  858D               	dw	34189
   242  000629  8599               	dw	34201
   243  00062B  AD81               	dw	44417
   244  00062D  8181               	dw	33153
   245  00062F  FFFF               	dw	65535
   246  000631                     __end_of_choose_screen:
   247                           	opt stack 0
   248  000631                     _Number:
   249                           	opt stack 0
   250  000631  001E               	dw	30
   251  000633  0012               	dw	18
   252  000635  0012               	dw	18
   253  000637  0012               	dw	18
   254  000639  001E               	dw	30
   255  00063B  0000               	dw	0
   256  00063D  0000               	dw	0
   257  00063F  0000               	dw	0
   258  000641  0004               	dw	4
   259  000643  000C               	dw	12
   260  000645  0004               	dw	4
   261  000647  0004               	dw	4
   262  000649  001E               	dw	30
   263  00064B  0000               	dw	0
   264  00064D  0000               	dw	0
   265  00064F  0000               	dw	0
   266  000651  001E               	dw	30
   267  000653  0002               	dw	2
   268  000655  001E               	dw	30
   269  000657  0010               	dw	16
   270  000659  001E               	dw	30
   271  00065B  0000               	dw	0
   272  00065D  0000               	dw	0
   273  00065F  0000               	dw	0
   274  000661  001E               	dw	30
   275  000663  0002               	dw	2
   276  000665  000E               	dw	14
   277  000667  0002               	dw	2
   278  000669  001E               	dw	30
   279  00066B  0000               	dw	0
   280  00066D  0000               	dw	0
   281  00066F  0000               	dw	0
   282  000671  0012               	dw	18
   283  000673  0012               	dw	18
   284  000675  001E               	dw	30
   285  000677  0002               	dw	2
   286  000679  0002               	dw	2
   287  00067B  0000               	dw	0
   288  00067D  0000               	dw	0
   289  00067F  0000               	dw	0
   290  000681  001E               	dw	30
   291  000683  0010               	dw	16
   292  000685  001E               	dw	30
   293  000687  0002               	dw	2
   294  000689  001E               	dw	30
   295  00068B  0000               	dw	0
   296  00068D  0000               	dw	0
   297  00068F  0000               	dw	0
   298  000691  001E               	dw	30
   299  000693  0010               	dw	16
   300  000695  001E               	dw	30
   301  000697  0012               	dw	18
   302  000699  001E               	dw	30
   303  00069B  0000               	dw	0
   304  00069D  0000               	dw	0
   305  00069F  0000               	dw	0
   306  0006A1  001E               	dw	30
   307  0006A3  0002               	dw	2
   308  0006A5  0004               	dw	4
   309  0006A7  0008               	dw	8
   310  0006A9  0010               	dw	16
   311  0006AB  0000               	dw	0
   312  0006AD  0000               	dw	0
   313  0006AF  0000               	dw	0
   314  0006B1  001E               	dw	30
   315  0006B3  0012               	dw	18
   316  0006B5  001E               	dw	30
   317  0006B7  0012               	dw	18
   318  0006B9  001E               	dw	30
   319  0006BB  0000               	dw	0
   320  0006BD  0000               	dw	0
   321  0006BF  0000               	dw	0
   322  0006C1  001E               	dw	30
   323  0006C3  0012               	dw	18
   324  0006C5  001E               	dw	30
   325  0006C7  0002               	dw	2
   326  0006C9  0002               	dw	2
   327  0006CB  0000               	dw	0
   328  0006CD  0000               	dw	0
   329  0006CF  0000               	dw	0
   330  0006D1                     __end_of_Number:
   331                           	opt stack 0
   332  0006D1                     _SNAKE:
   333                           	opt stack 0
   334  0006D1  FB97               	dw	64407
   335  0006D3  A955               	dw	43349
   336  0006D5  AB9D               	dw	43933
   337  0006D7  0000               	dw	0
   338  0006D9  03DF               	dw	991
   339  0006DB  B881               	dw	47233
   340  0006DD  035F               	dw	863
   341  0006DF  0000               	dw	0
   342  0006E1                     __end_of_SNAKE:
   343                           	opt stack 0
   344  0006E1                     _TETRIS:
   345                           	opt stack 0
   346  0006E1  8841               	dw	34881
   347  0006E3  FBDF               	dw	64479
   348  0006E5  8841               	dw	34881
   349  0006E7  0000               	dw	0
   350  0006E9  9BDF               	dw	39903
   351  0006EB  A955               	dw	43349
   352  0006ED  CA91               	dw	51857
   353  0006EF  0000               	dw	0
   354  0006F1                     __end_of_TETRIS:
   355                           	opt stack 0
   356  0000                     _port_display	set	3970
   357  0000                     _TMR0	set	4054
   358  0000                     _EECON2	set	4007
   359  0000                     _EEDATA	set	4008
   360  0000                     _EECON1bits	set	4006
   361  0000                     _EEADR	set	4009
   362  0000                     _PORTD	set	3971
   363  0000                     _DDRD	set	3989
   364  0000                     _PORTC	set	3970
   365  0000                     _DDRC	set	3988
   366  0000                     _INTCON2bits	set	4081
   367  0000                     _PORTB	set	3969
   368  0000                     _DDRB	set	3987
   369  0000                     _DDRA	set	3986
   370  0000                     _ADCON1bits	set	4033
   371  0000                     _OSCCONbits	set	4051
   372  0000                     _T0CONbits	set	4053
   373  0000                     _PORTA	set	3968
   374  0000                     _PORTBbits	set	3969
   375  0000                     _INTCONbits	set	4082
   376  0000                     _GIE	set	32663
   377  0000                     _IPEN	set	32391
   378  0000                     _TMR0IE	set	32661
   379  0000                     _TMR0ON	set	32431
   380  0000                     _T0CS	set	32429
   381  0000                     _PSA	set	32427
   382                           
   383                           ; #config settings
   384  0006F1  00                 	db	0	; dummy byte at the end
   385  0000                     
   386                           	psect	cinit
   387  0019BC                     __pcinit:
   388                           	opt stack 0
   389  0019BC                     start_initialization:
   390                           	opt stack 0
   391  0019BC                     __initialization:
   392                           	opt stack 0
   393                           
   394                           ; Initialize objects allocated to BANK2 (133 bytes)
   395                           ; load TBLPTR registers with __pidataBANK2
   396  0019BC  0E36               	movlw	low __pidataBANK2
   397  0019BE  6EF6               	movwf	tblptrl,c
   398  0019C0  0E19               	movlw	high __pidataBANK2
   399  0019C2  6EF7               	movwf	tblptrh,c
   400  0019C4  0E00               	movlw	low (__pidataBANK2 shr (0+16))
   401  0019C6  6EF8               	movwf	tblptru,c
   402  0019C8  EE02  F000         	lfsr	0,__pdataBANK2
   403  0019CC  EE10 F085          	lfsr	1,133
   404  0019D0                     copy_data0:
   405  0019D0  0009               	tblrd		*+
   406  0019D2  CFF5 FFEE          	movff	tablat,postinc0
   407  0019D6  50E5               	movf	postdec1,w,c
   408  0019D8  50E1               	movf	fsr1l,w,c
   409  0019DA  E1FA               	bnz	copy_data0
   410                           
   411                           ; Initialize objects allocated to BANK0 (16 bytes)
   412                           ; load TBLPTR registers with __pidataBANK0
   413  0019DC  0E60               	movlw	low __pidataBANK0
   414  0019DE  6EF6               	movwf	tblptrl,c
   415  0019E0  0E21               	movlw	high __pidataBANK0
   416  0019E2  6EF7               	movwf	tblptrh,c
   417  0019E4  0E00               	movlw	low (__pidataBANK0 shr (0+16))
   418  0019E6  6EF8               	movwf	tblptru,c
   419  0019E8  EE00  F0B7         	lfsr	0,__pdataBANK0
   420  0019EC  EE10 F010          	lfsr	1,16
   421  0019F0                     copy_data1:
   422  0019F0  0009               	tblrd		*+
   423  0019F2  CFF5 FFEE          	movff	tablat,postinc0
   424  0019F6  50E5               	movf	postdec1,w,c
   425  0019F8  50E1               	movf	fsr1l,w,c
   426  0019FA  E1FA               	bnz	copy_data1
   427                           
   428                           ; Initialize objects allocated to COMRAM (1 bytes)
   429                           ; load TBLPTR registers with __pidataCOMRAM
   430  0019FC  0EB6               	movlw	low __pidataCOMRAM
   431  0019FE  6EF6               	movwf	tblptrl,c
   432  001A00  0E21               	movlw	high __pidataCOMRAM
   433  001A02  6EF7               	movwf	tblptrh,c
   434  001A04  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   435  001A06  6EF8               	movwf	tblptru,c
   436  001A08  0009               	tblrd		*+	;fetch initializer
   437  001A0A  CFF5 F062          	movff	tablat,__pdataCOMRAM
   438                           
   439                           ; Clear objects allocated to BANK1 (200 bytes)
   440  001A0E  EE01  F000         	lfsr	0,__pbssBANK1
   441  001A12  0EC8               	movlw	200
   442  001A14                     clear_0:
   443  001A14  6AEE               	clrf	postinc0,c
   444  001A16  06E8               	decf	wreg,f,c
   445  001A18  E1FD               	bnz	clear_0
   446                           
   447                           ; Clear objects allocated to BANK0 (32 bytes)
   448  001A1A  EE00  F080         	lfsr	0,__pbssBANK0
   449  001A1E  0E20               	movlw	32
   450  001A20                     clear_1:
   451  001A20  6AEE               	clrf	postinc0,c
   452  001A22  06E8               	decf	wreg,f,c
   453  001A24  E1FD               	bnz	clear_1
   454                           
   455                           ; Clear objects allocated to COMRAM (52 bytes)
   456  001A26  EE00  F001         	lfsr	0,__pbssCOMRAM
   457  001A2A  0E34               	movlw	52
   458  001A2C                     clear_2:
   459  001A2C  6AEE               	clrf	postinc0,c
   460  001A2E  06E8               	decf	wreg,f,c
   461  001A30  E1FD               	bnz	clear_2
   462  001A32                     end_of_initialization:
   463                           	opt stack 0
   464  001A32                     __end_of__initialization:
   465                           	opt stack 0
   466  001A32  9063               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   467  001A34  9263               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   468  001A36  0E00               	movlw	low (__Lmediumconst shr (0+16))
   469  001A38  6EF8               	movwf	tblptru,c
   470  001A3A  0100               	movlb	0
   471  001A3C  EF0D  F010         	goto	_main	;jump to C main() function
   472                           tblptru	equ	0xFF8
   473                           tblptrh	equ	0xFF7
   474                           tblptrl	equ	0xFF6
   475                           tablat	equ	0xFF5
   476                           postinc0	equ	0xFEE
   477                           wreg	equ	0xFE8
   478                           postdec1	equ	0xFE5
   479                           fsr1l	equ	0xFE1
   480                           
   481                           	psect	bssCOMRAM
   482  000001                     __pbssCOMRAM:
   483                           	opt stack 0
   484  000001                     _time:
   485                           	opt stack 0
   486  000001                     	ds	2
   487  000003                     _mS:
   488                           	opt stack 0
   489  000003                     	ds	2
   490  000005                     _InterruptComplete:
   491                           	opt stack 0
   492  000005                     	ds	1
   493  000006                     _UpdateScreen:
   494                           	opt stack 0
   495  000006                     	ds	1
   496  000007                     _tetris:
   497                           	opt stack 0
   498  000007                     	ds	1
   499  000008                     _previous_direction:
   500                           	opt stack 0
   501  000008                     	ds	1
   502  000009                     _berryY:
   503                           	opt stack 0
   504  000009                     	ds	1
   505  00000A                     _berryX:
   506                           	opt stack 0
   507  00000A                     	ds	1
   508  00000B                     _snakeLength:
   509                           	opt stack 0
   510  00000B                     	ds	1
   511  00000C                     _moveSnake:
   512                           	opt stack 0
   513  00000C                     	ds	1
   514  00000D                     _direction:
   515                           	opt stack 0
   516  00000D                     	ds	1
   517  00000E                     _OriginY:
   518                           	opt stack 0
   519  00000E                     	ds	1
   520  00000F                     _OriginX:
   521                           	opt stack 0
   522  00000F                     	ds	1
   523  000010                     _DropObject:
   524                           	opt stack 0
   525  000010                     	ds	1
   526  000011                     _CheckForNewLines:
   527                           	opt stack 0
   528  000011                     	ds	1
   529  000012                     _EndOfGame:
   530                           	opt stack 0
   531  000012                     	ds	1
   532  000013                     _IsRotated:
   533                           	opt stack 0
   534  000013                     	ds	1
   535  000014                     _LastHighScore:
   536                           	opt stack 0
   537  000014                     	ds	1
   538  000015                     _NumberOfLines:
   539                           	opt stack 0
   540  000015                     	ds	1
   541  000016                     _LimitedRotation:
   542                           	opt stack 0
   543  000016                     	ds	1
   544  000017                     _mtxButtons:
   545                           	opt stack 0
   546  000017                     	ds	1
   547  000018                     _ObjectData:
   548                           	opt stack 0
   549  000018                     	ds	16
   550  000028                     _Down_Delay:
   551                           	opt stack 0
   552  000028                     	ds	2
   553  00002A                     _Rotate_Delay:
   554                           	opt stack 0
   555  00002A                     	ds	2
   556  00002C                     _Right_Delay:
   557                           	opt stack 0
   558  00002C                     	ds	2
   559  00002E                     _Left_Delay:
   560                           	opt stack 0
   561  00002E                     	ds	2
   562  000030                     isr@CurrentX:
   563                           	opt stack 0
   564  000030                     	ds	1
   565  000031                     _Down_Debounced:
   566                           	opt stack 0
   567  000031                     	ds	1
   568  000032                     _Rotate_Debounced:
   569                           	opt stack 0
   570  000032                     	ds	1
   571  000033                     _Right_Debounced:
   572                           	opt stack 0
   573  000033                     	ds	1
   574  000034                     _Left_Debounced:
   575                           	opt stack 0
   576  000034                     	ds	1
   577                           tblptru	equ	0xFF8
   578                           tblptrh	equ	0xFF7
   579                           tblptrl	equ	0xFF6
   580                           tablat	equ	0xFF5
   581                           postinc0	equ	0xFEE
   582                           wreg	equ	0xFE8
   583                           postdec1	equ	0xFE5
   584                           fsr1l	equ	0xFE1
   585                           
   586                           	psect	dataCOMRAM
   587  000062                     __pdataCOMRAM:
   588                           	opt stack 0
   589  000062                     __lfsr:
   590                           	opt stack 0
   591  000062                     	ds	1
   592                           tblptru	equ	0xFF8
   593                           tblptrh	equ	0xFF7
   594                           tblptrl	equ	0xFF6
   595                           tablat	equ	0xFF5
   596                           postinc0	equ	0xFEE
   597                           wreg	equ	0xFE8
   598                           postdec1	equ	0xFE5
   599                           fsr1l	equ	0xFE1
   600                           
   601                           	psect	bssBANK0
   602  000080                     __pbssBANK0:
   603                           	opt stack 0
   604  000080                     _tmpObjectData:
   605                           	opt stack 0
   606  000080                     	ds	16
   607  000090                     _BackgroundData:
   608                           	opt stack 0
   609  000090                     	ds	16
   610                           tblptru	equ	0xFF8
   611                           tblptrh	equ	0xFF7
   612                           tblptrl	equ	0xFF6
   613                           tablat	equ	0xFF5
   614                           postinc0	equ	0xFEE
   615                           wreg	equ	0xFE8
   616                           postdec1	equ	0xFE5
   617                           fsr1l	equ	0xFE1
   618                           
   619                           	psect	dataBANK0
   620  0000B7                     __pdataBANK0:
   621                           	opt stack 0
   622  0000B7                     show_score@F2907:
   623                           	opt stack 0
   624  0000B7                     	ds	16
   625                           tblptru	equ	0xFF8
   626                           tblptrh	equ	0xFF7
   627                           tblptrl	equ	0xFF6
   628                           tablat	equ	0xFF5
   629                           postinc0	equ	0xFEE
   630                           wreg	equ	0xFE8
   631                           postdec1	equ	0xFE5
   632                           fsr1l	equ	0xFE1
   633                           
   634                           	psect	bssBANK1
   635  000100                     __pbssBANK1:
   636                           	opt stack 0
   637  000100                     _positions:
   638                           	opt stack 0
   639  000100                     	ds	200
   640                           tblptru	equ	0xFF8
   641                           tblptrh	equ	0xFF7
   642                           tblptrl	equ	0xFF6
   643                           tablat	equ	0xFF5
   644                           postinc0	equ	0xFEE
   645                           wreg	equ	0xFE8
   646                           postdec1	equ	0xFE5
   647                           fsr1l	equ	0xFE1
   648                           
   649                           	psect	dataBANK2
   650  000200                     __pdataBANK2:
   651                           	opt stack 0
   652  000200                     _shapes:
   653                           	opt stack 0
   654  000200                     	ds	133
   655                           tblptru	equ	0xFF8
   656                           tblptrh	equ	0xFF7
   657                           tblptrl	equ	0xFF6
   658                           tablat	equ	0xFF5
   659                           postinc0	equ	0xFEE
   660                           wreg	equ	0xFE8
   661                           postdec1	equ	0xFE5
   662                           fsr1l	equ	0xFE1
   663                           
   664                           	psect	cstackBANK0
   665  0000A0                     __pcstackBANK0:
   666                           	opt stack 0
   667  0000A0                     show_score@mask:
   668                           	opt stack 0
   669                           
   670                           ; 16 bytes @ 0x0
   671  0000A0                     	ds	16
   672  0000B0                     show_score@score:
   673                           	opt stack 0
   674                           
   675                           ; 1 bytes @ 0x10
   676  0000B0                     	ds	1
   677  0000B1                     show_score@currentNumber:
   678                           	opt stack 0
   679                           
   680                           ; 1 bytes @ 0x11
   681  0000B1                     	ds	1
   682  0000B2                     show_score@number:
   683                           	opt stack 0
   684                           
   685                           ; 4 bytes @ 0x12
   686  0000B2                     	ds	4
   687  0000B6                     show_score@i:
   688                           	opt stack 0
   689                           
   690                           ; 1 bytes @ 0x16
   691  0000B6                     	ds	1
   692                           tblptru	equ	0xFF8
   693                           tblptrh	equ	0xFF7
   694                           tblptrl	equ	0xFF6
   695                           tablat	equ	0xFF5
   696                           postinc0	equ	0xFEE
   697                           wreg	equ	0xFE8
   698                           postdec1	equ	0xFE5
   699                           fsr1l	equ	0xFE1
   700                           
   701                           	psect	cstackCOMRAM
   702  000035                     __pcstackCOMRAM:
   703                           	opt stack 0
   704  000035                     ?___lwmod:
   705                           	opt stack 0
   706  000035                     debounceButton@delay:
   707                           	opt stack 0
   708  000035                     ___lwmod@dividend:
   709                           	opt stack 0
   710                           
   711                           ; 2 bytes @ 0x0
   712  000035                     	ds	2
   713  000037                     debounceButton@debounced:
   714                           	opt stack 0
   715  000037                     ___lwmod@divisor:
   716                           	opt stack 0
   717                           
   718                           ; 2 bytes @ 0x2
   719  000037                     	ds	2
   720  000039                     ___lwmod@counter:
   721                           	opt stack 0
   722                           
   723                           ; 1 bytes @ 0x4
   724  000039                     	ds	2
   725  00003B                     debounceButton@button:
   726                           	opt stack 0
   727                           
   728                           ; 1 bytes @ 0x6
   729  00003B                     	ds	1
   730  00003C                     ??_isr:
   731                           
   732                           ; 1 bytes @ 0x7
   733  00003C                     	ds	8
   734  000044                     isr@ymask:
   735                           	opt stack 0
   736                           
   737                           ; 2 bytes @ 0xF
   738  000044                     	ds	2
   739  000046                     isr@xmask:
   740                           	opt stack 0
   741                           
   742                           ; 1 bytes @ 0x11
   743  000046                     	ds	1
   744  000047                     ??_rnd_get_num:
   745  000047                     ?___awdiv:
   746                           	opt stack 0
   747  000047                     ?___awmod:
   748                           	opt stack 0
   749  000047                     ReadEEByte@address:
   750                           	opt stack 0
   751  000047                     WriteEEByte@data:
   752                           	opt stack 0
   753  000047                     rnd_initialize@seed:
   754                           	opt stack 0
   755  000047                     ___lbmod@divisor:
   756                           	opt stack 0
   757  000047                     memcpy@dest:
   758                           	opt stack 0
   759  000047                     swap@a:
   760                           	opt stack 0
   761  000047                     waitms@t:
   762                           	opt stack 0
   763  000047                     clearArray@pArray:
   764                           	opt stack 0
   765  000047                     mergeObjects@pSource:
   766                           	opt stack 0
   767  000047                     moveObject@pObject:
   768                           	opt stack 0
   769  000047                     checkForBottom@pObject:
   770                           	opt stack 0
   771  000047                     checkForLeftWall@pObject:
   772                           	opt stack 0
   773  000047                     checkForRightWall@pObject:
   774                           	opt stack 0
   775  000047                     collisionDetect@pSource:
   776                           	opt stack 0
   777  000047                     pixelCount@pSource:
   778                           	opt stack 0
   779  000047                     removeLine@pObject:
   780                           	opt stack 0
   781  000047                     ___awdiv@dividend:
   782                           	opt stack 0
   783  000047                     ___awmod@dividend:
   784                           	opt stack 0
   785                           
   786                           ; 2 bytes @ 0x12
   787  000047                     	ds	1
   788  000048                     WriteEEByte@address:
   789                           	opt stack 0
   790  000048                     ___lbmod@dividend:
   791                           	opt stack 0
   792                           
   793                           ; 1 bytes @ 0x13
   794  000048                     	ds	1
   795  000049                     ??_checkForBottom:
   796  000049                     ??_pixelCount:
   797  000049                     moveObject@direction:
   798                           	opt stack 0
   799  000049                     removeLine@pY:
   800                           	opt stack 0
   801  000049                     readHighScore@adress:
   802                           	opt stack 0
   803  000049                     writeHighScore@adress:
   804                           	opt stack 0
   805  000049                     ___lbmod@counter:
   806                           	opt stack 0
   807  000049                     memcpy@src:
   808                           	opt stack 0
   809  000049                     swap@b:
   810                           	opt stack 0
   811  000049                     clearArray@size:
   812                           	opt stack 0
   813  000049                     mergeObjects@pTarget:
   814                           	opt stack 0
   815  000049                     collisionDetect@pTarget:
   816                           	opt stack 0
   817  000049                     ___awdiv@divisor:
   818                           	opt stack 0
   819  000049                     ___awmod@divisor:
   820                           	opt stack 0
   821                           
   822                           ; 2 bytes @ 0x14
   823  000049                     	ds	1
   824  00004A                     ??_removeLine:
   825  00004A                     moveObject@cycles:
   826                           	opt stack 0
   827  00004A                     readHighScore@tmpbyte:
   828                           	opt stack 0
   829  00004A                     ___lbmod@rem:
   830                           	opt stack 0
   831  00004A                     rnd_get_num@b:
   832                           	opt stack 0
   833                           
   834                           ; 2 bytes @ 0x15
   835  00004A                     	ds	1
   836  00004B                     ??_clearArray:
   837  00004B                     ??_moveObject:
   838  00004B                     ??_collisionDetect:
   839  00004B                     swap@t:
   840                           	opt stack 0
   841  00004B                     mergeObjects@mode:
   842                           	opt stack 0
   843  00004B                     checkForBottom@i:
   844                           	opt stack 0
   845  00004B                     ___awdiv@counter:
   846                           	opt stack 0
   847  00004B                     ___awmod@counter:
   848                           	opt stack 0
   849  00004B                     memcpy@n:
   850                           	opt stack 0
   851                           
   852                           ; 2 bytes @ 0x16
   853  00004B                     	ds	1
   854  00004C                     ??_mergeObjects:
   855  00004C                     genBerry@size:
   856                           	opt stack 0
   857  00004C                     ___awdiv@sign:
   858                           	opt stack 0
   859  00004C                     ___awmod@sign:
   860                           	opt stack 0
   861  00004C                     reverse@str:
   862                           	opt stack 0
   863                           
   864                           ; 2 bytes @ 0x17
   865  00004C                     	ds	1
   866  00004D                     ?___wmul:
   867                           	opt stack 0
   868  00004D                     clearArray@i:
   869                           	opt stack 0
   870  00004D                     genBerry@temp:
   871                           	opt stack 0
   872  00004D                     memcpy@d:
   873                           	opt stack 0
   874  00004D                     ___wmul@multiplier:
   875                           	opt stack 0
   876  00004D                     ___awdiv@quotient:
   877                           	opt stack 0
   878                           
   879                           ; 2 bytes @ 0x18
   880  00004D                     	ds	1
   881  00004E                     ??_SnakeGraph:
   882  00004E                     mergeObjects@i:
   883                           	opt stack 0
   884  00004E                     pixelCount@r:
   885                           	opt stack 0
   886  00004E                     reverse@length:
   887                           	opt stack 0
   888                           
   889                           ; 2 bytes @ 0x19
   890  00004E                     	ds	1
   891  00004F                     CreateBerry@randomGood:
   892                           	opt stack 0
   893  00004F                     moveObject@c:
   894                           	opt stack 0
   895  00004F                     collisionDetect@i:
   896                           	opt stack 0
   897  00004F                     pixelCount@x:
   898                           	opt stack 0
   899  00004F                     memcpy@s:
   900                           	opt stack 0
   901  00004F                     ___wmul@multiplicand:
   902                           	opt stack 0
   903  00004F                     choosescreen@mask:
   904                           	opt stack 0
   905                           
   906                           ; 16 bytes @ 0x1A
   907  00004F                     	ds	1
   908  000050                     ??_reverse:
   909  000050                     CreateBerry@i:
   910                           	opt stack 0
   911  000050                     moveObject@i:
   912                           	opt stack 0
   913  000050                     pixelCount@y:
   914                           	opt stack 0
   915                           
   916                           ; 1 bytes @ 0x1B
   917  000050                     	ds	1
   918  000051                     initialise_globals@i:
   919                           	opt stack 0
   920  000051                     reverse@start:
   921                           	opt stack 0
   922  000051                     getNumber@pTarget:
   923                           	opt stack 0
   924  000051                     ___wmul@product:
   925                           	opt stack 0
   926                           
   927                           ; 2 bytes @ 0x1C
   928  000051                     	ds	2
   929  000053                     SnakeGraph@j:
   930                           	opt stack 0
   931  000053                     getNumber@pDigit:
   932                           	opt stack 0
   933  000053                     reverse@end:
   934                           	opt stack 0
   935  000053                     selectNextObject@pTarget:
   936                           	opt stack 0
   937  000053                     newRotation@pSource:
   938                           	opt stack 0
   939                           
   940                           ; 2 bytes @ 0x1E
   941  000053                     	ds	1
   942  000054                     SnakeGraph@i:
   943                           	opt stack 0
   944                           
   945                           ; 1 bytes @ 0x1F
   946  000054                     	ds	1
   947  000055                     ??_MoveSnakes:
   948  000055                     selectNextObject@rndSelection:
   949                           	opt stack 0
   950  000055                     removeLine@currentLine:
   951                           	opt stack 0
   952  000055                     itoa@value:
   953                           	opt stack 0
   954  000055                     newRotation@pTarget:
   955                           	opt stack 0
   956                           
   957                           ; 2 bytes @ 0x20
   958  000055                     	ds	1
   959  000056                     selectNextObject@counter:
   960                           	opt stack 0
   961  000056                     removeLine@y:
   962                           	opt stack 0
   963                           
   964                           ; 1 bytes @ 0x21
   965  000056                     	ds	1
   966  000057                     selectNextObject@selection:
   967                           	opt stack 0
   968  000057                     newRotation@rotation:
   969                           	opt stack 0
   970  000057                     removeLine@x:
   971                           	opt stack 0
   972  000057                     itoa@str:
   973                           	opt stack 0
   974                           
   975                           ; 2 bytes @ 0x22
   976  000057                     	ds	1
   977  000058                     ??_newRotation:
   978  000058                     selectNextObject@s:
   979                           	opt stack 0
   980  000058                     checkForLines@pObject:
   981                           	opt stack 0
   982                           
   983                           ; 2 bytes @ 0x23
   984  000058                     	ds	1
   985  000059                     itoa@bas:
   986                           	opt stack 0
   987                           
   988                           ; 2 bytes @ 0x24
   989  000059                     	ds	1
   990  00005A                     ??_checkForLines:
   991  00005A                     moveObjectDown@pObject:
   992                           	opt stack 0
   993                           
   994                           ; 2 bytes @ 0x25
   995  00005A                     	ds	1
   996  00005B                     _itoa$425:
   997                           	opt stack 0
   998                           
   999                           ; 2 bytes @ 0x26
  1000  00005B                     	ds	1
  1001  00005C                     moveObjectDown@result:
  1002                           	opt stack 0
  1003                           
  1004                           ; 1 bytes @ 0x27
  1005  00005C                     	ds	1
  1006  00005D                     itoa@isNegative:
  1007                           	opt stack 0
  1008  00005D                     MoveSnakes@i:
  1009                           	opt stack 0
  1010  00005D                     newRotation@x2:
  1011                           	opt stack 0
  1012                           
  1013                           ; 1 bytes @ 0x28
  1014  00005D                     	ds	1
  1015  00005E                     newRotation@y2:
  1016                           	opt stack 0
  1017  00005E                     itoa@rem:
  1018                           	opt stack 0
  1019                           
  1020                           ; 2 bytes @ 0x29
  1021  00005E                     	ds	1
  1022  00005F                     newRotation@x1:
  1023                           	opt stack 0
  1024  00005F                     checkForLines@pixels:
  1025                           	opt stack 0
  1026  00005F                     choosescreen@i:
  1027                           	opt stack 0
  1028                           
  1029                           ; 1 bytes @ 0x2A
  1030  00005F                     	ds	1
  1031  000060                     newRotation@y1:
  1032                           	opt stack 0
  1033  000060                     checkForLines@x:
  1034                           	opt stack 0
  1035  000060                     itoa@i:
  1036                           	opt stack 0
  1037                           
  1038                           ; 2 bytes @ 0x2B
  1039  000060                     	ds	1
  1040  000061                     ??_checkButtons:
  1041  000061                     checkForLines@y:
  1042                           	opt stack 0
  1043                           
  1044                           ; 1 bytes @ 0x2C
  1045  000061                     	ds	1
  1046  000062                     tblptru	equ	0xFF8
  1047                           tblptrh	equ	0xFF7
  1048                           tblptrl	equ	0xFF6
  1049                           tablat	equ	0xFF5
  1050                           postinc0	equ	0xFEE
  1051                           wreg	equ	0xFE8
  1052                           postdec1	equ	0xFE5
  1053                           fsr1l	equ	0xFE1
  1054                           
  1055                           ; 1 bytes @ 0x2D
  1056 ;;
  1057 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  1058 ;;
  1059 ;; *************** function _main *****************
  1060 ;; Defined at:
  1061 ;;		line 1425 in file "pictris.c"
  1062 ;; Parameters:    Size  Location     Type
  1063 ;;		None
  1064 ;; Auto vars:     Size  Location     Type
  1065 ;;		None
  1066 ;; Return value:  Size  Location     Type
  1067 ;;                  1    wreg      void 
  1068 ;; Registers used:
  1069 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1070 ;; Tracked objects:
  1071 ;;		On entry : 0/0
  1072 ;;		On exit  : 0/0
  1073 ;;		Unchanged: 0/0
  1074 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1075 ;;      Params:         0       0       0       0       0       0       0
  1076 ;;      Locals:         0       0       0       0       0       0       0
  1077 ;;      Temps:          0       0       0       0       0       0       0
  1078 ;;      Totals:         0       0       0       0       0       0       0
  1079 ;;Total ram usage:        0 bytes
  1080 ;; Hardware stack levels required when called:    7
  1081 ;; This function calls:
  1082 ;;		_choosescreen
  1083 ;;		_initialise_globals
  1084 ;;		_initialise_hardware
  1085 ;;		_mainGameLoop
  1086 ;;		_readHighScore
  1087 ;;		_rnd_initialize
  1088 ;;		_show_score
  1089 ;;		_splash_screen
  1090 ;; This function is called by:
  1091 ;;		Startup code after reset
  1092 ;; This function uses a non-reentrant model
  1093 ;;
  1094                           
  1095                           	psect	text0
  1096  00201A                     __ptext0:
  1097                           	opt stack 0
  1098  00201A                     _main:
  1099                           	opt stack 24
  1100                           
  1101                           ;pictris.c: 1429:     rnd_initialize(0x77);
  1102                           
  1103                           ;incstack = 0
  1104  00201A  0E77               	movlw	119
  1105  00201C  ECCE  F010         	call	_rnd_initialize
  1106                           
  1107                           ;pictris.c: 1435:     initialise_hardware();
  1108  002020  EC4A  F00F         	call	_initialise_hardware	;wreg free
  1109                           
  1110                           ;pictris.c: 1436:     initialise_globals();
  1111  002024  EC7F  F00B         	call	_initialise_globals	;wreg free
  1112                           
  1113                           ;pictris.c: 1440:     UpdateScreen = 1;
  1114  002028  0E01               	movlw	1
  1115  00202A  6E06               	movwf	_UpdateScreen,c	;volatile
  1116                           
  1117                           ;pictris.c: 1444:     choosescreen();
  1118  00202C  EC6E  F008         	call	_choosescreen	;wreg free
  1119                           
  1120                           ;pictris.c: 1446:     splash_screen();
  1121  002030  ECA8  F00E         	call	_splash_screen	;wreg free
  1122                           
  1123                           ;pictris.c: 1449:     readHighScore(10);
  1124  002034  0E0A               	movlw	10
  1125  002036  EC8C  F00F         	call	_readHighScore
  1126                           
  1127                           ;pictris.c: 1450:     show_score(LastHighScore);
  1128  00203A  5014               	movf	_LastHighScore,w,c
  1129  00203C  ECC7  F007         	call	_show_score
  1130  002040                     
  1131                           ;pictris.c: 1454:         mainGameLoop();
  1132  002040  ECE7  F00B         	call	_mainGameLoop	;wreg free
  1133  002044  D7FD               	goto	l503
  1134  002046                     __end_of_main:
  1135                           	opt stack 0
  1136                           tblptru	equ	0xFF8
  1137                           tblptrh	equ	0xFF7
  1138                           tblptrl	equ	0xFF6
  1139                           tablat	equ	0xFF5
  1140                           postinc0	equ	0xFEE
  1141                           wreg	equ	0xFE8
  1142                           postdec1	equ	0xFE5
  1143                           fsr1l	equ	0xFE1
  1144                           
  1145 ;; *************** function _splash_screen *****************
  1146 ;; Defined at:
  1147 ;;		line 1172 in file "pictris.c"
  1148 ;; Parameters:    Size  Location     Type
  1149 ;;		None
  1150 ;; Auto vars:     Size  Location     Type
  1151 ;;		None
  1152 ;; Return value:  Size  Location     Type
  1153 ;;                  1    wreg      void 
  1154 ;; Registers used:
  1155 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  1156 ;; Tracked objects:
  1157 ;;		On entry : 0/0
  1158 ;;		On exit  : 0/0
  1159 ;;		Unchanged: 0/0
  1160 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1161 ;;      Params:         0       0       0       0       0       0       0
  1162 ;;      Locals:         0       0       0       0       0       0       0
  1163 ;;      Temps:          0       0       0       0       0       0       0
  1164 ;;      Totals:         0       0       0       0       0       0       0
  1165 ;;Total ram usage:        0 bytes
  1166 ;; Hardware stack levels used:    1
  1167 ;; Hardware stack levels required when called:    4
  1168 ;; This function calls:
  1169 ;;		_memcpy
  1170 ;;		_pauseMultiplexing
  1171 ;;		_resumeMultiplexing
  1172 ;;		_waitms
  1173 ;; This function is called by:
  1174 ;;		_main
  1175 ;; This function uses a non-reentrant model
  1176 ;;
  1177                           
  1178                           	psect	text1
  1179  001D50                     __ptext1:
  1180                           	opt stack 0
  1181  001D50                     _splash_screen:
  1182                           	opt stack 26
  1183                           
  1184                           ;pictris.c: 1176:     pauseMultiplexing();
  1185                           
  1186                           ;incstack = 0
  1187  001D50  ECC0  F010         	call	_pauseMultiplexing	;wreg free
  1188                           
  1189                           ;pictris.c: 1178:     if (tetris == 1){ memcpy(ObjectData, TETRIS, 16); }
  1190  001D54  0407               	decf	_tetris,w,c
  1191  001D56  A4D8               	btfss	status,2,c
  1192  001D58  D00F               	goto	l416
  1193  001D5A  0E18               	movlw	low _ObjectData
  1194  001D5C  6E47               	movwf	memcpy@dest,c
  1195  001D5E  0E00               	movlw	high _ObjectData
  1196  001D60  6E48               	movwf	memcpy@dest+1,c
  1197  001D62  0EE1               	movlw	low _TETRIS
  1198  001D64  6E49               	movwf	memcpy@src,c
  1199  001D66  0E06               	movlw	high _TETRIS
  1200  001D68  6E4A               	movwf	memcpy@src+1,c
  1201  001D6A  0E00               	movlw	0
  1202  001D6C  6E4C               	movwf	memcpy@n+1,c
  1203  001D6E  0E10               	movlw	16
  1204  001D70  6E4B               	movwf	memcpy@n,c
  1205  001D72  ECD3  F00E         	call	_memcpy	;wreg free
  1206  001D76  D00E               	goto	l417
  1207  001D78                     l416:
  1208  001D78  0E18               	movlw	low _ObjectData
  1209  001D7A  6E47               	movwf	memcpy@dest,c
  1210  001D7C  0E00               	movlw	high _ObjectData
  1211  001D7E  6E48               	movwf	memcpy@dest+1,c
  1212  001D80  0ED1               	movlw	low _SNAKE
  1213  001D82  6E49               	movwf	memcpy@src,c
  1214  001D84  0E06               	movlw	high _SNAKE
  1215  001D86  6E4A               	movwf	memcpy@src+1,c
  1216  001D88  0E00               	movlw	0
  1217  001D8A  6E4C               	movwf	memcpy@n+1,c
  1218  001D8C  0E10               	movlw	16
  1219  001D8E  6E4B               	movwf	memcpy@n,c
  1220  001D90  ECD3  F00E         	call	_memcpy	;wreg free
  1221  001D94                     l417:
  1222                           
  1223                           ;pictris.c: 1181:     resumeMultiplexing();
  1224  001D94  ECD2  F010         	call	_resumeMultiplexing	;wreg free
  1225                           
  1226                           ;pictris.c: 1183:     waitms(3500);
  1227  001D98  0E0D               	movlw	13
  1228  001D9A  6E48               	movwf	waitms@t+1,c
  1229  001D9C  0EAC               	movlw	172
  1230  001D9E  6E47               	movwf	waitms@t,c
  1231  001DA0  ECA7  F010         	call	_waitms	;wreg free
  1232  001DA4  0012               	return		;funcret
  1233  001DA6                     __end_of_splash_screen:
  1234                           	opt stack 0
  1235                           tblptru	equ	0xFF8
  1236                           tblptrh	equ	0xFF7
  1237                           tblptrl	equ	0xFF6
  1238                           tablat	equ	0xFF5
  1239                           postinc0	equ	0xFEE
  1240                           wreg	equ	0xFE8
  1241                           postdec1	equ	0xFE5
  1242                           fsr1l	equ	0xFE1
  1243                           status	equ	0xFD8
  1244                           
  1245 ;; *************** function _waitms *****************
  1246 ;; Defined at:
  1247 ;;		line 407 in file "pictris.c"
  1248 ;; Parameters:    Size  Location     Type
  1249 ;;  t               2   18[COMRAM] unsigned int 
  1250 ;; Auto vars:     Size  Location     Type
  1251 ;;		None
  1252 ;; Return value:  Size  Location     Type
  1253 ;;                  1    wreg      void 
  1254 ;; Registers used:
  1255 ;;		wreg, status,2, status,0
  1256 ;; Tracked objects:
  1257 ;;		On entry : 0/0
  1258 ;;		On exit  : 0/0
  1259 ;;		Unchanged: 0/0
  1260 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1261 ;;      Params:         2       0       0       0       0       0       0
  1262 ;;      Locals:         0       0       0       0       0       0       0
  1263 ;;      Temps:          0       0       0       0       0       0       0
  1264 ;;      Totals:         2       0       0       0       0       0       0
  1265 ;;Total ram usage:        2 bytes
  1266 ;; Hardware stack levels used:    1
  1267 ;; Hardware stack levels required when called:    2
  1268 ;; This function calls:
  1269 ;;		Nothing
  1270 ;; This function is called by:
  1271 ;;		_splash_screen
  1272 ;; This function uses a non-reentrant model
  1273 ;;
  1274                           
  1275                           	psect	text2
  1276  00214E                     __ptext2:
  1277                           	opt stack 0
  1278  00214E                     _waitms:
  1279                           	opt stack 27
  1280                           
  1281                           ;pictris.c: 407: void waitms(unsigned t);pictris.c: 408: {;pictris.c: 409:     time = t;
  1282                           
  1283                           ;incstack = 0
  1284  00214E  C047  F001         	movff	waitms@t,_time	;volatile
  1285  002152  C048  F002         	movff	waitms@t+1,_time+1	;volatile
  1286  002156                     
  1287                           ;pictris.c: 410:     while(time)
  1288                           
  1289                           ;pictris.c: 411:         continue;
  1290  002156  5001               	movf	_time,w,c	;volatile
  1291  002158  1002               	iorwf	_time+1,w,c	;volatile
  1292  00215A  B4D8               	btfsc	status,2,c
  1293  00215C  0012               	return	
  1294  00215E  D7FB               	goto	l178
  1295  002160                     __end_of_waitms:
  1296                           	opt stack 0
  1297                           tblptru	equ	0xFF8
  1298                           tblptrh	equ	0xFF7
  1299                           tblptrl	equ	0xFF6
  1300                           tablat	equ	0xFF5
  1301                           postinc0	equ	0xFEE
  1302                           wreg	equ	0xFE8
  1303                           postdec1	equ	0xFE5
  1304                           fsr1l	equ	0xFE1
  1305                           status	equ	0xFD8
  1306                           
  1307 ;; *************** function _rnd_initialize *****************
  1308 ;; Defined at:
  1309 ;;		line 24 in file "randgen.c"
  1310 ;; Parameters:    Size  Location     Type
  1311 ;;  seed            1    wreg     unsigned char 
  1312 ;; Auto vars:     Size  Location     Type
  1313 ;;  seed            1   18[COMRAM] unsigned char 
  1314 ;; Return value:  Size  Location     Type
  1315 ;;                  1    wreg      void 
  1316 ;; Registers used:
  1317 ;;		wreg
  1318 ;; Tracked objects:
  1319 ;;		On entry : 0/0
  1320 ;;		On exit  : 0/0
  1321 ;;		Unchanged: 0/0
  1322 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1323 ;;      Params:         0       0       0       0       0       0       0
  1324 ;;      Locals:         1       0       0       0       0       0       0
  1325 ;;      Temps:          0       0       0       0       0       0       0
  1326 ;;      Totals:         1       0       0       0       0       0       0
  1327 ;;Total ram usage:        1 bytes
  1328 ;; Hardware stack levels used:    1
  1329 ;; Hardware stack levels required when called:    2
  1330 ;; This function calls:
  1331 ;;		Nothing
  1332 ;; This function is called by:
  1333 ;;		_main
  1334 ;; This function uses a non-reentrant model
  1335 ;;
  1336                           
  1337                           	psect	text3
  1338  00219C                     __ptext3:
  1339                           	opt stack 0
  1340  00219C                     _rnd_initialize:
  1341                           	opt stack 28
  1342                           
  1343                           ;incstack = 0
  1344                           ;rnd_initialize@seed stored from wreg
  1345  00219C  6E47               	movwf	rnd_initialize@seed,c
  1346                           
  1347                           ;randgen.c: 24: void rnd_initialize(uint8_t seed);randgen.c: 25: {;randgen.c: 26:     _l
      +                          fsr = seed;
  1348  00219E  C047  F062         	movff	rnd_initialize@seed,__lfsr
  1349  0021A2  0012               	return		;funcret
  1350  0021A4                     __end_of_rnd_initialize:
  1351                           	opt stack 0
  1352                           tblptru	equ	0xFF8
  1353                           tblptrh	equ	0xFF7
  1354                           tblptrl	equ	0xFF6
  1355                           tablat	equ	0xFF5
  1356                           postinc0	equ	0xFEE
  1357                           wreg	equ	0xFE8
  1358                           postdec1	equ	0xFE5
  1359                           fsr1l	equ	0xFE1
  1360                           status	equ	0xFD8
  1361                           
  1362 ;; *************** function _readHighScore *****************
  1363 ;; Defined at:
  1364 ;;		line 1324 in file "pictris.c"
  1365 ;; Parameters:    Size  Location     Type
  1366 ;;  adress          1    wreg     unsigned char 
  1367 ;; Auto vars:     Size  Location     Type
  1368 ;;  adress          1   20[COMRAM] unsigned char 
  1369 ;;  tmpbyte         1   21[COMRAM] unsigned char 
  1370 ;; Return value:  Size  Location     Type
  1371 ;;                  1    wreg      void 
  1372 ;; Registers used:
  1373 ;;		wreg, status,2, status,0, cstack
  1374 ;; Tracked objects:
  1375 ;;		On entry : 0/0
  1376 ;;		On exit  : 0/0
  1377 ;;		Unchanged: 0/0
  1378 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1379 ;;      Params:         0       0       0       0       0       0       0
  1380 ;;      Locals:         2       0       0       0       0       0       0
  1381 ;;      Temps:          0       0       0       0       0       0       0
  1382 ;;      Totals:         2       0       0       0       0       0       0
  1383 ;;Total ram usage:        2 bytes
  1384 ;; Hardware stack levels used:    1
  1385 ;; Hardware stack levels required when called:    3
  1386 ;; This function calls:
  1387 ;;		_ReadEEByte
  1388 ;;		_WriteEEByte
  1389 ;; This function is called by:
  1390 ;;		_main
  1391 ;; This function uses a non-reentrant model
  1392 ;;
  1393                           
  1394                           	psect	text4
  1395  001F18                     __ptext4:
  1396                           	opt stack 0
  1397  001F18                     _readHighScore:
  1398                           	opt stack 27
  1399                           
  1400                           ;incstack = 0
  1401                           ;readHighScore@adress stored from wreg
  1402  001F18  6E49               	movwf	readHighScore@adress,c
  1403                           
  1404                           ;pictris.c: 1324: void readHighScore(uint8_t adress);pictris.c: 1325: {;pictris.c: 1327:
      +                               uint8_t tmpbyte;;pictris.c: 1328:     if (tetris == 0)
  1405  001F1A  5007               	movf	_tetris,w,c
  1406  001F1C  A4D8               	btfss	status,2,c
  1407  001F1E  D003               	goto	l475
  1408                           
  1409                           ;pictris.c: 1329:     { adress = adress + 10;};
  1410  001F20  5049               	movf	readHighScore@adress,w,c
  1411  001F22  0F0A               	addlw	10
  1412  001F24  6E49               	movwf	readHighScore@adress,c
  1413  001F26                     l475:
  1414                           
  1415                           ;pictris.c: 1331:     tmpbyte = ReadEEByte(adress);
  1416  001F26  5049               	movf	readHighScore@adress,w,c
  1417  001F28  ECB8  F010         	call	_ReadEEByte
  1418  001F2C  6E4A               	movwf	readHighScore@tmpbyte,c
  1419                           
  1420                           ;pictris.c: 1332:     if (tmpbyte == 0){
  1421  001F2E  504A               	movf	readHighScore@tmpbyte,w,c
  1422  001F30  A4D8               	btfss	status,2,c
  1423  001F32  D005               	goto	l476
  1424                           
  1425                           ;pictris.c: 1333:        WriteEEByte(adress,0);
  1426  001F34  0E00               	movlw	0
  1427  001F36  6E47               	movwf	WriteEEByte@data,c
  1428  001F38  5049               	movf	readHighScore@adress,w,c
  1429  001F3A  EC4C  F010         	call	_WriteEEByte
  1430  001F3E                     l476:
  1431                           
  1432                           ;pictris.c: 1335:     if (tmpbyte == 255) {
  1433  001F3E  284A               	incf	readHighScore@tmpbyte,w,c
  1434  001F40  A4D8               	btfss	status,2,c
  1435  001F42  D002               	goto	l477
  1436                           
  1437                           ;pictris.c: 1336:         tmpbyte = 0;
  1438  001F44  0E00               	movlw	0
  1439  001F46  6E4A               	movwf	readHighScore@tmpbyte,c
  1440  001F48                     l477:
  1441                           
  1442                           ;pictris.c: 1338:     LastHighScore = tmpbyte;
  1443  001F48  C04A  F014         	movff	readHighScore@tmpbyte,_LastHighScore
  1444  001F4C  0012               	return		;funcret
  1445  001F4E                     __end_of_readHighScore:
  1446                           	opt stack 0
  1447                           tblptru	equ	0xFF8
  1448                           tblptrh	equ	0xFF7
  1449                           tblptrl	equ	0xFF6
  1450                           tablat	equ	0xFF5
  1451                           postinc0	equ	0xFEE
  1452                           wreg	equ	0xFE8
  1453                           postdec1	equ	0xFE5
  1454                           fsr1l	equ	0xFE1
  1455                           status	equ	0xFD8
  1456                           
  1457 ;; *************** function _ReadEEByte *****************
  1458 ;; Defined at:
  1459 ;;		line 1293 in file "pictris.c"
  1460 ;; Parameters:    Size  Location     Type
  1461 ;;  address         1    wreg     unsigned char 
  1462 ;; Auto vars:     Size  Location     Type
  1463 ;;  address         1   18[COMRAM] unsigned char 
  1464 ;; Return value:  Size  Location     Type
  1465 ;;                  1    wreg      unsigned char 
  1466 ;; Registers used:
  1467 ;;		wreg, status,2
  1468 ;; Tracked objects:
  1469 ;;		On entry : 0/0
  1470 ;;		On exit  : 0/0
  1471 ;;		Unchanged: 0/0
  1472 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1473 ;;      Params:         0       0       0       0       0       0       0
  1474 ;;      Locals:         1       0       0       0       0       0       0
  1475 ;;      Temps:          0       0       0       0       0       0       0
  1476 ;;      Totals:         1       0       0       0       0       0       0
  1477 ;;Total ram usage:        1 bytes
  1478 ;; Hardware stack levels used:    1
  1479 ;; Hardware stack levels required when called:    2
  1480 ;; This function calls:
  1481 ;;		Nothing
  1482 ;; This function is called by:
  1483 ;;		_readHighScore
  1484 ;; This function uses a non-reentrant model
  1485 ;;
  1486                           
  1487                           	psect	text5
  1488  002170                     __ptext5:
  1489                           	opt stack 0
  1490  002170                     _ReadEEByte:
  1491                           	opt stack 27
  1492                           
  1493                           ;incstack = 0
  1494                           ;ReadEEByte@address stored from wreg
  1495  002170  6E47               	movwf	ReadEEByte@address,c
  1496                           
  1497                           ;pictris.c: 1293: uint8_t ReadEEByte(uint8_t address);pictris.c: 1294: {;pictris.c: 1295
      +                          : EEADR=address;
  1498  002172  C047  FFA9         	movff	ReadEEByte@address,4009	;volatile
  1499                           
  1500                           ;pictris.c: 1296: EECON1bits.EEPGD=0;
  1501  002176  9EA6               	bcf	4006,7,c	;volsfr
  1502                           
  1503                           ;pictris.c: 1297: EECON1bits.CFGS=0;
  1504  002178  9CA6               	bcf	4006,6,c	;volsfr
  1505                           
  1506                           ;pictris.c: 1298: EECON1bits.RD=1;
  1507  00217A  80A6               	bsf	4006,0,c	;volsfr
  1508                           
  1509                           ;pictris.c: 1299: return EEDATA;
  1510  00217C  50A8               	movf	4008,w,c	;volatile
  1511  00217E  0012               	return	
  1512  002180                     __end_of_ReadEEByte:
  1513                           	opt stack 0
  1514                           tblptru	equ	0xFF8
  1515                           tblptrh	equ	0xFF7
  1516                           tblptrl	equ	0xFF6
  1517                           tablat	equ	0xFF5
  1518                           postinc0	equ	0xFEE
  1519                           wreg	equ	0xFE8
  1520                           postdec1	equ	0xFE5
  1521                           fsr1l	equ	0xFE1
  1522                           status	equ	0xFD8
  1523                           
  1524 ;; *************** function _mainGameLoop *****************
  1525 ;; Defined at:
  1526 ;;		line 1361 in file "pictris.c"
  1527 ;; Parameters:    Size  Location     Type
  1528 ;;		None
  1529 ;; Auto vars:     Size  Location     Type
  1530 ;;		None
  1531 ;; Return value:  Size  Location     Type
  1532 ;;                  1    wreg      void 
  1533 ;; Registers used:
  1534 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1535 ;; Tracked objects:
  1536 ;;		On entry : 0/0
  1537 ;;		On exit  : 0/0
  1538 ;;		Unchanged: 0/0
  1539 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1540 ;;      Params:         0       0       0       0       0       0       0
  1541 ;;      Locals:         0       0       0       0       0       0       0
  1542 ;;      Temps:          0       0       0       0       0       0       0
  1543 ;;      Totals:         0       0       0       0       0       0       0
  1544 ;;Total ram usage:        0 bytes
  1545 ;; Hardware stack levels used:    1
  1546 ;; Hardware stack levels required when called:    6
  1547 ;; This function calls:
  1548 ;;		_MoveSnakes
  1549 ;;		_checkButtons
  1550 ;;		_checkForLines
  1551 ;;		_clearArray
  1552 ;;		_initialise_globals
  1553 ;;		_moveObjectDown
  1554 ;;		_pauseMultiplexing
  1555 ;;		_resumeMultiplexing
  1556 ;;		_selectNextObject
  1557 ;;		_show_score
  1558 ;;		_writeHighScore
  1559 ;; This function is called by:
  1560 ;;		_main
  1561 ;; This function uses a non-reentrant model
  1562 ;;
  1563                           
  1564                           	psect	text6
  1565  0017CE                     __ptext6:
  1566                           	opt stack 0
  1567  0017CE                     _mainGameLoop:
  1568                           	opt stack 24
  1569                           
  1570                           ;pictris.c: 1365:     pauseMultiplexing();
  1571                           
  1572                           ;incstack = 0
  1573  0017CE  ECC0  F010         	call	_pauseMultiplexing	;wreg free
  1574                           
  1575                           ;pictris.c: 1367:     initialise_globals();
  1576  0017D2  EC7F  F00B         	call	_initialise_globals	;wreg free
  1577                           
  1578                           ;pictris.c: 1369:     resumeMultiplexing();
  1579  0017D6  ECD2  F010         	call	_resumeMultiplexing	;wreg free
  1580                           
  1581                           ;pictris.c: 1371:     clearArray(ObjectData,8);
  1582  0017DA  0E18               	movlw	low _ObjectData
  1583  0017DC  6E47               	movwf	clearArray@pArray,c
  1584  0017DE  0E00               	movlw	high _ObjectData
  1585  0017E0  6E48               	movwf	clearArray@pArray+1,c
  1586  0017E2  0E00               	movlw	0
  1587  0017E4  6E4A               	movwf	clearArray@size+1,c
  1588  0017E6  0E08               	movlw	8
  1589  0017E8  6E49               	movwf	clearArray@size,c
  1590  0017EA  ECDC  F00F         	call	_clearArray	;wreg free
  1591                           
  1592                           ;pictris.c: 1372:     clearArray(BackgroundData,8);
  1593  0017EE  0E90               	movlw	low _BackgroundData
  1594  0017F0  6E47               	movwf	clearArray@pArray,c
  1595  0017F2  0E00               	movlw	high _BackgroundData
  1596  0017F4  6E48               	movwf	clearArray@pArray+1,c
  1597  0017F6  0E00               	movlw	0
  1598  0017F8  6E4A               	movwf	clearArray@size+1,c
  1599  0017FA  0E08               	movlw	8
  1600  0017FC  6E49               	movwf	clearArray@size,c
  1601  0017FE  ECDC  F00F         	call	_clearArray	;wreg free
  1602                           
  1603                           ;pictris.c: 1373:     clearArray(tmpObjectData,8);
  1604  001802  0E80               	movlw	low _tmpObjectData
  1605  001804  6E47               	movwf	clearArray@pArray,c
  1606  001806  0E00               	movlw	high _tmpObjectData
  1607  001808  6E48               	movwf	clearArray@pArray+1,c
  1608  00180A  0E00               	movlw	0
  1609  00180C  6E4A               	movwf	clearArray@size+1,c
  1610  00180E  0E08               	movlw	8
  1611  001810  6E49               	movwf	clearArray@size,c
  1612  001812  ECDC  F00F         	call	_clearArray	;wreg free
  1613                           
  1614                           ;pictris.c: 1375:    if (tetris == 1){
  1615  001816  0407               	decf	_tetris,w,c
  1616  001818  A4D8               	btfss	status,2,c
  1617  00181A  D026               	goto	l489
  1618                           
  1619                           ;pictris.c: 1378:     selectNextObject(ObjectData);
  1620  00181C  0E18               	movlw	low _ObjectData
  1621  00181E  6E53               	movwf	selectNextObject@pTarget,c
  1622  001820  0E00               	movlw	high _ObjectData
  1623  001822  6E54               	movwf	selectNextObject@pTarget+1,c
  1624  001824  EC47  F00C         	call	_selectNextObject	;wreg free
  1625  001828                     
  1626                           ;pictris.c: 1381:         if (DropObject)
  1627  001828  5010               	movf	_DropObject,w,c	;volatile
  1628  00182A  B4D8               	btfsc	status,2,c
  1629  00182C  D008               	goto	l491
  1630                           
  1631                           ;pictris.c: 1382:         {;pictris.c: 1383:             DropObject = 0;
  1632  00182E  0E00               	movlw	0
  1633  001830  6E10               	movwf	_DropObject,c	;volatile
  1634                           
  1635                           ;pictris.c: 1384:             moveObjectDown(ObjectData);
  1636  001832  0E18               	movlw	low _ObjectData
  1637  001834  6E5A               	movwf	moveObjectDown@pObject,c
  1638  001836  0E00               	movlw	high _ObjectData
  1639  001838  6E5B               	movwf	moveObjectDown@pObject+1,c
  1640  00183A  EC13  F00B         	call	_moveObjectDown	;wreg free
  1641  00183E                     l491:
  1642                           
  1643                           ;pictris.c: 1388:         if (CheckForNewLines)
  1644  00183E  5011               	movf	_CheckForNewLines,w,c
  1645  001840  B4D8               	btfsc	status,2,c
  1646  001842  D006               	goto	l492
  1647                           
  1648                           ;pictris.c: 1389:             checkForLines(BackgroundData);
  1649  001844  0E90               	movlw	low _BackgroundData
  1650  001846  6E58               	movwf	checkForLines@pObject,c
  1651  001848  0E00               	movlw	high _BackgroundData
  1652  00184A  6E59               	movwf	checkForLines@pObject+1,c
  1653  00184C  EC62  F00D         	call	_checkForLines	;wreg free
  1654  001850                     l492:
  1655                           
  1656                           ;pictris.c: 1391:         checkButtons();
  1657  001850  EC79  F003         	call	_checkButtons	;wreg free
  1658                           
  1659                           ;pictris.c: 1397:         } while (!EndOfGame);
  1660  001854  5012               	movf	_EndOfGame,w,c
  1661  001856  B4D8               	btfsc	status,2,c
  1662  001858  D7E7               	goto	l490
  1663                           
  1664                           ;pictris.c: 1398:         writeHighScore(10);
  1665  00185A  0E0A               	movlw	10
  1666  00185C  ECA7  F00F         	call	_writeHighScore
  1667                           
  1668                           ;pictris.c: 1399:         show_score(NumberOfLines);
  1669  001860  5015               	movf	_NumberOfLines,w,c
  1670  001862  ECC7  F007         	call	_show_score
  1671                           
  1672                           ;pictris.c: 1401:     }
  1673  001866  0012               	return	
  1674  001868                     l489:
  1675                           
  1676                           ;pictris.c: 1404:             if (moveSnake == 1) {
  1677                           
  1678                           ;pictris.c: 1403:        do{
  1679  001868  040C               	decf	_moveSnake,w,c
  1680  00186A  A4D8               	btfss	status,2,c
  1681  00186C  D004               	goto	l496
  1682                           
  1683                           ;pictris.c: 1405:                 moveSnake = 0;
  1684  00186E  0E00               	movlw	0
  1685  001870  6E0C               	movwf	_moveSnake,c
  1686                           
  1687                           ;pictris.c: 1406:                 MoveSnakes();
  1688  001872  EC9A  F004         	call	_MoveSnakes	;wreg free
  1689  001876                     l496:
  1690                           
  1691                           ;pictris.c: 1409:             checkButtons();
  1692  001876  EC79  F003         	call	_checkButtons	;wreg free
  1693                           
  1694                           ;pictris.c: 1414:             } while(!EndOfGame);
  1695  00187A  5012               	movf	_EndOfGame,w,c
  1696  00187C  B4D8               	btfsc	status,2,c
  1697  00187E  D7F4               	goto	l489
  1698                           
  1699                           ;pictris.c: 1415:             writeHighScore(20);
  1700  001880  0E14               	movlw	20
  1701  001882  ECA7  F00F         	call	_writeHighScore
  1702                           
  1703                           ;pictris.c: 1416:             show_score(snakeLength);
  1704  001886  500B               	movf	_snakeLength,w,c
  1705  001888  ECC7  F007         	call	_show_score
  1706  00188C  0012               	return	
  1707  00188E                     __end_of_mainGameLoop:
  1708                           	opt stack 0
  1709                           tblptru	equ	0xFF8
  1710                           tblptrh	equ	0xFF7
  1711                           tblptrl	equ	0xFF6
  1712                           tablat	equ	0xFF5
  1713                           postinc0	equ	0xFEE
  1714                           wreg	equ	0xFE8
  1715                           postdec1	equ	0xFE5
  1716                           fsr1l	equ	0xFE1
  1717                           status	equ	0xFD8
  1718                           
  1719 ;; *************** function _writeHighScore *****************
  1720 ;; Defined at:
  1721 ;;		line 1342 in file "pictris.c"
  1722 ;; Parameters:    Size  Location     Type
  1723 ;;  adress          1    wreg     unsigned char 
  1724 ;; Auto vars:     Size  Location     Type
  1725 ;;  adress          1   20[COMRAM] unsigned char 
  1726 ;; Return value:  Size  Location     Type
  1727 ;;                  1    wreg      void 
  1728 ;; Registers used:
  1729 ;;		wreg, status,2, status,0, cstack
  1730 ;; Tracked objects:
  1731 ;;		On entry : 0/0
  1732 ;;		On exit  : 0/0
  1733 ;;		Unchanged: 0/0
  1734 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1735 ;;      Params:         0       0       0       0       0       0       0
  1736 ;;      Locals:         1       0       0       0       0       0       0
  1737 ;;      Temps:          0       0       0       0       0       0       0
  1738 ;;      Totals:         1       0       0       0       0       0       0
  1739 ;;Total ram usage:        1 bytes
  1740 ;; Hardware stack levels used:    1
  1741 ;; Hardware stack levels required when called:    3
  1742 ;; This function calls:
  1743 ;;		_WriteEEByte
  1744 ;; This function is called by:
  1745 ;;		_mainGameLoop
  1746 ;; This function uses a non-reentrant model
  1747 ;;
  1748                           
  1749                           	psect	text7
  1750  001F4E                     __ptext7:
  1751                           	opt stack 0
  1752  001F4E                     _writeHighScore:
  1753                           	opt stack 26
  1754                           
  1755                           ;incstack = 0
  1756                           ;writeHighScore@adress stored from wreg
  1757  001F4E  6E49               	movwf	writeHighScore@adress,c
  1758                           
  1759                           ;pictris.c: 1342: void writeHighScore(uint8_t adress);pictris.c: 1343: {;pictris.c: 1345
      +                          :     if (tetris == 1){
  1760  001F50  0407               	decf	_tetris,w,c
  1761  001F52  A4D8               	btfss	status,2,c
  1762  001F54  D00A               	goto	l481
  1763                           
  1764                           ;pictris.c: 1346:     if (NumberOfLines > LastHighScore){
  1765  001F56  5015               	movf	_NumberOfLines,w,c
  1766  001F58  5C14               	subwf	_LastHighScore,w,c
  1767  001F5A  B0D8               	btfsc	status,0,c
  1768  001F5C  0012               	return	
  1769                           
  1770                           ;pictris.c: 1347:         WriteEEByte(adress,NumberOfLines);
  1771  001F5E  C015  F047         	movff	_NumberOfLines,WriteEEByte@data
  1772  001F62  5049               	movf	writeHighScore@adress,w,c
  1773  001F64  EC4C  F010         	call	_WriteEEByte
  1774                           
  1775                           ;pictris.c: 1349:     }
  1776                           
  1777                           ;pictris.c: 1348:     };
  1778  001F68  0012               	return	
  1779  001F6A                     l481:
  1780  001F6A  5007               	movf	_tetris,w,c
  1781  001F6C  A4D8               	btfss	status,2,c
  1782  001F6E  0012               	return	
  1783                           
  1784                           ;pictris.c: 1352:         if (snakeLength > LastHighScore){
  1785  001F70  500B               	movf	_snakeLength,w,c
  1786  001F72  5C14               	subwf	_LastHighScore,w,c
  1787  001F74  B0D8               	btfsc	status,0,c
  1788  001F76  0012               	return	
  1789                           
  1790                           ;pictris.c: 1353:         WriteEEByte(adress,snakeLength);
  1791  001F78  C00B  F047         	movff	_snakeLength,WriteEEByte@data
  1792  001F7C  5049               	movf	writeHighScore@adress,w,c
  1793  001F7E  EC4C  F010         	call	_WriteEEByte
  1794                           
  1795                           ;pictris.c: 1355:     };
  1796                           
  1797                           ;pictris.c: 1354:         };
  1798  001F82  0012               	return	
  1799  001F84                     __end_of_writeHighScore:
  1800                           	opt stack 0
  1801                           tblptru	equ	0xFF8
  1802                           tblptrh	equ	0xFF7
  1803                           tblptrl	equ	0xFF6
  1804                           tablat	equ	0xFF5
  1805                           postinc0	equ	0xFEE
  1806                           wreg	equ	0xFE8
  1807                           postdec1	equ	0xFE5
  1808                           fsr1l	equ	0xFE1
  1809                           status	equ	0xFD8
  1810                           
  1811 ;; *************** function _WriteEEByte *****************
  1812 ;; Defined at:
  1813 ;;		line 1303 in file "pictris.c"
  1814 ;; Parameters:    Size  Location     Type
  1815 ;;  address         1    wreg     unsigned char 
  1816 ;;  data            1   18[COMRAM] unsigned char 
  1817 ;; Auto vars:     Size  Location     Type
  1818 ;;  address         1   19[COMRAM] unsigned char 
  1819 ;; Return value:  Size  Location     Type
  1820 ;;                  1    wreg      void 
  1821 ;; Registers used:
  1822 ;;		wreg, status,2
  1823 ;; Tracked objects:
  1824 ;;		On entry : 0/0
  1825 ;;		On exit  : 0/0
  1826 ;;		Unchanged: 0/0
  1827 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1828 ;;      Params:         1       0       0       0       0       0       0
  1829 ;;      Locals:         1       0       0       0       0       0       0
  1830 ;;      Temps:          0       0       0       0       0       0       0
  1831 ;;      Totals:         2       0       0       0       0       0       0
  1832 ;;Total ram usage:        2 bytes
  1833 ;; Hardware stack levels used:    1
  1834 ;; Hardware stack levels required when called:    2
  1835 ;; This function calls:
  1836 ;;		Nothing
  1837 ;; This function is called by:
  1838 ;;		_readHighScore
  1839 ;;		_writeHighScore
  1840 ;; This function uses a non-reentrant model
  1841 ;;
  1842                           
  1843                           	psect	text8
  1844  002098                     __ptext8:
  1845                           	opt stack 0
  1846  002098                     _WriteEEByte:
  1847                           	opt stack 27
  1848                           
  1849                           ;incstack = 0
  1850                           ;WriteEEByte@address stored from wreg
  1851  002098  6E48               	movwf	WriteEEByte@address,c
  1852                           
  1853                           ;pictris.c: 1303: void WriteEEByte(byte address, byte data);pictris.c: 1304: {;pictris.c
      +                          : 1305: EECON1bits.WREN=1;
  1854  00209A  84A6               	bsf	4006,2,c	;volsfr
  1855                           
  1856                           ;pictris.c: 1306: EEADR=address;
  1857  00209C  C048  FFA9         	movff	WriteEEByte@address,4009	;volatile
  1858                           
  1859                           ;pictris.c: 1307: EEDATA=data;
  1860  0020A0  C047  FFA8         	movff	WriteEEByte@data,4008	;volatile
  1861                           
  1862                           ;pictris.c: 1308: EECON1bits.EEPGD=0;
  1863  0020A4  9EA6               	bcf	4006,7,c	;volsfr
  1864                           
  1865                           ;pictris.c: 1309: EECON1bits.CFGS=0;
  1866  0020A6  9CA6               	bcf	4006,6,c	;volsfr
  1867                           
  1868                           ;pictris.c: 1310: INTCONbits.GIE=0;
  1869  0020A8  9EF2               	bcf	intcon,7,c	;volatile
  1870                           
  1871                           ;pictris.c: 1312: EECON2=0x55;
  1872  0020AA  0E55               	movlw	85
  1873  0020AC  6EA7               	movwf	4007,c	;volsfr
  1874                           
  1875                           ;pictris.c: 1313: EECON2=0xAA;
  1876  0020AE  0EAA               	movlw	170
  1877  0020B0  6EA7               	movwf	4007,c	;volsfr
  1878                           
  1879                           ;pictris.c: 1314: EECON1bits.WR=1;
  1880  0020B2  82A6               	bsf	4006,1,c	;volsfr
  1881                           
  1882                           ;pictris.c: 1316: INTCONbits.GIE=1;
  1883  0020B4  8EF2               	bsf	intcon,7,c	;volatile
  1884  0020B6  B2A6               	btfsc	4006,1,c	;volsfr
  1885  0020B8  D7FE               	goto	l470
  1886                           
  1887                           ;pictris.c: 1318: EECON1bits.WREN=0;
  1888  0020BA  94A6               	bcf	4006,2,c	;volsfr
  1889  0020BC  0012               	return		;funcret
  1890  0020BE                     __end_of_WriteEEByte:
  1891                           	opt stack 0
  1892                           tblptru	equ	0xFF8
  1893                           tblptrh	equ	0xFF7
  1894                           tblptrl	equ	0xFF6
  1895                           tablat	equ	0xFF5
  1896                           intcon	equ	0xFF2
  1897                           postinc0	equ	0xFEE
  1898                           wreg	equ	0xFE8
  1899                           postdec1	equ	0xFE5
  1900                           fsr1l	equ	0xFE1
  1901                           status	equ	0xFD8
  1902                           
  1903 ;; *************** function _show_score *****************
  1904 ;; Defined at:
  1905 ;;		line 1240 in file "pictris.c"
  1906 ;; Parameters:    Size  Location     Type
  1907 ;;  score           1    wreg     unsigned char 
  1908 ;; Auto vars:     Size  Location     Type
  1909 ;;  score           1   16[BANK0 ] unsigned char 
  1910 ;;  mask           16    0[BANK0 ] unsigned short [8]
  1911 ;;  number          4   18[BANK0 ] unsigned char [4]
  1912 ;;  i               1   22[BANK0 ] unsigned char 
  1913 ;;  currentNumbe    1   17[BANK0 ] unsigned char 
  1914 ;; Return value:  Size  Location     Type
  1915 ;;                  1    wreg      void 
  1916 ;; Registers used:
  1917 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1918 ;; Tracked objects:
  1919 ;;		On entry : 0/0
  1920 ;;		On exit  : 0/0
  1921 ;;		Unchanged: 0/0
  1922 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1923 ;;      Params:         0       0       0       0       0       0       0
  1924 ;;      Locals:         0      23       0       0       0       0       0
  1925 ;;      Temps:          0       0       0       0       0       0       0
  1926 ;;      Totals:         0      23       0       0       0       0       0
  1927 ;;Total ram usage:       23 bytes
  1928 ;; Hardware stack levels used:    1
  1929 ;; Hardware stack levels required when called:    5
  1930 ;; This function calls:
  1931 ;;		_clearArray
  1932 ;;		_getNumber
  1933 ;;		_itoa
  1934 ;;		_mergeObjects
  1935 ;;		_moveObject
  1936 ;;		_pauseButtons
  1937 ;;		_pauseMultiplexing
  1938 ;;		_resumeButtons
  1939 ;;		_resumeMultiplexing
  1940 ;; This function is called by:
  1941 ;;		_mainGameLoop
  1942 ;;		_main
  1943 ;; This function uses a non-reentrant model
  1944 ;;
  1945                           
  1946                           	psect	text9
  1947  000F8E                     __ptext9:
  1948                           	opt stack 0
  1949  000F8E                     _show_score:
  1950                           	opt stack 25
  1951                           
  1952                           ;incstack = 0
  1953                           ;show_score@score stored from wreg
  1954  000F8E  0100               	movlb	0	; () banked
  1955  000F90  6FB0               	movwf	show_score@score& (0+255),b
  1956                           
  1957                           ;pictris.c: 1240: void show_score(byte score);pictris.c: 1241: {;pictris.c: 1242:     by
      +                          te i, currentNumber;;pictris.c: 1243:     char number[4];;pictris.c: 1247:     pauseMult
      +                          iplexing();
  1958  000F92  ECC0  F010         	call	_pauseMultiplexing	;wreg free
  1959                           
  1960                           ;pictris.c: 1250:     clearArray(tmpObjectData, 8);
  1961  000F96  0E80               	movlw	low _tmpObjectData
  1962  000F98  6E47               	movwf	clearArray@pArray,c
  1963  000F9A  0E00               	movlw	high _tmpObjectData
  1964  000F9C  6E48               	movwf	clearArray@pArray+1,c
  1965  000F9E  0E00               	movlw	0
  1966  000FA0  6E4A               	movwf	clearArray@size+1,c
  1967  000FA2  0E08               	movlw	8
  1968  000FA4  6E49               	movwf	clearArray@size,c
  1969  000FA6  ECDC  F00F         	call	_clearArray	;wreg free
  1970                           
  1971                           ;pictris.c: 1251:     clearArray(ObjectData, 8);
  1972  000FAA  0E18               	movlw	low _ObjectData
  1973  000FAC  6E47               	movwf	clearArray@pArray,c
  1974  000FAE  0E00               	movlw	high _ObjectData
  1975  000FB0  6E48               	movwf	clearArray@pArray+1,c
  1976  000FB2  0E00               	movlw	0
  1977  000FB4  6E4A               	movwf	clearArray@size+1,c
  1978  000FB6  0E08               	movlw	8
  1979  000FB8  6E49               	movwf	clearArray@size,c
  1980  000FBA  ECDC  F00F         	call	_clearArray	;wreg free
  1981                           
  1982                           ;pictris.c: 1252:     clearArray(BackgroundData, 8);
  1983  000FBE  0E90               	movlw	low _BackgroundData
  1984  000FC0  6E47               	movwf	clearArray@pArray,c
  1985  000FC2  0E00               	movlw	high _BackgroundData
  1986  000FC4  6E48               	movwf	clearArray@pArray+1,c
  1987  000FC6  0E00               	movlw	0
  1988  000FC8  6E4A               	movwf	clearArray@size+1,c
  1989  000FCA  0E08               	movlw	8
  1990  000FCC  6E49               	movwf	clearArray@size,c
  1991  000FCE  ECDC  F00F         	call	_clearArray	;wreg free
  1992                           
  1993                           ;pictris.c: 1254:     itoa(score, number, 10);
  1994  000FD2  C0B0  F055         	movff	show_score@score,itoa@value
  1995  000FD6  6A56               	clrf	itoa@value+1,c
  1996  000FD8  0EB2               	movlw	low show_score@number
  1997  000FDA  6E57               	movwf	itoa@str,c
  1998  000FDC  0E00               	movlw	high show_score@number
  1999  000FDE  6E58               	movwf	itoa@str+1,c
  2000  000FE0  0E00               	movlw	0
  2001  000FE2  6E5A               	movwf	itoa@bas+1,c
  2002  000FE4  0E0A               	movlw	10
  2003  000FE6  6E59               	movwf	itoa@bas,c
  2004  000FE8  ECA6  F009         	call	_itoa	;wreg free
  2005                           
  2006                           ;pictris.c: 1255:     for (i = 0; i < 3 && number[i]; i++)
  2007  000FEC  0E00               	movlw	0
  2008  000FEE  0100               	movlb	0	; () banked
  2009  000FF0  6FB6               	movwf	show_score@i& (0+255),b
  2010  000FF2  D039               	goto	l447
  2011  000FF4                     
  2012                           ; BSR set to: 0
  2013                           ;pictris.c: 1256:     {;pictris.c: 1257:         currentNumber = number[i] - '0';
  2014                           
  2015                           ; BSR set to: 0
  2016  000FF4  51B6               	movf	show_score@i& (0+255),w,b
  2017  000FF6  0D01               	mullw	1
  2018  000FF8  0EB2               	movlw	low show_score@number
  2019  000FFA  24F3               	addwf	prodl,w,c
  2020  000FFC  6ED9               	movwf	fsr2l,c
  2021  000FFE  0E00               	movlw	high show_score@number
  2022  001000  20F4               	addwfc	prodh,w,c
  2023  001002  6EDA               	movwf	fsr2h,c
  2024  001004  50DF               	movf	indf2,w,c
  2025  001006  0FD0               	addlw	208
  2026  001008  6FB1               	movwf	show_score@currentNumber& (0+255),b
  2027                           
  2028                           ; BSR set to: 0
  2029                           ;pictris.c: 1258:         getNumber(currentNumber, tmpObjectData);
  2030  00100A  0E80               	movlw	low _tmpObjectData
  2031  00100C  6E51               	movwf	getNumber@pTarget,c
  2032  00100E  0E00               	movlw	high _tmpObjectData
  2033  001010  6E52               	movwf	getNumber@pTarget+1,c
  2034  001012  51B1               	movf	show_score@currentNumber& (0+255),w,b
  2035  001014  EC38  F010         	call	_getNumber
  2036                           
  2037                           ;pictris.c: 1260:         moveObject(tmpObjectData, DOWN, (2-i) * 5);
  2038  001018  0E80               	movlw	low _tmpObjectData
  2039  00101A  6E47               	movwf	moveObject@pObject,c
  2040  00101C  0E00               	movlw	high _tmpObjectData
  2041  00101E  6E48               	movwf	moveObject@pObject+1,c
  2042  001020  0E00               	movlw	0
  2043  001022  6E49               	movwf	moveObject@direction,c
  2044  001024  0100               	movlb	0	; () banked
  2045  001026  51B6               	movf	show_score@i& (0+255),w,b
  2046  001028  0800               	sublw	0
  2047  00102A  0F02               	addlw	2
  2048  00102C  0D05               	mullw	5
  2049  00102E  CFF3 F04A          	movff	prodl,moveObject@cycles
  2050  001032  EC50  F006         	call	_moveObject	;wreg free
  2051                           
  2052                           ;pictris.c: 1261:         moveObject(tmpObjectData, RIGHT, i);
  2053  001036  0E80               	movlw	low _tmpObjectData
  2054  001038  6E47               	movwf	moveObject@pObject,c
  2055  00103A  0E00               	movlw	high _tmpObjectData
  2056  00103C  6E48               	movwf	moveObject@pObject+1,c
  2057  00103E  0E03               	movlw	3
  2058  001040  6E49               	movwf	moveObject@direction,c
  2059  001042  C0B6  F04A         	movff	show_score@i,moveObject@cycles
  2060  001046  EC50  F006         	call	_moveObject	;wreg free
  2061                           
  2062                           ;pictris.c: 1263:         mergeObjects(tmpObjectData, ObjectData, MERGE);
  2063  00104A  0E80               	movlw	low _tmpObjectData
  2064  00104C  6E47               	movwf	mergeObjects@pSource,c
  2065  00104E  0E00               	movlw	high _tmpObjectData
  2066  001050  6E48               	movwf	mergeObjects@pSource+1,c
  2067  001052  0E18               	movlw	low _ObjectData
  2068  001054  6E49               	movwf	mergeObjects@pTarget,c
  2069  001056  0E00               	movlw	high _ObjectData
  2070  001058  6E4A               	movwf	mergeObjects@pTarget+1,c
  2071  00105A  0E01               	movlw	1
  2072  00105C  6E4B               	movwf	mergeObjects@mode,c
  2073  00105E  ECA4  F00A         	call	_mergeObjects	;wreg free
  2074                           
  2075                           ;pictris.c: 1264:     }
  2076  001062  0100               	movlb	0	; () banked
  2077  001064  2BB6               	incf	show_score@i& (0+255),f,b
  2078  001066                     l447:
  2079                           
  2080                           ; BSR set to: 0
  2081                           
  2082                           ; BSR set to: 0
  2083  001066  0E03               	movlw	3
  2084  001068  61B6               	cpfslt	show_score@i& (0+255),b
  2085  00106A  D00B               	goto	u4940
  2086                           
  2087                           ; BSR set to: 0
  2088  00106C  51B6               	movf	show_score@i& (0+255),w,b
  2089  00106E  0D01               	mullw	1
  2090  001070  0EB2               	movlw	low show_score@number
  2091  001072  24F3               	addwf	prodl,w,c
  2092  001074  6ED9               	movwf	fsr2l,c
  2093  001076  0E00               	movlw	high show_score@number
  2094  001078  20F4               	addwfc	prodh,w,c
  2095  00107A  6EDA               	movwf	fsr2h,c
  2096  00107C  50DF               	movf	indf2,w,c
  2097  00107E  A4D8               	btfss	status,2,c
  2098  001080  D7B9               	goto	l448
  2099  001082                     u4940:
  2100                           
  2101                           ; BSR set to: 0
  2102                           ;pictris.c: 1267:     resumeMultiplexing();
  2103                           
  2104                           ; BSR set to: 0
  2105                           
  2106                           ; BSR set to: 0
  2107  001082  ECD2  F010         	call	_resumeMultiplexing	;wreg free
  2108  001086                     
  2109                           ;pictris.c: 1271:      while (Down_Debounced)
  2110                           
  2111                           ;pictris.c: 1272:         continue;
  2112  001086  5031               	movf	_Down_Debounced,w,c	;volatile
  2113  001088  A4D8               	btfss	status,2,c
  2114  00108A  D7FD               	goto	l453
  2115  00108C                     u4950:
  2116                           
  2117                           ;pictris.c: 1275:     while (!Down_Debounced)
  2118                           
  2119                           ;pictris.c: 1276:         continue;
  2120                           
  2121                           ;pictris.c: 1275:     while (!Down_Debounced)
  2122  00108C  5031               	movf	_Down_Debounced,w,c	;volatile
  2123  00108E  B4D8               	btfsc	status,2,c
  2124  001090  D7FD               	goto	u4950
  2125                           
  2126                           ;pictris.c: 1279:     pauseMultiplexing();
  2127  001092  ECC0  F010         	call	_pauseMultiplexing	;wreg free
  2128                           
  2129                           ;pictris.c: 1280:     uint16_t mask[] = {0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff,
      +                           0xffff, 0xffff};
  2130  001096  EE20  F0B7         	lfsr	2,show_score@F2907
  2131  00109A  EE10  F0A0         	lfsr	1,show_score@mask
  2132  00109E  0E0F               	movlw	15
  2133  0010A0                     u4971:
  2134  0010A0  CFDB FFE3          	movff	plusw2,plusw1
  2135  0010A4  06E8               	decf	wreg,f,c
  2136  0010A6  E2FC               	bc	u4971
  2137                           
  2138                           ;pictris.c: 1281:     mergeObjects(mask, ObjectData, INVERT);
  2139  0010A8  0EA0               	movlw	low show_score@mask
  2140  0010AA  6E47               	movwf	mergeObjects@pSource,c
  2141  0010AC  0E00               	movlw	high show_score@mask
  2142  0010AE  6E48               	movwf	mergeObjects@pSource+1,c
  2143  0010B0  0E18               	movlw	low _ObjectData
  2144  0010B2  6E49               	movwf	mergeObjects@pTarget,c
  2145  0010B4  0E00               	movlw	high _ObjectData
  2146  0010B6  6E4A               	movwf	mergeObjects@pTarget+1,c
  2147  0010B8  0E02               	movlw	2
  2148  0010BA  6E4B               	movwf	mergeObjects@mode,c
  2149  0010BC  ECA4  F00A         	call	_mergeObjects	;wreg free
  2150                           
  2151                           ;pictris.c: 1282:     resumeMultiplexing();
  2152  0010C0  ECD2  F010         	call	_resumeMultiplexing	;wreg free
  2153  0010C4                     
  2154                           ;pictris.c: 1286:     while (Down_Debounced)
  2155                           
  2156                           ;pictris.c: 1287:         continue;
  2157  0010C4  5031               	movf	_Down_Debounced,w,c	;volatile
  2158  0010C6  A4D8               	btfss	status,2,c
  2159  0010C8  D7FD               	goto	l461
  2160                           
  2161                           ;pictris.c: 1288:     pauseButtons();
  2162  0010CA  ECD8  F010         	call	_pauseButtons	;wreg free
  2163                           
  2164                           ;pictris.c: 1289:     Down_Delay = 500;
  2165  0010CE  0E01               	movlw	1
  2166  0010D0  6E29               	movwf	_Down_Delay+1,c	;volatile
  2167  0010D2  0EF4               	movlw	244
  2168  0010D4  6E28               	movwf	_Down_Delay,c	;volatile
  2169                           
  2170                           ;pictris.c: 1290:     resumeButtons();
  2171  0010D6  ECD5  F010         	call	_resumeButtons	;wreg free
  2172  0010DA  0012               	return		;funcret
  2173  0010DC                     __end_of_show_score:
  2174                           	opt stack 0
  2175                           tblptru	equ	0xFF8
  2176                           tblptrh	equ	0xFF7
  2177                           tblptrl	equ	0xFF6
  2178                           tablat	equ	0xFF5
  2179                           prodh	equ	0xFF4
  2180                           prodl	equ	0xFF3
  2181                           intcon	equ	0xFF2
  2182                           postinc0	equ	0xFEE
  2183                           wreg	equ	0xFE8
  2184                           postdec1	equ	0xFE5
  2185                           plusw1	equ	0xFE3
  2186                           fsr1l	equ	0xFE1
  2187                           indf2	equ	0xFDF
  2188                           plusw2	equ	0xFDB
  2189                           fsr2h	equ	0xFDA
  2190                           fsr2l	equ	0xFD9
  2191                           status	equ	0xFD8
  2192                           
  2193 ;; *************** function _itoa *****************
  2194 ;; Defined at:
  2195 ;;		line 312 in file "pictris.c"
  2196 ;; Parameters:    Size  Location     Type
  2197 ;;  value           2   32[COMRAM] int 
  2198 ;;  str             2   34[COMRAM] PTR unsigned char 
  2199 ;;		 -> show_score@number(4), 
  2200 ;;  bas             2   36[COMRAM] int 
  2201 ;; Auto vars:     Size  Location     Type
  2202 ;;  rem             2   41[COMRAM] int 
  2203 ;;  i               2   43[COMRAM] int 
  2204 ;;  isNegative      1   40[COMRAM] _Bool 
  2205 ;; Return value:  Size  Location     Type
  2206 ;;                  2   32[COMRAM] PTR unsigned char 
  2207 ;; Registers used:
  2208 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  2209 ;; Tracked objects:
  2210 ;;		On entry : 0/0
  2211 ;;		On exit  : 0/0
  2212 ;;		Unchanged: 0/0
  2213 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2214 ;;      Params:         6       0       0       0       0       0       0
  2215 ;;      Locals:         7       0       0       0       0       0       0
  2216 ;;      Temps:          0       0       0       0       0       0       0
  2217 ;;      Totals:        13       0       0       0       0       0       0
  2218 ;;Total ram usage:       13 bytes
  2219 ;; Hardware stack levels used:    1
  2220 ;; Hardware stack levels required when called:    4
  2221 ;; This function calls:
  2222 ;;		___awdiv
  2223 ;;		___awmod
  2224 ;;		_reverse
  2225 ;; This function is called by:
  2226 ;;		_show_score
  2227 ;; This function uses a non-reentrant model
  2228 ;;
  2229                           
  2230                           	psect	text10
  2231  00134C                     __ptext10:
  2232                           	opt stack 0
  2233  00134C                     _itoa:
  2234                           	opt stack 25
  2235                           
  2236                           ;pictris.c: 312: char * itoa(int value, char * str, int bas);pictris.c: 313: {;pictris.c
      +                          : 314:     int i = 0;
  2237                           
  2238                           ;incstack = 0
  2239  00134C  0E00               	movlw	0
  2240  00134E  6E61               	movwf	itoa@i+1,c
  2241  001350  0E00               	movlw	0
  2242  001352  6E60               	movwf	itoa@i,c
  2243                           
  2244                           ;pictris.c: 315:     _Bool isNegative = 0;
  2245  001354  0E00               	movlw	0
  2246  001356  6E5D               	movwf	itoa@isNegative,c
  2247                           
  2248                           ;pictris.c: 318:     if (value == 0)
  2249  001358  5055               	movf	itoa@value,w,c
  2250  00135A  1056               	iorwf	itoa@value+1,w,c
  2251  00135C  A4D8               	btfss	status,2,c
  2252  00135E  D013               	goto	l148
  2253                           
  2254                           ;pictris.c: 319:     {;pictris.c: 320:         str[i++] = '0';
  2255  001360  5060               	movf	itoa@i,w,c
  2256  001362  2457               	addwf	itoa@str,w,c
  2257  001364  6ED9               	movwf	fsr2l,c
  2258  001366  5061               	movf	itoa@i+1,w,c
  2259  001368  2058               	addwfc	itoa@str+1,w,c
  2260  00136A  6EDA               	movwf	fsr2h,c
  2261  00136C  0E30               	movlw	48
  2262  00136E  6EDF               	movwf	indf2,c
  2263  001370  4A60               	infsnz	itoa@i,f,c
  2264  001372  2A61               	incf	itoa@i+1,f,c
  2265                           
  2266                           ;pictris.c: 321:         str[i] = '\0';
  2267  001374  5060               	movf	itoa@i,w,c
  2268  001376  2457               	addwf	itoa@str,w,c
  2269  001378  6ED9               	movwf	fsr2l,c
  2270  00137A  5061               	movf	itoa@i+1,w,c
  2271  00137C  2058               	addwfc	itoa@str+1,w,c
  2272  00137E  6EDA               	movwf	fsr2h,c
  2273  001380  0E00               	movlw	0
  2274  001382  6EDF               	movwf	indf2,c
  2275                           
  2276                           ;pictris.c: 322:         return str;;	Return value of _itoa is never used
  2277  001384  0012               	return	
  2278  001386                     l148:
  2279                           
  2280                           ;pictris.c: 327:     if (value < 0 && bas == 10)
  2281  001386  AE56               	btfss	itoa@value+1,7,c
  2282  001388  D042               	goto	l151
  2283  00138A  0E0A               	movlw	10
  2284  00138C  1859               	xorwf	itoa@bas,w,c
  2285  00138E  105A               	iorwf	itoa@bas+1,w,c
  2286  001390  A4D8               	btfss	status,2,c
  2287  001392  D03D               	goto	l151
  2288                           
  2289                           ;pictris.c: 328:     {;pictris.c: 329:         isNegative = 1;
  2290  001394  0E01               	movlw	1
  2291  001396  6E5D               	movwf	itoa@isNegative,c
  2292                           
  2293                           ;pictris.c: 330:         value = -value;
  2294  001398  6C55               	negf	itoa@value,c
  2295  00139A  1E56               	comf	itoa@value+1,f,c
  2296  00139C  B0D8               	btfsc	status,0,c
  2297  00139E  2A56               	incf	itoa@value+1,f,c
  2298                           
  2299                           ;pictris.c: 334:     while (value != 0)
  2300                           
  2301                           ;pictris.c: 331:     }
  2302  0013A0  D036               	goto	l151
  2303  0013A2                     
  2304                           ;pictris.c: 335:     {;pictris.c: 336:         int rem = value % bas;
  2305  0013A2  C055  F047         	movff	itoa@value,___awmod@dividend
  2306  0013A6  C056  F048         	movff	itoa@value+1,___awmod@dividend+1
  2307  0013AA  C059  F049         	movff	itoa@bas,___awmod@divisor
  2308  0013AE  C05A  F04A         	movff	itoa@bas+1,___awmod@divisor+1
  2309  0013B2  ECA2  F00D         	call	___awmod	;wreg free
  2310  0013B6  C047  F05E         	movff	?___awmod,itoa@rem
  2311  0013BA  C048  F05F         	movff	?___awmod+1,itoa@rem+1
  2312                           
  2313                           ;pictris.c: 337:         str[i++] = (rem > 9)? (rem-10) + 'a' : rem + '0';
  2314  0013BE  BE5F               	btfsc	itoa@rem+1,7,c
  2315  0013C0  D006               	goto	u4320
  2316  0013C2  505F               	movf	itoa@rem+1,w,c
  2317  0013C4  E106               	bnz	l4096
  2318  0013C6  0E0A               	movlw	10
  2319  0013C8  5C5E               	subwf	itoa@rem,w,c
  2320  0013CA  B0D8               	btfsc	status,0,c
  2321  0013CC  D002               	goto	l154
  2322  0013CE                     u4320:
  2323  0013CE  0E30               	movlw	48
  2324  0013D0  D001               	goto	L1
  2325  0013D2                     l154:
  2326  0013D2                     l4096:
  2327  0013D2  0E57               	movlw	87
  2328  0013D4                     L1:
  2329  0013D4  245E               	addwf	itoa@rem,w,c
  2330  0013D6  6E5B               	movwf	_itoa$425,c
  2331  0013D8  0E00               	movlw	0
  2332  0013DA  205F               	addwfc	itoa@rem+1,w,c
  2333  0013DC  6E5C               	movwf	_itoa$425+1,c
  2334  0013DE  5060               	movf	itoa@i,w,c
  2335  0013E0  2457               	addwf	itoa@str,w,c
  2336  0013E2  6ED9               	movwf	fsr2l,c
  2337  0013E4  5061               	movf	itoa@i+1,w,c
  2338  0013E6  2058               	addwfc	itoa@str+1,w,c
  2339  0013E8  6EDA               	movwf	fsr2h,c
  2340  0013EA  C05B  FFDF         	movff	_itoa$425,indf2
  2341  0013EE  4A60               	infsnz	itoa@i,f,c
  2342  0013F0  2A61               	incf	itoa@i+1,f,c
  2343                           
  2344                           ;pictris.c: 338:         value = value/bas;
  2345  0013F2  C055  F047         	movff	itoa@value,___awdiv@dividend
  2346  0013F6  C056  F048         	movff	itoa@value+1,___awdiv@dividend+1
  2347  0013FA  C059  F049         	movff	itoa@bas,___awdiv@divisor
  2348  0013FE  C05A  F04A         	movff	itoa@bas+1,___awdiv@divisor+1
  2349  001402  EC20  F00D         	call	___awdiv	;wreg free
  2350  001406  C047  F055         	movff	?___awdiv,itoa@value
  2351  00140A  C048  F056         	movff	?___awdiv+1,itoa@value+1
  2352  00140E                     l151:
  2353                           
  2354                           ;pictris.c: 334:     while (value != 0)
  2355  00140E  5055               	movf	itoa@value,w,c
  2356  001410  1056               	iorwf	itoa@value+1,w,c
  2357  001412  A4D8               	btfss	status,2,c
  2358  001414  D7C6               	goto	l152
  2359                           
  2360                           ;pictris.c: 342:     if (isNegative)
  2361  001416  505D               	movf	itoa@isNegative,w,c
  2362  001418  B4D8               	btfsc	status,2,c
  2363  00141A  D00A               	goto	l158
  2364                           
  2365                           ;pictris.c: 343:         str[i++] = '-';
  2366  00141C  5060               	movf	itoa@i,w,c
  2367  00141E  2457               	addwf	itoa@str,w,c
  2368  001420  6ED9               	movwf	fsr2l,c
  2369  001422  5061               	movf	itoa@i+1,w,c
  2370  001424  2058               	addwfc	itoa@str+1,w,c
  2371  001426  6EDA               	movwf	fsr2h,c
  2372  001428  0E2D               	movlw	45
  2373  00142A  6EDF               	movwf	indf2,c
  2374  00142C  4A60               	infsnz	itoa@i,f,c
  2375  00142E  2A61               	incf	itoa@i+1,f,c
  2376  001430                     l158:
  2377                           
  2378                           ;pictris.c: 345:     str[i] = '\0';
  2379  001430  5060               	movf	itoa@i,w,c
  2380  001432  2457               	addwf	itoa@str,w,c
  2381  001434  6ED9               	movwf	fsr2l,c
  2382  001436  5061               	movf	itoa@i+1,w,c
  2383  001438  2058               	addwfc	itoa@str+1,w,c
  2384  00143A  6EDA               	movwf	fsr2h,c
  2385  00143C  0E00               	movlw	0
  2386  00143E  6EDF               	movwf	indf2,c
  2387                           
  2388                           ;pictris.c: 348:     reverse(str, i);
  2389  001440  C057  F04C         	movff	itoa@str,reverse@str
  2390  001444  C058  F04D         	movff	itoa@str+1,reverse@str+1
  2391  001448  C060  F04E         	movff	itoa@i,reverse@length
  2392  00144C  C061  F04F         	movff	itoa@i+1,reverse@length+1
  2393  001450  ECFE  F00E         	call	_reverse	;wreg free
  2394  001454  0012               	return	
  2395  001456                     __end_of_itoa:
  2396                           	opt stack 0
  2397                           tblptru	equ	0xFF8
  2398                           tblptrh	equ	0xFF7
  2399                           tblptrl	equ	0xFF6
  2400                           tablat	equ	0xFF5
  2401                           prodh	equ	0xFF4
  2402                           prodl	equ	0xFF3
  2403                           intcon	equ	0xFF2
  2404                           postinc0	equ	0xFEE
  2405                           wreg	equ	0xFE8
  2406                           postdec1	equ	0xFE5
  2407                           plusw1	equ	0xFE3
  2408                           fsr1l	equ	0xFE1
  2409                           indf2	equ	0xFDF
  2410                           plusw2	equ	0xFDB
  2411                           fsr2h	equ	0xFDA
  2412                           fsr2l	equ	0xFD9
  2413                           status	equ	0xFD8
  2414                           
  2415 ;; *************** function _reverse *****************
  2416 ;; Defined at:
  2417 ;;		line 300 in file "pictris.c"
  2418 ;; Parameters:    Size  Location     Type
  2419 ;;  str             2   23[COMRAM] PTR unsigned char 
  2420 ;;		 -> show_score@number(4), 
  2421 ;;  length          2   25[COMRAM] int 
  2422 ;; Auto vars:     Size  Location     Type
  2423 ;;  end             2   30[COMRAM] int 
  2424 ;;  start           2   28[COMRAM] int 
  2425 ;; Return value:  Size  Location     Type
  2426 ;;                  1    wreg      void 
  2427 ;; Registers used:
  2428 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  2429 ;; Tracked objects:
  2430 ;;		On entry : 0/0
  2431 ;;		On exit  : 0/0
  2432 ;;		Unchanged: 0/0
  2433 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2434 ;;      Params:         4       0       0       0       0       0       0
  2435 ;;      Locals:         4       0       0       0       0       0       0
  2436 ;;      Temps:          1       0       0       0       0       0       0
  2437 ;;      Totals:         9       0       0       0       0       0       0
  2438 ;;Total ram usage:        9 bytes
  2439 ;; Hardware stack levels used:    1
  2440 ;; Hardware stack levels required when called:    3
  2441 ;; This function calls:
  2442 ;;		_swap
  2443 ;; This function is called by:
  2444 ;;		_itoa
  2445 ;; This function uses a non-reentrant model
  2446 ;;
  2447                           
  2448                           	psect	text11
  2449  001DFC                     __ptext11:
  2450                           	opt stack 0
  2451  001DFC                     _reverse:
  2452                           	opt stack 25
  2453                           
  2454                           ;pictris.c: 300: void reverse(char str[], int length);pictris.c: 301: {;pictris.c: 302: 
      +                              int start = 0;
  2455                           
  2456                           ;incstack = 0
  2457  001DFC  0E00               	movlw	0
  2458  001DFE  6E52               	movwf	reverse@start+1,c
  2459  001E00  0E00               	movlw	0
  2460  001E02  6E51               	movwf	reverse@start,c
  2461                           
  2462                           ;pictris.c: 303:     int end = length -1;
  2463  001E04  0EFF               	movlw	255
  2464  001E06  244E               	addwf	reverse@length,w,c
  2465  001E08  6E53               	movwf	reverse@end,c
  2466  001E0A  0EFF               	movlw	255
  2467  001E0C  204F               	addwfc	reverse@length+1,w,c
  2468  001E0E  6E54               	movwf	reverse@end+1,c
  2469                           
  2470                           ;pictris.c: 304:     while (start < end)
  2471  001E10  D013               	goto	l142
  2472  001E12                     
  2473                           ;pictris.c: 305:     {;pictris.c: 306:         swap(str+start, str+end);
  2474  001E12  5051               	movf	reverse@start,w,c
  2475  001E14  244C               	addwf	reverse@str,w,c
  2476  001E16  6E47               	movwf	swap@a,c
  2477  001E18  5052               	movf	reverse@start+1,w,c
  2478  001E1A  204D               	addwfc	reverse@str+1,w,c
  2479  001E1C  6E48               	movwf	swap@a+1,c
  2480  001E1E  5053               	movf	reverse@end,w,c
  2481  001E20  244C               	addwf	reverse@str,w,c
  2482  001E22  6E49               	movwf	swap@b,c
  2483  001E24  5054               	movf	reverse@end+1,w,c
  2484  001E26  204D               	addwfc	reverse@str+1,w,c
  2485  001E28  6E4A               	movwf	swap@b+1,c
  2486  001E2A  ECF6  F00F         	call	_swap	;wreg free
  2487                           
  2488                           ;pictris.c: 307:         start++;
  2489  001E2E  4A51               	infsnz	reverse@start,f,c
  2490  001E30  2A52               	incf	reverse@start+1,f,c
  2491                           
  2492                           ;pictris.c: 308:         end--;
  2493  001E32  0653               	decf	reverse@end,f,c
  2494  001E34  A0D8               	btfss	status,0,c
  2495  001E36  0654               	decf	reverse@end+1,f,c
  2496  001E38                     l142:
  2497                           
  2498                           ;pictris.c: 304:     while (start < end)
  2499  001E38  5053               	movf	reverse@end,w,c
  2500  001E3A  5C51               	subwf	reverse@start,w,c
  2501  001E3C  5052               	movf	reverse@start+1,w,c
  2502  001E3E  0A80               	xorlw	128
  2503  001E40  6E50               	movwf	??_reverse& (0+255),c
  2504  001E42  5054               	movf	reverse@end+1,w,c
  2505  001E44  0A80               	xorlw	128
  2506  001E46  5850               	subwfb	??_reverse& (0+255),w,c
  2507  001E48  B0D8               	btfsc	status,0,c
  2508  001E4A  0012               	return	
  2509  001E4C  D7E2               	goto	l143
  2510  001E4E                     __end_of_reverse:
  2511                           	opt stack 0
  2512                           tblptru	equ	0xFF8
  2513                           tblptrh	equ	0xFF7
  2514                           tblptrl	equ	0xFF6
  2515                           tablat	equ	0xFF5
  2516                           prodh	equ	0xFF4
  2517                           prodl	equ	0xFF3
  2518                           intcon	equ	0xFF2
  2519                           postinc0	equ	0xFEE
  2520                           wreg	equ	0xFE8
  2521                           postdec1	equ	0xFE5
  2522                           plusw1	equ	0xFE3
  2523                           fsr1l	equ	0xFE1
  2524                           indf2	equ	0xFDF
  2525                           plusw2	equ	0xFDB
  2526                           fsr2h	equ	0xFDA
  2527                           fsr2l	equ	0xFD9
  2528                           status	equ	0xFD8
  2529                           
  2530 ;; *************** function _swap *****************
  2531 ;; Defined at:
  2532 ;;		line 292 in file "pictris.c"
  2533 ;; Parameters:    Size  Location     Type
  2534 ;;  a               2   18[COMRAM] PTR unsigned char 
  2535 ;;		 -> show_score@number(4), 
  2536 ;;  b               2   20[COMRAM] PTR unsigned char 
  2537 ;;		 -> show_score@number(4), 
  2538 ;; Auto vars:     Size  Location     Type
  2539 ;;  t               1   22[COMRAM] unsigned char 
  2540 ;; Return value:  Size  Location     Type
  2541 ;;                  1    wreg      void 
  2542 ;; Registers used:
  2543 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2
  2544 ;; Tracked objects:
  2545 ;;		On entry : 0/0
  2546 ;;		On exit  : 0/0
  2547 ;;		Unchanged: 0/0
  2548 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2549 ;;      Params:         4       0       0       0       0       0       0
  2550 ;;      Locals:         1       0       0       0       0       0       0
  2551 ;;      Temps:          0       0       0       0       0       0       0
  2552 ;;      Totals:         5       0       0       0       0       0       0
  2553 ;;Total ram usage:        5 bytes
  2554 ;; Hardware stack levels used:    1
  2555 ;; Hardware stack levels required when called:    2
  2556 ;; This function calls:
  2557 ;;		Nothing
  2558 ;; This function is called by:
  2559 ;;		_reverse
  2560 ;; This function uses a non-reentrant model
  2561 ;;
  2562                           
  2563                           	psect	text12
  2564  001FEC                     __ptext12:
  2565                           	opt stack 0
  2566  001FEC                     _swap:
  2567                           	opt stack 25
  2568                           
  2569                           ;pictris.c: 292: void swap(char* a, char* b);pictris.c: 293: {;pictris.c: 294:     char 
      +                          t = *a;
  2570                           
  2571                           ;incstack = 0
  2572  001FEC  C047  FFD9         	movff	swap@a,fsr2l
  2573  001FF0  C048  FFDA         	movff	swap@a+1,fsr2h
  2574  001FF4  50DF               	movf	indf2,w,c
  2575  001FF6  6E4B               	movwf	swap@t,c
  2576                           
  2577                           ;pictris.c: 295:     *a = *b;
  2578  001FF8  C049  FFD9         	movff	swap@b,fsr2l
  2579  001FFC  C04A  FFDA         	movff	swap@b+1,fsr2h
  2580  002000  C047  FFE1         	movff	swap@a,fsr1l
  2581  002004  C048  FFE2         	movff	swap@a+1,fsr1h
  2582  002008  CFDF FFE7          	movff	indf2,indf1
  2583                           
  2584                           ;pictris.c: 296:     *b = t;
  2585  00200C  C049  FFD9         	movff	swap@b,fsr2l
  2586  002010  C04A  FFDA         	movff	swap@b+1,fsr2h
  2587  002014  C04B  FFDF         	movff	swap@t,indf2
  2588  002018  0012               	return		;funcret
  2589  00201A                     __end_of_swap:
  2590                           	opt stack 0
  2591                           tblptru	equ	0xFF8
  2592                           tblptrh	equ	0xFF7
  2593                           tblptrl	equ	0xFF6
  2594                           tablat	equ	0xFF5
  2595                           prodh	equ	0xFF4
  2596                           prodl	equ	0xFF3
  2597                           intcon	equ	0xFF2
  2598                           postinc0	equ	0xFEE
  2599                           wreg	equ	0xFE8
  2600                           indf1	equ	0xFE7
  2601                           postdec1	equ	0xFE5
  2602                           plusw1	equ	0xFE3
  2603                           fsr1h	equ	0xFE2
  2604                           fsr1l	equ	0xFE1
  2605                           indf2	equ	0xFDF
  2606                           plusw2	equ	0xFDB
  2607                           fsr2h	equ	0xFDA
  2608                           fsr2l	equ	0xFD9
  2609                           status	equ	0xFD8
  2610                           
  2611 ;; *************** function ___awdiv *****************
  2612 ;; Defined at:
  2613 ;;		line 7 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c99\common\awdiv.c"
  2614 ;; Parameters:    Size  Location     Type
  2615 ;;  dividend        2   18[COMRAM] int 
  2616 ;;  divisor         2   20[COMRAM] int 
  2617 ;; Auto vars:     Size  Location     Type
  2618 ;;  quotient        2   24[COMRAM] int 
  2619 ;;  sign            1   23[COMRAM] unsigned char 
  2620 ;;  counter         1   22[COMRAM] unsigned char 
  2621 ;; Return value:  Size  Location     Type
  2622 ;;                  2   18[COMRAM] int 
  2623 ;; Registers used:
  2624 ;;		wreg, status,2, status,0
  2625 ;; Tracked objects:
  2626 ;;		On entry : 0/0
  2627 ;;		On exit  : 0/0
  2628 ;;		Unchanged: 0/0
  2629 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2630 ;;      Params:         4       0       0       0       0       0       0
  2631 ;;      Locals:         4       0       0       0       0       0       0
  2632 ;;      Temps:          0       0       0       0       0       0       0
  2633 ;;      Totals:         8       0       0       0       0       0       0
  2634 ;;Total ram usage:        8 bytes
  2635 ;; Hardware stack levels used:    1
  2636 ;; Hardware stack levels required when called:    2
  2637 ;; This function calls:
  2638 ;;		Nothing
  2639 ;; This function is called by:
  2640 ;;		_itoa
  2641 ;; This function uses a non-reentrant model
  2642 ;;
  2643                           
  2644                           	psect	text13
  2645  001A40                     __ptext13:
  2646                           	opt stack 0
  2647  001A40                     ___awdiv:
  2648                           	opt stack 26
  2649                           
  2650                           ;incstack = 0
  2651  001A40  0E00               	movlw	0
  2652  001A42  6E4C               	movwf	___awdiv@sign,c
  2653  001A44  AE4A               	btfss	___awdiv@divisor+1,7,c
  2654  001A46  D006               	goto	l752
  2655  001A48  6C49               	negf	___awdiv@divisor,c
  2656  001A4A  1E4A               	comf	___awdiv@divisor+1,f,c
  2657  001A4C  B0D8               	btfsc	status,0,c
  2658  001A4E  2A4A               	incf	___awdiv@divisor+1,f,c
  2659  001A50  0E01               	movlw	1
  2660  001A52  6E4C               	movwf	___awdiv@sign,c
  2661  001A54                     l752:
  2662  001A54  AE48               	btfss	___awdiv@dividend+1,7,c
  2663  001A56  D006               	goto	l753
  2664  001A58  6C47               	negf	___awdiv@dividend,c
  2665  001A5A  1E48               	comf	___awdiv@dividend+1,f,c
  2666  001A5C  B0D8               	btfsc	status,0,c
  2667  001A5E  2A48               	incf	___awdiv@dividend+1,f,c
  2668  001A60  0E01               	movlw	1
  2669  001A62  1A4C               	xorwf	___awdiv@sign,f,c
  2670  001A64                     l753:
  2671  001A64  0E00               	movlw	0
  2672  001A66  6E4E               	movwf	___awdiv@quotient+1,c
  2673  001A68  0E00               	movlw	0
  2674  001A6A  6E4D               	movwf	___awdiv@quotient,c
  2675  001A6C  5049               	movf	___awdiv@divisor,w,c
  2676  001A6E  104A               	iorwf	___awdiv@divisor+1,w,c
  2677  001A70  B4D8               	btfsc	status,2,c
  2678  001A72  D01C               	goto	l760
  2679  001A74  0E01               	movlw	1
  2680  001A76  6E4B               	movwf	___awdiv@counter,c
  2681  001A78  D004               	goto	l755
  2682  001A7A  90D8               	bcf	status,0,c
  2683  001A7C  3649               	rlcf	___awdiv@divisor,f,c
  2684  001A7E  364A               	rlcf	___awdiv@divisor+1,f,c
  2685  001A80  2A4B               	incf	___awdiv@counter,f,c
  2686  001A82                     l755:
  2687  001A82  AE4A               	btfss	___awdiv@divisor+1,7,c
  2688  001A84  D7FA               	goto	l756
  2689  001A86                     u4260:
  2690  001A86  90D8               	bcf	status,0,c
  2691  001A88  364D               	rlcf	___awdiv@quotient,f,c
  2692  001A8A  364E               	rlcf	___awdiv@quotient+1,f,c
  2693  001A8C  5049               	movf	___awdiv@divisor,w,c
  2694  001A8E  5C47               	subwf	___awdiv@dividend,w,c
  2695  001A90  504A               	movf	___awdiv@divisor+1,w,c
  2696  001A92  5848               	subwfb	___awdiv@dividend+1,w,c
  2697  001A94  A0D8               	btfss	status,0,c
  2698  001A96  D005               	goto	l759
  2699  001A98  5049               	movf	___awdiv@divisor,w,c
  2700  001A9A  5E47               	subwf	___awdiv@dividend,f,c
  2701  001A9C  504A               	movf	___awdiv@divisor+1,w,c
  2702  001A9E  5A48               	subwfb	___awdiv@dividend+1,f,c
  2703  001AA0  804D               	bsf	___awdiv@quotient,0,c
  2704  001AA2                     l759:
  2705  001AA2  90D8               	bcf	status,0,c
  2706  001AA4  324A               	rrcf	___awdiv@divisor+1,f,c
  2707  001AA6  3249               	rrcf	___awdiv@divisor,f,c
  2708  001AA8  2E4B               	decfsz	___awdiv@counter,f,c
  2709  001AAA  D7ED               	goto	u4260
  2710  001AAC                     l760:
  2711  001AAC  504C               	movf	___awdiv@sign,w,c
  2712  001AAE  B4D8               	btfsc	status,2,c
  2713  001AB0  D004               	goto	l761
  2714  001AB2  6C4D               	negf	___awdiv@quotient,c
  2715  001AB4  1E4E               	comf	___awdiv@quotient+1,f,c
  2716  001AB6  B0D8               	btfsc	status,0,c
  2717  001AB8  2A4E               	incf	___awdiv@quotient+1,f,c
  2718  001ABA                     l761:
  2719  001ABA  C04D  F047         	movff	___awdiv@quotient,?___awdiv
  2720  001ABE  C04E  F048         	movff	___awdiv@quotient+1,?___awdiv+1
  2721  001AC2  0012               	return	
  2722  001AC4                     __end_of___awdiv:
  2723                           	opt stack 0
  2724                           tblptru	equ	0xFF8
  2725                           tblptrh	equ	0xFF7
  2726                           tblptrl	equ	0xFF6
  2727                           tablat	equ	0xFF5
  2728                           prodh	equ	0xFF4
  2729                           prodl	equ	0xFF3
  2730                           intcon	equ	0xFF2
  2731                           postinc0	equ	0xFEE
  2732                           wreg	equ	0xFE8
  2733                           indf1	equ	0xFE7
  2734                           postdec1	equ	0xFE5
  2735                           plusw1	equ	0xFE3
  2736                           fsr1h	equ	0xFE2
  2737                           fsr1l	equ	0xFE1
  2738                           indf2	equ	0xFDF
  2739                           plusw2	equ	0xFDB
  2740                           fsr2h	equ	0xFDA
  2741                           fsr2l	equ	0xFD9
  2742                           status	equ	0xFD8
  2743                           
  2744 ;; *************** function _getNumber *****************
  2745 ;; Defined at:
  2746 ;;		line 1235 in file "pictris.c"
  2747 ;; Parameters:    Size  Location     Type
  2748 ;;  pDigit          1    wreg     unsigned char 
  2749 ;;  pTarget         2   28[COMRAM] PTR unsigned short 
  2750 ;;		 -> tmpObjectData(16), 
  2751 ;; Auto vars:     Size  Location     Type
  2752 ;;  pDigit          1   30[COMRAM] unsigned char 
  2753 ;; Return value:  Size  Location     Type
  2754 ;;                  1    wreg      void 
  2755 ;; Registers used:
  2756 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2757 ;; Tracked objects:
  2758 ;;		On entry : 0/0
  2759 ;;		On exit  : 0/0
  2760 ;;		Unchanged: 0/0
  2761 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2762 ;;      Params:         2       0       0       0       0       0       0
  2763 ;;      Locals:         1       0       0       0       0       0       0
  2764 ;;      Temps:          0       0       0       0       0       0       0
  2765 ;;      Totals:         3       0       0       0       0       0       0
  2766 ;;Total ram usage:        3 bytes
  2767 ;; Hardware stack levels used:    1
  2768 ;; Hardware stack levels required when called:    3
  2769 ;; This function calls:
  2770 ;;		_memcpy
  2771 ;; This function is called by:
  2772 ;;		_show_score
  2773 ;; This function uses a non-reentrant model
  2774 ;;
  2775                           
  2776                           	psect	text14
  2777  002070                     __ptext14:
  2778                           	opt stack 0
  2779  002070                     _getNumber:
  2780                           	opt stack 26
  2781                           
  2782                           ;incstack = 0
  2783                           ;getNumber@pDigit stored from wreg
  2784  002070  6E53               	movwf	getNumber@pDigit,c
  2785                           
  2786                           ;pictris.c: 1235: void getNumber(byte pDigit, uint16_t * pTarget);pictris.c: 1236: {;pic
      +                          tris.c: 1237:     memcpy(pTarget, Number[pDigit], 16);
  2787  002072  C051  F047         	movff	getNumber@pTarget,memcpy@dest
  2788  002076  C052  F048         	movff	getNumber@pTarget+1,memcpy@dest+1
  2789  00207A  5053               	movf	getNumber@pDigit,w,c
  2790  00207C  0D10               	mullw	16
  2791  00207E  0E31               	movlw	low _Number
  2792  002080  24F3               	addwf	prodl,w,c
  2793  002082  6E49               	movwf	memcpy@src,c
  2794  002084  0E06               	movlw	high _Number
  2795  002086  20F4               	addwfc	prodh,w,c
  2796  002088  6E4A               	movwf	memcpy@src+1,c
  2797  00208A  0E00               	movlw	0
  2798  00208C  6E4C               	movwf	memcpy@n+1,c
  2799  00208E  0E10               	movlw	16
  2800  002090  6E4B               	movwf	memcpy@n,c
  2801  002092  ECD3  F00E         	call	_memcpy	;wreg free
  2802  002096  0012               	return		;funcret
  2803  002098                     __end_of_getNumber:
  2804                           	opt stack 0
  2805                           tblptru	equ	0xFF8
  2806                           tblptrh	equ	0xFF7
  2807                           tblptrl	equ	0xFF6
  2808                           tablat	equ	0xFF5
  2809                           prodh	equ	0xFF4
  2810                           prodl	equ	0xFF3
  2811                           intcon	equ	0xFF2
  2812                           postinc0	equ	0xFEE
  2813                           wreg	equ	0xFE8
  2814                           indf1	equ	0xFE7
  2815                           postdec1	equ	0xFE5
  2816                           plusw1	equ	0xFE3
  2817                           fsr1h	equ	0xFE2
  2818                           fsr1l	equ	0xFE1
  2819                           indf2	equ	0xFDF
  2820                           plusw2	equ	0xFDB
  2821                           fsr2h	equ	0xFDA
  2822                           fsr2l	equ	0xFD9
  2823                           status	equ	0xFD8
  2824                           
  2825 ;; *************** function _initialise_globals *****************
  2826 ;; Defined at:
  2827 ;;		line 1108 in file "pictris.c"
  2828 ;; Parameters:    Size  Location     Type
  2829 ;;		None
  2830 ;; Auto vars:     Size  Location     Type
  2831 ;;  i               1   28[COMRAM] unsigned char 
  2832 ;; Return value:  Size  Location     Type
  2833 ;;                  1    wreg      void 
  2834 ;; Registers used:
  2835 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2836 ;; Tracked objects:
  2837 ;;		On entry : 0/0
  2838 ;;		On exit  : 0/0
  2839 ;;		Unchanged: 0/0
  2840 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2841 ;;      Params:         0       0       0       0       0       0       0
  2842 ;;      Locals:         1       0       0       0       0       0       0
  2843 ;;      Temps:          0       0       0       0       0       0       0
  2844 ;;      Totals:         1       0       0       0       0       0       0
  2845 ;;Total ram usage:        1 bytes
  2846 ;; Hardware stack levels used:    1
  2847 ;; Hardware stack levels required when called:    5
  2848 ;; This function calls:
  2849 ;;		_CreateBerry
  2850 ;;		_clearArray
  2851 ;; This function is called by:
  2852 ;;		_mainGameLoop
  2853 ;;		_main
  2854 ;; This function uses a non-reentrant model
  2855 ;;
  2856                           
  2857                           	psect	text15
  2858  0016FE                     __ptext15:
  2859                           	opt stack 0
  2860  0016FE                     _initialise_globals:
  2861                           	opt stack 24
  2862                           
  2863                           ;pictris.c: 1111:     clearArray(ObjectData, 8);
  2864                           
  2865                           ;incstack = 0
  2866  0016FE  0E18               	movlw	low _ObjectData
  2867  001700  6E47               	movwf	clearArray@pArray,c
  2868  001702  0E00               	movlw	high _ObjectData
  2869  001704  6E48               	movwf	clearArray@pArray+1,c
  2870  001706  0E00               	movlw	0
  2871  001708  6E4A               	movwf	clearArray@size+1,c
  2872  00170A  0E08               	movlw	8
  2873  00170C  6E49               	movwf	clearArray@size,c
  2874  00170E  ECDC  F00F         	call	_clearArray	;wreg free
  2875                           
  2876                           ;pictris.c: 1113:     clearArray(BackgroundData, 8);
  2877  001712  0E90               	movlw	low _BackgroundData
  2878  001714  6E47               	movwf	clearArray@pArray,c
  2879  001716  0E00               	movlw	high _BackgroundData
  2880  001718  6E48               	movwf	clearArray@pArray+1,c
  2881  00171A  0E00               	movlw	0
  2882  00171C  6E4A               	movwf	clearArray@size+1,c
  2883  00171E  0E08               	movlw	8
  2884  001720  6E49               	movwf	clearArray@size,c
  2885  001722  ECDC  F00F         	call	_clearArray	;wreg free
  2886                           
  2887                           ;pictris.c: 1117:     OriginX = 0;
  2888  001726  0E00               	movlw	0
  2889  001728  6E0F               	movwf	_OriginX,c
  2890                           
  2891                           ;pictris.c: 1118:     OriginY = 0;
  2892  00172A  0E00               	movlw	0
  2893  00172C  6E0E               	movwf	_OriginY,c
  2894                           
  2895                           ;pictris.c: 1120:     NumberOfLines = 0;
  2896  00172E  0E00               	movlw	0
  2897  001730  6E15               	movwf	_NumberOfLines,c
  2898                           
  2899                           ;pictris.c: 1122:     DropObject = 0;
  2900  001732  0E00               	movlw	0
  2901  001734  6E10               	movwf	_DropObject,c	;volatile
  2902                           
  2903                           ;pictris.c: 1123:     EndOfGame = 0;
  2904  001736  0E00               	movlw	0
  2905  001738  6E12               	movwf	_EndOfGame,c
  2906                           
  2907                           ;pictris.c: 1124:     CheckForNewLines = 0;
  2908  00173A  0E00               	movlw	0
  2909  00173C  6E11               	movwf	_CheckForNewLines,c
  2910                           
  2911                           ;pictris.c: 1126:     mS = 0;
  2912  00173E  0E00               	movlw	0
  2913  001740  6E04               	movwf	_mS+1,c	;volatile
  2914  001742  0E00               	movlw	0
  2915  001744  6E03               	movwf	_mS,c	;volatile
  2916                           
  2917                           ;pictris.c: 1134:     mtxButtons = 1;
  2918  001746  0E01               	movlw	1
  2919  001748  6E17               	movwf	_mtxButtons,c	;volatile
  2920                           
  2921                           ;pictris.c: 1136:     Left_Delay = -1;
  2922  00174A  682E               	setf	_Left_Delay,c	;volatile
  2923  00174C  682F               	setf	_Left_Delay+1,c	;volatile
  2924                           
  2925                           ;pictris.c: 1137:     Left_Debounced = 0;
  2926  00174E  0E00               	movlw	0
  2927  001750  6E34               	movwf	_Left_Debounced,c	;volatile
  2928                           
  2929                           ;pictris.c: 1140:     Right_Delay = -1;
  2930  001752  682C               	setf	_Right_Delay,c	;volatile
  2931  001754  682D               	setf	_Right_Delay+1,c	;volatile
  2932                           
  2933                           ;pictris.c: 1141:     Right_Debounced = 0;
  2934  001756  0E00               	movlw	0
  2935  001758  6E33               	movwf	_Right_Debounced,c	;volatile
  2936                           
  2937                           ;pictris.c: 1144:     Rotate_Delay = -1;
  2938  00175A  682A               	setf	_Rotate_Delay,c	;volatile
  2939  00175C  682B               	setf	_Rotate_Delay+1,c	;volatile
  2940                           
  2941                           ;pictris.c: 1145:     Rotate_Debounced = 0;
  2942  00175E  0E00               	movlw	0
  2943  001760  6E32               	movwf	_Rotate_Debounced,c	;volatile
  2944                           
  2945                           ;pictris.c: 1148:     Down_Delay = -1;
  2946  001762  6828               	setf	_Down_Delay,c	;volatile
  2947  001764  6829               	setf	_Down_Delay+1,c	;volatile
  2948                           
  2949                           ;pictris.c: 1149:     Down_Debounced = 0;
  2950  001766  0E00               	movlw	0
  2951  001768  6E31               	movwf	_Down_Debounced,c	;volatile
  2952                           
  2953                           ;pictris.c: 1152:     moveSnake = 0;
  2954  00176A  0E00               	movlw	0
  2955  00176C  6E0C               	movwf	_moveSnake,c
  2956                           
  2957                           ;pictris.c: 1154:     snakeLength = 3;
  2958  00176E  0E03               	movlw	3
  2959  001770  6E0B               	movwf	_snakeLength,c
  2960                           
  2961                           ;pictris.c: 1155:     previous_direction = 3;
  2962  001772  0E03               	movlw	3
  2963  001774  6E08               	movwf	_previous_direction,c
  2964                           
  2965                           ;pictris.c: 1156:     uint8_t i;;pictris.c: 1157:     for (i=0;i<4;i++){
  2966  001776  0E00               	movlw	0
  2967  001778  6E51               	movwf	initialise_globals@i,c
  2968  00177A                     l4470:
  2969  00177A  0E03               	movlw	3
  2970  00177C  6451               	cpfsgt	initialise_globals@i,c
  2971  00177E  D001               	goto	l411
  2972  001780  D01C               	goto	u4920
  2973  001782                     l411:
  2974                           
  2975                           ;pictris.c: 1158:         positions[i].y = 3;
  2976  001782  5051               	movf	initialise_globals@i,w,c
  2977  001784  0D02               	mullw	2
  2978  001786  0E01               	movlw	1
  2979  001788  26F3               	addwf	prodl,f,c
  2980  00178A  0E00               	movlw	0
  2981  00178C  22F4               	addwfc	prodh,f,c
  2982  00178E  0E00               	movlw	low _positions
  2983  001790  24F3               	addwf	prodl,w,c
  2984  001792  6ED9               	movwf	fsr2l,c
  2985  001794  0E01               	movlw	high _positions
  2986  001796  20F4               	addwfc	prodh,w,c
  2987  001798  6EDA               	movwf	fsr2h,c
  2988  00179A  0E03               	movlw	3
  2989  00179C  6EDF               	movwf	indf2,c
  2990                           
  2991                           ;pictris.c: 1159:         positions[i].x = 4-i;
  2992  00179E  5051               	movf	initialise_globals@i,w,c
  2993  0017A0  0D02               	mullw	2
  2994  0017A2  0E00               	movlw	low _positions
  2995  0017A4  24F3               	addwf	prodl,w,c
  2996  0017A6  6ED9               	movwf	fsr2l,c
  2997  0017A8  0E01               	movlw	high _positions
  2998  0017AA  20F4               	addwfc	prodh,w,c
  2999  0017AC  6EDA               	movwf	fsr2h,c
  3000  0017AE  5051               	movf	initialise_globals@i,w,c
  3001  0017B0  0800               	sublw	0
  3002  0017B2  0F04               	addlw	4
  3003  0017B4  6EDF               	movwf	indf2,c
  3004                           
  3005                           ;pictris.c: 1160:     }
  3006  0017B6  2A51               	incf	initialise_globals@i,f,c
  3007  0017B8  D7E0               	goto	l4470
  3008  0017BA                     u4920:
  3009                           
  3010                           ;pictris.c: 1161:     positions[0].y = 3;
  3011  0017BA  0E03               	movlw	3
  3012  0017BC  0101               	movlb	1	; () banked
  3013  0017BE  6F01               	movwf	(_positions+1)& (0+255),b
  3014                           
  3015                           ;pictris.c: 1162:     positions[0].x = 3;
  3016  0017C0  0E03               	movlw	3
  3017  0017C2  6F00               	movwf	_positions& (0+255),b
  3018                           
  3019                           ;pictris.c: 1163:     direction = 1;
  3020  0017C4  0E01               	movlw	1
  3021  0017C6  6E0D               	movwf	_direction,c
  3022                           
  3023                           ; BSR set to: 1
  3024                           ;pictris.c: 1164:     CreateBerry();
  3025  0017C8  EC11  F00E         	call	_CreateBerry	;wreg free
  3026  0017CC  0012               	return		;funcret
  3027  0017CE                     __end_of_initialise_globals:
  3028                           	opt stack 0
  3029                           tblptru	equ	0xFF8
  3030                           tblptrh	equ	0xFF7
  3031                           tblptrl	equ	0xFF6
  3032                           tablat	equ	0xFF5
  3033                           prodh	equ	0xFF4
  3034                           prodl	equ	0xFF3
  3035                           intcon	equ	0xFF2
  3036                           postinc0	equ	0xFEE
  3037                           wreg	equ	0xFE8
  3038                           indf1	equ	0xFE7
  3039                           postdec1	equ	0xFE5
  3040                           plusw1	equ	0xFE3
  3041                           fsr1h	equ	0xFE2
  3042                           fsr1l	equ	0xFE1
  3043                           indf2	equ	0xFDF
  3044                           plusw2	equ	0xFDB
  3045                           fsr2h	equ	0xFDA
  3046                           fsr2l	equ	0xFD9
  3047                           status	equ	0xFD8
  3048                           
  3049 ;; *************** function _checkForLines *****************
  3050 ;; Defined at:
  3051 ;;		line 1048 in file "pictris.c"
  3052 ;; Parameters:    Size  Location     Type
  3053 ;;  pObject         2   35[COMRAM] PTR volatile unsigned sh
  3054 ;;		 -> BackgroundData(16), 
  3055 ;; Auto vars:     Size  Location     Type
  3056 ;;  y               1   44[COMRAM] unsigned char 
  3057 ;;  x               1   43[COMRAM] unsigned char 
  3058 ;;  pixels          1   42[COMRAM] unsigned char 
  3059 ;; Return value:  Size  Location     Type
  3060 ;;                  1    wreg      void 
  3061 ;; Registers used:
  3062 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3063 ;; Tracked objects:
  3064 ;;		On entry : 0/0
  3065 ;;		On exit  : 0/0
  3066 ;;		Unchanged: 0/0
  3067 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3068 ;;      Params:         2       0       0       0       0       0       0
  3069 ;;      Locals:         3       0       0       0       0       0       0
  3070 ;;      Temps:          5       0       0       0       0       0       0
  3071 ;;      Totals:        10       0       0       0       0       0       0
  3072 ;;Total ram usage:       10 bytes
  3073 ;; Hardware stack levels used:    1
  3074 ;; Hardware stack levels required when called:    3
  3075 ;; This function calls:
  3076 ;;		_removeLine
  3077 ;; This function is called by:
  3078 ;;		_mainGameLoop
  3079 ;; This function uses a non-reentrant model
  3080 ;;
  3081                           
  3082                           	psect	text16
  3083  001AC4                     __ptext16:
  3084                           	opt stack 0
  3085  001AC4                     _checkForLines:
  3086                           	opt stack 26
  3087                           
  3088                           ;pictris.c: 1048: void checkForLines(volatile uint16_t * pObject);pictris.c: 1049: {;pic
      +                          tris.c: 1050:     byte x, y, pixels;;pictris.c: 1052:     for (y = 0; y < 16; y++)
  3089                           
  3090                           ;incstack = 0
  3091  001AC4  0E00               	movlw	0
  3092  001AC6  6E61               	movwf	checkForLines@y,c
  3093  001AC8                     l3352:
  3094  001AC8  0E0F               	movlw	15
  3095  001ACA  6461               	cpfsgt	checkForLines@y,c
  3096  001ACC  D001               	goto	l396
  3097  001ACE  0012               	return	
  3098  001AD0                     l396:
  3099                           
  3100                           ;pictris.c: 1053:     {;pictris.c: 1054:         pixels = 0;
  3101  001AD0  0E00               	movlw	0
  3102  001AD2  6E5F               	movwf	checkForLines@pixels,c
  3103                           
  3104                           ;pictris.c: 1055:         for (x = 0; x < 8; x++)
  3105  001AD4  0E00               	movlw	0
  3106  001AD6  6E60               	movwf	checkForLines@x,c
  3107  001AD8                     l3358:
  3108  001AD8  0E07               	movlw	7
  3109  001ADA  6460               	cpfsgt	checkForLines@x,c
  3110  001ADC  D001               	goto	l398
  3111  001ADE  D023               	goto	u3340
  3112  001AE0                     l398:
  3113                           
  3114                           ;pictris.c: 1056:             if (pObject[x] & (1<<y))
  3115  001AE0  5060               	movf	checkForLines@x,w,c
  3116  001AE2  0D02               	mullw	2
  3117  001AE4  50F3               	movf	prodl,w,c
  3118  001AE6  2458               	addwf	checkForLines@pObject,w,c
  3119  001AE8  6ED9               	movwf	fsr2l,c
  3120  001AEA  50F4               	movf	prodh,w,c
  3121  001AEC  2059               	addwfc	checkForLines@pObject+1,w,c
  3122  001AEE  6EDA               	movwf	fsr2h,c
  3123  001AF0  CFDE F05A          	movff	postinc2,??_checkForLines
  3124  001AF4  CFDD F05B          	movff	postdec2,??_checkForLines+1
  3125  001AF8  C061  F05C         	movff	checkForLines@y,??_checkForLines+2
  3126  001AFC  0E01               	movlw	1
  3127  001AFE  6E5D               	movwf	(??_checkForLines+3)& (0+255),c
  3128  001B00  0E00               	movlw	0
  3129  001B02  6E5E               	movwf	(??_checkForLines+4)& (0+255),c
  3130  001B04  2A5C               	incf	??_checkForLines+2,f,c
  3131  001B06  D003               	goto	u3324
  3132  001B08                     u3325:
  3133  001B08  90D8               	bcf	status,0,c
  3134  001B0A  365D               	rlcf	??_checkForLines+3,f,c
  3135  001B0C  365E               	rlcf	??_checkForLines+4,f,c
  3136  001B0E                     u3324:
  3137  001B0E  2E5C               	decfsz	??_checkForLines+2,f,c
  3138  001B10  D7FB               	goto	u3325
  3139  001B12  505A               	movf	??_checkForLines,w,c
  3140  001B14  165D               	andwf	??_checkForLines+3,f,c
  3141  001B16  505B               	movf	??_checkForLines+1,w,c
  3142  001B18  165E               	andwf	??_checkForLines+4,f,c
  3143  001B1A  505D               	movf	??_checkForLines+3,w,c
  3144  001B1C  105E               	iorwf	??_checkForLines+4,w,c
  3145  001B1E  A4D8               	btfss	status,2,c
  3146                           
  3147                           ;pictris.c: 1057:                 pixels++;
  3148  001B20  2A5F               	incf	checkForLines@pixels,f,c
  3149  001B22  2A60               	incf	checkForLines@x,f,c
  3150  001B24  D7D9               	goto	l3358
  3151  001B26                     u3340:
  3152                           
  3153                           ;pictris.c: 1058:         if (pixels == 8)
  3154  001B26  0E08               	movlw	8
  3155  001B28  185F               	xorwf	checkForLines@pixels,w,c
  3156  001B2A  A4D8               	btfss	status,2,c
  3157  001B2C  D009               	goto	l401
  3158                           
  3159                           ;pictris.c: 1059:         {;pictris.c: 1060:             removeLine(pObject, y);
  3160  001B2E  C058  F047         	movff	checkForLines@pObject,removeLine@pObject
  3161  001B32  C059  F048         	movff	checkForLines@pObject+1,removeLine@pObject+1
  3162  001B36  C061  F049         	movff	checkForLines@y,removeLine@pY
  3163  001B3A  EC2B  F00A         	call	_removeLine	;wreg free
  3164                           
  3165                           ;pictris.c: 1061:             NumberOfLines++;
  3166  001B3E  2A15               	incf	_NumberOfLines,f,c
  3167  001B40                     l401:
  3168                           
  3169                           ;pictris.c: 1063:     }
  3170  001B40  2A61               	incf	checkForLines@y,f,c
  3171  001B42  D7C2               	goto	l3352
  3172  001B44                     __end_of_checkForLines:
  3173                           	opt stack 0
  3174                           tblptru	equ	0xFF8
  3175                           tblptrh	equ	0xFF7
  3176                           tblptrl	equ	0xFF6
  3177                           tablat	equ	0xFF5
  3178                           prodh	equ	0xFF4
  3179                           prodl	equ	0xFF3
  3180                           intcon	equ	0xFF2
  3181                           postinc0	equ	0xFEE
  3182                           wreg	equ	0xFE8
  3183                           indf1	equ	0xFE7
  3184                           postdec1	equ	0xFE5
  3185                           plusw1	equ	0xFE3
  3186                           fsr1h	equ	0xFE2
  3187                           fsr1l	equ	0xFE1
  3188                           indf2	equ	0xFDF
  3189                           postinc2	equ	0xFDE
  3190                           postdec2	equ	0xFDD
  3191                           plusw2	equ	0xFDB
  3192                           fsr2h	equ	0xFDA
  3193                           fsr2l	equ	0xFD9
  3194                           status	equ	0xFD8
  3195                           
  3196 ;; *************** function _removeLine *****************
  3197 ;; Defined at:
  3198 ;;		line 1030 in file "pictris.c"
  3199 ;; Parameters:    Size  Location     Type
  3200 ;;  pObject         2   18[COMRAM] PTR volatile unsigned sh
  3201 ;;		 -> BackgroundData(16), 
  3202 ;;  pY              1   20[COMRAM] unsigned char 
  3203 ;; Auto vars:     Size  Location     Type
  3204 ;;  x               1   34[COMRAM] unsigned char 
  3205 ;;  y               1   33[COMRAM] unsigned char 
  3206 ;;  currentLine     1   32[COMRAM] unsigned char 
  3207 ;; Return value:  Size  Location     Type
  3208 ;;                  1    wreg      void 
  3209 ;; Registers used:
  3210 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  3211 ;; Tracked objects:
  3212 ;;		On entry : 0/0
  3213 ;;		On exit  : 0/0
  3214 ;;		Unchanged: 0/0
  3215 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3216 ;;      Params:         3       0       0       0       0       0       0
  3217 ;;      Locals:         3       0       0       0       0       0       0
  3218 ;;      Temps:         11       0       0       0       0       0       0
  3219 ;;      Totals:        17       0       0       0       0       0       0
  3220 ;;Total ram usage:       17 bytes
  3221 ;; Hardware stack levels used:    1
  3222 ;; Hardware stack levels required when called:    2
  3223 ;; This function calls:
  3224 ;;		Nothing
  3225 ;; This function is called by:
  3226 ;;		_checkForLines
  3227 ;; This function uses a non-reentrant model
  3228 ;;
  3229                           
  3230                           	psect	text17
  3231  001456                     __ptext17:
  3232                           	opt stack 0
  3233  001456                     _removeLine:
  3234                           	opt stack 26
  3235                           
  3236                           ;pictris.c: 1030: void removeLine(volatile uint16_t * pObject, byte pY);pictris.c: 1031:
      +                           {;pictris.c: 1032:     byte x, y, currentLine;;pictris.c: 1035:     for (y = pY-1; y < 
      +                          pY; y--)
  3237                           
  3238                           ;incstack = 0
  3239  001456  0449               	decf	removeLine@pY,w,c
  3240  001458  6E56               	movwf	removeLine@y,c
  3241  00145A  D05E               	goto	l386
  3242  00145C                     
  3243                           ;pictris.c: 1036:     {;pictris.c: 1037:         currentLine = y + 1;
  3244  00145C  2856               	incf	removeLine@y,w,c
  3245  00145E  6E55               	movwf	removeLine@currentLine,c
  3246                           
  3247                           ;pictris.c: 1038:         for (x = 0; x < 8; x++)
  3248  001460  0E00               	movlw	0
  3249  001462  6E57               	movwf	removeLine@x,c
  3250  001464                     l3122:
  3251  001464  0E07               	movlw	7
  3252  001466  6457               	cpfsgt	removeLine@x,c
  3253  001468  D001               	goto	l388
  3254  00146A  D055               	goto	u2910
  3255  00146C                     l388:
  3256                           
  3257                           ;pictris.c: 1039:             pObject[x] = (pObject[x] & ~(1<<currentLine)) | ((((pObjec
      +                          t[x] >> y) & 1)&1)<<currentLine);
  3258  00146C  C055  F04A         	movff	removeLine@currentLine,??_removeLine
  3259  001470  C056  F04B         	movff	removeLine@y,??_removeLine+1
  3260  001474  5057               	movf	removeLine@x,w,c
  3261  001476  0D02               	mullw	2
  3262  001478  50F3               	movf	prodl,w,c
  3263  00147A  2447               	addwf	removeLine@pObject,w,c
  3264  00147C  6ED9               	movwf	fsr2l,c
  3265  00147E  50F4               	movf	prodh,w,c
  3266  001480  2048               	addwfc	removeLine@pObject+1,w,c
  3267  001482  6EDA               	movwf	fsr2h,c
  3268  001484  CFDE F04C          	movff	postinc2,??_removeLine+2
  3269  001488  CFDD F04D          	movff	postdec2,??_removeLine+3
  3270  00148C  2A4B               	incf	??_removeLine+1,f,c
  3271  00148E  D003               	goto	u2884
  3272  001490                     u2885:
  3273  001490  90D8               	bcf	status,0,c
  3274  001492  324D               	rrcf	??_removeLine+3,f,c
  3275  001494  324C               	rrcf	??_removeLine+2,f,c
  3276  001496                     u2884:
  3277  001496  2E4B               	decfsz	??_removeLine+1,f,c
  3278  001498  D7FB               	goto	u2885
  3279  00149A  0E01               	movlw	1
  3280  00149C  164C               	andwf	??_removeLine+2,f,c
  3281  00149E  0E00               	movlw	0
  3282  0014A0  164D               	andwf	??_removeLine+3,f,c
  3283  0014A2  2A4A               	incf	??_removeLine,f,c
  3284  0014A4  D003               	goto	u2894
  3285  0014A6                     u2895:
  3286  0014A6  90D8               	bcf	status,0,c
  3287  0014A8  364C               	rlcf	??_removeLine+2,f,c
  3288  0014AA  364D               	rlcf	??_removeLine+3,f,c
  3289  0014AC                     u2894:
  3290  0014AC  2E4A               	decfsz	??_removeLine,f,c
  3291  0014AE  D7FB               	goto	u2895
  3292  0014B0  5057               	movf	removeLine@x,w,c
  3293  0014B2  0D02               	mullw	2
  3294  0014B4  50F3               	movf	prodl,w,c
  3295  0014B6  2447               	addwf	removeLine@pObject,w,c
  3296  0014B8  6ED9               	movwf	fsr2l,c
  3297  0014BA  50F4               	movf	prodh,w,c
  3298  0014BC  2048               	addwfc	removeLine@pObject+1,w,c
  3299  0014BE  6EDA               	movwf	fsr2h,c
  3300  0014C0  CFDE F04E          	movff	postinc2,??_removeLine+4
  3301  0014C4  CFDD F04F          	movff	postdec2,??_removeLine+5
  3302  0014C8  C055  F050         	movff	removeLine@currentLine,??_removeLine+6
  3303  0014CC  0E01               	movlw	1
  3304  0014CE  6E51               	movwf	(??_removeLine+7)& (0+255),c
  3305  0014D0  0E00               	movlw	0
  3306  0014D2  6E52               	movwf	(??_removeLine+8)& (0+255),c
  3307  0014D4  2A50               	incf	??_removeLine+6,f,c
  3308  0014D6  D003               	goto	u2904
  3309  0014D8                     u2905:
  3310  0014D8  90D8               	bcf	status,0,c
  3311  0014DA  3651               	rlcf	??_removeLine+7,f,c
  3312  0014DC  3652               	rlcf	??_removeLine+8,f,c
  3313  0014DE                     u2904:
  3314  0014DE  2E50               	decfsz	??_removeLine+6,f,c
  3315  0014E0  D7FB               	goto	u2905
  3316  0014E2  1C51               	comf	??_removeLine+7,w,c
  3317  0014E4  6E53               	movwf	(??_removeLine+9)& (0+255),c
  3318  0014E6  1C52               	comf	??_removeLine+8,w,c
  3319  0014E8  6E54               	movwf	(??_removeLine+10)& (0+255),c
  3320  0014EA  504E               	movf	??_removeLine+4,w,c
  3321  0014EC  1653               	andwf	??_removeLine+9,f,c
  3322  0014EE  504F               	movf	??_removeLine+5,w,c
  3323  0014F0  1654               	andwf	??_removeLine+10,f,c
  3324  0014F2  504C               	movf	??_removeLine+2,w,c
  3325  0014F4  1253               	iorwf	??_removeLine+9,f,c
  3326  0014F6  504D               	movf	??_removeLine+3,w,c
  3327  0014F8  1254               	iorwf	??_removeLine+10,f,c
  3328  0014FA  5057               	movf	removeLine@x,w,c
  3329  0014FC  0D02               	mullw	2
  3330  0014FE  50F3               	movf	prodl,w,c
  3331  001500  2447               	addwf	removeLine@pObject,w,c
  3332  001502  6ED9               	movwf	fsr2l,c
  3333  001504  50F4               	movf	prodh,w,c
  3334  001506  2048               	addwfc	removeLine@pObject+1,w,c
  3335  001508  6EDA               	movwf	fsr2h,c
  3336  00150A  C053  FFDE         	movff	??_removeLine+9,postinc2
  3337  00150E  C054  FFDD         	movff	??_removeLine+10,postdec2
  3338  001512  2A57               	incf	removeLine@x,f,c
  3339  001514  D7A7               	goto	l3122
  3340  001516                     u2910:
  3341                           
  3342                           ;pictris.c: 1041:     }
  3343  001516  0656               	decf	removeLine@y,f,c
  3344  001518                     l386:
  3345  001518  5049               	movf	removeLine@pY,w,c
  3346  00151A  5C56               	subwf	removeLine@y,w,c
  3347  00151C  A0D8               	btfss	status,0,c
  3348  00151E  D79E               	goto	l387
  3349                           
  3350                           ;pictris.c: 1043:     for (x = 0; x < 8; x++)
  3351  001520  0E00               	movlw	0
  3352  001522  6E57               	movwf	removeLine@x,c
  3353  001524                     l3138:
  3354  001524  0E07               	movlw	7
  3355  001526  6457               	cpfsgt	removeLine@x,c
  3356  001528  D001               	goto	l391
  3357  00152A  0012               	return	
  3358  00152C                     l391:
  3359                           
  3360                           ;pictris.c: 1044:         pObject[x] &= ~(1<<0);
  3361  00152C  5057               	movf	removeLine@x,w,c
  3362  00152E  0D02               	mullw	2
  3363  001530  50F3               	movf	prodl,w,c
  3364  001532  2447               	addwf	removeLine@pObject,w,c
  3365  001534  6ED9               	movwf	fsr2l,c
  3366  001536  50F4               	movf	prodh,w,c
  3367  001538  2048               	addwfc	removeLine@pObject+1,w,c
  3368  00153A  6EDA               	movwf	fsr2h,c
  3369  00153C  0EFE               	movlw	254
  3370  00153E  16DE               	andwf	postinc2,f,c
  3371  001540  0EFF               	movlw	255
  3372  001542  16DD               	andwf	postdec2,f,c
  3373  001544  2A57               	incf	removeLine@x,f,c
  3374  001546  D7EE               	goto	l3138
  3375  001548                     __end_of_removeLine:
  3376                           	opt stack 0
  3377                           tblptru	equ	0xFF8
  3378                           tblptrh	equ	0xFF7
  3379                           tblptrl	equ	0xFF6
  3380                           tablat	equ	0xFF5
  3381                           prodh	equ	0xFF4
  3382                           prodl	equ	0xFF3
  3383                           intcon	equ	0xFF2
  3384                           postinc0	equ	0xFEE
  3385                           wreg	equ	0xFE8
  3386                           indf1	equ	0xFE7
  3387                           postdec1	equ	0xFE5
  3388                           plusw1	equ	0xFE3
  3389                           fsr1h	equ	0xFE2
  3390                           fsr1l	equ	0xFE1
  3391                           indf2	equ	0xFDF
  3392                           postinc2	equ	0xFDE
  3393                           postdec2	equ	0xFDD
  3394                           plusw2	equ	0xFDB
  3395                           fsr2h	equ	0xFDA
  3396                           fsr2l	equ	0xFD9
  3397                           status	equ	0xFD8
  3398                           
  3399 ;; *************** function _checkButtons *****************
  3400 ;; Defined at:
  3401 ;;		line 904 in file "pictris.c"
  3402 ;; Parameters:    Size  Location     Type
  3403 ;;		None
  3404 ;; Auto vars:     Size  Location     Type
  3405 ;;		None
  3406 ;; Return value:  Size  Location     Type
  3407 ;;                  1    wreg      void 
  3408 ;; Registers used:
  3409 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3410 ;; Tracked objects:
  3411 ;;		On entry : 0/0
  3412 ;;		On exit  : 0/0
  3413 ;;		Unchanged: 0/0
  3414 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3415 ;;      Params:         0       0       0       0       0       0       0
  3416 ;;      Locals:         0       0       0       0       0       0       0
  3417 ;;      Temps:          1       0       0       0       0       0       0
  3418 ;;      Totals:         1       0       0       0       0       0       0
  3419 ;;Total ram usage:        1 bytes
  3420 ;; Hardware stack levels used:    1
  3421 ;; Hardware stack levels required when called:    5
  3422 ;; This function calls:
  3423 ;;		_checkForLeftWall
  3424 ;;		_checkForRightWall
  3425 ;;		_collisionDetect
  3426 ;;		_memcpy
  3427 ;;		_mergeObjects
  3428 ;;		_moveObject
  3429 ;;		_moveObjectDown
  3430 ;;		_newRotation
  3431 ;;		_pauseButtons
  3432 ;;		_pauseMultiplexing
  3433 ;;		_pixelCount
  3434 ;;		_resumeButtons
  3435 ;;		_resumeMultiplexing
  3436 ;; This function is called by:
  3437 ;;		_mainGameLoop
  3438 ;; This function uses a non-reentrant model
  3439 ;;
  3440                           
  3441                           	psect	text18
  3442  0006F2                     __ptext18:
  3443                           	opt stack 0
  3444  0006F2                     _checkButtons:
  3445                           	opt stack 24
  3446                           
  3447                           ;pictris.c: 907:     if (Left_Debounced)
  3448                           
  3449                           ;incstack = 0
  3450  0006F2  5034               	movf	_Left_Debounced,w,c	;volatile
  3451  0006F4  B4D8               	btfsc	status,2,c
  3452  0006F6  D053               	goto	l363
  3453                           
  3454                           ;pictris.c: 908:     {;pictris.c: 909:     pauseButtons();
  3455  0006F8  ECD8  F010         	call	_pauseButtons	;wreg free
  3456                           
  3457                           ;pictris.c: 910:         Left_Debounced = 0;
  3458  0006FC  0E00               	movlw	0
  3459  0006FE  6E34               	movwf	_Left_Debounced,c	;volatile
  3460                           
  3461                           ;pictris.c: 911:         Left_Delay = 500;
  3462  000700  0E01               	movlw	1
  3463  000702  6E2F               	movwf	_Left_Delay+1,c	;volatile
  3464  000704  0EF4               	movlw	244
  3465  000706  6E2E               	movwf	_Left_Delay,c	;volatile
  3466                           
  3467                           ;pictris.c: 912:     resumeButtons();
  3468  000708  ECD5  F010         	call	_resumeButtons	;wreg free
  3469                           
  3470                           ;pictris.c: 915:     if (tetris == 1){
  3471  00070C  0407               	decf	_tetris,w,c
  3472  00070E  A4D8               	btfss	status,2,c
  3473  000710  D041               	goto	l359
  3474                           
  3475                           ;pictris.c: 916:         if (!checkForLeftWall(ObjectData))
  3476  000712  0E18               	movlw	low _ObjectData
  3477  000714  6E47               	movwf	checkForLeftWall@pObject,c
  3478  000716  0E00               	movlw	high _ObjectData
  3479  000718  6E48               	movwf	checkForLeftWall@pObject+1,c
  3480  00071A  EC8F  F010         	call	_checkForLeftWall	;wreg free
  3481  00071E  0900               	iorlw	0
  3482  000720  A4D8               	btfss	status,2,c
  3483  000722  D03D               	goto	l363
  3484                           
  3485                           ;pictris.c: 917:         {;pictris.c: 920:             memcpy(tmpObjectData, ObjectData,
      +                           16);
  3486  000724  0E80               	movlw	low _tmpObjectData
  3487  000726  6E47               	movwf	memcpy@dest,c
  3488  000728  0E00               	movlw	high _tmpObjectData
  3489  00072A  6E48               	movwf	memcpy@dest+1,c
  3490  00072C  0E18               	movlw	low _ObjectData
  3491  00072E  6E49               	movwf	memcpy@src,c
  3492  000730  0E00               	movlw	high _ObjectData
  3493  000732  6E4A               	movwf	memcpy@src+1,c
  3494  000734  0E00               	movlw	0
  3495  000736  6E4C               	movwf	memcpy@n+1,c
  3496  000738  0E10               	movlw	16
  3497  00073A  6E4B               	movwf	memcpy@n,c
  3498  00073C  ECD3  F00E         	call	_memcpy	;wreg free
  3499                           
  3500                           ;pictris.c: 922:             moveObject(tmpObjectData, LEFT, 1);
  3501  000740  0E80               	movlw	low _tmpObjectData
  3502  000742  6E47               	movwf	moveObject@pObject,c
  3503  000744  0E00               	movlw	high _tmpObjectData
  3504  000746  6E48               	movwf	moveObject@pObject+1,c
  3505  000748  0E02               	movlw	2
  3506  00074A  6E49               	movwf	moveObject@direction,c
  3507  00074C  0E01               	movlw	1
  3508  00074E  6E4A               	movwf	moveObject@cycles,c
  3509  000750  EC50  F006         	call	_moveObject	;wreg free
  3510                           
  3511                           ;pictris.c: 924:             if (!collisionDetect(tmpObjectData, BackgroundData))
  3512  000754  0E80               	movlw	low _tmpObjectData
  3513  000756  6E47               	movwf	collisionDetect@pSource,c
  3514  000758  0E00               	movlw	high _tmpObjectData
  3515  00075A  6E48               	movwf	collisionDetect@pSource+1,c
  3516  00075C  0E90               	movlw	low _BackgroundData
  3517  00075E  6E49               	movwf	collisionDetect@pTarget,c
  3518  000760  0E00               	movlw	high _BackgroundData
  3519  000762  6E4A               	movwf	collisionDetect@pTarget+1,c
  3520  000764  EC7C  F00E         	call	_collisionDetect	;wreg free
  3521  000768  0900               	iorlw	0
  3522  00076A  A4D8               	btfss	status,2,c
  3523  00076C  D018               	goto	l363
  3524                           
  3525                           ;pictris.c: 925:             {;pictris.c: 928:                 pauseMultiplexing();
  3526  00076E  ECC0  F010         	call	_pauseMultiplexing	;wreg free
  3527                           
  3528                           ;pictris.c: 931:                 mergeObjects(tmpObjectData, ObjectData, OVERRIDE);
  3529  000772  0E80               	movlw	low _tmpObjectData
  3530  000774  6E47               	movwf	mergeObjects@pSource,c
  3531  000776  0E00               	movlw	high _tmpObjectData
  3532  000778  6E48               	movwf	mergeObjects@pSource+1,c
  3533  00077A  0E18               	movlw	low _ObjectData
  3534  00077C  6E49               	movwf	mergeObjects@pTarget,c
  3535  00077E  0E00               	movlw	high _ObjectData
  3536  000780  6E4A               	movwf	mergeObjects@pTarget+1,c
  3537  000782  0E00               	movlw	0
  3538  000784  6E4B               	movwf	mergeObjects@mode,c
  3539  000786  ECA4  F00A         	call	_mergeObjects	;wreg free
  3540                           
  3541                           ;pictris.c: 934:                 resumeMultiplexing();
  3542  00078A  ECD2  F010         	call	_resumeMultiplexing	;wreg free
  3543                           
  3544                           ;pictris.c: 937:                 CheckForNewLines = 1;
  3545  00078E  0E01               	movlw	1
  3546  000790  6E11               	movwf	_CheckForNewLines,c
  3547                           
  3548                           ;pictris.c: 940:     }
  3549                           
  3550                           ;pictris.c: 939:         }
  3551                           
  3552                           ;pictris.c: 938:             }
  3553  000792  D005               	goto	l363
  3554  000794                     l359:
  3555  000794  0408               	decf	_previous_direction,w,c
  3556  000796  B4D8               	btfsc	status,2,c
  3557  000798  D002               	goto	l363
  3558  00079A  0E03               	movlw	3
  3559  00079C  6E0D               	movwf	_direction,c
  3560  00079E                     l363:
  3561                           
  3562                           ;pictris.c: 947:     if (Right_Debounced)
  3563                           
  3564                           ;pictris.c: 944:     }
  3565  00079E  5033               	movf	_Right_Debounced,w,c	;volatile
  3566  0007A0  B4D8               	btfsc	status,2,c
  3567  0007A2  D052               	goto	l369
  3568                           
  3569                           ;pictris.c: 948:     {;pictris.c: 949:     pauseButtons();
  3570  0007A4  ECD8  F010         	call	_pauseButtons	;wreg free
  3571                           
  3572                           ;pictris.c: 950:         Right_Debounced = 0;
  3573  0007A8  0E00               	movlw	0
  3574  0007AA  6E33               	movwf	_Right_Debounced,c	;volatile
  3575                           
  3576                           ;pictris.c: 951:         Right_Delay = 500;
  3577  0007AC  0E01               	movlw	1
  3578  0007AE  6E2D               	movwf	_Right_Delay+1,c	;volatile
  3579  0007B0  0EF4               	movlw	244
  3580  0007B2  6E2C               	movwf	_Right_Delay,c	;volatile
  3581                           
  3582                           ;pictris.c: 952:     resumeButtons();
  3583  0007B4  ECD5  F010         	call	_resumeButtons	;wreg free
  3584                           
  3585                           ;pictris.c: 955:     if (tetris == 1) {
  3586  0007B8  0407               	decf	_tetris,w,c
  3587  0007BA  A4D8               	btfss	status,2,c
  3588  0007BC  D03F               	goto	l365
  3589                           
  3590                           ;pictris.c: 956:         if (!checkForRightWall(ObjectData))
  3591  0007BE  0E18               	movlw	low _ObjectData
  3592  0007C0  6E47               	movwf	checkForRightWall@pObject,c
  3593  0007C2  0E00               	movlw	high _ObjectData
  3594  0007C4  6E48               	movwf	checkForRightWall@pObject+1,c
  3595  0007C6  EC81  F010         	call	_checkForRightWall	;wreg free
  3596  0007CA  0900               	iorlw	0
  3597  0007CC  A4D8               	btfss	status,2,c
  3598  0007CE  D03C               	goto	l369
  3599                           
  3600                           ;pictris.c: 957:         {;pictris.c: 958:             mergeObjects(ObjectData, tmpObjec
      +                          tData, OVERRIDE);
  3601  0007D0  0E18               	movlw	low _ObjectData
  3602  0007D2  6E47               	movwf	mergeObjects@pSource,c
  3603  0007D4  0E00               	movlw	high _ObjectData
  3604  0007D6  6E48               	movwf	mergeObjects@pSource+1,c
  3605  0007D8  0E80               	movlw	low _tmpObjectData
  3606  0007DA  6E49               	movwf	mergeObjects@pTarget,c
  3607  0007DC  0E00               	movlw	high _tmpObjectData
  3608  0007DE  6E4A               	movwf	mergeObjects@pTarget+1,c
  3609  0007E0  0E00               	movlw	0
  3610  0007E2  6E4B               	movwf	mergeObjects@mode,c
  3611  0007E4  ECA4  F00A         	call	_mergeObjects	;wreg free
  3612                           
  3613                           ;pictris.c: 959:             moveObject(tmpObjectData, RIGHT, 1);
  3614  0007E8  0E80               	movlw	low _tmpObjectData
  3615  0007EA  6E47               	movwf	moveObject@pObject,c
  3616  0007EC  0E00               	movlw	high _tmpObjectData
  3617  0007EE  6E48               	movwf	moveObject@pObject+1,c
  3618  0007F0  0E03               	movlw	3
  3619  0007F2  6E49               	movwf	moveObject@direction,c
  3620  0007F4  0E01               	movlw	1
  3621  0007F6  6E4A               	movwf	moveObject@cycles,c
  3622  0007F8  EC50  F006         	call	_moveObject	;wreg free
  3623                           
  3624                           ;pictris.c: 961:             if (!collisionDetect(tmpObjectData, BackgroundData))
  3625  0007FC  0E80               	movlw	low _tmpObjectData
  3626  0007FE  6E47               	movwf	collisionDetect@pSource,c
  3627  000800  0E00               	movlw	high _tmpObjectData
  3628  000802  6E48               	movwf	collisionDetect@pSource+1,c
  3629  000804  0E90               	movlw	low _BackgroundData
  3630  000806  6E49               	movwf	collisionDetect@pTarget,c
  3631  000808  0E00               	movlw	high _BackgroundData
  3632  00080A  6E4A               	movwf	collisionDetect@pTarget+1,c
  3633  00080C  EC7C  F00E         	call	_collisionDetect	;wreg free
  3634  000810  0900               	iorlw	0
  3635  000812  A4D8               	btfss	status,2,c
  3636  000814  D019               	goto	l369
  3637                           
  3638                           ;pictris.c: 962:             {;pictris.c: 964:                 pauseMultiplexing();
  3639  000816  ECC0  F010         	call	_pauseMultiplexing	;wreg free
  3640                           
  3641                           ;pictris.c: 966:                 mergeObjects(tmpObjectData, ObjectData, OVERRIDE);
  3642  00081A  0E80               	movlw	low _tmpObjectData
  3643  00081C  6E47               	movwf	mergeObjects@pSource,c
  3644  00081E  0E00               	movlw	high _tmpObjectData
  3645  000820  6E48               	movwf	mergeObjects@pSource+1,c
  3646  000822  0E18               	movlw	low _ObjectData
  3647  000824  6E49               	movwf	mergeObjects@pTarget,c
  3648  000826  0E00               	movlw	high _ObjectData
  3649  000828  6E4A               	movwf	mergeObjects@pTarget+1,c
  3650  00082A  0E00               	movlw	0
  3651  00082C  6E4B               	movwf	mergeObjects@mode,c
  3652  00082E  ECA4  F00A         	call	_mergeObjects	;wreg free
  3653                           
  3654                           ;pictris.c: 968:                 resumeMultiplexing();
  3655  000832  ECD2  F010         	call	_resumeMultiplexing	;wreg free
  3656                           
  3657                           ;pictris.c: 970:                 CheckForNewLines = 1;
  3658  000836  0E01               	movlw	1
  3659  000838  6E11               	movwf	_CheckForNewLines,c
  3660                           
  3661                           ;pictris.c: 973:     }
  3662                           
  3663                           ;pictris.c: 972:         }
  3664                           
  3665                           ;pictris.c: 971:             }
  3666  00083A  D006               	goto	l369
  3667  00083C                     l365:
  3668  00083C  0E03               	movlw	3
  3669  00083E  1808               	xorwf	_previous_direction,w,c
  3670  000840  B4D8               	btfsc	status,2,c
  3671  000842  D002               	goto	l369
  3672  000844  0E01               	movlw	1
  3673  000846  6E0D               	movwf	_direction,c
  3674  000848                     l369:
  3675                           
  3676                           ;pictris.c: 979:     if (Rotate_Debounced)
  3677                           
  3678                           ;pictris.c: 977:     }
  3679  000848  5032               	movf	_Rotate_Debounced,w,c	;volatile
  3680  00084A  B4D8               	btfsc	status,2,c
  3681  00084C  D054               	goto	l375
  3682                           
  3683                           ;pictris.c: 980:     {;pictris.c: 981:     pauseButtons();
  3684  00084E  ECD8  F010         	call	_pauseButtons	;wreg free
  3685                           
  3686                           ;pictris.c: 982:         Rotate_Debounced = 0;
  3687  000852  0E00               	movlw	0
  3688  000854  6E32               	movwf	_Rotate_Debounced,c	;volatile
  3689                           
  3690                           ;pictris.c: 983:         Rotate_Delay = 500;
  3691  000856  0E01               	movlw	1
  3692  000858  6E2B               	movwf	_Rotate_Delay+1,c	;volatile
  3693  00085A  0EF4               	movlw	244
  3694  00085C  6E2A               	movwf	_Rotate_Delay,c	;volatile
  3695                           
  3696                           ;pictris.c: 984:     resumeButtons();
  3697  00085E  ECD5  F010         	call	_resumeButtons	;wreg free
  3698                           
  3699                           ;pictris.c: 986:     if (tetris == 1 ){
  3700  000862  0407               	decf	_tetris,w,c
  3701  000864  A4D8               	btfss	status,2,c
  3702  000866  D041               	goto	l371
  3703                           
  3704                           ;pictris.c: 987:         newRotation(ObjectData, tmpObjectData, CW);
  3705  000868  0E18               	movlw	low _ObjectData
  3706  00086A  6E53               	movwf	newRotation@pSource,c
  3707  00086C  0E00               	movlw	high _ObjectData
  3708  00086E  6E54               	movwf	newRotation@pSource+1,c
  3709  000870  0E80               	movlw	low _tmpObjectData
  3710  000872  6E55               	movwf	newRotation@pTarget,c
  3711  000874  0E00               	movlw	high _tmpObjectData
  3712  000876  6E56               	movwf	newRotation@pTarget+1,c
  3713  000878  0E01               	movlw	1
  3714  00087A  6E57               	movwf	newRotation@rotation,c
  3715  00087C  EC0B  F009         	call	_newRotation	;wreg free
  3716                           
  3717                           ;pictris.c: 989:         if (pixelCount(ObjectData) == pixelCount(tmpObjectData))
  3718  000880  0E18               	movlw	low _ObjectData
  3719  000882  6E47               	movwf	pixelCount@pSource,c
  3720  000884  0E00               	movlw	high _ObjectData
  3721  000886  6E48               	movwf	pixelCount@pSource+1,c
  3722  000888  EC47  F00E         	call	_pixelCount	;wreg free
  3723  00088C  6E61               	movwf	??_checkButtons& (0+255),c
  3724  00088E  0E80               	movlw	low _tmpObjectData
  3725  000890  6E47               	movwf	pixelCount@pSource,c
  3726  000892  0E00               	movlw	high _tmpObjectData
  3727  000894  6E48               	movwf	pixelCount@pSource+1,c
  3728  000896  EC47  F00E         	call	_pixelCount	;wreg free
  3729  00089A  1861               	xorwf	??_checkButtons,w,c
  3730  00089C  A4D8               	btfss	status,2,c
  3731  00089E  D02B               	goto	l375
  3732                           
  3733                           ;pictris.c: 990:         {;pictris.c: 992:             if (!collisionDetect(tmpObjectDat
      +                          a, BackgroundData))
  3734  0008A0  0E80               	movlw	low _tmpObjectData
  3735  0008A2  6E47               	movwf	collisionDetect@pSource,c
  3736  0008A4  0E00               	movlw	high _tmpObjectData
  3737  0008A6  6E48               	movwf	collisionDetect@pSource+1,c
  3738  0008A8  0E90               	movlw	low _BackgroundData
  3739  0008AA  6E49               	movwf	collisionDetect@pTarget,c
  3740  0008AC  0E00               	movlw	high _BackgroundData
  3741  0008AE  6E4A               	movwf	collisionDetect@pTarget+1,c
  3742  0008B0  EC7C  F00E         	call	_collisionDetect	;wreg free
  3743  0008B4  0900               	iorlw	0
  3744  0008B6  A4D8               	btfss	status,2,c
  3745  0008B8  D01E               	goto	l375
  3746                           
  3747                           ;pictris.c: 993:             {;pictris.c: 997:                 pauseMultiplexing();
  3748  0008BA  ECC0  F010         	call	_pauseMultiplexing	;wreg free
  3749                           
  3750                           ;pictris.c: 1000:                 mergeObjects(tmpObjectData, ObjectData, OVERRIDE);
  3751  0008BE  0E80               	movlw	low _tmpObjectData
  3752  0008C0  6E47               	movwf	mergeObjects@pSource,c
  3753  0008C2  0E00               	movlw	high _tmpObjectData
  3754  0008C4  6E48               	movwf	mergeObjects@pSource+1,c
  3755  0008C6  0E18               	movlw	low _ObjectData
  3756  0008C8  6E49               	movwf	mergeObjects@pTarget,c
  3757  0008CA  0E00               	movlw	high _ObjectData
  3758  0008CC  6E4A               	movwf	mergeObjects@pTarget+1,c
  3759  0008CE  0E00               	movlw	0
  3760  0008D0  6E4B               	movwf	mergeObjects@mode,c
  3761  0008D2  ECA4  F00A         	call	_mergeObjects	;wreg free
  3762                           
  3763                           ;pictris.c: 1002:                 resumeMultiplexing();
  3764  0008D6  ECD2  F010         	call	_resumeMultiplexing	;wreg free
  3765                           
  3766                           ;pictris.c: 1004:                 IsRotated = !IsRotated;
  3767  0008DA  5013               	movf	_IsRotated,w,c
  3768  0008DC  A4D8               	btfss	status,2,c
  3769  0008DE  D002               	goto	u4840
  3770  0008E0  0E01               	movlw	1
  3771  0008E2  D001               	goto	u4850
  3772  0008E4                     u4840:
  3773  0008E4  0E00               	movlw	0
  3774  0008E6                     u4850:
  3775  0008E6  6E13               	movwf	_IsRotated,c
  3776                           
  3777                           ;pictris.c: 1007:     }
  3778                           
  3779                           ;pictris.c: 1006:         }
  3780                           
  3781                           ;pictris.c: 1005:             }
  3782  0008E8  D006               	goto	l375
  3783  0008EA                     l371:
  3784  0008EA  0E02               	movlw	2
  3785  0008EC  1808               	xorwf	_previous_direction,w,c
  3786  0008EE  B4D8               	btfsc	status,2,c
  3787  0008F0  D002               	goto	l375
  3788  0008F2  0E00               	movlw	0
  3789  0008F4  6E0D               	movwf	_direction,c
  3790  0008F6                     l375:
  3791                           
  3792                           ;pictris.c: 1013:     if (Down_Debounced)
  3793                           
  3794                           ;pictris.c: 1011:     }
  3795  0008F6  5031               	movf	_Down_Debounced,w,c	;volatile
  3796  0008F8  B4D8               	btfsc	status,2,c
  3797  0008FA  0012               	return	
  3798                           
  3799                           ;pictris.c: 1014:     {;pictris.c: 1016:         if (tetris == 1) {
  3800  0008FC  0407               	decf	_tetris,w,c
  3801  0008FE  A4D8               	btfss	status,2,c
  3802  000900  D00A               	goto	l377
  3803  000902                     u4880:
  3804                           
  3805                           ;pictris.c: 1017:         while (moveObjectDown(ObjectData))
  3806                           
  3807                           ;pictris.c: 1018:             continue; }
  3808                           
  3809                           ;pictris.c: 1017:         while (moveObjectDown(ObjectData))
  3810  000902  0E18               	movlw	low _ObjectData
  3811  000904  6E5A               	movwf	moveObjectDown@pObject,c
  3812  000906  0E00               	movlw	high _ObjectData
  3813  000908  6E5B               	movwf	moveObjectDown@pObject+1,c
  3814  00090A  EC13  F00B         	call	_moveObjectDown	;wreg free
  3815  00090E  0900               	iorlw	0
  3816  000910  B4D8               	btfsc	status,2,c
  3817  000912  D006               	goto	l382
  3818  000914  D7F6               	goto	u4880
  3819  000916                     l377:
  3820  000916  5008               	movf	_previous_direction,w,c
  3821  000918  B4D8               	btfsc	status,2,c
  3822  00091A  D002               	goto	l382
  3823  00091C  0E02               	movlw	2
  3824  00091E  6E0D               	movwf	_direction,c
  3825  000920                     l382:
  3826                           
  3827                           ;pictris.c: 1022:     pauseButtons();
  3828  000920  ECD8  F010         	call	_pauseButtons	;wreg free
  3829                           
  3830                           ;pictris.c: 1023:         Down_Debounced = 0;
  3831  000924  0E00               	movlw	0
  3832  000926  6E31               	movwf	_Down_Debounced,c	;volatile
  3833                           
  3834                           ;pictris.c: 1024:         Down_Delay = 0x7fff;
  3835  000928  0E7F               	movlw	127
  3836  00092A  6E29               	movwf	_Down_Delay+1,c	;volatile
  3837  00092C  6828               	setf	_Down_Delay,c	;volatile
  3838                           
  3839                           ;pictris.c: 1025:     resumeButtons();
  3840  00092E  ECD5  F010         	call	_resumeButtons	;wreg free
  3841  000932  0012               	return	
  3842  000934                     __end_of_checkButtons:
  3843                           	opt stack 0
  3844                           tblptru	equ	0xFF8
  3845                           tblptrh	equ	0xFF7
  3846                           tblptrl	equ	0xFF6
  3847                           tablat	equ	0xFF5
  3848                           prodh	equ	0xFF4
  3849                           prodl	equ	0xFF3
  3850                           intcon	equ	0xFF2
  3851                           postinc0	equ	0xFEE
  3852                           wreg	equ	0xFE8
  3853                           indf1	equ	0xFE7
  3854                           postdec1	equ	0xFE5
  3855                           plusw1	equ	0xFE3
  3856                           fsr1h	equ	0xFE2
  3857                           fsr1l	equ	0xFE1
  3858                           indf2	equ	0xFDF
  3859                           postinc2	equ	0xFDE
  3860                           postdec2	equ	0xFDD
  3861                           plusw2	equ	0xFDB
  3862                           fsr2h	equ	0xFDA
  3863                           fsr2l	equ	0xFD9
  3864                           status	equ	0xFD8
  3865                           
  3866 ;; *************** function _pixelCount *****************
  3867 ;; Defined at:
  3868 ;;		line 840 in file "pictris.c"
  3869 ;; Parameters:    Size  Location     Type
  3870 ;;  pSource         2   18[COMRAM] PTR volatile unsigned sh
  3871 ;;		 -> tmpObjectData(16), ObjectData(16), 
  3872 ;; Auto vars:     Size  Location     Type
  3873 ;;  y               1   27[COMRAM] unsigned char 
  3874 ;;  x               1   26[COMRAM] unsigned char 
  3875 ;;  r               1   25[COMRAM] unsigned char 
  3876 ;; Return value:  Size  Location     Type
  3877 ;;                  1    wreg      unsigned char 
  3878 ;; Registers used:
  3879 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  3880 ;; Tracked objects:
  3881 ;;		On entry : 0/0
  3882 ;;		On exit  : 0/0
  3883 ;;		Unchanged: 0/0
  3884 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3885 ;;      Params:         2       0       0       0       0       0       0
  3886 ;;      Locals:         3       0       0       0       0       0       0
  3887 ;;      Temps:          5       0       0       0       0       0       0
  3888 ;;      Totals:        10       0       0       0       0       0       0
  3889 ;;Total ram usage:       10 bytes
  3890 ;; Hardware stack levels used:    1
  3891 ;; Hardware stack levels required when called:    2
  3892 ;; This function calls:
  3893 ;;		Nothing
  3894 ;; This function is called by:
  3895 ;;		_checkButtons
  3896 ;; This function uses a non-reentrant model
  3897 ;;
  3898                           
  3899                           	psect	text19
  3900  001C8E                     __ptext19:
  3901                           	opt stack 0
  3902  001C8E                     _pixelCount:
  3903                           	opt stack 26
  3904                           
  3905                           ;pictris.c: 840: byte pixelCount(volatile uint16_t * pSource);pictris.c: 841: {;pictris.
      +                          c: 842:     byte r = 0, x, y;
  3906                           
  3907                           ;incstack = 0
  3908  001C8E  0E00               	movlw	0
  3909  001C90  6E4E               	movwf	pixelCount@r,c
  3910                           
  3911                           ;pictris.c: 844:     for (x = 0; x < 8; x++)
  3912  001C92  0E00               	movlw	0
  3913  001C94  6E4F               	movwf	pixelCount@x,c
  3914  001C96                     l3054:
  3915  001C96  0E07               	movlw	7
  3916  001C98  644F               	cpfsgt	pixelCount@x,c
  3917  001C9A  D001               	goto	l344
  3918  001C9C  D02B               	goto	u2840
  3919  001C9E                     l344:
  3920                           
  3921                           ;pictris.c: 845:         for (y = 0; y < 16; y++)
  3922  001C9E  0E00               	movlw	0
  3923  001CA0  6E50               	movwf	pixelCount@y,c
  3924  001CA2                     l3060:
  3925  001CA2  0E0F               	movlw	15
  3926  001CA4  6450               	cpfsgt	pixelCount@y,c
  3927  001CA6  D001               	goto	l346
  3928  001CA8  D023               	goto	u2830
  3929  001CAA                     l346:
  3930                           
  3931                           ;pictris.c: 846:             if (pSource[x] & (1<<y))
  3932  001CAA  504F               	movf	pixelCount@x,w,c
  3933  001CAC  0D02               	mullw	2
  3934  001CAE  50F3               	movf	prodl,w,c
  3935  001CB0  2447               	addwf	pixelCount@pSource,w,c
  3936  001CB2  6ED9               	movwf	fsr2l,c
  3937  001CB4  50F4               	movf	prodh,w,c
  3938  001CB6  2048               	addwfc	pixelCount@pSource+1,w,c
  3939  001CB8  6EDA               	movwf	fsr2h,c
  3940  001CBA  CFDE F049          	movff	postinc2,??_pixelCount
  3941  001CBE  CFDD F04A          	movff	postdec2,??_pixelCount+1
  3942  001CC2  C050  F04B         	movff	pixelCount@y,??_pixelCount+2
  3943  001CC6  0E01               	movlw	1
  3944  001CC8  6E4C               	movwf	(??_pixelCount+3)& (0+255),c
  3945  001CCA  0E00               	movlw	0
  3946  001CCC  6E4D               	movwf	(??_pixelCount+4)& (0+255),c
  3947  001CCE  2A4B               	incf	??_pixelCount+2,f,c
  3948  001CD0  D003               	goto	u2814
  3949  001CD2                     u2815:
  3950  001CD2  90D8               	bcf	status,0,c
  3951  001CD4  364C               	rlcf	??_pixelCount+3,f,c
  3952  001CD6  364D               	rlcf	??_pixelCount+4,f,c
  3953  001CD8                     u2814:
  3954  001CD8  2E4B               	decfsz	??_pixelCount+2,f,c
  3955  001CDA  D7FB               	goto	u2815
  3956  001CDC  5049               	movf	??_pixelCount,w,c
  3957  001CDE  164C               	andwf	??_pixelCount+3,f,c
  3958  001CE0  504A               	movf	??_pixelCount+1,w,c
  3959  001CE2  164D               	andwf	??_pixelCount+4,f,c
  3960  001CE4  504C               	movf	??_pixelCount+3,w,c
  3961  001CE6  104D               	iorwf	??_pixelCount+4,w,c
  3962  001CE8  A4D8               	btfss	status,2,c
  3963                           
  3964                           ;pictris.c: 847:                 r++;
  3965  001CEA  2A4E               	incf	pixelCount@r,f,c
  3966  001CEC  2A50               	incf	pixelCount@y,f,c
  3967  001CEE  D7D9               	goto	l3060
  3968  001CF0                     u2830:
  3969  001CF0  2A4F               	incf	pixelCount@x,f,c
  3970  001CF2  D7D1               	goto	l3054
  3971  001CF4                     u2840:
  3972                           
  3973                           ;pictris.c: 848:     return r;
  3974  001CF4  504E               	movf	pixelCount@r,w,c
  3975  001CF6  0012               	return	
  3976  001CF8                     __end_of_pixelCount:
  3977                           	opt stack 0
  3978                           tblptru	equ	0xFF8
  3979                           tblptrh	equ	0xFF7
  3980                           tblptrl	equ	0xFF6
  3981                           tablat	equ	0xFF5
  3982                           prodh	equ	0xFF4
  3983                           prodl	equ	0xFF3
  3984                           intcon	equ	0xFF2
  3985                           postinc0	equ	0xFEE
  3986                           wreg	equ	0xFE8
  3987                           indf1	equ	0xFE7
  3988                           postdec1	equ	0xFE5
  3989                           plusw1	equ	0xFE3
  3990                           fsr1h	equ	0xFE2
  3991                           fsr1l	equ	0xFE1
  3992                           indf2	equ	0xFDF
  3993                           postinc2	equ	0xFDE
  3994                           postdec2	equ	0xFDD
  3995                           plusw2	equ	0xFDB
  3996                           fsr2h	equ	0xFDA
  3997                           fsr2l	equ	0xFD9
  3998                           status	equ	0xFD8
  3999                           
  4000 ;; *************** function _newRotation *****************
  4001 ;; Defined at:
  4002 ;;		line 796 in file "pictris.c"
  4003 ;; Parameters:    Size  Location     Type
  4004 ;;  pSource         2   30[COMRAM] PTR volatile unsigned sh
  4005 ;;		 -> ObjectData(16), 
  4006 ;;  pTarget         2   32[COMRAM] PTR unsigned short 
  4007 ;;		 -> tmpObjectData(16), 
  4008 ;;  rotation        1   34[COMRAM] enum E2756
  4009 ;; Auto vars:     Size  Location     Type
  4010 ;;  y1              1   43[COMRAM] unsigned char 
  4011 ;;  x1              1   42[COMRAM] unsigned char 
  4012 ;;  y2              1   41[COMRAM] char 
  4013 ;;  x2              1   40[COMRAM] char 
  4014 ;; Return value:  Size  Location     Type
  4015 ;;                  1    wreg      void 
  4016 ;; Registers used:
  4017 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4018 ;; Tracked objects:
  4019 ;;		On entry : 0/0
  4020 ;;		On exit  : 0/0
  4021 ;;		Unchanged: 0/0
  4022 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4023 ;;      Params:         5       0       0       0       0       0       0
  4024 ;;      Locals:         4       0       0       0       0       0       0
  4025 ;;      Temps:          5       0       0       0       0       0       0
  4026 ;;      Totals:        14       0       0       0       0       0       0
  4027 ;;Total ram usage:       14 bytes
  4028 ;; Hardware stack levels used:    1
  4029 ;; Hardware stack levels required when called:    3
  4030 ;; This function calls:
  4031 ;;		___wmul
  4032 ;;		_clearArray
  4033 ;;		_memcpy
  4034 ;; This function is called by:
  4035 ;;		_checkButtons
  4036 ;; This function uses a non-reentrant model
  4037 ;;
  4038                           
  4039                           	psect	text20
  4040  001216                     __ptext20:
  4041                           	opt stack 0
  4042  001216                     _newRotation:
  4043                           	opt stack 25
  4044                           
  4045                           ;pictris.c: 796: void newRotation(volatile uint16_t * pSource, uint16_t * pTarget, rotat
      +                          ion_t rotation);pictris.c: 797: {;pictris.c: 798:     int8_t x2, y2;;pictris.c: 799:    
      +                           byte x1, y1;;pictris.c: 802:     if (LimitedRotation == 2)
  4046                           
  4047                           ;incstack = 0
  4048  001216  0E02               	movlw	2
  4049  001218  1816               	xorwf	_LimitedRotation,w,c
  4050  00121A  A4D8               	btfss	status,2,c
  4051  00121C  D00F               	goto	l330
  4052                           
  4053                           ;pictris.c: 803:         memcpy(pTarget, pSource, 16);
  4054  00121E  C055  F047         	movff	newRotation@pTarget,memcpy@dest
  4055  001222  C056  F048         	movff	newRotation@pTarget+1,memcpy@dest+1
  4056  001226  C053  F049         	movff	newRotation@pSource,memcpy@src
  4057  00122A  C054  F04A         	movff	newRotation@pSource+1,memcpy@src+1
  4058  00122E  0E00               	movlw	0
  4059  001230  6E4C               	movwf	memcpy@n+1,c
  4060  001232  0E10               	movlw	16
  4061  001234  6E4B               	movwf	memcpy@n,c
  4062  001236  ECD3  F00E         	call	_memcpy	;wreg free
  4063  00123A  0012               	return	
  4064  00123C                     l330:
  4065                           
  4066                           ;pictris.c: 805:     {;pictris.c: 807:         clearArray(pTarget, 8);
  4067  00123C  C055  F047         	movff	newRotation@pTarget,clearArray@pArray
  4068  001240  C056  F048         	movff	newRotation@pTarget+1,clearArray@pArray+1
  4069  001244  0E00               	movlw	0
  4070  001246  6E4A               	movwf	clearArray@size+1,c
  4071  001248  0E08               	movlw	8
  4072  00124A  6E49               	movwf	clearArray@size,c
  4073  00124C  ECDC  F00F         	call	_clearArray	;wreg free
  4074                           
  4075                           ;pictris.c: 812:         if (LimitedRotation == 1 && IsRotated)
  4076  001250  0416               	decf	_LimitedRotation,w,c
  4077  001252  A4D8               	btfss	status,2,c
  4078  001254  D005               	goto	l332
  4079  001256  5013               	movf	_IsRotated,w,c
  4080  001258  B4D8               	btfsc	status,2,c
  4081  00125A  D002               	goto	l332
  4082                           
  4083                           ;pictris.c: 813:             rotation = CCW;
  4084  00125C  0E00               	movlw	0
  4085  00125E  6E57               	movwf	newRotation@rotation,c
  4086  001260                     l332:
  4087                           
  4088                           ;pictris.c: 815:         for (x1 = 0; x1 < 8; x1++)
  4089  001260  0E00               	movlw	0
  4090  001262  6E5F               	movwf	newRotation@x1,c
  4091  001264                     l4178:
  4092  001264  0E07               	movlw	7
  4093  001266  645F               	cpfsgt	newRotation@x1,c
  4094  001268  D001               	goto	l333
  4095  00126A  0012               	return	
  4096  00126C                     l333:
  4097                           
  4098                           ;pictris.c: 816:             for (y1 = 0; y1 < 16; y1++)
  4099  00126C  0E00               	movlw	0
  4100  00126E  6E60               	movwf	newRotation@y1,c
  4101  001270                     l4184:
  4102  001270  0E0F               	movlw	15
  4103  001272  6460               	cpfsgt	newRotation@y1,c
  4104  001274  D001               	goto	l335
  4105  001276  D068               	goto	u4540
  4106  001278                     l335:
  4107                           
  4108                           ;pictris.c: 817:             {;pictris.c: 818:                 if (pSource[x1] & (1<<y1)
      +                          )
  4109  001278  505F               	movf	newRotation@x1,w,c
  4110  00127A  0D02               	mullw	2
  4111  00127C  50F3               	movf	prodl,w,c
  4112  00127E  2453               	addwf	newRotation@pSource,w,c
  4113  001280  6ED9               	movwf	fsr2l,c
  4114  001282  50F4               	movf	prodh,w,c
  4115  001284  2054               	addwfc	newRotation@pSource+1,w,c
  4116  001286  6EDA               	movwf	fsr2h,c
  4117  001288  CFDE F058          	movff	postinc2,??_newRotation
  4118  00128C  CFDD F059          	movff	postdec2,??_newRotation+1
  4119  001290  C060  F05A         	movff	newRotation@y1,??_newRotation+2
  4120  001294  0E01               	movlw	1
  4121  001296  6E5B               	movwf	(??_newRotation+3)& (0+255),c
  4122  001298  0E00               	movlw	0
  4123  00129A  6E5C               	movwf	(??_newRotation+4)& (0+255),c
  4124  00129C  2A5A               	incf	??_newRotation+2,f,c
  4125  00129E  D003               	goto	u4464
  4126  0012A0                     u4465:
  4127  0012A0  90D8               	bcf	status,0,c
  4128  0012A2  365B               	rlcf	??_newRotation+3,f,c
  4129  0012A4  365C               	rlcf	??_newRotation+4,f,c
  4130  0012A6                     u4464:
  4131  0012A6  2E5A               	decfsz	??_newRotation+2,f,c
  4132  0012A8  D7FB               	goto	u4465
  4133  0012AA  5058               	movf	??_newRotation,w,c
  4134  0012AC  165B               	andwf	??_newRotation+3,f,c
  4135  0012AE  5059               	movf	??_newRotation+1,w,c
  4136  0012B0  165C               	andwf	??_newRotation+4,f,c
  4137  0012B2  505B               	movf	??_newRotation+3,w,c
  4138  0012B4  105C               	iorwf	??_newRotation+4,w,c
  4139  0012B6  B4D8               	btfsc	status,2,c
  4140  0012B8  D045               	goto	l340
  4141                           
  4142                           ;pictris.c: 819:                 {;pictris.c: 820:                     if (rotation == C
      +                          W)
  4143  0012BA  0457               	decf	newRotation@rotation,w,c
  4144  0012BC  A4D8               	btfss	status,2,c
  4145  0012BE  D009               	goto	l338
  4146                           
  4147                           ;pictris.c: 821:                     {;pictris.c: 822:                         x2 = Orig
      +                          inX + OriginY - y1;
  4148  0012C0  5060               	movf	newRotation@y1,w,c
  4149  0012C2  0800               	sublw	0
  4150  0012C4  240F               	addwf	_OriginX,w,c
  4151  0012C6  240E               	addwf	_OriginY,w,c
  4152  0012C8  6E5D               	movwf	newRotation@x2,c
  4153                           
  4154                           ;pictris.c: 823:                         y2 = x1 + OriginY - OriginX;
  4155  0012CA  500F               	movf	_OriginX,w,c
  4156  0012CC  0800               	sublw	0
  4157  0012CE  245F               	addwf	newRotation@x1,w,c
  4158  0012D0  D008               	goto	L2
  4159  0012D2                     l338:
  4160                           
  4161                           ;pictris.c: 826:                     {;pictris.c: 827:                         x2 = y1 +
      +                           OriginX - OriginY;
  4162  0012D2  500E               	movf	_OriginY,w,c
  4163  0012D4  0800               	sublw	0
  4164  0012D6  2460               	addwf	newRotation@y1,w,c
  4165  0012D8  240F               	addwf	_OriginX,w,c
  4166  0012DA  6E5D               	movwf	newRotation@x2,c
  4167                           
  4168                           ;pictris.c: 828:                         y2 = OriginX + OriginY - x1;
  4169  0012DC  505F               	movf	newRotation@x1,w,c
  4170  0012DE  0800               	sublw	0
  4171  0012E0  240F               	addwf	_OriginX,w,c
  4172  0012E2                     L2:
  4173  0012E2  240E               	addwf	_OriginY,w,c
  4174  0012E4  6E5E               	movwf	newRotation@y2,c
  4175                           
  4176                           ;pictris.c: 830:                     if (x2 >= 0 && x2 < 8 &&
  4177                           
  4178                           ;pictris.c: 829:                     }
  4179  0012E6  BE5D               	btfsc	newRotation@x2,7,c
  4180  0012E8  D02D               	goto	l340
  4181  0012EA  505D               	movf	newRotation@x2,w,c
  4182  0012EC  0A80               	xorlw	128
  4183  0012EE  0F78               	addlw	-136
  4184  0012F0  A0D8               	btfss	status,0,c
  4185  0012F2  BE5E               	btfsc	newRotation@y2,7,c
  4186  0012F4  D027               	goto	l340
  4187  0012F6  505E               	movf	newRotation@y2,w,c
  4188  0012F8  0A80               	xorlw	128
  4189  0012FA  0F70               	addlw	-144
  4190  0012FC  B0D8               	btfsc	status,0,c
  4191  0012FE  D022               	goto	l340
  4192                           
  4193                           ;pictris.c: 832:                         pTarget[x2] |= (1<<y2);
  4194  001300  C05E  F058         	movff	newRotation@y2,??_newRotation
  4195  001304  0E01               	movlw	1
  4196  001306  6E59               	movwf	(??_newRotation+1)& (0+255),c
  4197  001308  0E00               	movlw	0
  4198  00130A  6E5A               	movwf	(??_newRotation+2)& (0+255),c
  4199  00130C  2A58               	incf	??_newRotation,f,c
  4200  00130E  D003               	goto	u4534
  4201  001310                     u4535:
  4202  001310  90D8               	bcf	status,0,c
  4203  001312  3659               	rlcf	??_newRotation+1,f,c
  4204  001314  365A               	rlcf	??_newRotation+2,f,c
  4205  001316                     u4534:
  4206  001316  2E58               	decfsz	??_newRotation,f,c
  4207  001318  D7FB               	goto	u4535
  4208  00131A  505D               	movf	newRotation@x2,w,c
  4209  00131C  6E4D               	movwf	___wmul@multiplier,c
  4210  00131E  6A4E               	clrf	___wmul@multiplier+1,c
  4211  001320  BE4D               	btfsc	___wmul@multiplier,7,c
  4212  001322  064E               	decf	___wmul@multiplier+1,f,c
  4213  001324  0E00               	movlw	0
  4214  001326  6E50               	movwf	___wmul@multiplicand+1,c
  4215  001328  0E02               	movlw	2
  4216  00132A  6E4F               	movwf	___wmul@multiplicand,c
  4217  00132C  EC5F  F010         	call	___wmul	;wreg free
  4218  001330  504D               	movf	?___wmul,w,c
  4219  001332  2455               	addwf	newRotation@pTarget,w,c
  4220  001334  6ED9               	movwf	fsr2l,c
  4221  001336  504E               	movf	?___wmul+1,w,c
  4222  001338  2056               	addwfc	newRotation@pTarget+1,w,c
  4223  00133A  6EDA               	movwf	fsr2h,c
  4224  00133C  5059               	movf	??_newRotation+1,w,c
  4225  00133E  12DE               	iorwf	postinc2,f,c
  4226  001340  505A               	movf	??_newRotation+2,w,c
  4227  001342  12DD               	iorwf	postdec2,f,c
  4228  001344                     l340:
  4229                           
  4230                           ;pictris.c: 834:             }
  4231                           
  4232                           ;pictris.c: 833:                 }
  4233  001344  2A60               	incf	newRotation@y1,f,c
  4234  001346  D794               	goto	l4184
  4235  001348                     u4540:
  4236  001348  2A5F               	incf	newRotation@x1,f,c
  4237  00134A  D78C               	goto	l4178
  4238  00134C                     __end_of_newRotation:
  4239                           	opt stack 0
  4240                           tblptru	equ	0xFF8
  4241                           tblptrh	equ	0xFF7
  4242                           tblptrl	equ	0xFF6
  4243                           tablat	equ	0xFF5
  4244                           prodh	equ	0xFF4
  4245                           prodl	equ	0xFF3
  4246                           intcon	equ	0xFF2
  4247                           postinc0	equ	0xFEE
  4248                           wreg	equ	0xFE8
  4249                           indf1	equ	0xFE7
  4250                           postdec1	equ	0xFE5
  4251                           plusw1	equ	0xFE3
  4252                           fsr1h	equ	0xFE2
  4253                           fsr1l	equ	0xFE1
  4254                           indf2	equ	0xFDF
  4255                           postinc2	equ	0xFDE
  4256                           postdec2	equ	0xFDD
  4257                           plusw2	equ	0xFDB
  4258                           fsr2h	equ	0xFDA
  4259                           fsr2l	equ	0xFD9
  4260                           status	equ	0xFD8
  4261                           
  4262 ;; *************** function _moveObjectDown *****************
  4263 ;; Defined at:
  4264 ;;		line 852 in file "pictris.c"
  4265 ;; Parameters:    Size  Location     Type
  4266 ;;  pObject         2   37[COMRAM] PTR volatile unsigned sh
  4267 ;;		 -> ObjectData(16), 
  4268 ;; Auto vars:     Size  Location     Type
  4269 ;;  result          1   39[COMRAM] _Bool 
  4270 ;; Return value:  Size  Location     Type
  4271 ;;                  1    wreg      _Bool 
  4272 ;; Registers used:
  4273 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4274 ;; Tracked objects:
  4275 ;;		On entry : 0/0
  4276 ;;		On exit  : 0/0
  4277 ;;		Unchanged: 0/0
  4278 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4279 ;;      Params:         2       0       0       0       0       0       0
  4280 ;;      Locals:         1       0       0       0       0       0       0
  4281 ;;      Temps:          0       0       0       0       0       0       0
  4282 ;;      Totals:         3       0       0       0       0       0       0
  4283 ;;Total ram usage:        3 bytes
  4284 ;; Hardware stack levels used:    1
  4285 ;; Hardware stack levels required when called:    4
  4286 ;; This function calls:
  4287 ;;		_checkForBottom
  4288 ;;		_collisionDetect
  4289 ;;		_mergeObjects
  4290 ;;		_moveObject
  4291 ;;		_pauseMultiplexing
  4292 ;;		_resumeMultiplexing
  4293 ;;		_selectNextObject
  4294 ;; This function is called by:
  4295 ;;		_checkButtons
  4296 ;;		_mainGameLoop
  4297 ;; This function uses a non-reentrant model
  4298 ;;
  4299                           
  4300                           	psect	text21
  4301  001626                     __ptext21:
  4302                           	opt stack 0
  4303  001626                     _moveObjectDown:
  4304                           	opt stack 25
  4305                           
  4306                           ;pictris.c: 852: _Bool moveObjectDown(volatile uint16_t * pObject);pictris.c: 853: {;pic
      +                          tris.c: 854:     _Bool result = 1;
  4307                           
  4308                           ;incstack = 0
  4309  001626  0E01               	movlw	1
  4310  001628  6E5C               	movwf	moveObjectDown@result,c
  4311                           
  4312                           ;pictris.c: 857:     pauseMultiplexing();
  4313  00162A  ECC0  F010         	call	_pauseMultiplexing	;wreg free
  4314                           
  4315                           ;pictris.c: 860:     if (checkForBottom(pObject))
  4316  00162E  C05A  F047         	movff	moveObjectDown@pObject,checkForBottom@pObject
  4317  001632  C05B  F048         	movff	moveObjectDown@pObject+1,checkForBottom@pObject+1
  4318  001636  ECC2  F00F         	call	_checkForBottom	;wreg free
  4319  00163A  0900               	iorlw	0
  4320  00163C  B4D8               	btfsc	status,2,c
  4321  00163E  D015               	goto	l352
  4322                           
  4323                           ;pictris.c: 861:     {;pictris.c: 863:         result = 0;
  4324  001640  0E00               	movlw	0
  4325  001642  6E5C               	movwf	moveObjectDown@result,c
  4326                           
  4327                           ;pictris.c: 865:         mergeObjects(pObject, BackgroundData, MERGE);
  4328  001644  C05A  F047         	movff	moveObjectDown@pObject,mergeObjects@pSource
  4329  001648  C05B  F048         	movff	moveObjectDown@pObject+1,mergeObjects@pSource+1
  4330  00164C  0E90               	movlw	low _BackgroundData
  4331  00164E  6E49               	movwf	mergeObjects@pTarget,c
  4332  001650  0E00               	movlw	high _BackgroundData
  4333  001652  6E4A               	movwf	mergeObjects@pTarget+1,c
  4334  001654  0E01               	movlw	1
  4335  001656  6E4B               	movwf	mergeObjects@mode,c
  4336  001658  ECA4  F00A         	call	_mergeObjects	;wreg free
  4337                           
  4338                           ;pictris.c: 867:         selectNextObject(pObject);
  4339  00165C  C05A  F053         	movff	moveObjectDown@pObject,selectNextObject@pTarget
  4340  001660  C05B  F054         	movff	moveObjectDown@pObject+1,selectNextObject@pTarget+1
  4341  001664  EC47  F00C         	call	_selectNextObject	;wreg free
  4342  001668  D040               	goto	l4240
  4343  00166A                     l352:
  4344                           
  4345                           ;pictris.c: 872:     {;pictris.c: 874:         moveObject(pObject, DOWN, 1);
  4346  00166A  C05A  F047         	movff	moveObjectDown@pObject,moveObject@pObject
  4347  00166E  C05B  F048         	movff	moveObjectDown@pObject+1,moveObject@pObject+1
  4348  001672  0E00               	movlw	0
  4349  001674  6E49               	movwf	moveObject@direction,c
  4350  001676  0E01               	movlw	1
  4351  001678  6E4A               	movwf	moveObject@cycles,c
  4352  00167A  EC50  F006         	call	_moveObject	;wreg free
  4353                           
  4354                           ;pictris.c: 876:         if (collisionDetect(pObject, BackgroundData))
  4355  00167E  C05A  F047         	movff	moveObjectDown@pObject,collisionDetect@pSource
  4356  001682  C05B  F048         	movff	moveObjectDown@pObject+1,collisionDetect@pSource+1
  4357  001686  0E90               	movlw	low _BackgroundData
  4358  001688  6E49               	movwf	collisionDetect@pTarget,c
  4359  00168A  0E00               	movlw	high _BackgroundData
  4360  00168C  6E4A               	movwf	collisionDetect@pTarget+1,c
  4361  00168E  EC7C  F00E         	call	_collisionDetect	;wreg free
  4362  001692  0900               	iorlw	0
  4363  001694  B4D8               	btfsc	status,2,c
  4364  001696  D02B               	goto	l354
  4365                           
  4366                           ;pictris.c: 877:         {;pictris.c: 880:             result = 0;
  4367  001698  0E00               	movlw	0
  4368  00169A  6E5C               	movwf	moveObjectDown@result,c
  4369                           
  4370                           ;pictris.c: 882:             moveObject(pObject, UP, 1);
  4371  00169C  C05A  F047         	movff	moveObjectDown@pObject,moveObject@pObject
  4372  0016A0  C05B  F048         	movff	moveObjectDown@pObject+1,moveObject@pObject+1
  4373  0016A4  0E01               	movlw	1
  4374  0016A6  6E49               	movwf	moveObject@direction,c
  4375  0016A8  0E01               	movlw	1
  4376  0016AA  6E4A               	movwf	moveObject@cycles,c
  4377  0016AC  EC50  F006         	call	_moveObject	;wreg free
  4378                           
  4379                           ;pictris.c: 884:             mergeObjects(pObject, BackgroundData, MERGE);
  4380  0016B0  C05A  F047         	movff	moveObjectDown@pObject,mergeObjects@pSource
  4381  0016B4  C05B  F048         	movff	moveObjectDown@pObject+1,mergeObjects@pSource+1
  4382  0016B8  0E90               	movlw	low _BackgroundData
  4383  0016BA  6E49               	movwf	mergeObjects@pTarget,c
  4384  0016BC  0E00               	movlw	high _BackgroundData
  4385  0016BE  6E4A               	movwf	mergeObjects@pTarget+1,c
  4386  0016C0  0E01               	movlw	1
  4387  0016C2  6E4B               	movwf	mergeObjects@mode,c
  4388  0016C4  ECA4  F00A         	call	_mergeObjects	;wreg free
  4389                           
  4390                           ;pictris.c: 886:             selectNextObject(pObject);
  4391  0016C8  C05A  F053         	movff	moveObjectDown@pObject,selectNextObject@pTarget
  4392  0016CC  C05B  F054         	movff	moveObjectDown@pObject+1,selectNextObject@pTarget+1
  4393  0016D0  EC47  F00C         	call	_selectNextObject	;wreg free
  4394                           
  4395                           ;pictris.c: 889:             EndOfGame = collisionDetect(pObject, BackgroundData);
  4396  0016D4  C05A  F047         	movff	moveObjectDown@pObject,collisionDetect@pSource
  4397  0016D8  C05B  F048         	movff	moveObjectDown@pObject+1,collisionDetect@pSource+1
  4398  0016DC  0E90               	movlw	low _BackgroundData
  4399  0016DE  6E49               	movwf	collisionDetect@pTarget,c
  4400  0016E0  0E00               	movlw	high _BackgroundData
  4401  0016E2  6E4A               	movwf	collisionDetect@pTarget+1,c
  4402  0016E4  EC7C  F00E         	call	_collisionDetect	;wreg free
  4403  0016E8  6E12               	movwf	_EndOfGame,c
  4404  0016EA                     l4240:
  4405                           
  4406                           ;pictris.c: 891:             CheckForNewLines = 1;
  4407  0016EA  0E01               	movlw	1
  4408  0016EC  6E11               	movwf	_CheckForNewLines,c
  4409  0016EE                     l354:
  4410                           
  4411                           ;pictris.c: 894:     mS = 0;
  4412                           
  4413                           ;pictris.c: 893:     }
  4414  0016EE  0E00               	movlw	0
  4415  0016F0  6E04               	movwf	_mS+1,c	;volatile
  4416  0016F2  0E00               	movlw	0
  4417  0016F4  6E03               	movwf	_mS,c	;volatile
  4418                           
  4419                           ;pictris.c: 897:     resumeMultiplexing();
  4420  0016F6  ECD2  F010         	call	_resumeMultiplexing	;wreg free
  4421                           
  4422                           ;pictris.c: 899:     return result;
  4423  0016FA  505C               	movf	moveObjectDown@result,w,c
  4424  0016FC  0012               	return	
  4425  0016FE                     __end_of_moveObjectDown:
  4426                           	opt stack 0
  4427                           tblptru	equ	0xFF8
  4428                           tblptrh	equ	0xFF7
  4429                           tblptrl	equ	0xFF6
  4430                           tablat	equ	0xFF5
  4431                           prodh	equ	0xFF4
  4432                           prodl	equ	0xFF3
  4433                           intcon	equ	0xFF2
  4434                           postinc0	equ	0xFEE
  4435                           wreg	equ	0xFE8
  4436                           indf1	equ	0xFE7
  4437                           postdec1	equ	0xFE5
  4438                           plusw1	equ	0xFE3
  4439                           fsr1h	equ	0xFE2
  4440                           fsr1l	equ	0xFE1
  4441                           indf2	equ	0xFDF
  4442                           postinc2	equ	0xFDE
  4443                           postdec2	equ	0xFDD
  4444                           plusw2	equ	0xFDB
  4445                           fsr2h	equ	0xFDA
  4446                           fsr2l	equ	0xFD9
  4447                           status	equ	0xFD8
  4448                           
  4449 ;; *************** function _selectNextObject *****************
  4450 ;; Defined at:
  4451 ;;		line 542 in file "pictris.c"
  4452 ;; Parameters:    Size  Location     Type
  4453 ;;  pTarget         2   30[COMRAM] PTR volatile unsigned sh
  4454 ;;		 -> ObjectData(16), 
  4455 ;; Auto vars:     Size  Location     Type
  4456 ;;  s               2   35[COMRAM] PTR struct shape
  4457 ;;		 -> shapes(133), 
  4458 ;;  selection       1   34[COMRAM] unsigned char 
  4459 ;;  counter         1   33[COMRAM] unsigned char 
  4460 ;;  rndSelection    1   32[COMRAM] unsigned char 
  4461 ;; Return value:  Size  Location     Type
  4462 ;;                  1    wreg      void 
  4463 ;; Registers used:
  4464 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4465 ;; Tracked objects:
  4466 ;;		On entry : 0/0
  4467 ;;		On exit  : 0/0
  4468 ;;		Unchanged: 0/0
  4469 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4470 ;;      Params:         2       0       0       0       0       0       0
  4471 ;;      Locals:         5       0       0       0       0       0       0
  4472 ;;      Temps:          0       0       0       0       0       0       0
  4473 ;;      Totals:         7       0       0       0       0       0       0
  4474 ;;Total ram usage:        7 bytes
  4475 ;; Hardware stack levels used:    1
  4476 ;; Hardware stack levels required when called:    3
  4477 ;; This function calls:
  4478 ;;		___awmod
  4479 ;;		___wmul
  4480 ;;		_memcpy
  4481 ;;		_rnd_get_num
  4482 ;; This function is called by:
  4483 ;;		_moveObjectDown
  4484 ;;		_mainGameLoop
  4485 ;; This function uses a non-reentrant model
  4486 ;;
  4487                           
  4488                           	psect	text22
  4489  00188E                     __ptext22:
  4490                           	opt stack 0
  4491  00188E                     _selectNextObject:
  4492                           	opt stack 26
  4493                           
  4494                           ;pictris.c: 542: void selectNextObject(volatile uint16_t *pTarget);pictris.c: 543: {;pic
      +                          tris.c: 544:     byte rndSelection, counter, selection;;pictris.c: 545:     struct shape
      +                           * s;;pictris.c: 551:     rndSelection = rnd_get_num();
  4495                           
  4496                           ;incstack = 0
  4497  00188E  EC27  F00F         	call	_rnd_get_num	;wreg free
  4498  001892  6E55               	movwf	selectNextObject@rndSelection,c
  4499                           
  4500                           ;pictris.c: 554:     counter = 0;
  4501  001894  0E00               	movlw	0
  4502  001896  6E56               	movwf	selectNextObject@counter,c
  4503                           
  4504                           ;pictris.c: 555:     selection = 0;
  4505  001898  0E00               	movlw	0
  4506  00189A  6E57               	movwf	selectNextObject@selection,c
  4507  00189C                     
  4508                           ;pictris.c: 557:     {;pictris.c: 558:         counter += (55/7);
  4509  00189C  0E07               	movlw	7
  4510  00189E  2656               	addwf	selectNextObject@counter,f,c
  4511                           
  4512                           ;pictris.c: 559:         selection++;
  4513  0018A0  2A57               	incf	selectNextObject@selection,f,c
  4514                           
  4515                           ;pictris.c: 560:     } while (counter < rndSelection);
  4516  0018A2  5055               	movf	selectNextObject@rndSelection,w,c
  4517  0018A4  5C56               	subwf	selectNextObject@counter,w,c
  4518  0018A6  A0D8               	btfss	status,0,c
  4519  0018A8  D7F9               	goto	l220
  4520                           
  4521                           ;pictris.c: 564:     s = &shapes[selection % 7];
  4522  0018AA  0E00               	movlw	0
  4523  0018AC  6E4A               	movwf	___awmod@divisor+1,c
  4524  0018AE  0E07               	movlw	7
  4525  0018B0  6E49               	movwf	___awmod@divisor,c
  4526  0018B2  C057  F047         	movff	selectNextObject@selection,___awmod@dividend
  4527  0018B6  6A48               	clrf	___awmod@dividend+1,c
  4528  0018B8  ECA2  F00D         	call	___awmod	;wreg free
  4529  0018BC  C047  F04D         	movff	?___awmod,___wmul@multiplier
  4530  0018C0  C048  F04E         	movff	?___awmod+1,___wmul@multiplier+1
  4531  0018C4  0E00               	movlw	0
  4532  0018C6  6E50               	movwf	___wmul@multiplicand+1,c
  4533  0018C8  0E13               	movlw	19
  4534  0018CA  6E4F               	movwf	___wmul@multiplicand,c
  4535  0018CC  EC5F  F010         	call	___wmul	;wreg free
  4536  0018D0  0E00               	movlw	low _shapes
  4537  0018D2  244D               	addwf	?___wmul,w,c
  4538  0018D4  6E58               	movwf	selectNextObject@s,c
  4539  0018D6  0E02               	movlw	high _shapes
  4540  0018D8  204E               	addwfc	?___wmul+1,w,c
  4541  0018DA  6E59               	movwf	selectNextObject@s+1,c
  4542                           
  4543                           ;pictris.c: 565:     memcpy(pTarget, s->graphic, 16);
  4544  0018DC  C053  F047         	movff	selectNextObject@pTarget,memcpy@dest
  4545  0018E0  C054  F048         	movff	selectNextObject@pTarget+1,memcpy@dest+1
  4546  0018E4  C058  F049         	movff	selectNextObject@s,memcpy@src
  4547  0018E8  C059  F04A         	movff	selectNextObject@s+1,memcpy@src+1
  4548  0018EC  0E00               	movlw	0
  4549  0018EE  6E4C               	movwf	memcpy@n+1,c
  4550  0018F0  0E10               	movlw	16
  4551  0018F2  6E4B               	movwf	memcpy@n,c
  4552  0018F4  ECD3  F00E         	call	_memcpy	;wreg free
  4553                           
  4554                           ;pictris.c: 566:     OriginX = s->x;
  4555  0018F8  EE20 F010          	lfsr	2,16
  4556  0018FC  5058               	movf	selectNextObject@s,w,c
  4557  0018FE  26D9               	addwf	fsr2l,f,c
  4558  001900  5059               	movf	selectNextObject@s+1,w,c
  4559  001902  22DA               	addwfc	fsr2h,f,c
  4560  001904  50DF               	movf	indf2,w,c
  4561  001906  6E0F               	movwf	_OriginX,c
  4562                           
  4563                           ;pictris.c: 567:     OriginY = s->y;
  4564  001908  EE20 F011          	lfsr	2,17
  4565  00190C  5058               	movf	selectNextObject@s,w,c
  4566  00190E  26D9               	addwf	fsr2l,f,c
  4567  001910  5059               	movf	selectNextObject@s+1,w,c
  4568  001912  22DA               	addwfc	fsr2h,f,c
  4569  001914  50DF               	movf	indf2,w,c
  4570  001916  6E0E               	movwf	_OriginY,c
  4571                           
  4572                           ;pictris.c: 569:     IsRotated = 0;
  4573  001918  0E00               	movlw	0
  4574  00191A  6E13               	movwf	_IsRotated,c
  4575                           
  4576                           ;pictris.c: 570:     LimitedRotation = s->limitedRotation;
  4577  00191C  EE20 F012          	lfsr	2,18
  4578  001920  5058               	movf	selectNextObject@s,w,c
  4579  001922  26D9               	addwf	fsr2l,f,c
  4580  001924  5059               	movf	selectNextObject@s+1,w,c
  4581  001926  22DA               	addwfc	fsr2h,f,c
  4582  001928  50DF               	movf	indf2,w,c
  4583  00192A  6E16               	movwf	_LimitedRotation,c
  4584                           
  4585                           ;pictris.c: 572:     mS = 0;
  4586  00192C  0E00               	movlw	0
  4587  00192E  6E04               	movwf	_mS+1,c	;volatile
  4588  001930  0E00               	movlw	0
  4589  001932  6E03               	movwf	_mS,c	;volatile
  4590  001934  0012               	return		;funcret
  4591  001936                     __end_of_selectNextObject:
  4592                           	opt stack 0
  4593                           tblptru	equ	0xFF8
  4594                           tblptrh	equ	0xFF7
  4595                           tblptrl	equ	0xFF6
  4596                           tablat	equ	0xFF5
  4597                           prodh	equ	0xFF4
  4598                           prodl	equ	0xFF3
  4599                           intcon	equ	0xFF2
  4600                           postinc0	equ	0xFEE
  4601                           wreg	equ	0xFE8
  4602                           indf1	equ	0xFE7
  4603                           postdec1	equ	0xFE5
  4604                           plusw1	equ	0xFE3
  4605                           fsr1h	equ	0xFE2
  4606                           fsr1l	equ	0xFE1
  4607                           indf2	equ	0xFDF
  4608                           postinc2	equ	0xFDE
  4609                           postdec2	equ	0xFDD
  4610                           plusw2	equ	0xFDB
  4611                           fsr2h	equ	0xFDA
  4612                           fsr2l	equ	0xFD9
  4613                           status	equ	0xFD8
  4614                           
  4615 ;; *************** function _memcpy *****************
  4616 ;; Defined at:
  4617 ;;		line 10 in file "memcpy.c"
  4618 ;; Parameters:    Size  Location     Type
  4619 ;;  dest            2   18[COMRAM] PTR void 
  4620 ;;		 -> tmpObjectData(16), ObjectData(16), 
  4621 ;;  src             2   20[COMRAM] PTR const void 
  4622 ;;		 -> Number(160), SNAKE(16), TETRIS(16), ObjectData(16), 
  4623 ;;		 -> shapes.graphic(16), shapes(133), 
  4624 ;;  n               2   22[COMRAM] unsigned int 
  4625 ;; Auto vars:     Size  Location     Type
  4626 ;;  s               2   26[COMRAM] PTR unsigned char 
  4627 ;;		 -> Number(160), SNAKE(16), TETRIS(16), ObjectData(16), 
  4628 ;;		 -> shapes.graphic(16), shapes(133), 
  4629 ;;  d               2   24[COMRAM] PTR unsigned char 
  4630 ;;		 -> tmpObjectData(16), ObjectData(16), 
  4631 ;; Return value:  Size  Location     Type
  4632 ;;                  2   18[COMRAM] PTR void 
  4633 ;; Registers used:
  4634 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru
  4635 ;; Tracked objects:
  4636 ;;		On entry : 0/0
  4637 ;;		On exit  : 0/0
  4638 ;;		Unchanged: 0/0
  4639 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4640 ;;      Params:         6       0       0       0       0       0       0
  4641 ;;      Locals:         4       0       0       0       0       0       0
  4642 ;;      Temps:          0       0       0       0       0       0       0
  4643 ;;      Totals:        10       0       0       0       0       0       0
  4644 ;;Total ram usage:       10 bytes
  4645 ;; Hardware stack levels used:    1
  4646 ;; Hardware stack levels required when called:    2
  4647 ;; This function calls:
  4648 ;;		Nothing
  4649 ;; This function is called by:
  4650 ;;		_selectNextObject
  4651 ;;		_newRotation
  4652 ;;		_checkButtons
  4653 ;;		_splash_screen
  4654 ;;		_getNumber
  4655 ;; This function uses a non-reentrant model
  4656 ;;
  4657                           
  4658                           	psect	text23
  4659  001DA6                     __ptext23:
  4660                           	opt stack 0
  4661  001DA6                     _memcpy:
  4662                           	opt stack 27
  4663                           
  4664                           ;memcpy.c: 10: void *memcpy(void *dest, const void *src, size_t n);memcpy.c: 11: {;memcp
      +                          y.c: 12:     char *d = (char*)dest, *s = (char*)src;
  4665                           
  4666                           ;incstack = 0
  4667  001DA6  C047  F04D         	movff	memcpy@dest,memcpy@d
  4668  001DAA  C048  F04E         	movff	memcpy@dest+1,memcpy@d+1
  4669  001DAE  C049  F04F         	movff	memcpy@src,memcpy@s
  4670  001DB2  C04A  F050         	movff	memcpy@src+1,memcpy@s+1
  4671                           
  4672                           ;memcpy.c: 14:     while(n--)
  4673  001DB6  D019               	goto	l3
  4674  001DB8                     l3786:
  4675                           
  4676                           ;memcpy.c: 15:         *d++ = *s++;
  4677  001DB8  C04F  FFF6         	movff	memcpy@s,tblptrl
  4678  001DBC  C050  FFF7         	movff	memcpy@s+1,tblptrh
  4679  001DC0  6AF8               	clrf	tblptru,c
  4680  001DC2  C04D  FFD9         	movff	memcpy@d,fsr2l
  4681  001DC6  C04E  FFDA         	movff	memcpy@d+1,fsr2h
  4682  001DCA  0E05               	movlw	(high __ramtop+-1)
  4683  001DCC  64F7               	cpfsgt	tblptrh,c
  4684  001DCE  D003               	bra	u3927
  4685  001DD0  0008               	tblrd		*
  4686  001DD2  50F5               	movf	tablat,w,c
  4687  001DD4  D005               	bra	u3920
  4688  001DD6                     u3927:
  4689  001DD6  CFF6 FFE9          	movff	tblptrl,fsr0l
  4690  001DDA  CFF7 FFEA          	movff	tblptrh,fsr0h
  4691  001DDE  50EF               	movf	indf0,w,c
  4692  001DE0                     u3920:
  4693  001DE0  6EDF               	movwf	indf2,c
  4694  001DE2  4A4F               	infsnz	memcpy@s,f,c
  4695  001DE4  2A50               	incf	memcpy@s+1,f,c
  4696  001DE6  4A4D               	infsnz	memcpy@d,f,c
  4697  001DE8  2A4E               	incf	memcpy@d+1,f,c
  4698  001DEA                     l3:
  4699                           
  4700                           ;memcpy.c: 14:     while(n--)
  4701  001DEA  064B               	decf	memcpy@n,f,c
  4702  001DEC  A0D8               	btfss	status,0,c
  4703  001DEE  064C               	decf	memcpy@n+1,f,c
  4704  001DF0  284B               	incf	memcpy@n,w,c
  4705  001DF2  E1E2               	bnz	l3786
  4706  001DF4  284C               	incf	memcpy@n+1,w,c
  4707  001DF6  B4D8               	btfsc	status,2,c
  4708  001DF8  0012               	return	
  4709  001DFA  D7DE               	goto	l4
  4710  001DFC                     __end_of_memcpy:
  4711                           	opt stack 0
  4712                           tblptru	equ	0xFF8
  4713                           tblptrh	equ	0xFF7
  4714                           tblptrl	equ	0xFF6
  4715                           tablat	equ	0xFF5
  4716                           prodh	equ	0xFF4
  4717                           prodl	equ	0xFF3
  4718                           intcon	equ	0xFF2
  4719                           indf0	equ	0xFEF
  4720                           postinc0	equ	0xFEE
  4721                           fsr0h	equ	0xFEA
  4722                           fsr0l	equ	0xFE9
  4723                           wreg	equ	0xFE8
  4724                           indf1	equ	0xFE7
  4725                           postdec1	equ	0xFE5
  4726                           plusw1	equ	0xFE3
  4727                           fsr1h	equ	0xFE2
  4728                           fsr1l	equ	0xFE1
  4729                           indf2	equ	0xFDF
  4730                           postinc2	equ	0xFDE
  4731                           postdec2	equ	0xFDD
  4732                           plusw2	equ	0xFDB
  4733                           fsr2h	equ	0xFDA
  4734                           fsr2l	equ	0xFD9
  4735                           status	equ	0xFD8
  4736                           
  4737 ;; *************** function ___wmul *****************
  4738 ;; Defined at:
  4739 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c99\common\Umul16.c"
  4740 ;; Parameters:    Size  Location     Type
  4741 ;;  multiplier      2   24[COMRAM] unsigned int 
  4742 ;;  multiplicand    2   26[COMRAM] unsigned int 
  4743 ;; Auto vars:     Size  Location     Type
  4744 ;;  product         2   28[COMRAM] unsigned int 
  4745 ;; Return value:  Size  Location     Type
  4746 ;;                  2   24[COMRAM] unsigned int 
  4747 ;; Registers used:
  4748 ;;		wreg, status,2, status,0, prodl, prodh
  4749 ;; Tracked objects:
  4750 ;;		On entry : 0/0
  4751 ;;		On exit  : 0/0
  4752 ;;		Unchanged: 0/0
  4753 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4754 ;;      Params:         4       0       0       0       0       0       0
  4755 ;;      Locals:         2       0       0       0       0       0       0
  4756 ;;      Temps:          0       0       0       0       0       0       0
  4757 ;;      Totals:         6       0       0       0       0       0       0
  4758 ;;Total ram usage:        6 bytes
  4759 ;; Hardware stack levels used:    1
  4760 ;; Hardware stack levels required when called:    2
  4761 ;; This function calls:
  4762 ;;		Nothing
  4763 ;; This function is called by:
  4764 ;;		_selectNextObject
  4765 ;;		_newRotation
  4766 ;; This function uses a non-reentrant model
  4767 ;;
  4768                           
  4769                           	psect	text24
  4770  0020BE                     __ptext24:
  4771                           	opt stack 0
  4772  0020BE                     ___wmul:
  4773                           	opt stack 26
  4774                           
  4775                           ;incstack = 0
  4776  0020BE  504D               	movf	___wmul@multiplier,w,c
  4777  0020C0  024F               	mulwf	___wmul@multiplicand,c
  4778  0020C2  CFF3 F051          	movff	prodl,___wmul@product
  4779  0020C6  CFF4 F052          	movff	prodh,___wmul@product+1
  4780  0020CA  504D               	movf	___wmul@multiplier,w,c
  4781  0020CC  0250               	mulwf	___wmul@multiplicand+1,c
  4782  0020CE  50F3               	movf	prodl,w,c
  4783  0020D0  2652               	addwf	___wmul@product+1,f,c
  4784  0020D2  504E               	movf	___wmul@multiplier+1,w,c
  4785  0020D4  024F               	mulwf	___wmul@multiplicand,c
  4786  0020D6  50F3               	movf	prodl,w,c
  4787  0020D8  2652               	addwf	___wmul@product+1,f,c
  4788  0020DA  C051  F04D         	movff	___wmul@product,?___wmul
  4789  0020DE  C052  F04E         	movff	___wmul@product+1,?___wmul+1
  4790  0020E2  0012               	return	
  4791  0020E4                     __end_of___wmul:
  4792                           	opt stack 0
  4793                           tblptru	equ	0xFF8
  4794                           tblptrh	equ	0xFF7
  4795                           tblptrl	equ	0xFF6
  4796                           tablat	equ	0xFF5
  4797                           prodh	equ	0xFF4
  4798                           prodl	equ	0xFF3
  4799                           intcon	equ	0xFF2
  4800                           indf0	equ	0xFEF
  4801                           postinc0	equ	0xFEE
  4802                           fsr0h	equ	0xFEA
  4803                           fsr0l	equ	0xFE9
  4804                           wreg	equ	0xFE8
  4805                           indf1	equ	0xFE7
  4806                           postdec1	equ	0xFE5
  4807                           plusw1	equ	0xFE3
  4808                           fsr1h	equ	0xFE2
  4809                           fsr1l	equ	0xFE1
  4810                           indf2	equ	0xFDF
  4811                           postinc2	equ	0xFDE
  4812                           postdec2	equ	0xFDD
  4813                           plusw2	equ	0xFDB
  4814                           fsr2h	equ	0xFDA
  4815                           fsr2l	equ	0xFD9
  4816                           status	equ	0xFD8
  4817                           
  4818 ;; *************** function ___awmod *****************
  4819 ;; Defined at:
  4820 ;;		line 7 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c99\common\awmod.c"
  4821 ;; Parameters:    Size  Location     Type
  4822 ;;  dividend        2   18[COMRAM] int 
  4823 ;;  divisor         2   20[COMRAM] int 
  4824 ;; Auto vars:     Size  Location     Type
  4825 ;;  sign            1   23[COMRAM] unsigned char 
  4826 ;;  counter         1   22[COMRAM] unsigned char 
  4827 ;; Return value:  Size  Location     Type
  4828 ;;                  2   18[COMRAM] int 
  4829 ;; Registers used:
  4830 ;;		wreg, status,2, status,0
  4831 ;; Tracked objects:
  4832 ;;		On entry : 0/0
  4833 ;;		On exit  : 0/0
  4834 ;;		Unchanged: 0/0
  4835 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4836 ;;      Params:         4       0       0       0       0       0       0
  4837 ;;      Locals:         2       0       0       0       0       0       0
  4838 ;;      Temps:          0       0       0       0       0       0       0
  4839 ;;      Totals:         6       0       0       0       0       0       0
  4840 ;;Total ram usage:        6 bytes
  4841 ;; Hardware stack levels used:    1
  4842 ;; Hardware stack levels required when called:    2
  4843 ;; This function calls:
  4844 ;;		Nothing
  4845 ;; This function is called by:
  4846 ;;		_itoa
  4847 ;;		_selectNextObject
  4848 ;; This function uses a non-reentrant model
  4849 ;;
  4850                           
  4851                           	psect	text25
  4852  001B44                     __ptext25:
  4853                           	opt stack 0
  4854  001B44                     ___awmod:
  4855                           	opt stack 26
  4856                           
  4857                           ;incstack = 0
  4858  001B44  0E00               	movlw	0
  4859  001B46  6E4C               	movwf	___awmod@sign,c
  4860  001B48  AE48               	btfss	___awmod@dividend+1,7,c
  4861  001B4A  D006               	goto	l765
  4862  001B4C  6C47               	negf	___awmod@dividend,c
  4863  001B4E  1E48               	comf	___awmod@dividend+1,f,c
  4864  001B50  B0D8               	btfsc	status,0,c
  4865  001B52  2A48               	incf	___awmod@dividend+1,f,c
  4866  001B54  0E01               	movlw	1
  4867  001B56  6E4C               	movwf	___awmod@sign,c
  4868  001B58                     l765:
  4869  001B58  AE4A               	btfss	___awmod@divisor+1,7,c
  4870  001B5A  D004               	goto	l766
  4871  001B5C  6C49               	negf	___awmod@divisor,c
  4872  001B5E  1E4A               	comf	___awmod@divisor+1,f,c
  4873  001B60  B0D8               	btfsc	status,0,c
  4874  001B62  2A4A               	incf	___awmod@divisor+1,f,c
  4875  001B64                     l766:
  4876  001B64  5049               	movf	___awmod@divisor,w,c
  4877  001B66  104A               	iorwf	___awmod@divisor+1,w,c
  4878  001B68  B4D8               	btfsc	status,2,c
  4879  001B6A  D018               	goto	l773
  4880  001B6C  0E01               	movlw	1
  4881  001B6E  6E4B               	movwf	___awmod@counter,c
  4882  001B70  D004               	goto	l768
  4883  001B72  90D8               	bcf	status,0,c
  4884  001B74  3649               	rlcf	___awmod@divisor,f,c
  4885  001B76  364A               	rlcf	___awmod@divisor+1,f,c
  4886  001B78  2A4B               	incf	___awmod@counter,f,c
  4887  001B7A                     l768:
  4888  001B7A  AE4A               	btfss	___awmod@divisor+1,7,c
  4889  001B7C  D7FA               	goto	l769
  4890  001B7E                     u3980:
  4891  001B7E  5049               	movf	___awmod@divisor,w,c
  4892  001B80  5C47               	subwf	___awmod@dividend,w,c
  4893  001B82  504A               	movf	___awmod@divisor+1,w,c
  4894  001B84  5848               	subwfb	___awmod@dividend+1,w,c
  4895  001B86  A0D8               	btfss	status,0,c
  4896  001B88  D004               	goto	l772
  4897  001B8A  5049               	movf	___awmod@divisor,w,c
  4898  001B8C  5E47               	subwf	___awmod@dividend,f,c
  4899  001B8E  504A               	movf	___awmod@divisor+1,w,c
  4900  001B90  5A48               	subwfb	___awmod@dividend+1,f,c
  4901  001B92                     l772:
  4902  001B92  90D8               	bcf	status,0,c
  4903  001B94  324A               	rrcf	___awmod@divisor+1,f,c
  4904  001B96  3249               	rrcf	___awmod@divisor,f,c
  4905  001B98  2E4B               	decfsz	___awmod@counter,f,c
  4906  001B9A  D7F1               	goto	u3980
  4907  001B9C                     l773:
  4908  001B9C  504C               	movf	___awmod@sign,w,c
  4909  001B9E  B4D8               	btfsc	status,2,c
  4910  001BA0  D004               	goto	l774
  4911  001BA2  6C47               	negf	___awmod@dividend,c
  4912  001BA4  1E48               	comf	___awmod@dividend+1,f,c
  4913  001BA6  B0D8               	btfsc	status,0,c
  4914  001BA8  2A48               	incf	___awmod@dividend+1,f,c
  4915  001BAA                     l774:
  4916  001BAA  C047  F047         	movff	___awmod@dividend,?___awmod
  4917  001BAE  C048  F048         	movff	___awmod@dividend+1,?___awmod+1
  4918  001BB2  0012               	return	
  4919  001BB4                     __end_of___awmod:
  4920                           	opt stack 0
  4921                           tblptru	equ	0xFF8
  4922                           tblptrh	equ	0xFF7
  4923                           tblptrl	equ	0xFF6
  4924                           tablat	equ	0xFF5
  4925                           prodh	equ	0xFF4
  4926                           prodl	equ	0xFF3
  4927                           intcon	equ	0xFF2
  4928                           indf0	equ	0xFEF
  4929                           postinc0	equ	0xFEE
  4930                           fsr0h	equ	0xFEA
  4931                           fsr0l	equ	0xFE9
  4932                           wreg	equ	0xFE8
  4933                           indf1	equ	0xFE7
  4934                           postdec1	equ	0xFE5
  4935                           plusw1	equ	0xFE3
  4936                           fsr1h	equ	0xFE2
  4937                           fsr1l	equ	0xFE1
  4938                           indf2	equ	0xFDF
  4939                           postinc2	equ	0xFDE
  4940                           postdec2	equ	0xFDD
  4941                           plusw2	equ	0xFDB
  4942                           fsr2h	equ	0xFDA
  4943                           fsr2l	equ	0xFD9
  4944                           status	equ	0xFD8
  4945                           
  4946 ;; *************** function _moveObject *****************
  4947 ;; Defined at:
  4948 ;;		line 706 in file "pictris.c"
  4949 ;; Parameters:    Size  Location     Type
  4950 ;;  pObject         2   18[COMRAM] PTR volatile unsigned sh
  4951 ;;		 -> tmpObjectData(16), ObjectData(16), 
  4952 ;;  direction       1   20[COMRAM] enum E2761
  4953 ;;  cycles          1   21[COMRAM] unsigned char 
  4954 ;; Auto vars:     Size  Location     Type
  4955 ;;  i               1   27[COMRAM] unsigned char 
  4956 ;;  c               1   26[COMRAM] unsigned char 
  4957 ;; Return value:  Size  Location     Type
  4958 ;;                  1    wreg      void 
  4959 ;; Registers used:
  4960 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  4961 ;; Tracked objects:
  4962 ;;		On entry : 0/0
  4963 ;;		On exit  : 0/0
  4964 ;;		Unchanged: 0/0
  4965 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4966 ;;      Params:         4       0       0       0       0       0       0
  4967 ;;      Locals:         2       0       0       0       0       0       0
  4968 ;;      Temps:          4       0       0       0       0       0       0
  4969 ;;      Totals:        10       0       0       0       0       0       0
  4970 ;;Total ram usage:       10 bytes
  4971 ;; Hardware stack levels used:    1
  4972 ;; Hardware stack levels required when called:    2
  4973 ;; This function calls:
  4974 ;;		Nothing
  4975 ;; This function is called by:
  4976 ;;		_moveObjectDown
  4977 ;;		_checkButtons
  4978 ;;		_show_score
  4979 ;; This function uses a non-reentrant model
  4980 ;;
  4981                           
  4982                           	psect	text26
  4983  000CA0                     __ptext26:
  4984                           	opt stack 0
  4985  000CA0                     _moveObject:
  4986                           	opt stack 27
  4987                           
  4988                           ;pictris.c: 706: void moveObject(volatile uint16_t * pObject, direction_t direction, byt
      +                          e cycles);pictris.c: 707: {;pictris.c: 708:     byte i, c;;pictris.c: 710:     switch (d
      +                          irection)
  4989                           
  4990                           ;incstack = 0
  4991  000CA0  D0AC               	goto	l283
  4992  000CA2                     
  4993                           ;pictris.c: 713:         for (c = 0; c < cycles; c++)
  4994  000CA2  0E00               	movlw	0
  4995  000CA4  6E4F               	movwf	moveObject@c,c
  4996  000CA6  D015               	goto	l285
  4997  000CA8                     
  4998                           ;pictris.c: 714:         {;pictris.c: 715:             for (i = 0; i < 8; i++)
  4999  000CA8  0E00               	movlw	0
  5000  000CAA  6E50               	movwf	moveObject@i,c
  5001  000CAC                     l3946:
  5002  000CAC  0E07               	movlw	7
  5003  000CAE  6450               	cpfsgt	moveObject@i,c
  5004  000CB0  D001               	goto	l287
  5005  000CB2  D00D               	goto	u4120
  5006  000CB4                     l287:
  5007                           
  5008                           ;pictris.c: 716:                 pObject[i] <<= 1;
  5009  000CB4  5050               	movf	moveObject@i,w,c
  5010  000CB6  0D02               	mullw	2
  5011  000CB8  50F3               	movf	prodl,w,c
  5012  000CBA  2447               	addwf	moveObject@pObject,w,c
  5013  000CBC  6ED9               	movwf	fsr2l,c
  5014  000CBE  50F4               	movf	prodh,w,c
  5015  000CC0  2048               	addwfc	moveObject@pObject+1,w,c
  5016  000CC2  6EDA               	movwf	fsr2h,c
  5017  000CC4  90D8               	bcf	status,0,c
  5018  000CC6  36DE               	rlcf	postinc2,f,c
  5019  000CC8  36DD               	rlcf	postdec2,f,c
  5020  000CCA  2A50               	incf	moveObject@i,f,c
  5021  000CCC  D7EF               	goto	l3946
  5022  000CCE                     u4120:
  5023                           
  5024                           ;pictris.c: 717:             OriginY++;
  5025  000CCE  2A0E               	incf	_OriginY,f,c
  5026                           
  5027                           ;pictris.c: 718:         }
  5028  000CD0  2A4F               	incf	moveObject@c,f,c
  5029  000CD2                     l285:
  5030  000CD2  504A               	movf	moveObject@cycles,w,c
  5031  000CD4  5C4F               	subwf	moveObject@c,w,c
  5032  000CD6  B0D8               	btfsc	status,0,c
  5033  000CD8  0012               	return	
  5034  000CDA  D7E6               	goto	l286
  5035  000CDC                     
  5036                           ;pictris.c: 721:         for (c = 0; c < cycles; c++)
  5037  000CDC  0E00               	movlw	0
  5038  000CDE  6E4F               	movwf	moveObject@c,c
  5039  000CE0  D016               	goto	l292
  5040  000CE2                     
  5041                           ;pictris.c: 722:         {;pictris.c: 723:             for (i = 0; i < 8; i++)
  5042  000CE2  0E00               	movlw	0
  5043  000CE4  6E50               	movwf	moveObject@i,c
  5044  000CE6                     l3964:
  5045  000CE6  0E07               	movlw	7
  5046  000CE8  6450               	cpfsgt	moveObject@i,c
  5047  000CEA  D001               	goto	l294
  5048  000CEC  D00E               	goto	u4150
  5049  000CEE                     l294:
  5050                           
  5051                           ;pictris.c: 724:                 pObject[i] >>= 1;
  5052  000CEE  5050               	movf	moveObject@i,w,c
  5053  000CF0  0D02               	mullw	2
  5054  000CF2  50F3               	movf	prodl,w,c
  5055  000CF4  2447               	addwf	moveObject@pObject,w,c
  5056  000CF6  6ED9               	movwf	fsr2l,c
  5057  000CF8  50F4               	movf	prodh,w,c
  5058  000CFA  2048               	addwfc	moveObject@pObject+1,w,c
  5059  000CFC  6EDA               	movwf	fsr2h,c
  5060  000CFE  90D8               	bcf	status,0,c
  5061  000D00  32DC               	rrcf	preinc2,f,c
  5062  000D02  50DD               	movf	postdec2,w,c
  5063  000D04  32DF               	rrcf	indf2,f,c
  5064  000D06  2A50               	incf	moveObject@i,f,c
  5065  000D08  D7EE               	goto	l3964
  5066  000D0A                     u4150:
  5067                           
  5068                           ;pictris.c: 725:             OriginY--;
  5069  000D0A  060E               	decf	_OriginY,f,c
  5070                           
  5071                           ;pictris.c: 726:         }
  5072  000D0C  2A4F               	incf	moveObject@c,f,c
  5073  000D0E                     l292:
  5074  000D0E  504A               	movf	moveObject@cycles,w,c
  5075  000D10  5C4F               	subwf	moveObject@c,w,c
  5076  000D12  B0D8               	btfsc	status,0,c
  5077  000D14  0012               	return	
  5078  000D16  D7E5               	goto	l293
  5079  000D18                     
  5080                           ;pictris.c: 729:         for (c = 0; c < cycles; c++)
  5081  000D18  0E00               	movlw	0
  5082  000D1A  6E4F               	movwf	moveObject@c,c
  5083  000D1C  D031               	goto	l298
  5084  000D1E                     
  5085                           ;pictris.c: 730:         {;pictris.c: 731:             for (i = 7; i > 0; i--)
  5086  000D1E  0E07               	movlw	7
  5087  000D20  6E50               	movwf	moveObject@i,c
  5088  000D22  5050               	movf	moveObject@i,w,c
  5089  000D24  B4D8               	btfsc	status,2,c
  5090  000D26  D022               	goto	u4180
  5091                           
  5092                           ;pictris.c: 732:                 pObject[i] = pObject[i-1];
  5093  000D28  0EFE               	movlw	254
  5094  000D2A  6E4B               	movwf	??_moveObject& (0+255),c
  5095  000D2C  0EFF               	movlw	255
  5096  000D2E  6E4C               	movwf	(??_moveObject+1)& (0+255),c
  5097  000D30  5050               	movf	moveObject@i,w,c
  5098  000D32  6E4D               	movwf	(??_moveObject+2)& (0+255),c
  5099  000D34  6A4E               	clrf	(??_moveObject+3)& (0+255),c
  5100  000D36  90D8               	bcf	status,0,c
  5101  000D38  364D               	rlcf	??_moveObject+2,f,c
  5102  000D3A  364E               	rlcf	??_moveObject+3,f,c
  5103  000D3C  504B               	movf	??_moveObject,w,c
  5104  000D3E  264D               	addwf	??_moveObject+2,f,c
  5105  000D40  504C               	movf	??_moveObject+1,w,c
  5106  000D42  224E               	addwfc	??_moveObject+3,f,c
  5107  000D44  504D               	movf	??_moveObject+2,w,c
  5108  000D46  2447               	addwf	moveObject@pObject,w,c
  5109  000D48  6ED9               	movwf	fsr2l,c
  5110  000D4A  504E               	movf	??_moveObject+3,w,c
  5111  000D4C  2048               	addwfc	moveObject@pObject+1,w,c
  5112  000D4E  6EDA               	movwf	fsr2h,c
  5113  000D50  5050               	movf	moveObject@i,w,c
  5114  000D52  0D02               	mullw	2
  5115  000D54  50F3               	movf	prodl,w,c
  5116  000D56  2447               	addwf	moveObject@pObject,w,c
  5117  000D58  6EE1               	movwf	fsr1l,c
  5118  000D5A  50F4               	movf	prodh,w,c
  5119  000D5C  2048               	addwfc	moveObject@pObject+1,w,c
  5120  000D5E  6EE2               	movwf	fsr1h,c
  5121  000D60  CFDE FFE6          	movff	postinc2,postinc1
  5122  000D64  CFDD FFE5          	movff	postdec2,postdec1
  5123  000D68  0650               	decf	moveObject@i,f,c
  5124  000D6A  D7DB               	goto	L3
  5125  000D6C                     u4180:
  5126                           
  5127                           ;pictris.c: 733:             pObject[0] = 0;
  5128  000D6C  C047  FFD9         	movff	moveObject@pObject,fsr2l
  5129  000D70  C048  FFDA         	movff	moveObject@pObject+1,fsr2h
  5130  000D74  0E00               	movlw	0
  5131  000D76  6EDE               	movwf	postinc2,c
  5132  000D78  0E00               	movlw	0
  5133  000D7A  6EDD               	movwf	postdec2,c
  5134                           
  5135                           ;pictris.c: 734:             OriginX++;
  5136  000D7C  2A0F               	incf	_OriginX,f,c
  5137                           
  5138                           ;pictris.c: 735:         }
  5139  000D7E  2A4F               	incf	moveObject@c,f,c
  5140  000D80                     l298:
  5141  000D80  504A               	movf	moveObject@cycles,w,c
  5142  000D82  5C4F               	subwf	moveObject@c,w,c
  5143  000D84  B0D8               	btfsc	status,0,c
  5144  000D86  0012               	return	
  5145  000D88  D7CA               	goto	l299
  5146  000D8A                     
  5147                           ;pictris.c: 738:         for (c = 0; c < cycles; c++)
  5148  000D8A  0E00               	movlw	0
  5149  000D8C  6E4F               	movwf	moveObject@c,c
  5150  000D8E  D030               	goto	l304
  5151  000D90                     
  5152                           ;pictris.c: 739:         {;pictris.c: 740:             for (i = 0; i < 7; i++)
  5153  000D90  0E00               	movlw	0
  5154  000D92  6E50               	movwf	moveObject@i,c
  5155  000D94                     l4002:
  5156  000D94  0E06               	movlw	6
  5157  000D96  6450               	cpfsgt	moveObject@i,c
  5158  000D98  D001               	goto	l306
  5159  000D9A  D01E               	goto	u4210
  5160  000D9C                     l306:
  5161                           
  5162                           ;pictris.c: 741:                 pObject[i] = pObject[i+1];
  5163  000D9C  5050               	movf	moveObject@i,w,c
  5164  000D9E  6E4B               	movwf	??_moveObject& (0+255),c
  5165  000DA0  6A4C               	clrf	(??_moveObject+1)& (0+255),c
  5166  000DA2  90D8               	bcf	status,0,c
  5167  000DA4  364B               	rlcf	??_moveObject,f,c
  5168  000DA6  364C               	rlcf	??_moveObject+1,f,c
  5169  000DA8  0E02               	movlw	2
  5170  000DAA  264B               	addwf	??_moveObject,f,c
  5171  000DAC  0E00               	movlw	0
  5172  000DAE  224C               	addwfc	??_moveObject+1,f,c
  5173  000DB0  504B               	movf	??_moveObject,w,c
  5174  000DB2  2447               	addwf	moveObject@pObject,w,c
  5175  000DB4  6ED9               	movwf	fsr2l,c
  5176  000DB6  504C               	movf	??_moveObject+1,w,c
  5177  000DB8  2048               	addwfc	moveObject@pObject+1,w,c
  5178  000DBA  6EDA               	movwf	fsr2h,c
  5179  000DBC  5050               	movf	moveObject@i,w,c
  5180  000DBE  0D02               	mullw	2
  5181  000DC0  50F3               	movf	prodl,w,c
  5182  000DC2  2447               	addwf	moveObject@pObject,w,c
  5183  000DC4  6EE1               	movwf	fsr1l,c
  5184  000DC6  50F4               	movf	prodh,w,c
  5185  000DC8  2048               	addwfc	moveObject@pObject+1,w,c
  5186  000DCA  6EE2               	movwf	fsr1h,c
  5187  000DCC  CFDE FFE6          	movff	postinc2,postinc1
  5188  000DD0  CFDD FFE5          	movff	postdec2,postdec1
  5189  000DD4  2A50               	incf	moveObject@i,f,c
  5190  000DD6  D7DE               	goto	l4002
  5191  000DD8                     u4210:
  5192                           
  5193                           ;pictris.c: 742:             pObject[7] = 0;
  5194  000DD8  EE20 F00E          	lfsr	2,14
  5195  000DDC  5047               	movf	moveObject@pObject,w,c
  5196  000DDE  26D9               	addwf	fsr2l,f,c
  5197  000DE0  5048               	movf	moveObject@pObject+1,w,c
  5198  000DE2  22DA               	addwfc	fsr2h,f,c
  5199  000DE4  0E00               	movlw	0
  5200  000DE6  6EDE               	movwf	postinc2,c
  5201  000DE8  0E00               	movlw	0
  5202  000DEA  6EDD               	movwf	postdec2,c
  5203                           
  5204                           ;pictris.c: 743:             OriginX--;
  5205  000DEC  060F               	decf	_OriginX,f,c
  5206                           
  5207                           ;pictris.c: 744:         }
  5208  000DEE  2A4F               	incf	moveObject@c,f,c
  5209  000DF0                     l304:
  5210  000DF0  504A               	movf	moveObject@cycles,w,c
  5211  000DF2  5C4F               	subwf	moveObject@c,w,c
  5212  000DF4  B0D8               	btfsc	status,0,c
  5213  000DF6  0012               	return	
  5214  000DF8  D7CB               	goto	l305
  5215  000DFA                     l283:
  5216  000DFA  5049               	movf	moveObject@direction,w,c
  5217  000DFC  6E4B               	movwf	??_moveObject& (0+255),c
  5218  000DFE  6A4C               	clrf	(??_moveObject+1)& (0+255),c
  5219                           
  5220                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  5221                           ; Switch size 1, requested type "space"
  5222                           ; Number of cases is 1, Range of values is 0 to 0
  5223                           ; switch strategies available:
  5224                           ; Name         Instructions Cycles
  5225                           ; simple_byte            4     3 (average)
  5226                           ;	Chosen strategy is simple_byte
  5227  000E00  504C               	movf	??_moveObject+1,w,c
  5228  000E02  0A00               	xorlw	0	; case 0
  5229  000E04  A4D8               	btfss	status,2,c
  5230  000E06  0012               	return	
  5231                           
  5232                           ; Switch size 1, requested type "space"
  5233                           ; Number of cases is 4, Range of values is 0 to 3
  5234                           ; switch strategies available:
  5235                           ; Name         Instructions Cycles
  5236                           ; simple_byte           13     7 (average)
  5237                           ;	Chosen strategy is simple_byte
  5238  000E08  504B               	movf	??_moveObject,w,c
  5239  000E0A  0A00               	xorlw	0	; case 0
  5240  000E0C  B4D8               	btfsc	status,2,c
  5241  000E0E  D749               	goto	l284
  5242  000E10  0A01               	xorlw	1	; case 1
  5243  000E12  B4D8               	btfsc	status,2,c
  5244  000E14  D763               	goto	l291
  5245  000E16  0A03               	xorlw	3	; case 2
  5246  000E18  B4D8               	btfsc	status,2,c
  5247  000E1A  D7B7               	goto	l303
  5248  000E1C  0A01               	xorlw	1	; case 3
  5249  000E1E  A4D8               	btfss	status,2,c
  5250  000E20  0012               	return	
  5251  000E22  D77A               	goto	l297
  5252  000E24                     __end_of_moveObject:
  5253                           	opt stack 0
  5254                           tblptru	equ	0xFF8
  5255                           tblptrh	equ	0xFF7
  5256                           tblptrl	equ	0xFF6
  5257                           tablat	equ	0xFF5
  5258                           prodh	equ	0xFF4
  5259                           prodl	equ	0xFF3
  5260                           intcon	equ	0xFF2
  5261                           indf0	equ	0xFEF
  5262                           postinc0	equ	0xFEE
  5263                           fsr0h	equ	0xFEA
  5264                           fsr0l	equ	0xFE9
  5265                           wreg	equ	0xFE8
  5266                           indf1	equ	0xFE7
  5267                           postinc1	equ	0xFE6
  5268                           postdec1	equ	0xFE5
  5269                           plusw1	equ	0xFE3
  5270                           fsr1h	equ	0xFE2
  5271                           fsr1l	equ	0xFE1
  5272                           indf2	equ	0xFDF
  5273                           postinc2	equ	0xFDE
  5274                           postdec2	equ	0xFDD
  5275                           preinc2	equ	0xFDC
  5276                           plusw2	equ	0xFDB
  5277                           fsr2h	equ	0xFDA
  5278                           fsr2l	equ	0xFD9
  5279                           status	equ	0xFD8
  5280                           
  5281 ;; *************** function _collisionDetect *****************
  5282 ;; Defined at:
  5283 ;;		line 775 in file "pictris.c"
  5284 ;; Parameters:    Size  Location     Type
  5285 ;;  pSource         2   18[COMRAM] PTR volatile unsigned sh
  5286 ;;		 -> tmpObjectData(16), ObjectData(16), 
  5287 ;;  pTarget         2   20[COMRAM] PTR volatile unsigned sh
  5288 ;;		 -> BackgroundData(16), 
  5289 ;; Auto vars:     Size  Location     Type
  5290 ;;  i               1   26[COMRAM] unsigned char 
  5291 ;; Return value:  Size  Location     Type
  5292 ;;                  1    wreg      _Bool 
  5293 ;; Registers used:
  5294 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  5295 ;; Tracked objects:
  5296 ;;		On entry : 0/0
  5297 ;;		On exit  : 0/0
  5298 ;;		Unchanged: 0/0
  5299 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5300 ;;      Params:         4       0       0       0       0       0       0
  5301 ;;      Locals:         1       0       0       0       0       0       0
  5302 ;;      Temps:          4       0       0       0       0       0       0
  5303 ;;      Totals:         9       0       0       0       0       0       0
  5304 ;;Total ram usage:        9 bytes
  5305 ;; Hardware stack levels used:    1
  5306 ;; Hardware stack levels required when called:    2
  5307 ;; This function calls:
  5308 ;;		Nothing
  5309 ;; This function is called by:
  5310 ;;		_moveObjectDown
  5311 ;;		_checkButtons
  5312 ;; This function uses a non-reentrant model
  5313 ;;
  5314                           
  5315                           	psect	text27
  5316  001CF8                     __ptext27:
  5317                           	opt stack 0
  5318  001CF8                     _collisionDetect:
  5319                           	opt stack 26
  5320                           
  5321                           ;pictris.c: 775: _Bool collisionDetect(volatile uint16_t * pSource, volatile uint16_t * 
      +                          pTarget);pictris.c: 776: {;pictris.c: 777:     for (byte i = 0; i < 8; i++)
  5322                           
  5323                           ;incstack = 0
  5324  001CF8  0E00               	movlw	0
  5325  001CFA  6E4F               	movwf	collisionDetect@i,c
  5326  001CFC                     l2822:
  5327  001CFC  0E07               	movlw	7
  5328  001CFE  644F               	cpfsgt	collisionDetect@i,c
  5329  001D00  D001               	goto	l324
  5330  001D02  D024               	goto	u2370
  5331  001D04                     l324:
  5332                           
  5333                           ;pictris.c: 778:         if (pSource[i] & pTarget[i])
  5334  001D04  504F               	movf	collisionDetect@i,w,c
  5335  001D06  0D02               	mullw	2
  5336  001D08  50F3               	movf	prodl,w,c
  5337  001D0A  2449               	addwf	collisionDetect@pTarget,w,c
  5338  001D0C  6ED9               	movwf	fsr2l,c
  5339  001D0E  50F4               	movf	prodh,w,c
  5340  001D10  204A               	addwfc	collisionDetect@pTarget+1,w,c
  5341  001D12  6EDA               	movwf	fsr2h,c
  5342  001D14  CFDE F04B          	movff	postinc2,??_collisionDetect
  5343  001D18  CFDD F04C          	movff	postdec2,??_collisionDetect+1
  5344  001D1C  504F               	movf	collisionDetect@i,w,c
  5345  001D1E  0D02               	mullw	2
  5346  001D20  50F3               	movf	prodl,w,c
  5347  001D22  2447               	addwf	collisionDetect@pSource,w,c
  5348  001D24  6ED9               	movwf	fsr2l,c
  5349  001D26  50F4               	movf	prodh,w,c
  5350  001D28  2048               	addwfc	collisionDetect@pSource+1,w,c
  5351  001D2A  6EDA               	movwf	fsr2h,c
  5352  001D2C  CFDE F04D          	movff	postinc2,??_collisionDetect+2
  5353  001D30  CFDD F04E          	movff	postdec2,??_collisionDetect+3
  5354  001D34  504B               	movf	??_collisionDetect,w,c
  5355  001D36  164D               	andwf	??_collisionDetect+2,f,c
  5356  001D38  504C               	movf	??_collisionDetect+1,w,c
  5357  001D3A  164E               	andwf	??_collisionDetect+3,f,c
  5358  001D3C  504D               	movf	??_collisionDetect+2,w,c
  5359  001D3E  104E               	iorwf	??_collisionDetect+3,w,c
  5360  001D40  B4D8               	btfsc	status,2,c
  5361  001D42  D002               	goto	l326
  5362                           
  5363                           ;pictris.c: 779:             return 1;
  5364  001D44  0E01               	movlw	1
  5365  001D46  0012               	return	
  5366  001D48                     l326:
  5367  001D48  2A4F               	incf	collisionDetect@i,f,c
  5368  001D4A  D7D8               	goto	l2822
  5369  001D4C                     u2370:
  5370                           
  5371                           ;pictris.c: 780:     return 0;
  5372  001D4C  0E00               	movlw	0
  5373  001D4E  0012               	return	
  5374  001D50                     __end_of_collisionDetect:
  5375                           	opt stack 0
  5376                           tblptru	equ	0xFF8
  5377                           tblptrh	equ	0xFF7
  5378                           tblptrl	equ	0xFF6
  5379                           tablat	equ	0xFF5
  5380                           prodh	equ	0xFF4
  5381                           prodl	equ	0xFF3
  5382                           intcon	equ	0xFF2
  5383                           indf0	equ	0xFEF
  5384                           postinc0	equ	0xFEE
  5385                           fsr0h	equ	0xFEA
  5386                           fsr0l	equ	0xFE9
  5387                           wreg	equ	0xFE8
  5388                           indf1	equ	0xFE7
  5389                           postinc1	equ	0xFE6
  5390                           postdec1	equ	0xFE5
  5391                           plusw1	equ	0xFE3
  5392                           fsr1h	equ	0xFE2
  5393                           fsr1l	equ	0xFE1
  5394                           indf2	equ	0xFDF
  5395                           postinc2	equ	0xFDE
  5396                           postdec2	equ	0xFDD
  5397                           preinc2	equ	0xFDC
  5398                           plusw2	equ	0xFDB
  5399                           fsr2h	equ	0xFDA
  5400                           fsr2l	equ	0xFD9
  5401                           status	equ	0xFD8
  5402                           
  5403 ;; *************** function _checkForBottom *****************
  5404 ;; Defined at:
  5405 ;;		line 751 in file "pictris.c"
  5406 ;; Parameters:    Size  Location     Type
  5407 ;;  pObject         2   18[COMRAM] PTR volatile unsigned sh
  5408 ;;		 -> ObjectData(16), 
  5409 ;; Auto vars:     Size  Location     Type
  5410 ;;  i               1   22[COMRAM] unsigned char 
  5411 ;; Return value:  Size  Location     Type
  5412 ;;                  1    wreg      _Bool 
  5413 ;; Registers used:
  5414 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  5415 ;; Tracked objects:
  5416 ;;		On entry : 0/0
  5417 ;;		On exit  : 0/0
  5418 ;;		Unchanged: 0/0
  5419 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5420 ;;      Params:         2       0       0       0       0       0       0
  5421 ;;      Locals:         1       0       0       0       0       0       0
  5422 ;;      Temps:          2       0       0       0       0       0       0
  5423 ;;      Totals:         5       0       0       0       0       0       0
  5424 ;;Total ram usage:        5 bytes
  5425 ;; Hardware stack levels used:    1
  5426 ;; Hardware stack levels required when called:    2
  5427 ;; This function calls:
  5428 ;;		Nothing
  5429 ;; This function is called by:
  5430 ;;		_moveObjectDown
  5431 ;; This function uses a non-reentrant model
  5432 ;;
  5433                           
  5434                           	psect	text28
  5435  001F84                     __ptext28:
  5436                           	opt stack 0
  5437  001F84                     _checkForBottom:
  5438                           	opt stack 26
  5439                           
  5440                           ;pictris.c: 751: _Bool checkForBottom(volatile uint16_t * pObject);pictris.c: 752: {;pic
      +                          tris.c: 753:     for (byte i = 0; i < 8; i++)
  5441                           
  5442                           ;incstack = 0
  5443  001F84  0E00               	movlw	0
  5444  001F86  6E4B               	movwf	checkForBottom@i,c
  5445  001F88                     l2802:
  5446  001F88  0E07               	movlw	7
  5447  001F8A  644B               	cpfsgt	checkForBottom@i,c
  5448  001F8C  D001               	goto	l312
  5449  001F8E  D012               	goto	u2340
  5450  001F90                     l312:
  5451                           
  5452                           ;pictris.c: 754:         if (pObject[i] & (1<<15))
  5453  001F90  504B               	movf	checkForBottom@i,w,c
  5454  001F92  0D02               	mullw	2
  5455  001F94  50F3               	movf	prodl,w,c
  5456  001F96  2447               	addwf	checkForBottom@pObject,w,c
  5457  001F98  6ED9               	movwf	fsr2l,c
  5458  001F9A  50F4               	movf	prodh,w,c
  5459  001F9C  2048               	addwfc	checkForBottom@pObject+1,w,c
  5460  001F9E  6EDA               	movwf	fsr2h,c
  5461  001FA0  CFDE F049          	movff	postinc2,??_checkForBottom
  5462  001FA4  CFDD F04A          	movff	postdec2,??_checkForBottom+1
  5463  001FA8  AE4A               	btfss	??_checkForBottom+1,7,c
  5464  001FAA  D002               	goto	l314
  5465                           
  5466                           ;pictris.c: 755:             return 1;
  5467  001FAC  0E01               	movlw	1
  5468  001FAE  0012               	return	
  5469  001FB0                     l314:
  5470  001FB0  2A4B               	incf	checkForBottom@i,f,c
  5471  001FB2  D7EA               	goto	l2802
  5472  001FB4                     u2340:
  5473                           
  5474                           ;pictris.c: 756:     return 0;
  5475  001FB4  0E00               	movlw	0
  5476  001FB6  0012               	return	
  5477  001FB8                     __end_of_checkForBottom:
  5478                           	opt stack 0
  5479                           tblptru	equ	0xFF8
  5480                           tblptrh	equ	0xFF7
  5481                           tblptrl	equ	0xFF6
  5482                           tablat	equ	0xFF5
  5483                           prodh	equ	0xFF4
  5484                           prodl	equ	0xFF3
  5485                           intcon	equ	0xFF2
  5486                           indf0	equ	0xFEF
  5487                           postinc0	equ	0xFEE
  5488                           fsr0h	equ	0xFEA
  5489                           fsr0l	equ	0xFE9
  5490                           wreg	equ	0xFE8
  5491                           indf1	equ	0xFE7
  5492                           postinc1	equ	0xFE6
  5493                           postdec1	equ	0xFE5
  5494                           plusw1	equ	0xFE3
  5495                           fsr1h	equ	0xFE2
  5496                           fsr1l	equ	0xFE1
  5497                           indf2	equ	0xFDF
  5498                           postinc2	equ	0xFDE
  5499                           postdec2	equ	0xFDD
  5500                           preinc2	equ	0xFDC
  5501                           plusw2	equ	0xFDB
  5502                           fsr2h	equ	0xFDA
  5503                           fsr2l	equ	0xFD9
  5504                           status	equ	0xFD8
  5505                           
  5506 ;; *************** function _checkForRightWall *****************
  5507 ;; Defined at:
  5508 ;;		line 768 in file "pictris.c"
  5509 ;; Parameters:    Size  Location     Type
  5510 ;;  pObject         2   18[COMRAM] PTR volatile unsigned sh
  5511 ;;		 -> ObjectData(16), 
  5512 ;; Auto vars:     Size  Location     Type
  5513 ;;		None
  5514 ;; Return value:  Size  Location     Type
  5515 ;;                  1    wreg      _Bool 
  5516 ;; Registers used:
  5517 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  5518 ;; Tracked objects:
  5519 ;;		On entry : 0/0
  5520 ;;		On exit  : 0/0
  5521 ;;		Unchanged: 0/0
  5522 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5523 ;;      Params:         2       0       0       0       0       0       0
  5524 ;;      Locals:         0       0       0       0       0       0       0
  5525 ;;      Temps:          2       0       0       0       0       0       0
  5526 ;;      Totals:         4       0       0       0       0       0       0
  5527 ;;Total ram usage:        4 bytes
  5528 ;; Hardware stack levels used:    1
  5529 ;; Hardware stack levels required when called:    2
  5530 ;; This function calls:
  5531 ;;		Nothing
  5532 ;; This function is called by:
  5533 ;;		_checkButtons
  5534 ;; This function uses a non-reentrant model
  5535 ;;
  5536                           
  5537                           	psect	text29
  5538  002102                     __ptext29:
  5539                           	opt stack 0
  5540  002102                     _checkForRightWall:
  5541                           	opt stack 26
  5542                           
  5543                           ;pictris.c: 768: _Bool checkForRightWall(volatile uint16_t * pObject);pictris.c: 769: {;
      +                          pictris.c: 770:     return pObject[7] != 0;
  5544                           
  5545                           ;incstack = 0
  5546  002102  EE20 F00E          	lfsr	2,14
  5547  002106  5047               	movf	checkForRightWall@pObject,w,c
  5548  002108  26D9               	addwf	fsr2l,f,c
  5549  00210A  5048               	movf	checkForRightWall@pObject+1,w,c
  5550  00210C  22DA               	addwfc	fsr2h,f,c
  5551  00210E  50DE               	movf	postinc2,w,c
  5552  002110  10DE               	iorwf	postinc2,w,c
  5553  002112  B4D8               	btfsc	status,2,c
  5554  002114  D002               	goto	u2620
  5555  002116  0E01               	movlw	1
  5556  002118  0012               	return	
  5557  00211A                     u2620:
  5558  00211A  0E00               	movlw	0
  5559  00211C  0012               	return	
  5560  00211E                     __end_of_checkForRightWall:
  5561                           	opt stack 0
  5562                           tblptru	equ	0xFF8
  5563                           tblptrh	equ	0xFF7
  5564                           tblptrl	equ	0xFF6
  5565                           tablat	equ	0xFF5
  5566                           prodh	equ	0xFF4
  5567                           prodl	equ	0xFF3
  5568                           intcon	equ	0xFF2
  5569                           indf0	equ	0xFEF
  5570                           postinc0	equ	0xFEE
  5571                           fsr0h	equ	0xFEA
  5572                           fsr0l	equ	0xFE9
  5573                           wreg	equ	0xFE8
  5574                           indf1	equ	0xFE7
  5575                           postinc1	equ	0xFE6
  5576                           postdec1	equ	0xFE5
  5577                           plusw1	equ	0xFE3
  5578                           fsr1h	equ	0xFE2
  5579                           fsr1l	equ	0xFE1
  5580                           indf2	equ	0xFDF
  5581                           postinc2	equ	0xFDE
  5582                           postdec2	equ	0xFDD
  5583                           preinc2	equ	0xFDC
  5584                           plusw2	equ	0xFDB
  5585                           fsr2h	equ	0xFDA
  5586                           fsr2l	equ	0xFD9
  5587                           status	equ	0xFD8
  5588                           
  5589 ;; *************** function _checkForLeftWall *****************
  5590 ;; Defined at:
  5591 ;;		line 761 in file "pictris.c"
  5592 ;; Parameters:    Size  Location     Type
  5593 ;;  pObject         2   18[COMRAM] PTR volatile unsigned sh
  5594 ;;		 -> ObjectData(16), 
  5595 ;; Auto vars:     Size  Location     Type
  5596 ;;		None
  5597 ;; Return value:  Size  Location     Type
  5598 ;;                  1    wreg      _Bool 
  5599 ;; Registers used:
  5600 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  5601 ;; Tracked objects:
  5602 ;;		On entry : 0/0
  5603 ;;		On exit  : 0/0
  5604 ;;		Unchanged: 0/0
  5605 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5606 ;;      Params:         2       0       0       0       0       0       0
  5607 ;;      Locals:         0       0       0       0       0       0       0
  5608 ;;      Temps:          2       0       0       0       0       0       0
  5609 ;;      Totals:         4       0       0       0       0       0       0
  5610 ;;Total ram usage:        4 bytes
  5611 ;; Hardware stack levels used:    1
  5612 ;; Hardware stack levels required when called:    2
  5613 ;; This function calls:
  5614 ;;		Nothing
  5615 ;; This function is called by:
  5616 ;;		_checkButtons
  5617 ;; This function uses a non-reentrant model
  5618 ;;
  5619                           
  5620                           	psect	text30
  5621  00211E                     __ptext30:
  5622                           	opt stack 0
  5623  00211E                     _checkForLeftWall:
  5624                           	opt stack 26
  5625                           
  5626                           ;pictris.c: 761: _Bool checkForLeftWall(volatile uint16_t * pObject);pictris.c: 762: {;p
      +                          ictris.c: 763:     return pObject[0] != 0;
  5627                           
  5628                           ;incstack = 0
  5629  00211E  C047  FFD9         	movff	checkForLeftWall@pObject,fsr2l
  5630  002122  C048  FFDA         	movff	checkForLeftWall@pObject+1,fsr2h
  5631  002126  50DE               	movf	postinc2,w,c
  5632  002128  10DE               	iorwf	postinc2,w,c
  5633  00212A  B4D8               	btfsc	status,2,c
  5634  00212C  D002               	goto	u2600
  5635  00212E  0E01               	movlw	1
  5636  002130  0012               	return	
  5637  002132                     u2600:
  5638  002132  0E00               	movlw	0
  5639  002134  0012               	return	
  5640  002136                     __end_of_checkForLeftWall:
  5641                           	opt stack 0
  5642                           tblptru	equ	0xFF8
  5643                           tblptrh	equ	0xFF7
  5644                           tblptrl	equ	0xFF6
  5645                           tablat	equ	0xFF5
  5646                           prodh	equ	0xFF4
  5647                           prodl	equ	0xFF3
  5648                           intcon	equ	0xFF2
  5649                           indf0	equ	0xFEF
  5650                           postinc0	equ	0xFEE
  5651                           fsr0h	equ	0xFEA
  5652                           fsr0l	equ	0xFE9
  5653                           wreg	equ	0xFE8
  5654                           indf1	equ	0xFE7
  5655                           postinc1	equ	0xFE6
  5656                           postdec1	equ	0xFE5
  5657                           plusw1	equ	0xFE3
  5658                           fsr1h	equ	0xFE2
  5659                           fsr1l	equ	0xFE1
  5660                           indf2	equ	0xFDF
  5661                           postinc2	equ	0xFDE
  5662                           postdec2	equ	0xFDD
  5663                           preinc2	equ	0xFDC
  5664                           plusw2	equ	0xFDB
  5665                           fsr2h	equ	0xFDA
  5666                           fsr2l	equ	0xFD9
  5667                           status	equ	0xFD8
  5668                           
  5669 ;; *************** function _MoveSnakes *****************
  5670 ;; Defined at:
  5671 ;;		line 633 in file "pictris.c"
  5672 ;; Parameters:    Size  Location     Type
  5673 ;;		None
  5674 ;; Auto vars:     Size  Location     Type
  5675 ;;  i               1   40[COMRAM] unsigned char 
  5676 ;; Return value:  Size  Location     Type
  5677 ;;                  1    wreg      void 
  5678 ;; Registers used:
  5679 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5680 ;; Tracked objects:
  5681 ;;		On entry : 0/0
  5682 ;;		On exit  : 0/0
  5683 ;;		Unchanged: 0/0
  5684 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5685 ;;      Params:         0       0       0       0       0       0       0
  5686 ;;      Locals:         1       0       0       0       0       0       0
  5687 ;;      Temps:          8       0       0       0       0       0       0
  5688 ;;      Totals:         9       0       0       0       0       0       0
  5689 ;;Total ram usage:        9 bytes
  5690 ;; Hardware stack levels used:    1
  5691 ;; Hardware stack levels required when called:    5
  5692 ;; This function calls:
  5693 ;;		_CreateBerry
  5694 ;;		_SnakeGraph
  5695 ;; This function is called by:
  5696 ;;		_mainGameLoop
  5697 ;; This function uses a non-reentrant model
  5698 ;;
  5699                           
  5700                           	psect	text31
  5701  000934                     __ptext31:
  5702                           	opt stack 0
  5703  000934                     _MoveSnakes:
  5704                           	opt stack 24
  5705                           
  5706                           ;pictris.c: 635:     uint8_t i;;pictris.c: 636:     switch (direction){
  5707                           
  5708                           ;incstack = 0
  5709  000934  D030               	goto	l248
  5710  000936                     
  5711                           ;pictris.c: 638:             positions[0].y = positions[0].y - 1;
  5712  000936  0101               	movlb	1	; () banked
  5713  000938  0501               	decf	(_positions+1)& (0+255),w,b
  5714  00093A  6F01               	movwf	(_positions+1)& (0+255),b
  5715                           
  5716                           ; BSR set to: 1
  5717                           ;pictris.c: 639:             previous_direction = 0;
  5718  00093C  0E00               	movlw	0
  5719  00093E  6E08               	movwf	_previous_direction,c
  5720                           
  5721                           ; BSR set to: 1
  5722                           ;pictris.c: 640:             if (positions[0].y >= 200){
  5723  000940  0EC7               	movlw	199
  5724  000942  6501               	cpfsgt	(_positions+1)& (0+255),b
  5725  000944  D03C               	goto	l251
  5726                           
  5727                           ; BSR set to: 1
  5728                           ;pictris.c: 641:                 positions[0].y = 15;
  5729  000946  0E0F               	movlw	15
  5730  000948  D019               	goto	L4
  5731  00094A                     
  5732                           ;pictris.c: 645:             positions[0].x = positions[0].x + 1;
  5733                           
  5734                           ; BSR set to: 1
  5735  00094A  0101               	movlb	1	; () banked
  5736  00094C  2900               	incf	_positions& (0+255),w,b
  5737  00094E  6F00               	movwf	_positions& (0+255),b
  5738                           
  5739                           ; BSR set to: 1
  5740                           ;pictris.c: 646:             previous_direction = 1;
  5741  000950  0E01               	movlw	1
  5742  000952  6E08               	movwf	_previous_direction,c
  5743                           
  5744                           ; BSR set to: 1
  5745                           ;pictris.c: 647:             if (positions[0].x > 7 & positions[0].x < 200){
  5746  000954  0E07               	movlw	7
  5747  000956  6500               	cpfsgt	_positions& (0+255),b
  5748  000958  D032               	goto	l251
  5749                           
  5750                           ; BSR set to: 1
  5751  00095A  0EC8               	movlw	200
  5752  00095C  6100               	cpfslt	_positions& (0+255),b
  5753  00095E  D02F               	goto	l251
  5754                           
  5755                           ; BSR set to: 1
  5756                           ;pictris.c: 648:                 positions[0].x = 0;
  5757  000960  0E00               	movlw	0
  5758  000962  D017               	goto	L5
  5759  000964                     
  5760                           ;pictris.c: 652:             positions[0].y = positions[0].y + 1;
  5761                           
  5762                           ; BSR set to: 1
  5763  000964  0101               	movlb	1	; () banked
  5764  000966  2901               	incf	(_positions+1)& (0+255),w,b
  5765  000968  6F01               	movwf	(_positions+1)& (0+255),b
  5766                           
  5767                           ; BSR set to: 1
  5768                           ;pictris.c: 653:             previous_direction = 2;
  5769  00096A  0E02               	movlw	2
  5770  00096C  6E08               	movwf	_previous_direction,c
  5771                           
  5772                           ; BSR set to: 1
  5773                           ;pictris.c: 654:             if (positions[0].y > 15 & positions[0].y < 200) {
  5774  00096E  0E0F               	movlw	15
  5775  000970  6501               	cpfsgt	(_positions+1)& (0+255),b
  5776  000972  D025               	goto	l251
  5777                           
  5778                           ; BSR set to: 1
  5779  000974  0EC8               	movlw	200
  5780  000976  6101               	cpfslt	(_positions+1)& (0+255),b
  5781  000978  D022               	goto	l251
  5782                           
  5783                           ; BSR set to: 1
  5784                           ;pictris.c: 655:                 positions[0].y = 0;
  5785  00097A  0E00               	movlw	0
  5786  00097C                     L4:
  5787  00097C  6F01               	movwf	(_positions+1)& (0+255),b
  5788                           
  5789                           ; BSR set to: 1
  5790                           ;pictris.c: 657:             break;
  5791                           
  5792                           ;pictris.c: 656:             };
  5793  00097E  D01F               	goto	l251
  5794  000980                     
  5795                           ;pictris.c: 659:             positions[0].x = positions[0].x - 1;
  5796                           
  5797                           ; BSR set to: 1
  5798  000980  0101               	movlb	1	; () banked
  5799  000982  0500               	decf	_positions& (0+255),w,b
  5800  000984  6F00               	movwf	_positions& (0+255),b
  5801                           
  5802                           ; BSR set to: 1
  5803                           ;pictris.c: 660:             previous_direction = 3;
  5804  000986  0E03               	movlw	3
  5805  000988  6E08               	movwf	_previous_direction,c
  5806                           
  5807                           ; BSR set to: 1
  5808                           ;pictris.c: 661:             if (positions[0].x >= 200){
  5809  00098A  0EC7               	movlw	199
  5810  00098C  6500               	cpfsgt	_positions& (0+255),b
  5811  00098E  D017               	goto	l251
  5812                           
  5813                           ; BSR set to: 1
  5814                           ;pictris.c: 662:                 positions[0].x = 7;
  5815  000990  0E07               	movlw	7
  5816  000992                     L5:
  5817  000992  6F00               	movwf	_positions& (0+255),b
  5818                           
  5819                           ; BSR set to: 1
  5820                           ;pictris.c: 665:     };
  5821                           
  5822                           ; BSR set to: 1
  5823                           ;pictris.c: 664:             break;
  5824                           
  5825                           ;pictris.c: 663:             };
  5826  000994  D014               	goto	l251
  5827  000996                     l248:
  5828                           
  5829                           ; BSR set to: 1
  5830  000996  500D               	movf	_direction,w,c
  5831  000998  6E55               	movwf	??_MoveSnakes& (0+255),c
  5832  00099A  6A56               	clrf	(??_MoveSnakes+1)& (0+255),c
  5833                           
  5834                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  5835                           ; Switch size 1, requested type "space"
  5836                           ; Number of cases is 1, Range of values is 0 to 0
  5837                           ; switch strategies available:
  5838                           ; Name         Instructions Cycles
  5839                           ; simple_byte            4     3 (average)
  5840                           ;	Chosen strategy is simple_byte
  5841  00099C  5056               	movf	??_MoveSnakes+1,w,c
  5842  00099E  0A00               	xorlw	0	; case 0
  5843  0009A0  A4D8               	btfss	status,2,c
  5844  0009A2  D00D               	goto	l251
  5845                           
  5846                           ; Switch size 1, requested type "space"
  5847                           ; Number of cases is 4, Range of values is 0 to 3
  5848                           ; switch strategies available:
  5849                           ; Name         Instructions Cycles
  5850                           ; simple_byte           13     7 (average)
  5851                           ;	Chosen strategy is simple_byte
  5852  0009A4  5055               	movf	??_MoveSnakes,w,c
  5853  0009A6  0A00               	xorlw	0	; case 0
  5854  0009A8  B4D8               	btfsc	status,2,c
  5855  0009AA  D7C5               	goto	l249
  5856  0009AC  0A01               	xorlw	1	; case 1
  5857  0009AE  B4D8               	btfsc	status,2,c
  5858  0009B0  D7CC               	goto	l252
  5859  0009B2  0A03               	xorlw	3	; case 2
  5860  0009B4  B4D8               	btfsc	status,2,c
  5861  0009B6  D7D6               	goto	l254
  5862  0009B8  0A01               	xorlw	1	; case 3
  5863  0009BA  B4D8               	btfsc	status,2,c
  5864  0009BC  D7E1               	goto	l256
  5865  0009BE                     l251:
  5866                           
  5867                           ;pictris.c: 666:     for (i=0;i<=snakeLength;i++){
  5868  0009BE  0E00               	movlw	0
  5869  0009C0  6E5D               	movwf	MoveSnakes@i,c
  5870  0009C2  D06D               	goto	l258
  5871  0009C4                     
  5872                           ;pictris.c: 667:         positions[(snakeLength - i)+1].y = positions[snakeLength-i].y;
  5873  0009C4  505D               	movf	MoveSnakes@i,w,c
  5874  0009C6  6E55               	movwf	??_MoveSnakes& (0+255),c
  5875  0009C8  6A56               	clrf	(??_MoveSnakes+1)& (0+255),c
  5876  0009CA  1E55               	comf	??_MoveSnakes,f,c
  5877  0009CC  1E56               	comf	??_MoveSnakes+1,f,c
  5878  0009CE  4A55               	infsnz	??_MoveSnakes,f,c
  5879  0009D0  2A56               	incf	??_MoveSnakes+1,f,c
  5880  0009D2  500B               	movf	_snakeLength,w,c
  5881  0009D4  6E57               	movwf	(??_MoveSnakes+2)& (0+255),c
  5882  0009D6  6A58               	clrf	(??_MoveSnakes+3)& (0+255),c
  5883  0009D8  5055               	movf	??_MoveSnakes,w,c
  5884  0009DA  2657               	addwf	??_MoveSnakes+2,f,c
  5885  0009DC  5056               	movf	??_MoveSnakes+1,w,c
  5886  0009DE  2258               	addwfc	??_MoveSnakes+3,f,c
  5887  0009E0  90D8               	bcf	status,0,c
  5888  0009E2  3657               	rlcf	??_MoveSnakes+2,f,c
  5889  0009E4  3658               	rlcf	??_MoveSnakes+3,f,c
  5890  0009E6  0E01               	movlw	1
  5891  0009E8  2657               	addwf	??_MoveSnakes+2,f,c
  5892  0009EA  0E00               	movlw	0
  5893  0009EC  2258               	addwfc	??_MoveSnakes+3,f,c
  5894  0009EE  0E00               	movlw	low _positions
  5895  0009F0  2457               	addwf	??_MoveSnakes+2,w,c
  5896  0009F2  6ED9               	movwf	fsr2l,c
  5897  0009F4  0E01               	movlw	high _positions
  5898  0009F6  2058               	addwfc	??_MoveSnakes+3,w,c
  5899  0009F8  6EDA               	movwf	fsr2h,c
  5900  0009FA  505D               	movf	MoveSnakes@i,w,c
  5901  0009FC  6E59               	movwf	(??_MoveSnakes+4)& (0+255),c
  5902  0009FE  6A5A               	clrf	(??_MoveSnakes+5)& (0+255),c
  5903  000A00  1E59               	comf	??_MoveSnakes+4,f,c
  5904  000A02  1E5A               	comf	??_MoveSnakes+5,f,c
  5905  000A04  4A59               	infsnz	??_MoveSnakes+4,f,c
  5906  000A06  2A5A               	incf	??_MoveSnakes+5,f,c
  5907  000A08  500B               	movf	_snakeLength,w,c
  5908  000A0A  6E5B               	movwf	(??_MoveSnakes+6)& (0+255),c
  5909  000A0C  6A5C               	clrf	(??_MoveSnakes+7)& (0+255),c
  5910  000A0E  5059               	movf	??_MoveSnakes+4,w,c
  5911  000A10  265B               	addwf	??_MoveSnakes+6,f,c
  5912  000A12  505A               	movf	??_MoveSnakes+5,w,c
  5913  000A14  225C               	addwfc	??_MoveSnakes+7,f,c
  5914  000A16  90D8               	bcf	status,0,c
  5915  000A18  365B               	rlcf	??_MoveSnakes+6,f,c
  5916  000A1A  365C               	rlcf	??_MoveSnakes+7,f,c
  5917  000A1C  0E03               	movlw	3
  5918  000A1E  265B               	addwf	??_MoveSnakes+6,f,c
  5919  000A20  0E00               	movlw	0
  5920  000A22  225C               	addwfc	??_MoveSnakes+7,f,c
  5921  000A24  0E00               	movlw	low _positions
  5922  000A26  245B               	addwf	??_MoveSnakes+6,w,c
  5923  000A28  6EE1               	movwf	fsr1l,c
  5924  000A2A  0E01               	movlw	high _positions
  5925  000A2C  205C               	addwfc	??_MoveSnakes+7,w,c
  5926  000A2E  6EE2               	movwf	fsr1h,c
  5927  000A30  CFDF FFE7          	movff	indf2,indf1
  5928                           
  5929                           ;pictris.c: 668:         positions[(snakeLength - i)+1].x = positions[snakeLength-i].x;
  5930  000A34  505D               	movf	MoveSnakes@i,w,c
  5931  000A36  6E55               	movwf	??_MoveSnakes& (0+255),c
  5932  000A38  6A56               	clrf	(??_MoveSnakes+1)& (0+255),c
  5933  000A3A  1E55               	comf	??_MoveSnakes,f,c
  5934  000A3C  1E56               	comf	??_MoveSnakes+1,f,c
  5935  000A3E  4A55               	infsnz	??_MoveSnakes,f,c
  5936  000A40  2A56               	incf	??_MoveSnakes+1,f,c
  5937  000A42  500B               	movf	_snakeLength,w,c
  5938  000A44  6E57               	movwf	(??_MoveSnakes+2)& (0+255),c
  5939  000A46  6A58               	clrf	(??_MoveSnakes+3)& (0+255),c
  5940  000A48  5055               	movf	??_MoveSnakes,w,c
  5941  000A4A  2657               	addwf	??_MoveSnakes+2,f,c
  5942  000A4C  5056               	movf	??_MoveSnakes+1,w,c
  5943  000A4E  2258               	addwfc	??_MoveSnakes+3,f,c
  5944  000A50  90D8               	bcf	status,0,c
  5945  000A52  3657               	rlcf	??_MoveSnakes+2,f,c
  5946  000A54  3658               	rlcf	??_MoveSnakes+3,f,c
  5947  000A56  0E00               	movlw	low _positions
  5948  000A58  2457               	addwf	??_MoveSnakes+2,w,c
  5949  000A5A  6ED9               	movwf	fsr2l,c
  5950  000A5C  0E01               	movlw	high _positions
  5951  000A5E  2058               	addwfc	??_MoveSnakes+3,w,c
  5952  000A60  6EDA               	movwf	fsr2h,c
  5953  000A62  505D               	movf	MoveSnakes@i,w,c
  5954  000A64  6E59               	movwf	(??_MoveSnakes+4)& (0+255),c
  5955  000A66  6A5A               	clrf	(??_MoveSnakes+5)& (0+255),c
  5956  000A68  1E59               	comf	??_MoveSnakes+4,f,c
  5957  000A6A  1E5A               	comf	??_MoveSnakes+5,f,c
  5958  000A6C  4A59               	infsnz	??_MoveSnakes+4,f,c
  5959  000A6E  2A5A               	incf	??_MoveSnakes+5,f,c
  5960  000A70  500B               	movf	_snakeLength,w,c
  5961  000A72  6E5B               	movwf	(??_MoveSnakes+6)& (0+255),c
  5962  000A74  6A5C               	clrf	(??_MoveSnakes+7)& (0+255),c
  5963  000A76  5059               	movf	??_MoveSnakes+4,w,c
  5964  000A78  265B               	addwf	??_MoveSnakes+6,f,c
  5965  000A7A  505A               	movf	??_MoveSnakes+5,w,c
  5966  000A7C  225C               	addwfc	??_MoveSnakes+7,f,c
  5967  000A7E  90D8               	bcf	status,0,c
  5968  000A80  365B               	rlcf	??_MoveSnakes+6,f,c
  5969  000A82  365C               	rlcf	??_MoveSnakes+7,f,c
  5970  000A84  0E02               	movlw	2
  5971  000A86  265B               	addwf	??_MoveSnakes+6,f,c
  5972  000A88  0E00               	movlw	0
  5973  000A8A  225C               	addwfc	??_MoveSnakes+7,f,c
  5974  000A8C  0E00               	movlw	low _positions
  5975  000A8E  245B               	addwf	??_MoveSnakes+6,w,c
  5976  000A90  6EE1               	movwf	fsr1l,c
  5977  000A92  0E01               	movlw	high _positions
  5978  000A94  205C               	addwfc	??_MoveSnakes+7,w,c
  5979  000A96  6EE2               	movwf	fsr1h,c
  5980  000A98  CFDF FFE7          	movff	indf2,indf1
  5981                           
  5982                           ;pictris.c: 669:     }
  5983  000A9C  2A5D               	incf	MoveSnakes@i,f,c
  5984  000A9E                     l258:
  5985  000A9E  505D               	movf	MoveSnakes@i,w,c
  5986  000AA0  5C0B               	subwf	_snakeLength,w,c
  5987  000AA2  B0D8               	btfsc	status,0,c
  5988  000AA4  D78F               	goto	l259
  5989                           
  5990                           ;pictris.c: 670:     if (positions[0].y == berryY && positions[0].x == berryX){
  5991  000AA6  5009               	movf	_berryY,w,c
  5992  000AA8  0101               	movlb	1	; () banked
  5993  000AAA  1901               	xorwf	(_positions+1)& (0+255),w,b
  5994  000AAC  A4D8               	btfss	status,2,c
  5995  000AAE  D008               	goto	l261
  5996                           
  5997                           ; BSR set to: 1
  5998  000AB0  500A               	movf	_berryX,w,c
  5999  000AB2  1900               	xorwf	_positions& (0+255),w,b
  6000  000AB4  A4D8               	btfss	status,2,c
  6001  000AB6  D004               	goto	l261
  6002                           
  6003                           ; BSR set to: 1
  6004                           ;pictris.c: 671:         snakeLength = snakeLength + 1;
  6005  000AB8  280B               	incf	_snakeLength,w,c
  6006  000ABA  6E0B               	movwf	_snakeLength,c
  6007                           
  6008                           ; BSR set to: 1
  6009                           ;pictris.c: 672:         CreateBerry();
  6010  000ABC  EC11  F00E         	call	_CreateBerry	;wreg free
  6011  000AC0                     l261:
  6012                           
  6013                           ;pictris.c: 674:     for (i=4;i<=snakeLength;i++){
  6014  000AC0  0E04               	movlw	4
  6015  000AC2  6E5D               	movwf	MoveSnakes@i,c
  6016  000AC4  D020               	goto	l262
  6017  000AC6                     
  6018                           ;pictris.c: 675:         if (positions[0].y == positions[i].y && positions[0].x == posit
      +                          ions[i].x){
  6019  000AC6  505D               	movf	MoveSnakes@i,w,c
  6020  000AC8  0D02               	mullw	2
  6021  000ACA  0E01               	movlw	1
  6022  000ACC  26F3               	addwf	prodl,f,c
  6023  000ACE  0E00               	movlw	0
  6024  000AD0  22F4               	addwfc	prodh,f,c
  6025  000AD2  0E00               	movlw	low _positions
  6026  000AD4  24F3               	addwf	prodl,w,c
  6027  000AD6  6ED9               	movwf	fsr2l,c
  6028  000AD8  0E01               	movlw	high _positions
  6029  000ADA  20F4               	addwfc	prodh,w,c
  6030  000ADC  6EDA               	movwf	fsr2h,c
  6031  000ADE  50DE               	movf	postinc2,w,c
  6032  000AE0  0101               	movlb	1	; () banked
  6033  000AE2  1901               	xorwf	(_positions+1)& (0+255),w,b
  6034  000AE4  A4D8               	btfss	status,2,c
  6035  000AE6  D00E               	goto	l264
  6036                           
  6037                           ; BSR set to: 1
  6038  000AE8  505D               	movf	MoveSnakes@i,w,c
  6039  000AEA  0D02               	mullw	2
  6040  000AEC  0E00               	movlw	low _positions
  6041  000AEE  24F3               	addwf	prodl,w,c
  6042  000AF0  6ED9               	movwf	fsr2l,c
  6043  000AF2  0E01               	movlw	high _positions
  6044  000AF4  20F4               	addwfc	prodh,w,c
  6045  000AF6  6EDA               	movwf	fsr2h,c
  6046  000AF8  5100               	movf	_positions& (0+255),w,b
  6047  000AFA  18DE               	xorwf	postinc2,w,c
  6048  000AFC  A4D8               	btfss	status,2,c
  6049  000AFE  D002               	goto	l264
  6050                           
  6051                           ; BSR set to: 1
  6052                           ;pictris.c: 676:             EndOfGame = 1;
  6053  000B00  0E01               	movlw	1
  6054  000B02  6E12               	movwf	_EndOfGame,c
  6055  000B04                     l264:
  6056                           
  6057                           ; BSR set to: 1
  6058                           ;pictris.c: 678:     };
  6059                           
  6060                           ; BSR set to: 1
  6061  000B04  2A5D               	incf	MoveSnakes@i,f,c
  6062  000B06                     l262:
  6063                           
  6064                           ; BSR set to: 1
  6065  000B06  505D               	movf	MoveSnakes@i,w,c
  6066  000B08  5C0B               	subwf	_snakeLength,w,c
  6067  000B0A  B0D8               	btfsc	status,0,c
  6068  000B0C  D7DC               	goto	l263
  6069                           
  6070                           ;pictris.c: 679:     SnakeGraph();
  6071  000B0E  EC12  F007         	call	_SnakeGraph	;wreg free
  6072  000B12  0012               	return		;funcret
  6073  000B14                     __end_of_MoveSnakes:
  6074                           	opt stack 0
  6075                           tblptru	equ	0xFF8
  6076                           tblptrh	equ	0xFF7
  6077                           tblptrl	equ	0xFF6
  6078                           tablat	equ	0xFF5
  6079                           prodh	equ	0xFF4
  6080                           prodl	equ	0xFF3
  6081                           intcon	equ	0xFF2
  6082                           indf0	equ	0xFEF
  6083                           postinc0	equ	0xFEE
  6084                           fsr0h	equ	0xFEA
  6085                           fsr0l	equ	0xFE9
  6086                           wreg	equ	0xFE8
  6087                           indf1	equ	0xFE7
  6088                           postinc1	equ	0xFE6
  6089                           postdec1	equ	0xFE5
  6090                           plusw1	equ	0xFE3
  6091                           fsr1h	equ	0xFE2
  6092                           fsr1l	equ	0xFE1
  6093                           indf2	equ	0xFDF
  6094                           postinc2	equ	0xFDE
  6095                           postdec2	equ	0xFDD
  6096                           preinc2	equ	0xFDC
  6097                           plusw2	equ	0xFDB
  6098                           fsr2h	equ	0xFDA
  6099                           fsr2l	equ	0xFD9
  6100                           status	equ	0xFD8
  6101                           
  6102 ;; *************** function _SnakeGraph *****************
  6103 ;; Defined at:
  6104 ;;		line 603 in file "pictris.c"
  6105 ;; Parameters:    Size  Location     Type
  6106 ;;		None
  6107 ;; Auto vars:     Size  Location     Type
  6108 ;;  i               1   31[COMRAM] unsigned char 
  6109 ;;  j               1   30[COMRAM] unsigned char 
  6110 ;; Return value:  Size  Location     Type
  6111 ;;                  1    wreg      void 
  6112 ;; Registers used:
  6113 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6114 ;; Tracked objects:
  6115 ;;		On entry : 0/0
  6116 ;;		On exit  : 0/0
  6117 ;;		Unchanged: 0/0
  6118 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6119 ;;      Params:         0       0       0       0       0       0       0
  6120 ;;      Locals:         2       0       0       0       0       0       0
  6121 ;;      Temps:          5       0       0       0       0       0       0
  6122 ;;      Totals:         7       0       0       0       0       0       0
  6123 ;;Total ram usage:        7 bytes
  6124 ;; Hardware stack levels used:    1
  6125 ;; Hardware stack levels required when called:    4
  6126 ;; This function calls:
  6127 ;;		_clearArray
  6128 ;;		_pauseMultiplexing
  6129 ;;		_resumeMultiplexing
  6130 ;; This function is called by:
  6131 ;;		_MoveSnakes
  6132 ;; This function uses a non-reentrant model
  6133 ;;
  6134                           
  6135                           	psect	text32
  6136  000E24                     __ptext32:
  6137                           	opt stack 0
  6138  000E24                     _SnakeGraph:
  6139                           	opt stack 24
  6140                           
  6141                           ;pictris.c: 605:     uint8_t i;;pictris.c: 606:     uint8_t j;;pictris.c: 607:     clear
      +                          Array(tmpObjectData, 8);
  6142                           
  6143                           ;incstack = 0
  6144  000E24  0E80               	movlw	low _tmpObjectData
  6145  000E26  6E47               	movwf	clearArray@pArray,c
  6146  000E28  0E00               	movlw	high _tmpObjectData
  6147  000E2A  6E48               	movwf	clearArray@pArray+1,c
  6148  000E2C  0E00               	movlw	0
  6149  000E2E  6E4A               	movwf	clearArray@size+1,c
  6150  000E30  0E08               	movlw	8
  6151  000E32  6E49               	movwf	clearArray@size,c
  6152  000E34  ECDC  F00F         	call	_clearArray	;wreg free
  6153                           
  6154                           ;pictris.c: 608:     for(i=0;i<=snakeLength;i++){
  6155  000E38  0E00               	movlw	0
  6156  000E3A  6E54               	movwf	SnakeGraph@i,c
  6157  000E3C  D043               	goto	l237
  6158  000E3E                     
  6159                           ;pictris.c: 609:         j = positions[i].x;
  6160  000E3E  5054               	movf	SnakeGraph@i,w,c
  6161  000E40  0D02               	mullw	2
  6162  000E42  0E00               	movlw	low _positions
  6163  000E44  24F3               	addwf	prodl,w,c
  6164  000E46  6ED9               	movwf	fsr2l,c
  6165  000E48  0E01               	movlw	high _positions
  6166  000E4A  20F4               	addwfc	prodh,w,c
  6167  000E4C  6EDA               	movwf	fsr2h,c
  6168  000E4E  50DF               	movf	indf2,w,c
  6169  000E50  6E53               	movwf	SnakeGraph@j,c
  6170                           
  6171                           ;pictris.c: 610:         tmpObjectData[j] = (SnakeYtext[positions[i].y] | tmpObjectData[
      +                          j]);
  6172  000E52  5053               	movf	SnakeGraph@j,w,c
  6173  000E54  0D02               	mullw	2
  6174  000E56  0E80               	movlw	low _tmpObjectData
  6175  000E58  24F3               	addwf	prodl,w,c
  6176  000E5A  6ED9               	movwf	fsr2l,c
  6177  000E5C  0E00               	movlw	high _tmpObjectData
  6178  000E5E  20F4               	addwfc	prodh,w,c
  6179  000E60  6EDA               	movwf	fsr2h,c
  6180  000E62  CFDE F04E          	movff	postinc2,??_SnakeGraph
  6181  000E66  CFDD F04F          	movff	postdec2,??_SnakeGraph+1
  6182  000E6A  5054               	movf	SnakeGraph@i,w,c
  6183  000E6C  0D02               	mullw	2
  6184  000E6E  0E01               	movlw	1
  6185  000E70  26F3               	addwf	prodl,f,c
  6186  000E72  0E00               	movlw	0
  6187  000E74  22F4               	addwfc	prodh,f,c
  6188  000E76  0E00               	movlw	low _positions
  6189  000E78  24F3               	addwf	prodl,w,c
  6190  000E7A  6ED9               	movwf	fsr2l,c
  6191  000E7C  0E01               	movlw	high _positions
  6192  000E7E  20F4               	addwfc	prodh,w,c
  6193  000E80  6EDA               	movwf	fsr2h,c
  6194  000E82  50DF               	movf	indf2,w,c
  6195  000E84  6E50               	movwf	(??_SnakeGraph+2)& (0+255),c
  6196  000E86  5050               	movf	??_SnakeGraph+2,w,c
  6197  000E88  0D02               	mullw	2
  6198  000E8A  0E01               	movlw	low _SnakeYtext
  6199  000E8C  24F3               	addwf	prodl,w,c
  6200  000E8E  6EF6               	movwf	tblptrl,c
  6201  000E90  0E06               	movlw	high _SnakeYtext
  6202  000E92  20F4               	addwfc	prodh,w,c
  6203  000E94  6EF7               	movwf	tblptrh,c
  6204  000E96                     	if	0	;There are less than 3 active tblptr bytes
  6205  000E96                     	endif
  6206  000E96  0009               	tblrd		*+
  6207  000E98  CFF5 F051          	movff	tablat,??_SnakeGraph+3
  6208  000E9C  0009               	tblrd		*+
  6209  000E9E  CFF5 F052          	movff	tablat,??_SnakeGraph+4
  6210  000EA2  504E               	movf	??_SnakeGraph,w,c
  6211  000EA4  1251               	iorwf	??_SnakeGraph+3,f,c
  6212  000EA6  504F               	movf	??_SnakeGraph+1,w,c
  6213  000EA8  1252               	iorwf	??_SnakeGraph+4,f,c
  6214  000EAA  5053               	movf	SnakeGraph@j,w,c
  6215  000EAC  0D02               	mullw	2
  6216  000EAE  0E80               	movlw	low _tmpObjectData
  6217  000EB0  24F3               	addwf	prodl,w,c
  6218  000EB2  6ED9               	movwf	fsr2l,c
  6219  000EB4  0E00               	movlw	high _tmpObjectData
  6220  000EB6  20F4               	addwfc	prodh,w,c
  6221  000EB8  6EDA               	movwf	fsr2h,c
  6222  000EBA  C051  FFDE         	movff	??_SnakeGraph+3,postinc2
  6223  000EBE  C052  FFDD         	movff	??_SnakeGraph+4,postdec2
  6224                           
  6225                           ;pictris.c: 619:     }
  6226  000EC2  2A54               	incf	SnakeGraph@i,f,c
  6227  000EC4                     l237:
  6228  000EC4  5054               	movf	SnakeGraph@i,w,c
  6229  000EC6  5C0B               	subwf	_snakeLength,w,c
  6230  000EC8  B0D8               	btfsc	status,0,c
  6231  000ECA  D7B9               	goto	l238
  6232                           
  6233                           ;pictris.c: 620:     for(i=0;i<8;i++){
  6234  000ECC  0E00               	movlw	0
  6235  000ECE  6E54               	movwf	SnakeGraph@i,c
  6236  000ED0                     l4136:
  6237  000ED0  0E07               	movlw	7
  6238  000ED2  6454               	cpfsgt	SnakeGraph@i,c
  6239  000ED4  D001               	goto	l240
  6240  000ED6  D030               	goto	u4380
  6241  000ED8                     l240:
  6242                           
  6243                           ;pictris.c: 621:         if (berryX == i){
  6244  000ED8  5054               	movf	SnakeGraph@i,w,c
  6245  000EDA  180A               	xorwf	_berryX,w,c
  6246  000EDC  A4D8               	btfss	status,2,c
  6247  000EDE  D02A               	goto	l242
  6248                           
  6249                           ;pictris.c: 622:             tmpObjectData[i] = SnakeYtext[berryY] | tmpObjectData[i];
  6250  000EE0  5054               	movf	SnakeGraph@i,w,c
  6251  000EE2  0D02               	mullw	2
  6252  000EE4  0E80               	movlw	low _tmpObjectData
  6253  000EE6  24F3               	addwf	prodl,w,c
  6254  000EE8  6ED9               	movwf	fsr2l,c
  6255  000EEA  0E00               	movlw	high _tmpObjectData
  6256  000EEC  20F4               	addwfc	prodh,w,c
  6257  000EEE  6EDA               	movwf	fsr2h,c
  6258  000EF0  CFDE F04E          	movff	postinc2,??_SnakeGraph
  6259  000EF4  CFDD F04F          	movff	postdec2,??_SnakeGraph+1
  6260  000EF8  5009               	movf	_berryY,w,c
  6261  000EFA  0D02               	mullw	2
  6262  000EFC  0E01               	movlw	low _SnakeYtext
  6263  000EFE  24F3               	addwf	prodl,w,c
  6264  000F00  6EF6               	movwf	tblptrl,c
  6265  000F02  0E06               	movlw	high _SnakeYtext
  6266  000F04  20F4               	addwfc	prodh,w,c
  6267  000F06  6EF7               	movwf	tblptrh,c
  6268  000F08                     	if	0	;There are less than 3 active tblptr bytes
  6269  000F08                     	endif
  6270  000F08  0009               	tblrd		*+
  6271  000F0A  CFF5 F050          	movff	tablat,??_SnakeGraph+2
  6272  000F0E  0009               	tblrd		*+
  6273  000F10  CFF5 F051          	movff	tablat,??_SnakeGraph+3
  6274  000F14  504E               	movf	??_SnakeGraph,w,c
  6275  000F16  1250               	iorwf	??_SnakeGraph+2,f,c
  6276  000F18  504F               	movf	??_SnakeGraph+1,w,c
  6277  000F1A  1251               	iorwf	??_SnakeGraph+3,f,c
  6278  000F1C  5054               	movf	SnakeGraph@i,w,c
  6279  000F1E  0D02               	mullw	2
  6280  000F20  0E80               	movlw	low _tmpObjectData
  6281  000F22  24F3               	addwf	prodl,w,c
  6282  000F24  6ED9               	movwf	fsr2l,c
  6283  000F26  0E00               	movlw	high _tmpObjectData
  6284  000F28  20F4               	addwfc	prodh,w,c
  6285  000F2A  6EDA               	movwf	fsr2h,c
  6286  000F2C  C050  FFDE         	movff	??_SnakeGraph+2,postinc2
  6287  000F30  C051  FFDD         	movff	??_SnakeGraph+3,postdec2
  6288  000F34                     l242:
  6289                           
  6290                           ;pictris.c: 624:     }
  6291  000F34  2A54               	incf	SnakeGraph@i,f,c
  6292  000F36  D7CC               	goto	l4136
  6293  000F38                     u4380:
  6294                           
  6295                           ;pictris.c: 625:     pauseMultiplexing();
  6296  000F38  ECC0  F010         	call	_pauseMultiplexing	;wreg free
  6297                           
  6298                           ;pictris.c: 626:     clearArray(ObjectData, 8);
  6299  000F3C  0E18               	movlw	low _ObjectData
  6300  000F3E  6E47               	movwf	clearArray@pArray,c
  6301  000F40  0E00               	movlw	high _ObjectData
  6302  000F42  6E48               	movwf	clearArray@pArray+1,c
  6303  000F44  0E00               	movlw	0
  6304  000F46  6E4A               	movwf	clearArray@size+1,c
  6305  000F48  0E08               	movlw	8
  6306  000F4A  6E49               	movwf	clearArray@size,c
  6307  000F4C  ECDC  F00F         	call	_clearArray	;wreg free
  6308                           
  6309                           ;pictris.c: 627:     for(i=0;i<8;i++){
  6310  000F50  0E00               	movlw	0
  6311  000F52  6E54               	movwf	SnakeGraph@i,c
  6312  000F54                     l4154:
  6313  000F54  0E07               	movlw	7
  6314  000F56  6454               	cpfsgt	SnakeGraph@i,c
  6315  000F58  D001               	goto	l243
  6316  000F5A  D016               	goto	u4400
  6317  000F5C                     l243:
  6318                           
  6319                           ;pictris.c: 628:         ObjectData[i] = tmpObjectData[i];
  6320  000F5C  5054               	movf	SnakeGraph@i,w,c
  6321  000F5E  0D02               	mullw	2
  6322  000F60  0E80               	movlw	low _tmpObjectData
  6323  000F62  24F3               	addwf	prodl,w,c
  6324  000F64  6ED9               	movwf	fsr2l,c
  6325  000F66  0E00               	movlw	high _tmpObjectData
  6326  000F68  20F4               	addwfc	prodh,w,c
  6327  000F6A  6EDA               	movwf	fsr2h,c
  6328  000F6C  5054               	movf	SnakeGraph@i,w,c
  6329  000F6E  0D02               	mullw	2
  6330  000F70  0E18               	movlw	low _ObjectData
  6331  000F72  24F3               	addwf	prodl,w,c
  6332  000F74  6EE1               	movwf	fsr1l,c
  6333  000F76  0E00               	movlw	high _ObjectData
  6334  000F78  20F4               	addwfc	prodh,w,c
  6335  000F7A  6EE2               	movwf	fsr1h,c
  6336  000F7C  CFDE FFE6          	movff	postinc2,postinc1
  6337  000F80  CFDD FFE5          	movff	postdec2,postdec1
  6338                           
  6339                           ;pictris.c: 629:     }
  6340  000F84  2A54               	incf	SnakeGraph@i,f,c
  6341  000F86  D7E6               	goto	l4154
  6342  000F88                     u4400:
  6343                           
  6344                           ;pictris.c: 630:     resumeMultiplexing();
  6345  000F88  ECD2  F010         	call	_resumeMultiplexing	;wreg free
  6346  000F8C  0012               	return		;funcret
  6347  000F8E                     __end_of_SnakeGraph:
  6348                           	opt stack 0
  6349                           tblptru	equ	0xFF8
  6350                           tblptrh	equ	0xFF7
  6351                           tblptrl	equ	0xFF6
  6352                           tablat	equ	0xFF5
  6353                           prodh	equ	0xFF4
  6354                           prodl	equ	0xFF3
  6355                           intcon	equ	0xFF2
  6356                           indf0	equ	0xFEF
  6357                           postinc0	equ	0xFEE
  6358                           fsr0h	equ	0xFEA
  6359                           fsr0l	equ	0xFE9
  6360                           wreg	equ	0xFE8
  6361                           indf1	equ	0xFE7
  6362                           postinc1	equ	0xFE6
  6363                           postdec1	equ	0xFE5
  6364                           plusw1	equ	0xFE3
  6365                           fsr1h	equ	0xFE2
  6366                           fsr1l	equ	0xFE1
  6367                           indf2	equ	0xFDF
  6368                           postinc2	equ	0xFDE
  6369                           postdec2	equ	0xFDD
  6370                           preinc2	equ	0xFDC
  6371                           plusw2	equ	0xFDB
  6372                           fsr2h	equ	0xFDA
  6373                           fsr2l	equ	0xFD9
  6374                           status	equ	0xFD8
  6375                           
  6376 ;; *************** function _CreateBerry *****************
  6377 ;; Defined at:
  6378 ;;		line 583 in file "pictris.c"
  6379 ;; Parameters:    Size  Location     Type
  6380 ;;		None
  6381 ;; Auto vars:     Size  Location     Type
  6382 ;;  i               1   27[COMRAM] unsigned char 
  6383 ;;  randomGood      1   26[COMRAM] _Bool 
  6384 ;; Return value:  Size  Location     Type
  6385 ;;                  1    wreg      void 
  6386 ;; Registers used:
  6387 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6388 ;; Tracked objects:
  6389 ;;		On entry : 0/0
  6390 ;;		On exit  : 0/0
  6391 ;;		Unchanged: 0/0
  6392 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6393 ;;      Params:         0       0       0       0       0       0       0
  6394 ;;      Locals:         2       0       0       0       0       0       0
  6395 ;;      Temps:          1       0       0       0       0       0       0
  6396 ;;      Totals:         3       0       0       0       0       0       0
  6397 ;;Total ram usage:        3 bytes
  6398 ;; Hardware stack levels used:    1
  6399 ;; Hardware stack levels required when called:    4
  6400 ;; This function calls:
  6401 ;;		_genBerry
  6402 ;; This function is called by:
  6403 ;;		_MoveSnakes
  6404 ;;		_initialise_globals
  6405 ;; This function uses a non-reentrant model
  6406 ;;
  6407                           
  6408                           	psect	text33
  6409  001C22                     __ptext33:
  6410                           	opt stack 0
  6411  001C22                     _CreateBerry:
  6412                           	opt stack 24
  6413                           
  6414                           ;pictris.c: 585:     _Bool randomGood;;pictris.c: 586:     uint8_t i;;pictris.c: 587:   
      +                            randomGood = 1;
  6415                           
  6416                           ;incstack = 0
  6417  001C22  0E01               	movlw	1
  6418  001C24  6E4F               	movwf	CreateBerry@randomGood,c
  6419  001C26                     l228:
  6420                           
  6421                           ;pictris.c: 589:     {;pictris.c: 590:         randomGood = 0;
  6422  001C26  0E00               	movlw	0
  6423  001C28  6E4F               	movwf	CreateBerry@randomGood,c
  6424                           
  6425                           ;pictris.c: 591:         berryX = genBerry(8);
  6426  001C2A  0E08               	movlw	8
  6427  001C2C  EC9B  F010         	call	_genBerry
  6428  001C30  6E0A               	movwf	_berryX,c
  6429                           
  6430                           ;pictris.c: 592:         berryY = genBerry(16);
  6431  001C32  0E10               	movlw	16
  6432  001C34  EC9B  F010         	call	_genBerry
  6433  001C38  6E09               	movwf	_berryY,c
  6434                           
  6435                           ;pictris.c: 593:         for(i=0;i<snakeLength;i++)
  6436  001C3A  0E00               	movlw	0
  6437  001C3C  6E50               	movwf	CreateBerry@i,c
  6438  001C3E  D01F               	goto	l229
  6439  001C40                     
  6440                           ;pictris.c: 594:         {;pictris.c: 595:             if (berryX == positions[i].x && b
      +                          erryY == positions[i].y)
  6441  001C40  5050               	movf	CreateBerry@i,w,c
  6442  001C42  0D02               	mullw	2
  6443  001C44  0E00               	movlw	low _positions
  6444  001C46  24F3               	addwf	prodl,w,c
  6445  001C48  6ED9               	movwf	fsr2l,c
  6446  001C4A  0E01               	movlw	high _positions
  6447  001C4C  20F4               	addwfc	prodh,w,c
  6448  001C4E  6EDA               	movwf	fsr2h,c
  6449  001C50  500A               	movf	_berryX,w,c
  6450  001C52  18DE               	xorwf	postinc2,w,c
  6451  001C54  A4D8               	btfss	status,2,c
  6452  001C56  D012               	goto	l231
  6453  001C58  5050               	movf	CreateBerry@i,w,c
  6454  001C5A  0D02               	mullw	2
  6455  001C5C  0E01               	movlw	1
  6456  001C5E  26F3               	addwf	prodl,f,c
  6457  001C60  0E00               	movlw	0
  6458  001C62  22F4               	addwfc	prodh,f,c
  6459  001C64  0E00               	movlw	low _positions
  6460  001C66  24F3               	addwf	prodl,w,c
  6461  001C68  6ED9               	movwf	fsr2l,c
  6462  001C6A  0E01               	movlw	high _positions
  6463  001C6C  20F4               	addwfc	prodh,w,c
  6464  001C6E  6EDA               	movwf	fsr2h,c
  6465  001C70  5009               	movf	_berryY,w,c
  6466  001C72  18DE               	xorwf	postinc2,w,c
  6467  001C74  A4D8               	btfss	status,2,c
  6468  001C76  D002               	goto	l231
  6469                           
  6470                           ;pictris.c: 596:             {;pictris.c: 597:                 randomGood = 1;
  6471  001C78  0E01               	movlw	1
  6472  001C7A  6E4F               	movwf	CreateBerry@randomGood,c
  6473  001C7C                     l231:
  6474                           
  6475                           ;pictris.c: 599:         }
  6476  001C7C  2A50               	incf	CreateBerry@i,f,c
  6477  001C7E                     l229:
  6478  001C7E  500B               	movf	_snakeLength,w,c
  6479  001C80  5C50               	subwf	CreateBerry@i,w,c
  6480  001C82  A0D8               	btfss	status,0,c
  6481  001C84  D7DD               	goto	l230
  6482                           
  6483                           ;pictris.c: 600:     } while (randomGood == 1);
  6484  001C86  044F               	decf	CreateBerry@randomGood,w,c
  6485  001C88  A4D8               	btfss	status,2,c
  6486  001C8A  0012               	return	
  6487  001C8C  D7CC               	goto	l228
  6488  001C8E                     __end_of_CreateBerry:
  6489                           	opt stack 0
  6490                           tblptru	equ	0xFF8
  6491                           tblptrh	equ	0xFF7
  6492                           tblptrl	equ	0xFF6
  6493                           tablat	equ	0xFF5
  6494                           prodh	equ	0xFF4
  6495                           prodl	equ	0xFF3
  6496                           intcon	equ	0xFF2
  6497                           indf0	equ	0xFEF
  6498                           postinc0	equ	0xFEE
  6499                           fsr0h	equ	0xFEA
  6500                           fsr0l	equ	0xFE9
  6501                           wreg	equ	0xFE8
  6502                           indf1	equ	0xFE7
  6503                           postinc1	equ	0xFE6
  6504                           postdec1	equ	0xFE5
  6505                           plusw1	equ	0xFE3
  6506                           fsr1h	equ	0xFE2
  6507                           fsr1l	equ	0xFE1
  6508                           indf2	equ	0xFDF
  6509                           postinc2	equ	0xFDE
  6510                           postdec2	equ	0xFDD
  6511                           preinc2	equ	0xFDC
  6512                           plusw2	equ	0xFDB
  6513                           fsr2h	equ	0xFDA
  6514                           fsr2l	equ	0xFD9
  6515                           status	equ	0xFD8
  6516                           
  6517 ;; *************** function _genBerry *****************
  6518 ;; Defined at:
  6519 ;;		line 576 in file "pictris.c"
  6520 ;; Parameters:    Size  Location     Type
  6521 ;;  size            1    wreg     unsigned char 
  6522 ;; Auto vars:     Size  Location     Type
  6523 ;;  size            1   23[COMRAM] unsigned char 
  6524 ;;  temp            1   24[COMRAM] unsigned char 
  6525 ;; Return value:  Size  Location     Type
  6526 ;;                  1    wreg      unsigned char 
  6527 ;; Registers used:
  6528 ;;		wreg, status,2, status,0, cstack
  6529 ;; Tracked objects:
  6530 ;;		On entry : 0/0
  6531 ;;		On exit  : 0/0
  6532 ;;		Unchanged: 0/0
  6533 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6534 ;;      Params:         0       0       0       0       0       0       0
  6535 ;;      Locals:         2       0       0       0       0       0       0
  6536 ;;      Temps:          0       0       0       0       0       0       0
  6537 ;;      Totals:         2       0       0       0       0       0       0
  6538 ;;Total ram usage:        2 bytes
  6539 ;; Hardware stack levels used:    1
  6540 ;; Hardware stack levels required when called:    3
  6541 ;; This function calls:
  6542 ;;		___lbmod
  6543 ;;		_rnd_get_num
  6544 ;; This function is called by:
  6545 ;;		_CreateBerry
  6546 ;; This function uses a non-reentrant model
  6547 ;;
  6548                           
  6549                           	psect	text34
  6550  002136                     __ptext34:
  6551                           	opt stack 0
  6552  002136                     _genBerry:
  6553                           	opt stack 24
  6554                           
  6555                           ;incstack = 0
  6556                           ;genBerry@size stored from wreg
  6557  002136  6E4C               	movwf	genBerry@size,c
  6558                           
  6559                           ;pictris.c: 576: uint8_t genBerry(uint8_t size);pictris.c: 577: {;pictris.c: 578:     ui
      +                          nt8_t temp;;pictris.c: 579:     temp = rnd_get_num();
  6560  002138  EC27  F00F         	call	_rnd_get_num	;wreg free
  6561  00213C  6E4D               	movwf	genBerry@temp,c
  6562                           
  6563                           ;pictris.c: 580:     temp = temp % size;
  6564  00213E  C04C  F047         	movff	genBerry@size,___lbmod@divisor
  6565  002142  504D               	movf	genBerry@temp,w,c
  6566  002144  EC23  F010         	call	___lbmod
  6567  002148  6E4D               	movwf	genBerry@temp,c
  6568                           
  6569                           ;pictris.c: 581:     return temp;
  6570  00214A  504D               	movf	genBerry@temp,w,c
  6571  00214C  0012               	return	
  6572  00214E                     __end_of_genBerry:
  6573                           	opt stack 0
  6574                           tblptru	equ	0xFF8
  6575                           tblptrh	equ	0xFF7
  6576                           tblptrl	equ	0xFF6
  6577                           tablat	equ	0xFF5
  6578                           prodh	equ	0xFF4
  6579                           prodl	equ	0xFF3
  6580                           intcon	equ	0xFF2
  6581                           indf0	equ	0xFEF
  6582                           postinc0	equ	0xFEE
  6583                           fsr0h	equ	0xFEA
  6584                           fsr0l	equ	0xFE9
  6585                           wreg	equ	0xFE8
  6586                           indf1	equ	0xFE7
  6587                           postinc1	equ	0xFE6
  6588                           postdec1	equ	0xFE5
  6589                           plusw1	equ	0xFE3
  6590                           fsr1h	equ	0xFE2
  6591                           fsr1l	equ	0xFE1
  6592                           indf2	equ	0xFDF
  6593                           postinc2	equ	0xFDE
  6594                           postdec2	equ	0xFDD
  6595                           preinc2	equ	0xFDC
  6596                           plusw2	equ	0xFDB
  6597                           fsr2h	equ	0xFDA
  6598                           fsr2l	equ	0xFD9
  6599                           status	equ	0xFD8
  6600                           
  6601 ;; *************** function _rnd_get_num *****************
  6602 ;; Defined at:
  6603 ;;		line 8 in file "randgen.c"
  6604 ;; Parameters:    Size  Location     Type
  6605 ;;		None
  6606 ;; Auto vars:     Size  Location     Type
  6607 ;;  b               2   21[COMRAM] unsigned int 
  6608 ;; Return value:  Size  Location     Type
  6609 ;;                  1    wreg      unsigned char 
  6610 ;; Registers used:
  6611 ;;		wreg, status,2, status,0
  6612 ;; Tracked objects:
  6613 ;;		On entry : 0/0
  6614 ;;		On exit  : 0/0
  6615 ;;		Unchanged: 0/0
  6616 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6617 ;;      Params:         0       0       0       0       0       0       0
  6618 ;;      Locals:         2       0       0       0       0       0       0
  6619 ;;      Temps:          3       0       0       0       0       0       0
  6620 ;;      Totals:         5       0       0       0       0       0       0
  6621 ;;Total ram usage:        5 bytes
  6622 ;; Hardware stack levels used:    1
  6623 ;; Hardware stack levels required when called:    2
  6624 ;; This function calls:
  6625 ;;		Nothing
  6626 ;; This function is called by:
  6627 ;;		_selectNextObject
  6628 ;;		_genBerry
  6629 ;; This function uses a non-reentrant model
  6630 ;;
  6631                           
  6632                           	psect	text35
  6633  001E4E                     __ptext35:
  6634                           	opt stack 0
  6635  001E4E                     _rnd_get_num:
  6636                           	opt stack 26
  6637                           
  6638                           ;randgen.c: 11:     unsigned b = ((_lfsr >> 0) ^ (_lfsr >> 2) ^ (_lfsr >> 3) ^ (_lfsr >>
      +                           4) ) & 1;
  6639                           
  6640                           ;incstack = 0
  6641  001E4E  C062  F047         	movff	__lfsr,??_rnd_get_num
  6642  001E52  3A47               	swapf	??_rnd_get_num,f,c
  6643  001E54  0E0F               	movlw	15
  6644  001E56  1647               	andwf	??_rnd_get_num,f,c
  6645  001E58  C062  F048         	movff	__lfsr,??_rnd_get_num+1
  6646  001E5C  90D8               	bcf	status,0,c
  6647  001E5E  3248               	rrcf	??_rnd_get_num+1,f,c
  6648  001E60  90D8               	bcf	status,0,c
  6649  001E62  3248               	rrcf	??_rnd_get_num+1,f,c
  6650  001E64  90D8               	bcf	status,0,c
  6651  001E66  3248               	rrcf	??_rnd_get_num+1,f,c
  6652  001E68  4062               	rrncf	__lfsr,w,c
  6653  001E6A  42E8               	rrncf	wreg,f,c
  6654  001E6C  0B3F               	andlw	63
  6655  001E6E  1848               	xorwf	??_rnd_get_num+1,w,c
  6656  001E70  1847               	xorwf	??_rnd_get_num,w,c
  6657  001E72  1862               	xorwf	__lfsr,w,c
  6658  001E74  6E49               	movwf	(??_rnd_get_num+2)& (0+255),c
  6659  001E76  0E01               	movlw	1
  6660  001E78  1649               	andwf	??_rnd_get_num+2,f,c
  6661  001E7A  5049               	movf	??_rnd_get_num+2,w,c
  6662  001E7C  6E4A               	movwf	rnd_get_num@b,c
  6663  001E7E  6A4B               	clrf	rnd_get_num@b+1,c
  6664                           
  6665                           ;randgen.c: 12:     _lfsr = (_lfsr >> 1) | (b << 7);
  6666  001E80  6A47               	clrf	??_rnd_get_num& (0+255),c
  6667  001E82  A04A               	btfss	rnd_get_num@b,0,c
  6668  001E84  D001               	bra	u2025
  6669  001E86  8E47               	bsf	??_rnd_get_num& (0+255),7,c
  6670  001E88                     u2025:
  6671  001E88  90D8               	bcf	status,0,c
  6672  001E8A  3062               	rrcf	__lfsr,w,c
  6673  001E8C  1047               	iorwf	??_rnd_get_num,w,c
  6674  001E8E  6E62               	movwf	__lfsr,c
  6675                           
  6676                           ;randgen.c: 13:     return _lfsr;
  6677  001E90  5062               	movf	__lfsr,w,c
  6678  001E92  0012               	return	
  6679  001E94                     __end_of_rnd_get_num:
  6680                           	opt stack 0
  6681                           tblptru	equ	0xFF8
  6682                           tblptrh	equ	0xFF7
  6683                           tblptrl	equ	0xFF6
  6684                           tablat	equ	0xFF5
  6685                           prodh	equ	0xFF4
  6686                           prodl	equ	0xFF3
  6687                           intcon	equ	0xFF2
  6688                           indf0	equ	0xFEF
  6689                           postinc0	equ	0xFEE
  6690                           fsr0h	equ	0xFEA
  6691                           fsr0l	equ	0xFE9
  6692                           wreg	equ	0xFE8
  6693                           indf1	equ	0xFE7
  6694                           postinc1	equ	0xFE6
  6695                           postdec1	equ	0xFE5
  6696                           plusw1	equ	0xFE3
  6697                           fsr1h	equ	0xFE2
  6698                           fsr1l	equ	0xFE1
  6699                           indf2	equ	0xFDF
  6700                           postinc2	equ	0xFDE
  6701                           postdec2	equ	0xFDD
  6702                           preinc2	equ	0xFDC
  6703                           plusw2	equ	0xFDB
  6704                           fsr2h	equ	0xFDA
  6705                           fsr2l	equ	0xFD9
  6706                           status	equ	0xFD8
  6707                           
  6708 ;; *************** function ___lbmod *****************
  6709 ;; Defined at:
  6710 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c99\common\lbmod.c"
  6711 ;; Parameters:    Size  Location     Type
  6712 ;;  dividend        1    wreg     unsigned char 
  6713 ;;  divisor         1   18[COMRAM] unsigned char 
  6714 ;; Auto vars:     Size  Location     Type
  6715 ;;  dividend        1   19[COMRAM] unsigned char 
  6716 ;;  rem             1   21[COMRAM] unsigned char 
  6717 ;;  counter         1   20[COMRAM] unsigned char 
  6718 ;; Return value:  Size  Location     Type
  6719 ;;                  1    wreg      unsigned char 
  6720 ;; Registers used:
  6721 ;;		wreg, status,2, status,0
  6722 ;; Tracked objects:
  6723 ;;		On entry : 0/0
  6724 ;;		On exit  : 0/0
  6725 ;;		Unchanged: 0/0
  6726 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6727 ;;      Params:         1       0       0       0       0       0       0
  6728 ;;      Locals:         3       0       0       0       0       0       0
  6729 ;;      Temps:          0       0       0       0       0       0       0
  6730 ;;      Totals:         4       0       0       0       0       0       0
  6731 ;;Total ram usage:        4 bytes
  6732 ;; Hardware stack levels used:    1
  6733 ;; Hardware stack levels required when called:    2
  6734 ;; This function calls:
  6735 ;;		Nothing
  6736 ;; This function is called by:
  6737 ;;		_genBerry
  6738 ;; This function uses a non-reentrant model
  6739 ;;
  6740                           
  6741                           	psect	text36
  6742  002046                     __ptext36:
  6743                           	opt stack 0
  6744  002046                     ___lbmod:
  6745                           	opt stack 24
  6746                           
  6747                           ;incstack = 0
  6748                           ;___lbmod@dividend stored from wreg
  6749  002046  6E48               	movwf	___lbmod@dividend,c
  6750  002048  0E08               	movlw	8
  6751  00204A  6E49               	movwf	___lbmod@counter,c
  6752  00204C  0E00               	movlw	0
  6753  00204E  6E4A               	movwf	___lbmod@rem,c
  6754  002050  90D8               	bcf	status,0,c
  6755  002052  3448               	rlcf	___lbmod@dividend,w,c
  6756  002054  344A               	rlcf	___lbmod@rem,w,c
  6757  002056  6E4A               	movwf	___lbmod@rem,c
  6758  002058  90D8               	bcf	status,0,c
  6759  00205A  3648               	rlcf	___lbmod@dividend,f,c
  6760  00205C  5047               	movf	___lbmod@divisor,w,c
  6761  00205E  5C4A               	subwf	___lbmod@rem,w,c
  6762  002060  A0D8               	btfss	status,0,c
  6763  002062  D002               	goto	l941
  6764  002064  5047               	movf	___lbmod@divisor,w,c
  6765  002066  5E4A               	subwf	___lbmod@rem,f,c
  6766  002068                     l941:
  6767  002068  2E49               	decfsz	___lbmod@counter,f,c
  6768  00206A  D7F2               	goto	l940
  6769  00206C  504A               	movf	___lbmod@rem,w,c
  6770  00206E  0012               	return	
  6771  002070                     __end_of___lbmod:
  6772                           	opt stack 0
  6773                           tblptru	equ	0xFF8
  6774                           tblptrh	equ	0xFF7
  6775                           tblptrl	equ	0xFF6
  6776                           tablat	equ	0xFF5
  6777                           prodh	equ	0xFF4
  6778                           prodl	equ	0xFF3
  6779                           intcon	equ	0xFF2
  6780                           indf0	equ	0xFEF
  6781                           postinc0	equ	0xFEE
  6782                           fsr0h	equ	0xFEA
  6783                           fsr0l	equ	0xFE9
  6784                           wreg	equ	0xFE8
  6785                           indf1	equ	0xFE7
  6786                           postinc1	equ	0xFE6
  6787                           postdec1	equ	0xFE5
  6788                           plusw1	equ	0xFE3
  6789                           fsr1h	equ	0xFE2
  6790                           fsr1l	equ	0xFE1
  6791                           indf2	equ	0xFDF
  6792                           postinc2	equ	0xFDE
  6793                           postdec2	equ	0xFDD
  6794                           preinc2	equ	0xFDC
  6795                           plusw2	equ	0xFDB
  6796                           fsr2h	equ	0xFDA
  6797                           fsr2l	equ	0xFD9
  6798                           status	equ	0xFD8
  6799                           
  6800 ;; *************** function _initialise_hardware *****************
  6801 ;; Defined at:
  6802 ;;		line 1080 in file "pictris.c"
  6803 ;; Parameters:    Size  Location     Type
  6804 ;;		None
  6805 ;; Auto vars:     Size  Location     Type
  6806 ;;		None
  6807 ;; Return value:  Size  Location     Type
  6808 ;;                  1    wreg      void 
  6809 ;; Registers used:
  6810 ;;		wreg, status,2, cstack
  6811 ;; Tracked objects:
  6812 ;;		On entry : 0/0
  6813 ;;		On exit  : 0/0
  6814 ;;		Unchanged: 0/0
  6815 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6816 ;;      Params:         0       0       0       0       0       0       0
  6817 ;;      Locals:         0       0       0       0       0       0       0
  6818 ;;      Temps:          0       0       0       0       0       0       0
  6819 ;;      Totals:         0       0       0       0       0       0       0
  6820 ;;Total ram usage:        0 bytes
  6821 ;; Hardware stack levels used:    1
  6822 ;; Hardware stack levels required when called:    3
  6823 ;; This function calls:
  6824 ;;		_initialise_TMR0
  6825 ;; This function is called by:
  6826 ;;		_main
  6827 ;; This function uses a non-reentrant model
  6828 ;;
  6829                           
  6830                           	psect	text37
  6831  001E94                     __ptext37:
  6832                           	opt stack 0
  6833  001E94                     _initialise_hardware:
  6834                           	opt stack 27
  6835                           
  6836                           ;pictris.c: 1083:     OSCCONbits.IDLEN = 0;
  6837                           
  6838                           ;incstack = 0
  6839  001E94  9ED3               	bcf	4051,7,c	;volatile
  6840                           
  6841                           ;pictris.c: 1084:     OSCCONbits.IRCF = 0x7;
  6842  001E96  88D3               	bsf	4051,4,c	;volatile
  6843  001E98  8AD3               	bsf	4051,5,c	;volatile
  6844  001E9A  8CD3               	bsf	4051,6,c	;volatile
  6845                           
  6846                           ;pictris.c: 1085:     OSCCONbits.SCS = 0x2;
  6847  001E9C  50D3               	movf	4051,w,c	;volatile
  6848  001E9E  0BFC               	andlw	-4
  6849  001EA0  0902               	iorlw	2
  6850  001EA2  6ED3               	movwf	4051,c	;volatile
  6851                           
  6852                           ;pictris.c: 1088:     ADCON1bits.PCFG = 0x0F;
  6853  001EA4  80C1               	bsf	4033,0,c	;volatile
  6854  001EA6  82C1               	bsf	4033,1,c	;volatile
  6855  001EA8  84C1               	bsf	4033,2,c	;volatile
  6856  001EAA  86C1               	bsf	4033,3,c	;volatile
  6857                           
  6858                           ;pictris.c: 1091:     DDRA = 0x00; PORTA = 0x00;
  6859  001EAC  0E00               	movlw	0
  6860  001EAE  6E92               	movwf	3986,c	;volatile
  6861  001EB0  0E00               	movlw	0
  6862  001EB2  6E80               	movwf	3968,c	;volatile
  6863                           
  6864                           ;pictris.c: 1093:     DDRB = 0xFF; PORTB = 0x00; INTCON2bits.RBPU = 0;
  6865  001EB4  6893               	setf	3987,c	;volatile
  6866  001EB6  0E00               	movlw	0
  6867  001EB8  6E81               	movwf	3969,c	;volatile
  6868  001EBA  9EF1               	bcf	intcon2,7,c	;volatile
  6869                           
  6870                           ;pictris.c: 1097:     DDRC = 0x00; PORTC = 0x00;
  6871  001EBC  0E00               	movlw	0
  6872  001EBE  6E94               	movwf	3988,c	;volatile
  6873  001EC0  0E00               	movlw	0
  6874  001EC2  6E82               	movwf	3970,c	;volatile
  6875                           
  6876                           ;pictris.c: 1098:     DDRD = 0x00; PORTD = 0x00;
  6877  001EC4  0E00               	movlw	0
  6878  001EC6  6E95               	movwf	3989,c	;volatile
  6879  001EC8  0E00               	movlw	0
  6880  001ECA  6E83               	movwf	3971,c	;volatile
  6881                           
  6882                           ;pictris.c: 1101:     initialise_TMR0();
  6883  001ECC  EC72  F010         	call	_initialise_TMR0	;wreg free
  6884                           
  6885                           ;pictris.c: 1103:     IPEN = 0;
  6886  001ED0  9ED0               	bcf	4048,7,c	;volatile
  6887                           
  6888                           ;pictris.c: 1104:     GIE = 1;
  6889  001ED2  8EF2               	bsf	intcon,7,c	;volatile
  6890  001ED4  0012               	return		;funcret
  6891  001ED6                     __end_of_initialise_hardware:
  6892                           	opt stack 0
  6893                           tblptru	equ	0xFF8
  6894                           tblptrh	equ	0xFF7
  6895                           tblptrl	equ	0xFF6
  6896                           tablat	equ	0xFF5
  6897                           prodh	equ	0xFF4
  6898                           prodl	equ	0xFF3
  6899                           intcon	equ	0xFF2
  6900                           intcon2	equ	0xFF1
  6901                           indf0	equ	0xFEF
  6902                           postinc0	equ	0xFEE
  6903                           fsr0h	equ	0xFEA
  6904                           fsr0l	equ	0xFE9
  6905                           wreg	equ	0xFE8
  6906                           indf1	equ	0xFE7
  6907                           postinc1	equ	0xFE6
  6908                           postdec1	equ	0xFE5
  6909                           plusw1	equ	0xFE3
  6910                           fsr1h	equ	0xFE2
  6911                           fsr1l	equ	0xFE1
  6912                           indf2	equ	0xFDF
  6913                           postinc2	equ	0xFDE
  6914                           postdec2	equ	0xFDD
  6915                           preinc2	equ	0xFDC
  6916                           plusw2	equ	0xFDB
  6917                           fsr2h	equ	0xFDA
  6918                           fsr2l	equ	0xFD9
  6919                           status	equ	0xFD8
  6920                           
  6921 ;; *************** function _initialise_TMR0 *****************
  6922 ;; Defined at:
  6923 ;;		line 1068 in file "pictris.c"
  6924 ;; Parameters:    Size  Location     Type
  6925 ;;		None
  6926 ;; Auto vars:     Size  Location     Type
  6927 ;;		None
  6928 ;; Return value:  Size  Location     Type
  6929 ;;                  1    wreg      void 
  6930 ;; Registers used:
  6931 ;;		wreg, status,2
  6932 ;; Tracked objects:
  6933 ;;		On entry : 0/0
  6934 ;;		On exit  : 0/0
  6935 ;;		Unchanged: 0/0
  6936 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6937 ;;      Params:         0       0       0       0       0       0       0
  6938 ;;      Locals:         0       0       0       0       0       0       0
  6939 ;;      Temps:          0       0       0       0       0       0       0
  6940 ;;      Totals:         0       0       0       0       0       0       0
  6941 ;;Total ram usage:        0 bytes
  6942 ;; Hardware stack levels used:    1
  6943 ;; Hardware stack levels required when called:    2
  6944 ;; This function calls:
  6945 ;;		Nothing
  6946 ;; This function is called by:
  6947 ;;		_initialise_hardware
  6948 ;; This function uses a non-reentrant model
  6949 ;;
  6950                           
  6951                           	psect	text38
  6952  0020E4                     __ptext38:
  6953                           	opt stack 0
  6954  0020E4                     _initialise_TMR0:
  6955                           	opt stack 27
  6956                           
  6957                           ;pictris.c: 1070:     T0CONbits.T0PS = 0x3;
  6958                           
  6959                           ;incstack = 0
  6960  0020E4  50D5               	movf	4053,w,c	;volatile
  6961  0020E6  0BF8               	andlw	-8
  6962  0020E8  0903               	iorlw	3
  6963  0020EA  6ED5               	movwf	4053,c	;volatile
  6964                           
  6965                           ;pictris.c: 1071:     PSA = 0;
  6966  0020EC  96D5               	bcf	4053,3,c	;volatile
  6967                           
  6968                           ;pictris.c: 1072:     T0CS = 0;
  6969  0020EE  9AD5               	bcf	4053,5,c	;volatile
  6970                           
  6971                           ;pictris.c: 1073:     TMR0ON = 1;
  6972  0020F0  8ED5               	bsf	4053,7,c	;volatile
  6973                           
  6974                           ;pictris.c: 1074:     TMR0 = (~125);
  6975  0020F2  0EFF               	movlw	255
  6976  0020F4  6ED7               	movwf	4055,c	;volatile
  6977  0020F6  0E82               	movlw	130
  6978  0020F8  6ED6               	movwf	4054,c	;volatile
  6979                           
  6980                           ;pictris.c: 1075:     INTCONbits.TMR0IF = 0;
  6981  0020FA  94F2               	bcf	intcon,2,c	;volatile
  6982                           
  6983                           ;pictris.c: 1076:     TMR0IE = 1;
  6984  0020FC  8AF2               	bsf	intcon,5,c	;volatile
  6985                           
  6986                           ;pictris.c: 1077:     TMR0ON = 1;
  6987  0020FE  8ED5               	bsf	4053,7,c	;volatile
  6988  002100  0012               	return		;funcret
  6989  002102                     __end_of_initialise_TMR0:
  6990                           	opt stack 0
  6991                           tblptru	equ	0xFF8
  6992                           tblptrh	equ	0xFF7
  6993                           tblptrl	equ	0xFF6
  6994                           tablat	equ	0xFF5
  6995                           prodh	equ	0xFF4
  6996                           prodl	equ	0xFF3
  6997                           intcon	equ	0xFF2
  6998                           intcon2	equ	0xFF1
  6999                           indf0	equ	0xFEF
  7000                           postinc0	equ	0xFEE
  7001                           fsr0h	equ	0xFEA
  7002                           fsr0l	equ	0xFE9
  7003                           wreg	equ	0xFE8
  7004                           indf1	equ	0xFE7
  7005                           postinc1	equ	0xFE6
  7006                           postdec1	equ	0xFE5
  7007                           plusw1	equ	0xFE3
  7008                           fsr1h	equ	0xFE2
  7009                           fsr1l	equ	0xFE1
  7010                           indf2	equ	0xFDF
  7011                           postinc2	equ	0xFDE
  7012                           postdec2	equ	0xFDD
  7013                           preinc2	equ	0xFDC
  7014                           plusw2	equ	0xFDB
  7015                           fsr2h	equ	0xFDA
  7016                           fsr2l	equ	0xFD9
  7017                           status	equ	0xFD8
  7018                           
  7019 ;; *************** function _choosescreen *****************
  7020 ;; Defined at:
  7021 ;;		line 1187 in file "pictris.c"
  7022 ;; Parameters:    Size  Location     Type
  7023 ;;		None
  7024 ;; Auto vars:     Size  Location     Type
  7025 ;;  mask           16   26[COMRAM] unsigned short [8]
  7026 ;;  i               1   42[COMRAM] unsigned char 
  7027 ;; Return value:  Size  Location     Type
  7028 ;;                  1    wreg      void 
  7029 ;; Registers used:
  7030 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7031 ;; Tracked objects:
  7032 ;;		On entry : 0/0
  7033 ;;		On exit  : 0/0
  7034 ;;		Unchanged: 0/0
  7035 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7036 ;;      Params:         0       0       0       0       0       0       0
  7037 ;;      Locals:        17       0       0       0       0       0       0
  7038 ;;      Temps:          0       0       0       0       0       0       0
  7039 ;;      Totals:        17       0       0       0       0       0       0
  7040 ;;Total ram usage:       17 bytes
  7041 ;; Hardware stack levels used:    1
  7042 ;; Hardware stack levels required when called:    4
  7043 ;; This function calls:
  7044 ;;		_clearArray
  7045 ;;		_mergeObjects
  7046 ;;		_pauseButtons
  7047 ;;		_pauseMultiplexing
  7048 ;;		_resumeButtons
  7049 ;;		_resumeMultiplexing
  7050 ;; This function is called by:
  7051 ;;		_main
  7052 ;; This function uses a non-reentrant model
  7053 ;;
  7054                           
  7055                           	psect	text39
  7056  0010DC                     __ptext39:
  7057                           	opt stack 0
  7058  0010DC                     _choosescreen:
  7059                           	opt stack 26
  7060                           
  7061                           ;pictris.c: 1189:     uint8_t i;;pictris.c: 1192:     pauseMultiplexing();
  7062                           
  7063                           ;incstack = 0
  7064  0010DC  ECC0  F010         	call	_pauseMultiplexing	;wreg free
  7065                           
  7066                           ;pictris.c: 1195:     clearArray(tmpObjectData, 8);
  7067  0010E0  0E80               	movlw	low _tmpObjectData
  7068  0010E2  6E47               	movwf	clearArray@pArray,c
  7069  0010E4  0E00               	movlw	high _tmpObjectData
  7070  0010E6  6E48               	movwf	clearArray@pArray+1,c
  7071  0010E8  0E00               	movlw	0
  7072  0010EA  6E4A               	movwf	clearArray@size+1,c
  7073  0010EC  0E08               	movlw	8
  7074  0010EE  6E49               	movwf	clearArray@size,c
  7075  0010F0  ECDC  F00F         	call	_clearArray	;wreg free
  7076                           
  7077                           ;pictris.c: 1196:     clearArray(ObjectData, 8);
  7078  0010F4  0E18               	movlw	low _ObjectData
  7079  0010F6  6E47               	movwf	clearArray@pArray,c
  7080  0010F8  0E00               	movlw	high _ObjectData
  7081  0010FA  6E48               	movwf	clearArray@pArray+1,c
  7082  0010FC  0E00               	movlw	0
  7083  0010FE  6E4A               	movwf	clearArray@size+1,c
  7084  001100  0E08               	movlw	8
  7085  001102  6E49               	movwf	clearArray@size,c
  7086  001104  ECDC  F00F         	call	_clearArray	;wreg free
  7087                           
  7088                           ;pictris.c: 1197:     clearArray(BackgroundData, 8);
  7089  001108  0E90               	movlw	low _BackgroundData
  7090  00110A  6E47               	movwf	clearArray@pArray,c
  7091  00110C  0E00               	movlw	high _BackgroundData
  7092  00110E  6E48               	movwf	clearArray@pArray+1,c
  7093  001110  0E00               	movlw	0
  7094  001112  6E4A               	movwf	clearArray@size+1,c
  7095  001114  0E08               	movlw	8
  7096  001116  6E49               	movwf	clearArray@size,c
  7097  001118  ECDC  F00F         	call	_clearArray	;wreg free
  7098                           
  7099                           ;pictris.c: 1198:     for (i = 0; i < 8; i++)
  7100  00111C  0E00               	movlw	0
  7101  00111E  6E5F               	movwf	choosescreen@i,c
  7102  001120                     l4556:
  7103  001120  0E07               	movlw	7
  7104  001122  645F               	cpfsgt	choosescreen@i,c
  7105  001124  D001               	goto	l421
  7106  001126  D018               	goto	u5010
  7107  001128                     l421:
  7108                           
  7109                           ;pictris.c: 1199:     {;pictris.c: 1200:         ObjectData[i] = choose_screen[i];
  7110  001128  505F               	movf	choosescreen@i,w,c
  7111  00112A  0D02               	mullw	2
  7112  00112C  0E21               	movlw	low _choose_screen
  7113  00112E  24F3               	addwf	prodl,w,c
  7114  001130  6EF6               	movwf	tblptrl,c
  7115  001132  0E06               	movlw	high _choose_screen
  7116  001134  20F4               	addwfc	prodh,w,c
  7117  001136  6EF7               	movwf	tblptrh,c
  7118  001138                     	if	0	;There are less than 3 active tblptr bytes
  7119  001138                     	endif
  7120  001138  505F               	movf	choosescreen@i,w,c
  7121  00113A  0D02               	mullw	2
  7122  00113C  0E18               	movlw	low _ObjectData
  7123  00113E  24F3               	addwf	prodl,w,c
  7124  001140  6ED9               	movwf	fsr2l,c
  7125  001142  0E00               	movlw	high _ObjectData
  7126  001144  20F4               	addwfc	prodh,w,c
  7127  001146  6EDA               	movwf	fsr2h,c
  7128  001148  0009               	tblrd		*+
  7129  00114A  CFF5 FFDE          	movff	tablat,postinc2
  7130  00114E  0008               	tblrd		*
  7131  001150  CFF5 FFDD          	movff	tablat,postdec2
  7132                           
  7133                           ;pictris.c: 1201:     }
  7134  001154  2A5F               	incf	choosescreen@i,f,c
  7135  001156  D7E4               	goto	l4556
  7136  001158                     u5010:
  7137                           
  7138                           ;pictris.c: 1204:     resumeMultiplexing();
  7139  001158  ECD2  F010         	call	_resumeMultiplexing	;wreg free
  7140  00115C                     
  7141                           ;pictris.c: 1208:      while (Down_Debounced || Rotate_Debounced)
  7142                           
  7143                           ;pictris.c: 1209:         continue;
  7144  00115C  5031               	movf	_Down_Debounced,w,c	;volatile
  7145  00115E  A4D8               	btfss	status,2,c
  7146  001160  D7FD               	goto	l424
  7147  001162  5032               	movf	_Rotate_Debounced,w,c	;volatile
  7148  001164  A4D8               	btfss	status,2,c
  7149  001166  D7FA               	goto	l424
  7150  001168                     u5030:
  7151                           
  7152                           ;pictris.c: 1212:     while (!Down_Debounced && !Rotate_Debounced)
  7153                           
  7154                           ;pictris.c: 1213:         continue;
  7155                           
  7156                           ;pictris.c: 1212:     while (!Down_Debounced && !Rotate_Debounced)
  7157  001168  5031               	movf	_Down_Debounced,w,c	;volatile
  7158  00116A  A4D8               	btfss	status,2,c
  7159  00116C  D003               	goto	u5050
  7160  00116E  5032               	movf	_Rotate_Debounced,w,c	;volatile
  7161  001170  B4D8               	btfsc	status,2,c
  7162  001172  D7FA               	goto	u5030
  7163  001174                     u5050:
  7164                           
  7165                           ;pictris.c: 1214:     uint16_t mask[8];;pictris.c: 1215:     if(Down_Debounced == 1) { t
      +                          etris = 0;
  7166  001174  0431               	decf	_Down_Debounced,w,c	;volatile
  7167  001176  A4D8               	btfss	status,2,c
  7168  001178  D016               	goto	l431
  7169  00117A  0E00               	movlw	0
  7170  00117C  6E07               	movwf	_tetris,c
  7171                           
  7172                           ;pictris.c: 1216:     for (i=0;i<8;i++){ mask[i] = 0xFF00; }}
  7173  00117E  0E00               	movlw	0
  7174  001180  6E5F               	movwf	choosescreen@i,c
  7175  001182                     l4580:
  7176  001182  0E07               	movlw	7
  7177  001184  645F               	cpfsgt	choosescreen@i,c
  7178  001186  D001               	goto	l432
  7179  001188  D027               	goto	u5110
  7180  00118A                     l432:
  7181  00118A  505F               	movf	choosescreen@i,w,c
  7182  00118C  0D02               	mullw	2
  7183  00118E  0E4F               	movlw	low choosescreen@mask
  7184  001190  24F3               	addwf	prodl,w,c
  7185  001192  6ED9               	movwf	fsr2l,c
  7186  001194  0E00               	movlw	high choosescreen@mask
  7187  001196  20F4               	addwfc	prodh,w,c
  7188  001198  6EDA               	movwf	fsr2h,c
  7189  00119A  0E00               	movlw	0
  7190  00119C  6EDE               	movwf	postinc2,c
  7191  00119E  0EFF               	movlw	255
  7192  0011A0  6EDD               	movwf	postdec2,c
  7193  0011A2  2A5F               	incf	choosescreen@i,f,c
  7194  0011A4  D7EE               	goto	l4580
  7195  0011A6                     l431:
  7196  0011A6  0432               	decf	_Rotate_Debounced,w,c	;volatile
  7197  0011A8  A4D8               	btfss	status,2,c
  7198  0011AA  D016               	goto	u5110
  7199  0011AC  0E01               	movlw	1
  7200  0011AE  6E07               	movwf	_tetris,c
  7201                           
  7202                           ;pictris.c: 1218:     for (i=0;i<8;i++){ mask[i] = 0x00FF; }};}
  7203  0011B0  0E00               	movlw	0
  7204  0011B2  6E5F               	movwf	choosescreen@i,c
  7205  0011B4                     l4594:
  7206  0011B4  0E07               	movlw	7
  7207  0011B6  645F               	cpfsgt	choosescreen@i,c
  7208  0011B8  D001               	goto	l436
  7209  0011BA  D00E               	goto	u5110
  7210  0011BC                     l436:
  7211  0011BC  505F               	movf	choosescreen@i,w,c
  7212  0011BE  0D02               	mullw	2
  7213  0011C0  0E4F               	movlw	low choosescreen@mask
  7214  0011C2  24F3               	addwf	prodl,w,c
  7215  0011C4  6ED9               	movwf	fsr2l,c
  7216  0011C6  0E00               	movlw	high choosescreen@mask
  7217  0011C8  20F4               	addwfc	prodh,w,c
  7218  0011CA  6EDA               	movwf	fsr2h,c
  7219  0011CC  0EFF               	movlw	255
  7220  0011CE  6EDE               	movwf	postinc2,c
  7221  0011D0  0E00               	movlw	0
  7222  0011D2  6EDD               	movwf	postdec2,c
  7223  0011D4  2A5F               	incf	choosescreen@i,f,c
  7224  0011D6  D7EE               	goto	l4594
  7225  0011D8                     u5110:
  7226                           
  7227                           ;pictris.c: 1221:     pauseMultiplexing();
  7228  0011D8  ECC0  F010         	call	_pauseMultiplexing	;wreg free
  7229                           
  7230                           ;pictris.c: 1222:     mergeObjects(mask, ObjectData, INVERT);
  7231  0011DC  0E4F               	movlw	low choosescreen@mask
  7232  0011DE  6E47               	movwf	mergeObjects@pSource,c
  7233  0011E0  0E00               	movlw	high choosescreen@mask
  7234  0011E2  6E48               	movwf	mergeObjects@pSource+1,c
  7235  0011E4  0E18               	movlw	low _ObjectData
  7236  0011E6  6E49               	movwf	mergeObjects@pTarget,c
  7237  0011E8  0E00               	movlw	high _ObjectData
  7238  0011EA  6E4A               	movwf	mergeObjects@pTarget+1,c
  7239  0011EC  0E02               	movlw	2
  7240  0011EE  6E4B               	movwf	mergeObjects@mode,c
  7241  0011F0  ECA4  F00A         	call	_mergeObjects	;wreg free
  7242                           
  7243                           ;pictris.c: 1223:     resumeMultiplexing();
  7244  0011F4  ECD2  F010         	call	_resumeMultiplexing	;wreg free
  7245  0011F8                     
  7246                           ;pictris.c: 1227:     while (Down_Debounced || Rotate_Debounced)
  7247                           
  7248                           ;pictris.c: 1228:         continue;
  7249  0011F8  5031               	movf	_Down_Debounced,w,c	;volatile
  7250  0011FA  A4D8               	btfss	status,2,c
  7251  0011FC  D7FD               	goto	l439
  7252  0011FE  5032               	movf	_Rotate_Debounced,w,c	;volatile
  7253  001200  A4D8               	btfss	status,2,c
  7254  001202  D7FA               	goto	l439
  7255                           
  7256                           ;pictris.c: 1229:     pauseButtons();
  7257  001204  ECD8  F010         	call	_pauseButtons	;wreg free
  7258                           
  7259                           ;pictris.c: 1230:     Down_Delay = 500;
  7260  001208  0E01               	movlw	1
  7261  00120A  6E29               	movwf	_Down_Delay+1,c	;volatile
  7262  00120C  0EF4               	movlw	244
  7263  00120E  6E28               	movwf	_Down_Delay,c	;volatile
  7264                           
  7265                           ;pictris.c: 1231:     resumeButtons();
  7266  001210  ECD5  F010         	call	_resumeButtons	;wreg free
  7267  001214  0012               	return		;funcret
  7268  001216                     __end_of_choosescreen:
  7269                           	opt stack 0
  7270                           tblptru	equ	0xFF8
  7271                           tblptrh	equ	0xFF7
  7272                           tblptrl	equ	0xFF6
  7273                           tablat	equ	0xFF5
  7274                           prodh	equ	0xFF4
  7275                           prodl	equ	0xFF3
  7276                           intcon	equ	0xFF2
  7277                           intcon2	equ	0xFF1
  7278                           indf0	equ	0xFEF
  7279                           postinc0	equ	0xFEE
  7280                           fsr0h	equ	0xFEA
  7281                           fsr0l	equ	0xFE9
  7282                           wreg	equ	0xFE8
  7283                           indf1	equ	0xFE7
  7284                           postinc1	equ	0xFE6
  7285                           postdec1	equ	0xFE5
  7286                           plusw1	equ	0xFE3
  7287                           fsr1h	equ	0xFE2
  7288                           fsr1l	equ	0xFE1
  7289                           indf2	equ	0xFDF
  7290                           postinc2	equ	0xFDE
  7291                           postdec2	equ	0xFDD
  7292                           preinc2	equ	0xFDC
  7293                           plusw2	equ	0xFDB
  7294                           fsr2h	equ	0xFDA
  7295                           fsr2l	equ	0xFD9
  7296                           status	equ	0xFD8
  7297                           
  7298 ;; *************** function _resumeMultiplexing *****************
  7299 ;; Defined at:
  7300 ;;		line 440 in file "pictris.c"
  7301 ;; Parameters:    Size  Location     Type
  7302 ;;		None
  7303 ;; Auto vars:     Size  Location     Type
  7304 ;;		None
  7305 ;; Return value:  Size  Location     Type
  7306 ;;                  1    wreg      void 
  7307 ;; Registers used:
  7308 ;;		wreg, status,2
  7309 ;; Tracked objects:
  7310 ;;		On entry : 0/0
  7311 ;;		On exit  : 0/0
  7312 ;;		Unchanged: 0/0
  7313 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7314 ;;      Params:         0       0       0       0       0       0       0
  7315 ;;      Locals:         0       0       0       0       0       0       0
  7316 ;;      Temps:          0       0       0       0       0       0       0
  7317 ;;      Totals:         0       0       0       0       0       0       0
  7318 ;;Total ram usage:        0 bytes
  7319 ;; Hardware stack levels used:    1
  7320 ;; Hardware stack levels required when called:    2
  7321 ;; This function calls:
  7322 ;;		Nothing
  7323 ;; This function is called by:
  7324 ;;		_SnakeGraph
  7325 ;;		_moveObjectDown
  7326 ;;		_checkButtons
  7327 ;;		_splash_screen
  7328 ;;		_choosescreen
  7329 ;;		_show_score
  7330 ;;		_mainGameLoop
  7331 ;; This function uses a non-reentrant model
  7332 ;;
  7333                           
  7334                           	psect	text40
  7335  0021A4                     __ptext40:
  7336                           	opt stack 0
  7337  0021A4                     _resumeMultiplexing:
  7338                           	opt stack 27
  7339                           
  7340                           ;pictris.c: 442:     UpdateScreen = 1;
  7341                           
  7342                           ;incstack = 0
  7343  0021A4  0E01               	movlw	1
  7344  0021A6  6E06               	movwf	_UpdateScreen,c	;volatile
  7345  0021A8  0012               	return		;funcret
  7346  0021AA                     __end_of_resumeMultiplexing:
  7347                           	opt stack 0
  7348                           tblptru	equ	0xFF8
  7349                           tblptrh	equ	0xFF7
  7350                           tblptrl	equ	0xFF6
  7351                           tablat	equ	0xFF5
  7352                           prodh	equ	0xFF4
  7353                           prodl	equ	0xFF3
  7354                           intcon	equ	0xFF2
  7355                           intcon2	equ	0xFF1
  7356                           indf0	equ	0xFEF
  7357                           postinc0	equ	0xFEE
  7358                           fsr0h	equ	0xFEA
  7359                           fsr0l	equ	0xFE9
  7360                           wreg	equ	0xFE8
  7361                           indf1	equ	0xFE7
  7362                           postinc1	equ	0xFE6
  7363                           postdec1	equ	0xFE5
  7364                           plusw1	equ	0xFE3
  7365                           fsr1h	equ	0xFE2
  7366                           fsr1l	equ	0xFE1
  7367                           indf2	equ	0xFDF
  7368                           postinc2	equ	0xFDE
  7369                           postdec2	equ	0xFDD
  7370                           preinc2	equ	0xFDC
  7371                           plusw2	equ	0xFDB
  7372                           fsr2h	equ	0xFDA
  7373                           fsr2l	equ	0xFD9
  7374                           status	equ	0xFD8
  7375                           
  7376 ;; *************** function _resumeButtons *****************
  7377 ;; Defined at:
  7378 ;;		line 361 in file "pictris.c"
  7379 ;; Parameters:    Size  Location     Type
  7380 ;;		None
  7381 ;; Auto vars:     Size  Location     Type
  7382 ;;		None
  7383 ;; Return value:  Size  Location     Type
  7384 ;;                  1    wreg      void 
  7385 ;; Registers used:
  7386 ;;		wreg, status,2
  7387 ;; Tracked objects:
  7388 ;;		On entry : 0/0
  7389 ;;		On exit  : 0/0
  7390 ;;		Unchanged: 0/0
  7391 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7392 ;;      Params:         0       0       0       0       0       0       0
  7393 ;;      Locals:         0       0       0       0       0       0       0
  7394 ;;      Temps:          0       0       0       0       0       0       0
  7395 ;;      Totals:         0       0       0       0       0       0       0
  7396 ;;Total ram usage:        0 bytes
  7397 ;; Hardware stack levels used:    1
  7398 ;; Hardware stack levels required when called:    2
  7399 ;; This function calls:
  7400 ;;		Nothing
  7401 ;; This function is called by:
  7402 ;;		_checkButtons
  7403 ;;		_choosescreen
  7404 ;;		_show_score
  7405 ;; This function uses a non-reentrant model
  7406 ;;
  7407                           
  7408                           	psect	text41
  7409  0021AA                     __ptext41:
  7410                           	opt stack 0
  7411  0021AA                     _resumeButtons:
  7412                           	opt stack 27
  7413                           
  7414                           ;pictris.c: 363:     mtxButtons = 1;
  7415                           
  7416                           ;incstack = 0
  7417  0021AA  0E01               	movlw	1
  7418  0021AC  6E17               	movwf	_mtxButtons,c	;volatile
  7419  0021AE  0012               	return		;funcret
  7420  0021B0                     __end_of_resumeButtons:
  7421                           	opt stack 0
  7422                           tblptru	equ	0xFF8
  7423                           tblptrh	equ	0xFF7
  7424                           tblptrl	equ	0xFF6
  7425                           tablat	equ	0xFF5
  7426                           prodh	equ	0xFF4
  7427                           prodl	equ	0xFF3
  7428                           intcon	equ	0xFF2
  7429                           intcon2	equ	0xFF1
  7430                           indf0	equ	0xFEF
  7431                           postinc0	equ	0xFEE
  7432                           fsr0h	equ	0xFEA
  7433                           fsr0l	equ	0xFE9
  7434                           wreg	equ	0xFE8
  7435                           indf1	equ	0xFE7
  7436                           postinc1	equ	0xFE6
  7437                           postdec1	equ	0xFE5
  7438                           plusw1	equ	0xFE3
  7439                           fsr1h	equ	0xFE2
  7440                           fsr1l	equ	0xFE1
  7441                           indf2	equ	0xFDF
  7442                           postinc2	equ	0xFDE
  7443                           postdec2	equ	0xFDD
  7444                           preinc2	equ	0xFDC
  7445                           plusw2	equ	0xFDB
  7446                           fsr2h	equ	0xFDA
  7447                           fsr2l	equ	0xFD9
  7448                           status	equ	0xFD8
  7449                           
  7450 ;; *************** function _pauseMultiplexing *****************
  7451 ;; Defined at:
  7452 ;;		line 429 in file "pictris.c"
  7453 ;; Parameters:    Size  Location     Type
  7454 ;;		None
  7455 ;; Auto vars:     Size  Location     Type
  7456 ;;		None
  7457 ;; Return value:  Size  Location     Type
  7458 ;;                  1    wreg      void 
  7459 ;; Registers used:
  7460 ;;		wreg, status,2, cstack
  7461 ;; Tracked objects:
  7462 ;;		On entry : 0/0
  7463 ;;		On exit  : 0/0
  7464 ;;		Unchanged: 0/0
  7465 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7466 ;;      Params:         0       0       0       0       0       0       0
  7467 ;;      Locals:         0       0       0       0       0       0       0
  7468 ;;      Temps:          0       0       0       0       0       0       0
  7469 ;;      Totals:         0       0       0       0       0       0       0
  7470 ;;Total ram usage:        0 bytes
  7471 ;; Hardware stack levels used:    1
  7472 ;; Hardware stack levels required when called:    3
  7473 ;; This function calls:
  7474 ;;		_waitForInterrupt
  7475 ;; This function is called by:
  7476 ;;		_SnakeGraph
  7477 ;;		_moveObjectDown
  7478 ;;		_checkButtons
  7479 ;;		_splash_screen
  7480 ;;		_choosescreen
  7481 ;;		_show_score
  7482 ;;		_mainGameLoop
  7483 ;; This function uses a non-reentrant model
  7484 ;;
  7485                           
  7486                           	psect	text42
  7487  002180                     __ptext42:
  7488                           	opt stack 0
  7489  002180                     _pauseMultiplexing:
  7490                           	opt stack 26
  7491                           
  7492                           ;pictris.c: 431:     if (UpdateScreen)
  7493                           
  7494                           ;incstack = 0
  7495  002180  5006               	movf	_UpdateScreen,w,c	;volatile
  7496  002182  B4D8               	btfsc	status,2,c
  7497  002184  0012               	return	
  7498                           
  7499                           ;pictris.c: 432:     {;pictris.c: 433:         waitForInterrupt();
  7500  002186  ECC8  F010         	call	_waitForInterrupt	;wreg free
  7501                           
  7502                           ;pictris.c: 434:         UpdateScreen = 0;
  7503  00218A  0E00               	movlw	0
  7504  00218C  6E06               	movwf	_UpdateScreen,c	;volatile
  7505  00218E  0012               	return	
  7506  002190                     __end_of_pauseMultiplexing:
  7507                           	opt stack 0
  7508                           tblptru	equ	0xFF8
  7509                           tblptrh	equ	0xFF7
  7510                           tblptrl	equ	0xFF6
  7511                           tablat	equ	0xFF5
  7512                           prodh	equ	0xFF4
  7513                           prodl	equ	0xFF3
  7514                           intcon	equ	0xFF2
  7515                           intcon2	equ	0xFF1
  7516                           indf0	equ	0xFEF
  7517                           postinc0	equ	0xFEE
  7518                           fsr0h	equ	0xFEA
  7519                           fsr0l	equ	0xFE9
  7520                           wreg	equ	0xFE8
  7521                           indf1	equ	0xFE7
  7522                           postinc1	equ	0xFE6
  7523                           postdec1	equ	0xFE5
  7524                           plusw1	equ	0xFE3
  7525                           fsr1h	equ	0xFE2
  7526                           fsr1l	equ	0xFE1
  7527                           indf2	equ	0xFDF
  7528                           postinc2	equ	0xFDE
  7529                           postdec2	equ	0xFDD
  7530                           preinc2	equ	0xFDC
  7531                           plusw2	equ	0xFDB
  7532                           fsr2h	equ	0xFDA
  7533                           fsr2l	equ	0xFD9
  7534                           status	equ	0xFD8
  7535                           
  7536 ;; *************** function _waitForInterrupt *****************
  7537 ;; Defined at:
  7538 ;;		line 421 in file "pictris.c"
  7539 ;; Parameters:    Size  Location     Type
  7540 ;;		None
  7541 ;; Auto vars:     Size  Location     Type
  7542 ;;		None
  7543 ;; Return value:  Size  Location     Type
  7544 ;;                  1    wreg      void 
  7545 ;; Registers used:
  7546 ;;		wreg, status,2
  7547 ;; Tracked objects:
  7548 ;;		On entry : 0/0
  7549 ;;		On exit  : 0/0
  7550 ;;		Unchanged: 0/0
  7551 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7552 ;;      Params:         0       0       0       0       0       0       0
  7553 ;;      Locals:         0       0       0       0       0       0       0
  7554 ;;      Temps:          0       0       0       0       0       0       0
  7555 ;;      Totals:         0       0       0       0       0       0       0
  7556 ;;Total ram usage:        0 bytes
  7557 ;; Hardware stack levels used:    1
  7558 ;; Hardware stack levels required when called:    2
  7559 ;; This function calls:
  7560 ;;		Nothing
  7561 ;; This function is called by:
  7562 ;;		_pauseMultiplexing
  7563 ;; This function uses a non-reentrant model
  7564 ;;
  7565                           
  7566                           	psect	text43
  7567  002190                     __ptext43:
  7568                           	opt stack 0
  7569  002190                     _waitForInterrupt:
  7570                           	opt stack 26
  7571                           
  7572                           ;pictris.c: 423:     InterruptComplete = 0;
  7573                           
  7574                           ;incstack = 0
  7575  002190  0E00               	movlw	0
  7576  002192  6E05               	movwf	_InterruptComplete,c	;volatile
  7577  002194                     
  7578                           ;pictris.c: 424:     while (!InterruptComplete)
  7579                           
  7580                           ;pictris.c: 425:         continue;
  7581  002194  5005               	movf	_InterruptComplete,w,c	;volatile
  7582  002196  A4D8               	btfss	status,2,c
  7583  002198  0012               	return	
  7584  00219A  D7FC               	goto	l188
  7585  00219C                     __end_of_waitForInterrupt:
  7586                           	opt stack 0
  7587                           tblptru	equ	0xFF8
  7588                           tblptrh	equ	0xFF7
  7589                           tblptrl	equ	0xFF6
  7590                           tablat	equ	0xFF5
  7591                           prodh	equ	0xFF4
  7592                           prodl	equ	0xFF3
  7593                           intcon	equ	0xFF2
  7594                           intcon2	equ	0xFF1
  7595                           indf0	equ	0xFEF
  7596                           postinc0	equ	0xFEE
  7597                           fsr0h	equ	0xFEA
  7598                           fsr0l	equ	0xFE9
  7599                           wreg	equ	0xFE8
  7600                           indf1	equ	0xFE7
  7601                           postinc1	equ	0xFE6
  7602                           postdec1	equ	0xFE5
  7603                           plusw1	equ	0xFE3
  7604                           fsr1h	equ	0xFE2
  7605                           fsr1l	equ	0xFE1
  7606                           indf2	equ	0xFDF
  7607                           postinc2	equ	0xFDE
  7608                           postdec2	equ	0xFDD
  7609                           preinc2	equ	0xFDC
  7610                           plusw2	equ	0xFDB
  7611                           fsr2h	equ	0xFDA
  7612                           fsr2l	equ	0xFD9
  7613                           status	equ	0xFD8
  7614                           
  7615 ;; *************** function _pauseButtons *****************
  7616 ;; Defined at:
  7617 ;;		line 354 in file "pictris.c"
  7618 ;; Parameters:    Size  Location     Type
  7619 ;;		None
  7620 ;; Auto vars:     Size  Location     Type
  7621 ;;		None
  7622 ;; Return value:  Size  Location     Type
  7623 ;;                  1    wreg      void 
  7624 ;; Registers used:
  7625 ;;		wreg, status,2
  7626 ;; Tracked objects:
  7627 ;;		On entry : 0/0
  7628 ;;		On exit  : 0/0
  7629 ;;		Unchanged: 0/0
  7630 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7631 ;;      Params:         0       0       0       0       0       0       0
  7632 ;;      Locals:         0       0       0       0       0       0       0
  7633 ;;      Temps:          0       0       0       0       0       0       0
  7634 ;;      Totals:         0       0       0       0       0       0       0
  7635 ;;Total ram usage:        0 bytes
  7636 ;; Hardware stack levels used:    1
  7637 ;; Hardware stack levels required when called:    2
  7638 ;; This function calls:
  7639 ;;		Nothing
  7640 ;; This function is called by:
  7641 ;;		_checkButtons
  7642 ;;		_choosescreen
  7643 ;;		_show_score
  7644 ;; This function uses a non-reentrant model
  7645 ;;
  7646                           
  7647                           	psect	text44
  7648  0021B0                     __ptext44:
  7649                           	opt stack 0
  7650  0021B0                     _pauseButtons:
  7651                           	opt stack 27
  7652                           
  7653                           ;pictris.c: 358:     mtxButtons = 0;
  7654                           
  7655                           ;incstack = 0
  7656  0021B0  0E00               	movlw	0
  7657  0021B2  6E17               	movwf	_mtxButtons,c	;volatile
  7658  0021B4  0012               	return		;funcret
  7659  0021B6                     __end_of_pauseButtons:
  7660                           	opt stack 0
  7661                           tblptru	equ	0xFF8
  7662                           tblptrh	equ	0xFF7
  7663                           tblptrl	equ	0xFF6
  7664                           tablat	equ	0xFF5
  7665                           prodh	equ	0xFF4
  7666                           prodl	equ	0xFF3
  7667                           intcon	equ	0xFF2
  7668                           intcon2	equ	0xFF1
  7669                           indf0	equ	0xFEF
  7670                           postinc0	equ	0xFEE
  7671                           fsr0h	equ	0xFEA
  7672                           fsr0l	equ	0xFE9
  7673                           wreg	equ	0xFE8
  7674                           indf1	equ	0xFE7
  7675                           postinc1	equ	0xFE6
  7676                           postdec1	equ	0xFE5
  7677                           plusw1	equ	0xFE3
  7678                           fsr1h	equ	0xFE2
  7679                           fsr1l	equ	0xFE1
  7680                           indf2	equ	0xFDF
  7681                           postinc2	equ	0xFDE
  7682                           postdec2	equ	0xFDD
  7683                           preinc2	equ	0xFDC
  7684                           plusw2	equ	0xFDB
  7685                           fsr2h	equ	0xFDA
  7686                           fsr2l	equ	0xFD9
  7687                           status	equ	0xFD8
  7688                           
  7689 ;; *************** function _mergeObjects *****************
  7690 ;; Defined at:
  7691 ;;		line 684 in file "pictris.c"
  7692 ;; Parameters:    Size  Location     Type
  7693 ;;  pSource         2   18[COMRAM] PTR volatile unsigned sh
  7694 ;;		 -> show_score@mask(16), choosescreen@mask(16), tmpObjectData(16), ObjectData(16), 
  7695 ;;  pTarget         2   20[COMRAM] PTR volatile unsigned sh
  7696 ;;		 -> tmpObjectData(16), BackgroundData(16), ObjectData(16), 
  7697 ;;  mode            1   22[COMRAM] enum E2767
  7698 ;; Auto vars:     Size  Location     Type
  7699 ;;  i               1   25[COMRAM] unsigned char 
  7700 ;; Return value:  Size  Location     Type
  7701 ;;                  1    wreg      void 
  7702 ;; Registers used:
  7703 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  7704 ;; Tracked objects:
  7705 ;;		On entry : 0/0
  7706 ;;		On exit  : 0/0
  7707 ;;		Unchanged: 0/0
  7708 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7709 ;;      Params:         5       0       0       0       0       0       0
  7710 ;;      Locals:         1       0       0       0       0       0       0
  7711 ;;      Temps:          2       0       0       0       0       0       0
  7712 ;;      Totals:         8       0       0       0       0       0       0
  7713 ;;Total ram usage:        8 bytes
  7714 ;; Hardware stack levels used:    1
  7715 ;; Hardware stack levels required when called:    2
  7716 ;; This function calls:
  7717 ;;		Nothing
  7718 ;; This function is called by:
  7719 ;;		_moveObjectDown
  7720 ;;		_checkButtons
  7721 ;;		_choosescreen
  7722 ;;		_show_score
  7723 ;; This function uses a non-reentrant model
  7724 ;;
  7725                           
  7726                           	psect	text45
  7727  001548                     __ptext45:
  7728                           	opt stack 0
  7729  001548                     _mergeObjects:
  7730                           	opt stack 27
  7731                           
  7732                           ;pictris.c: 684: void mergeObjects(volatile uint16_t * pSource, volatile uint16_t * pTar
      +                          get, mode_t mode);pictris.c: 685: {;pictris.c: 686:     byte i;;pictris.c: 688:     swit
      +                          ch (mode)
  7733                           
  7734                           ;incstack = 0
  7735  001548  D05C               	goto	l269
  7736  00154A                     
  7737                           ;pictris.c: 691:         for (i = 0; i < 8; i++)
  7738  00154A  0E00               	movlw	0
  7739  00154C  6E4E               	movwf	mergeObjects@i,c
  7740  00154E                     l3898:
  7741  00154E  0E07               	movlw	7
  7742  001550  644E               	cpfsgt	mergeObjects@i,c
  7743  001552  D001               	goto	l271
  7744  001554  0012               	return	
  7745  001556                     l271:
  7746                           
  7747                           ;pictris.c: 692:             pTarget[i] = pSource[i];
  7748  001556  504E               	movf	mergeObjects@i,w,c
  7749  001558  0D02               	mullw	2
  7750  00155A  50F3               	movf	prodl,w,c
  7751  00155C  2447               	addwf	mergeObjects@pSource,w,c
  7752  00155E  6ED9               	movwf	fsr2l,c
  7753  001560  50F4               	movf	prodh,w,c
  7754  001562  2048               	addwfc	mergeObjects@pSource+1,w,c
  7755  001564  6EDA               	movwf	fsr2h,c
  7756  001566  504E               	movf	mergeObjects@i,w,c
  7757  001568  0D02               	mullw	2
  7758  00156A  50F3               	movf	prodl,w,c
  7759  00156C  2449               	addwf	mergeObjects@pTarget,w,c
  7760  00156E  6EE1               	movwf	fsr1l,c
  7761  001570  50F4               	movf	prodh,w,c
  7762  001572  204A               	addwfc	mergeObjects@pTarget+1,w,c
  7763  001574  6EE2               	movwf	fsr1h,c
  7764  001576  CFDE FFE6          	movff	postinc2,postinc1
  7765  00157A  CFDD FFE5          	movff	postdec2,postdec1
  7766  00157E  2A4E               	incf	mergeObjects@i,f,c
  7767  001580  D7E6               	goto	l3898
  7768  001582                     
  7769                           ;pictris.c: 695:         for (i = 0; i < 8; i++)
  7770  001582  0E00               	movlw	0
  7771  001584  6E4E               	movwf	mergeObjects@i,c
  7772  001586                     l3910:
  7773  001586  0E07               	movlw	7
  7774  001588  644E               	cpfsgt	mergeObjects@i,c
  7775  00158A  D001               	goto	l275
  7776  00158C  0012               	return	
  7777  00158E                     l275:
  7778                           
  7779                           ;pictris.c: 696:             pTarget[i] |= pSource[i];
  7780  00158E  504E               	movf	mergeObjects@i,w,c
  7781  001590  0D02               	mullw	2
  7782  001592  50F3               	movf	prodl,w,c
  7783  001594  2447               	addwf	mergeObjects@pSource,w,c
  7784  001596  6ED9               	movwf	fsr2l,c
  7785  001598  50F4               	movf	prodh,w,c
  7786  00159A  2048               	addwfc	mergeObjects@pSource+1,w,c
  7787  00159C  6EDA               	movwf	fsr2h,c
  7788  00159E  CFDE F04C          	movff	postinc2,??_mergeObjects
  7789  0015A2  CFDD F04D          	movff	postdec2,??_mergeObjects+1
  7790  0015A6  504E               	movf	mergeObjects@i,w,c
  7791  0015A8  0D02               	mullw	2
  7792  0015AA  50F3               	movf	prodl,w,c
  7793  0015AC  2449               	addwf	mergeObjects@pTarget,w,c
  7794  0015AE  6ED9               	movwf	fsr2l,c
  7795  0015B0  50F4               	movf	prodh,w,c
  7796  0015B2  204A               	addwfc	mergeObjects@pTarget+1,w,c
  7797  0015B4  6EDA               	movwf	fsr2h,c
  7798  0015B6  504C               	movf	??_mergeObjects,w,c
  7799  0015B8  12DE               	iorwf	postinc2,f,c
  7800  0015BA  504D               	movf	??_mergeObjects+1,w,c
  7801  0015BC  12DD               	iorwf	postdec2,f,c
  7802  0015BE  2A4E               	incf	mergeObjects@i,f,c
  7803  0015C0  D7E2               	goto	l3910
  7804  0015C2                     
  7805                           ;pictris.c: 699:         for (i = 0; i < 8; i++)
  7806  0015C2  0E00               	movlw	0
  7807  0015C4  6E4E               	movwf	mergeObjects@i,c
  7808  0015C6                     l3922:
  7809  0015C6  0E07               	movlw	7
  7810  0015C8  644E               	cpfsgt	mergeObjects@i,c
  7811  0015CA  D001               	goto	l278
  7812  0015CC  0012               	return	
  7813  0015CE                     l278:
  7814                           
  7815                           ;pictris.c: 700:             pTarget[i] ^= pSource[i];
  7816  0015CE  504E               	movf	mergeObjects@i,w,c
  7817  0015D0  0D02               	mullw	2
  7818  0015D2  50F3               	movf	prodl,w,c
  7819  0015D4  2447               	addwf	mergeObjects@pSource,w,c
  7820  0015D6  6ED9               	movwf	fsr2l,c
  7821  0015D8  50F4               	movf	prodh,w,c
  7822  0015DA  2048               	addwfc	mergeObjects@pSource+1,w,c
  7823  0015DC  6EDA               	movwf	fsr2h,c
  7824  0015DE  CFDE F04C          	movff	postinc2,??_mergeObjects
  7825  0015E2  CFDD F04D          	movff	postdec2,??_mergeObjects+1
  7826  0015E6  504E               	movf	mergeObjects@i,w,c
  7827  0015E8  0D02               	mullw	2
  7828  0015EA  50F3               	movf	prodl,w,c
  7829  0015EC  2449               	addwf	mergeObjects@pTarget,w,c
  7830  0015EE  6ED9               	movwf	fsr2l,c
  7831  0015F0  50F4               	movf	prodh,w,c
  7832  0015F2  204A               	addwfc	mergeObjects@pTarget+1,w,c
  7833  0015F4  6EDA               	movwf	fsr2h,c
  7834  0015F6  504C               	movf	??_mergeObjects,w,c
  7835  0015F8  1ADE               	xorwf	postinc2,f,c
  7836  0015FA  504D               	movf	??_mergeObjects+1,w,c
  7837  0015FC  1ADD               	xorwf	postdec2,f,c
  7838  0015FE  2A4E               	incf	mergeObjects@i,f,c
  7839  001600  D7E2               	goto	l3922
  7840  001602                     l269:
  7841  001602  504B               	movf	mergeObjects@mode,w,c
  7842  001604  6E4C               	movwf	??_mergeObjects& (0+255),c
  7843  001606  6A4D               	clrf	(??_mergeObjects+1)& (0+255),c
  7844                           
  7845                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  7846                           ; Switch size 1, requested type "space"
  7847                           ; Number of cases is 1, Range of values is 0 to 0
  7848                           ; switch strategies available:
  7849                           ; Name         Instructions Cycles
  7850                           ; simple_byte            4     3 (average)
  7851                           ;	Chosen strategy is simple_byte
  7852  001608  504D               	movf	??_mergeObjects+1,w,c
  7853  00160A  0A00               	xorlw	0	; case 0
  7854  00160C  A4D8               	btfss	status,2,c
  7855  00160E  0012               	return	
  7856                           
  7857                           ; Switch size 1, requested type "space"
  7858                           ; Number of cases is 3, Range of values is 0 to 2
  7859                           ; switch strategies available:
  7860                           ; Name         Instructions Cycles
  7861                           ; simple_byte           10     6 (average)
  7862                           ;	Chosen strategy is simple_byte
  7863  001610  504C               	movf	??_mergeObjects,w,c
  7864  001612  0A00               	xorlw	0	; case 0
  7865  001614  B4D8               	btfsc	status,2,c
  7866  001616  D799               	goto	l270
  7867  001618  0A01               	xorlw	1	; case 1
  7868  00161A  B4D8               	btfsc	status,2,c
  7869  00161C  D7B2               	goto	l274
  7870  00161E  0A03               	xorlw	3	; case 2
  7871  001620  A4D8               	btfss	status,2,c
  7872  001622  0012               	return	
  7873  001624  D7CE               	goto	l277
  7874  001626                     __end_of_mergeObjects:
  7875                           	opt stack 0
  7876                           tblptru	equ	0xFF8
  7877                           tblptrh	equ	0xFF7
  7878                           tblptrl	equ	0xFF6
  7879                           tablat	equ	0xFF5
  7880                           prodh	equ	0xFF4
  7881                           prodl	equ	0xFF3
  7882                           intcon	equ	0xFF2
  7883                           intcon2	equ	0xFF1
  7884                           indf0	equ	0xFEF
  7885                           postinc0	equ	0xFEE
  7886                           fsr0h	equ	0xFEA
  7887                           fsr0l	equ	0xFE9
  7888                           wreg	equ	0xFE8
  7889                           indf1	equ	0xFE7
  7890                           postinc1	equ	0xFE6
  7891                           postdec1	equ	0xFE5
  7892                           plusw1	equ	0xFE3
  7893                           fsr1h	equ	0xFE2
  7894                           fsr1l	equ	0xFE1
  7895                           indf2	equ	0xFDF
  7896                           postinc2	equ	0xFDE
  7897                           postdec2	equ	0xFDD
  7898                           preinc2	equ	0xFDC
  7899                           plusw2	equ	0xFDB
  7900                           fsr2h	equ	0xFDA
  7901                           fsr2l	equ	0xFD9
  7902                           status	equ	0xFD8
  7903                           
  7904 ;; *************** function _clearArray *****************
  7905 ;; Defined at:
  7906 ;;		line 533 in file "pictris.c"
  7907 ;; Parameters:    Size  Location     Type
  7908 ;;  pArray          2   18[COMRAM] PTR volatile unsigned sh
  7909 ;;		 -> tmpObjectData(16), BackgroundData(16), ObjectData(16), 
  7910 ;;  size            2   20[COMRAM] unsigned int 
  7911 ;; Auto vars:     Size  Location     Type
  7912 ;;  i               1   24[COMRAM] unsigned char 
  7913 ;; Return value:  Size  Location     Type
  7914 ;;                  1    wreg      void 
  7915 ;; Registers used:
  7916 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  7917 ;; Tracked objects:
  7918 ;;		On entry : 0/0
  7919 ;;		On exit  : 0/0
  7920 ;;		Unchanged: 0/0
  7921 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7922 ;;      Params:         4       0       0       0       0       0       0
  7923 ;;      Locals:         1       0       0       0       0       0       0
  7924 ;;      Temps:          2       0       0       0       0       0       0
  7925 ;;      Totals:         7       0       0       0       0       0       0
  7926 ;;Total ram usage:        7 bytes
  7927 ;; Hardware stack levels used:    1
  7928 ;; Hardware stack levels required when called:    2
  7929 ;; This function calls:
  7930 ;;		Nothing
  7931 ;; This function is called by:
  7932 ;;		_SnakeGraph
  7933 ;;		_newRotation
  7934 ;;		_initialise_globals
  7935 ;;		_choosescreen
  7936 ;;		_show_score
  7937 ;;		_mainGameLoop
  7938 ;; This function uses a non-reentrant model
  7939 ;;
  7940                           
  7941                           	psect	text46
  7942  001FB8                     __ptext46:
  7943                           	opt stack 0
  7944  001FB8                     _clearArray:
  7945                           	opt stack 27
  7946                           
  7947                           ;pictris.c: 533: void clearArray(volatile uint16_t *pArray, size_t size);pictris.c: 534:
      +                           {;pictris.c: 535:     byte i;;pictris.c: 536:     for (i = 0; i < size; i++)
  7948                           
  7949                           ;incstack = 0
  7950  001FB8  0E00               	movlw	0
  7951  001FBA  6E4D               	movwf	clearArray@i,c
  7952  001FBC  D00D               	goto	l214
  7953  001FBE                     
  7954                           ;pictris.c: 537:         pArray[i] = 0;
  7955  001FBE  504D               	movf	clearArray@i,w,c
  7956  001FC0  0D02               	mullw	2
  7957  001FC2  50F3               	movf	prodl,w,c
  7958  001FC4  2447               	addwf	clearArray@pArray,w,c
  7959  001FC6  6ED9               	movwf	fsr2l,c
  7960  001FC8  50F4               	movf	prodh,w,c
  7961  001FCA  2048               	addwfc	clearArray@pArray+1,w,c
  7962  001FCC  6EDA               	movwf	fsr2h,c
  7963  001FCE  0E00               	movlw	0
  7964  001FD0  6EDE               	movwf	postinc2,c
  7965  001FD2  0E00               	movlw	0
  7966  001FD4  6EDD               	movwf	postdec2,c
  7967  001FD6  2A4D               	incf	clearArray@i,f,c
  7968  001FD8                     l214:
  7969  001FD8  504D               	movf	clearArray@i,w,c
  7970  001FDA  6E4B               	movwf	??_clearArray& (0+255),c
  7971  001FDC  6A4C               	clrf	(??_clearArray+1)& (0+255),c
  7972  001FDE  5049               	movf	clearArray@size,w,c
  7973  001FE0  5C4B               	subwf	??_clearArray,w,c
  7974  001FE2  504A               	movf	clearArray@size+1,w,c
  7975  001FE4  584C               	subwfb	??_clearArray+1,w,c
  7976  001FE6  B0D8               	btfsc	status,0,c
  7977  001FE8  0012               	return	
  7978  001FEA  D7E9               	goto	l215
  7979  001FEC                     __end_of_clearArray:
  7980                           	opt stack 0
  7981                           tblptru	equ	0xFF8
  7982                           tblptrh	equ	0xFF7
  7983                           tblptrl	equ	0xFF6
  7984                           tablat	equ	0xFF5
  7985                           prodh	equ	0xFF4
  7986                           prodl	equ	0xFF3
  7987                           intcon	equ	0xFF2
  7988                           intcon2	equ	0xFF1
  7989                           indf0	equ	0xFEF
  7990                           postinc0	equ	0xFEE
  7991                           fsr0h	equ	0xFEA
  7992                           fsr0l	equ	0xFE9
  7993                           wreg	equ	0xFE8
  7994                           indf1	equ	0xFE7
  7995                           postinc1	equ	0xFE6
  7996                           postdec1	equ	0xFE5
  7997                           plusw1	equ	0xFE3
  7998                           fsr1h	equ	0xFE2
  7999                           fsr1l	equ	0xFE1
  8000                           indf2	equ	0xFDF
  8001                           postinc2	equ	0xFDE
  8002                           postdec2	equ	0xFDD
  8003                           preinc2	equ	0xFDC
  8004                           plusw2	equ	0xFDB
  8005                           fsr2h	equ	0xFDA
  8006                           fsr2l	equ	0xFD9
  8007                           status	equ	0xFD8
  8008                           
  8009 ;; *************** function _isr *****************
  8010 ;; Defined at:
  8011 ;;		line 449 in file "pictris.c"
  8012 ;; Parameters:    Size  Location     Type
  8013 ;;		None
  8014 ;; Auto vars:     Size  Location     Type
  8015 ;;  ymask           2   15[COMRAM] unsigned short 
  8016 ;;  xmask           1   17[COMRAM] unsigned char 
  8017 ;; Return value:  Size  Location     Type
  8018 ;;                  1    wreg      void 
  8019 ;; Registers used:
  8020 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  8021 ;; Tracked objects:
  8022 ;;		On entry : 0/0
  8023 ;;		On exit  : 0/0
  8024 ;;		Unchanged: 0/0
  8025 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8026 ;;      Params:         0       0       0       0       0       0       0
  8027 ;;      Locals:         3       0       0       0       0       0       0
  8028 ;;      Temps:          8       0       0       0       0       0       0
  8029 ;;      Totals:        11       0       0       0       0       0       0
  8030 ;;Total ram usage:       11 bytes
  8031 ;; Hardware stack levels used:    1
  8032 ;; Hardware stack levels required when called:    1
  8033 ;; This function calls:
  8034 ;;		___lwmod
  8035 ;;		_debounceButton
  8036 ;; This function is called by:
  8037 ;;		Interrupt level 2
  8038 ;; This function uses a non-reentrant model
  8039 ;;
  8040                           
  8041                           	psect	intcode
  8042  000008                     __pintcode:
  8043                           	opt stack 0
  8044  000008                     _isr:
  8045                           	opt stack 24
  8046                           
  8047                           ;incstack = 0
  8048  000008  8263               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
  8049  00000A  ED8A  F005         	call	int_func,f	;refresh shadow registers
  8050                           tblptru	equ	0xFF8
  8051                           tblptrh	equ	0xFF7
  8052                           tblptrl	equ	0xFF6
  8053                           tablat	equ	0xFF5
  8054                           prodh	equ	0xFF4
  8055                           prodl	equ	0xFF3
  8056                           intcon	equ	0xFF2
  8057                           intcon2	equ	0xFF1
  8058                           indf0	equ	0xFEF
  8059                           postinc0	equ	0xFEE
  8060                           fsr0h	equ	0xFEA
  8061                           fsr0l	equ	0xFE9
  8062                           wreg	equ	0xFE8
  8063                           indf1	equ	0xFE7
  8064                           postinc1	equ	0xFE6
  8065                           postdec1	equ	0xFE5
  8066                           plusw1	equ	0xFE3
  8067                           fsr1h	equ	0xFE2
  8068                           fsr1l	equ	0xFE1
  8069                           indf2	equ	0xFDF
  8070                           postinc2	equ	0xFDE
  8071                           postdec2	equ	0xFDD
  8072                           preinc2	equ	0xFDC
  8073                           plusw2	equ	0xFDB
  8074                           fsr2h	equ	0xFDA
  8075                           fsr2l	equ	0xFD9
  8076                           status	equ	0xFD8
  8077                           
  8078                           	psect	intcode_body
  8079  000B14                     __pintcode_body:
  8080                           	opt stack 24
  8081  000B14                     int_func:
  8082                           	opt stack 24
  8083  000B14  0006               	pop		; remove dummy address from shadow register refresh
  8084  000B16  CFD9 F040          	movff	fsr2l,??_isr+4
  8085  000B1A  CFDA F041          	movff	fsr2h,??_isr+5
  8086  000B1E  CFF3 F042          	movff	prodl,??_isr+6
  8087  000B22  CFF4 F043          	movff	prodh,??_isr+7
  8088                           
  8089                           ;pictris.c: 452:     if (INTCONbits.TMR0IF)
  8090  000B26  A4F2               	btfss	intcon,2,c	;volatile
  8091  000B28  D0B1               	goto	i2l202
  8092                           
  8093                           ;pictris.c: 453:     {;pictris.c: 454:         INTCONbits.TMR0IF = 0;
  8094  000B2A  94F2               	bcf	intcon,2,c	;volatile
  8095                           
  8096                           ;pictris.c: 455:         TMR0 = (~125);
  8097  000B2C  0EFF               	movlw	255
  8098  000B2E  6ED7               	movwf	4055,c	;volatile
  8099  000B30  0E82               	movlw	130
  8100  000B32  6ED6               	movwf	4054,c	;volatile
  8101                           
  8102                           ;pictris.c: 458:         time--;
  8103  000B34  0601               	decf	_time,f,c	;volatile
  8104  000B36  A0D8               	btfss	status,0,c
  8105  000B38  0602               	decf	_time+1,f,c	;volatile
  8106                           
  8107                           ;pictris.c: 461:         if (++mS >= 1000)
  8108  000B3A  4A03               	infsnz	_mS,f,c	;volatile
  8109  000B3C  2A04               	incf	_mS+1,f,c	;volatile
  8110  000B3E  0EE8               	movlw	232
  8111  000B40  5C03               	subwf	_mS,w,c	;volatile
  8112  000B42  0E03               	movlw	3
  8113  000B44  5804               	subwfb	_mS+1,w,c	;volatile
  8114  000B46  A0D8               	btfss	status,0,c
  8115  000B48  D004               	goto	i2l203
  8116                           
  8117                           ;pictris.c: 462:         {;pictris.c: 463:             mS = 0;
  8118  000B4A  0E00               	movlw	0
  8119  000B4C  6E04               	movwf	_mS+1,c	;volatile
  8120  000B4E  0E00               	movlw	0
  8121  000B50  6E03               	movwf	_mS,c	;volatile
  8122  000B52                     i2l203:
  8123                           
  8124                           ;pictris.c: 476:         if (mtxButtons)
  8125  000B52  5017               	movf	_mtxButtons,w,c	;volatile
  8126  000B54  B4D8               	btfsc	status,2,c
  8127  000B56  D03C               	goto	i2l204
  8128                           
  8129                           ;pictris.c: 477:         {;pictris.c: 478:             debounceButton(PORTBbits.RB0, &Le
      +                          ft_Delay, &Left_Debounced );
  8130  000B58  0E2E               	movlw	low _Left_Delay
  8131  000B5A  6E35               	movwf	debounceButton@delay,c
  8132  000B5C  0E00               	movlw	high _Left_Delay
  8133  000B5E  6E36               	movwf	debounceButton@delay+1,c
  8134  000B60  0E34               	movlw	low _Left_Debounced
  8135  000B62  6E37               	movwf	debounceButton@debounced,c
  8136  000B64  0E00               	movlw	high _Left_Debounced
  8137  000B66  6E38               	movwf	debounceButton@debounced+1,c
  8138  000B68  A081               	btfss	3969,0,c	;volatile
  8139  000B6A  D002               	goto	i2u382_40
  8140  000B6C  0E01               	movlw	1
  8141  000B6E  D001               	goto	i2u382_46
  8142  000B70                     i2u382_40:
  8143  000B70  0E00               	movlw	0
  8144  000B72                     i2u382_46:
  8145  000B72  ECDA  F00D         	call	_debounceButton
  8146                           
  8147                           ;pictris.c: 479:             debounceButton(PORTBbits.RB1, &Right_Delay, &Right_Debounce
      +                          d );
  8148  000B76  0E2C               	movlw	low _Right_Delay
  8149  000B78  6E35               	movwf	debounceButton@delay,c
  8150  000B7A  0E00               	movlw	high _Right_Delay
  8151  000B7C  6E36               	movwf	debounceButton@delay+1,c
  8152  000B7E  0E33               	movlw	low _Right_Debounced
  8153  000B80  6E37               	movwf	debounceButton@debounced,c
  8154  000B82  0E00               	movlw	high _Right_Debounced
  8155  000B84  6E38               	movwf	debounceButton@debounced+1,c
  8156  000B86  A281               	btfss	3969,1,c	;volatile
  8157  000B88  D002               	goto	i2u383_40
  8158  000B8A  0E01               	movlw	1
  8159  000B8C  D001               	goto	i2u383_46
  8160  000B8E                     i2u383_40:
  8161  000B8E  0E00               	movlw	0
  8162  000B90                     i2u383_46:
  8163  000B90  ECDA  F00D         	call	_debounceButton
  8164                           
  8165                           ;pictris.c: 480:             debounceButton(PORTBbits.RB2, &Rotate_Delay, &Rotate_Deboun
      +                          ced);
  8166  000B94  0E2A               	movlw	low _Rotate_Delay
  8167  000B96  6E35               	movwf	debounceButton@delay,c
  8168  000B98  0E00               	movlw	high _Rotate_Delay
  8169  000B9A  6E36               	movwf	debounceButton@delay+1,c
  8170  000B9C  0E32               	movlw	low _Rotate_Debounced
  8171  000B9E  6E37               	movwf	debounceButton@debounced,c
  8172  000BA0  0E00               	movlw	high _Rotate_Debounced
  8173  000BA2  6E38               	movwf	debounceButton@debounced+1,c
  8174  000BA4  A481               	btfss	3969,2,c	;volatile
  8175  000BA6  D002               	goto	i2u384_40
  8176  000BA8  0E01               	movlw	1
  8177  000BAA  D001               	goto	i2u384_46
  8178  000BAC                     i2u384_40:
  8179  000BAC  0E00               	movlw	0
  8180  000BAE                     i2u384_46:
  8181  000BAE  ECDA  F00D         	call	_debounceButton
  8182                           
  8183                           ;pictris.c: 481:             debounceButton(PORTBbits.RB3, &Down_Delay, &Down_Debounced 
      +                          );
  8184  000BB2  0E28               	movlw	low _Down_Delay
  8185  000BB4  6E35               	movwf	debounceButton@delay,c
  8186  000BB6  0E00               	movlw	high _Down_Delay
  8187  000BB8  6E36               	movwf	debounceButton@delay+1,c
  8188  000BBA  0E31               	movlw	low _Down_Debounced
  8189  000BBC  6E37               	movwf	debounceButton@debounced,c
  8190  000BBE  0E00               	movlw	high _Down_Debounced
  8191  000BC0  6E38               	movwf	debounceButton@debounced+1,c
  8192  000BC2  A681               	btfss	3969,3,c	;volatile
  8193  000BC4  D002               	goto	i2u385_40
  8194  000BC6  0E01               	movlw	1
  8195  000BC8  D001               	goto	i2u385_46
  8196  000BCA                     i2u385_40:
  8197  000BCA  0E00               	movlw	0
  8198  000BCC                     i2u385_46:
  8199  000BCC  ECDA  F00D         	call	_debounceButton
  8200  000BD0                     i2l204:
  8201                           
  8202                           ;pictris.c: 489:         if (tetris == 1){
  8203  000BD0  0407               	decf	_tetris,w,c
  8204  000BD2  A4D8               	btfss	status,2,c
  8205  000BD4  D00F               	goto	i2l205
  8206                           
  8207                           ;pictris.c: 490:         DropObject |= mS == 800;}
  8208  000BD6  0E20               	movlw	32
  8209  000BD8  1803               	xorwf	_mS,w,c	;volatile
  8210  000BDA  E106               	bnz	i2u387_40
  8211  000BDC  0E03               	movlw	3
  8212  000BDE  1804               	xorwf	_mS+1,w,c	;volatile
  8213  000BE0  A4D8               	btfss	status,2,c
  8214  000BE2  D002               	goto	i2u387_40
  8215  000BE4  0E01               	movlw	1
  8216  000BE6  D001               	goto	i2u388_40
  8217  000BE8                     i2u387_40:
  8218  000BE8  0E00               	movlw	0
  8219  000BEA                     i2u388_40:
  8220  000BEA  6E3C               	movwf	??_isr& (0+255),c
  8221  000BEC  6A3D               	clrf	(??_isr+1)& (0+255),c
  8222  000BEE  503C               	movf	??_isr,w,c
  8223  000BF0  1210               	iorwf	_DropObject,f,c	;volatile
  8224  000BF2  D010               	goto	i2l207
  8225  000BF4                     i2l205:
  8226  000BF4  C003  F035         	movff	_mS,___lwmod@dividend	;volatile
  8227  000BF8  C004  F036         	movff	_mS+1,___lwmod@dividend+1	;volatile
  8228  000BFC  0E00               	movlw	0
  8229  000BFE  6E38               	movwf	___lwmod@divisor+1,c
  8230  000C00  0EC8               	movlw	200
  8231  000C02  6E37               	movwf	___lwmod@divisor,c
  8232  000C04  EC6B  F00F         	call	___lwmod	;wreg free
  8233  000C08  5035               	movf	?___lwmod,w,c
  8234  000C0A  1036               	iorwf	?___lwmod+1,w,c
  8235  000C0C  A4D8               	btfss	status,2,c
  8236  000C0E  D002               	goto	i2l207
  8237                           
  8238                           ;pictris.c: 493:         moveSnake = 1;
  8239  000C10  0E01               	movlw	1
  8240  000C12  6E0C               	movwf	_moveSnake,c
  8241  000C14                     i2l207:
  8242                           
  8243                           ;pictris.c: 503:         if (UpdateScreen)
  8244  000C14  5006               	movf	_UpdateScreen,w,c	;volatile
  8245  000C16  B4D8               	btfsc	status,2,c
  8246  000C18  D037               	goto	i2l208
  8247                           
  8248                           ;pictris.c: 504:         {;pictris.c: 505:             static byte CurrentX = 0;;pictris
      +                          .c: 507:             uint8_t xmask = 1 << CurrentX;
  8249  000C1A  C030  F03C         	movff	isr@CurrentX,??_isr
  8250  000C1E  0E01               	movlw	1
  8251  000C20  6E3D               	movwf	(??_isr+1)& (0+255),c
  8252  000C22  2A3C               	incf	??_isr,f,c
  8253  000C24  D002               	goto	i2u391_44
  8254  000C26                     i2u391_45:
  8255  000C26  90D8               	bcf	status,0,c
  8256  000C28  363D               	rlcf	??_isr+1,f,c
  8257  000C2A                     i2u391_44:
  8258  000C2A  2E3C               	decfsz	??_isr,f,c
  8259  000C2C  D7FC               	goto	i2u391_45
  8260  000C2E  503D               	movf	??_isr+1,w,c
  8261  000C30  6E46               	movwf	isr@xmask,c
  8262                           
  8263                           ;pictris.c: 508:             uint16_t ymask = ObjectData[CurrentX] | BackgroundData[Curr
      +                          entX];
  8264  000C32  5030               	movf	isr@CurrentX,w,c
  8265  000C34  0D02               	mullw	2
  8266  000C36  0E90               	movlw	low _BackgroundData
  8267  000C38  24F3               	addwf	prodl,w,c
  8268  000C3A  6ED9               	movwf	fsr2l,c
  8269  000C3C  0E00               	movlw	high _BackgroundData
  8270  000C3E  20F4               	addwfc	prodh,w,c
  8271  000C40  6EDA               	movwf	fsr2h,c
  8272  000C42  CFDE F03C          	movff	postinc2,??_isr
  8273  000C46  CFDD F03D          	movff	postdec2,??_isr+1
  8274  000C4A  5030               	movf	isr@CurrentX,w,c
  8275  000C4C  0D02               	mullw	2
  8276  000C4E  0E18               	movlw	low _ObjectData
  8277  000C50  24F3               	addwf	prodl,w,c
  8278  000C52  6ED9               	movwf	fsr2l,c
  8279  000C54  0E00               	movlw	high _ObjectData
  8280  000C56  20F4               	addwfc	prodh,w,c
  8281  000C58  6EDA               	movwf	fsr2h,c
  8282  000C5A  CFDE F03E          	movff	postinc2,??_isr+2
  8283  000C5E  CFDD F03F          	movff	postdec2,??_isr+3
  8284  000C62  503C               	movf	??_isr,w,c
  8285  000C64  103E               	iorwf	??_isr+2,w,c
  8286  000C66  6E44               	movwf	isr@ymask,c
  8287  000C68  503D               	movf	??_isr+1,w,c
  8288  000C6A  103F               	iorwf	??_isr+3,w,c
  8289  000C6C  6E45               	movwf	isr@ymask+1,c
  8290                           
  8291                           ;pictris.c: 510:             port_display = 0;
  8292  000C6E  0E00               	movlw	0
  8293  000C70  6E83               	movwf	3971,c	;volatile
  8294  000C72  0E00               	movlw	0
  8295  000C74  6E82               	movwf	3970,c	;volatile
  8296                           
  8297                           ;pictris.c: 512:             PORTA = xmask;
  8298  000C76  C046  FF80         	movff	isr@xmask,3968	;volatile
  8299                           
  8300                           ;pictris.c: 517:             port_display = ~ymask;
  8301  000C7A  1C44               	comf	isr@ymask,w,c
  8302  000C7C  6E82               	movwf	3970,c	;volatile
  8303  000C7E  1C45               	comf	isr@ymask+1,w,c
  8304  000C80  6E83               	movwf	3971,c	;volatile
  8305                           
  8306                           ;pictris.c: 520:             CurrentX++;
  8307  000C82  2A30               	incf	isr@CurrentX,f,c
  8308                           
  8309                           ;pictris.c: 521:             CurrentX &= 0x07;
  8310  000C84  0E07               	movlw	7
  8311  000C86  1630               	andwf	isr@CurrentX,f,c
  8312  000C88                     i2l208:
  8313                           
  8314                           ;pictris.c: 526:         InterruptComplete = 1;
  8315  000C88  0E01               	movlw	1
  8316  000C8A  6E05               	movwf	_InterruptComplete,c	;volatile
  8317  000C8C                     i2l202:
  8318  000C8C  C043  FFF4         	movff	??_isr+7,prodh
  8319  000C90  C042  FFF3         	movff	??_isr+6,prodl
  8320  000C94  C041  FFDA         	movff	??_isr+5,fsr2h
  8321  000C98  C040  FFD9         	movff	??_isr+4,fsr2l
  8322  000C9C  9263               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
  8323  000C9E  0011               	retfie		f
  8324  000CA0                     __end_of_isr:
  8325                           	opt stack 0
  8326                           tblptru	equ	0xFF8
  8327                           tblptrh	equ	0xFF7
  8328                           tblptrl	equ	0xFF6
  8329                           tablat	equ	0xFF5
  8330                           prodh	equ	0xFF4
  8331                           prodl	equ	0xFF3
  8332                           intcon	equ	0xFF2
  8333                           intcon2	equ	0xFF1
  8334                           indf0	equ	0xFEF
  8335                           postinc0	equ	0xFEE
  8336                           fsr0h	equ	0xFEA
  8337                           fsr0l	equ	0xFE9
  8338                           wreg	equ	0xFE8
  8339                           indf1	equ	0xFE7
  8340                           postinc1	equ	0xFE6
  8341                           postdec1	equ	0xFE5
  8342                           plusw1	equ	0xFE3
  8343                           fsr1h	equ	0xFE2
  8344                           fsr1l	equ	0xFE1
  8345                           indf2	equ	0xFDF
  8346                           postinc2	equ	0xFDE
  8347                           postdec2	equ	0xFDD
  8348                           preinc2	equ	0xFDC
  8349                           plusw2	equ	0xFDB
  8350                           fsr2h	equ	0xFDA
  8351                           fsr2l	equ	0xFD9
  8352                           status	equ	0xFD8
  8353                           
  8354 ;; *************** function _debounceButton *****************
  8355 ;; Defined at:
  8356 ;;		line 366 in file "pictris.c"
  8357 ;; Parameters:    Size  Location     Type
  8358 ;;  button          1    wreg     volatile _Bool 
  8359 ;;  delay           2    0[COMRAM] PTR volatile short 
  8360 ;;		 -> Down_Delay(2), Rotate_Delay(2), Right_Delay(2), Left_Delay(2), 
  8361 ;;  debounced       2    2[COMRAM] PTR volatile _Bool 
  8362 ;;		 -> Down_Debounced(1), Rotate_Debounced(1), Right_Debounced(1), Left_Debounced(1), 
  8363 ;; Auto vars:     Size  Location     Type
  8364 ;;  button          1    6[COMRAM] volatile _Bool 
  8365 ;; Return value:  Size  Location     Type
  8366 ;;                  1    wreg      void 
  8367 ;; Registers used:
  8368 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  8369 ;; Tracked objects:
  8370 ;;		On entry : 0/0
  8371 ;;		On exit  : 0/0
  8372 ;;		Unchanged: 0/0
  8373 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8374 ;;      Params:         4       0       0       0       0       0       0
  8375 ;;      Locals:         1       0       0       0       0       0       0
  8376 ;;      Temps:          2       0       0       0       0       0       0
  8377 ;;      Totals:         7       0       0       0       0       0       0
  8378 ;;Total ram usage:        7 bytes
  8379 ;; Hardware stack levels used:    1
  8380 ;; This function calls:
  8381 ;;		Nothing
  8382 ;; This function is called by:
  8383 ;;		_isr
  8384 ;; This function uses a non-reentrant model
  8385 ;;
  8386                           
  8387                           	psect	text48
  8388  001BB4                     __ptext48:
  8389                           	opt stack 0
  8390  001BB4                     _debounceButton:
  8391                           	opt stack 24
  8392                           
  8393                           ;incstack = 0
  8394                           ;debounceButton@button stored from wreg
  8395  001BB4  6E3B               	movwf	debounceButton@button,c	;volatile
  8396                           
  8397                           ;pictris.c: 366: void debounceButton(volatile _Bool button, volatile int16_t *delay, vol
      +                          atile _Bool *debounced);pictris.c: 367: {;pictris.c: 368:     if (button == 0)
  8398  001BB6  503B               	movf	debounceButton@button,w,c	;volatile
  8399  001BB8  A4D8               	btfss	status,2,c
  8400  001BBA  D023               	goto	i2l167
  8401                           
  8402                           ;pictris.c: 369:     {;pictris.c: 370:         if (*delay < 0)
  8403  001BBC  C035  FFD9         	movff	debounceButton@delay,fsr2l
  8404  001BC0  C036  FFDA         	movff	debounceButton@delay+1,fsr2h
  8405  001BC4  0E01               	movlw	1
  8406  001BC6  AEDB               	btfss	plusw2,7,c
  8407  001BC8  D009               	goto	i2l168
  8408                           
  8409                           ;pictris.c: 371:             *delay = 20;
  8410  001BCA  C035  FFD9         	movff	debounceButton@delay,fsr2l
  8411  001BCE  C036  FFDA         	movff	debounceButton@delay+1,fsr2h
  8412  001BD2  0E14               	movlw	20
  8413  001BD4  6EDE               	movwf	postinc2,c
  8414  001BD6  0E00               	movlw	0
  8415  001BD8  6EDD               	movwf	postdec2,c
  8416  001BDA  0012               	return	
  8417  001BDC                     i2l168:
  8418  001BDC  C035  FFD9         	movff	debounceButton@delay,fsr2l
  8419  001BE0  C036  FFDA         	movff	debounceButton@delay+1,fsr2h
  8420  001BE4  06DE               	decf	postinc2,f,c
  8421  001BE6  0E00               	movlw	0
  8422  001BE8  5ADD               	subwfb	postdec2,f,c
  8423  001BEA  28DE               	incf	postinc2,w,c
  8424  001BEC  E119               	bnz	i2l172
  8425  001BEE  28DE               	incf	postinc2,w,c
  8426  001BF0  A4D8               	btfss	status,2,c
  8427  001BF2  0012               	return	
  8428                           
  8429                           ;pictris.c: 373:             *debounced = 1;
  8430  001BF4  C037  FFD9         	movff	debounceButton@debounced,fsr2l
  8431  001BF8  C038  FFDA         	movff	debounceButton@debounced+1,fsr2h
  8432  001BFC  0E01               	movlw	1
  8433  001BFE  6EDF               	movwf	indf2,c
  8434                           
  8435                           ;pictris.c: 374:     }
  8436  001C00  0012               	return	
  8437  001C02                     i2l167:
  8438                           
  8439                           ;pictris.c: 376:     {;pictris.c: 377:         *delay = -1;
  8440  001C02  C035  FFD9         	movff	debounceButton@delay,fsr2l
  8441  001C06  C036  FFDA         	movff	debounceButton@delay+1,fsr2h
  8442  001C0A  0EFF               	movlw	255
  8443  001C0C  6EDE               	movwf	postinc2,c
  8444  001C0E  0EFF               	movlw	255
  8445  001C10  6EDD               	movwf	postdec2,c
  8446                           
  8447                           ;pictris.c: 378:         *debounced = 0;
  8448  001C12  C037  FFD9         	movff	debounceButton@debounced,fsr2l
  8449  001C16  C038  FFDA         	movff	debounceButton@debounced+1,fsr2h
  8450  001C1A  0E00               	movlw	0
  8451  001C1C  6EDF               	movwf	indf2,c
  8452  001C1E  0012               	return	
  8453  001C20                     i2l172:
  8454  001C20  0012               	return		;funcret
  8455  001C22                     __end_of_debounceButton:
  8456                           	opt stack 0
  8457                           tblptru	equ	0xFF8
  8458                           tblptrh	equ	0xFF7
  8459                           tblptrl	equ	0xFF6
  8460                           tablat	equ	0xFF5
  8461                           prodh	equ	0xFF4
  8462                           prodl	equ	0xFF3
  8463                           intcon	equ	0xFF2
  8464                           intcon2	equ	0xFF1
  8465                           indf0	equ	0xFEF
  8466                           postinc0	equ	0xFEE
  8467                           fsr0h	equ	0xFEA
  8468                           fsr0l	equ	0xFE9
  8469                           wreg	equ	0xFE8
  8470                           indf1	equ	0xFE7
  8471                           postinc1	equ	0xFE6
  8472                           postdec1	equ	0xFE5
  8473                           plusw1	equ	0xFE3
  8474                           fsr1h	equ	0xFE2
  8475                           fsr1l	equ	0xFE1
  8476                           indf2	equ	0xFDF
  8477                           postinc2	equ	0xFDE
  8478                           postdec2	equ	0xFDD
  8479                           preinc2	equ	0xFDC
  8480                           plusw2	equ	0xFDB
  8481                           fsr2h	equ	0xFDA
  8482                           fsr2l	equ	0xFD9
  8483                           status	equ	0xFD8
  8484                           
  8485 ;; *************** function ___lwmod *****************
  8486 ;; Defined at:
  8487 ;;		line 7 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c99\common\lwmod.c"
  8488 ;; Parameters:    Size  Location     Type
  8489 ;;  dividend        2    0[COMRAM] unsigned int 
  8490 ;;  divisor         2    2[COMRAM] unsigned int 
  8491 ;; Auto vars:     Size  Location     Type
  8492 ;;  counter         1    4[COMRAM] unsigned char 
  8493 ;; Return value:  Size  Location     Type
  8494 ;;                  2    0[COMRAM] unsigned int 
  8495 ;; Registers used:
  8496 ;;		wreg, status,2, status,0
  8497 ;; Tracked objects:
  8498 ;;		On entry : 0/0
  8499 ;;		On exit  : 0/0
  8500 ;;		Unchanged: 0/0
  8501 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8502 ;;      Params:         4       0       0       0       0       0       0
  8503 ;;      Locals:         1       0       0       0       0       0       0
  8504 ;;      Temps:          0       0       0       0       0       0       0
  8505 ;;      Totals:         5       0       0       0       0       0       0
  8506 ;;Total ram usage:        5 bytes
  8507 ;; Hardware stack levels used:    1
  8508 ;; This function calls:
  8509 ;;		Nothing
  8510 ;; This function is called by:
  8511 ;;		_isr
  8512 ;; This function uses a non-reentrant model
  8513 ;;
  8514                           
  8515                           	psect	text49
  8516  001ED6                     __ptext49:
  8517                           	opt stack 0
  8518  001ED6                     ___lwmod:
  8519                           	opt stack 24
  8520                           
  8521                           ;incstack = 0
  8522  001ED6  5037               	movf	___lwmod@divisor,w,c
  8523  001ED8  1038               	iorwf	___lwmod@divisor+1,w,c
  8524  001EDA  B4D8               	btfsc	status,2,c
  8525  001EDC  D018               	goto	i2l1038
  8526  001EDE  0E01               	movlw	1
  8527  001EE0  6E39               	movwf	___lwmod@counter,c
  8528  001EE2  D004               	goto	i2l1033
  8529  001EE4  90D8               	bcf	status,0,c
  8530  001EE6  3637               	rlcf	___lwmod@divisor,f,c
  8531  001EE8  3638               	rlcf	___lwmod@divisor+1,f,c
  8532  001EEA  2A39               	incf	___lwmod@counter,f,c
  8533  001EEC                     i2l1033:
  8534  001EEC  AE38               	btfss	___lwmod@divisor+1,7,c
  8535  001EEE  D7FA               	goto	i2l1034
  8536  001EF0                     i2u377_40:
  8537  001EF0  5037               	movf	___lwmod@divisor,w,c
  8538  001EF2  5C35               	subwf	___lwmod@dividend,w,c
  8539  001EF4  5038               	movf	___lwmod@divisor+1,w,c
  8540  001EF6  5836               	subwfb	___lwmod@dividend+1,w,c
  8541  001EF8  A0D8               	btfss	status,0,c
  8542  001EFA  D004               	goto	i2l1037
  8543  001EFC  5037               	movf	___lwmod@divisor,w,c
  8544  001EFE  5E35               	subwf	___lwmod@dividend,f,c
  8545  001F00  5038               	movf	___lwmod@divisor+1,w,c
  8546  001F02  5A36               	subwfb	___lwmod@dividend+1,f,c
  8547  001F04                     i2l1037:
  8548  001F04  90D8               	bcf	status,0,c
  8549  001F06  3238               	rrcf	___lwmod@divisor+1,f,c
  8550  001F08  3237               	rrcf	___lwmod@divisor,f,c
  8551  001F0A  2E39               	decfsz	___lwmod@counter,f,c
  8552  001F0C  D7F1               	goto	i2u377_40
  8553  001F0E                     i2l1038:
  8554  001F0E  C035  F035         	movff	___lwmod@dividend,?___lwmod
  8555  001F12  C036  F036         	movff	___lwmod@dividend+1,?___lwmod+1
  8556  001F16  0012               	return		;funcret
  8557  001F18                     __end_of___lwmod:
  8558                           	opt stack 0
  8559                           tblptru	equ	0xFF8
  8560                           tblptrh	equ	0xFF7
  8561                           tblptrl	equ	0xFF6
  8562                           tablat	equ	0xFF5
  8563                           prodh	equ	0xFF4
  8564                           prodl	equ	0xFF3
  8565                           intcon	equ	0xFF2
  8566                           intcon2	equ	0xFF1
  8567                           indf0	equ	0xFEF
  8568                           postinc0	equ	0xFEE
  8569                           fsr0h	equ	0xFEA
  8570                           fsr0l	equ	0xFE9
  8571                           wreg	equ	0xFE8
  8572                           indf1	equ	0xFE7
  8573                           postinc1	equ	0xFE6
  8574                           postdec1	equ	0xFE5
  8575                           plusw1	equ	0xFE3
  8576                           fsr1h	equ	0xFE2
  8577                           fsr1l	equ	0xFE1
  8578                           indf2	equ	0xFDF
  8579                           postinc2	equ	0xFDE
  8580                           postdec2	equ	0xFDD
  8581                           preinc2	equ	0xFDC
  8582                           plusw2	equ	0xFDB
  8583                           fsr2h	equ	0xFDA
  8584                           fsr2l	equ	0xFD9
  8585                           status	equ	0xFD8
  8586                           tblptru	equ	0xFF8
  8587                           tblptrh	equ	0xFF7
  8588                           tblptrl	equ	0xFF6
  8589                           tablat	equ	0xFF5
  8590                           prodh	equ	0xFF4
  8591                           prodl	equ	0xFF3
  8592                           intcon	equ	0xFF2
  8593                           intcon2	equ	0xFF1
  8594                           indf0	equ	0xFEF
  8595                           postinc0	equ	0xFEE
  8596                           fsr0h	equ	0xFEA
  8597                           fsr0l	equ	0xFE9
  8598                           wreg	equ	0xFE8
  8599                           indf1	equ	0xFE7
  8600                           postinc1	equ	0xFE6
  8601                           postdec1	equ	0xFE5
  8602                           plusw1	equ	0xFE3
  8603                           fsr1h	equ	0xFE2
  8604                           fsr1l	equ	0xFE1
  8605                           indf2	equ	0xFDF
  8606                           postinc2	equ	0xFDE
  8607                           postdec2	equ	0xFDD
  8608                           preinc2	equ	0xFDC
  8609                           plusw2	equ	0xFDB
  8610                           fsr2h	equ	0xFDA
  8611                           fsr2l	equ	0xFD9
  8612                           status	equ	0xFD8
  8613                           
  8614                           	psect	rparam
  8615  0000                     tblptru	equ	0xFF8
  8616                           tblptrh	equ	0xFF7
  8617                           tblptrl	equ	0xFF6
  8618                           tablat	equ	0xFF5
  8619                           prodh	equ	0xFF4
  8620                           prodl	equ	0xFF3
  8621                           intcon	equ	0xFF2
  8622                           intcon2	equ	0xFF1
  8623                           indf0	equ	0xFEF
  8624                           postinc0	equ	0xFEE
  8625                           fsr0h	equ	0xFEA
  8626                           fsr0l	equ	0xFE9
  8627                           wreg	equ	0xFE8
  8628                           indf1	equ	0xFE7
  8629                           postinc1	equ	0xFE6
  8630                           postdec1	equ	0xFE5
  8631                           plusw1	equ	0xFE3
  8632                           fsr1h	equ	0xFE2
  8633                           fsr1l	equ	0xFE1
  8634                           indf2	equ	0xFDF
  8635                           postinc2	equ	0xFDE
  8636                           postdec2	equ	0xFDD
  8637                           preinc2	equ	0xFDC
  8638                           plusw2	equ	0xFDB
  8639                           fsr2h	equ	0xFDA
  8640                           fsr2l	equ	0xFD9
  8641                           status	equ	0xFD8
  8642                           
  8643                           	psect	temp
  8644  000063                     btemp:
  8645                           	opt stack 0
  8646  000063                     	ds	1
  8647  0000                     int$flags	set	btemp
  8648  0000                     wtemp8	set	btemp+1
  8649  0000                     ttemp5	set	btemp+1
  8650  0000                     ttemp6	set	btemp+4
  8651  0000                     ttemp7	set	btemp+8
  8652                           tblptru	equ	0xFF8
  8653                           tblptrh	equ	0xFF7
  8654                           tblptrl	equ	0xFF6
  8655                           tablat	equ	0xFF5
  8656                           prodh	equ	0xFF4
  8657                           prodl	equ	0xFF3
  8658                           intcon	equ	0xFF2
  8659                           intcon2	equ	0xFF1
  8660                           indf0	equ	0xFEF
  8661                           postinc0	equ	0xFEE
  8662                           fsr0h	equ	0xFEA
  8663                           fsr0l	equ	0xFE9
  8664                           wreg	equ	0xFE8
  8665                           indf1	equ	0xFE7
  8666                           postinc1	equ	0xFE6
  8667                           postdec1	equ	0xFE5
  8668                           plusw1	equ	0xFE3
  8669                           fsr1h	equ	0xFE2
  8670                           fsr1l	equ	0xFE1
  8671                           indf2	equ	0xFDF
  8672                           postinc2	equ	0xFDE
  8673                           postdec2	equ	0xFDD
  8674                           preinc2	equ	0xFDC
  8675                           plusw2	equ	0xFDB
  8676                           fsr2h	equ	0xFDA
  8677                           fsr2l	equ	0xFD9
  8678                           status	equ	0xFD8


Data Sizes:
    Strings     0
    Constant    240
    Data        150
    BSS         284
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          126     45      98
    BANK0           128     23      71
    BANK1           256      0     200
    BANK2           256      0     133
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0

Pointer List with Targets:

    sp__memmove	PTR void  size(2) Largest target is 0

    getNumber@pTarget	PTR unsigned short  size(2) Largest target is 16
		 -> tmpObjectData(BANK0[16]), 

    checkForLines@pObject	PTR volatile unsigned short  size(2) Largest target is 16
		 -> BackgroundData(BANK0[16]), 

    removeLine@pObject	PTR volatile unsigned short  size(2) Largest target is 16
		 -> BackgroundData(BANK0[16]), 

    moveObjectDown@pObject	PTR volatile unsigned short  size(2) Largest target is 16
		 -> ObjectData(COMRAM[16]), 

    pixelCount@pSource	PTR volatile unsigned short  size(2) Largest target is 16
		 -> tmpObjectData(BANK0[16]), ObjectData(COMRAM[16]), 

    newRotation@pSource	PTR volatile unsigned short  size(2) Largest target is 16
		 -> ObjectData(COMRAM[16]), 

    newRotation@pTarget	PTR unsigned short  size(2) Largest target is 16
		 -> tmpObjectData(BANK0[16]), 

    collisionDetect@pTarget	PTR volatile unsigned short  size(2) Largest target is 16
		 -> BackgroundData(BANK0[16]), 

    collisionDetect@pSource	PTR volatile unsigned short  size(2) Largest target is 16
		 -> tmpObjectData(BANK0[16]), ObjectData(COMRAM[16]), 

    checkForRightWall@pObject	PTR volatile unsigned short  size(2) Largest target is 16
		 -> ObjectData(COMRAM[16]), 

    checkForLeftWall@pObject	PTR volatile unsigned short  size(2) Largest target is 16
		 -> ObjectData(COMRAM[16]), 

    checkForBottom@pObject	PTR volatile unsigned short  size(2) Largest target is 16
		 -> ObjectData(COMRAM[16]), 

    moveObject@pObject	PTR volatile unsigned short  size(2) Largest target is 16
		 -> tmpObjectData(BANK0[16]), ObjectData(COMRAM[16]), 

    mergeObjects@pSource	PTR volatile unsigned short  size(2) Largest target is 16
		 -> show_score@mask(BANK0[16]), choosescreen@mask(COMRAM[16]), tmpObjectData(BANK0[16]), ObjectData(COMRAM[16]), 

    mergeObjects@pTarget	PTR volatile unsigned short  size(2) Largest target is 16
		 -> tmpObjectData(BANK0[16]), BackgroundData(BANK0[16]), ObjectData(COMRAM[16]), 

    selectNextObject@pTarget	PTR volatile unsigned short  size(2) Largest target is 16
		 -> ObjectData(COMRAM[16]), 

    selectNextObject@s	PTR struct shape size(2) Largest target is 133
		 -> shapes(BANK2[133]), 

    clearArray@pArray	PTR volatile unsigned short  size(2) Largest target is 16
		 -> tmpObjectData(BANK0[16]), BackgroundData(BANK0[16]), ObjectData(COMRAM[16]), 

    debounceButton@debounced	PTR volatile _Bool  size(2) Largest target is 1
		 -> Down_Debounced(COMRAM[1]), Rotate_Debounced(COMRAM[1]), Right_Debounced(COMRAM[1]), Left_Debounced(COMRAM[1]), 

    debounceButton@delay	PTR volatile short  size(2) Largest target is 2
		 -> Down_Delay(COMRAM[2]), Rotate_Delay(COMRAM[2]), Right_Delay(COMRAM[2]), Left_Delay(COMRAM[2]), 

    sp__itoa	PTR unsigned char  size(2) Largest target is 4
		 -> show_score@number(BANK0[4]), 

    itoa@str	PTR unsigned char  size(2) Largest target is 4
		 -> show_score@number(BANK0[4]), 

    reverse@str	PTR unsigned char  size(2) Largest target is 4
		 -> show_score@number(BANK0[4]), 

    swap@b	PTR unsigned char  size(2) Largest target is 4
		 -> show_score@number(BANK0[4]), 

    swap@a	PTR unsigned char  size(2) Largest target is 4
		 -> show_score@number(BANK0[4]), 

    sp__memcpy	PTR void  size(2) Largest target is 16
		 -> tmpObjectData(BANK0[16]), ObjectData(COMRAM[16]), 

    memcpy@src	PTR const void  size(2) Largest target is 160
		 -> Number(CODE[160]), SNAKE(CODE[16]), TETRIS(CODE[16]), ObjectData(COMRAM[16]), 
		 -> shapes.graphic(BANK2[16]), shapes(BANK2[133]), 

    memcpy@s	PTR unsigned char  size(2) Largest target is 160
		 -> Number(CODE[160]), SNAKE(CODE[16]), TETRIS(CODE[16]), ObjectData(COMRAM[16]), 
		 -> shapes.graphic(BANK2[16]), shapes(BANK2[133]), 

    memcpy@dest	PTR void  size(2) Largest target is 16
		 -> tmpObjectData(BANK0[16]), ObjectData(COMRAM[16]), 

    memcpy@d	PTR unsigned char  size(2) Largest target is 16
		 -> tmpObjectData(BANK0[16]), ObjectData(COMRAM[16]), 


Critical Paths under _main in COMRAM

    _splash_screen->_memcpy
    _readHighScore->_WriteEEByte
    _mainGameLoop->_checkButtons
    _mainGameLoop->_checkForLines
    _writeHighScore->_WriteEEByte
    _show_score->_itoa
    _itoa->_reverse
    _reverse->_swap
    _getNumber->_memcpy
    _initialise_globals->_CreateBerry
    _checkForLines->_removeLine
    _checkButtons->_newRotation
    _newRotation->___wmul
    _moveObjectDown->_selectNextObject
    _selectNextObject->___wmul
    ___wmul->___awmod
    _MoveSnakes->_SnakeGraph
    _SnakeGraph->_clearArray
    _CreateBerry->_genBerry
    _genBerry->_rnd_get_num
    _choosescreen->_mergeObjects

Critical Paths under _isr in COMRAM

    _isr->_debounceButton

Critical Paths under _main in BANK0

    _main->_show_score
    _mainGameLoop->_show_score

Critical Paths under _isr in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _isr in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _isr in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _isr in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _isr in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _isr in BANK5

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0   90526
                       _choosescreen
                 _initialise_globals
                _initialise_hardware
                       _mainGameLoop
                      _readHighScore
                     _rnd_initialize
                         _show_score
                      _splash_screen
 ---------------------------------------------------------------------------------
 (1) _splash_screen                                        0     0      0    1892
                             _memcpy
                  _pauseMultiplexing
                 _resumeMultiplexing
                             _waitms
 ---------------------------------------------------------------------------------
 (2) _waitms                                               2     0      2      98
                                             18 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (1) _rnd_initialize                                       1     1      0      15
                                             18 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _readHighScore                                        2     2      0     422
                                             20 COMRAM     2     2      0
                         _ReadEEByte
                        _WriteEEByte
 ---------------------------------------------------------------------------------
 (2) _ReadEEByte                                           1     1      0      15
                                             18 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _mainGameLoop                                         0     0      0   64872
                         _MoveSnakes
                       _checkButtons
                      _checkForLines
                         _clearArray
                 _initialise_globals
                     _moveObjectDown
                  _pauseMultiplexing
                 _resumeMultiplexing
                   _selectNextObject
                         _show_score
                     _writeHighScore
 ---------------------------------------------------------------------------------
 (2) _writeHighScore                                       1     1      0     316
                                             20 COMRAM     1     1      0
                        _WriteEEByte
 ---------------------------------------------------------------------------------
 (2) _WriteEEByte                                          2     1      1     272
                                             18 COMRAM     2     1      1
 ---------------------------------------------------------------------------------
 (1) _show_score                                          23    23      0   13966
                                              0 BANK0     23    23      0
                         _clearArray
                          _getNumber
                               _itoa
                       _mergeObjects
                         _moveObject
                       _pauseButtons
                  _pauseMultiplexing
                      _resumeButtons
                 _resumeMultiplexing
 ---------------------------------------------------------------------------------
 (2) _itoa                                                13     7      6    3288
                                             32 COMRAM    13     7      6
                            ___awdiv
                            ___awmod
                            _reverse
 ---------------------------------------------------------------------------------
 (3) _reverse                                              9     5      4     747
                                             23 COMRAM     9     5      4
                               _swap
 ---------------------------------------------------------------------------------
 (4) _swap                                                 5     1      4     338
                                             18 COMRAM     5     1      4
 ---------------------------------------------------------------------------------
 (3) ___awdiv                                              8     4      4     625
                                             18 COMRAM     8     4      4
 ---------------------------------------------------------------------------------
 (2) _getNumber                                            3     1      2    1946
                                             28 COMRAM     3     1      2
                             _memcpy
 ---------------------------------------------------------------------------------
 (2) _initialise_globals                                   1     1      0    3230
                                             28 COMRAM     1     1      0
                        _CreateBerry
                         _clearArray
 ---------------------------------------------------------------------------------
 (2) _checkForLines                                       10     8      2     879
                                             35 COMRAM    10     8      2
                         _removeLine
 ---------------------------------------------------------------------------------
 (3) _removeLine                                          17    14      3     577
                                             18 COMRAM    17    14      3
 ---------------------------------------------------------------------------------
 (2) _checkButtons                                         1     1      0   25604
                                             44 COMRAM     1     1      0
                   _checkForLeftWall
                  _checkForRightWall
                    _collisionDetect
                             _memcpy
                       _mergeObjects
                         _moveObject
                     _moveObjectDown
                        _newRotation
                       _pauseButtons
                  _pauseMultiplexing
                         _pixelCount
                      _resumeButtons
                 _resumeMultiplexing
 ---------------------------------------------------------------------------------
 (3) _pixelCount                                          10     8      2     334
                                             18 COMRAM    10     8      2
 ---------------------------------------------------------------------------------
 (3) _newRotation                                         14     9      5    5886
                                             30 COMRAM    14     9      5
                             ___wmul
                         _clearArray
                             _memcpy
 ---------------------------------------------------------------------------------
 (2) _moveObjectDown                                       3     1      2   10834
                                             37 COMRAM     3     1      2
                     _checkForBottom
                    _collisionDetect
                       _mergeObjects
                         _moveObject
                  _pauseMultiplexing
                 _resumeMultiplexing
                   _selectNextObject
 ---------------------------------------------------------------------------------
 (2) _selectNextObject                                     7     5      2    3609
                                             30 COMRAM     7     5      2
                            ___awmod
                             ___wmul
                             _memcpy
                        _rnd_get_num
 ---------------------------------------------------------------------------------
 (2) _memcpy                                              10     4      6    1794
                                             18 COMRAM    10     4      6
 ---------------------------------------------------------------------------------
 (3) ___wmul                                               6     2      4     463
                                             24 COMRAM     6     2      4
                            ___awmod (ARG)
 ---------------------------------------------------------------------------------
 (3) ___awmod                                              6     2      4     793
                                             18 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (2) _moveObject                                          10     6      4    2629
                                             18 COMRAM    10     6      4
 ---------------------------------------------------------------------------------
 (3) _collisionDetect                                      9     5      4     894
                                             18 COMRAM     9     5      4
 ---------------------------------------------------------------------------------
 (3) _checkForBottom                                       5     3      2     166
                                             18 COMRAM     5     3      2
 ---------------------------------------------------------------------------------
 (3) _checkForRightWall                                    4     2      2      98
                                             18 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (3) _checkForLeftWall                                     4     2      2      98
                                             18 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (2) _MoveSnakes                                           9     9      0    3784
                                             32 COMRAM     9     9      0
                        _CreateBerry
                         _SnakeGraph
 ---------------------------------------------------------------------------------
 (3) _SnakeGraph                                           7     7      0    3105
                                             25 COMRAM     7     7      0
                         _clearArray
                  _pauseMultiplexing
                 _resumeMultiplexing
 ---------------------------------------------------------------------------------
 (3) _CreateBerry                                          3     3      0     419
                                             25 COMRAM     3     3      0
                           _genBerry
 ---------------------------------------------------------------------------------
 (4) _genBerry                                             2     2      0     326
                                             23 COMRAM     2     2      0
                            ___lbmod
                        _rnd_get_num
 ---------------------------------------------------------------------------------
 (3) _rnd_get_num                                          5     5      0      23
                                             18 COMRAM     5     5      0
 ---------------------------------------------------------------------------------
 (5) ___lbmod                                              4     3      1     235
                                             18 COMRAM     4     3      1
 ---------------------------------------------------------------------------------
 (1) _initialise_hardware                                  0     0      0       0
                    _initialise_TMR0
 ---------------------------------------------------------------------------------
 (2) _initialise_TMR0                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _choosescreen                                        17    17      0    6129
                                             26 COMRAM    17    17      0
                         _clearArray
                       _mergeObjects
                       _pauseButtons
                  _pauseMultiplexing
                      _resumeButtons
                 _resumeMultiplexing
 ---------------------------------------------------------------------------------
 (2) _resumeMultiplexing                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _resumeButtons                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _pauseMultiplexing                                    0     0      0       0
                   _waitForInterrupt
 ---------------------------------------------------------------------------------
 (3) _waitForInterrupt                                     0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _pauseButtons                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _mergeObjects                                         8     3      5    3037
                                             18 COMRAM     8     3      5
 ---------------------------------------------------------------------------------
 (2) _clearArray                                           7     3      4    2650
                                             18 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (6) _isr                                                 11    11      0    1119
                                              7 COMRAM    11    11      0
                            ___lwmod
                     _debounceButton
 ---------------------------------------------------------------------------------
 (7) _debounceButton                                       7     3      4     762
                                              0 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (7) ___lwmod                                              5     1      4     311
                                              0 COMRAM     5     1      4
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 7
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _choosescreen
     _clearArray
     _mergeObjects
     _pauseButtons
     _pauseMultiplexing
       _waitForInterrupt
     _resumeButtons
     _resumeMultiplexing
   _initialise_globals
     _CreateBerry
       _genBerry
         ___lbmod
         _rnd_get_num
     _clearArray
   _initialise_hardware
     _initialise_TMR0
   _mainGameLoop
     _MoveSnakes
       _CreateBerry
         _genBerry
           ___lbmod
           _rnd_get_num
       _SnakeGraph
         _clearArray
         _pauseMultiplexing
           _waitForInterrupt
         _resumeMultiplexing
     _checkButtons
       _checkForLeftWall
       _checkForRightWall
       _collisionDetect
       _memcpy
       _mergeObjects
       _moveObject
       _moveObjectDown
         _checkForBottom
         _collisionDetect
         _mergeObjects
         _moveObject
         _pauseMultiplexing
           _waitForInterrupt
         _resumeMultiplexing
         _selectNextObject
           ___awmod
           ___wmul
             ___awmod (ARG)
           _memcpy
           _rnd_get_num
       _newRotation
         ___wmul
           ___awmod (ARG)
         _clearArray
         _memcpy
       _pauseButtons
       _pauseMultiplexing
         _waitForInterrupt
       _pixelCount
       _resumeButtons
       _resumeMultiplexing
     _checkForLines
       _removeLine
     _clearArray
     _initialise_globals
       _CreateBerry
         _genBerry
           ___lbmod
           _rnd_get_num
       _clearArray
     _moveObjectDown
       _checkForBottom
       _collisionDetect
       _mergeObjects
       _moveObject
       _pauseMultiplexing
         _waitForInterrupt
       _resumeMultiplexing
       _selectNextObject
         ___awmod
         ___wmul
           ___awmod (ARG)
         _memcpy
         _rnd_get_num
     _pauseMultiplexing
       _waitForInterrupt
     _resumeMultiplexing
     _selectNextObject
       ___awmod
       ___wmul
         ___awmod (ARG)
       _memcpy
       _rnd_get_num
     _show_score
       _clearArray
       _getNumber
         _memcpy
       _itoa
         ___awdiv
         ___awmod
         _reverse
           _swap
       _mergeObjects
       _moveObject
       _pauseButtons
       _pauseMultiplexing
         _waitForInterrupt
       _resumeButtons
       _resumeMultiplexing
     _writeHighScore
       _WriteEEByte
   _readHighScore
     _ReadEEByte
     _WriteEEByte
   _rnd_initialize
   _show_score
     _clearArray
     _getNumber
       _memcpy
     _itoa
       ___awdiv
       ___awmod
       _reverse
         _swap
     _mergeObjects
     _moveObject
     _pauseButtons
     _pauseMultiplexing
       _waitForInterrupt
     _resumeButtons
     _resumeMultiplexing
   _splash_screen
     _memcpy
     _pauseMultiplexing
       _waitForInterrupt
     _resumeMultiplexing
     _waitms

 _isr (ROOT)
   ___lwmod
   _debounceButton

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             5FF      0       0      17        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK5           100      0       0      16        0.0%
BANK5              100      0       0      14        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0      85       9       52.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0      C8       7       78.1%
BITBANK0            80      0       0       4        0.0%
BANK0               80     17      47       5       55.5%
BITCOMRAM           7E      0       0       0        0.0%
COMRAM              7E     2D      62       1       77.8%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     1F6      15        0.0%
DATA                 0      0     1F6       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V2.00 build -1524193055 
Symbol Table                                                                                   Mon Jan 28 22:58:44 2019

        __end_of_checkButtons 0934               WriteEEByte@data 0047          __size_of_WriteEEByte 0026  
                           l3 1DEA                             l4 1DB8              moveObject@cycles 004A  
           moveObject@pObject 0047                 ?_mainGameLoop 0035                  ___awdiv@sign 004C  
                          _mS 0003                ??_choosescreen 004F           ___wmul@multiplicand 004F  
                 __CFG_BORV$3 000000                 _splash_screen 1D50            WriteEEByte@address 0048  
        debounceButton@button 003B                  __CFG_CP0$OFF 000000                  __CFG_CP1$OFF 000000  
                __CFG_CP2$OFF 000000                  __CFG_CP3$OFF 000000                 newRotation@x1 005F  
               newRotation@x2 005D                 newRotation@y1 0060                 newRotation@y2 005E  
                         l220 189C                           l214 1FD8                           l230 1C40  
                         l142 1E38                           l215 1FBE                           l231 1C7C  
                         l303 0D8A                           l143 1E12                           l151 140E  
                         l240 0ED8                           l312 1F90                           l304 0DF0  
                         l152 13A2                           l305 0D90                           l401 1B40  
                         l242 0F34                           l314 1FB0                           l306 0D9C  
                         l330 123C                           l154 13D2                           l243 0F5C  
                         l251 09BE                           l411 1782                           l228 1C26  
                         l252 094A                           l324 1D04                           l340 1344  
                         l332 1260                           l148 1386                           l421 1128  
                         l229 1C7E                           l237 0EC4                           l261 0AC0  
                         l333 126C                           l270 154A                           l238 0E3E  
                         l262 0B06                           l254 0964                           l326 1D48  
                         l158 1430                           l271 1556                           l431 11A6  
                         l263 0AC6                           l335 1278                           l503 2040  
                         l432 118A                           l424 115C                           l264 0B04  
                         l248 0996                           l256 0980                           l352 166A  
                         l344 1C9E                           l416 1D78                           l249 0936  
                         l417 1D94                           l274 1582                           l258 0A9E  
                         l354 16EE                           l338 12D2                           l346 1CAA  
                         l178 2156                           l275 158E                           l259 09C4  
                         l283 0DFA                           l291 0CDC                           l371 08EA  
                         l363 079E                           l188 2194                           l436 11BC  
                         l292 0D0E                           l284 0CA2                           l269 1602  
                         l277 15C2                           l293 0CE2                           l285 0CD2  
                         l365 083C                           l461 10C4                           l453 1086  
                         l278 15CE                           l294 0CEE                           l286 0CA8  
                         l382 0920                           l470 20B6                           l439 11F8  
                         l287 0CB4                           l375 08F6                           l359 0794  
                         l391 152C                           l447 1066                           l448 0FF4  
                         l297 0D18                           l377 0916                           l369 0848  
                         l481 1F6A                           l298 0D80                           l386 1518  
                         l490 1828                           l299 0D1E                           l387 145C  
                         l491 183E                           l475 1F26                           l388 146C  
                         l396 1AD0                           l492 1850                           l476 1F3E  
                         l477 1F48                           l398 1AE0                           l760 1AAC  
                         l752 1A54                           l496 1876                           l761 1ABA  
                         l753 1A64                           l489 1868                           l755 1A82  
                         l940 2050                           l772 1B92                           l756 1A7A  
                         l941 2068                           l773 1B9C                           l765 1B58  
                         l774 1BAA                           l766 1B64                           l759 1AA2  
                         l768 1B7A                           l769 1B72                           _GIE 007F97  
                __CFG_CPB$OFF 000000                  __CFG_CPD$OFF 000000                           _PSA 007EAB  
                         _isr 0008            rnd_initialize@seed 0047                  ___awmod@sign 004C  
     __end_of_collisionDetect 1D50                           prod 000FF3                           wreg 000FE8  
     __size_of_moveObjectDown 00D8                  __CFG_LVP$OFF 000000                  __CFG_WDT$OFF 000000  
                        l4002 0D94                          l3122 1464                          l3060 1CA2  
                        l3054 1C96                          l3138 1524                          l4136 0ED0  
                        l4240 16EA                          l3352 1AC8                          l4154 0F54  
                        l2802 1F88                          l2822 1CFC                          l3358 1AD8  
                        l4184 1270                          l4096 13D2                          l4178 1264  
                        l3910 1586                          l4470 177A                          l3922 15C6  
                        l4580 1182                          l4556 1120                          l4594 11B4  
                        l3946 0CAC                          l3786 1DB8                          l3964 0CE6  
                        l3898 154E                          ?_isr 0035                          _DDRA 000F92  
                        _DDRB 000F93                          _DDRC 000F94                          _DDRD 000F95  
                        _T0CS 007EAD                          u2025 1E88                          u2340 1FB4  
                        u2600 2132                          u4120 0CCE                          u5010 1158  
                        u2370 1D4C                          u4210 0DD8                          u2620 211A  
                        u3340 1B26                          u3324 1B0E                          u3325 1B08  
                        u5110 11D8                          u5030 1168                          u4150 0D0A  
                        u4400 0F88                          u4320 13CE                          _IPEN 007E87  
                        u5050 1174                          u4180 0D6C                          u4260 1A86  
                        u2830 1CF0                          u2814 1CD8                          u2910 1516  
                        u2815 1CD2                          u2840 1CF4                          u2904 14DE  
                        u2905 14D8                          u4380 0F38                          u4540 1348  
                        u4534 1316                          u4535 1310                          u3920 1DE0  
                        u4464 12A6                          u4465 12A0                          u2884 1496  
                        u2885 1490                          u2894 14AC                          u3927 1DD6  
                        u2895 14A6                          u4840 08E4                          u4920 17BA  
                        u4850 08E6                          u3980 1B7E                          u4940 1082  
                        u4950 108C                          u4880 0902                          u4971 10A0  
                        _TMR0 000FD6               ?_checkForBottom 0047           __end_of_CreateBerry 1C8E  
                        _main 201A                          _itoa 134C                          _time 0001  
                        fsr0h 000FEA                          fsr1h 000FE2                          indf0 000FEF  
                        fsr2h 000FDA                          fsr0l 000FE9                          indf1 000FE7  
                        indf2 000FDF                          fsr1l 000FE1                          fsr2l 000FD9  
                        _swap 1FEC                          btemp 0063              ??_writeHighScore 0049  
                        prodh 000FF4                          prodl 000FF3                          start 000E  
               __CFG_IESO$OFF 000000           initialise_globals@i 0051           moveObject@direction 0049  
               __CFG_MCLRE$ON 000000                  ___param_bank 000000                ??_mainGameLoop 0062  
                       ??_isr 003C   __size_of_initialise_globals 00D0                ?_splash_screen 0035  
                       ?_main 0035             ??_initialise_TMR0 0047                         ?_itoa 0055  
             __end_of___awdiv 1AC4                         _EEADR 000FA9               __end_of___awmod 1BB4  
             __end_of___lbmod 2070                         ?_swap 0047               ___awdiv@divisor 0049  
             __end_of___lwmod 1F18                         i2l202 0C8C                         i2l203 0B52  
                       i2l204 0BD0                         i2l205 0BF4                         i2l207 0C14  
                       i2l208 0C88                         i2l172 1C20                         i2l167 1C02  
                       i2l168 1BDC               ___awdiv@counter 004B       debounceButton@debounced 0037  
                       _SNAKE 06D1                         _PORTA 000F80                         _PORTB 000F81  
                       _PORTC 000F82                         _PORTD 000F83                 __CFG_PWRT$OFF 000000  
               __CFG_WRT0$OFF 000000                 __CFG_WRT1$OFF 000000                 __CFG_WRT2$OFF 000000  
               __CFG_WRT3$OFF 000000                __CFG_EBTR0$OFF 000000                __CFG_FCMEN$OFF 000000  
              __CFG_EBTR1$OFF 000000                __CFG_EBTR2$OFF 000000                __CFG_EBTR3$OFF 000000  
               __CFG_WRTB$OFF 000000                 __CFG_WRTC$OFF 000000                 __CFG_WRTD$OFF 000000  
              __CFG_EBTRB$OFF 000000                         __lfsr 0062                  ?_newRotation 0053  
                       itoa@i 0060                    _Left_Delay 002E                         tablat 000FF5  
             __end_of_reverse 1E4E                    _DropObject 0010                    _Down_Delay 0028  
                       plusw1 000FE3                         plusw2 000FDB                         swap@a 0047  
                       swap@b 0049                         swap@t 004B                         ttemp5 0064  
                       ttemp6 0067                         ttemp7 006B                    _ReadEEByte 2170  
                       status 000FD8                         wtemp8 0064                   isr@CurrentX 0030  
                  _ObjectData 0018        __size_of_readHighScore 0036               __initialization 19BC  
          _resumeMultiplexing 21A4                  __end_of_main 2046                  __end_of_itoa 1456  
                __end_of_swap 201A      __end_of_selectNextObject 1936  __size_of_initialise_hardware 0042  
         ?_resumeMultiplexing 0035                        ??_main 0062                        ??_itoa 005B  
                      ??_swap 004B                 __activetblptr 000002              ?_collisionDetect 0047  
               ?_mergeObjects 0047                   _CreateBerry 1C22                        _EEDATA 000FA8  
                      _EECON2 000FA7              ___awdiv@dividend 0047                _debounceButton 1BB4  
                      i2l1033 1EEC                        i2l1034 1EE4                        i2l1037 1F04  
                      i2l1038 1F0E          ??_resumeMultiplexing 0047          __end_of_choosescreen 1216  
                      _TMR0IE 007F95                        _TMR0ON 007EAF                        _TETRIS 06E1  
                  _MoveSnakes 0934                  ?_rnd_get_num 0035         __size_of_checkButtons 0242  
        checkForLines@pObject 0058              __end_of_genBerry 214E                    _SnakeGraph 0E24  
              __CFG_XINST$OFF 000000                        _Number 0631                    _SnakeYtext 0601  
             ??_splash_screen 0051             ?_checkForLeftWall 0047                        ___wmul 20BE  
                   ??___awdiv 004B                __CFG_STVREN$ON 000000                     ??___awmod 004B  
                   ??___lbmod 0048                        _berryX 000A                        _berryY 0009  
                   ??___lwmod 0039            ??_checkForLeftWall 0049                        _memcpy 1DA6  
                      clear_0 1A14                        clear_1 1A20                        clear_2 1A2C  
            ___awdiv@quotient 004D               ___awmod@divisor 0049                        _shapes 0200  
                      _waitms 214E               ___awmod@counter 004B                _BackgroundData 0090  
                      _tetris 0007             ?_waitForInterrupt 0035       __size_of_rnd_initialize 0008  
                __pdataCOMRAM 0062            ??_waitForInterrupt 0047                show_score@mask 00A0  
                __mediumconst 0000                 _readHighScore 1F18                ??_mergeObjects 004C  
                      preinc2 000FDC                _moveObjectDown 1626                        tblptrh 000FF7  
                      tblptrl 000FF6                        tblptru 000FF8                     ??_reverse 0050  
      __end_of_debounceButton 1C22                  _checkButtons 06F2              getNumber@pTarget 0051  
        __end_of_mainGameLoop 188E               ___lbmod@divisor 0047                    __accesstop 0080  
     __end_of__initialization 1A32               ___lbmod@counter 0049                   ?_ReadEEByte 0035  
             __CFG_PBADEN$OFF 000000          writeHighScore@adress 0049                 ___rparam_used 000001  
               __end_of_SNAKE 06E1             _pauseMultiplexing 2180                __pcstackCOMRAM 0035  
                __pidataBANK0 2160                  __pidataBANK2 1936            ?_pauseMultiplexing 0035  
               ?_pauseButtons 0035           ??_pauseMultiplexing 0047        __end_of_moveObjectDown 16FE  
              ?_readHighScore 0035            __size_of_getNumber 0028               ?_debounceButton 0035  
            ??_checkForBottom 0049          moveObjectDown@result 005C                   MoveSnakes@i 005D  
                  __pbssBANK0 0080                    __pbssBANK1 0100                   ?_MoveSnakes 0035  
        __size_of_newRotation 0136     __end_of_pauseMultiplexing 2190                 ??_WriteEEByte 0048  
                  _clearArray 1FB8                   ?_SnakeGraph 0035               _initialise_TMR0 20E4  
       __end_of_resumeButtons 21B0                       ?___wmul 004D                ??_pauseButtons 0047  
                     ?_memcpy 0047                   SnakeGraph@i 0054                   SnakeGraph@j 0053  
                     ?_waitms 0047         __end_of_choose_screen 0631           __size_of_ReadEEByte 0010  
             ?_moveObjectDown 005A  selectNextObject@rndSelection 0055           newRotation@rotation 0057  
                   ?_genBerry 0035        __size_of_checkForLines 0080                   _Right_Delay 002C  
       __size_of_choosescreen 013A              _CheckForNewLines 0011                   moveObject@c 004F  
                 moveObject@i 0050           _initialise_hardware 1E94                checkForLines@x 0060  
              checkForLines@y 0061                       __Hparam 0000          __size_of_rnd_get_num 0046  
           __end_of_getNumber 2098                       __Lparam 0000                       _OriginX 000F  
                     _OriginY 000E    __end_of_initialise_globals 17CE          __end_of_mergeObjects 1626  
                     ___awdiv 1A40                       ___awmod 1B44                       ___lbmod 2046  
             __size_of___wmul 0026             removeLine@pObject 0047                       ___lwmod 1ED6  
           ?_selectNextObject 0053                  __psmallconst 0600           __end_of_WriteEEByte 20BE  
                 removeLine@x 0057                   removeLine@y 0056                       __pcinit 19BC  
        ?_initialise_hardware 0035               __size_of_memcpy 0056                       __ramtop 0600  
              _rnd_initialize 219C                       __ptext0 201A            ??_selectNextObject 0055  
                     __ptext1 1D50                       __ptext2 214E                       __ptext3 219C  
                     __ptext4 1F18                       __ptext5 2170                       __ptext6 17CE  
                     __ptext7 1F4E                       __ptext8 2098                       __ptext9 0F8E  
                _choosescreen 10DC               __size_of_waitms 0012               ??_readHighScore 0049  
                   _T0CONbits 000FD5           __size_of_MoveSnakes 01E0                  __size_of_isr 0C98  
            ___awmod@dividend 0047                   pixelCount@r 004E                   pixelCount@x 004F  
                 pixelCount@y 0050     selectNextObject@selection 0057                    ??_genBerry 004C  
       __size_of_mainGameLoop 00C0           __size_of_SnakeGraph 016A                       _reverse 1DFC  
                ?_CreateBerry 0035               show_score@F2907 00B7             _checkForRightWall 2102  
         mergeObjects@pTarget 0049                __pintcode_body 0B14           mergeObjects@pSource 0047  
        end_of_initialization 1A32            ?_checkForRightWall 0047       __end_of_initialise_TMR0 2102  
                     memcpy@d 004D                       memcpy@n 004B                       memcpy@s 004F  
                     itoa@bas 0059                       itoa@rem 005E                    _moveObject 0CA0  
               __Lmediumconst 0000                       itoa@str 0057                       int_func 0B14  
  __size_of_pauseMultiplexing 0010                   ?_clearArray 0047           ??_checkForRightWall 0049  
             show_score@score 00B0                    _removeLine 1456             pixelCount@pSource 0047  
               _checkForLines 1AC4                    _pixelCount 1C8E                    _mtxButtons 0017  
                     waitms@t 0047                       postdec1 000FE5                       postdec2 000FDD  
                     postinc0 000FEE                       postinc1 000FE6                       postinc2 000FDE  
      __end_of_rnd_initialize 21A4         ??_initialise_hardware 0047       __size_of_writeHighScore 0036  
                _mainGameLoop 17CE                     _PORTBbits 000F81                    _show_score 0F8E  
   __end_of_checkForRightWall 211E              ___lbmod@dividend 0048     __size_of_checkForLeftWall 0018  
         debounceButton@delay 0035          __end_of_pauseButtons 21B6                   ___lbmod@rem 004A  
    __size_of_collisionDetect 0058   __size_of_resumeMultiplexing 0006     __size_of_waitForInterrupt 000C  
                ??_ReadEEByte 0047                __end_of_TETRIS 06F1         CreateBerry@randomGood 004F  
                   _EndOfGame 0012                ?_checkForLines 0058                   show_score@i 00B6  
                 _WriteEEByte 2098       show_score@currentNumber 00B1                __end_of_Number 06D1  
             ?_rnd_initialize 0035         __end_of_splash_screen 1DA6                __end_of___wmul 20E4  
               __pidataCOMRAM 21B6                __end_of_memcpy 1DFC              ??_debounceButton 0039  
            mergeObjects@mode 004B                __end_of_waitms 2160                     _IsRotated 0013  
          __end_of_ReadEEByte 2180           start_initialization 19BC           __size_of_clearArray 0034  
                 __end_of_isr 0CA0              choosescreen@mask 004F              ?_initialise_TMR0 0035  
                ??_MoveSnakes 0055                   ?_moveObject 0047         __size_of_mergeObjects 00DE  
       moveObjectDown@pObject 005A              __CFG_OSC$INTIO67 000000                  ??_SnakeGraph 004E  
                 ?_removeLine 0047                    memcpy@dest 0047                   ?_pixelCount 0047  
         checkForLines@pixels 005F                      ??___wmul 0051              ??_moveObjectDown 005C  
                 __pdataBANK0 00B7                   __pdataBANK2 0200              __CFG_LPT1OSC$OFF 000000  
                    ??_memcpy 004D               getNumber@pDigit 0053                      ??_waitms 0049  
      collisionDetect@pTarget 0049                   ?_show_score 0035        collisionDetect@pSource 0047  
          __end_of_MoveSnakes 0B14    __size_of_checkForRightWall 001C                   __pbssCOMRAM 0001  
               __pcstackBANK0 00A0                 _NumberOfLines 0015            __end_of_SnakeGraph 0F8E  
                _mergeObjects 1548             __size_of_genBerry 0018                 ??_newRotation 0058  
          __end_of_SnakeYtext 0621          __size_of_CreateBerry 006C               ??_checkForLines 005A  
          newRotation@pTarget 0055            newRotation@pSource 0053             __CFG_CCP2MX$PORTC 000000  
           ??_collisionDetect 004B                     __pintcode 0008                      ?___awdiv 0047  
                    ?___awmod 0047                      ?___lbmod 0047                     _getNumber 2070  
                    ?___lwmod 0035                _writeHighScore 1F4E                     _direction 000D  
         __size_of_moveObject 0184                   __smallconst 0600            _initialise_globals 16FE  
     selectNextObject@pTarget 0053           __size_of_removeLine 00F2         __size_of_pauseButtons 0006  
                    ?_reverse 004C              _checkForLeftWall 211E       selectNextObject@counter 0056  
         __size_of_pixelCount 006A     __size_of_selectNextObject 00A8        __size_of_resumeButtons 0006  
         ?_initialise_globals 0035                  genBerry@temp 004D                  genBerry@size 004C  
            _waitForInterrupt 2190                 ??_rnd_get_num 0047                ___wmul@product 0051  
                ??_clearArray 004B           __end_of_newRotation 134C                    reverse@end 0053  
     __size_of_checkForBottom 0034           __size_of_show_score 014E                     _moveSnake 000C  
                  reverse@str 004C                      i2u382_40 0B70                      i2u382_46 0B72  
                    i2u383_40 0B8E                      i2u391_44 0C2A                      i2u391_45 0C26  
                    i2u383_46 0B90                      i2u384_40 0BAC                      i2u384_46 0BAE  
                    i2u377_40 1EF0                      i2u385_40 0BCA                      i2u385_46 0BCC  
                    i2u387_40 0BE8                      i2u388_40 0BEA        __end_of_writeHighScore 1F84  
            __CFG_WDTPS$32768 000000          ??_initialise_globals 0051                    ?_getNumber 0051  
                _pauseButtons 21B0                     _positions 0100                    _ADCON1bits 000FC1  
       removeLine@currentLine 0055             ___wmul@multiplier 004D         __end_of_readHighScore 1F4E  
          __end_of_clearArray 1FEC                 ?_checkButtons 0035             ReadEEByte@address 0047  
                 _INTCON2bits 000FF1                     copy_data0 19D0                     copy_data1 19F0  
             checkForBottom@i 004B                itoa@isNegative 005D                    _EECON1bits 000FA6  
                ?_WriteEEByte 0047                      __Hrparam 0000              ??_rnd_initialize 0047  
 __end_of_initialise_hardware 1ED6                     memcpy@src 0049                      __Lrparam 0000  
          __CFG_BOREN$SBORDIS 000000               ?_writeHighScore 0035           __end_of_rnd_get_num 1E94  
              _Left_Debounced 0034              collisionDetect@i 004F                 _resumeButtons 21AA  
                   itoa@value 0055              __size_of___awdiv 0084      checkForRightWall@pObject 0047  
            __size_of___awmod 0070              __size_of___lbmod 002A                  CreateBerry@i 0050  
            __size_of___lwmod 0042                 mergeObjects@i 004E                  rnd_get_num@b 004A  
               _choose_screen 0621                  removeLine@pY 0049                 _tmpObjectData 0080  
               reverse@length 004E                      _genBerry 2136                ??_checkButtons 0061  
                    __ptext10 134C                      __ptext11 1DFC                      __ptext20 1216  
                    __ptext12 1FEC                      __ptext21 1626                      __ptext13 1A40  
                    __ptext30 211E                      __ptext22 188E                      __ptext14 2070  
                    __ptext31 0934                      __ptext23 1DA6                      __ptext15 16FE  
                    __ptext40 21A4                      __ptext32 0E24                      __ptext24 20BE  
                    __ptext16 1AC4                      __ptext41 21AA                      __ptext33 1C22  
                    __ptext25 1B44                      __ptext17 1456                      __ptext42 2180  
                    __ptext34 2136                      __ptext26 0CA0                      __ptext18 06F2  
                    __ptext43 2190                      __ptext35 1E4E                      __ptext27 1CF8  
                    __ptext19 1C8E                      __ptext44 21B0                      __ptext36 2046  
                    __ptext28 1F84                      __ptext45 1548                      __ptext37 1E94  
                    __ptext29 2102                      __ptext46 1FB8                      __ptext38 20E4  
                    __ptext39 10DC                      __ptext48 1BB4                      __ptext49 1ED6  
            __size_of_reverse 0052    __end_of_resumeMultiplexing 21AA              _Rotate_Debounced 0032  
                    _itoa$425 005B                   _newRotation 1216            _previous_direction 0008  
             _LimitedRotation 0016                  ??_moveObject 004B                 __size_of_main 002C  
               __size_of_itoa 010A                 __size_of_swap 002E                  ??_removeLine 004A  
                ??_pixelCount 0049                ?_resumeButtons 0035                _Down_Debounced 0031  
                 clearArray@i 004D               _Right_Debounced 0033                      int$flags 0063  
                 ??_getNumber 0053                  ??_show_score 0062            __end_of_moveObject 0E24  
                  _INTCONbits 000FF2              clearArray@pArray 0047                      isr@xmask 0046  
                    isr@ymask 0044            __end_of_removeLine 1548            __end_of_pixelCount 1CF8  
            _selectNextObject 188E          readHighScore@tmpbyte 004A               _collisionDetect 1CF8  
                    intlevel2 0000                  _UpdateScreen 0006                  reverse@start 0051  
      __size_of_splash_screen 0056              ___lwmod@dividend 0035                   _rnd_get_num 1E4E  
            show_score@number 00B2                _checkForBottom 1F84                  _Rotate_Delay 002A  
                  _OSCCONbits 000FD3            __end_of_show_score 10DC                   _snakeLength 000B  
    __end_of_checkForLeftWall 2136      __size_of_initialise_TMR0 001E           readHighScore@adress 0049  
               choosescreen@i 005F             selectNextObject@s 0058      __end_of_waitForInterrupt 219C  
               ?_choosescreen 0035               ___lwmod@divisor 0037               ___lwmod@counter 0039  
               _LastHighScore 0014         checkForBottom@pObject 0047                 ??_CreateBerry 004E  
     checkForLeftWall@pObject 0047             _InterruptComplete 0005                clearArray@size 0049  
     __size_of_debounceButton 006E                  _port_display 000F82        __end_of_checkForBottom 1FB8  
       __end_of_checkForLines 1B44               ??_resumeButtons 0047  
