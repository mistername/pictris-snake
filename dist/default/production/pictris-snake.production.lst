

Microchip MPLAB XC8 Assembler V2.05 build -831301201 
                                                                                               Fri Mar 01 09:07:22 2019

Microchip MPLAB XC8 C Compiler v2.05 (Free license) build 20181220022703 Og1 
     1                           	processor	18F4520
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	flic
     5                           	psect	idataBANK0,global,class=CODE,delta=1,noexec
     6                           	psect	idataBANK2,global,class=CODE,delta=1,noexec
     7                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     8                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     9                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    10                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    11                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    12                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    13                           	psect	dataBANK2,global,class=BANK2,space=1,delta=1,lowdata,noexec
    14                           	psect	cstackBANK2,global,class=BANK2,space=1,delta=1,noexec
    15                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    16                           	psect	text0,global,reloc=2,class=CODE,delta=1
    17                           	psect	text1,global,reloc=2,class=CODE,delta=1
    18                           	psect	text2,global,reloc=2,class=CODE,delta=1
    19                           	psect	text3,global,reloc=2,class=CODE,delta=1
    20                           	psect	text4,global,reloc=2,class=CODE,delta=1
    21                           	psect	text5,global,reloc=2,class=CODE,delta=1
    22                           	psect	text6,global,reloc=2,class=CODE,delta=1
    23                           	psect	text7,global,reloc=2,class=CODE,delta=1
    24                           	psect	text8,global,reloc=2,class=CODE,delta=1
    25                           	psect	text9,global,reloc=2,class=CODE,delta=1
    26                           	psect	text10,global,reloc=2,class=CODE,delta=1
    27                           	psect	text11,global,reloc=2,class=CODE,delta=1
    28                           	psect	text12,global,reloc=2,class=CODE,delta=1
    29                           	psect	text13,global,reloc=2,class=CODE,delta=1,group=1
    30                           	psect	text14,global,reloc=2,class=CODE,delta=1
    31                           	psect	text15,global,reloc=2,class=CODE,delta=1
    32                           	psect	text16,global,reloc=2,class=CODE,delta=1
    33                           	psect	text17,global,reloc=2,class=CODE,delta=1
    34                           	psect	text18,global,reloc=2,class=CODE,delta=1
    35                           	psect	text19,global,reloc=2,class=CODE,delta=1
    36                           	psect	text20,global,reloc=2,class=CODE,delta=1
    37                           	psect	text21,global,reloc=2,class=CODE,delta=1
    38                           	psect	text22,global,reloc=2,class=CODE,delta=1
    39                           	psect	text23,global,reloc=2,class=CODE,delta=1
    40                           	psect	text24,global,reloc=2,class=CODE,delta=1
    41                           	psect	text25,global,reloc=2,class=CODE,delta=1
    42                           	psect	text26,global,reloc=2,class=CODE,delta=1
    43                           	psect	text27,global,reloc=2,class=CODE,delta=1
    44                           	psect	text28,global,reloc=2,class=CODE,delta=1
    45                           	psect	text29,global,reloc=2,class=CODE,delta=1
    46                           	psect	text30,global,reloc=2,class=CODE,delta=1
    47                           	psect	text31,global,reloc=2,class=CODE,delta=1
    48                           	psect	text32,global,reloc=2,class=CODE,delta=1
    49                           	psect	text33,global,reloc=2,class=CODE,delta=1
    50                           	psect	text34,global,reloc=2,class=CODE,delta=1
    51                           	psect	text35,global,reloc=2,class=CODE,delta=1
    52                           	psect	text36,global,reloc=2,class=CODE,delta=1
    53                           	psect	text37,global,reloc=2,class=CODE,delta=1
    54                           	psect	text38,global,reloc=2,class=CODE,delta=1,group=1
    55                           	psect	text39,global,reloc=2,class=CODE,delta=1,group=1
    56                           	psect	text40,global,reloc=2,class=CODE,delta=1
    57                           	psect	text41,global,reloc=2,class=CODE,delta=1
    58                           	psect	text42,global,reloc=2,class=CODE,delta=1
    59                           	psect	text43,global,reloc=2,class=CODE,delta=1
    60                           	psect	text44,global,reloc=2,class=CODE,delta=1
    61                           	psect	text45,global,reloc=2,class=CODE,delta=1
    62                           	psect	text46,global,reloc=2,class=CODE,delta=1
    63                           	psect	text47,global,reloc=2,class=CODE,delta=1
    64                           	psect	text48,global,reloc=2,class=CODE,delta=1
    65                           	psect	text49,global,reloc=2,class=CODE,delta=1
    66                           	psect	text50,global,reloc=2,class=CODE,delta=1,group=1
    67                           	psect	text51,global,reloc=2,class=CODE,delta=1
    68                           	psect	text52,global,reloc=2,class=CODE,delta=1
    69                           	psect	text53,global,reloc=2,class=CODE,delta=1
    70                           	psect	text54,global,reloc=2,class=CODE,delta=1
    71                           	psect	text55,global,reloc=2,class=CODE,delta=1
    72                           	psect	text56,global,reloc=2,class=CODE,delta=1
    73                           	psect	text57,global,reloc=2,class=CODE,delta=1
    74                           	psect	text58,global,reloc=2,class=CODE,delta=1
    75                           	psect	text59,global,reloc=2,class=CODE,delta=1
    76                           	psect	text60,global,reloc=2,class=CODE,delta=1
    77                           	psect	text61,global,reloc=2,class=CODE,delta=1
    78                           	psect	text62,global,reloc=2,class=CODE,delta=1
    79                           	psect	text63,global,reloc=2,class=CODE,delta=1
    80                           	psect	text64,global,reloc=2,class=CODE,delta=1
    81                           	psect	text65,global,reloc=2,class=CODE,delta=1
    82                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    83                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    84                           	psect	text67,global,reloc=2,class=CODE,delta=1
    85                           	psect	text68,global,reloc=2,class=CODE,delta=1
    86                           	psect	text69,global,reloc=2,class=CODE,delta=1
    87                           	psect	text70,global,reloc=2,class=CODE,delta=1
    88                           	psect	text71,global,reloc=2,class=CODE,delta=1
    89                           	psect	text72,global,reloc=2,class=CODE,delta=1
    90                           	psect	text73,global,reloc=2,class=CODE,delta=1
    91                           	psect	text74,global,reloc=2,class=CODE,delta=1
    92                           	psect	text75,global,reloc=2,class=CODE,delta=1
    93                           	psect	text76,global,reloc=2,class=CODE,delta=1,group=1
    94                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    95                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    96                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    97  0000                     
    98                           ; Version 2.05
    99                           ; Generated 20/12/2018 GMT
   100                           ; 
   101                           ; Copyright Â© 2018, Microchip Technology Inc. and its subsidiaries ("Microchip")
   102                           ; All rights reserved.
   103                           ; 
   104                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
   105                           ; 
   106                           ; Redistribution and use in source and binary forms, with or without modification, are
   107                           ; permitted provided that the following conditions are met:
   108                           ; 
   109                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
   110                           ;        conditions and the following disclaimer.
   111                           ; 
   112                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
   113                           ;        of conditions and the following disclaimer in the documentation and/or other
   114                           ;        materials provided with the distribution.
   115                           ; 
   116                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
   117                           ;        software without specific prior written permission.
   118                           ; 
   119                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   120                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   121                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   122                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   123                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   124                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   125                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   126                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   127                           ; 
   128                           ; 
   129                           ; Code-generator required, PIC18F4520 Definitions
   130                           ; 
   131                           ; SFR Addresses
   132  0000                     
   133                           	psect	idataBANK0
   134  00230C                     __pidataBANK0:
   135                           	opt callstack 0
   136                           
   137                           ;initializer for show_score@F2762
   138  00230C  FFFF               	dw	65535
   139  00230E  FFFF               	dw	65535
   140  002310  FFFF               	dw	65535
   141  002312  FFFF               	dw	65535
   142  002314  FFFF               	dw	65535
   143  002316  FFFF               	dw	65535
   144  002318  FFFF               	dw	65535
   145  00231A  FFFF               	dw	65535
   146                           
   147                           	psect	idataBANK2
   148  001696                     __pidataBANK2:
   149                           	opt callstack 0
   150                           
   151                           ;initializer for _shapes
   152  001696  0000               	dw	0
   153  001698  0000               	dw	0
   154  00169A  0000               	dw	0
   155  00169C  0001               	dw	1
   156  00169E  0003               	dw	3
   157  0016A0  0001               	dw	1
   158  0016A2  0000               	dw	0
   159  0016A4  0000               	dw	0
   160  0016A6  04                 	db	4
   161  0016A7  00                 	db	0
   162  0016A8  00                 	db	0
   163  0016A9  0000               	dw	0
   164  0016AB  0000               	dw	0
   165  0016AD  0001               	dw	1
   166  0016AF  0001               	dw	1
   167  0016B1  0001               	dw	1
   168  0016B3  0001               	dw	1
   169  0016B5  0000               	dw	0
   170  0016B7  0000               	dw	0
   171  0016B9  04                 	db	4
   172  0016BA  00                 	db	0
   173  0016BB  01                 	db	1
   174  0016BC  0000               	dw	0
   175  0016BE  0000               	dw	0
   176  0016C0  0000               	dw	0
   177  0016C2  0003               	dw	3
   178  0016C4  0001               	dw	1
   179  0016C6  0001               	dw	1
   180  0016C8  0000               	dw	0
   181  0016CA  0000               	dw	0
   182  0016CC  04                 	db	4
   183  0016CD  00                 	db	0
   184  0016CE  00                 	db	0
   185  0016CF  0000               	dw	0
   186  0016D1  0000               	dw	0
   187  0016D3  0000               	dw	0
   188  0016D5  0001               	dw	1
   189  0016D7  0001               	dw	1
   190  0016D9  0003               	dw	3
   191  0016DB  0000               	dw	0
   192  0016DD  0000               	dw	0
   193  0016DF  04                 	db	4
   194  0016E0  00                 	db	0
   195  0016E1  00                 	db	0
   196  0016E2  0000               	dw	0
   197  0016E4  0000               	dw	0
   198  0016E6  0000               	dw	0
   199  0016E8  0003               	dw	3
   200  0016EA  0003               	dw	3
   201  0016EC  0000               	dw	0
   202  0016EE  0000               	dw	0
   203  0016F0  0000               	dw	0
   204  0016F2  03                 	db	3
   205  0016F3  01                 	db	1
   206  0016F4  02                 	db	2
   207  0016F5  0000               	dw	0
   208  0016F7  0000               	dw	0
   209  0016F9  0000               	dw	0
   210  0016FB  0002               	dw	2
   211  0016FD  0003               	dw	3
   212  0016FF  0001               	dw	1
   213  001701  0000               	dw	0
   214  001703  0000               	dw	0
   215  001705  04                 	db	4
   216  001706  01                 	db	1
   217  001707  01                 	db	1
   218  001708  0000               	dw	0
   219  00170A  0000               	dw	0
   220  00170C  0000               	dw	0
   221  00170E  0001               	dw	1
   222  001710  0003               	dw	3
   223  001712  0002               	dw	2
   224  001714  0000               	dw	0
   225  001716  0000               	dw	0
   226  001718  04                 	db	4
   227  001719  01                 	db	1
   228  00171A  01                 	db	1
   229                           
   230                           	psect	smallconst
   231  000600                     __psmallconst:
   232                           	opt callstack 0
   233  000600  00                 	db	0
   234  000601                     _SnakeYtext:
   235                           	opt callstack 0
   236  000601  0001               	dw	1
   237  000603  0002               	dw	2
   238  000605  0004               	dw	4
   239  000607  0008               	dw	8
   240  000609  0010               	dw	16
   241  00060B  0020               	dw	32
   242  00060D  0040               	dw	64
   243  00060F  0080               	dw	128
   244  000611  0100               	dw	256
   245  000613  0200               	dw	512
   246  000615  0400               	dw	1024
   247  000617  0800               	dw	2048
   248  000619  1000               	dw	4096
   249  00061B  2000               	dw	8192
   250  00061D  4000               	dw	16384
   251  00061F  8000               	dw	32768
   252  000621                     __end_of_SnakeYtext:
   253                           	opt callstack 0
   254  000621                     _Number:
   255                           	opt callstack 0
   256  000621  001E               	dw	30
   257  000623  0012               	dw	18
   258  000625  0012               	dw	18
   259  000627  0012               	dw	18
   260  000629  001E               	dw	30
   261  00062B  0000               	dw	0
   262  00062D  0000               	dw	0
   263  00062F  0000               	dw	0
   264  000631  0004               	dw	4
   265  000633  000C               	dw	12
   266  000635  0004               	dw	4
   267  000637  0004               	dw	4
   268  000639  001E               	dw	30
   269  00063B  0000               	dw	0
   270  00063D  0000               	dw	0
   271  00063F  0000               	dw	0
   272  000641  001E               	dw	30
   273  000643  0002               	dw	2
   274  000645  001E               	dw	30
   275  000647  0010               	dw	16
   276  000649  001E               	dw	30
   277  00064B  0000               	dw	0
   278  00064D  0000               	dw	0
   279  00064F  0000               	dw	0
   280  000651  001E               	dw	30
   281  000653  0002               	dw	2
   282  000655  000E               	dw	14
   283  000657  0002               	dw	2
   284  000659  001E               	dw	30
   285  00065B  0000               	dw	0
   286  00065D  0000               	dw	0
   287  00065F  0000               	dw	0
   288  000661  0012               	dw	18
   289  000663  0012               	dw	18
   290  000665  001E               	dw	30
   291  000667  0002               	dw	2
   292  000669  0002               	dw	2
   293  00066B  0000               	dw	0
   294  00066D  0000               	dw	0
   295  00066F  0000               	dw	0
   296  000671  001E               	dw	30
   297  000673  0010               	dw	16
   298  000675  001E               	dw	30
   299  000677  0002               	dw	2
   300  000679  001E               	dw	30
   301  00067B  0000               	dw	0
   302  00067D  0000               	dw	0
   303  00067F  0000               	dw	0
   304  000681  001E               	dw	30
   305  000683  0010               	dw	16
   306  000685  001E               	dw	30
   307  000687  0012               	dw	18
   308  000689  001E               	dw	30
   309  00068B  0000               	dw	0
   310  00068D  0000               	dw	0
   311  00068F  0000               	dw	0
   312  000691  001E               	dw	30
   313  000693  0002               	dw	2
   314  000695  0004               	dw	4
   315  000697  0008               	dw	8
   316  000699  0010               	dw	16
   317  00069B  0000               	dw	0
   318  00069D  0000               	dw	0
   319  00069F  0000               	dw	0
   320  0006A1  001E               	dw	30
   321  0006A3  0012               	dw	18
   322  0006A5  001E               	dw	30
   323  0006A7  0012               	dw	18
   324  0006A9  001E               	dw	30
   325  0006AB  0000               	dw	0
   326  0006AD  0000               	dw	0
   327  0006AF  0000               	dw	0
   328  0006B1  001E               	dw	30
   329  0006B3  0012               	dw	18
   330  0006B5  001E               	dw	30
   331  0006B7  0002               	dw	2
   332  0006B9  0002               	dw	2
   333  0006BB  0000               	dw	0
   334  0006BD  0000               	dw	0
   335  0006BF  0000               	dw	0
   336  0006C1                     __end_of_Number:
   337                           	opt callstack 0
   338  0006C1                     _choose_screen:
   339                           	opt callstack 0
   340  0006C1  FFFF               	dw	65535
   341  0006C3  8181               	dw	33153
   342  0006C5  BD81               	dw	48513
   343  0006C7  858D               	dw	34189
   344  0006C9  8599               	dw	34201
   345  0006CB  AD81               	dw	44417
   346  0006CD  8181               	dw	33153
   347  0006CF  FFFF               	dw	65535
   348  0006D1                     __end_of_choose_screen:
   349                           	opt callstack 0
   350  0006D1                     _SNAKE:
   351                           	opt callstack 0
   352  0006D1  FB97               	dw	64407
   353  0006D3  A955               	dw	43349
   354  0006D5  AB9D               	dw	43933
   355  0006D7  0000               	dw	0
   356  0006D9  03DF               	dw	991
   357  0006DB  B881               	dw	47233
   358  0006DD  035F               	dw	863
   359  0006DF  0000               	dw	0
   360  0006E1                     __end_of_SNAKE:
   361                           	opt callstack 0
   362  0006E1                     _TETRIS:
   363                           	opt callstack 0
   364  0006E1  8841               	dw	34881
   365  0006E3  FBDF               	dw	64479
   366  0006E5  8841               	dw	34881
   367  0006E7  0000               	dw	0
   368  0006E9  9BDF               	dw	39903
   369  0006EB  A955               	dw	43349
   370  0006ED  CA91               	dw	51857
   371  0006EF  0000               	dw	0
   372  0006F1                     __end_of_TETRIS:
   373                           	opt callstack 0
   374  0000                     _port_display	set	3970
   375  0000                     _TMR0	set	4054
   376  0000                     _PORTBbits	set	3969
   377  0000                     _EECON2	set	4007
   378  0000                     _EEDATA	set	4008
   379  0000                     _EECON1bits	set	4006
   380  0000                     _EEADR	set	4009
   381  0000                     _PORTD	set	3971
   382  0000                     _DDRD	set	3989
   383  0000                     _PORTC	set	3970
   384  0000                     _DDRC	set	3988
   385  0000                     _INTCON2bits	set	4081
   386  0000                     _PORTB	set	3969
   387  0000                     _DDRB	set	3987
   388  0000                     _PORTA	set	3968
   389  0000                     _DDRA	set	3986
   390  0000                     _ADCON1bits	set	4033
   391  0000                     _OSCCONbits	set	4051
   392  0000                     _T0CONbits	set	4053
   393  0000                     _INTCONbits	set	4082
   394  0000                     _GIE	set	32663
   395  0000                     _IPEN	set	32391
   396  0000                     _TMR0IE	set	32661
   397  0000                     _TMR0ON	set	32431
   398  0000                     _T0CS	set	32429
   399  0000                     _PSA	set	32427
   400                           
   401                           ; #config settings
   402  0006F1  00                 	db	0	; dummy byte at the end
   403  0000                     
   404                           	psect	cinit
   405  0019A8                     __pcinit:
   406                           	opt callstack 0
   407  0019A8                     start_initialization:
   408                           	opt callstack 0
   409  0019A8                     __initialization:
   410                           	opt callstack 0
   411                           
   412                           ; Initialize objects allocated to BANK2 (133 bytes)
   413                           ; load TBLPTR registers with __pidataBANK2
   414  0019A8  0E96               	movlw	low __pidataBANK2
   415  0019AA  6EF6               	movwf	tblptrl,c
   416  0019AC  0E16               	movlw	high __pidataBANK2
   417  0019AE  6EF7               	movwf	tblptrh,c
   418  0019B0  0E00               	movlw	low (__pidataBANK2 shr (0+16))
   419  0019B2  6EF8               	movwf	tblptru,c
   420  0019B4  EE02  F000         	lfsr	0,__pdataBANK2
   421  0019B8  EE10 F085          	lfsr	1,133
   422  0019BC                     copy_data0:
   423  0019BC  0009               	tblrd		*+
   424  0019BE  CFF5 FFEE          	movff	tablat,postinc0
   425  0019C2  50E5               	movf	postdec1,w,c
   426  0019C4  50E1               	movf	fsr1l,w,c
   427  0019C6  E1FA               	bnz	copy_data0
   428                           
   429                           ; Initialize objects allocated to BANK0 (16 bytes)
   430                           ; load TBLPTR registers with __pidataBANK0
   431  0019C8  0E0C               	movlw	low __pidataBANK0
   432  0019CA  6EF6               	movwf	tblptrl,c
   433  0019CC  0E23               	movlw	high __pidataBANK0
   434  0019CE  6EF7               	movwf	tblptrh,c
   435  0019D0  0E00               	movlw	low (__pidataBANK0 shr (0+16))
   436  0019D2  6EF8               	movwf	tblptru,c
   437  0019D4  EE00  F0E8         	lfsr	0,__pdataBANK0
   438  0019D8  EE10 F010          	lfsr	1,16
   439  0019DC                     copy_data1:
   440  0019DC  0009               	tblrd		*+
   441  0019DE  CFF5 FFEE          	movff	tablat,postinc0
   442  0019E2  50E5               	movf	postdec1,w,c
   443  0019E4  50E1               	movf	fsr1l,w,c
   444  0019E6  E1FA               	bnz	copy_data1
   445                           
   446                           ; Clear objects allocated to BANK1 (256 bytes)
   447  0019E8  EE01  F000         	lfsr	0,__pbssBANK1
   448  0019EC  EE11 F000          	lfsr	1,256
   449  0019F0                     clear_0:
   450  0019F0  6AEE               	clrf	postinc0,c
   451  0019F2  50E5               	movf	postdec1,w,c
   452  0019F4  50E1               	movf	fsr1l,w,c
   453  0019F6  E1FC               	bnz	clear_0
   454  0019F8  50E2               	movf	fsr1h,w,c
   455  0019FA  E1FA               	bnz	clear_0
   456                           
   457                           ; Clear objects allocated to BANK0 (104 bytes)
   458  0019FC  EE00  F080         	lfsr	0,__pbssBANK0
   459  001A00  0E68               	movlw	104
   460  001A02                     clear_1:
   461  001A02  6AEE               	clrf	postinc0,c
   462  001A04  06E8               	decf	wreg,f,c
   463  001A06  E1FD               	bnz	clear_1
   464                           
   465                           ; Clear objects allocated to COMRAM (28 bytes)
   466  001A08  EE00  F034         	lfsr	0,__pbssCOMRAM
   467  001A0C  0E1C               	movlw	28
   468  001A0E                     clear_2:
   469  001A0E  6AEE               	clrf	postinc0,c
   470  001A10  06E8               	decf	wreg,f,c
   471  001A12  E1FD               	bnz	clear_2
   472  001A14                     end_of_initialization:
   473                           	opt callstack 0
   474  001A14                     __end_of__initialization:
   475                           	opt callstack 0
   476  001A14  9050               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   477  001A16  9250               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   478  001A18  0E00               	movlw	low (__Lmediumconst shr (0+16))
   479  001A1A  6EF8               	movwf	tblptru,c
   480  001A1C  0100               	movlb	0
   481  001A1E  EF69  F010         	goto	_main	;jump to C main() function
   482                           
   483                           	psect	bssCOMRAM
   484  000034                     __pbssCOMRAM:
   485                           	opt callstack 0
   486  000034                     _mS:
   487                           	opt callstack 0
   488  000034                     	ds	2
   489  000036                     __lfsr:
   490                           	opt callstack 0
   491  000036                     	ds	2
   492  000038                     _InterruptComplete:
   493                           	opt callstack 0
   494  000038                     	ds	1
   495  000039                     _UpdateScreen:
   496                           	opt callstack 0
   497  000039                     	ds	1
   498  00003A                     _mtxButtons:
   499                           	opt callstack 0
   500  00003A                     	ds	1
   501  00003B                     _EndOfGameSnake:
   502                           	opt callstack 0
   503  00003B                     	ds	1
   504  00003C                     _previous_direction:
   505                           	opt callstack 0
   506  00003C                     	ds	1
   507  00003D                     _berryY:
   508                           	opt callstack 0
   509  00003D                     	ds	1
   510  00003E                     _berryX:
   511                           	opt callstack 0
   512  00003E                     	ds	1
   513  00003F                     _snakeLength:
   514                           	opt callstack 0
   515  00003F                     	ds	1
   516  000040                     _moveSnake:
   517                           	opt callstack 0
   518  000040                     	ds	1
   519  000041                     _game:
   520                           	opt callstack 0
   521  000041                     	ds	1
   522  000042                     _OriginY:
   523                           	opt callstack 0
   524  000042                     	ds	1
   525  000043                     _OriginX:
   526                           	opt callstack 0
   527  000043                     	ds	1
   528  000044                     _DropObject:
   529                           	opt callstack 0
   530  000044                     	ds	1
   531  000045                     _countblocks:
   532                           	opt callstack 0
   533  000045                     	ds	1
   534  000046                     _CheckForNewLines:
   535                           	opt callstack 0
   536  000046                     	ds	1
   537  000047                     _IsRotated:
   538                           	opt callstack 0
   539  000047                     	ds	1
   540  000048                     _NumberOfLines:
   541                           	opt callstack 0
   542  000048                     	ds	1
   543  000049                     _LimitedRotation:
   544                           	opt callstack 0
   545  000049                     	ds	1
   546  00004A                     _EndOfGame:
   547                           	opt callstack 0
   548  00004A                     	ds	1
   549  00004B                     screen_update@CurrentX:
   550                           	opt callstack 0
   551  00004B                     	ds	1
   552  00004C                     _Down_Debounced:
   553                           	opt callstack 0
   554  00004C                     	ds	1
   555  00004D                     _Right_Debounced:
   556                           	opt callstack 0
   557  00004D                     	ds	1
   558  00004E                     _Left_Debounced:
   559                           	opt callstack 0
   560  00004E                     	ds	1
   561  00004F                     _Rotate_Debounced:
   562                           	opt callstack 0
   563  00004F                     	ds	1
   564                           
   565                           	psect	bssBANK0
   566  000080                     __pbssBANK0:
   567                           	opt callstack 0
   568  000080                     _randomobjects:
   569                           	opt callstack 0
   570  000080                     	ds	8
   571  000088                     _time:
   572                           	opt callstack 0
   573  000088                     	ds	2
   574  00008A                     _direction:
   575                           	opt callstack 0
   576  00008A                     	ds	1
   577  00008B                     _counter:
   578                           	opt callstack 0
   579  00008B                     	ds	1
   580  00008C                     _upper_8bits:
   581                           	opt callstack 0
   582  00008C                     	ds	1
   583  00008D                     _lower_8bits:
   584                           	opt callstack 0
   585  00008D                     	ds	1
   586  00008E                     _tetris:
   587                           	opt callstack 0
   588  00008E                     	ds	1
   589  00008F                     _LastHighScore:
   590                           	opt callstack 0
   591  00008F                     	ds	1
   592  000090                     _ScreenData:
   593                           	opt callstack 0
   594  000090                     	ds	16
   595  0000A0                     _Screen_Data:
   596                           	opt callstack 0
   597  0000A0                     	ds	16
   598  0000B0                     _tmpObjectData:
   599                           	opt callstack 0
   600  0000B0                     	ds	16
   601  0000C0                     _BackgroundData:
   602                           	opt callstack 0
   603  0000C0                     	ds	16
   604  0000D0                     _ObjectData:
   605                           	opt callstack 0
   606  0000D0                     	ds	16
   607  0000E0                     _Down_Delay:
   608                           	opt callstack 0
   609  0000E0                     	ds	2
   610  0000E2                     _Rotate_Delay:
   611                           	opt callstack 0
   612  0000E2                     	ds	2
   613  0000E4                     _Right_Delay:
   614                           	opt callstack 0
   615  0000E4                     	ds	2
   616  0000E6                     _Left_Delay:
   617                           	opt callstack 0
   618  0000E6                     	ds	2
   619                           
   620                           	psect	dataBANK0
   621  0000E8                     __pdataBANK0:
   622                           	opt callstack 0
   623  0000E8                     show_score@F2762:
   624                           	opt callstack 0
   625  0000E8                     	ds	16
   626                           
   627                           	psect	bssBANK1
   628  000100                     __pbssBANK1:
   629                           	opt callstack 0
   630  000100                     _positions:
   631                           	opt callstack 0
   632  000100                     	ds	256
   633                           
   634                           	psect	dataBANK2
   635  000200                     __pdataBANK2:
   636                           	opt callstack 0
   637  000200                     _shapes:
   638                           	opt callstack 0
   639  000200                     	ds	133
   640                           
   641                           	psect	cstackBANK2
   642  000285                     __pcstackBANK2:
   643                           	opt callstack 0
   644  000285                     show_score@mask:
   645                           	opt callstack 0
   646                           
   647                           ; 16 bytes @ 0x0
   648  000285                     	ds	16
   649  000295                     show_score@Numberscreen:
   650                           	opt callstack 0
   651                           
   652                           ; 16 bytes @ 0x10
   653  000295                     	ds	16
   654  0002A5                     show_score@tmpObjectData:
   655                           	opt callstack 0
   656                           
   657                           ; 16 bytes @ 0x20
   658  0002A5                     	ds	16
   659  0002B5                     show_score@score:
   660                           	opt callstack 0
   661                           
   662                           ; 1 bytes @ 0x30
   663  0002B5                     	ds	1
   664  0002B6                     show_score@currentNumber:
   665                           	opt callstack 0
   666                           
   667                           ; 1 bytes @ 0x31
   668  0002B6                     	ds	1
   669  0002B7                     show_score@number:
   670                           	opt callstack 0
   671                           
   672                           ; 4 bytes @ 0x32
   673  0002B7                     	ds	4
   674  0002BB                     show_score@i:
   675                           	opt callstack 0
   676                           
   677                           ; 1 bytes @ 0x36
   678  0002BB                     	ds	1
   679                           
   680                           	psect	cstackCOMRAM
   681  000001                     __pcstackCOMRAM:
   682                           	opt callstack 0
   683  000001                     ??_screen_update:
   684  000001                     ?i2_get_mS:
   685                           	opt callstack 0
   686  000001                     add_mS@amount:
   687                           	opt callstack 0
   688  000001                     debounceButton@delay:
   689                           	opt callstack 0
   690  000001                     i2set_mS@amount:
   691                           	opt callstack 0
   692                           
   693                           ; 2 bytes @ 0x0
   694  000001                     	ds	2
   695  000003                     ?___lwmod:
   696                           	opt callstack 0
   697  000003                     debounceButton@debounced:
   698                           	opt callstack 0
   699  000003                     screen_update@ymask:
   700                           	opt callstack 0
   701  000003                     ___lwmod@dividend:
   702                           	opt callstack 0
   703                           
   704                           ; 2 bytes @ 0x2
   705  000003                     	ds	2
   706  000005                     screen_update@xmask:
   707                           	opt callstack 0
   708  000005                     ___lwmod@divisor:
   709                           	opt callstack 0
   710                           
   711                           ; 2 bytes @ 0x4
   712  000005                     	ds	2
   713  000007                     debounceButton@button:
   714                           	opt callstack 0
   715  000007                     ___lwmod@counter:
   716                           	opt callstack 0
   717                           
   718                           ; 1 bytes @ 0x6
   719  000007                     	ds	1
   720  000008                     ??_isr:
   721  000008                     
   722                           ; 1 bytes @ 0x7
   723  000008                     	ds	4
   724  00000C                     ??_rnd_get_num:
   725  00000C                     ?_get_mS:
   726                           	opt callstack 0
   727  00000C                     ?___wmul:
   728                           	opt callstack 0
   729  00000C                     ?___awdiv:
   730                           	opt callstack 0
   731  00000C                     ?___awmod:
   732                           	opt callstack 0
   733  00000C                     rnd_initialize@input:
   734                           	opt callstack 0
   735  00000C                     ReadEEByte@address:
   736                           	opt callstack 0
   737  00000C                     WriteEEByte@data:
   738                           	opt callstack 0
   739  00000C                     checkLeft@reset:
   740                           	opt callstack 0
   741  00000C                     checkRight@reset:
   742                           	opt callstack 0
   743  00000C                     checkUp@reset:
   744                           	opt callstack 0
   745  00000C                     checkDown@reset:
   746                           	opt callstack 0
   747  00000C                     ___lbmod@divisor:
   748                           	opt callstack 0
   749  00000C                     moveObject@pObject:
   750                           	opt callstack 0
   751  00000C                     checkForBottom@pObject:
   752                           	opt callstack 0
   753  00000C                     set_mS@amount:
   754                           	opt callstack 0
   755  00000C                     memcpy@dest:
   756                           	opt callstack 0
   757  00000C                     memcpyvol@dest:
   758                           	opt callstack 0
   759  00000C                     swap@a:
   760                           	opt callstack 0
   761  00000C                     clearArray@pArray:
   762                           	opt callstack 0
   763  00000C                     mergeObjects@pSource:
   764                           	opt callstack 0
   765  00000C                     checkForLeftWall@pObject:
   766                           	opt callstack 0
   767  00000C                     checkForRightWall@pObject:
   768                           	opt callstack 0
   769  00000C                     collisionDetect@pSource:
   770                           	opt callstack 0
   771  00000C                     pixelCount@pSource:
   772                           	opt callstack 0
   773  00000C                     removeLine@pObject:
   774                           	opt callstack 0
   775  00000C                     waitms@t:
   776                           	opt callstack 0
   777  00000C                     ___wmul@multiplier:
   778                           	opt callstack 0
   779  00000C                     ___awdiv@dividend:
   780                           	opt callstack 0
   781  00000C                     ___awmod@dividend:
   782                           	opt callstack 0
   783                           
   784                           ; 2 bytes @ 0xB
   785  00000C                     	ds	1
   786  00000D                     WriteEEByte@address:
   787                           	opt callstack 0
   788  00000D                     ___lbmod@dividend:
   789                           	opt callstack 0
   790                           
   791                           ; 1 bytes @ 0xC
   792  00000D                     	ds	1
   793  00000E                     ??_checkForBottom:
   794  00000E                     ??_pixelCount:
   795  00000E                     moveObject@direction:
   796                           	opt callstack 0
   797  00000E                     removeLine@pY:
   798                           	opt callstack 0
   799  00000E                     readHighScore@adress:
   800                           	opt callstack 0
   801  00000E                     writeHighScore@highscore:
   802                           	opt callstack 0
   803  00000E                     ___lbmod@counter:
   804                           	opt callstack 0
   805  00000E                     memcpy@src:
   806                           	opt callstack 0
   807  00000E                     memcpyvol@src:
   808                           	opt callstack 0
   809  00000E                     swap@b:
   810                           	opt callstack 0
   811  00000E                     clearArray@size:
   812                           	opt callstack 0
   813  00000E                     mergeObjects@pTarget:
   814                           	opt callstack 0
   815  00000E                     collisionDetect@pTarget:
   816                           	opt callstack 0
   817  00000E                     ___wmul@multiplicand:
   818                           	opt callstack 0
   819  00000E                     ___awdiv@divisor:
   820                           	opt callstack 0
   821  00000E                     ___awmod@divisor:
   822                           	opt callstack 0
   823                           
   824                           ; 2 bytes @ 0xD
   825  00000E                     	ds	1
   826  00000F                     ??_removeLine:
   827  00000F                     moveObject@cycles:
   828                           	opt callstack 0
   829  00000F                     readHighScore@tmpbyte:
   830                           	opt callstack 0
   831  00000F                     writeHighScore@scored:
   832                           	opt callstack 0
   833  00000F                     ___lbmod@rem:
   834                           	opt callstack 0
   835                           
   836                           ; 1 bytes @ 0xE
   837  00000F                     	ds	1
   838  000010                     ??_clearArray:
   839  000010                     ??_moveObject:
   840  000010                     ??_collisionDetect:
   841  000010                     swap@t:
   842                           	opt callstack 0
   843  000010                     mergeObjects@mode:
   844                           	opt callstack 0
   845  000010                     writeHighScore@adress:
   846                           	opt callstack 0
   847  000010                     ___awdiv@counter:
   848                           	opt callstack 0
   849  000010                     ___awmod@counter:
   850                           	opt callstack 0
   851  000010                     rnd_get_num@b:
   852                           	opt callstack 0
   853  000010                     memcpy@n:
   854                           	opt callstack 0
   855  000010                     memcpyvol@n:
   856                           	opt callstack 0
   857  000010                     ___wmul@product:
   858                           	opt callstack 0
   859                           
   860                           ; 2 bytes @ 0xF
   861  000010                     	ds	1
   862  000011                     ??_mergeObjects:
   863  000011                     ___awdiv@sign:
   864                           	opt callstack 0
   865  000011                     ___awmod@sign:
   866                           	opt callstack 0
   867  000011                     reverse@str:
   868                           	opt callstack 0
   869                           
   870                           ; 2 bytes @ 0x10
   871  000011                     	ds	1
   872  000012                     checkForBottom@i:
   873                           	opt callstack 0
   874  000012                     genBerry@size:
   875                           	opt callstack 0
   876  000012                     clearArray@i:
   877                           	opt callstack 0
   878  000012                     memcpy@d:
   879                           	opt callstack 0
   880  000012                     memcpyvol@d:
   881                           	opt callstack 0
   882  000012                     ___awdiv@quotient:
   883                           	opt callstack 0
   884                           
   885                           ; 2 bytes @ 0x11
   886  000012                     	ds	1
   887  000013                     genBerry@temp:
   888                           	opt callstack 0
   889  000013                     reverse@length:
   890                           	opt callstack 0
   891  000013                     set_screen@newData:
   892                           	opt callstack 0
   893                           
   894                           ; 2 bytes @ 0x12
   895  000013                     	ds	1
   896  000014                     memcpy@s:
   897                           	opt callstack 0
   898  000014                     memcpyvol@s:
   899                           	opt callstack 0
   900                           
   901                           ; 2 bytes @ 0x13
   902  000014                     	ds	1
   903  000015                     ??_set_screen:
   904  000015                     ??_reverse:
   905  000015                     CreateBerry@randomGood:
   906                           	opt callstack 0
   907  000015                     pixelCount@r:
   908                           	opt callstack 0
   909                           
   910                           ; 1 bytes @ 0x14
   911  000015                     	ds	1
   912  000016                     moveObject@c:
   913                           	opt callstack 0
   914  000016                     CreateBerry@i:
   915                           	opt callstack 0
   916  000016                     pixelCount@x:
   917                           	opt callstack 0
   918  000016                     newRotation@pSource:
   919                           	opt callstack 0
   920  000016                     selectNextObject@pTarget:
   921                           	opt callstack 0
   922  000016                     reverse@start:
   923                           	opt callstack 0
   924  000016                     getNumber@pTarget:
   925                           	opt callstack 0
   926                           
   927                           ; 2 bytes @ 0x15
   928  000016                     	ds	1
   929  000017                     moveObject@i:
   930                           	opt callstack 0
   931  000017                     mergeObjects@i:
   932                           	opt callstack 0
   933  000017                     pixelCount@y:
   934                           	opt callstack 0
   935                           
   936                           ; 1 bytes @ 0x16
   937  000017                     	ds	1
   938  000018                     ??_selectNextObject:
   939  000018                     collisionDetect@i:
   940                           	opt callstack 0
   941  000018                     getNumber@pDigit:
   942                           	opt callstack 0
   943  000018                     newRotation@pTarget:
   944                           	opt callstack 0
   945  000018                     reverse@end:
   946                           	opt callstack 0
   947                           
   948                           ; 2 bytes @ 0x17
   949  000018                     	ds	1
   950  000019                     selectNextObject@check:
   951                           	opt callstack 0
   952                           
   953                           ; 7 bytes @ 0x18
   954  000019                     	ds	1
   955  00001A                     newRotation@rotation:
   956                           	opt callstack 0
   957  00001A                     itoa@value:
   958                           	opt callstack 0
   959                           
   960                           ; 2 bytes @ 0x19
   961  00001A                     	ds	1
   962  00001B                     ??_newRotation:
   963  00001B                     set_screen@i:
   964                           	opt callstack 0
   965                           
   966                           ; 2 bytes @ 0x1A
   967  00001B                     	ds	1
   968  00001C                     itoa@str:
   969                           	opt callstack 0
   970                           
   971                           ; 2 bytes @ 0x1B
   972  00001C                     	ds	1
   973  00001D                     ??_SnakeGraph:
   974  00001D                     choosescreen@mask:
   975                           	opt callstack 0
   976                           
   977                           ; 16 bytes @ 0x1C
   978  00001D                     	ds	1
   979  00001E                     itoa@bas:
   980                           	opt callstack 0
   981                           
   982                           ; 2 bytes @ 0x1D
   983  00001E                     	ds	2
   984  000020                     selectNextObject@fill:
   985                           	opt callstack 0
   986  000020                     removeLine@currentLine:
   987                           	opt callstack 0
   988  000020                     _itoa$757:
   989                           	opt callstack 0
   990                           
   991                           ; 2 bytes @ 0x1F
   992  000020                     	ds	1
   993  000021                     removeLine@y:
   994                           	opt callstack 0
   995  000021                     selectNextObject@s:
   996                           	opt callstack 0
   997                           
   998                           ; 2 bytes @ 0x20
   999  000021                     	ds	1
  1000  000022                     newRotation@x2:
  1001                           	opt callstack 0
  1002  000022                     SnakeGraph@j:
  1003                           	opt callstack 0
  1004  000022                     itoa@isNegative:
  1005                           	opt callstack 0
  1006  000022                     removeLine@x:
  1007                           	opt callstack 0
  1008                           
  1009                           ; 1 bytes @ 0x21
  1010  000022                     	ds	1
  1011  000023                     newRotation@y2:
  1012                           	opt callstack 0
  1013  000023                     selectNextObject@rndSelection:
  1014                           	opt callstack 0
  1015  000023                     SnakeGraph@i:
  1016                           	opt callstack 0
  1017  000023                     checkForLines@pObject:
  1018                           	opt callstack 0
  1019  000023                     itoa@rem:
  1020                           	opt callstack 0
  1021                           
  1022                           ; 2 bytes @ 0x22
  1023  000023                     	ds	1
  1024  000024                     ??_MoveSnakes:
  1025  000024                     newRotation@x1:
  1026                           	opt callstack 0
  1027  000024                     selectNextObject@counter:
  1028                           	opt callstack 0
  1029                           
  1030                           ; 1 bytes @ 0x23
  1031  000024                     	ds	1
  1032  000025                     ??_checkForLines:
  1033  000025                     newRotation@y1:
  1034                           	opt callstack 0
  1035  000025                     moveObjectDown@pObject:
  1036                           	opt callstack 0
  1037  000025                     itoa@i:
  1038                           	opt callstack 0
  1039                           
  1040                           ; 2 bytes @ 0x24
  1041  000025                     	ds	1
  1042  000026                     ??_tetris_button_up:
  1043                           
  1044                           ; 1 bytes @ 0x25
  1045  000026                     	ds	1
  1046  000027                     moveObjectDown@result:
  1047                           	opt callstack 0
  1048                           
  1049                           ; 1 bytes @ 0x26
  1050  000027                     	ds	1
  1051  000028                     tetris_buttons@returnbool:
  1052                           	opt callstack 0
  1053  000028                     MoveSnakes@i:
  1054                           	opt callstack 0
  1055                           
  1056                           ; 1 bytes @ 0x27
  1057  000028                     	ds	1
  1058  000029                     snake_main@LastHighScore:
  1059                           	opt callstack 0
  1060                           
  1061                           ; 1 bytes @ 0x28
  1062  000029                     	ds	3
  1063  00002C                     checkForLines@pixels:
  1064                           	opt callstack 0
  1065                           
  1066                           ; 1 bytes @ 0x2B
  1067  00002C                     	ds	1
  1068  00002D                     checkForLines@x:
  1069                           	opt callstack 0
  1070                           
  1071                           ; 1 bytes @ 0x2C
  1072  00002D                     	ds	1
  1073  00002E                     checkForLines@y:
  1074                           	opt callstack 0
  1075  00002E                     choosescreen@i:
  1076                           	opt callstack 0
  1077                           
  1078                           ; 2 bytes @ 0x2D
  1079  00002E                     	ds	1
  1080  00002F                     _tetris_main$635:
  1081                           	opt callstack 0
  1082                           
  1083                           ; 1 bytes @ 0x2E
  1084  00002F                     	ds	3
  1085  000032                     tetris_main@LastHighScore:
  1086                           	opt callstack 0
  1087                           
  1088                           ; 1 bytes @ 0x31
  1089  000032                     	ds	1
  1090  000033                     tetris_main@newScreen:
  1091                           	opt callstack 0
  1092                           
  1093                           ; 1 bytes @ 0x32
  1094  000033                     	ds	1
  1095  000034                     
  1096                           ; 1 bytes @ 0x33
  1097 ;;
  1098 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  1099 ;;
  1100 ;; *************** function _main *****************
  1101 ;; Defined at:
  1102 ;;		line 147 in file "pictris.c"
  1103 ;; Parameters:    Size  Location     Type
  1104 ;;		None
  1105 ;; Auto vars:     Size  Location     Type
  1106 ;;		None
  1107 ;; Return value:  Size  Location     Type
  1108 ;;                  1    wreg      void 
  1109 ;; Registers used:
  1110 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1111 ;; Tracked objects:
  1112 ;;		On entry : 0/0
  1113 ;;		On exit  : 0/0
  1114 ;;		Unchanged: 0/0
  1115 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1116 ;;      Params:         0       0       0       0       0       0       0
  1117 ;;      Locals:         0       0       0       0       0       0       0
  1118 ;;      Temps:          0       0       0       0       0       0       0
  1119 ;;      Totals:         0       0       0       0       0       0       0
  1120 ;;Total ram usage:        0 bytes
  1121 ;; Hardware stack levels required when called:   11
  1122 ;; This function calls:
  1123 ;;		_choosescreen
  1124 ;;		_get_mS
  1125 ;;		_initialise_globals
  1126 ;;		_initialise_hardware
  1127 ;;		_initialise_screen
  1128 ;;		_mainGameLoop
  1129 ;;		_rnd_initialize
  1130 ;;		_splash_screen
  1131 ;;		_start_button
  1132 ;; This function is called by:
  1133 ;;		Startup code after reset
  1134 ;; This function uses a non-reentrant model
  1135 ;;
  1136                           
  1137                           	psect	text0
  1138  0020D2                     __ptext0:
  1139                           	opt callstack 0
  1140  0020D2                     _main:
  1141                           	opt callstack 20
  1142                           
  1143                           ;pictris.c: 150:     initialise_hardware();
  1144                           
  1145                           ;incstack = 0
  1146  0020D2  EC80  F00F         	call	_initialise_hardware	;wreg free
  1147                           
  1148                           ;pictris.c: 151:     initialise_globals();
  1149  0020D6  ECF4  F00F         	call	_initialise_globals	;wreg free
  1150                           
  1151                           ;pictris.c: 152:     start_button();
  1152  0020DA  EC3E  F010         	call	_start_button	;wreg free
  1153                           
  1154                           ;pictris.c: 153:     initialise_screen();
  1155  0020DE  ECDF  F011         	call	_initialise_screen	;wreg free
  1156                           
  1157                           ;pictris.c: 157:     choosescreen();
  1158  0020E2  EC1A  F009         	call	_choosescreen	;wreg free
  1159                           
  1160                           ;pictris.c: 159:     splash_screen();
  1161  0020E6  EC7D  F011         	call	_splash_screen	;wreg free
  1162                           
  1163                           ;pictris.c: 162:     rnd_initialize(get_mS());
  1164  0020EA  ECCA  F011         	call	_get_mS	;wreg free
  1165  0020EE  500C               	movf	?_get_mS,w,c
  1166  0020F0  ECC0  F011         	call	_rnd_initialize
  1167  0020F4                     l5241:
  1168                           
  1169                           ;pictris.c: 166:         mainGameLoop();
  1170  0020F4  ECF9  F00E         	call	_mainGameLoop	;wreg free
  1171  0020F8  D7FD               	goto	l5241
  1172  0020FA                     __end_of_main:
  1173                           	opt callstack 0
  1174                           
  1175 ;; *************** function _start_button *****************
  1176 ;; Defined at:
  1177 ;;		line 14 in file "buttons.c"
  1178 ;; Parameters:    Size  Location     Type
  1179 ;;		None
  1180 ;; Auto vars:     Size  Location     Type
  1181 ;;		None
  1182 ;; Return value:  Size  Location     Type
  1183 ;;                  1    wreg      void 
  1184 ;; Registers used:
  1185 ;;		wreg, status,2
  1186 ;; Tracked objects:
  1187 ;;		On entry : 0/0
  1188 ;;		On exit  : 0/0
  1189 ;;		Unchanged: 0/0
  1190 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1191 ;;      Params:         0       0       0       0       0       0       0
  1192 ;;      Locals:         0       0       0       0       0       0       0
  1193 ;;      Temps:          0       0       0       0       0       0       0
  1194 ;;      Totals:         0       0       0       0       0       0       0
  1195 ;;Total ram usage:        0 bytes
  1196 ;; Hardware stack levels used:    1
  1197 ;; Hardware stack levels required when called:    4
  1198 ;; This function calls:
  1199 ;;		Nothing
  1200 ;; This function is called by:
  1201 ;;		_main
  1202 ;; This function uses a non-reentrant model
  1203 ;;
  1204                           
  1205                           	psect	text1
  1206  00207C                     __ptext1:
  1207                           	opt callstack 0
  1208  00207C                     _start_button:
  1209                           	opt callstack 26
  1210                           
  1211                           ;buttons.c: 16:     Left_Delay = -1;
  1212                           
  1213                           ;incstack = 0
  1214  00207C  0100               	movlb	0	; () banked
  1215  00207E  69E6               	setf	_Left_Delay& (0+255),b	;volatile
  1216  002080  69E7               	setf	(_Left_Delay+1)& (0+255),b	;volatile
  1217                           
  1218                           ; BSR set to: 0
  1219                           ;buttons.c: 17:     Left_Debounced = 0;
  1220  002082  0E00               	movlw	0
  1221  002084  6E4E               	movwf	_Left_Debounced,c	;volatile
  1222                           
  1223                           ; BSR set to: 0
  1224                           ;buttons.c: 20:     Right_Delay = -1;
  1225  002086  69E4               	setf	_Right_Delay& (0+255),b	;volatile
  1226  002088  69E5               	setf	(_Right_Delay+1)& (0+255),b	;volatile
  1227                           
  1228                           ;buttons.c: 21:     Right_Debounced = 0;
  1229  00208A  0E00               	movlw	0
  1230  00208C  6E4D               	movwf	_Right_Debounced,c	;volatile
  1231                           
  1232                           ; BSR set to: 0
  1233                           ;buttons.c: 24:     Rotate_Delay = -1;
  1234  00208E  69E2               	setf	_Rotate_Delay& (0+255),b	;volatile
  1235  002090  69E3               	setf	(_Rotate_Delay+1)& (0+255),b	;volatile
  1236                           
  1237                           ;buttons.c: 25:     Rotate_Debounced = 0;
  1238  002092  0E00               	movlw	0
  1239  002094  6E4F               	movwf	_Rotate_Debounced,c	;volatile
  1240                           
  1241                           ;buttons.c: 29:     Down_Delay = 500;
  1242  002096  0E01               	movlw	1
  1243  002098  6FE1               	movwf	(_Down_Delay+1)& (0+255),b	;volatile
  1244  00209A  0EF4               	movlw	244
  1245  00209C  6FE0               	movwf	_Down_Delay& (0+255),b	;volatile
  1246                           
  1247                           ;buttons.c: 30:     Down_Debounced = 0;
  1248  00209E  0E00               	movlw	0
  1249  0020A0  6E4C               	movwf	_Down_Debounced,c	;volatile
  1250                           
  1251                           ;buttons.c: 31:     mtxButtons = 1;
  1252  0020A2  0E01               	movlw	1
  1253  0020A4  6E3A               	movwf	_mtxButtons,c	;volatile
  1254                           
  1255                           ; BSR set to: 0
  1256  0020A6  0012               	return		;funcret
  1257  0020A8                     __end_of_start_button:
  1258                           	opt callstack 0
  1259                           
  1260 ;; *************** function _splash_screen *****************
  1261 ;; Defined at:
  1262 ;;		line 122 in file "pictris.c"
  1263 ;; Parameters:    Size  Location     Type
  1264 ;;		None
  1265 ;; Auto vars:     Size  Location     Type
  1266 ;;		None
  1267 ;; Return value:  Size  Location     Type
  1268 ;;                  1    wreg      void 
  1269 ;; Registers used:
  1270 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1271 ;; Tracked objects:
  1272 ;;		On entry : 0/0
  1273 ;;		On exit  : 0/0
  1274 ;;		Unchanged: 0/0
  1275 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1276 ;;      Params:         0       0       0       0       0       0       0
  1277 ;;      Locals:         0       0       0       0       0       0       0
  1278 ;;      Temps:          0       0       0       0       0       0       0
  1279 ;;      Totals:         0       0       0       0       0       0       0
  1280 ;;Total ram usage:        0 bytes
  1281 ;; Hardware stack levels used:    1
  1282 ;; Hardware stack levels required when called:    8
  1283 ;; This function calls:
  1284 ;;		_snake_screen
  1285 ;;		_tetris_screen
  1286 ;;		_waitms
  1287 ;; This function is called by:
  1288 ;;		_main
  1289 ;; This function uses a non-reentrant model
  1290 ;;
  1291                           
  1292                           	psect	text2
  1293  0022FA                     __ptext2:
  1294                           	opt callstack 0
  1295  0022FA                     _splash_screen:
  1296                           	opt callstack 22
  1297                           
  1298                           ; BSR set to: 0
  1299                           ;incstack = 0
  1300  0022FA  EC9E  F011         	call	_tetris_screen	;wreg free
  1301                           
  1302                           ;pictris.c: 126:     waitms(3500);
  1303  0022FE  0E0D               	movlw	13
  1304  002300  6E0D               	movwf	waitms@t+1,c
  1305  002302  0EAC               	movlw	172
  1306  002304  6E0C               	movwf	waitms@t,c
  1307  002306  EC73  F011         	call	_waitms	;wreg free
  1308  00230A  0012               	return		;funcret
  1309  00230C                     __end_of_splash_screen:
  1310                           	opt callstack 0
  1311                           
  1312 ;; *************** function _waitms *****************
  1313 ;; Defined at:
  1314 ;;		line 19 in file "interrupt.c"
  1315 ;; Parameters:    Size  Location     Type
  1316 ;;  t               2   11[COMRAM] unsigned int 
  1317 ;; Auto vars:     Size  Location     Type
  1318 ;;		None
  1319 ;; Return value:  Size  Location     Type
  1320 ;;                  1    wreg      void 
  1321 ;; Registers used:
  1322 ;;		wreg, status,2, status,0
  1323 ;; Tracked objects:
  1324 ;;		On entry : 0/0
  1325 ;;		On exit  : 0/0
  1326 ;;		Unchanged: 0/0
  1327 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1328 ;;      Params:         2       0       0       0       0       0       0
  1329 ;;      Locals:         0       0       0       0       0       0       0
  1330 ;;      Temps:          0       0       0       0       0       0       0
  1331 ;;      Totals:         2       0       0       0       0       0       0
  1332 ;;Total ram usage:        2 bytes
  1333 ;; Hardware stack levels used:    1
  1334 ;; Hardware stack levels required when called:    4
  1335 ;; This function calls:
  1336 ;;		Nothing
  1337 ;; This function is called by:
  1338 ;;		_splash_screen
  1339 ;; This function uses a non-reentrant model
  1340 ;;
  1341                           
  1342                           	psect	text3
  1343  0022E6                     __ptext3:
  1344                           	opt callstack 0
  1345  0022E6                     _waitms:
  1346                           	opt callstack 25
  1347                           
  1348                           ;interrupt.c: 19: void waitms(unsigned t);interrupt.c: 20: {;interrupt.c: 21:     time =
      +                           t;
  1349                           
  1350                           ;incstack = 0
  1351  0022E6  C00C  F088         	movff	waitms@t,_time	;volatile
  1352  0022EA  C00D  F089         	movff	waitms@t+1,_time+1	;volatile
  1353  0022EE                     l3955:
  1354                           
  1355                           ;interrupt.c: 22:     while(time)
  1356  0022EE  0100               	movlb	0	; () banked
  1357  0022F0  5188               	movf	_time& (0+255),w,b	;volatile
  1358  0022F2  1189               	iorwf	(_time+1)& (0+255),w,b	;volatile
  1359  0022F4  B4D8               	btfsc	status,2,c
  1360  0022F6  0012               	return	
  1361  0022F8  D7FA               	goto	l3955
  1362  0022FA                     __end_of_waitms:
  1363                           	opt callstack 0
  1364                           
  1365 ;; *************** function _tetris_screen *****************
  1366 ;; Defined at:
  1367 ;;		line 48 in file "tetris.c"
  1368 ;; Parameters:    Size  Location     Type
  1369 ;;		None
  1370 ;; Auto vars:     Size  Location     Type
  1371 ;;		None
  1372 ;; Return value:  Size  Location     Type
  1373 ;;                  1    wreg      void 
  1374 ;; Registers used:
  1375 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1376 ;; Tracked objects:
  1377 ;;		On entry : 0/0
  1378 ;;		On exit  : 0/0
  1379 ;;		Unchanged: 0/0
  1380 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1381 ;;      Params:         0       0       0       0       0       0       0
  1382 ;;      Locals:         0       0       0       0       0       0       0
  1383 ;;      Temps:          0       0       0       0       0       0       0
  1384 ;;      Totals:         0       0       0       0       0       0       0
  1385 ;;Total ram usage:        0 bytes
  1386 ;; Hardware stack levels used:    1
  1387 ;; Hardware stack levels required when called:    7
  1388 ;; This function calls:
  1389 ;;		_set_screen
  1390 ;; This function is called by:
  1391 ;;		_splash_screen
  1392 ;; This function uses a non-reentrant model
  1393 ;;
  1394                           
  1395                           	psect	text4
  1396  00233C                     __ptext4:
  1397                           	opt callstack 0
  1398  00233C                     _tetris_screen:
  1399                           	opt callstack 22
  1400                           
  1401                           ;tetris.c: 49: set_screen(TETRIS);
  1402                           
  1403                           ; BSR set to: 0
  1404                           ;incstack = 0
  1405  00233C  0EE1               	movlw	low _TETRIS
  1406  00233E  6E13               	movwf	set_screen@newData,c
  1407  002340  0E06               	movlw	high _TETRIS
  1408  002342  6E14               	movwf	set_screen@newData+1,c
  1409  002344  EC73  F00A         	call	_set_screen	;wreg free
  1410  002348  0012               	return		;funcret
  1411  00234A                     __end_of_tetris_screen:
  1412                           	opt callstack 0
  1413                           
  1414 ;; *************** function _snake_screen *****************
  1415 ;; Defined at:
  1416 ;;		line 28 in file "snake.c"
  1417 ;; Parameters:    Size  Location     Type
  1418 ;;		None
  1419 ;; Auto vars:     Size  Location     Type
  1420 ;;		None
  1421 ;; Return value:  Size  Location     Type
  1422 ;;                  1    wreg      void 
  1423 ;; Registers used:
  1424 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  1425 ;; Tracked objects:
  1426 ;;		On entry : 0/0
  1427 ;;		On exit  : 0/0
  1428 ;;		Unchanged: 0/0
  1429 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1430 ;;      Params:         0       0       0       0       0       0       0
  1431 ;;      Locals:         0       0       0       0       0       0       0
  1432 ;;      Temps:          0       0       0       0       0       0       0
  1433 ;;      Totals:         0       0       0       0       0       0       0
  1434 ;;Total ram usage:        0 bytes
  1435 ;; Hardware stack levels used:    1
  1436 ;; Hardware stack levels required when called:    5
  1437 ;; This function calls:
  1438 ;;		_memcpyvol
  1439 ;; This function is called by:
  1440 ;;		_splash_screen
  1441 ;; This function uses a non-reentrant model
  1442 ;;
  1443                           
  1444                           	psect	text5
  1445  002232                     __ptext5:
  1446                           	opt callstack 0
  1447  002232                     _snake_screen:
  1448                           	opt callstack 24
  1449                           
  1450                           ;snake.c: 29:     memcpyvol(ObjectData,SNAKE,16);
  1451                           
  1452                           ;incstack = 0
  1453  002232  0ED0               	movlw	low _ObjectData
  1454  002234  6E0C               	movwf	memcpyvol@dest,c
  1455  002236  0E00               	movlw	high _ObjectData
  1456  002238  6E0D               	movwf	memcpyvol@dest+1,c
  1457  00223A  0ED1               	movlw	low _SNAKE
  1458  00223C  6E0E               	movwf	memcpyvol@src,c
  1459  00223E  0E06               	movlw	high _SNAKE
  1460  002240  6E0F               	movwf	memcpyvol@src+1,c
  1461  002242  0E00               	movlw	0
  1462  002244  6E11               	movwf	memcpyvol@n+1,c
  1463  002246  0E10               	movlw	16
  1464  002248  6E10               	movwf	memcpyvol@n,c
  1465  00224A  EC7C  F00E         	call	_memcpyvol	;wreg free
  1466  00224E  0012               	return		;funcret
  1467  002250                     __end_of_snake_screen:
  1468                           	opt callstack 0
  1469                           
  1470 ;; *************** function _rnd_initialize *****************
  1471 ;; Defined at:
  1472 ;;		line 34 in file "randgen.c"
  1473 ;; Parameters:    Size  Location     Type
  1474 ;;  input           1    wreg     unsigned char 
  1475 ;; Auto vars:     Size  Location     Type
  1476 ;;  input           1   11[COMRAM] unsigned char 
  1477 ;; Return value:  Size  Location     Type
  1478 ;;                  1    wreg      void 
  1479 ;; Registers used:
  1480 ;;		wreg
  1481 ;; Tracked objects:
  1482 ;;		On entry : 0/0
  1483 ;;		On exit  : 0/0
  1484 ;;		Unchanged: 0/0
  1485 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1486 ;;      Params:         0       0       0       0       0       0       0
  1487 ;;      Locals:         1       0       0       0       0       0       0
  1488 ;;      Temps:          0       0       0       0       0       0       0
  1489 ;;      Totals:         1       0       0       0       0       0       0
  1490 ;;Total ram usage:        1 bytes
  1491 ;; Hardware stack levels used:    1
  1492 ;; Hardware stack levels required when called:    4
  1493 ;; This function calls:
  1494 ;;		Nothing
  1495 ;; This function is called by:
  1496 ;;		_main
  1497 ;; This function uses a non-reentrant model
  1498 ;;
  1499                           
  1500                           	psect	text6
  1501  002380                     __ptext6:
  1502                           	opt callstack 0
  1503  002380                     _rnd_initialize:
  1504                           	opt callstack 26
  1505                           
  1506                           ;incstack = 0
  1507                           ;rnd_initialize@input stored from wreg
  1508  002380  6E0C               	movwf	rnd_initialize@input,c
  1509                           
  1510                           ;randgen.c: 34: void rnd_initialize(uint8_t input);randgen.c: 35: {;randgen.c: 39:     _
      +                          lfsr = input;
  1511  002382  C00C  F036         	movff	rnd_initialize@input,__lfsr
  1512  002386  6A37               	clrf	__lfsr+1,c
  1513  002388  0012               	return		;funcret
  1514  00238A                     __end_of_rnd_initialize:
  1515                           	opt callstack 0
  1516                           
  1517 ;; *************** function _mainGameLoop *****************
  1518 ;; Defined at:
  1519 ;;		line 129 in file "pictris.c"
  1520 ;; Parameters:    Size  Location     Type
  1521 ;;		None
  1522 ;; Auto vars:     Size  Location     Type
  1523 ;;		None
  1524 ;; Return value:  Size  Location     Type
  1525 ;;                  1    wreg      void 
  1526 ;; Registers used:
  1527 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1528 ;; Tracked objects:
  1529 ;;		On entry : 0/0
  1530 ;;		On exit  : 0/0
  1531 ;;		Unchanged: 0/0
  1532 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1533 ;;      Params:         0       0       0       0       0       0       0
  1534 ;;      Locals:         0       0       0       0       0       0       0
  1535 ;;      Temps:          0       0       0       0       0       0       0
  1536 ;;      Totals:         0       0       0       0       0       0       0
  1537 ;;Total ram usage:        0 bytes
  1538 ;; Hardware stack levels used:    1
  1539 ;; Hardware stack levels required when called:   10
  1540 ;; This function calls:
  1541 ;;		_clearArray
  1542 ;;		_initialise_globals
  1543 ;;		_pauseMultiplexing
  1544 ;;		_resumeMultiplexing
  1545 ;;		_snake_main
  1546 ;;		_tetris_main
  1547 ;; This function is called by:
  1548 ;;		_main
  1549 ;; This function uses a non-reentrant model
  1550 ;;
  1551                           
  1552                           	psect	text7
  1553  001DF2                     __ptext7:
  1554                           	opt callstack 0
  1555  001DF2                     _mainGameLoop:
  1556                           	opt callstack 20
  1557                           
  1558                           ;pictris.c: 132:     pauseMultiplexing();
  1559                           
  1560                           ;incstack = 0
  1561  001DF2  EC96  F011         	call	_pauseMultiplexing	;wreg free
  1562                           
  1563                           ;pictris.c: 133:     initialise_globals();
  1564  001DF6  ECF4  F00F         	call	_initialise_globals	;wreg free
  1565                           
  1566                           ;pictris.c: 134:     resumeMultiplexing();
  1567  001DFA  ECE2  F011         	call	_resumeMultiplexing	;wreg free
  1568                           
  1569                           ;pictris.c: 135:     clearArray(ObjectData,8);
  1570  001DFE  0ED0               	movlw	low _ObjectData
  1571  001E00  6E0C               	movwf	clearArray@pArray,c
  1572  001E02  0E00               	movlw	high _ObjectData
  1573  001E04  6E0D               	movwf	clearArray@pArray+1,c
  1574  001E06  0E00               	movlw	0
  1575  001E08  6E0F               	movwf	clearArray@size+1,c
  1576  001E0A  0E08               	movlw	8
  1577  001E0C  6E0E               	movwf	clearArray@size,c
  1578  001E0E  EC9E  F00F         	call	_clearArray	;wreg free
  1579                           
  1580                           ;pictris.c: 136:     clearArray(BackgroundData,8);
  1581  001E12  0EC0               	movlw	low _BackgroundData
  1582  001E14  6E0C               	movwf	clearArray@pArray,c
  1583  001E16  0E00               	movlw	high _BackgroundData
  1584  001E18  6E0D               	movwf	clearArray@pArray+1,c
  1585  001E1A  0E00               	movlw	0
  1586  001E1C  6E0F               	movwf	clearArray@size+1,c
  1587  001E1E  0E08               	movlw	8
  1588  001E20  6E0E               	movwf	clearArray@size,c
  1589  001E22  EC9E  F00F         	call	_clearArray	;wreg free
  1590                           
  1591                           ;pictris.c: 138:     if (1){
  1592  001E26  0EB0               	movlw	low _tmpObjectData
  1593  001E28  6E0C               	movwf	clearArray@pArray,c
  1594  001E2A  0E00               	movlw	high _tmpObjectData
  1595  001E2C  6E0D               	movwf	clearArray@pArray+1,c
  1596  001E2E  0E00               	movlw	0
  1597  001E30  6E0F               	movwf	clearArray@size+1,c
  1598  001E32  0E08               	movlw	8
  1599  001E34  6E0E               	movwf	clearArray@size,c
  1600  001E36  EC9E  F00F         	call	_clearArray	;wreg free
  1601                           
  1602                           ;pictris.c: 139:        tetris_main();
  1603  001E3A  EC98  F009         	call	_tetris_main	;wreg free
  1604                           
  1605                           ;pictris.c: 140:     }
  1606  001E3E  0012               	return		;funcret
  1607  001E40                     __end_of_mainGameLoop:
  1608                           	opt callstack 0
  1609                           
  1610 ;; *************** function _tetris_main *****************
  1611 ;; Defined at:
  1612 ;;		line 365 in file "tetris.c"
  1613 ;; Parameters:    Size  Location     Type
  1614 ;;		None
  1615 ;; Auto vars:     Size  Location     Type
  1616 ;;  newScreen       1   50[COMRAM] _Bool 
  1617 ;;  LastHighScor    1   49[COMRAM] unsigned char 
  1618 ;; Return value:  Size  Location     Type
  1619 ;;                  1    wreg      void 
  1620 ;; Registers used:
  1621 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1622 ;; Tracked objects:
  1623 ;;		On entry : 0/0
  1624 ;;		On exit  : 0/0
  1625 ;;		Unchanged: 0/0
  1626 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1627 ;;      Params:         0       0       0       0       0       0       0
  1628 ;;      Locals:         5       0       0       0       0       0       0
  1629 ;;      Temps:          0       0       0       0       0       0       0
  1630 ;;      Totals:         5       0       0       0       0       0       0
  1631 ;;Total ram usage:        5 bytes
  1632 ;; Hardware stack levels used:    1
  1633 ;; Hardware stack levels required when called:    9
  1634 ;; This function calls:
  1635 ;;		_checkForLines
  1636 ;;		_initialise_tetris
  1637 ;;		_mergeObjects
  1638 ;;		_moveObjectDown
  1639 ;;		_readHighScore
  1640 ;;		_selectNextObject
  1641 ;;		_set_screen
  1642 ;;		_show_score
  1643 ;;		_tetris_buttons
  1644 ;;		_writeHighScore
  1645 ;; This function is called by:
  1646 ;;		_mainGameLoop
  1647 ;; This function uses a non-reentrant model
  1648 ;;
  1649                           
  1650                           	psect	text8
  1651  001330                     __ptext8:
  1652                           	opt callstack 0
  1653  001330                     _tetris_main:
  1654                           	opt callstack 20
  1655                           
  1656                           ;tetris.c: 366:     initialise_tetris();
  1657                           
  1658                           ;incstack = 0
  1659  001330  EC08  F011         	call	_initialise_tetris	;wreg free
  1660                           
  1661                           ;tetris.c: 367:     uint8_t LastHighScore = readHighScore(0);
  1662  001334  0E00               	movlw	0
  1663  001336  ECB9  F010         	call	_readHighScore
  1664  00133A  6E32               	movwf	tetris_main@LastHighScore,c
  1665                           
  1666                           ;tetris.c: 368:     show_score(LastHighScore);
  1667  00133C  5032               	movf	tetris_main@LastHighScore,w,c
  1668  00133E  ECBC  F005         	call	_show_score
  1669                           
  1670                           ;tetris.c: 369:     EndOfGame = 0;
  1671  001342  0E00               	movlw	0
  1672  001344  6E4A               	movwf	_EndOfGame,c	;volatile
  1673                           
  1674                           ;tetris.c: 370:     selectNextObject(ObjectData);
  1675  001346  0ED0               	movlw	low _ObjectData
  1676  001348  6E16               	movwf	selectNextObject@pTarget,c
  1677  00134A  0E00               	movlw	high _ObjectData
  1678  00134C  6E17               	movwf	selectNextObject@pTarget+1,c
  1679  00134E  ECFD  F006         	call	_selectNextObject	;wreg free
  1680                           
  1681                           ;tetris.c: 371:     set_screen(ObjectData);
  1682  001352  0ED0               	movlw	low _ObjectData
  1683  001354  6E13               	movwf	set_screen@newData,c
  1684  001356  0E00               	movlw	high _ObjectData
  1685  001358  6E14               	movwf	set_screen@newData+1,c
  1686  00135A  EC73  F00A         	call	_set_screen	;wreg free
  1687  00135E                     l5101:
  1688                           
  1689                           ;tetris.c: 373:         _Bool newScreen;;tetris.c: 374:         newScreen = tetris_butto
      +                          ns() || newScreen;
  1690  00135E  0E01               	movlw	1
  1691  001360  6E2F               	movwf	_tetris_main$635,c
  1692  001362  EC50  F00E         	call	_tetris_buttons	;wreg free
  1693  001366  0900               	iorlw	0
  1694  001368  A4D8               	btfss	status,2,c
  1695  00136A  D005               	goto	l355
  1696  00136C  5033               	movf	tetris_main@newScreen,w,c
  1697  00136E  A4D8               	btfss	status,2,c
  1698  001370  D002               	goto	l355
  1699  001372  0E00               	movlw	0
  1700  001374  6E2F               	movwf	_tetris_main$635,c
  1701  001376                     l355:
  1702  001376  502F               	movf	_tetris_main$635,w,c
  1703  001378  B4D8               	btfsc	status,2,c
  1704  00137A  D002               	goto	u4820
  1705  00137C  0E01               	movlw	1
  1706  00137E  D001               	goto	u4830
  1707  001380                     u4820:
  1708  001380  0E00               	movlw	0
  1709  001382                     u4830:
  1710  001382  6E33               	movwf	tetris_main@newScreen,c
  1711                           
  1712                           ;tetris.c: 375:         if (DropObject)
  1713  001384  5044               	movf	_DropObject,w,c	;volatile
  1714  001386  B4D8               	btfsc	status,2,c
  1715  001388  D00A               	goto	l356
  1716                           
  1717                           ;tetris.c: 376:         {;tetris.c: 377:             DropObject = 0;
  1718  00138A  0E00               	movlw	0
  1719  00138C  6E44               	movwf	_DropObject,c	;volatile
  1720                           
  1721                           ;tetris.c: 378:             moveObjectDown(ObjectData);
  1722  00138E  0ED0               	movlw	low _ObjectData
  1723  001390  6E25               	movwf	moveObjectDown@pObject,c
  1724  001392  0E00               	movlw	high _ObjectData
  1725  001394  6E26               	movwf	moveObjectDown@pObject+1,c
  1726  001396  EC08  F00A         	call	_moveObjectDown	;wreg free
  1727  00139A  0E01               	movlw	1
  1728  00139C  6E33               	movwf	tetris_main@newScreen,c
  1729  00139E                     l356:
  1730                           
  1731                           ;tetris.c: 381:         if (CheckForNewLines)
  1732  00139E  5046               	movf	_CheckForNewLines,w,c
  1733  0013A0  B4D8               	btfsc	status,2,c
  1734  0013A2  D008               	goto	l359
  1735                           
  1736                           ;tetris.c: 382:         {;tetris.c: 383:             checkForLines(BackgroundData);
  1737  0013A4  0EC0               	movlw	low _BackgroundData
  1738  0013A6  6E23               	movwf	checkForLines@pObject,c
  1739  0013A8  0E00               	movlw	high _BackgroundData
  1740  0013AA  6E24               	movwf	checkForLines@pObject+1,c
  1741  0013AC  EC12  F00C         	call	_checkForLines	;wreg free
  1742  0013B0  0E01               	movlw	1
  1743  0013B2  6E33               	movwf	tetris_main@newScreen,c
  1744  0013B4                     l359:
  1745                           
  1746                           ;tetris.c: 386:         if (newScreen)
  1747  0013B4  5033               	movf	tetris_main@newScreen,w,c
  1748  0013B6  B4D8               	btfsc	status,2,c
  1749  0013B8  D020               	goto	l5137
  1750                           
  1751                           ;tetris.c: 387:         {;tetris.c: 388:             mergeObjects(BackgroundData, Screen
      +                          _Data, OVERRIDE);
  1752  0013BA  0EC0               	movlw	low _BackgroundData
  1753  0013BC  6E0C               	movwf	mergeObjects@pSource,c
  1754  0013BE  0E00               	movlw	high _BackgroundData
  1755  0013C0  6E0D               	movwf	mergeObjects@pSource+1,c
  1756  0013C2  0EA0               	movlw	low _Screen_Data
  1757  0013C4  6E0E               	movwf	mergeObjects@pTarget,c
  1758  0013C6  0E00               	movlw	high _Screen_Data
  1759  0013C8  6E0F               	movwf	mergeObjects@pTarget+1,c
  1760  0013CA  0E00               	movlw	0
  1761  0013CC  6E10               	movwf	mergeObjects@mode,c
  1762  0013CE  EC13  F008         	call	_mergeObjects	;wreg free
  1763                           
  1764                           ;tetris.c: 389:             mergeObjects(ObjectData, Screen_Data, MERGE);
  1765  0013D2  0ED0               	movlw	low _ObjectData
  1766  0013D4  6E0C               	movwf	mergeObjects@pSource,c
  1767  0013D6  0E00               	movlw	high _ObjectData
  1768  0013D8  6E0D               	movwf	mergeObjects@pSource+1,c
  1769  0013DA  0EA0               	movlw	low _Screen_Data
  1770  0013DC  6E0E               	movwf	mergeObjects@pTarget,c
  1771  0013DE  0E00               	movlw	high _Screen_Data
  1772  0013E0  6E0F               	movwf	mergeObjects@pTarget+1,c
  1773  0013E2  0E01               	movlw	1
  1774  0013E4  6E10               	movwf	mergeObjects@mode,c
  1775  0013E6  EC13  F008         	call	_mergeObjects	;wreg free
  1776                           
  1777                           ;tetris.c: 390:             set_screen(Screen_Data);
  1778  0013EA  0EA0               	movlw	low _Screen_Data
  1779  0013EC  6E13               	movwf	set_screen@newData,c
  1780  0013EE  0E00               	movlw	high _Screen_Data
  1781  0013F0  6E14               	movwf	set_screen@newData+1,c
  1782  0013F2  EC73  F00A         	call	_set_screen	;wreg free
  1783                           
  1784                           ;tetris.c: 391:             newScreen = 0;
  1785  0013F6  0E00               	movlw	0
  1786  0013F8  6E33               	movwf	tetris_main@newScreen,c
  1787  0013FA                     l5137:
  1788                           
  1789                           ;tetris.c: 393:     } while (!EndOfGame);
  1790  0013FA  504A               	movf	_EndOfGame,w,c	;volatile
  1791  0013FC  B4D8               	btfsc	status,2,c
  1792  0013FE  D7AF               	goto	l5101
  1793                           
  1794                           ;tetris.c: 394:     writeHighScore(0, LastHighScore, NumberOfLines);
  1795  001400  C032  F00E         	movff	tetris_main@LastHighScore,writeHighScore@highscore
  1796  001404  C048  F00F         	movff	_NumberOfLines,writeHighScore@scored
  1797  001408  0E00               	movlw	0
  1798  00140A  EC68  F011         	call	_writeHighScore
  1799  00140E  0012               	return		;funcret
  1800  001410                     __end_of_tetris_main:
  1801                           	opt callstack 0
  1802                           
  1803 ;; *************** function _tetris_buttons *****************
  1804 ;; Defined at:
  1805 ;;		line 355 in file "tetris.c"
  1806 ;; Parameters:    Size  Location     Type
  1807 ;;		None
  1808 ;; Auto vars:     Size  Location     Type
  1809 ;;  returnbool      1   39[COMRAM] _Bool 
  1810 ;; Return value:  Size  Location     Type
  1811 ;;                  1    wreg      _Bool 
  1812 ;; Registers used:
  1813 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1814 ;; Tracked objects:
  1815 ;;		On entry : 0/0
  1816 ;;		On exit  : 0/0
  1817 ;;		Unchanged: 0/0
  1818 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1819 ;;      Params:         0       0       0       0       0       0       0
  1820 ;;      Locals:         1       0       0       0       0       0       0
  1821 ;;      Temps:          0       0       0       0       0       0       0
  1822 ;;      Totals:         1       0       0       0       0       0       0
  1823 ;;Total ram usage:        1 bytes
  1824 ;; Hardware stack levels used:    1
  1825 ;; Hardware stack levels required when called:    8
  1826 ;; This function calls:
  1827 ;;		_checkDown
  1828 ;;		_checkLeft
  1829 ;;		_checkRight
  1830 ;;		_checkUp
  1831 ;;		_tetris_button_down
  1832 ;;		_tetris_button_left
  1833 ;;		_tetris_button_right
  1834 ;;		_tetris_button_up
  1835 ;; This function is called by:
  1836 ;;		_tetris_main
  1837 ;; This function uses a non-reentrant model
  1838 ;;
  1839                           
  1840                           	psect	text9
  1841  001CA0                     __ptext9:
  1842                           	opt callstack 0
  1843  001CA0                     _tetris_buttons:
  1844                           	opt callstack 20
  1845                           
  1846                           ;tetris.c: 357:     _Bool returnbool = 0;
  1847                           
  1848                           ;incstack = 0
  1849  001CA0  0E00               	movlw	0
  1850  001CA2  6E28               	movwf	tetris_buttons@returnbool,c
  1851                           
  1852                           ;tetris.c: 358:     if(checkLeft(1)){ tetris_button_left(); returnbool = 1; }
  1853  001CA4  0E01               	movlw	1
  1854  001CA6  EC91  F010         	call	_checkLeft
  1855  001CAA  0900               	iorlw	0
  1856  001CAC  B4D8               	btfsc	status,2,c
  1857  001CAE  D004               	goto	l4921
  1858  001CB0  EC07  F00B         	call	_tetris_button_left	;wreg free
  1859  001CB4  0E01               	movlw	1
  1860  001CB6  6E28               	movwf	tetris_buttons@returnbool,c
  1861  001CB8                     l4921:
  1862                           
  1863                           ;tetris.c: 359:     if(checkRight(1)){ tetris_button_right(); returnbool = 1; }
  1864  001CB8  0E01               	movlw	1
  1865  001CBA  EC7D  F010         	call	_checkRight
  1866  001CBE  0900               	iorlw	0
  1867  001CC0  B4D8               	btfsc	status,2,c
  1868  001CC2  D004               	goto	l4927
  1869  001CC4  EC8E  F00B         	call	_tetris_button_right	;wreg free
  1870  001CC8  0E01               	movlw	1
  1871  001CCA  6E28               	movwf	tetris_buttons@returnbool,c
  1872  001CCC                     l4927:
  1873                           
  1874                           ;tetris.c: 360:     if(checkUp(1)){ tetris_button_up(); returnbool = 1; }
  1875  001CCC  0E01               	movlw	1
  1876  001CCE  ECCD  F010         	call	_checkUp
  1877  001CD2  0900               	iorlw	0
  1878  001CD4  B4D8               	btfsc	status,2,c
  1879  001CD6  D004               	goto	l4933
  1880  001CD8  ECC3  F00A         	call	_tetris_button_up	;wreg free
  1881  001CDC  0E01               	movlw	1
  1882  001CDE  6E28               	movwf	tetris_buttons@returnbool,c
  1883  001CE0                     l4933:
  1884                           
  1885                           ;tetris.c: 361:     if(checkDown(1)){ tetris_button_down(); returnbool = 1; }
  1886  001CE0  0E01               	movlw	1
  1887  001CE2  ECE1  F010         	call	_checkDown
  1888  001CE6  0900               	iorlw	0
  1889  001CE8  B4D8               	btfsc	status,2,c
  1890  001CEA  D004               	goto	l4939
  1891  001CEC  EC5D  F011         	call	_tetris_button_down	;wreg free
  1892  001CF0  0E01               	movlw	1
  1893  001CF2  6E28               	movwf	tetris_buttons@returnbool,c
  1894  001CF4                     l4939:
  1895                           
  1896                           ;tetris.c: 362:     return returnbool;
  1897  001CF4  5028               	movf	tetris_buttons@returnbool,w,c
  1898  001CF6  0012               	return		;funcret
  1899  001CF8                     __end_of_tetris_buttons:
  1900                           	opt callstack 0
  1901                           
  1902 ;; *************** function _tetris_button_up *****************
  1903 ;; Defined at:
  1904 ;;		line 305 in file "tetris.c"
  1905 ;; Parameters:    Size  Location     Type
  1906 ;;		None
  1907 ;; Auto vars:     Size  Location     Type
  1908 ;;		None
  1909 ;; Return value:  Size  Location     Type
  1910 ;;                  1    wreg      _Bool 
  1911 ;; Registers used:
  1912 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1913 ;; Tracked objects:
  1914 ;;		On entry : 0/0
  1915 ;;		On exit  : 0/0
  1916 ;;		Unchanged: 0/0
  1917 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1918 ;;      Params:         0       0       0       0       0       0       0
  1919 ;;      Locals:         0       0       0       0       0       0       0
  1920 ;;      Temps:          1       0       0       0       0       0       0
  1921 ;;      Totals:         1       0       0       0       0       0       0
  1922 ;;Total ram usage:        1 bytes
  1923 ;; Hardware stack levels used:    1
  1924 ;; Hardware stack levels required when called:    6
  1925 ;; This function calls:
  1926 ;;		_collisionDetect
  1927 ;;		_mergeObjects
  1928 ;;		_newRotation
  1929 ;;		_pauseMultiplexing
  1930 ;;		_pixelCount
  1931 ;;		_resumeMultiplexing
  1932 ;; This function is called by:
  1933 ;;		_tetris_buttons
  1934 ;; This function uses a non-reentrant model
  1935 ;;
  1936                           
  1937                           	psect	text10
  1938  001586                     __ptext10:
  1939                           	opt callstack 0
  1940  001586                     _tetris_button_up:
  1941                           	opt callstack 21
  1942                           
  1943                           ;tetris.c: 306:     if (game)
  1944                           
  1945                           ;incstack = 0
  1946  001586  5041               	movf	_game,w,c	;volatile
  1947  001588  B4D8               	btfsc	status,2,c
  1948  00158A  0012               	return	
  1949                           
  1950                           ;tetris.c: 307:     {;tetris.c: 308:         newRotation(ObjectData, tmpObjectData, CW);
  1951  00158C  0ED0               	movlw	low _ObjectData
  1952  00158E  6E16               	movwf	newRotation@pSource,c
  1953  001590  0E00               	movlw	high _ObjectData
  1954  001592  6E17               	movwf	newRotation@pSource+1,c
  1955  001594  0EB0               	movlw	low _tmpObjectData
  1956  001596  6E18               	movwf	newRotation@pTarget,c
  1957  001598  0E00               	movlw	high _tmpObjectData
  1958  00159A  6E19               	movwf	newRotation@pTarget+1,c
  1959  00159C  0E01               	movlw	1
  1960  00159E  6E1A               	movwf	newRotation@rotation,c
  1961  0015A0  EC65  F006         	call	_newRotation	;wreg free
  1962                           
  1963                           ;tetris.c: 310:         if (pixelCount(ObjectData) == pixelCount(tmpObjectData))
  1964  0015A4  0ED0               	movlw	low _ObjectData
  1965  0015A6  6E0C               	movwf	pixelCount@pSource,c
  1966  0015A8  0E00               	movlw	high _ObjectData
  1967  0015AA  6E0D               	movwf	pixelCount@pSource+1,c
  1968  0015AC  ECB9  F00D         	call	_pixelCount	;wreg free
  1969  0015B0  6E26               	movwf	??_tetris_button_up& (0+255),c
  1970  0015B2  0EB0               	movlw	low _tmpObjectData
  1971  0015B4  6E0C               	movwf	pixelCount@pSource,c
  1972  0015B6  0E00               	movlw	high _tmpObjectData
  1973  0015B8  6E0D               	movwf	pixelCount@pSource+1,c
  1974  0015BA  ECB9  F00D         	call	_pixelCount	;wreg free
  1975  0015BE  1826               	xorwf	??_tetris_button_up,w,c
  1976  0015C0  A4D8               	btfss	status,2,c
  1977  0015C2  0012               	return	
  1978                           
  1979                           ;tetris.c: 311:         {;tetris.c: 313:             if (!collisionDetect(tmpObjectData,
      +                           BackgroundData))
  1980  0015C4  0EB0               	movlw	low _tmpObjectData
  1981  0015C6  6E0C               	movwf	collisionDetect@pSource,c
  1982  0015C8  0E00               	movlw	high _tmpObjectData
  1983  0015CA  6E0D               	movwf	collisionDetect@pSource+1,c
  1984  0015CC  0EC0               	movlw	low _BackgroundData
  1985  0015CE  6E0E               	movwf	collisionDetect@pTarget,c
  1986  0015D0  0E00               	movlw	high _BackgroundData
  1987  0015D2  6E0F               	movwf	collisionDetect@pTarget+1,c
  1988  0015D4  ECEE  F00D         	call	_collisionDetect	;wreg free
  1989  0015D8  0900               	iorlw	0
  1990  0015DA  A4D8               	btfss	status,2,c
  1991  0015DC  0012               	return	
  1992                           
  1993                           ;tetris.c: 314:             {;tetris.c: 317:                 pauseMultiplexing();
  1994  0015DE  EC96  F011         	call	_pauseMultiplexing	;wreg free
  1995                           
  1996                           ;tetris.c: 319:                 mergeObjects(tmpObjectData, ObjectData, OVERRIDE);
  1997  0015E2  0EB0               	movlw	low _tmpObjectData
  1998  0015E4  6E0C               	movwf	mergeObjects@pSource,c
  1999  0015E6  0E00               	movlw	high _tmpObjectData
  2000  0015E8  6E0D               	movwf	mergeObjects@pSource+1,c
  2001  0015EA  0ED0               	movlw	low _ObjectData
  2002  0015EC  6E0E               	movwf	mergeObjects@pTarget,c
  2003  0015EE  0E00               	movlw	high _ObjectData
  2004  0015F0  6E0F               	movwf	mergeObjects@pTarget+1,c
  2005  0015F2  0E00               	movlw	0
  2006  0015F4  6E10               	movwf	mergeObjects@mode,c
  2007  0015F6  EC13  F008         	call	_mergeObjects	;wreg free
  2008                           
  2009                           ;tetris.c: 320:                 resumeMultiplexing();
  2010  0015FA  ECE2  F011         	call	_resumeMultiplexing	;wreg free
  2011                           
  2012                           ;tetris.c: 321:                 IsRotated = !IsRotated;
  2013  0015FE  5047               	movf	_IsRotated,w,c
  2014  001600  A4D8               	btfss	status,2,c
  2015  001602  D002               	goto	u4380
  2016  001604  0E01               	movlw	1
  2017  001606  D001               	goto	u4390
  2018  001608                     u4380:
  2019  001608  0E00               	movlw	0
  2020  00160A                     u4390:
  2021  00160A  6E47               	movwf	_IsRotated,c
  2022  00160C  0012               	return	
  2023  00160E                     __end_of_tetris_button_up:
  2024                           	opt callstack 0
  2025                           
  2026 ;; *************** function _pixelCount *****************
  2027 ;; Defined at:
  2028 ;;		line 166 in file "shared_logic.c"
  2029 ;; Parameters:    Size  Location     Type
  2030 ;;  pSource         2   11[COMRAM] PTR volatile unsigned sh
  2031 ;;		 -> tmpObjectData(16), ObjectData(16), 
  2032 ;; Auto vars:     Size  Location     Type
  2033 ;;  y               1   22[COMRAM] unsigned char 
  2034 ;;  x               1   21[COMRAM] unsigned char 
  2035 ;;  r               1   20[COMRAM] unsigned char 
  2036 ;; Return value:  Size  Location     Type
  2037 ;;                  1    wreg      unsigned char 
  2038 ;; Registers used:
  2039 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  2040 ;; Tracked objects:
  2041 ;;		On entry : 0/0
  2042 ;;		On exit  : 0/0
  2043 ;;		Unchanged: 0/0
  2044 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2045 ;;      Params:         2       0       0       0       0       0       0
  2046 ;;      Locals:         3       0       0       0       0       0       0
  2047 ;;      Temps:          7       0       0       0       0       0       0
  2048 ;;      Totals:        12       0       0       0       0       0       0
  2049 ;;Total ram usage:       12 bytes
  2050 ;; Hardware stack levels used:    1
  2051 ;; Hardware stack levels required when called:    4
  2052 ;; This function calls:
  2053 ;;		Nothing
  2054 ;; This function is called by:
  2055 ;;		_tetris_button_up
  2056 ;; This function uses a non-reentrant model
  2057 ;;
  2058                           
  2059                           	psect	text11
  2060  001B72                     __ptext11:
  2061                           	opt callstack 0
  2062  001B72                     _pixelCount:
  2063                           	opt callstack 22
  2064                           
  2065                           ;shared_logic.c: 166: uint8_t pixelCount(volatile uint16_t * pSource);shared_logic.c: 16
      +                          7: {;shared_logic.c: 168:     uint8_t r = 0, x, y;
  2066                           
  2067                           ;incstack = 0
  2068  001B72  0E00               	movlw	0
  2069  001B74  6E15               	movwf	pixelCount@r,c
  2070                           
  2071                           ;shared_logic.c: 170:     for (x = 0; x < 8; x++)
  2072  001B76  0E00               	movlw	0
  2073  001B78  6E16               	movwf	pixelCount@x,c
  2074  001B7A                     l3343:
  2075                           
  2076                           ;shared_logic.c: 171:         for (y = 0; y < 16; y++)
  2077  001B7A  0E00               	movlw	0
  2078  001B7C  6E17               	movwf	pixelCount@y,c
  2079  001B7E                     l3349:
  2080                           
  2081                           ;shared_logic.c: 172:             if (pSource[x] & (1<<y))
  2082  001B7E  5016               	movf	pixelCount@x,w,c
  2083  001B80  0D02               	mullw	2
  2084  001B82  CFF3 F00E          	movff	prodl,??_pixelCount
  2085  001B86  CFF4 F00F          	movff	prodh,??_pixelCount+1
  2086  001B8A  500E               	movf	??_pixelCount,w,c
  2087  001B8C  240C               	addwf	pixelCount@pSource,w,c
  2088  001B8E  6ED9               	movwf	fsr2l,c
  2089  001B90  500F               	movf	??_pixelCount+1,w,c
  2090  001B92  200D               	addwfc	pixelCount@pSource+1,w,c
  2091  001B94  6EDA               	movwf	fsr2h,c
  2092  001B96  CFDE F010          	movff	postinc2,??_pixelCount+2
  2093  001B9A  CFDD F011          	movff	postdec2,??_pixelCount+3
  2094  001B9E  C017  F012         	movff	pixelCount@y,??_pixelCount+4
  2095  001BA2  0E01               	movlw	1
  2096  001BA4  6E13               	movwf	(??_pixelCount+5)& (0+255),c
  2097  001BA6  0E00               	movlw	0
  2098  001BA8  6E14               	movwf	(??_pixelCount+6)& (0+255),c
  2099  001BAA  2A12               	incf	??_pixelCount+4,f,c
  2100  001BAC  D003               	goto	u2434
  2101  001BAE                     u2435:
  2102  001BAE  90D8               	bcf	status,0,c
  2103  001BB0  3613               	rlcf	??_pixelCount+5,f,c
  2104  001BB2  3614               	rlcf	??_pixelCount+6,f,c
  2105  001BB4                     u2434:
  2106  001BB4  2E12               	decfsz	??_pixelCount+4,f,c
  2107  001BB6  D7FB               	goto	u2435
  2108  001BB8  5010               	movf	??_pixelCount+2,w,c
  2109  001BBA  1613               	andwf	??_pixelCount+5,f,c
  2110  001BBC  5011               	movf	??_pixelCount+3,w,c
  2111  001BBE  1614               	andwf	??_pixelCount+6,f,c
  2112  001BC0  5013               	movf	??_pixelCount+5,w,c
  2113  001BC2  1014               	iorwf	??_pixelCount+6,w,c
  2114  001BC4  A4D8               	btfss	status,2,c
  2115                           
  2116                           ;shared_logic.c: 173:                 r++;
  2117  001BC6  2A15               	incf	pixelCount@r,f,c
  2118  001BC8  2A17               	incf	pixelCount@y,f,c
  2119  001BCA  0E0F               	movlw	15
  2120  001BCC  6417               	cpfsgt	pixelCount@y,c
  2121  001BCE  D7D7               	goto	l3349
  2122  001BD0  2A16               	incf	pixelCount@x,f,c
  2123  001BD2  0E07               	movlw	7
  2124  001BD4  6416               	cpfsgt	pixelCount@x,c
  2125  001BD6  D7D1               	goto	l3343
  2126                           
  2127                           ;shared_logic.c: 174:     return r;
  2128  001BD8  5015               	movf	pixelCount@r,w,c
  2129  001BDA  0012               	return		;funcret
  2130  001BDC                     __end_of_pixelCount:
  2131                           	opt callstack 0
  2132                           
  2133 ;; *************** function _newRotation *****************
  2134 ;; Defined at:
  2135 ;;		line 153 in file "tetris.c"
  2136 ;; Parameters:    Size  Location     Type
  2137 ;;  pSource         2   21[COMRAM] PTR volatile unsigned sh
  2138 ;;		 -> ObjectData(16), 
  2139 ;;  pTarget         2   23[COMRAM] PTR unsigned short 
  2140 ;;		 -> tmpObjectData(16), 
  2141 ;;  rotation        1   25[COMRAM] enum E2584
  2142 ;; Auto vars:     Size  Location     Type
  2143 ;;  y1              1   36[COMRAM] unsigned char 
  2144 ;;  x1              1   35[COMRAM] unsigned char 
  2145 ;;  y2              1   34[COMRAM] char 
  2146 ;;  x2              1   33[COMRAM] char 
  2147 ;; Return value:  Size  Location     Type
  2148 ;;                  1    wreg      void 
  2149 ;; Registers used:
  2150 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2151 ;; Tracked objects:
  2152 ;;		On entry : 0/0
  2153 ;;		On exit  : 0/0
  2154 ;;		Unchanged: 0/0
  2155 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2156 ;;      Params:         5       0       0       0       0       0       0
  2157 ;;      Locals:         4       0       0       0       0       0       0
  2158 ;;      Temps:          7       0       0       0       0       0       0
  2159 ;;      Totals:        16       0       0       0       0       0       0
  2160 ;;Total ram usage:       16 bytes
  2161 ;; Hardware stack levels used:    1
  2162 ;; Hardware stack levels required when called:    5
  2163 ;; This function calls:
  2164 ;;		___wmul
  2165 ;;		_clearArray
  2166 ;;		_memcpyvol
  2167 ;; This function is called by:
  2168 ;;		_tetris_button_up
  2169 ;; This function uses a non-reentrant model
  2170 ;;
  2171                           
  2172                           	psect	text12
  2173  000CCA                     __ptext12:
  2174                           	opt callstack 0
  2175  000CCA                     _newRotation:
  2176                           	opt callstack 21
  2177                           
  2178                           ;tetris.c: 153: void newRotation(volatile uint16_t * pSource, uint16_t * pTarget, rotati
      +                          on_t rotation);tetris.c: 154: {;tetris.c: 155:     int8_t x2, y2;;tetris.c: 156:     uin
      +                          t8_t x1, y1;;tetris.c: 159:     if (LimitedRotation == 2)
  2179                           
  2180                           ;incstack = 0
  2181  000CCA  0E02               	movlw	2
  2182  000CCC  1849               	xorwf	_LimitedRotation,w,c
  2183  000CCE  A4D8               	btfss	status,2,c
  2184  000CD0  D00F               	goto	l4613
  2185                           
  2186                           ;tetris.c: 160:         memcpyvol(pTarget, pSource, 16);
  2187  000CD2  C018  F00C         	movff	newRotation@pTarget,memcpyvol@dest
  2188  000CD6  C019  F00D         	movff	newRotation@pTarget+1,memcpyvol@dest+1
  2189  000CDA  C016  F00E         	movff	newRotation@pSource,memcpyvol@src
  2190  000CDE  C017  F00F         	movff	newRotation@pSource+1,memcpyvol@src+1
  2191  000CE2  0E00               	movlw	0
  2192  000CE4  6E11               	movwf	memcpyvol@n+1,c
  2193  000CE6  0E10               	movlw	16
  2194  000CE8  6E10               	movwf	memcpyvol@n,c
  2195  000CEA  EC7C  F00E         	call	_memcpyvol	;wreg free
  2196  000CEE  0012               	return	
  2197  000CF0                     l4613:
  2198                           
  2199                           ;tetris.c: 162:     {;tetris.c: 164:         clearArray(pTarget, 8);
  2200  000CF0  C018  F00C         	movff	newRotation@pTarget,clearArray@pArray
  2201  000CF4  C019  F00D         	movff	newRotation@pTarget+1,clearArray@pArray+1
  2202  000CF8  0E00               	movlw	0
  2203  000CFA  6E0F               	movwf	clearArray@size+1,c
  2204  000CFC  0E08               	movlw	8
  2205  000CFE  6E0E               	movwf	clearArray@size,c
  2206  000D00  EC9E  F00F         	call	_clearArray	;wreg free
  2207                           
  2208                           ;tetris.c: 169:         if (LimitedRotation == 1 && IsRotated)
  2209  000D04  0449               	decf	_LimitedRotation,w,c
  2210  000D06  A4D8               	btfss	status,2,c
  2211  000D08  D005               	goto	l276
  2212  000D0A  5047               	movf	_IsRotated,w,c
  2213  000D0C  B4D8               	btfsc	status,2,c
  2214  000D0E  D002               	goto	l276
  2215                           
  2216                           ;tetris.c: 170:             rotation = CCW;
  2217  000D10  0E00               	movlw	0
  2218  000D12  6E1A               	movwf	newRotation@rotation,c
  2219  000D14                     l276:
  2220                           
  2221                           ;tetris.c: 172:         for (x1 = 0; x1 < 8; x1++)
  2222  000D14  0E00               	movlw	0
  2223  000D16  6E24               	movwf	newRotation@x1,c
  2224  000D18                     l4625:
  2225                           
  2226                           ;tetris.c: 173:             for (y1 = 0; y1 < 16; y1++)
  2227  000D18  0E00               	movlw	0
  2228  000D1A  6E25               	movwf	newRotation@y1,c
  2229  000D1C                     l4631:
  2230                           
  2231                           ;tetris.c: 174:             {;tetris.c: 175:                 if (pSource[x1] & (1<<y1))
  2232  000D1C  5024               	movf	newRotation@x1,w,c
  2233  000D1E  0D02               	mullw	2
  2234  000D20  CFF3 F01B          	movff	prodl,??_newRotation
  2235  000D24  CFF4 F01C          	movff	prodh,??_newRotation+1
  2236  000D28  501B               	movf	??_newRotation,w,c
  2237  000D2A  2416               	addwf	newRotation@pSource,w,c
  2238  000D2C  6ED9               	movwf	fsr2l,c
  2239  000D2E  501C               	movf	??_newRotation+1,w,c
  2240  000D30  2017               	addwfc	newRotation@pSource+1,w,c
  2241  000D32  6EDA               	movwf	fsr2h,c
  2242  000D34  CFDE F01D          	movff	postinc2,??_newRotation+2
  2243  000D38  CFDD F01E          	movff	postdec2,??_newRotation+3
  2244  000D3C  C025  F01F         	movff	newRotation@y1,??_newRotation+4
  2245  000D40  0E01               	movlw	1
  2246  000D42  6E20               	movwf	(??_newRotation+5)& (0+255),c
  2247  000D44  0E00               	movlw	0
  2248  000D46  6E21               	movwf	(??_newRotation+6)& (0+255),c
  2249  000D48  2A1F               	incf	??_newRotation+4,f,c
  2250  000D4A  D003               	goto	u4094
  2251  000D4C                     u4095:
  2252  000D4C  90D8               	bcf	status,0,c
  2253  000D4E  3620               	rlcf	??_newRotation+5,f,c
  2254  000D50  3621               	rlcf	??_newRotation+6,f,c
  2255  000D52                     u4094:
  2256  000D52  2E1F               	decfsz	??_newRotation+4,f,c
  2257  000D54  D7FB               	goto	u4095
  2258  000D56  501D               	movf	??_newRotation+2,w,c
  2259  000D58  1620               	andwf	??_newRotation+5,f,c
  2260  000D5A  501E               	movf	??_newRotation+3,w,c
  2261  000D5C  1621               	andwf	??_newRotation+6,f,c
  2262  000D5E  5020               	movf	??_newRotation+5,w,c
  2263  000D60  1021               	iorwf	??_newRotation+6,w,c
  2264  000D62  B4D8               	btfsc	status,2,c
  2265  000D64  D041               	goto	l4647
  2266                           
  2267                           ;tetris.c: 176:                 {;tetris.c: 177:                     if (rotation == CW)
  2268  000D66  041A               	decf	newRotation@rotation,w,c
  2269  000D68  A4D8               	btfss	status,2,c
  2270  000D6A  D007               	goto	l4637
  2271                           
  2272                           ;tetris.c: 178:                     {;tetris.c: 179:                         x2 = Origin
      +                          X + OriginY - y1;
  2273  000D6C  5025               	movf	newRotation@y1,w,c
  2274  000D6E  5C43               	subwf	_OriginX,w,c
  2275  000D70  2442               	addwf	_OriginY,w,c
  2276  000D72  6E22               	movwf	newRotation@x2,c
  2277                           
  2278                           ;tetris.c: 180:                         y2 = x1 + OriginY - OriginX;
  2279  000D74  5043               	movf	_OriginX,w,c
  2280  000D76  5C24               	subwf	newRotation@x1,w,c
  2281  000D78  D006               	goto	L1
  2282  000D7A                     l4637:
  2283                           
  2284                           ;tetris.c: 183:                     {;tetris.c: 184:                         x2 = y1 + O
      +                          riginX - OriginY;
  2285  000D7A  5042               	movf	_OriginY,w,c
  2286  000D7C  5C25               	subwf	newRotation@y1,w,c
  2287  000D7E  2443               	addwf	_OriginX,w,c
  2288  000D80  6E22               	movwf	newRotation@x2,c
  2289                           
  2290                           ;tetris.c: 185:                         y2 = OriginX + OriginY - x1;
  2291  000D82  5024               	movf	newRotation@x1,w,c
  2292  000D84  5C43               	subwf	_OriginX,w,c
  2293  000D86                     L1:
  2294  000D86  2442               	addwf	_OriginY,w,c
  2295  000D88  6E23               	movwf	newRotation@y2,c
  2296                           
  2297                           ;tetris.c: 187:                     if (x2 >= 0 && x2 < 8 &&
  2298                           
  2299                           ;tetris.c: 186:                     }
  2300  000D8A  BE22               	btfsc	newRotation@x2,7,c
  2301  000D8C  D02D               	goto	l4647
  2302  000D8E  5022               	movf	newRotation@x2,w,c
  2303  000D90  0A80               	xorlw	128
  2304  000D92  0F78               	addlw	-136
  2305  000D94  A0D8               	btfss	status,0,c
  2306  000D96  BE23               	btfsc	newRotation@y2,7,c
  2307  000D98  D027               	goto	l4647
  2308  000D9A  5023               	movf	newRotation@y2,w,c
  2309  000D9C  0A80               	xorlw	128
  2310  000D9E  0F70               	addlw	-144
  2311  000DA0  B0D8               	btfsc	status,0,c
  2312  000DA2  D022               	goto	l4647
  2313                           
  2314                           ;tetris.c: 189:                         pTarget[x2] |= (1<<y2);
  2315  000DA4  C023  F01B         	movff	newRotation@y2,??_newRotation
  2316  000DA8  0E01               	movlw	1
  2317  000DAA  6E1C               	movwf	(??_newRotation+1)& (0+255),c
  2318  000DAC  0E00               	movlw	0
  2319  000DAE  6E1D               	movwf	(??_newRotation+2)& (0+255),c
  2320  000DB0  2A1B               	incf	??_newRotation,f,c
  2321  000DB2  D003               	goto	u4164
  2322  000DB4                     u4165:
  2323  000DB4  90D8               	bcf	status,0,c
  2324  000DB6  361C               	rlcf	??_newRotation+1,f,c
  2325  000DB8  361D               	rlcf	??_newRotation+2,f,c
  2326  000DBA                     u4164:
  2327  000DBA  2E1B               	decfsz	??_newRotation,f,c
  2328  000DBC  D7FB               	goto	u4165
  2329  000DBE  5022               	movf	newRotation@x2,w,c
  2330  000DC0  6E0C               	movwf	___wmul@multiplier,c
  2331  000DC2  6A0D               	clrf	___wmul@multiplier+1,c
  2332  000DC4  BE0C               	btfsc	___wmul@multiplier,7,c
  2333  000DC6  060D               	decf	___wmul@multiplier+1,f,c
  2334  000DC8  0E00               	movlw	0
  2335  000DCA  6E0F               	movwf	___wmul@multiplicand+1,c
  2336  000DCC  0E02               	movlw	2
  2337  000DCE  6E0E               	movwf	___wmul@multiplicand,c
  2338  000DD0  ECF5  F010         	call	___wmul	;wreg free
  2339  000DD4  500C               	movf	?___wmul,w,c
  2340  000DD6  2418               	addwf	newRotation@pTarget,w,c
  2341  000DD8  6ED9               	movwf	fsr2l,c
  2342  000DDA  500D               	movf	?___wmul+1,w,c
  2343  000DDC  2019               	addwfc	newRotation@pTarget+1,w,c
  2344  000DDE  6EDA               	movwf	fsr2h,c
  2345  000DE0  501C               	movf	??_newRotation+1,w,c
  2346  000DE2  12DE               	iorwf	postinc2,f,c
  2347  000DE4  501D               	movf	??_newRotation+2,w,c
  2348  000DE6  12DD               	iorwf	postdec2,f,c
  2349  000DE8                     l4647:
  2350                           
  2351                           ;tetris.c: 191:             }
  2352  000DE8  2A25               	incf	newRotation@y1,f,c
  2353  000DEA  0E0F               	movlw	15
  2354  000DEC  6425               	cpfsgt	newRotation@y1,c
  2355  000DEE  D796               	goto	l4631
  2356  000DF0  2A24               	incf	newRotation@x1,f,c
  2357  000DF2  0E07               	movlw	7
  2358  000DF4  6424               	cpfsgt	newRotation@x1,c
  2359  000DF6  D790               	goto	l4625
  2360  000DF8  0012               	return	
  2361  000DFA                     __end_of_newRotation:
  2362                           	opt callstack 0
  2363                           
  2364 ;; *************** function ___wmul *****************
  2365 ;; Defined at:
  2366 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\Umul16.c"
  2367 ;; Parameters:    Size  Location     Type
  2368 ;;  multiplier      2   11[COMRAM] unsigned int 
  2369 ;;  multiplicand    2   13[COMRAM] unsigned int 
  2370 ;; Auto vars:     Size  Location     Type
  2371 ;;  product         2   15[COMRAM] unsigned int 
  2372 ;; Return value:  Size  Location     Type
  2373 ;;                  2   11[COMRAM] unsigned int 
  2374 ;; Registers used:
  2375 ;;		wreg, status,2, status,0, prodl, prodh
  2376 ;; Tracked objects:
  2377 ;;		On entry : 0/0
  2378 ;;		On exit  : 0/0
  2379 ;;		Unchanged: 0/0
  2380 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2381 ;;      Params:         4       0       0       0       0       0       0
  2382 ;;      Locals:         2       0       0       0       0       0       0
  2383 ;;      Temps:          0       0       0       0       0       0       0
  2384 ;;      Totals:         6       0       0       0       0       0       0
  2385 ;;Total ram usage:        6 bytes
  2386 ;; Hardware stack levels used:    1
  2387 ;; Hardware stack levels required when called:    4
  2388 ;; This function calls:
  2389 ;;		Nothing
  2390 ;; This function is called by:
  2391 ;;		_newRotation
  2392 ;; This function uses a non-reentrant model
  2393 ;;
  2394                           
  2395                           	psect	text13
  2396  0021EA                     __ptext13:
  2397                           	opt callstack 0
  2398  0021EA                     ___wmul:
  2399                           	opt callstack 21
  2400                           
  2401                           ;incstack = 0
  2402  0021EA  500C               	movf	___wmul@multiplier,w,c
  2403  0021EC  020E               	mulwf	___wmul@multiplicand,c
  2404  0021EE  CFF3 F010          	movff	prodl,___wmul@product
  2405  0021F2  CFF4 F011          	movff	prodh,___wmul@product+1
  2406  0021F6  500C               	movf	___wmul@multiplier,w,c
  2407  0021F8  020F               	mulwf	___wmul@multiplicand+1,c
  2408  0021FA  50F3               	movf	prodl,w,c
  2409  0021FC  2611               	addwf	___wmul@product+1,f,c
  2410  0021FE  500D               	movf	___wmul@multiplier+1,w,c
  2411  002200  020E               	mulwf	___wmul@multiplicand,c
  2412  002202  50F3               	movf	prodl,w,c
  2413  002204  2611               	addwf	___wmul@product+1,f,c
  2414  002206  C010  F00C         	movff	___wmul@product,?___wmul
  2415  00220A  C011  F00D         	movff	___wmul@product+1,?___wmul+1
  2416  00220E  0012               	return		;funcret
  2417  002210                     __end_of___wmul:
  2418                           	opt callstack 0
  2419                           
  2420 ;; *************** function _tetris_button_right *****************
  2421 ;; Defined at:
  2422 ;;		line 285 in file "tetris.c"
  2423 ;; Parameters:    Size  Location     Type
  2424 ;;		None
  2425 ;; Auto vars:     Size  Location     Type
  2426 ;;		None
  2427 ;; Return value:  Size  Location     Type
  2428 ;;                  1    wreg      _Bool 
  2429 ;; Registers used:
  2430 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2431 ;; Tracked objects:
  2432 ;;		On entry : 0/0
  2433 ;;		On exit  : 0/0
  2434 ;;		Unchanged: 0/0
  2435 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2436 ;;      Params:         0       0       0       0       0       0       0
  2437 ;;      Locals:         0       0       0       0       0       0       0
  2438 ;;      Temps:          0       0       0       0       0       0       0
  2439 ;;      Totals:         0       0       0       0       0       0       0
  2440 ;;Total ram usage:        0 bytes
  2441 ;; Hardware stack levels used:    1
  2442 ;; Hardware stack levels required when called:    6
  2443 ;; This function calls:
  2444 ;;		_checkForRightWall
  2445 ;;		_collisionDetect
  2446 ;;		_mergeObjects
  2447 ;;		_moveObject
  2448 ;;		_pauseMultiplexing
  2449 ;;		_resumeMultiplexing
  2450 ;; This function is called by:
  2451 ;;		_tetris_buttons
  2452 ;; This function uses a non-reentrant model
  2453 ;;
  2454                           
  2455                           	psect	text14
  2456  00171C                     __ptext14:
  2457                           	opt callstack 0
  2458  00171C                     _tetris_button_right:
  2459                           	opt callstack 21
  2460                           
  2461                           ;tetris.c: 286:     if (game)
  2462                           
  2463                           ;incstack = 0
  2464  00171C  5041               	movf	_game,w,c	;volatile
  2465  00171E  B4D8               	btfsc	status,2,c
  2466  001720  0012               	return	
  2467                           
  2468                           ;tetris.c: 287:     {;tetris.c: 288:         if (!checkForRightWall(ObjectData))
  2469  001722  0ED0               	movlw	low _ObjectData
  2470  001724  6E0C               	movwf	checkForRightWall@pObject,c
  2471  001726  0E00               	movlw	high _ObjectData
  2472  001728  6E0D               	movwf	checkForRightWall@pObject+1,c
  2473  00172A  EC37  F011         	call	_checkForRightWall	;wreg free
  2474  00172E  0900               	iorlw	0
  2475  001730  A4D8               	btfss	status,2,c
  2476  001732  0012               	return	
  2477                           
  2478                           ;tetris.c: 289:         {;tetris.c: 290:             mergeObjects(ObjectData, tmpObjectD
      +                          ata, OVERRIDE);
  2479  001734  0ED0               	movlw	low _ObjectData
  2480  001736  6E0C               	movwf	mergeObjects@pSource,c
  2481  001738  0E00               	movlw	high _ObjectData
  2482  00173A  6E0D               	movwf	mergeObjects@pSource+1,c
  2483  00173C  0EB0               	movlw	low _tmpObjectData
  2484  00173E  6E0E               	movwf	mergeObjects@pTarget,c
  2485  001740  0E00               	movlw	high _tmpObjectData
  2486  001742  6E0F               	movwf	mergeObjects@pTarget+1,c
  2487  001744  0E00               	movlw	0
  2488  001746  6E10               	movwf	mergeObjects@mode,c
  2489  001748  EC13  F008         	call	_mergeObjects	;wreg free
  2490                           
  2491                           ;tetris.c: 291:             moveObject(tmpObjectData, RIGHT, 1);
  2492  00174C  0EB0               	movlw	low _tmpObjectData
  2493  00174E  6E0C               	movwf	moveObject@pObject,c
  2494  001750  0E00               	movlw	high _tmpObjectData
  2495  001752  6E0D               	movwf	moveObject@pObject+1,c
  2496  001754  0E03               	movlw	3
  2497  001756  6E0E               	movwf	moveObject@direction,c
  2498  001758  0E01               	movlw	1
  2499  00175A  6E0F               	movwf	moveObject@cycles,c
  2500  00175C  EC79  F003         	call	_moveObject	;wreg free
  2501                           
  2502                           ;tetris.c: 293:             if (!collisionDetect(tmpObjectData, BackgroundData))
  2503  001760  0EB0               	movlw	low _tmpObjectData
  2504  001762  6E0C               	movwf	collisionDetect@pSource,c
  2505  001764  0E00               	movlw	high _tmpObjectData
  2506  001766  6E0D               	movwf	collisionDetect@pSource+1,c
  2507  001768  0EC0               	movlw	low _BackgroundData
  2508  00176A  6E0E               	movwf	collisionDetect@pTarget,c
  2509  00176C  0E00               	movlw	high _BackgroundData
  2510  00176E  6E0F               	movwf	collisionDetect@pTarget+1,c
  2511  001770  ECEE  F00D         	call	_collisionDetect	;wreg free
  2512  001774  0900               	iorlw	0
  2513  001776  A4D8               	btfss	status,2,c
  2514  001778  0012               	return	
  2515                           
  2516                           ;tetris.c: 294:             {;tetris.c: 295:                 pauseMultiplexing();
  2517  00177A  EC96  F011         	call	_pauseMultiplexing	;wreg free
  2518                           
  2519                           ;tetris.c: 296:                 mergeObjects(tmpObjectData, ObjectData, OVERRIDE);
  2520  00177E  0EB0               	movlw	low _tmpObjectData
  2521  001780  6E0C               	movwf	mergeObjects@pSource,c
  2522  001782  0E00               	movlw	high _tmpObjectData
  2523  001784  6E0D               	movwf	mergeObjects@pSource+1,c
  2524  001786  0ED0               	movlw	low _ObjectData
  2525  001788  6E0E               	movwf	mergeObjects@pTarget,c
  2526  00178A  0E00               	movlw	high _ObjectData
  2527  00178C  6E0F               	movwf	mergeObjects@pTarget+1,c
  2528  00178E  0E00               	movlw	0
  2529  001790  6E10               	movwf	mergeObjects@mode,c
  2530  001792  EC13  F008         	call	_mergeObjects	;wreg free
  2531                           
  2532                           ;tetris.c: 297:                 resumeMultiplexing();
  2533  001796  ECE2  F011         	call	_resumeMultiplexing	;wreg free
  2534                           
  2535                           ;tetris.c: 298:                 CheckForNewLines = 1;
  2536  00179A  0E01               	movlw	1
  2537  00179C  6E46               	movwf	_CheckForNewLines,c
  2538  00179E  0012               	return	
  2539  0017A0                     __end_of_tetris_button_right:
  2540                           	opt callstack 0
  2541                           
  2542 ;; *************** function _checkForRightWall *****************
  2543 ;; Defined at:
  2544 ;;		line 149 in file "shared_logic.c"
  2545 ;; Parameters:    Size  Location     Type
  2546 ;;  pObject         2   11[COMRAM] PTR volatile unsigned sh
  2547 ;;		 -> ObjectData(16), 
  2548 ;; Auto vars:     Size  Location     Type
  2549 ;;		None
  2550 ;; Return value:  Size  Location     Type
  2551 ;;                  1    wreg      _Bool 
  2552 ;; Registers used:
  2553 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  2554 ;; Tracked objects:
  2555 ;;		On entry : 0/0
  2556 ;;		On exit  : 0/0
  2557 ;;		Unchanged: 0/0
  2558 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2559 ;;      Params:         2       0       0       0       0       0       0
  2560 ;;      Locals:         0       0       0       0       0       0       0
  2561 ;;      Temps:          2       0       0       0       0       0       0
  2562 ;;      Totals:         4       0       0       0       0       0       0
  2563 ;;Total ram usage:        4 bytes
  2564 ;; Hardware stack levels used:    1
  2565 ;; Hardware stack levels required when called:    4
  2566 ;; This function calls:
  2567 ;;		Nothing
  2568 ;; This function is called by:
  2569 ;;		_tetris_button_right
  2570 ;; This function uses a non-reentrant model
  2571 ;;
  2572                           
  2573                           	psect	text15
  2574  00226E                     __ptext15:
  2575                           	opt callstack 0
  2576  00226E                     _checkForRightWall:
  2577                           	opt callstack 22
  2578                           
  2579                           ;shared_logic.c: 149: _Bool checkForRightWall(volatile uint16_t * pObject);shared_logic.
      +                          c: 150: {;shared_logic.c: 151:     return pObject[7] != 0;
  2580                           
  2581                           ;incstack = 0
  2582  00226E  EE20 F00E          	lfsr	2,14
  2583  002272  500C               	movf	checkForRightWall@pObject,w,c
  2584  002274  26D9               	addwf	fsr2l,f,c
  2585  002276  500D               	movf	checkForRightWall@pObject+1,w,c
  2586  002278  22DA               	addwfc	fsr2h,f,c
  2587  00227A  50DE               	movf	postinc2,w,c
  2588  00227C  10DE               	iorwf	postinc2,w,c
  2589  00227E  B4D8               	btfsc	status,2,c
  2590  002280  D002               	goto	u2410
  2591  002282  0E01               	movlw	1
  2592  002284  0012               	return	
  2593  002286                     u2410:
  2594  002286  0E00               	movlw	0
  2595  002288  0012               	return		;funcret
  2596  00228A                     __end_of_checkForRightWall:
  2597                           	opt callstack 0
  2598                           
  2599 ;; *************** function _tetris_button_left *****************
  2600 ;; Defined at:
  2601 ;;		line 258 in file "tetris.c"
  2602 ;; Parameters:    Size  Location     Type
  2603 ;;		None
  2604 ;; Auto vars:     Size  Location     Type
  2605 ;;		None
  2606 ;; Return value:  Size  Location     Type
  2607 ;;                  1    wreg      _Bool 
  2608 ;; Registers used:
  2609 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2610 ;; Tracked objects:
  2611 ;;		On entry : 0/0
  2612 ;;		On exit  : 0/0
  2613 ;;		Unchanged: 0/0
  2614 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2615 ;;      Params:         0       0       0       0       0       0       0
  2616 ;;      Locals:         0       0       0       0       0       0       0
  2617 ;;      Temps:          0       0       0       0       0       0       0
  2618 ;;      Totals:         0       0       0       0       0       0       0
  2619 ;;Total ram usage:        0 bytes
  2620 ;; Hardware stack levels used:    1
  2621 ;; Hardware stack levels required when called:    6
  2622 ;; This function calls:
  2623 ;;		_checkForLeftWall
  2624 ;;		_collisionDetect
  2625 ;;		_memcpyvol
  2626 ;;		_mergeObjects
  2627 ;;		_moveObject
  2628 ;;		_pauseMultiplexing
  2629 ;;		_resumeMultiplexing
  2630 ;; This function is called by:
  2631 ;;		_tetris_buttons
  2632 ;; This function uses a non-reentrant model
  2633 ;;
  2634                           
  2635                           	psect	text16
  2636  00160E                     __ptext16:
  2637                           	opt callstack 0
  2638  00160E                     _tetris_button_left:
  2639                           	opt callstack 21
  2640                           
  2641                           ;tetris.c: 259:     if (game)
  2642                           
  2643                           ;incstack = 0
  2644  00160E  5041               	movf	_game,w,c	;volatile
  2645  001610  B4D8               	btfsc	status,2,c
  2646  001612  0012               	return	
  2647                           
  2648                           ;tetris.c: 260:     {;tetris.c: 261:         if (!checkForLeftWall(ObjectData))
  2649  001614  0ED0               	movlw	low _ObjectData
  2650  001616  6E0C               	movwf	checkForLeftWall@pObject,c
  2651  001618  0E00               	movlw	high _ObjectData
  2652  00161A  6E0D               	movwf	checkForLeftWall@pObject+1,c
  2653  00161C  EC45  F011         	call	_checkForLeftWall	;wreg free
  2654  001620  0900               	iorlw	0
  2655  001622  A4D8               	btfss	status,2,c
  2656  001624  0012               	return	
  2657                           
  2658                           ;tetris.c: 262:         {;tetris.c: 265:             memcpyvol(tmpObjectData, ObjectData
      +                          , 16);
  2659  001626  0EB0               	movlw	low _tmpObjectData
  2660  001628  6E0C               	movwf	memcpyvol@dest,c
  2661  00162A  0E00               	movlw	high _tmpObjectData
  2662  00162C  6E0D               	movwf	memcpyvol@dest+1,c
  2663  00162E  0ED0               	movlw	low _ObjectData
  2664  001630  6E0E               	movwf	memcpyvol@src,c
  2665  001632  0E00               	movlw	high _ObjectData
  2666  001634  6E0F               	movwf	memcpyvol@src+1,c
  2667  001636  0E00               	movlw	0
  2668  001638  6E11               	movwf	memcpyvol@n+1,c
  2669  00163A  0E10               	movlw	16
  2670  00163C  6E10               	movwf	memcpyvol@n,c
  2671  00163E  EC7C  F00E         	call	_memcpyvol	;wreg free
  2672                           
  2673                           ;tetris.c: 267:             moveObject(tmpObjectData, LEFT, 1);
  2674  001642  0EB0               	movlw	low _tmpObjectData
  2675  001644  6E0C               	movwf	moveObject@pObject,c
  2676  001646  0E00               	movlw	high _tmpObjectData
  2677  001648  6E0D               	movwf	moveObject@pObject+1,c
  2678  00164A  0E02               	movlw	2
  2679  00164C  6E0E               	movwf	moveObject@direction,c
  2680  00164E  0E01               	movlw	1
  2681  001650  6E0F               	movwf	moveObject@cycles,c
  2682  001652  EC79  F003         	call	_moveObject	;wreg free
  2683                           
  2684                           ;tetris.c: 269:             if (!collisionDetect(tmpObjectData, BackgroundData))
  2685  001656  0EB0               	movlw	low _tmpObjectData
  2686  001658  6E0C               	movwf	collisionDetect@pSource,c
  2687  00165A  0E00               	movlw	high _tmpObjectData
  2688  00165C  6E0D               	movwf	collisionDetect@pSource+1,c
  2689  00165E  0EC0               	movlw	low _BackgroundData
  2690  001660  6E0E               	movwf	collisionDetect@pTarget,c
  2691  001662  0E00               	movlw	high _BackgroundData
  2692  001664  6E0F               	movwf	collisionDetect@pTarget+1,c
  2693  001666  ECEE  F00D         	call	_collisionDetect	;wreg free
  2694  00166A  0900               	iorlw	0
  2695  00166C  A4D8               	btfss	status,2,c
  2696  00166E  0012               	return	
  2697                           
  2698                           ;tetris.c: 270:             {;tetris.c: 272:                 pauseMultiplexing();
  2699  001670  EC96  F011         	call	_pauseMultiplexing	;wreg free
  2700                           
  2701                           ;tetris.c: 274:                 mergeObjects(tmpObjectData, ObjectData, OVERRIDE);
  2702  001674  0EB0               	movlw	low _tmpObjectData
  2703  001676  6E0C               	movwf	mergeObjects@pSource,c
  2704  001678  0E00               	movlw	high _tmpObjectData
  2705  00167A  6E0D               	movwf	mergeObjects@pSource+1,c
  2706  00167C  0ED0               	movlw	low _ObjectData
  2707  00167E  6E0E               	movwf	mergeObjects@pTarget,c
  2708  001680  0E00               	movlw	high _ObjectData
  2709  001682  6E0F               	movwf	mergeObjects@pTarget+1,c
  2710  001684  0E00               	movlw	0
  2711  001686  6E10               	movwf	mergeObjects@mode,c
  2712  001688  EC13  F008         	call	_mergeObjects	;wreg free
  2713                           
  2714                           ;tetris.c: 276:                 resumeMultiplexing();
  2715  00168C  ECE2  F011         	call	_resumeMultiplexing	;wreg free
  2716                           
  2717                           ;tetris.c: 278:                 CheckForNewLines = 1;
  2718  001690  0E01               	movlw	1
  2719  001692  6E46               	movwf	_CheckForNewLines,c
  2720  001694  0012               	return	
  2721  001696                     __end_of_tetris_button_left:
  2722                           	opt callstack 0
  2723                           
  2724 ;; *************** function _checkForLeftWall *****************
  2725 ;; Defined at:
  2726 ;;		line 141 in file "shared_logic.c"
  2727 ;; Parameters:    Size  Location     Type
  2728 ;;  pObject         2   11[COMRAM] PTR volatile unsigned sh
  2729 ;;		 -> ObjectData(16), 
  2730 ;; Auto vars:     Size  Location     Type
  2731 ;;		None
  2732 ;; Return value:  Size  Location     Type
  2733 ;;                  1    wreg      _Bool 
  2734 ;; Registers used:
  2735 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  2736 ;; Tracked objects:
  2737 ;;		On entry : 0/0
  2738 ;;		On exit  : 0/0
  2739 ;;		Unchanged: 0/0
  2740 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2741 ;;      Params:         2       0       0       0       0       0       0
  2742 ;;      Locals:         0       0       0       0       0       0       0
  2743 ;;      Temps:          2       0       0       0       0       0       0
  2744 ;;      Totals:         4       0       0       0       0       0       0
  2745 ;;Total ram usage:        4 bytes
  2746 ;; Hardware stack levels used:    1
  2747 ;; Hardware stack levels required when called:    4
  2748 ;; This function calls:
  2749 ;;		Nothing
  2750 ;; This function is called by:
  2751 ;;		_tetris_button_left
  2752 ;; This function uses a non-reentrant model
  2753 ;;
  2754                           
  2755                           	psect	text17
  2756  00228A                     __ptext17:
  2757                           	opt callstack 0
  2758  00228A                     _checkForLeftWall:
  2759                           	opt callstack 22
  2760                           
  2761                           ;shared_logic.c: 141: _Bool checkForLeftWall(volatile uint16_t * pObject);shared_logic.c
      +                          : 142: {;shared_logic.c: 143:     return pObject[0] != 0;
  2762                           
  2763                           ;incstack = 0
  2764  00228A  C00C  FFD9         	movff	checkForLeftWall@pObject,fsr2l
  2765  00228E  C00D  FFDA         	movff	checkForLeftWall@pObject+1,fsr2h
  2766  002292  50DE               	movf	postinc2,w,c
  2767  002294  10DE               	iorwf	postinc2,w,c
  2768  002296  B4D8               	btfsc	status,2,c
  2769  002298  D002               	goto	u2390
  2770  00229A  0E01               	movlw	1
  2771  00229C  0012               	return	
  2772  00229E                     u2390:
  2773  00229E  0E00               	movlw	0
  2774  0022A0  0012               	return		;funcret
  2775  0022A2                     __end_of_checkForLeftWall:
  2776                           	opt callstack 0
  2777                           
  2778 ;; *************** function _tetris_button_down *****************
  2779 ;; Defined at:
  2780 ;;		line 328 in file "tetris.c"
  2781 ;; Parameters:    Size  Location     Type
  2782 ;;		None
  2783 ;; Auto vars:     Size  Location     Type
  2784 ;;		None
  2785 ;; Return value:  Size  Location     Type
  2786 ;;                  1    wreg      _Bool 
  2787 ;; Registers used:
  2788 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2789 ;; Tracked objects:
  2790 ;;		On entry : 0/0
  2791 ;;		On exit  : 0/0
  2792 ;;		Unchanged: 0/0
  2793 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2794 ;;      Params:         0       0       0       0       0       0       0
  2795 ;;      Locals:         0       0       0       0       0       0       0
  2796 ;;      Temps:          0       0       0       0       0       0       0
  2797 ;;      Totals:         0       0       0       0       0       0       0
  2798 ;;Total ram usage:        0 bytes
  2799 ;; Hardware stack levels used:    1
  2800 ;; Hardware stack levels required when called:    7
  2801 ;; This function calls:
  2802 ;;		_moveObjectDown
  2803 ;; This function is called by:
  2804 ;;		_tetris_buttons
  2805 ;; This function uses a non-reentrant model
  2806 ;;
  2807                           
  2808                           	psect	text18
  2809  0022BA                     __ptext18:
  2810                           	opt callstack 0
  2811  0022BA                     _tetris_button_down:
  2812                           	opt callstack 20
  2813                           
  2814                           ;tetris.c: 329:     if (game)
  2815                           
  2816                           ;incstack = 0
  2817  0022BA  5041               	movf	_game,w,c	;volatile
  2818  0022BC  B4D8               	btfsc	status,2,c
  2819  0022BE  0012               	return	
  2820                           
  2821                           ;tetris.c: 331:     while (moveObjectDown(ObjectData))
  2822  0022C0  0ED0               	movlw	low _ObjectData
  2823  0022C2  6E25               	movwf	moveObjectDown@pObject,c
  2824  0022C4  0E00               	movlw	high _ObjectData
  2825  0022C6  6E26               	movwf	moveObjectDown@pObject+1,c
  2826  0022C8  EC08  F00A         	call	_moveObjectDown	;wreg free
  2827  0022CC  0900               	iorlw	0
  2828  0022CE  D7F6               	goto	L5
  2829  0022D0                     __end_of_tetris_button_down:
  2830                           	opt callstack 0
  2831                           
  2832 ;; *************** function _moveObjectDown *****************
  2833 ;; Defined at:
  2834 ;;		line 52 in file "tetris.c"
  2835 ;; Parameters:    Size  Location     Type
  2836 ;;  pObject         2   36[COMRAM] PTR volatile unsigned sh
  2837 ;;		 -> ObjectData(16), 
  2838 ;; Auto vars:     Size  Location     Type
  2839 ;;  result          1   38[COMRAM] _Bool 
  2840 ;; Return value:  Size  Location     Type
  2841 ;;                  1    wreg      _Bool 
  2842 ;; Registers used:
  2843 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2844 ;; Tracked objects:
  2845 ;;		On entry : 0/0
  2846 ;;		On exit  : 0/0
  2847 ;;		Unchanged: 0/0
  2848 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2849 ;;      Params:         2       0       0       0       0       0       0
  2850 ;;      Locals:         1       0       0       0       0       0       0
  2851 ;;      Temps:          0       0       0       0       0       0       0
  2852 ;;      Totals:         3       0       0       0       0       0       0
  2853 ;;Total ram usage:        3 bytes
  2854 ;; Hardware stack levels used:    1
  2855 ;; Hardware stack levels required when called:    6
  2856 ;; This function calls:
  2857 ;;		_checkForBottom
  2858 ;;		_collisionDetect
  2859 ;;		_mergeObjects
  2860 ;;		_moveObject
  2861 ;;		_selectNextObject
  2862 ;;		_set_mS
  2863 ;; This function is called by:
  2864 ;;		_tetris_button_down
  2865 ;;		_tetris_main
  2866 ;; This function uses a non-reentrant model
  2867 ;;
  2868                           
  2869                           	psect	text19
  2870  001410                     __ptext19:
  2871                           	opt callstack 0
  2872  001410                     _moveObjectDown:
  2873                           	opt callstack 20
  2874                           
  2875                           ;tetris.c: 52: _Bool moveObjectDown(volatile uint16_t * pObject);tetris.c: 53: {;tetris.
      +                          c: 54:     _Bool result = 1;
  2876                           
  2877                           ;incstack = 0
  2878  001410  0E01               	movlw	1
  2879  001412  6E27               	movwf	moveObjectDown@result,c
  2880                           
  2881                           ;tetris.c: 57:     if (checkForBottom(pObject))
  2882  001414  C025  F00C         	movff	moveObjectDown@pObject,checkForBottom@pObject
  2883  001418  C026  F00D         	movff	moveObjectDown@pObject+1,checkForBottom@pObject+1
  2884  00141C  ECBC  F00F         	call	_checkForBottom	;wreg free
  2885  001420  0900               	iorlw	0
  2886  001422  B4D8               	btfsc	status,2,c
  2887  001424  D017               	goto	l4587
  2888                           
  2889                           ;tetris.c: 58:     {;tetris.c: 60:         result = 0;
  2890  001426  0E00               	movlw	0
  2891  001428  6E27               	movwf	moveObjectDown@result,c
  2892                           
  2893                           ;tetris.c: 62:         mergeObjects(pObject, BackgroundData, MERGE);
  2894  00142A  C025  F00C         	movff	moveObjectDown@pObject,mergeObjects@pSource
  2895  00142E  C026  F00D         	movff	moveObjectDown@pObject+1,mergeObjects@pSource+1
  2896  001432  0EC0               	movlw	low _BackgroundData
  2897  001434  6E0E               	movwf	mergeObjects@pTarget,c
  2898  001436  0E00               	movlw	high _BackgroundData
  2899  001438  6E0F               	movwf	mergeObjects@pTarget+1,c
  2900  00143A  0E01               	movlw	1
  2901  00143C  6E10               	movwf	mergeObjects@mode,c
  2902  00143E  EC13  F008         	call	_mergeObjects	;wreg free
  2903                           
  2904                           ;tetris.c: 64:         selectNextObject(pObject);
  2905  001442  C025  F016         	movff	moveObjectDown@pObject,selectNextObject@pTarget
  2906  001446  C026  F017         	movff	moveObjectDown@pObject+1,selectNextObject@pTarget+1
  2907  00144A  ECFD  F006         	call	_selectNextObject	;wreg free
  2908  00144E                     l4585:
  2909                           
  2910                           ;tetris.c: 66:         CheckForNewLines = 1;
  2911  00144E  0E01               	movlw	1
  2912  001450  6E46               	movwf	_CheckForNewLines,c
  2913                           
  2914                           ;tetris.c: 67:     }
  2915  001452  D041               	goto	l4603
  2916  001454                     l4587:
  2917                           
  2918                           ;tetris.c: 69:     {;tetris.c: 71:         moveObject(pObject, DOWN, 1);
  2919  001454  C025  F00C         	movff	moveObjectDown@pObject,moveObject@pObject
  2920  001458  C026  F00D         	movff	moveObjectDown@pObject+1,moveObject@pObject+1
  2921  00145C  0E00               	movlw	0
  2922  00145E  6E0E               	movwf	moveObject@direction,c
  2923  001460  0E01               	movlw	1
  2924  001462  6E0F               	movwf	moveObject@cycles,c
  2925  001464  EC79  F003         	call	_moveObject	;wreg free
  2926                           
  2927                           ;tetris.c: 73:         if (collisionDetect(pObject, BackgroundData))
  2928  001468  C025  F00C         	movff	moveObjectDown@pObject,collisionDetect@pSource
  2929  00146C  C026  F00D         	movff	moveObjectDown@pObject+1,collisionDetect@pSource+1
  2930  001470  0EC0               	movlw	low _BackgroundData
  2931  001472  6E0E               	movwf	collisionDetect@pTarget,c
  2932  001474  0E00               	movlw	high _BackgroundData
  2933  001476  6E0F               	movwf	collisionDetect@pTarget+1,c
  2934  001478  ECEE  F00D         	call	_collisionDetect	;wreg free
  2935  00147C  0900               	iorlw	0
  2936  00147E  B4D8               	btfsc	status,2,c
  2937  001480  D02A               	goto	l4603
  2938                           
  2939                           ;tetris.c: 74:         {;tetris.c: 77:             result = 0;
  2940  001482  0E00               	movlw	0
  2941  001484  6E27               	movwf	moveObjectDown@result,c
  2942                           
  2943                           ;tetris.c: 79:             moveObject(pObject, UP, 1);
  2944  001486  C025  F00C         	movff	moveObjectDown@pObject,moveObject@pObject
  2945  00148A  C026  F00D         	movff	moveObjectDown@pObject+1,moveObject@pObject+1
  2946  00148E  0E01               	movlw	1
  2947  001490  6E0E               	movwf	moveObject@direction,c
  2948  001492  0E01               	movlw	1
  2949  001494  6E0F               	movwf	moveObject@cycles,c
  2950  001496  EC79  F003         	call	_moveObject	;wreg free
  2951                           
  2952                           ;tetris.c: 81:             mergeObjects(pObject, BackgroundData, MERGE);
  2953  00149A  C025  F00C         	movff	moveObjectDown@pObject,mergeObjects@pSource
  2954  00149E  C026  F00D         	movff	moveObjectDown@pObject+1,mergeObjects@pSource+1
  2955  0014A2  0EC0               	movlw	low _BackgroundData
  2956  0014A4  6E0E               	movwf	mergeObjects@pTarget,c
  2957  0014A6  0E00               	movlw	high _BackgroundData
  2958  0014A8  6E0F               	movwf	mergeObjects@pTarget+1,c
  2959  0014AA  0E01               	movlw	1
  2960  0014AC  6E10               	movwf	mergeObjects@mode,c
  2961  0014AE  EC13  F008         	call	_mergeObjects	;wreg free
  2962                           
  2963                           ;tetris.c: 83:             selectNextObject(pObject);
  2964  0014B2  C025  F016         	movff	moveObjectDown@pObject,selectNextObject@pTarget
  2965  0014B6  C026  F017         	movff	moveObjectDown@pObject+1,selectNextObject@pTarget+1
  2966  0014BA  ECFD  F006         	call	_selectNextObject	;wreg free
  2967                           
  2968                           ;tetris.c: 86:             EndOfGame = collisionDetect(pObject, BackgroundData);
  2969  0014BE  C025  F00C         	movff	moveObjectDown@pObject,collisionDetect@pSource
  2970  0014C2  C026  F00D         	movff	moveObjectDown@pObject+1,collisionDetect@pSource+1
  2971  0014C6  0EC0               	movlw	low _BackgroundData
  2972  0014C8  6E0E               	movwf	collisionDetect@pTarget,c
  2973  0014CA  0E00               	movlw	high _BackgroundData
  2974  0014CC  6E0F               	movwf	collisionDetect@pTarget+1,c
  2975  0014CE  ECEE  F00D         	call	_collisionDetect	;wreg free
  2976  0014D2  6E4A               	movwf	_EndOfGame,c	;volatile
  2977  0014D4  D7BC               	goto	l4585
  2978  0014D6                     l4603:
  2979                           
  2980                           ;tetris.c: 91:     set_mS(0);
  2981  0014D6  0E00               	movlw	0
  2982  0014D8  6E0D               	movwf	set_mS@amount+1,c
  2983  0014DA  0E00               	movlw	0
  2984  0014DC  6E0C               	movwf	set_mS@amount,c
  2985  0014DE  ECC5  F011         	call	_set_mS	;wreg free
  2986                           
  2987                           ;tetris.c: 93:     return result;
  2988  0014E2  5027               	movf	moveObjectDown@result,w,c
  2989  0014E4  0012               	return		;funcret
  2990  0014E6                     __end_of_moveObjectDown:
  2991                           	opt callstack 0
  2992                           
  2993 ;; *************** function _selectNextObject *****************
  2994 ;; Defined at:
  2995 ;;		line 195 in file "tetris.c"
  2996 ;; Parameters:    Size  Location     Type
  2997 ;;  pTarget         2   21[COMRAM] PTR volatile unsigned sh
  2998 ;;		 -> ObjectData(16), 
  2999 ;; Auto vars:     Size  Location     Type
  3000 ;;  fill            1   31[COMRAM] _Bool 
  3001 ;;  check           7   24[COMRAM] _Bool [7]
  3002 ;;  s               2   32[COMRAM] PTR struct shape
  3003 ;;		 -> shapes(133), 
  3004 ;;  counter         1   35[COMRAM] unsigned char 
  3005 ;;  rndSelection    1   34[COMRAM] unsigned char 
  3006 ;;  selection       1    0        unsigned char 
  3007 ;; Return value:  Size  Location     Type
  3008 ;;                  1    wreg      void 
  3009 ;; Registers used:
  3010 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3011 ;; Tracked objects:
  3012 ;;		On entry : 0/0
  3013 ;;		On exit  : 0/0
  3014 ;;		Unchanged: 0/0
  3015 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3016 ;;      Params:         2       0       0       0       0       0       0
  3017 ;;      Locals:        12       0       0       0       0       0       0
  3018 ;;      Temps:          1       0       0       0       0       0       0
  3019 ;;      Totals:        15       0       0       0       0       0       0
  3020 ;;Total ram usage:       15 bytes
  3021 ;; Hardware stack levels used:    1
  3022 ;; Hardware stack levels required when called:    5
  3023 ;; This function calls:
  3024 ;;		___awmod
  3025 ;;		_memcpyvol
  3026 ;;		_rnd_get_num
  3027 ;;		_set_mS
  3028 ;; This function is called by:
  3029 ;;		_moveObjectDown
  3030 ;;		_tetris_main
  3031 ;; This function uses a non-reentrant model
  3032 ;;
  3033                           
  3034                           	psect	text20
  3035  000DFA                     __ptext20:
  3036                           	opt callstack 0
  3037  000DFA                     _selectNextObject:
  3038                           	opt callstack 20
  3039                           
  3040                           ;tetris.c: 195: void selectNextObject(volatile uint16_t *pTarget);tetris.c: 196: {;tetri
      +                          s.c: 197:     uint8_t rndSelection, counter, selection;;tetris.c: 198:     struct shape 
      +                          * s;;tetris.c: 199:     _Bool check[7];;tetris.c: 200:     if(countblocks == 7){
  3041                           
  3042                           ;incstack = 0
  3043  000DFA  0E07               	movlw	7
  3044  000DFC  1845               	xorwf	_countblocks,w,c
  3045  000DFE  A4D8               	btfss	status,2,c
  3046  000E00  D04C               	goto	u3930
  3047                           
  3048                           ;tetris.c: 201:         countblocks = 0;
  3049  000E02  0E00               	movlw	0
  3050  000E04  6E45               	movwf	_countblocks,c
  3051                           
  3052                           ;tetris.c: 203:         for(counter=0; counter<7;counter++){
  3053  000E06  0E00               	movlw	0
  3054  000E08  6E24               	movwf	selectNextObject@counter,c
  3055  000E0A                     l4419:
  3056                           
  3057                           ;tetris.c: 204:             randomobjects[counter] = 255;
  3058  000E0A  0E80               	movlw	low _randomobjects
  3059  000E0C  2424               	addwf	selectNextObject@counter,w,c
  3060  000E0E  6ED9               	movwf	fsr2l,c
  3061  000E10  6ADA               	clrf	fsr2h,c
  3062  000E12  0E00               	movlw	high _randomobjects
  3063  000E14  22DA               	addwfc	fsr2h,f,c
  3064  000E16  0EFF               	movlw	255
  3065  000E18  6EDF               	movwf	indf2,c
  3066                           
  3067                           ;tetris.c: 205:             check[counter] = 0;
  3068  000E1A  0E19               	movlw	low selectNextObject@check
  3069  000E1C  2424               	addwf	selectNextObject@counter,w,c
  3070  000E1E  6ED9               	movwf	fsr2l,c
  3071  000E20  6ADA               	clrf	fsr2h,c
  3072  000E22  0E00               	movlw	high selectNextObject@check
  3073  000E24  22DA               	addwfc	fsr2h,f,c
  3074  000E26  0E00               	movlw	0
  3075  000E28  6EDF               	movwf	indf2,c
  3076                           
  3077                           ;tetris.c: 206:         }
  3078  000E2A  2A24               	incf	selectNextObject@counter,f,c
  3079  000E2C  0E06               	movlw	6
  3080  000E2E  6424               	cpfsgt	selectNextObject@counter,c
  3081  000E30  D7EC               	goto	l4419
  3082                           
  3083                           ;tetris.c: 207:         for(counter=0; counter<7;counter++){
  3084  000E32  0E00               	movlw	0
  3085  000E34  6E24               	movwf	selectNextObject@counter,c
  3086  000E36                     l4431:
  3087                           
  3088                           ;tetris.c: 208:             _Bool fill = 0;
  3089  000E36  0E00               	movlw	0
  3090  000E38  6E20               	movwf	selectNextObject@fill,c
  3091  000E3A                     l4433:
  3092                           
  3093                           ;tetris.c: 210:                 rndSelection = rnd_get_num();
  3094  000E3A  EC11  F00D         	call	_rnd_get_num	;wreg free
  3095  000E3E  6E23               	movwf	selectNextObject@rndSelection,c
  3096                           
  3097                           ;tetris.c: 211:                 rndSelection = rndSelection % 7;
  3098  000E40  C023  F00C         	movff	selectNextObject@rndSelection,___awmod@dividend
  3099  000E44  6A0D               	clrf	___awmod@dividend+1,c
  3100  000E46  0E00               	movlw	0
  3101  000E48  6E0F               	movwf	___awmod@divisor+1,c
  3102  000E4A  0E07               	movlw	7
  3103  000E4C  6E0E               	movwf	___awmod@divisor,c
  3104  000E4E  EC4B  F00D         	call	___awmod	;wreg free
  3105  000E52  500C               	movf	?___awmod,w,c
  3106  000E54  6E23               	movwf	selectNextObject@rndSelection,c
  3107                           
  3108                           ;tetris.c: 212:                 if (check[rndSelection] == 0) {
  3109  000E56  0E19               	movlw	low selectNextObject@check
  3110  000E58  2423               	addwf	selectNextObject@rndSelection,w,c
  3111  000E5A  6ED9               	movwf	fsr2l,c
  3112  000E5C  6ADA               	clrf	fsr2h,c
  3113  000E5E  0E00               	movlw	high selectNextObject@check
  3114  000E60  22DA               	addwfc	fsr2h,f,c
  3115  000E62  50DF               	movf	indf2,w,c
  3116  000E64  A4D8               	btfss	status,2,c
  3117  000E66  D012               	goto	l4443
  3118                           
  3119                           ;tetris.c: 213:                     randomobjects[counter] = rndSelection;
  3120  000E68  0E80               	movlw	low _randomobjects
  3121  000E6A  2424               	addwf	selectNextObject@counter,w,c
  3122  000E6C  6ED9               	movwf	fsr2l,c
  3123  000E6E  6ADA               	clrf	fsr2h,c
  3124  000E70  0E00               	movlw	high _randomobjects
  3125  000E72  22DA               	addwfc	fsr2h,f,c
  3126  000E74  C023  FFDF         	movff	selectNextObject@rndSelection,indf2
  3127                           
  3128                           ;tetris.c: 214:                     check[rndSelection] = 1;
  3129  000E78  0E19               	movlw	low selectNextObject@check
  3130  000E7A  2423               	addwf	selectNextObject@rndSelection,w,c
  3131  000E7C  6ED9               	movwf	fsr2l,c
  3132  000E7E  6ADA               	clrf	fsr2h,c
  3133  000E80  0E00               	movlw	high selectNextObject@check
  3134  000E82  22DA               	addwfc	fsr2h,f,c
  3135  000E84  0E01               	movlw	1
  3136  000E86  6EDF               	movwf	indf2,c
  3137                           
  3138                           ;tetris.c: 215:                     fill = 1;
  3139  000E88  0E01               	movlw	1
  3140  000E8A  6E20               	movwf	selectNextObject@fill,c
  3141  000E8C                     l4443:
  3142                           
  3143                           ;tetris.c: 217:             } while (!fill);
  3144  000E8C  5020               	movf	selectNextObject@fill,w,c
  3145  000E8E  B4D8               	btfsc	status,2,c
  3146  000E90  D7D4               	goto	l4433
  3147                           
  3148                           ;tetris.c: 218:         }
  3149  000E92  2A24               	incf	selectNextObject@counter,f,c
  3150  000E94  0E06               	movlw	6
  3151  000E96  6424               	cpfsgt	selectNextObject@counter,c
  3152  000E98  D7CE               	goto	l4431
  3153  000E9A                     u3930:
  3154                           
  3155                           ;tetris.c: 220:     s = &shapes[randomobjects[countblocks]];
  3156  000E9A  0E80               	movlw	low _randomobjects
  3157  000E9C  2445               	addwf	_countblocks,w,c
  3158  000E9E  6ED9               	movwf	fsr2l,c
  3159  000EA0  6ADA               	clrf	fsr2h,c
  3160  000EA2  0E00               	movlw	high _randomobjects
  3161  000EA4  22DA               	addwfc	fsr2h,f,c
  3162  000EA6  50DF               	movf	indf2,w,c
  3163  000EA8  6E18               	movwf	??_selectNextObject& (0+255),c
  3164  000EAA  5018               	movf	??_selectNextObject,w,c
  3165  000EAC  0D13               	mullw	19
  3166  000EAE  0E00               	movlw	low _shapes
  3167  000EB0  24F3               	addwf	prodl,w,c
  3168  000EB2  6E21               	movwf	selectNextObject@s,c
  3169  000EB4  0E02               	movlw	high _shapes
  3170  000EB6  20F4               	addwfc	prodh,w,c
  3171  000EB8  6E22               	movwf	selectNextObject@s+1,c
  3172                           
  3173                           ;tetris.c: 221:     countblocks++;
  3174  000EBA  2A45               	incf	_countblocks,f,c
  3175                           
  3176                           ;tetris.c: 223:     memcpyvol(pTarget, s->graphic, 16);
  3177  000EBC  C016  F00C         	movff	selectNextObject@pTarget,memcpyvol@dest
  3178  000EC0  C017  F00D         	movff	selectNextObject@pTarget+1,memcpyvol@dest+1
  3179  000EC4  C021  F00E         	movff	selectNextObject@s,memcpyvol@src
  3180  000EC8  C022  F00F         	movff	selectNextObject@s+1,memcpyvol@src+1
  3181  000ECC  0E00               	movlw	0
  3182  000ECE  6E11               	movwf	memcpyvol@n+1,c
  3183  000ED0  0E10               	movlw	16
  3184  000ED2  6E10               	movwf	memcpyvol@n,c
  3185  000ED4  EC7C  F00E         	call	_memcpyvol	;wreg free
  3186                           
  3187                           ;tetris.c: 224:     OriginX = s->x;
  3188  000ED8  EE20 F010          	lfsr	2,16
  3189  000EDC  5021               	movf	selectNextObject@s,w,c
  3190  000EDE  26D9               	addwf	fsr2l,f,c
  3191  000EE0  5022               	movf	selectNextObject@s+1,w,c
  3192  000EE2  22DA               	addwfc	fsr2h,f,c
  3193  000EE4  50DF               	movf	indf2,w,c
  3194  000EE6  6E43               	movwf	_OriginX,c
  3195                           
  3196                           ;tetris.c: 225:     OriginY = s->y;
  3197  000EE8  EE20 F011          	lfsr	2,17
  3198  000EEC  5021               	movf	selectNextObject@s,w,c
  3199  000EEE  26D9               	addwf	fsr2l,f,c
  3200  000EF0  5022               	movf	selectNextObject@s+1,w,c
  3201  000EF2  22DA               	addwfc	fsr2h,f,c
  3202  000EF4  50DF               	movf	indf2,w,c
  3203  000EF6  6E42               	movwf	_OriginY,c
  3204                           
  3205                           ;tetris.c: 226:     IsRotated = 0;
  3206  000EF8  0E00               	movlw	0
  3207  000EFA  6E47               	movwf	_IsRotated,c
  3208                           
  3209                           ;tetris.c: 227:     LimitedRotation = s->limitedRotation;
  3210  000EFC  EE20 F012          	lfsr	2,18
  3211  000F00  5021               	movf	selectNextObject@s,w,c
  3212  000F02  26D9               	addwf	fsr2l,f,c
  3213  000F04  5022               	movf	selectNextObject@s+1,w,c
  3214  000F06  22DA               	addwfc	fsr2h,f,c
  3215  000F08  50DF               	movf	indf2,w,c
  3216  000F0A  6E49               	movwf	_LimitedRotation,c
  3217                           
  3218                           ;tetris.c: 228:     set_mS(0);
  3219  000F0C  0E00               	movlw	0
  3220  000F0E  6E0D               	movwf	set_mS@amount+1,c
  3221  000F10  0E00               	movlw	0
  3222  000F12  6E0C               	movwf	set_mS@amount,c
  3223  000F14  ECC5  F011         	call	_set_mS	;wreg free
  3224  000F18  0012               	return		;funcret
  3225  000F1A                     __end_of_selectNextObject:
  3226                           	opt callstack 0
  3227                           
  3228 ;; *************** function _memcpyvol *****************
  3229 ;; Defined at:
  3230 ;;		line 36 in file "shared_logic.c"
  3231 ;; Parameters:    Size  Location     Type
  3232 ;;  dest            2   11[COMRAM] PTR volatile void 
  3233 ;;		 -> tmpObjectData(16), ObjectData(16), 
  3234 ;;  src             2   13[COMRAM] PTR  void 
  3235 ;;		 -> SNAKE(16), ObjectData(16), shapes.graphic(16), shapes(133), 
  3236 ;;  n               2   15[COMRAM] unsigned int 
  3237 ;; Auto vars:     Size  Location     Type
  3238 ;;  s               2   19[COMRAM] PTR unsigned char 
  3239 ;;		 -> SNAKE(16), ObjectData(16), shapes.graphic(16), shapes(133), 
  3240 ;;  d               2   17[COMRAM] PTR unsigned char 
  3241 ;;		 -> tmpObjectData(16), ObjectData(16), 
  3242 ;; Return value:  Size  Location     Type
  3243 ;;                  2   11[COMRAM] PTR volatile void 
  3244 ;; Registers used:
  3245 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru
  3246 ;; Tracked objects:
  3247 ;;		On entry : 0/0
  3248 ;;		On exit  : 0/0
  3249 ;;		Unchanged: 0/0
  3250 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3251 ;;      Params:         6       0       0       0       0       0       0
  3252 ;;      Locals:         4       0       0       0       0       0       0
  3253 ;;      Temps:          0       0       0       0       0       0       0
  3254 ;;      Totals:        10       0       0       0       0       0       0
  3255 ;;Total ram usage:       10 bytes
  3256 ;; Hardware stack levels used:    1
  3257 ;; Hardware stack levels required when called:    4
  3258 ;; This function calls:
  3259 ;;		Nothing
  3260 ;; This function is called by:
  3261 ;;		_newRotation
  3262 ;;		_selectNextObject
  3263 ;;		_tetris_button_left
  3264 ;;		_snake_screen
  3265 ;; This function uses a non-reentrant model
  3266 ;;
  3267                           
  3268                           	psect	text21
  3269  001CF8                     __ptext21:
  3270                           	opt callstack 0
  3271  001CF8                     _memcpyvol:
  3272                           	opt callstack 24
  3273                           
  3274                           ;shared_logic.c: 36: volatile void *memcpyvol(volatile void *dest, volatile const void *
      +                          src, size_t n);shared_logic.c: 37: {;shared_logic.c: 38:     char *d = (char*)dest, *s =
      +                           (char*)src;
  3275                           
  3276                           ;incstack = 0
  3277  001CF8  C00C  F012         	movff	memcpyvol@dest,memcpyvol@d
  3278  001CFC  C00D  F013         	movff	memcpyvol@dest+1,memcpyvol@d+1
  3279  001D00  C00E  F014         	movff	memcpyvol@src,memcpyvol@s
  3280  001D04  C00F  F015         	movff	memcpyvol@src+1,memcpyvol@s+1
  3281                           
  3282                           ;shared_logic.c: 40:     while(n--)
  3283  001D08  D019               	goto	l2923
  3284  001D0A                     l2917:
  3285                           
  3286                           ;shared_logic.c: 41:         *d++ = *s++;
  3287  001D0A  C014  FFF6         	movff	memcpyvol@s,tblptrl
  3288  001D0E  C015  FFF7         	movff	memcpyvol@s+1,tblptrh
  3289  001D12  6AF8               	clrf	tblptru,c
  3290  001D14  C012  FFD9         	movff	memcpyvol@d,fsr2l
  3291  001D18  C013  FFDA         	movff	memcpyvol@d+1,fsr2h
  3292  001D1C  0E05               	movlw	(high __ramtop+-1)
  3293  001D1E  64F7               	cpfsgt	tblptrh,c
  3294  001D20  D003               	bra	u1917
  3295  001D22  0008               	tblrd		*
  3296  001D24  50F5               	movf	tablat,w,c
  3297  001D26  D005               	bra	u1910
  3298  001D28                     u1917:
  3299  001D28  CFF6 FFE9          	movff	tblptrl,fsr0l
  3300  001D2C  CFF7 FFEA          	movff	tblptrh,fsr0h
  3301  001D30  50EF               	movf	indf0,w,c
  3302  001D32                     u1910:
  3303  001D32  6EDF               	movwf	indf2,c
  3304  001D34  4A14               	infsnz	memcpyvol@s,f,c
  3305  001D36  2A15               	incf	memcpyvol@s+1,f,c
  3306  001D38  4A12               	infsnz	memcpyvol@d,f,c
  3307  001D3A  2A13               	incf	memcpyvol@d+1,f,c
  3308  001D3C                     l2923:
  3309                           
  3310                           ;shared_logic.c: 40:     while(n--)
  3311  001D3C  0610               	decf	memcpyvol@n,f,c
  3312  001D3E  A0D8               	btfss	status,0,c
  3313  001D40  0611               	decf	memcpyvol@n+1,f,c
  3314  001D42  2810               	incf	memcpyvol@n,w,c
  3315  001D44  E1E2               	bnz	l2917
  3316  001D46  2811               	incf	memcpyvol@n+1,w,c
  3317  001D48  B4D8               	btfsc	status,2,c
  3318  001D4A  0012               	return	
  3319  001D4C  D7DE               	goto	l2917
  3320  001D4E                     __end_of_memcpyvol:
  3321                           	opt callstack 0
  3322                           
  3323 ;; *************** function _collisionDetect *****************
  3324 ;; Defined at:
  3325 ;;		line 156 in file "shared_logic.c"
  3326 ;; Parameters:    Size  Location     Type
  3327 ;;  pSource         2   11[COMRAM] PTR volatile unsigned sh
  3328 ;;		 -> tmpObjectData(16), ObjectData(16), 
  3329 ;;  pTarget         2   13[COMRAM] PTR volatile unsigned sh
  3330 ;;		 -> BackgroundData(16), 
  3331 ;; Auto vars:     Size  Location     Type
  3332 ;;  i               1   23[COMRAM] unsigned char 
  3333 ;; Return value:  Size  Location     Type
  3334 ;;                  1    wreg      _Bool 
  3335 ;; Registers used:
  3336 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  3337 ;; Tracked objects:
  3338 ;;		On entry : 0/0
  3339 ;;		On exit  : 0/0
  3340 ;;		Unchanged: 0/0
  3341 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3342 ;;      Params:         4       0       0       0       0       0       0
  3343 ;;      Locals:         1       0       0       0       0       0       0
  3344 ;;      Temps:          8       0       0       0       0       0       0
  3345 ;;      Totals:        13       0       0       0       0       0       0
  3346 ;;Total ram usage:       13 bytes
  3347 ;; Hardware stack levels used:    1
  3348 ;; Hardware stack levels required when called:    4
  3349 ;; This function calls:
  3350 ;;		Nothing
  3351 ;; This function is called by:
  3352 ;;		_moveObjectDown
  3353 ;;		_tetris_button_left
  3354 ;;		_tetris_button_right
  3355 ;;		_tetris_button_up
  3356 ;; This function uses a non-reentrant model
  3357 ;;
  3358                           
  3359                           	psect	text22
  3360  001BDC                     __ptext22:
  3361                           	opt callstack 0
  3362  001BDC                     _collisionDetect:
  3363                           	opt callstack 22
  3364                           
  3365                           ;shared_logic.c: 156: _Bool collisionDetect(volatile uint16_t * pSource, volatile uint16
      +                          _t * pTarget);shared_logic.c: 157: {;shared_logic.c: 158:     for (uint8_t i = 0; i < 8;
      +                           i++)
  3366                           
  3367                           ;incstack = 0
  3368  001BDC  0E00               	movlw	0
  3369  001BDE  6E18               	movwf	collisionDetect@i,c
  3370  001BE0                     l3189:
  3371                           
  3372                           ;shared_logic.c: 159:         if (pSource[i] & pTarget[i])
  3373  001BE0  5018               	movf	collisionDetect@i,w,c
  3374  001BE2  0D02               	mullw	2
  3375  001BE4  CFF3 F010          	movff	prodl,??_collisionDetect
  3376  001BE8  CFF4 F011          	movff	prodh,??_collisionDetect+1
  3377  001BEC  5010               	movf	??_collisionDetect,w,c
  3378  001BEE  240E               	addwf	collisionDetect@pTarget,w,c
  3379  001BF0  6ED9               	movwf	fsr2l,c
  3380  001BF2  5011               	movf	??_collisionDetect+1,w,c
  3381  001BF4  200F               	addwfc	collisionDetect@pTarget+1,w,c
  3382  001BF6  6EDA               	movwf	fsr2h,c
  3383  001BF8  CFDE F012          	movff	postinc2,??_collisionDetect+2
  3384  001BFC  CFDD F013          	movff	postdec2,??_collisionDetect+3
  3385  001C00  5018               	movf	collisionDetect@i,w,c
  3386  001C02  0D02               	mullw	2
  3387  001C04  CFF3 F014          	movff	prodl,??_collisionDetect+4
  3388  001C08  CFF4 F015          	movff	prodh,??_collisionDetect+5
  3389  001C0C  5014               	movf	??_collisionDetect+4,w,c
  3390  001C0E  240C               	addwf	collisionDetect@pSource,w,c
  3391  001C10  6ED9               	movwf	fsr2l,c
  3392  001C12  5015               	movf	??_collisionDetect+5,w,c
  3393  001C14  200D               	addwfc	collisionDetect@pSource+1,w,c
  3394  001C16  6EDA               	movwf	fsr2h,c
  3395  001C18  CFDE F016          	movff	postinc2,??_collisionDetect+6
  3396  001C1C  CFDD F017          	movff	postdec2,??_collisionDetect+7
  3397  001C20  5012               	movf	??_collisionDetect+2,w,c
  3398  001C22  1616               	andwf	??_collisionDetect+6,f,c
  3399  001C24  5013               	movf	??_collisionDetect+3,w,c
  3400  001C26  1617               	andwf	??_collisionDetect+7,f,c
  3401  001C28  5016               	movf	??_collisionDetect+6,w,c
  3402  001C2A  1017               	iorwf	??_collisionDetect+7,w,c
  3403  001C2C  B4D8               	btfsc	status,2,c
  3404  001C2E  D002               	goto	l3195
  3405                           
  3406                           ;shared_logic.c: 160:             return 1;
  3407  001C30  0E01               	movlw	1
  3408  001C32  0012               	return	
  3409  001C34                     l3195:
  3410  001C34  2A18               	incf	collisionDetect@i,f,c
  3411  001C36  0E07               	movlw	7
  3412  001C38  6418               	cpfsgt	collisionDetect@i,c
  3413  001C3A  D7D2               	goto	l3189
  3414                           
  3415                           ;shared_logic.c: 161:     return 0;
  3416  001C3C  0E00               	movlw	0
  3417  001C3E  0012               	return		;funcret
  3418  001C40                     __end_of_collisionDetect:
  3419                           	opt callstack 0
  3420                           
  3421 ;; *************** function _checkForBottom *****************
  3422 ;; Defined at:
  3423 ;;		line 231 in file "tetris.c"
  3424 ;; Parameters:    Size  Location     Type
  3425 ;;  pObject         2   11[COMRAM] PTR volatile unsigned sh
  3426 ;;		 -> ObjectData(16), 
  3427 ;; Auto vars:     Size  Location     Type
  3428 ;;  i               1   17[COMRAM] unsigned char 
  3429 ;; Return value:  Size  Location     Type
  3430 ;;                  1    wreg      _Bool 
  3431 ;; Registers used:
  3432 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  3433 ;; Tracked objects:
  3434 ;;		On entry : 0/0
  3435 ;;		On exit  : 0/0
  3436 ;;		Unchanged: 0/0
  3437 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3438 ;;      Params:         2       0       0       0       0       0       0
  3439 ;;      Locals:         1       0       0       0       0       0       0
  3440 ;;      Temps:          4       0       0       0       0       0       0
  3441 ;;      Totals:         7       0       0       0       0       0       0
  3442 ;;Total ram usage:        7 bytes
  3443 ;; Hardware stack levels used:    1
  3444 ;; Hardware stack levels required when called:    4
  3445 ;; This function calls:
  3446 ;;		Nothing
  3447 ;; This function is called by:
  3448 ;;		_moveObjectDown
  3449 ;; This function uses a non-reentrant model
  3450 ;;
  3451                           
  3452                           	psect	text23
  3453  001F78                     __ptext23:
  3454                           	opt callstack 0
  3455  001F78                     _checkForBottom:
  3456                           	opt callstack 21
  3457                           
  3458                           ;tetris.c: 231: _Bool checkForBottom(volatile uint16_t * pObject);tetris.c: 232: {;tetri
      +                          s.c: 233:     for (uint8_t i = 0; i < 8; i++)
  3459                           
  3460                           ;incstack = 0
  3461  001F78  0E00               	movlw	0
  3462  001F7A  6E12               	movwf	checkForBottom@i,c
  3463  001F7C                     l2983:
  3464                           
  3465                           ;tetris.c: 234:         if (pObject[i] & (1<<15))
  3466  001F7C  5012               	movf	checkForBottom@i,w,c
  3467  001F7E  0D02               	mullw	2
  3468  001F80  CFF3 F00E          	movff	prodl,??_checkForBottom
  3469  001F84  CFF4 F00F          	movff	prodh,??_checkForBottom+1
  3470  001F88  500E               	movf	??_checkForBottom,w,c
  3471  001F8A  240C               	addwf	checkForBottom@pObject,w,c
  3472  001F8C  6ED9               	movwf	fsr2l,c
  3473  001F8E  500F               	movf	??_checkForBottom+1,w,c
  3474  001F90  200D               	addwfc	checkForBottom@pObject+1,w,c
  3475  001F92  6EDA               	movwf	fsr2h,c
  3476  001F94  CFDE F010          	movff	postinc2,??_checkForBottom+2
  3477  001F98  CFDD F011          	movff	postdec2,??_checkForBottom+3
  3478  001F9C  AE11               	btfss	??_checkForBottom+3,7,c
  3479  001F9E  D002               	goto	l2989
  3480                           
  3481                           ;tetris.c: 235:             return 1;
  3482  001FA0  0E01               	movlw	1
  3483  001FA2  0012               	return	
  3484  001FA4                     l2989:
  3485  001FA4  2A12               	incf	checkForBottom@i,f,c
  3486  001FA6  0E07               	movlw	7
  3487  001FA8  6412               	cpfsgt	checkForBottom@i,c
  3488  001FAA  D7E8               	goto	l2983
  3489                           
  3490                           ;tetris.c: 236:     return 0;
  3491  001FAC  0E00               	movlw	0
  3492  001FAE  0012               	return		;funcret
  3493  001FB0                     __end_of_checkForBottom:
  3494                           	opt callstack 0
  3495                           
  3496 ;; *************** function _checkRight *****************
  3497 ;; Defined at:
  3498 ;;		line 62 in file "buttons.c"
  3499 ;; Parameters:    Size  Location     Type
  3500 ;;  reset           1    wreg     _Bool 
  3501 ;; Auto vars:     Size  Location     Type
  3502 ;;  reset           1   11[COMRAM] _Bool 
  3503 ;; Return value:  Size  Location     Type
  3504 ;;                  1    wreg      _Bool 
  3505 ;; Registers used:
  3506 ;;		wreg, status,2
  3507 ;; Tracked objects:
  3508 ;;		On entry : 0/0
  3509 ;;		On exit  : 0/0
  3510 ;;		Unchanged: 0/0
  3511 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3512 ;;      Params:         0       0       0       0       0       0       0
  3513 ;;      Locals:         1       0       0       0       0       0       0
  3514 ;;      Temps:          0       0       0       0       0       0       0
  3515 ;;      Totals:         1       0       0       0       0       0       0
  3516 ;;Total ram usage:        1 bytes
  3517 ;; Hardware stack levels used:    1
  3518 ;; Hardware stack levels required when called:    4
  3519 ;; This function calls:
  3520 ;;		Nothing
  3521 ;; This function is called by:
  3522 ;;		_tetris_buttons
  3523 ;; This function uses a non-reentrant model
  3524 ;;
  3525                           
  3526                           	psect	text24
  3527  0020FA                     __ptext24:
  3528                           	opt callstack 0
  3529  0020FA                     _checkRight:
  3530                           	opt callstack 23
  3531                           
  3532                           ;incstack = 0
  3533                           ;checkRight@reset stored from wreg
  3534  0020FA  6E0C               	movwf	checkRight@reset,c
  3535                           
  3536                           ;buttons.c: 63:     if (Right_Debounced)
  3537  0020FC  504D               	movf	_Right_Debounced,w,c	;volatile
  3538  0020FE  B4D8               	btfsc	status,2,c
  3539  002100  D00E               	goto	l3585
  3540                           
  3541                           ;buttons.c: 64:     {;buttons.c: 65:         Right_Delay = 500;
  3542  002102  0E01               	movlw	1
  3543  002104  0100               	movlb	0	; () banked
  3544  002106  6FE5               	movwf	(_Right_Delay+1)& (0+255),b	;volatile
  3545  002108  0EF4               	movlw	244
  3546  00210A  6FE4               	movwf	_Right_Delay& (0+255),b	;volatile
  3547                           
  3548                           ;buttons.c: 66:         Right_Debounced = !reset;
  3549  00210C  500C               	movf	checkRight@reset,w,c
  3550  00210E  A4D8               	btfss	status,2,c
  3551  002110  D002               	goto	u2800
  3552  002112  0E01               	movlw	1
  3553  002114  D001               	goto	u2810
  3554  002116                     u2800:
  3555  002116  0E00               	movlw	0
  3556  002118                     u2810:
  3557  002118  6E4D               	movwf	_Right_Debounced,c	;volatile
  3558                           
  3559                           ; BSR set to: 0
  3560                           ;buttons.c: 67:         return 1;
  3561  00211A  0E01               	movlw	1
  3562  00211C  0012               	return	
  3563  00211E                     l3585:
  3564  00211E  0E00               	movlw	0
  3565  002120  0012               	return		;funcret
  3566  002122                     __end_of_checkRight:
  3567                           	opt callstack 0
  3568                           
  3569 ;; *************** function _checkLeft *****************
  3570 ;; Defined at:
  3571 ;;		line 53 in file "buttons.c"
  3572 ;; Parameters:    Size  Location     Type
  3573 ;;  reset           1    wreg     _Bool 
  3574 ;; Auto vars:     Size  Location     Type
  3575 ;;  reset           1   11[COMRAM] _Bool 
  3576 ;; Return value:  Size  Location     Type
  3577 ;;                  1    wreg      _Bool 
  3578 ;; Registers used:
  3579 ;;		wreg, status,2
  3580 ;; Tracked objects:
  3581 ;;		On entry : 0/0
  3582 ;;		On exit  : 0/0
  3583 ;;		Unchanged: 0/0
  3584 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3585 ;;      Params:         0       0       0       0       0       0       0
  3586 ;;      Locals:         1       0       0       0       0       0       0
  3587 ;;      Temps:          0       0       0       0       0       0       0
  3588 ;;      Totals:         1       0       0       0       0       0       0
  3589 ;;Total ram usage:        1 bytes
  3590 ;; Hardware stack levels used:    1
  3591 ;; Hardware stack levels required when called:    4
  3592 ;; This function calls:
  3593 ;;		Nothing
  3594 ;; This function is called by:
  3595 ;;		_tetris_buttons
  3596 ;; This function uses a non-reentrant model
  3597 ;;
  3598                           
  3599                           	psect	text25
  3600  002122                     __ptext25:
  3601                           	opt callstack 0
  3602  002122                     _checkLeft:
  3603                           	opt callstack 23
  3604                           
  3605                           ;incstack = 0
  3606                           ;checkLeft@reset stored from wreg
  3607  002122  6E0C               	movwf	checkLeft@reset,c
  3608                           
  3609                           ;buttons.c: 54:     if (Left_Debounced)
  3610  002124  504E               	movf	_Left_Debounced,w,c	;volatile
  3611  002126  B4D8               	btfsc	status,2,c
  3612  002128  D00E               	goto	l3571
  3613                           
  3614                           ;buttons.c: 55:     {;buttons.c: 56:         Left_Delay = 500;
  3615  00212A  0E01               	movlw	1
  3616  00212C  0100               	movlb	0	; () banked
  3617  00212E  6FE7               	movwf	(_Left_Delay+1)& (0+255),b	;volatile
  3618  002130  0EF4               	movlw	244
  3619  002132  6FE6               	movwf	_Left_Delay& (0+255),b	;volatile
  3620                           
  3621                           ;buttons.c: 57:         Left_Debounced = !reset;
  3622  002134  500C               	movf	checkLeft@reset,w,c
  3623  002136  A4D8               	btfss	status,2,c
  3624  002138  D002               	goto	u2770
  3625  00213A  0E01               	movlw	1
  3626  00213C  D001               	goto	u2780
  3627  00213E                     u2770:
  3628  00213E  0E00               	movlw	0
  3629  002140                     u2780:
  3630  002140  6E4E               	movwf	_Left_Debounced,c	;volatile
  3631                           
  3632                           ; BSR set to: 0
  3633                           ;buttons.c: 58:         return 1;
  3634  002142  0E01               	movlw	1
  3635  002144  0012               	return	
  3636  002146                     l3571:
  3637  002146  0E00               	movlw	0
  3638  002148  0012               	return		;funcret
  3639  00214A                     __end_of_checkLeft:
  3640                           	opt callstack 0
  3641                           
  3642 ;; *************** function _initialise_tetris *****************
  3643 ;; Defined at:
  3644 ;;		line 343 in file "tetris.c"
  3645 ;; Parameters:    Size  Location     Type
  3646 ;;		None
  3647 ;; Auto vars:     Size  Location     Type
  3648 ;;		None
  3649 ;; Return value:  Size  Location     Type
  3650 ;;                  1    wreg      void 
  3651 ;; Registers used:
  3652 ;;		wreg, status,2
  3653 ;; Tracked objects:
  3654 ;;		On entry : 0/0
  3655 ;;		On exit  : 0/0
  3656 ;;		Unchanged: 0/0
  3657 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3658 ;;      Params:         0       0       0       0       0       0       0
  3659 ;;      Locals:         0       0       0       0       0       0       0
  3660 ;;      Temps:          0       0       0       0       0       0       0
  3661 ;;      Totals:         0       0       0       0       0       0       0
  3662 ;;Total ram usage:        0 bytes
  3663 ;; Hardware stack levels used:    1
  3664 ;; Hardware stack levels required when called:    4
  3665 ;; This function calls:
  3666 ;;		Nothing
  3667 ;; This function is called by:
  3668 ;;		_tetris_main
  3669 ;; This function uses a non-reentrant model
  3670 ;;
  3671                           
  3672                           	psect	text26
  3673  002210                     __ptext26:
  3674                           	opt callstack 0
  3675  002210                     _initialise_tetris:
  3676                           	opt callstack 24
  3677                           
  3678                           ;tetris.c: 344:     OriginX = 0;
  3679                           
  3680                           ;incstack = 0
  3681  002210  0E00               	movlw	0
  3682  002212  6E43               	movwf	_OriginX,c
  3683                           
  3684                           ;tetris.c: 345:     OriginY = 0;
  3685  002214  0E00               	movlw	0
  3686  002216  6E42               	movwf	_OriginY,c
  3687                           
  3688                           ;tetris.c: 347:     NumberOfLines = 0;
  3689  002218  0E00               	movlw	0
  3690  00221A  6E48               	movwf	_NumberOfLines,c
  3691                           
  3692                           ;tetris.c: 349:     DropObject = 0;
  3693  00221C  0E00               	movlw	0
  3694  00221E  6E44               	movwf	_DropObject,c	;volatile
  3695                           
  3696                           ;tetris.c: 350:     CheckForNewLines = 0;
  3697  002220  0E00               	movlw	0
  3698  002222  6E46               	movwf	_CheckForNewLines,c
  3699                           
  3700                           ;tetris.c: 351:     randomobjects[7] = 255;
  3701  002224  0100               	movlb	0	; () banked
  3702  002226  6987               	setf	(_randomobjects+7)& (0+255),b
  3703                           
  3704                           ;tetris.c: 352:     countblocks = 7;
  3705  002228  0E07               	movlw	7
  3706  00222A  6E45               	movwf	_countblocks,c
  3707                           
  3708                           ;tetris.c: 353:     game = 1;
  3709  00222C  0E01               	movlw	1
  3710  00222E  6E41               	movwf	_game,c	;volatile
  3711                           
  3712                           ; BSR set to: 0
  3713  002230  0012               	return		;funcret
  3714  002232                     __end_of_initialise_tetris:
  3715                           	opt callstack 0
  3716                           
  3717 ;; *************** function _checkForLines *****************
  3718 ;; Defined at:
  3719 ;;		line 240 in file "tetris.c"
  3720 ;; Parameters:    Size  Location     Type
  3721 ;;  pObject         2   34[COMRAM] PTR volatile unsigned sh
  3722 ;;		 -> BackgroundData(16), 
  3723 ;; Auto vars:     Size  Location     Type
  3724 ;;  y               1   45[COMRAM] unsigned char 
  3725 ;;  x               1   44[COMRAM] unsigned char 
  3726 ;;  pixels          1   43[COMRAM] unsigned char 
  3727 ;; Return value:  Size  Location     Type
  3728 ;;                  1    wreg      void 
  3729 ;; Registers used:
  3730 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3731 ;; Tracked objects:
  3732 ;;		On entry : 0/0
  3733 ;;		On exit  : 0/0
  3734 ;;		Unchanged: 0/0
  3735 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3736 ;;      Params:         2       0       0       0       0       0       0
  3737 ;;      Locals:         3       0       0       0       0       0       0
  3738 ;;      Temps:          7       0       0       0       0       0       0
  3739 ;;      Totals:        12       0       0       0       0       0       0
  3740 ;;Total ram usage:       12 bytes
  3741 ;; Hardware stack levels used:    1
  3742 ;; Hardware stack levels required when called:    5
  3743 ;; This function calls:
  3744 ;;		_removeLine
  3745 ;; This function is called by:
  3746 ;;		_tetris_main
  3747 ;; This function uses a non-reentrant model
  3748 ;;
  3749                           
  3750                           	psect	text27
  3751  001824                     __ptext27:
  3752                           	opt callstack 0
  3753  001824                     _checkForLines:
  3754                           	opt callstack 23
  3755                           
  3756                           ;tetris.c: 240: void checkForLines(volatile uint16_t * pObject);tetris.c: 241: {;tetris.
      +                          c: 242:     uint8_t x, y, pixels;;tetris.c: 244:     for (y = 0; y < 16; y++)
  3757                           
  3758                           ; BSR set to: 0
  3759                           ;incstack = 0
  3760  001824  0E00               	movlw	0
  3761  001826  6E2E               	movwf	checkForLines@y,c
  3762  001828                     l3737:
  3763                           
  3764                           ;tetris.c: 245:     {;tetris.c: 246:         pixels = 0;
  3765  001828  0E00               	movlw	0
  3766  00182A  6E2C               	movwf	checkForLines@pixels,c
  3767                           
  3768                           ;tetris.c: 247:         for (x = 0; x < 8; x++)
  3769  00182C  0E00               	movlw	0
  3770  00182E  6E2D               	movwf	checkForLines@x,c
  3771  001830                     l3743:
  3772                           
  3773                           ;tetris.c: 248:             if (pObject[x] & (1<<y))
  3774  001830  502D               	movf	checkForLines@x,w,c
  3775  001832  0D02               	mullw	2
  3776  001834  CFF3 F025          	movff	prodl,??_checkForLines
  3777  001838  CFF4 F026          	movff	prodh,??_checkForLines+1
  3778  00183C  5025               	movf	??_checkForLines,w,c
  3779  00183E  2423               	addwf	checkForLines@pObject,w,c
  3780  001840  6ED9               	movwf	fsr2l,c
  3781  001842  5026               	movf	??_checkForLines+1,w,c
  3782  001844  2024               	addwfc	checkForLines@pObject+1,w,c
  3783  001846  6EDA               	movwf	fsr2h,c
  3784  001848  CFDE F027          	movff	postinc2,??_checkForLines+2
  3785  00184C  CFDD F028          	movff	postdec2,??_checkForLines+3
  3786  001850  C02E  F029         	movff	checkForLines@y,??_checkForLines+4
  3787  001854  0E01               	movlw	1
  3788  001856  6E2A               	movwf	(??_checkForLines+5)& (0+255),c
  3789  001858  0E00               	movlw	0
  3790  00185A  6E2B               	movwf	(??_checkForLines+6)& (0+255),c
  3791  00185C  2A29               	incf	??_checkForLines+4,f,c
  3792  00185E  D003               	goto	u3024
  3793  001860                     u3025:
  3794  001860  90D8               	bcf	status,0,c
  3795  001862  362A               	rlcf	??_checkForLines+5,f,c
  3796  001864  362B               	rlcf	??_checkForLines+6,f,c
  3797  001866                     u3024:
  3798  001866  2E29               	decfsz	??_checkForLines+4,f,c
  3799  001868  D7FB               	goto	u3025
  3800  00186A  5027               	movf	??_checkForLines+2,w,c
  3801  00186C  162A               	andwf	??_checkForLines+5,f,c
  3802  00186E  5028               	movf	??_checkForLines+3,w,c
  3803  001870  162B               	andwf	??_checkForLines+6,f,c
  3804  001872  502A               	movf	??_checkForLines+5,w,c
  3805  001874  102B               	iorwf	??_checkForLines+6,w,c
  3806  001876  A4D8               	btfss	status,2,c
  3807                           
  3808                           ;tetris.c: 249:                 pixels++;
  3809  001878  2A2C               	incf	checkForLines@pixels,f,c
  3810  00187A  2A2D               	incf	checkForLines@x,f,c
  3811  00187C  0E07               	movlw	7
  3812  00187E  642D               	cpfsgt	checkForLines@x,c
  3813  001880  D7D7               	goto	l3743
  3814                           
  3815                           ;tetris.c: 250:         if (pixels == 8)
  3816  001882  0E08               	movlw	8
  3817  001884  182C               	xorwf	checkForLines@pixels,w,c
  3818  001886  A4D8               	btfss	status,2,c
  3819  001888  D009               	goto	l3755
  3820                           
  3821                           ;tetris.c: 251:         {;tetris.c: 252:             removeLine(pObject, y);
  3822  00188A  C023  F00C         	movff	checkForLines@pObject,removeLine@pObject
  3823  00188E  C024  F00D         	movff	checkForLines@pObject+1,removeLine@pObject+1
  3824  001892  C02E  F00E         	movff	checkForLines@y,removeLine@pY
  3825  001896  EC8D  F007         	call	_removeLine	;wreg free
  3826                           
  3827                           ;tetris.c: 253:             NumberOfLines++;
  3828  00189A  2A48               	incf	_NumberOfLines,f,c
  3829  00189C                     l3755:
  3830                           
  3831                           ;tetris.c: 255:     }
  3832  00189C  2A2E               	incf	checkForLines@y,f,c
  3833  00189E  0E0F               	movlw	15
  3834  0018A0  642E               	cpfsgt	checkForLines@y,c
  3835  0018A2  D7C2               	goto	l3737
  3836  0018A4  0012               	return	
  3837  0018A6                     __end_of_checkForLines:
  3838                           	opt callstack 0
  3839                           
  3840 ;; *************** function _removeLine *****************
  3841 ;; Defined at:
  3842 ;;		line 178 in file "shared_logic.c"
  3843 ;; Parameters:    Size  Location     Type
  3844 ;;  pObject         2   11[COMRAM] PTR volatile unsigned sh
  3845 ;;		 -> BackgroundData(16), 
  3846 ;;  pY              1   13[COMRAM] unsigned char 
  3847 ;; Auto vars:     Size  Location     Type
  3848 ;;  x               1   33[COMRAM] unsigned char 
  3849 ;;  y               1   32[COMRAM] unsigned char 
  3850 ;;  currentLine     1   31[COMRAM] unsigned char 
  3851 ;; Return value:  Size  Location     Type
  3852 ;;                  1    wreg      void 
  3853 ;; Registers used:
  3854 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  3855 ;; Tracked objects:
  3856 ;;		On entry : 0/0
  3857 ;;		On exit  : 0/0
  3858 ;;		Unchanged: 0/0
  3859 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3860 ;;      Params:         3       0       0       0       0       0       0
  3861 ;;      Locals:         3       0       0       0       0       0       0
  3862 ;;      Temps:         17       0       0       0       0       0       0
  3863 ;;      Totals:        23       0       0       0       0       0       0
  3864 ;;Total ram usage:       23 bytes
  3865 ;; Hardware stack levels used:    1
  3866 ;; Hardware stack levels required when called:    4
  3867 ;; This function calls:
  3868 ;;		Nothing
  3869 ;; This function is called by:
  3870 ;;		_checkForLines
  3871 ;; This function uses a non-reentrant model
  3872 ;;
  3873                           
  3874                           	psect	text28
  3875  000F1A                     __ptext28:
  3876                           	opt callstack 0
  3877  000F1A                     _removeLine:
  3878                           	opt callstack 23
  3879                           
  3880                           ;shared_logic.c: 178: void removeLine(volatile uint16_t * pObject, uint8_t pY);shared_lo
      +                          gic.c: 179: {;shared_logic.c: 180:     uint8_t x, y, currentLine;;shared_logic.c: 183:  
      +                             for (y = pY-1; y < pY; y--)
  3881                           
  3882                           ;incstack = 0
  3883  000F1A  040E               	decf	removeLine@pY,w,c
  3884  000F1C  6E21               	movwf	removeLine@y,c
  3885  000F1E  D068               	goto	l3485
  3886  000F20                     l3469:
  3887                           
  3888                           ;shared_logic.c: 184:     {;shared_logic.c: 185:         currentLine = y + 1;
  3889  000F20  2821               	incf	removeLine@y,w,c
  3890  000F22  6E20               	movwf	removeLine@currentLine,c
  3891                           
  3892                           ;shared_logic.c: 186:         for (x = 0; x < 8; x++)
  3893  000F24  0E00               	movlw	0
  3894  000F26  6E22               	movwf	removeLine@x,c
  3895  000F28                     l3477:
  3896                           
  3897                           ;shared_logic.c: 187:             pObject[x] = (pObject[x] & ~(1<<currentLine)) | ((((pO
      +                          bject[x] >> y) & 1)&1)<<currentLine);
  3898  000F28  C020  F00F         	movff	removeLine@currentLine,??_removeLine
  3899  000F2C  C021  F010         	movff	removeLine@y,??_removeLine+1
  3900  000F30  5022               	movf	removeLine@x,w,c
  3901  000F32  0D02               	mullw	2
  3902  000F34  CFF3 F011          	movff	prodl,??_removeLine+2
  3903  000F38  CFF4 F012          	movff	prodh,??_removeLine+3
  3904  000F3C  5011               	movf	??_removeLine+2,w,c
  3905  000F3E  240C               	addwf	removeLine@pObject,w,c
  3906  000F40  6ED9               	movwf	fsr2l,c
  3907  000F42  5012               	movf	??_removeLine+3,w,c
  3908  000F44  200D               	addwfc	removeLine@pObject+1,w,c
  3909  000F46  6EDA               	movwf	fsr2h,c
  3910  000F48  CFDE F013          	movff	postinc2,??_removeLine+4
  3911  000F4C  CFDD F014          	movff	postdec2,??_removeLine+5
  3912  000F50  2A10               	incf	??_removeLine+1,f,c
  3913  000F52  D003               	goto	u2574
  3914  000F54                     u2575:
  3915  000F54  90D8               	bcf	status,0,c
  3916  000F56  3214               	rrcf	??_removeLine+5,f,c
  3917  000F58  3213               	rrcf	??_removeLine+4,f,c
  3918  000F5A                     u2574:
  3919  000F5A  2E10               	decfsz	??_removeLine+1,f,c
  3920  000F5C  D7FB               	goto	u2575
  3921  000F5E  0E01               	movlw	1
  3922  000F60  1613               	andwf	??_removeLine+4,f,c
  3923  000F62  0E00               	movlw	0
  3924  000F64  1614               	andwf	??_removeLine+5,f,c
  3925  000F66  2A0F               	incf	??_removeLine,f,c
  3926  000F68  D003               	goto	u2584
  3927  000F6A                     u2585:
  3928  000F6A  90D8               	bcf	status,0,c
  3929  000F6C  3613               	rlcf	??_removeLine+4,f,c
  3930  000F6E  3614               	rlcf	??_removeLine+5,f,c
  3931  000F70                     u2584:
  3932  000F70  2E0F               	decfsz	??_removeLine,f,c
  3933  000F72  D7FB               	goto	u2585
  3934  000F74  5022               	movf	removeLine@x,w,c
  3935  000F76  0D02               	mullw	2
  3936  000F78  CFF3 F015          	movff	prodl,??_removeLine+6
  3937  000F7C  CFF4 F016          	movff	prodh,??_removeLine+7
  3938  000F80  5015               	movf	??_removeLine+6,w,c
  3939  000F82  240C               	addwf	removeLine@pObject,w,c
  3940  000F84  6ED9               	movwf	fsr2l,c
  3941  000F86  5016               	movf	??_removeLine+7,w,c
  3942  000F88  200D               	addwfc	removeLine@pObject+1,w,c
  3943  000F8A  6EDA               	movwf	fsr2h,c
  3944  000F8C  CFDE F017          	movff	postinc2,??_removeLine+8
  3945  000F90  CFDD F018          	movff	postdec2,??_removeLine+9
  3946  000F94  C020  F019         	movff	removeLine@currentLine,??_removeLine+10
  3947  000F98  0E01               	movlw	1
  3948  000F9A  6E1A               	movwf	(??_removeLine+11)& (0+255),c
  3949  000F9C  0E00               	movlw	0
  3950  000F9E  6E1B               	movwf	(??_removeLine+12)& (0+255),c
  3951  000FA0  2A19               	incf	??_removeLine+10,f,c
  3952  000FA2  D003               	goto	u2594
  3953  000FA4                     u2595:
  3954  000FA4  90D8               	bcf	status,0,c
  3955  000FA6  361A               	rlcf	??_removeLine+11,f,c
  3956  000FA8  361B               	rlcf	??_removeLine+12,f,c
  3957  000FAA                     u2594:
  3958  000FAA  2E19               	decfsz	??_removeLine+10,f,c
  3959  000FAC  D7FB               	goto	u2595
  3960  000FAE  1C1A               	comf	??_removeLine+11,w,c
  3961  000FB0  6E1C               	movwf	(??_removeLine+13)& (0+255),c
  3962  000FB2  1C1B               	comf	??_removeLine+12,w,c
  3963  000FB4  6E1D               	movwf	(??_removeLine+14)& (0+255),c
  3964  000FB6  5017               	movf	??_removeLine+8,w,c
  3965  000FB8  161C               	andwf	??_removeLine+13,f,c
  3966  000FBA  5018               	movf	??_removeLine+9,w,c
  3967  000FBC  161D               	andwf	??_removeLine+14,f,c
  3968  000FBE  5013               	movf	??_removeLine+4,w,c
  3969  000FC0  121C               	iorwf	??_removeLine+13,f,c
  3970  000FC2  5014               	movf	??_removeLine+5,w,c
  3971  000FC4  121D               	iorwf	??_removeLine+14,f,c
  3972  000FC6  5022               	movf	removeLine@x,w,c
  3973  000FC8  0D02               	mullw	2
  3974  000FCA  CFF3 F01E          	movff	prodl,??_removeLine+15
  3975  000FCE  CFF4 F01F          	movff	prodh,??_removeLine+16
  3976  000FD2  501E               	movf	??_removeLine+15,w,c
  3977  000FD4  240C               	addwf	removeLine@pObject,w,c
  3978  000FD6  6ED9               	movwf	fsr2l,c
  3979  000FD8  501F               	movf	??_removeLine+16,w,c
  3980  000FDA  200D               	addwfc	removeLine@pObject+1,w,c
  3981  000FDC  6EDA               	movwf	fsr2h,c
  3982  000FDE  C01C  FFDE         	movff	??_removeLine+13,postinc2
  3983  000FE2  C01D  FFDD         	movff	??_removeLine+14,postdec2
  3984  000FE6  2A22               	incf	removeLine@x,f,c
  3985  000FE8  0E07               	movlw	7
  3986  000FEA  6422               	cpfsgt	removeLine@x,c
  3987  000FEC  D79D               	goto	l3477
  3988                           
  3989                           ;shared_logic.c: 189:     }
  3990  000FEE  0621               	decf	removeLine@y,f,c
  3991  000FF0                     l3485:
  3992  000FF0  500E               	movf	removeLine@pY,w,c
  3993  000FF2  5C21               	subwf	removeLine@y,w,c
  3994  000FF4  A0D8               	btfss	status,0,c
  3995  000FF6  D794               	goto	l3469
  3996                           
  3997                           ;shared_logic.c: 191:     for (x = 0; x < 8; x++)
  3998  000FF8  0E00               	movlw	0
  3999  000FFA  6E22               	movwf	removeLine@x,c
  4000  000FFC                     l3493:
  4001                           
  4002                           ;shared_logic.c: 192:         pObject[x] &= ~(1<<0);
  4003  000FFC  5022               	movf	removeLine@x,w,c
  4004  000FFE  0D02               	mullw	2
  4005  001000  CFF3 F00F          	movff	prodl,??_removeLine
  4006  001004  CFF4 F010          	movff	prodh,??_removeLine+1
  4007  001008  500F               	movf	??_removeLine,w,c
  4008  00100A  240C               	addwf	removeLine@pObject,w,c
  4009  00100C  6ED9               	movwf	fsr2l,c
  4010  00100E  5010               	movf	??_removeLine+1,w,c
  4011  001010  200D               	addwfc	removeLine@pObject+1,w,c
  4012  001012  6EDA               	movwf	fsr2h,c
  4013  001014  0EFE               	movlw	254
  4014  001016  16DE               	andwf	postinc2,f,c
  4015  001018  0EFF               	movlw	255
  4016  00101A  16DD               	andwf	postdec2,f,c
  4017  00101C  2A22               	incf	removeLine@x,f,c
  4018  00101E  0E07               	movlw	7
  4019  001020  6422               	cpfsgt	removeLine@x,c
  4020  001022  D7EC               	goto	l3493
  4021  001024  0012               	return	
  4022  001026                     __end_of_removeLine:
  4023                           	opt callstack 0
  4024                           
  4025 ;; *************** function _snake_main *****************
  4026 ;; Defined at:
  4027 ;;		line 176 in file "snake.c"
  4028 ;; Parameters:    Size  Location     Type
  4029 ;;		None
  4030 ;; Auto vars:     Size  Location     Type
  4031 ;;  LastHighScor    1   40[COMRAM] unsigned char 
  4032 ;; Return value:  Size  Location     Type
  4033 ;;                  1    wreg      void 
  4034 ;; Registers used:
  4035 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4036 ;; Tracked objects:
  4037 ;;		On entry : 0/0
  4038 ;;		On exit  : 0/0
  4039 ;;		Unchanged: 0/0
  4040 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4041 ;;      Params:         0       0       0       0       0       0       0
  4042 ;;      Locals:         1       0       0       0       0       0       0
  4043 ;;      Temps:          0       0       0       0       0       0       0
  4044 ;;      Totals:         1       0       0       0       0       0       0
  4045 ;;Total ram usage:        1 bytes
  4046 ;; Hardware stack levels used:    1
  4047 ;; Hardware stack levels required when called:    9
  4048 ;; This function calls:
  4049 ;;		_MoveSnakes
  4050 ;;		_readHighScore
  4051 ;;		_show_score
  4052 ;;		_writeHighScore
  4053 ;; This function is called by:
  4054 ;;		_mainGameLoop
  4055 ;; This function uses a non-reentrant model
  4056 ;;
  4057                           
  4058                           	psect	text29
  4059  001EC4                     __ptext29:
  4060                           	opt callstack 0
  4061  001EC4                     _snake_main:
  4062                           	opt callstack 20
  4063                           
  4064                           ;snake.c: 177:     uint8_t LastHighScore = readHighScore(1);
  4065                           
  4066                           ;incstack = 0
  4067  001EC4  0E01               	movlw	1
  4068  001EC6  ECB9  F010         	call	_readHighScore
  4069  001ECA  6E29               	movwf	snake_main@LastHighScore,c
  4070                           
  4071                           ;snake.c: 178:     show_score(LastHighScore);
  4072  001ECC  5029               	movf	snake_main@LastHighScore,w,c
  4073  001ECE  ECBC  F005         	call	_show_score
  4074                           
  4075                           ;snake.c: 179:     EndOfGameSnake = 0;
  4076  001ED2  0E00               	movlw	0
  4077  001ED4  6E3B               	movwf	_EndOfGameSnake,c	;volatile
  4078  001ED6                     l5147:
  4079                           
  4080                           ;snake.c: 181:         if (moveSnake == 1)
  4081  001ED6  0440               	decf	_moveSnake,w,c	;volatile
  4082  001ED8  A4D8               	btfss	status,2,c
  4083  001EDA  D004               	goto	l5153
  4084                           
  4085                           ;snake.c: 182:         {;snake.c: 183:             moveSnake = 0;
  4086  001EDC  0E00               	movlw	0
  4087  001EDE  6E40               	movwf	_moveSnake,c	;volatile
  4088                           
  4089                           ;snake.c: 184:             MoveSnakes();
  4090  001EE0  EC48  F004         	call	_MoveSnakes	;wreg free
  4091  001EE4                     l5153:
  4092                           
  4093                           ;snake.c: 186:     } while(!EndOfGameSnake);
  4094  001EE4  503B               	movf	_EndOfGameSnake,w,c	;volatile
  4095  001EE6  B4D8               	btfsc	status,2,c
  4096  001EE8  D7F6               	goto	l5147
  4097                           
  4098                           ;snake.c: 187:     writeHighScore(1, LastHighScore, snakeLength);
  4099  001EEA  C029  F00E         	movff	snake_main@LastHighScore,writeHighScore@highscore
  4100  001EEE  C03F  F00F         	movff	_snakeLength,writeHighScore@scored
  4101  001EF2  0E01               	movlw	1
  4102  001EF4  EC68  F011         	call	_writeHighScore
  4103                           
  4104                           ;snake.c: 188:     show_score(snakeLength);
  4105  001EF8  503F               	movf	_snakeLength,w,c
  4106  001EFA  ECBC  F005         	call	_show_score
  4107  001EFE  0012               	return		;funcret
  4108  001F00                     __end_of_snake_main:
  4109                           	opt callstack 0
  4110                           
  4111 ;; *************** function _writeHighScore *****************
  4112 ;; Defined at:
  4113 ;;		line 214 in file "shared_logic.c"
  4114 ;; Parameters:    Size  Location     Type
  4115 ;;  adress          1    wreg     unsigned char 
  4116 ;;  highscore       1   13[COMRAM] unsigned char 
  4117 ;;  scored          1   14[COMRAM] unsigned char 
  4118 ;; Auto vars:     Size  Location     Type
  4119 ;;  adress          1   15[COMRAM] unsigned char 
  4120 ;; Return value:  Size  Location     Type
  4121 ;;                  1    wreg      void 
  4122 ;; Registers used:
  4123 ;;		wreg, status,2, status,0, cstack
  4124 ;; Tracked objects:
  4125 ;;		On entry : 0/0
  4126 ;;		On exit  : 0/0
  4127 ;;		Unchanged: 0/0
  4128 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4129 ;;      Params:         2       0       0       0       0       0       0
  4130 ;;      Locals:         1       0       0       0       0       0       0
  4131 ;;      Temps:          0       0       0       0       0       0       0
  4132 ;;      Totals:         3       0       0       0       0       0       0
  4133 ;;Total ram usage:        3 bytes
  4134 ;; Hardware stack levels used:    1
  4135 ;; Hardware stack levels required when called:    6
  4136 ;; This function calls:
  4137 ;;		_WriteEEByte
  4138 ;; This function is called by:
  4139 ;;		_tetris_main
  4140 ;;		_snake_main
  4141 ;; This function uses a non-reentrant model
  4142 ;;
  4143                           
  4144                           	psect	text30
  4145  0022D0                     __ptext30:
  4146                           	opt callstack 0
  4147  0022D0                     _writeHighScore:
  4148                           	opt callstack 22
  4149                           
  4150                           ;incstack = 0
  4151                           ;writeHighScore@adress stored from wreg
  4152  0022D0  6E10               	movwf	writeHighScore@adress,c
  4153                           
  4154                           ;shared_logic.c: 214: void writeHighScore(uint8_t adress, uint8_t highscore, uint8_t sco
      +                          red);shared_logic.c: 215: {;shared_logic.c: 216:     if (scored > highscore){
  4155  0022D2  500F               	movf	writeHighScore@scored,w,c
  4156  0022D4  5C0E               	subwf	writeHighScore@highscore,w,c
  4157  0022D6  B0D8               	btfsc	status,0,c
  4158  0022D8  0012               	return	
  4159                           
  4160                           ;shared_logic.c: 217:         WriteEEByte(adress,scored);
  4161  0022DA  C00F  F00C         	movff	writeHighScore@scored,WriteEEByte@data
  4162  0022DE  5010               	movf	writeHighScore@adress,w,c
  4163  0022E0  EC0F  F010         	call	_WriteEEByte
  4164  0022E4  0012               	return		;funcret
  4165  0022E6                     __end_of_writeHighScore:
  4166                           	opt callstack 0
  4167                           
  4168 ;; *************** function _show_score *****************
  4169 ;; Defined at:
  4170 ;;		line 221 in file "shared_logic.c"
  4171 ;; Parameters:    Size  Location     Type
  4172 ;;  score           1    wreg     unsigned char 
  4173 ;; Auto vars:     Size  Location     Type
  4174 ;;  score           1   48[BANK2 ] unsigned char 
  4175 ;;  tmpObjectDat   16   32[BANK2 ] unsigned short [8]
  4176 ;;  Numberscreen   16   16[BANK2 ] unsigned short [8]
  4177 ;;  mask           16    0[BANK2 ] unsigned short [8]
  4178 ;;  number          4   50[BANK2 ] unsigned char [4]
  4179 ;;  i               1   54[BANK2 ] unsigned char 
  4180 ;;  currentNumbe    1   49[BANK2 ] unsigned char 
  4181 ;; Return value:  Size  Location     Type
  4182 ;;                  1    wreg      void 
  4183 ;; Registers used:
  4184 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4185 ;; Tracked objects:
  4186 ;;		On entry : 0/0
  4187 ;;		On exit  : 0/0
  4188 ;;		Unchanged: 0/0
  4189 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4190 ;;      Params:         0       0       0       0       0       0       0
  4191 ;;      Locals:         0       0       0      55       0       0       0
  4192 ;;      Temps:          0       0       0       0       0       0       0
  4193 ;;      Totals:         0       0       0      55       0       0       0
  4194 ;;Total ram usage:       55 bytes
  4195 ;; Hardware stack levels used:    1
  4196 ;; Hardware stack levels required when called:    7
  4197 ;; This function calls:
  4198 ;;		_checkDown
  4199 ;;		_clearArray
  4200 ;;		_getNumber
  4201 ;;		_itoa
  4202 ;;		_mergeObjects
  4203 ;;		_moveObject
  4204 ;;		_pauseButtons
  4205 ;;		_pauseMultiplexing
  4206 ;;		_resumeButtons
  4207 ;;		_resumeMultiplexing
  4208 ;;		_set_screen
  4209 ;; This function is called by:
  4210 ;;		_tetris_main
  4211 ;;		_snake_main
  4212 ;; This function uses a non-reentrant model
  4213 ;;
  4214                           
  4215                           	psect	text31
  4216  000B78                     __ptext31:
  4217                           	opt callstack 0
  4218  000B78                     _show_score:
  4219                           	opt callstack 21
  4220                           
  4221                           ;incstack = 0
  4222                           ;show_score@score stored from wreg
  4223  000B78  0102               	movlb	2	; () banked
  4224  000B7A  6FB5               	movwf	show_score@score& (0+255),b
  4225                           
  4226                           ;shared_logic.c: 221: void show_score(uint8_t score);shared_logic.c: 222: {;shared_logic
      +                          .c: 223:     uint16_t tmpObjectData[8];;shared_logic.c: 224:     uint16_t Numberscreen[8
      +                          ];;shared_logic.c: 225:     uint8_t i, currentNumber;;shared_logic.c: 226:     char numb
      +                          er[4];;shared_logic.c: 228:     clearArray(tmpObjectData, 8);
  4227  000B7C  0EA5               	movlw	low show_score@tmpObjectData
  4228  000B7E  6E0C               	movwf	clearArray@pArray,c
  4229  000B80  0E02               	movlw	high show_score@tmpObjectData
  4230  000B82  6E0D               	movwf	clearArray@pArray+1,c
  4231  000B84  0E00               	movlw	0
  4232  000B86  6E0F               	movwf	clearArray@size+1,c
  4233  000B88  0E08               	movlw	8
  4234  000B8A  6E0E               	movwf	clearArray@size,c
  4235  000B8C  EC9E  F00F         	call	_clearArray	;wreg free
  4236                           
  4237                           ;shared_logic.c: 229:     clearArray(Numberscreen, 8);
  4238  000B90  0E95               	movlw	low show_score@Numberscreen
  4239  000B92  6E0C               	movwf	clearArray@pArray,c
  4240  000B94  0E02               	movlw	high show_score@Numberscreen
  4241  000B96  6E0D               	movwf	clearArray@pArray+1,c
  4242  000B98  0E00               	movlw	0
  4243  000B9A  6E0F               	movwf	clearArray@size+1,c
  4244  000B9C  0E08               	movlw	8
  4245  000B9E  6E0E               	movwf	clearArray@size,c
  4246  000BA0  EC9E  F00F         	call	_clearArray	;wreg free
  4247                           
  4248                           ;shared_logic.c: 231:     itoa(score, number, 10);
  4249  000BA4  C2B5  F01A         	movff	show_score@score,itoa@value
  4250  000BA8  6A1B               	clrf	itoa@value+1,c
  4251  000BAA  0EB7               	movlw	low show_score@number
  4252  000BAC  6E1C               	movwf	itoa@str,c
  4253  000BAE  0E02               	movlw	high show_score@number
  4254  000BB0  6E1D               	movwf	itoa@str+1,c
  4255  000BB2  0E00               	movlw	0
  4256  000BB4  6E1F               	movwf	itoa@bas+1,c
  4257  000BB6  0E0A               	movlw	10
  4258  000BB8  6E1E               	movwf	itoa@bas,c
  4259  000BBA  EC97  F008         	call	_itoa	;wreg free
  4260                           
  4261                           ;shared_logic.c: 232:     for (i = 0; i < 3 && number[i]; i++)
  4262  000BBE  0E00               	movlw	0
  4263  000BC0  0102               	movlb	2	; () banked
  4264  000BC2  6FBB               	movwf	show_score@i& (0+255),b
  4265  000BC4  D036               	goto	l4973
  4266  000BC6                     l4961:
  4267                           
  4268                           ; BSR set to: 2
  4269                           ;shared_logic.c: 233:     {;shared_logic.c: 234:         currentNumber = number[i] - '0'
      +                          ;
  4270  000BC6  0EB7               	movlw	low show_score@number
  4271  000BC8  25BB               	addwf	show_score@i& (0+255),w,b
  4272  000BCA  6ED9               	movwf	fsr2l,c
  4273  000BCC  6ADA               	clrf	fsr2h,c
  4274  000BCE  0E02               	movlw	high show_score@number
  4275  000BD0  22DA               	addwfc	fsr2h,f,c
  4276  000BD2  50DF               	movf	indf2,w,c
  4277  000BD4  0FD0               	addlw	208
  4278  000BD6  6FB6               	movwf	show_score@currentNumber& (0+255),b
  4279                           
  4280                           ; BSR set to: 2
  4281                           ;shared_logic.c: 235:         getNumber(currentNumber, tmpObjectData);
  4282  000BD8  0EA5               	movlw	low show_score@tmpObjectData
  4283  000BDA  6E16               	movwf	getNumber@pTarget,c
  4284  000BDC  0E02               	movlw	high show_score@tmpObjectData
  4285  000BDE  6E17               	movwf	getNumber@pTarget+1,c
  4286  000BE0  51B6               	movf	show_score@currentNumber& (0+255),w,b
  4287  000BE2  ECA5  F010         	call	_getNumber
  4288                           
  4289                           ;shared_logic.c: 236:         moveObject(tmpObjectData, DOWN, (2-i) * 5);
  4290  000BE6  0EA5               	movlw	low show_score@tmpObjectData
  4291  000BE8  6E0C               	movwf	moveObject@pObject,c
  4292  000BEA  0E02               	movlw	high show_score@tmpObjectData
  4293  000BEC  6E0D               	movwf	moveObject@pObject+1,c
  4294  000BEE  0E00               	movlw	0
  4295  000BF0  6E0E               	movwf	moveObject@direction,c
  4296  000BF2  0102               	movlb	2	; () banked
  4297  000BF4  51BB               	movf	show_score@i& (0+255),w,b
  4298  000BF6  0802               	sublw	2
  4299  000BF8  0D05               	mullw	5
  4300  000BFA  CFF3 F00F          	movff	prodl,moveObject@cycles
  4301  000BFE  EC79  F003         	call	_moveObject	;wreg free
  4302                           
  4303                           ;shared_logic.c: 237:         moveObject(tmpObjectData, RIGHT, i);
  4304  000C02  0EA5               	movlw	low show_score@tmpObjectData
  4305  000C04  6E0C               	movwf	moveObject@pObject,c
  4306  000C06  0E02               	movlw	high show_score@tmpObjectData
  4307  000C08  6E0D               	movwf	moveObject@pObject+1,c
  4308  000C0A  0E03               	movlw	3
  4309  000C0C  6E0E               	movwf	moveObject@direction,c
  4310  000C0E  C2BB  F00F         	movff	show_score@i,moveObject@cycles
  4311  000C12  EC79  F003         	call	_moveObject	;wreg free
  4312                           
  4313                           ;shared_logic.c: 238:         mergeObjects(tmpObjectData, Numberscreen, MERGE);
  4314  000C16  0EA5               	movlw	low show_score@tmpObjectData
  4315  000C18  6E0C               	movwf	mergeObjects@pSource,c
  4316  000C1A  0E02               	movlw	high show_score@tmpObjectData
  4317  000C1C  6E0D               	movwf	mergeObjects@pSource+1,c
  4318  000C1E  0E95               	movlw	low show_score@Numberscreen
  4319  000C20  6E0E               	movwf	mergeObjects@pTarget,c
  4320  000C22  0E02               	movlw	high show_score@Numberscreen
  4321  000C24  6E0F               	movwf	mergeObjects@pTarget+1,c
  4322  000C26  0E01               	movlw	1
  4323  000C28  6E10               	movwf	mergeObjects@mode,c
  4324  000C2A  EC13  F008         	call	_mergeObjects	;wreg free
  4325                           
  4326                           ;shared_logic.c: 239:     }
  4327  000C2E  0102               	movlb	2	; () banked
  4328  000C30  2BBB               	incf	show_score@i& (0+255),f,b
  4329  000C32                     l4973:
  4330                           
  4331                           ; BSR set to: 2
  4332  000C32  0E03               	movlw	3
  4333  000C34  61BB               	cpfslt	show_score@i& (0+255),b
  4334  000C36  D009               	goto	u4620
  4335                           
  4336                           ; BSR set to: 2
  4337  000C38  0EB7               	movlw	low show_score@number
  4338  000C3A  25BB               	addwf	show_score@i& (0+255),w,b
  4339  000C3C  6ED9               	movwf	fsr2l,c
  4340  000C3E  6ADA               	clrf	fsr2h,c
  4341  000C40  0E02               	movlw	high show_score@number
  4342  000C42  22DA               	addwfc	fsr2h,f,c
  4343  000C44  50DF               	movf	indf2,w,c
  4344  000C46  A4D8               	btfss	status,2,c
  4345  000C48  D7BE               	goto	l4961
  4346  000C4A                     u4620:
  4347                           
  4348                           ; BSR set to: 2
  4349                           ;shared_logic.c: 240:     pauseMultiplexing();
  4350  000C4A  EC96  F011         	call	_pauseMultiplexing	;wreg free
  4351                           
  4352                           ;shared_logic.c: 241:     set_screen(Numberscreen);
  4353  000C4E  0E95               	movlw	low show_score@Numberscreen
  4354  000C50  6E13               	movwf	set_screen@newData,c
  4355  000C52  0E02               	movlw	high show_score@Numberscreen
  4356  000C54  6E14               	movwf	set_screen@newData+1,c
  4357  000C56  EC73  F00A         	call	_set_screen	;wreg free
  4358                           
  4359                           ;shared_logic.c: 242:     resumeMultiplexing();
  4360  000C5A  ECE2  F011         	call	_resumeMultiplexing	;wreg free
  4361  000C5E                     l4983:
  4362                           
  4363                           ;shared_logic.c: 244:      while (checkDown(0))
  4364  000C5E  0E00               	movlw	0
  4365  000C60  ECE1  F010         	call	_checkDown
  4366  000C64  0900               	iorlw	0
  4367  000C66  A4D8               	btfss	status,2,c
  4368  000C68  D7FA               	goto	l4983
  4369  000C6A                     u4630:
  4370                           
  4371                           ;shared_logic.c: 247:     while (!checkDown(0))
  4372  000C6A  0E00               	movlw	0
  4373  000C6C  ECE1  F010         	call	_checkDown
  4374  000C70  0900               	iorlw	0
  4375  000C72  B4D8               	btfsc	status,2,c
  4376  000C74  D7FA               	goto	u4630
  4377                           
  4378                           ;shared_logic.c: 250:     uint16_t mask[] = {0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xf
      +                          fff, 0xffff, 0xffff};
  4379  000C76  EE20  F0E8         	lfsr	2,show_score@F2762
  4380  000C7A  EE12  F085         	lfsr	1,show_score@mask
  4381  000C7E  0E0F               	movlw	15
  4382  000C80                     u4651:
  4383  000C80  CFDB FFE3          	movff	plusw2,plusw1
  4384  000C84  06E8               	decf	wreg,f,c
  4385  000C86  E2FC               	bc	u4651
  4386                           
  4387                           ;shared_logic.c: 251:     mergeObjects(mask, Numberscreen, INVERT);
  4388  000C88  0E85               	movlw	low show_score@mask
  4389  000C8A  6E0C               	movwf	mergeObjects@pSource,c
  4390  000C8C  0E02               	movlw	high show_score@mask
  4391  000C8E  6E0D               	movwf	mergeObjects@pSource+1,c
  4392  000C90  0E95               	movlw	low show_score@Numberscreen
  4393  000C92  6E0E               	movwf	mergeObjects@pTarget,c
  4394  000C94  0E02               	movlw	high show_score@Numberscreen
  4395  000C96  6E0F               	movwf	mergeObjects@pTarget+1,c
  4396  000C98  0E02               	movlw	2
  4397  000C9A  6E10               	movwf	mergeObjects@mode,c
  4398  000C9C  EC13  F008         	call	_mergeObjects	;wreg free
  4399                           
  4400                           ;shared_logic.c: 253:     pauseMultiplexing();
  4401  000CA0  EC96  F011         	call	_pauseMultiplexing	;wreg free
  4402                           
  4403                           ;shared_logic.c: 254:     set_screen(Numberscreen);
  4404  000CA4  0E95               	movlw	low show_score@Numberscreen
  4405  000CA6  6E13               	movwf	set_screen@newData,c
  4406  000CA8  0E02               	movlw	high show_score@Numberscreen
  4407  000CAA  6E14               	movwf	set_screen@newData+1,c
  4408  000CAC  EC73  F00A         	call	_set_screen	;wreg free
  4409                           
  4410                           ;shared_logic.c: 255:     resumeMultiplexing();
  4411  000CB0  ECE2  F011         	call	_resumeMultiplexing	;wreg free
  4412  000CB4                     l4997:
  4413                           
  4414                           ;shared_logic.c: 257:     while (checkDown(0))
  4415  000CB4  0E00               	movlw	0
  4416  000CB6  ECE1  F010         	call	_checkDown
  4417  000CBA  0900               	iorlw	0
  4418  000CBC  A4D8               	btfss	status,2,c
  4419  000CBE  D7FA               	goto	l4997
  4420                           
  4421                           ;shared_logic.c: 259:     pauseButtons();
  4422  000CC0  ECDC  F011         	call	_pauseButtons	;wreg free
  4423                           
  4424                           ;shared_logic.c: 261:     resumeButtons();
  4425  000CC4  ECD9  F011         	call	_resumeButtons	;wreg free
  4426  000CC8  0012               	return		;funcret
  4427  000CCA                     __end_of_show_score:
  4428                           	opt callstack 0
  4429                           
  4430 ;; *************** function _resumeButtons *****************
  4431 ;; Defined at:
  4432 ;;		line 48 in file "buttons.c"
  4433 ;; Parameters:    Size  Location     Type
  4434 ;;		None
  4435 ;; Auto vars:     Size  Location     Type
  4436 ;;		None
  4437 ;; Return value:  Size  Location     Type
  4438 ;;                  1    wreg      void 
  4439 ;; Registers used:
  4440 ;;		wreg, status,2
  4441 ;; Tracked objects:
  4442 ;;		On entry : 0/0
  4443 ;;		On exit  : 0/0
  4444 ;;		Unchanged: 0/0
  4445 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4446 ;;      Params:         0       0       0       0       0       0       0
  4447 ;;      Locals:         0       0       0       0       0       0       0
  4448 ;;      Temps:          0       0       0       0       0       0       0
  4449 ;;      Totals:         0       0       0       0       0       0       0
  4450 ;;Total ram usage:        0 bytes
  4451 ;; Hardware stack levels used:    1
  4452 ;; Hardware stack levels required when called:    4
  4453 ;; This function calls:
  4454 ;;		Nothing
  4455 ;; This function is called by:
  4456 ;;		_show_score
  4457 ;; This function uses a non-reentrant model
  4458 ;;
  4459                           
  4460                           	psect	text32
  4461  0023B2                     __ptext32:
  4462                           	opt callstack 0
  4463  0023B2                     _resumeButtons:
  4464                           	opt callstack 23
  4465                           
  4466                           ;buttons.c: 50:     mtxButtons = 1;
  4467                           
  4468                           ;incstack = 0
  4469  0023B2  0E01               	movlw	1
  4470  0023B4  6E3A               	movwf	_mtxButtons,c	;volatile
  4471  0023B6  0012               	return		;funcret
  4472  0023B8                     __end_of_resumeButtons:
  4473                           	opt callstack 0
  4474                           
  4475 ;; *************** function _pauseButtons *****************
  4476 ;; Defined at:
  4477 ;;		line 43 in file "buttons.c"
  4478 ;; Parameters:    Size  Location     Type
  4479 ;;		None
  4480 ;; Auto vars:     Size  Location     Type
  4481 ;;		None
  4482 ;; Return value:  Size  Location     Type
  4483 ;;                  1    wreg      void 
  4484 ;; Registers used:
  4485 ;;		wreg, status,2
  4486 ;; Tracked objects:
  4487 ;;		On entry : 0/0
  4488 ;;		On exit  : 0/0
  4489 ;;		Unchanged: 0/0
  4490 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4491 ;;      Params:         0       0       0       0       0       0       0
  4492 ;;      Locals:         0       0       0       0       0       0       0
  4493 ;;      Temps:          0       0       0       0       0       0       0
  4494 ;;      Totals:         0       0       0       0       0       0       0
  4495 ;;Total ram usage:        0 bytes
  4496 ;; Hardware stack levels used:    1
  4497 ;; Hardware stack levels required when called:    4
  4498 ;; This function calls:
  4499 ;;		Nothing
  4500 ;; This function is called by:
  4501 ;;		_show_score
  4502 ;; This function uses a non-reentrant model
  4503 ;;
  4504                           
  4505                           	psect	text33
  4506  0023B8                     __ptext33:
  4507                           	opt callstack 0
  4508  0023B8                     _pauseButtons:
  4509                           	opt callstack 23
  4510                           
  4511                           ;buttons.c: 45:     mtxButtons = 0;
  4512                           
  4513                           ;incstack = 0
  4514  0023B8  0E00               	movlw	0
  4515  0023BA  6E3A               	movwf	_mtxButtons,c	;volatile
  4516  0023BC  0012               	return		;funcret
  4517  0023BE                     __end_of_pauseButtons:
  4518                           	opt callstack 0
  4519                           
  4520 ;; *************** function _moveObject *****************
  4521 ;; Defined at:
  4522 ;;		line 98 in file "tetris.c"
  4523 ;; Parameters:    Size  Location     Type
  4524 ;;  pObject         2   11[COMRAM] PTR volatile unsigned sh
  4525 ;;		 -> show_score@tmpObjectData(16), tmpObjectData(16), ObjectData(16), 
  4526 ;;  direction       1   13[COMRAM] enum E2578
  4527 ;;  cycles          1   14[COMRAM] unsigned char 
  4528 ;; Auto vars:     Size  Location     Type
  4529 ;;  i               1   22[COMRAM] unsigned char 
  4530 ;;  c               1   21[COMRAM] unsigned char 
  4531 ;; Return value:  Size  Location     Type
  4532 ;;                  1    wreg      void 
  4533 ;; Registers used:
  4534 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  4535 ;; Tracked objects:
  4536 ;;		On entry : 0/0
  4537 ;;		On exit  : 0/0
  4538 ;;		Unchanged: 0/0
  4539 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4540 ;;      Params:         4       0       0       0       0       0       0
  4541 ;;      Locals:         2       0       0       0       0       0       0
  4542 ;;      Temps:          6       0       0       0       0       0       0
  4543 ;;      Totals:        12       0       0       0       0       0       0
  4544 ;;Total ram usage:       12 bytes
  4545 ;; Hardware stack levels used:    1
  4546 ;; Hardware stack levels required when called:    4
  4547 ;; This function calls:
  4548 ;;		Nothing
  4549 ;; This function is called by:
  4550 ;;		_moveObjectDown
  4551 ;;		_tetris_button_left
  4552 ;;		_tetris_button_right
  4553 ;;		_show_score
  4554 ;; This function uses a non-reentrant model
  4555 ;;
  4556                           
  4557                           	psect	text34
  4558  0006F2                     __ptext34:
  4559                           	opt callstack 0
  4560  0006F2                     _moveObject:
  4561                           	opt callstack 22
  4562                           
  4563                           ;tetris.c: 98: void moveObject(volatile uint16_t * pObject, direction_t direction, uint8
      +                          _t cycles);tetris.c: 99: {;tetris.c: 100:     uint8_t i, c;;tetris.c: 102:     switch (d
      +                          irection)
  4564                           
  4565                           ;incstack = 0
  4566  0006F2  D0B9               	goto	l4545
  4567  0006F4                     l4467:
  4568                           
  4569                           ;tetris.c: 105:         for (c = 0; c < cycles; c++)
  4570  0006F4  0E00               	movlw	0
  4571  0006F6  6E16               	movwf	moveObject@c,c
  4572  0006F8  D017               	goto	l4483
  4573  0006FA                     l4469:
  4574                           
  4575                           ;tetris.c: 106:         {;tetris.c: 107:             for (i = 0; i < 8; i++)
  4576  0006FA  0E00               	movlw	0
  4577  0006FC  6E17               	movwf	moveObject@i,c
  4578  0006FE                     l4475:
  4579                           
  4580                           ;tetris.c: 108:                 pObject[i] <<= 1;
  4581  0006FE  5017               	movf	moveObject@i,w,c
  4582  000700  0D02               	mullw	2
  4583  000702  CFF3 F010          	movff	prodl,??_moveObject
  4584  000706  CFF4 F011          	movff	prodh,??_moveObject+1
  4585  00070A  5010               	movf	??_moveObject,w,c
  4586  00070C  240C               	addwf	moveObject@pObject,w,c
  4587  00070E  6ED9               	movwf	fsr2l,c
  4588  000710  5011               	movf	??_moveObject+1,w,c
  4589  000712  200D               	addwfc	moveObject@pObject+1,w,c
  4590  000714  6EDA               	movwf	fsr2h,c
  4591  000716  90D8               	bcf	status,0,c
  4592  000718  36DE               	rlcf	postinc2,f,c
  4593  00071A  36DD               	rlcf	postdec2,f,c
  4594  00071C  2A17               	incf	moveObject@i,f,c
  4595  00071E  0E07               	movlw	7
  4596  000720  6417               	cpfsgt	moveObject@i,c
  4597  000722  D7ED               	goto	l4475
  4598                           
  4599                           ;tetris.c: 109:             OriginY++;
  4600  000724  2A42               	incf	_OriginY,f,c
  4601                           
  4602                           ;tetris.c: 110:         }
  4603  000726  2A16               	incf	moveObject@c,f,c
  4604  000728                     l4483:
  4605  000728  500F               	movf	moveObject@cycles,w,c
  4606  00072A  5C16               	subwf	moveObject@c,w,c
  4607  00072C  B0D8               	btfsc	status,0,c
  4608  00072E  0012               	return	
  4609  000730  D7E4               	goto	l4469
  4610  000732                     l4485:
  4611                           
  4612                           ;tetris.c: 113:         for (c = 0; c < cycles; c++)
  4613  000732  0E00               	movlw	0
  4614  000734  6E16               	movwf	moveObject@c,c
  4615  000736  D018               	goto	l4501
  4616  000738                     l4487:
  4617                           
  4618                           ;tetris.c: 114:         {;tetris.c: 115:             for (i = 0; i < 8; i++)
  4619  000738  0E00               	movlw	0
  4620  00073A  6E17               	movwf	moveObject@i,c
  4621  00073C                     l4493:
  4622                           
  4623                           ;tetris.c: 116:                 pObject[i] >>= 1;
  4624  00073C  5017               	movf	moveObject@i,w,c
  4625  00073E  0D02               	mullw	2
  4626  000740  CFF3 F010          	movff	prodl,??_moveObject
  4627  000744  CFF4 F011          	movff	prodh,??_moveObject+1
  4628  000748  5010               	movf	??_moveObject,w,c
  4629  00074A  240C               	addwf	moveObject@pObject,w,c
  4630  00074C  6ED9               	movwf	fsr2l,c
  4631  00074E  5011               	movf	??_moveObject+1,w,c
  4632  000750  200D               	addwfc	moveObject@pObject+1,w,c
  4633  000752  6EDA               	movwf	fsr2h,c
  4634  000754  90D8               	bcf	status,0,c
  4635  000756  32DC               	rrcf	preinc2,f,c
  4636  000758  50DD               	movf	postdec2,w,c
  4637  00075A  32DF               	rrcf	indf2,f,c
  4638  00075C  2A17               	incf	moveObject@i,f,c
  4639  00075E  0E07               	movlw	7
  4640  000760  6417               	cpfsgt	moveObject@i,c
  4641  000762  D7EC               	goto	l4493
  4642                           
  4643                           ;tetris.c: 117:             OriginY--;
  4644  000764  0642               	decf	_OriginY,f,c
  4645                           
  4646                           ;tetris.c: 118:         }
  4647  000766  2A16               	incf	moveObject@c,f,c
  4648  000768                     l4501:
  4649  000768  500F               	movf	moveObject@cycles,w,c
  4650  00076A  5C16               	subwf	moveObject@c,w,c
  4651  00076C  B0D8               	btfsc	status,0,c
  4652  00076E  0012               	return	
  4653  000770  D7E3               	goto	l4487
  4654  000772                     l4503:
  4655                           
  4656                           ;tetris.c: 121:         for (c = 0; c < cycles; c++)
  4657  000772  0E00               	movlw	0
  4658  000774  6E16               	movwf	moveObject@c,c
  4659  000776  D034               	goto	l4521
  4660  000778                     l4505:
  4661                           
  4662                           ;tetris.c: 122:         {;tetris.c: 123:             for (i = 7; i > 0; i--)
  4663  000778  0E07               	movlw	7
  4664  00077A  6E17               	movwf	moveObject@i,c
  4665  00077C                     l4509:
  4666                           
  4667                           ;tetris.c: 124:                 pObject[i] = pObject[i-1];
  4668  00077C  5017               	movf	moveObject@i,w,c
  4669  00077E  6E10               	movwf	??_moveObject& (0+255),c
  4670  000780  6A11               	clrf	(??_moveObject+1)& (0+255),c
  4671  000782  90D8               	bcf	status,0,c
  4672  000784  3610               	rlcf	??_moveObject,f,c
  4673  000786  3611               	rlcf	??_moveObject+1,f,c
  4674  000788  C00C  F012         	movff	moveObject@pObject,??_moveObject+2
  4675  00078C  C00D  F013         	movff	moveObject@pObject+1,??_moveObject+3
  4676  000790  5010               	movf	??_moveObject,w,c
  4677  000792  2612               	addwf	??_moveObject+2,f,c
  4678  000794  5011               	movf	??_moveObject+1,w,c
  4679  000796  2213               	addwfc	??_moveObject+3,f,c
  4680  000798  0EFE               	movlw	254
  4681  00079A  2412               	addwf	??_moveObject+2,w,c
  4682  00079C  6ED9               	movwf	fsr2l,c
  4683  00079E  0EFF               	movlw	255
  4684  0007A0  2013               	addwfc	??_moveObject+3,w,c
  4685  0007A2  6EDA               	movwf	fsr2h,c
  4686  0007A4  5017               	movf	moveObject@i,w,c
  4687  0007A6  0D02               	mullw	2
  4688  0007A8  CFF3 F014          	movff	prodl,??_moveObject+4
  4689  0007AC  CFF4 F015          	movff	prodh,??_moveObject+5
  4690  0007B0  5014               	movf	??_moveObject+4,w,c
  4691  0007B2  240C               	addwf	moveObject@pObject,w,c
  4692  0007B4  6EE1               	movwf	fsr1l,c
  4693  0007B6  5015               	movf	??_moveObject+5,w,c
  4694  0007B8  200D               	addwfc	moveObject@pObject+1,w,c
  4695  0007BA  6EE2               	movwf	fsr1h,c
  4696  0007BC  CFDE FFE6          	movff	postinc2,postinc1
  4697  0007C0  CFDD FFE5          	movff	postdec2,postdec1
  4698  0007C4  0617               	decf	moveObject@i,f,c
  4699  0007C6  5017               	movf	moveObject@i,w,c
  4700  0007C8  A4D8               	btfss	status,2,c
  4701  0007CA  D7D8               	goto	l4509
  4702                           
  4703                           ;tetris.c: 125:             pObject[0] = 0;
  4704  0007CC  C00C  FFD9         	movff	moveObject@pObject,fsr2l
  4705  0007D0  C00D  FFDA         	movff	moveObject@pObject+1,fsr2h
  4706  0007D4  0E00               	movlw	0
  4707  0007D6  6EDE               	movwf	postinc2,c
  4708  0007D8  0E00               	movlw	0
  4709  0007DA  6EDD               	movwf	postdec2,c
  4710                           
  4711                           ;tetris.c: 126:             OriginX++;
  4712  0007DC  2A43               	incf	_OriginX,f,c
  4713                           
  4714                           ;tetris.c: 127:         }
  4715  0007DE  2A16               	incf	moveObject@c,f,c
  4716  0007E0                     l4521:
  4717  0007E0  500F               	movf	moveObject@cycles,w,c
  4718  0007E2  5C16               	subwf	moveObject@c,w,c
  4719  0007E4  B0D8               	btfsc	status,0,c
  4720  0007E6  0012               	return	
  4721  0007E8  D7C7               	goto	l4505
  4722  0007EA                     l4523:
  4723                           
  4724                           ;tetris.c: 130:         for (c = 0; c < cycles; c++)
  4725  0007EA  0E00               	movlw	0
  4726  0007EC  6E16               	movwf	moveObject@c,c
  4727  0007EE  D036               	goto	l4543
  4728  0007F0                     l4525:
  4729                           
  4730                           ;tetris.c: 131:         {;tetris.c: 132:             for (i = 0; i < 7; i++)
  4731  0007F0  0E00               	movlw	0
  4732  0007F2  6E17               	movwf	moveObject@i,c
  4733  0007F4                     l4531:
  4734                           
  4735                           ;tetris.c: 133:                 pObject[i] = pObject[i+1];
  4736  0007F4  5017               	movf	moveObject@i,w,c
  4737  0007F6  6E10               	movwf	??_moveObject& (0+255),c
  4738  0007F8  6A11               	clrf	(??_moveObject+1)& (0+255),c
  4739  0007FA  90D8               	bcf	status,0,c
  4740  0007FC  3610               	rlcf	??_moveObject,f,c
  4741  0007FE  3611               	rlcf	??_moveObject+1,f,c
  4742  000800  C00C  F012         	movff	moveObject@pObject,??_moveObject+2
  4743  000804  C00D  F013         	movff	moveObject@pObject+1,??_moveObject+3
  4744  000808  5010               	movf	??_moveObject,w,c
  4745  00080A  2612               	addwf	??_moveObject+2,f,c
  4746  00080C  5011               	movf	??_moveObject+1,w,c
  4747  00080E  2213               	addwfc	??_moveObject+3,f,c
  4748  000810  0E02               	movlw	2
  4749  000812  2412               	addwf	??_moveObject+2,w,c
  4750  000814  6ED9               	movwf	fsr2l,c
  4751  000816  0E00               	movlw	0
  4752  000818  2013               	addwfc	??_moveObject+3,w,c
  4753  00081A  6EDA               	movwf	fsr2h,c
  4754  00081C  5017               	movf	moveObject@i,w,c
  4755  00081E  0D02               	mullw	2
  4756  000820  CFF3 F014          	movff	prodl,??_moveObject+4
  4757  000824  CFF4 F015          	movff	prodh,??_moveObject+5
  4758  000828  5014               	movf	??_moveObject+4,w,c
  4759  00082A  240C               	addwf	moveObject@pObject,w,c
  4760  00082C  6EE1               	movwf	fsr1l,c
  4761  00082E  5015               	movf	??_moveObject+5,w,c
  4762  000830  200D               	addwfc	moveObject@pObject+1,w,c
  4763  000832  6EE2               	movwf	fsr1h,c
  4764  000834  CFDE FFE6          	movff	postinc2,postinc1
  4765  000838  CFDD FFE5          	movff	postdec2,postdec1
  4766  00083C  2A17               	incf	moveObject@i,f,c
  4767  00083E  0E06               	movlw	6
  4768  000840  6417               	cpfsgt	moveObject@i,c
  4769  000842  D7D8               	goto	l4531
  4770                           
  4771                           ;tetris.c: 134:             pObject[7] = 0;
  4772  000844  EE20 F00E          	lfsr	2,14
  4773  000848  500C               	movf	moveObject@pObject,w,c
  4774  00084A  26D9               	addwf	fsr2l,f,c
  4775  00084C  500D               	movf	moveObject@pObject+1,w,c
  4776  00084E  22DA               	addwfc	fsr2h,f,c
  4777  000850  0E00               	movlw	0
  4778  000852  6EDE               	movwf	postinc2,c
  4779  000854  0E00               	movlw	0
  4780  000856  6EDD               	movwf	postdec2,c
  4781                           
  4782                           ;tetris.c: 135:             OriginX--;
  4783  000858  0643               	decf	_OriginX,f,c
  4784                           
  4785                           ;tetris.c: 136:         }
  4786  00085A  2A16               	incf	moveObject@c,f,c
  4787  00085C                     l4543:
  4788  00085C  500F               	movf	moveObject@cycles,w,c
  4789  00085E  5C16               	subwf	moveObject@c,w,c
  4790  000860  B0D8               	btfsc	status,0,c
  4791  000862  0012               	return	
  4792  000864  D7C5               	goto	l4525
  4793  000866                     l4545:
  4794  000866  500E               	movf	moveObject@direction,w,c
  4795  000868  6E10               	movwf	??_moveObject& (0+255),c
  4796  00086A  6A11               	clrf	(??_moveObject+1)& (0+255),c
  4797                           
  4798                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  4799                           ; Switch size 1, requested type "simple"
  4800                           ; Number of cases is 1, Range of values is 0 to 0
  4801                           ; switch strategies available:
  4802                           ; Name         Instructions Cycles
  4803                           ; simple_byte            4     3 (average)
  4804                           ;	Chosen strategy is simple_byte
  4805  00086C  5011               	movf	??_moveObject+1,w,c
  4806  00086E  0A00               	xorlw	0	; case 0
  4807  000870  A4D8               	btfss	status,2,c
  4808  000872  0012               	return	
  4809                           
  4810                           ; Switch size 1, requested type "simple"
  4811                           ; Number of cases is 4, Range of values is 0 to 3
  4812                           ; switch strategies available:
  4813                           ; Name         Instructions Cycles
  4814                           ; simple_byte           13     7 (average)
  4815                           ;	Chosen strategy is simple_byte
  4816  000874  5010               	movf	??_moveObject,w,c
  4817  000876  0A00               	xorlw	0	; case 0
  4818  000878  B4D8               	btfsc	status,2,c
  4819  00087A  D73C               	goto	l4467
  4820  00087C  0A01               	xorlw	1	; case 1
  4821  00087E  B4D8               	btfsc	status,2,c
  4822  000880  D758               	goto	l4485
  4823  000882  0A03               	xorlw	3	; case 2
  4824  000884  B4D8               	btfsc	status,2,c
  4825  000886  D7B1               	goto	l4523
  4826  000888  0A01               	xorlw	1	; case 3
  4827  00088A  A4D8               	btfss	status,2,c
  4828  00088C  0012               	return	
  4829  00088E  D771               	goto	l4503
  4830  000890                     __end_of_moveObject:
  4831                           	opt callstack 0
  4832                           
  4833 ;; *************** function _itoa *****************
  4834 ;; Defined at:
  4835 ;;		line 68 in file "shared_logic.c"
  4836 ;; Parameters:    Size  Location     Type
  4837 ;;  value           2   25[COMRAM] int 
  4838 ;;  str             2   27[COMRAM] PTR unsigned char 
  4839 ;;		 -> show_score@number(4), 
  4840 ;;  bas             2   29[COMRAM] int 
  4841 ;; Auto vars:     Size  Location     Type
  4842 ;;  rem             2   34[COMRAM] int 
  4843 ;;  i               2   36[COMRAM] int 
  4844 ;;  isNegative      1   33[COMRAM] _Bool 
  4845 ;; Return value:  Size  Location     Type
  4846 ;;                  2   25[COMRAM] PTR unsigned char 
  4847 ;; Registers used:
  4848 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  4849 ;; Tracked objects:
  4850 ;;		On entry : 0/0
  4851 ;;		On exit  : 0/0
  4852 ;;		Unchanged: 0/0
  4853 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4854 ;;      Params:         6       0       0       0       0       0       0
  4855 ;;      Locals:         7       0       0       0       0       0       0
  4856 ;;      Temps:          0       0       0       0       0       0       0
  4857 ;;      Totals:        13       0       0       0       0       0       0
  4858 ;;Total ram usage:       13 bytes
  4859 ;; Hardware stack levels used:    1
  4860 ;; Hardware stack levels required when called:    6
  4861 ;; This function calls:
  4862 ;;		___awdiv
  4863 ;;		___awmod
  4864 ;;		_reverse
  4865 ;; This function is called by:
  4866 ;;		_show_score
  4867 ;; This function uses a non-reentrant model
  4868 ;;
  4869                           
  4870                           	psect	text35
  4871  00112E                     __ptext35:
  4872                           	opt callstack 0
  4873  00112E                     _itoa:
  4874                           	opt callstack 21
  4875                           
  4876                           ;shared_logic.c: 68: char * itoa(int value, char * str, int bas);shared_logic.c: 69: {;s
      +                          hared_logic.c: 70:     int i = 0;
  4877                           
  4878                           ;incstack = 0
  4879  00112E  0E00               	movlw	0
  4880  001130  6E26               	movwf	itoa@i+1,c
  4881  001132  0E00               	movlw	0
  4882  001134  6E25               	movwf	itoa@i,c
  4883                           
  4884                           ;shared_logic.c: 71:     _Bool isNegative = 0;
  4885  001136  0E00               	movlw	0
  4886  001138  6E22               	movwf	itoa@isNegative,c
  4887                           
  4888                           ;shared_logic.c: 74:     if (value == 0)
  4889  00113A  501A               	movf	itoa@value,w,c
  4890  00113C  101B               	iorwf	itoa@value+1,w,c
  4891  00113E  A4D8               	btfss	status,2,c
  4892  001140  D011               	goto	l4871
  4893                           
  4894                           ;shared_logic.c: 75:     {;shared_logic.c: 76:         str[i++] = '0';
  4895  001142  C01C  FFD9         	movff	itoa@str,fsr2l
  4896  001146  C01D  FFDA         	movff	itoa@str+1,fsr2h
  4897  00114A  0E30               	movlw	48
  4898  00114C  6EDF               	movwf	indf2,c
  4899  00114E  4A25               	infsnz	itoa@i,f,c
  4900  001150  2A26               	incf	itoa@i+1,f,c
  4901                           
  4902                           ;shared_logic.c: 77:         str[i] = '\0';
  4903  001152  5025               	movf	itoa@i,w,c
  4904  001154  241C               	addwf	itoa@str,w,c
  4905  001156  6ED9               	movwf	fsr2l,c
  4906  001158  5026               	movf	itoa@i+1,w,c
  4907  00115A  201D               	addwfc	itoa@str+1,w,c
  4908  00115C  6EDA               	movwf	fsr2h,c
  4909  00115E  0E00               	movlw	0
  4910  001160  6EDF               	movwf	indf2,c
  4911  001162  0012               	return	
  4912  001164                     l4871:
  4913                           
  4914                           ;shared_logic.c: 83:     if (value < 0 && bas == 10)
  4915  001164  AE1B               	btfss	itoa@value+1,7,c
  4916  001166  D042               	goto	l4893
  4917  001168  0E0A               	movlw	10
  4918  00116A  181E               	xorwf	itoa@bas,w,c
  4919  00116C  101F               	iorwf	itoa@bas+1,w,c
  4920  00116E  A4D8               	btfss	status,2,c
  4921  001170  D03D               	goto	l4893
  4922                           
  4923                           ;shared_logic.c: 84:     {;shared_logic.c: 85:         isNegative = 1;
  4924  001172  0E01               	movlw	1
  4925  001174  6E22               	movwf	itoa@isNegative,c
  4926                           
  4927                           ;shared_logic.c: 86:         value = -value;
  4928  001176  6C1A               	negf	itoa@value,c
  4929  001178  1E1B               	comf	itoa@value+1,f,c
  4930  00117A  B0D8               	btfsc	status,0,c
  4931  00117C  2A1B               	incf	itoa@value+1,f,c
  4932  00117E  D036               	goto	l4893
  4933  001180                     l4879:
  4934                           
  4935                           ;shared_logic.c: 91:     {;shared_logic.c: 92:         int rem = value % bas;
  4936  001180  C01A  F00C         	movff	itoa@value,___awmod@dividend
  4937  001184  C01B  F00D         	movff	itoa@value+1,___awmod@dividend+1
  4938  001188  C01E  F00E         	movff	itoa@bas,___awmod@divisor
  4939  00118C  C01F  F00F         	movff	itoa@bas+1,___awmod@divisor+1
  4940  001190  EC4B  F00D         	call	___awmod	;wreg free
  4941  001194  C00C  F023         	movff	?___awmod,itoa@rem
  4942  001198  C00D  F024         	movff	?___awmod+1,itoa@rem+1
  4943                           
  4944                           ;shared_logic.c: 93:         str[i++] = (rem > 9)? (rem-10) + 'a' : rem + '0';
  4945  00119C  BE24               	btfsc	itoa@rem+1,7,c
  4946  00119E  D006               	goto	u4520
  4947  0011A0  5024               	movf	itoa@rem+1,w,c
  4948  0011A2  E106               	bnz	l4885
  4949  0011A4  0E0A               	movlw	10
  4950  0011A6  5C23               	subwf	itoa@rem,w,c
  4951  0011A8  B0D8               	btfsc	status,0,c
  4952  0011AA  D002               	goto	l4885
  4953  0011AC                     u4520:
  4954  0011AC  0E30               	movlw	48
  4955  0011AE  D001               	goto	L2
  4956  0011B0                     l4885:
  4957  0011B0  0E57               	movlw	87
  4958  0011B2                     L2:
  4959  0011B2  2423               	addwf	itoa@rem,w,c
  4960  0011B4  6E20               	movwf	_itoa$757,c
  4961  0011B6  0E00               	movlw	0
  4962  0011B8  2024               	addwfc	itoa@rem+1,w,c
  4963  0011BA  6E21               	movwf	_itoa$757+1,c
  4964  0011BC  5025               	movf	itoa@i,w,c
  4965  0011BE  241C               	addwf	itoa@str,w,c
  4966  0011C0  6ED9               	movwf	fsr2l,c
  4967  0011C2  5026               	movf	itoa@i+1,w,c
  4968  0011C4  201D               	addwfc	itoa@str+1,w,c
  4969  0011C6  6EDA               	movwf	fsr2h,c
  4970  0011C8  C020  FFDF         	movff	_itoa$757,indf2
  4971  0011CC  4A25               	infsnz	itoa@i,f,c
  4972  0011CE  2A26               	incf	itoa@i+1,f,c
  4973                           
  4974                           ;shared_logic.c: 94:         value = value/bas;
  4975  0011D0  C01A  F00C         	movff	itoa@value,___awdiv@dividend
  4976  0011D4  C01B  F00D         	movff	itoa@value+1,___awdiv@dividend+1
  4977  0011D8  C01E  F00E         	movff	itoa@bas,___awdiv@divisor
  4978  0011DC  C01F  F00F         	movff	itoa@bas+1,___awdiv@divisor+1
  4979  0011E0  ECD0  F00B         	call	___awdiv	;wreg free
  4980  0011E4  C00C  F01A         	movff	?___awdiv,itoa@value
  4981  0011E8  C00D  F01B         	movff	?___awdiv+1,itoa@value+1
  4982  0011EC                     l4893:
  4983                           
  4984                           ;shared_logic.c: 90:     while (value != 0)
  4985  0011EC  501A               	movf	itoa@value,w,c
  4986  0011EE  101B               	iorwf	itoa@value+1,w,c
  4987  0011F0  A4D8               	btfss	status,2,c
  4988  0011F2  D7C6               	goto	l4879
  4989                           
  4990                           ;shared_logic.c: 98:     if (isNegative)
  4991  0011F4  5022               	movf	itoa@isNegative,w,c
  4992  0011F6  B4D8               	btfsc	status,2,c
  4993  0011F8  D00A               	goto	l4901
  4994                           
  4995                           ;shared_logic.c: 99:         str[i++] = '-';
  4996  0011FA  5025               	movf	itoa@i,w,c
  4997  0011FC  241C               	addwf	itoa@str,w,c
  4998  0011FE  6ED9               	movwf	fsr2l,c
  4999  001200  5026               	movf	itoa@i+1,w,c
  5000  001202  201D               	addwfc	itoa@str+1,w,c
  5001  001204  6EDA               	movwf	fsr2h,c
  5002  001206  0E2D               	movlw	45
  5003  001208  6EDF               	movwf	indf2,c
  5004  00120A  4A25               	infsnz	itoa@i,f,c
  5005  00120C  2A26               	incf	itoa@i+1,f,c
  5006  00120E                     l4901:
  5007                           
  5008                           ;shared_logic.c: 101:     str[i] = '\0';
  5009  00120E  5025               	movf	itoa@i,w,c
  5010  001210  241C               	addwf	itoa@str,w,c
  5011  001212  6ED9               	movwf	fsr2l,c
  5012  001214  5026               	movf	itoa@i+1,w,c
  5013  001216  201D               	addwfc	itoa@str+1,w,c
  5014  001218  6EDA               	movwf	fsr2h,c
  5015  00121A  0E00               	movlw	0
  5016  00121C  6EDF               	movwf	indf2,c
  5017                           
  5018                           ;shared_logic.c: 104:     reverse(str, i);
  5019  00121E  C01C  F011         	movff	itoa@str,reverse@str
  5020  001222  C01D  F012         	movff	itoa@str+1,reverse@str+1
  5021  001226  C025  F013         	movff	itoa@i,reverse@length
  5022  00122A  C026  F014         	movff	itoa@i+1,reverse@length+1
  5023  00122E  ECA7  F00E         	call	_reverse	;wreg free
  5024  001232  0012               	return		;funcret
  5025  001234                     __end_of_itoa:
  5026                           	opt callstack 0
  5027                           
  5028 ;; *************** function _reverse *****************
  5029 ;; Defined at:
  5030 ;;		line 56 in file "shared_logic.c"
  5031 ;; Parameters:    Size  Location     Type
  5032 ;;  str             2   16[COMRAM] PTR unsigned char 
  5033 ;;		 -> show_score@number(4), 
  5034 ;;  length          2   18[COMRAM] int 
  5035 ;; Auto vars:     Size  Location     Type
  5036 ;;  end             2   23[COMRAM] int 
  5037 ;;  start           2   21[COMRAM] int 
  5038 ;; Return value:  Size  Location     Type
  5039 ;;                  1    wreg      void 
  5040 ;; Registers used:
  5041 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  5042 ;; Tracked objects:
  5043 ;;		On entry : 0/0
  5044 ;;		On exit  : 0/0
  5045 ;;		Unchanged: 0/0
  5046 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5047 ;;      Params:         4       0       0       0       0       0       0
  5048 ;;      Locals:         4       0       0       0       0       0       0
  5049 ;;      Temps:          1       0       0       0       0       0       0
  5050 ;;      Totals:         9       0       0       0       0       0       0
  5051 ;;Total ram usage:        9 bytes
  5052 ;; Hardware stack levels used:    1
  5053 ;; Hardware stack levels required when called:    5
  5054 ;; This function calls:
  5055 ;;		_swap
  5056 ;; This function is called by:
  5057 ;;		_itoa
  5058 ;; This function uses a non-reentrant model
  5059 ;;
  5060                           
  5061                           	psect	text36
  5062  001D4E                     __ptext36:
  5063                           	opt callstack 0
  5064  001D4E                     _reverse:
  5065                           	opt callstack 21
  5066                           
  5067                           ;shared_logic.c: 56: void reverse(char str[], int length);shared_logic.c: 57: {;shared_l
      +                          ogic.c: 58:     int start = 0;
  5068                           
  5069                           ;incstack = 0
  5070  001D4E  0E00               	movlw	0
  5071  001D50  6E17               	movwf	reverse@start+1,c
  5072  001D52  0E00               	movlw	0
  5073  001D54  6E16               	movwf	reverse@start,c
  5074                           
  5075                           ;shared_logic.c: 59:     int end = length -1;
  5076  001D56  0EFF               	movlw	255
  5077  001D58  2413               	addwf	reverse@length,w,c
  5078  001D5A  6E18               	movwf	reverse@end,c
  5079  001D5C  0EFF               	movlw	255
  5080  001D5E  2014               	addwfc	reverse@length+1,w,c
  5081  001D60  6E19               	movwf	reverse@end+1,c
  5082                           
  5083                           ;shared_logic.c: 60:     while (start < end)
  5084  001D62  D013               	goto	l4675
  5085  001D64                     l4669:
  5086                           
  5087                           ;shared_logic.c: 61:     {;shared_logic.c: 62:         swap(str+start, str+end);
  5088  001D64  5016               	movf	reverse@start,w,c
  5089  001D66  2411               	addwf	reverse@str,w,c
  5090  001D68  6E0C               	movwf	swap@a,c
  5091  001D6A  5017               	movf	reverse@start+1,w,c
  5092  001D6C  2012               	addwfc	reverse@str+1,w,c
  5093  001D6E  6E0D               	movwf	swap@a+1,c
  5094  001D70  5018               	movf	reverse@end,w,c
  5095  001D72  2411               	addwf	reverse@str,w,c
  5096  001D74  6E0E               	movwf	swap@b,c
  5097  001D76  5019               	movf	reverse@end+1,w,c
  5098  001D78  2012               	addwfc	reverse@str+1,w,c
  5099  001D7A  6E0F               	movwf	swap@b+1,c
  5100  001D7C  EC27  F010         	call	_swap	;wreg free
  5101                           
  5102                           ;shared_logic.c: 63:         start++;
  5103  001D80  4A16               	infsnz	reverse@start,f,c
  5104  001D82  2A17               	incf	reverse@start+1,f,c
  5105                           
  5106                           ;shared_logic.c: 64:         end--;
  5107  001D84  0618               	decf	reverse@end,f,c
  5108  001D86  A0D8               	btfss	status,0,c
  5109  001D88  0619               	decf	reverse@end+1,f,c
  5110  001D8A                     l4675:
  5111                           
  5112                           ;shared_logic.c: 60:     while (start < end)
  5113  001D8A  5018               	movf	reverse@end,w,c
  5114  001D8C  5C16               	subwf	reverse@start,w,c
  5115  001D8E  5017               	movf	reverse@start+1,w,c
  5116  001D90  0A80               	xorlw	128
  5117  001D92  6E15               	movwf	??_reverse& (0+255),c
  5118  001D94  5019               	movf	reverse@end+1,w,c
  5119  001D96  0A80               	xorlw	128
  5120  001D98  5815               	subwfb	??_reverse& (0+255),w,c
  5121  001D9A  B0D8               	btfsc	status,0,c
  5122  001D9C  0012               	return	
  5123  001D9E  D7E2               	goto	l4669
  5124  001DA0                     __end_of_reverse:
  5125                           	opt callstack 0
  5126                           
  5127 ;; *************** function _swap *****************
  5128 ;; Defined at:
  5129 ;;		line 48 in file "shared_logic.c"
  5130 ;; Parameters:    Size  Location     Type
  5131 ;;  a               2   11[COMRAM] PTR unsigned char 
  5132 ;;		 -> show_score@number(4), 
  5133 ;;  b               2   13[COMRAM] PTR unsigned char 
  5134 ;;		 -> show_score@number(4), 
  5135 ;; Auto vars:     Size  Location     Type
  5136 ;;  t               1   15[COMRAM] unsigned char 
  5137 ;; Return value:  Size  Location     Type
  5138 ;;                  1    wreg      void 
  5139 ;; Registers used:
  5140 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2
  5141 ;; Tracked objects:
  5142 ;;		On entry : 0/0
  5143 ;;		On exit  : 0/0
  5144 ;;		Unchanged: 0/0
  5145 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5146 ;;      Params:         4       0       0       0       0       0       0
  5147 ;;      Locals:         1       0       0       0       0       0       0
  5148 ;;      Temps:          0       0       0       0       0       0       0
  5149 ;;      Totals:         5       0       0       0       0       0       0
  5150 ;;Total ram usage:        5 bytes
  5151 ;; Hardware stack levels used:    1
  5152 ;; Hardware stack levels required when called:    4
  5153 ;; This function calls:
  5154 ;;		Nothing
  5155 ;; This function is called by:
  5156 ;;		_reverse
  5157 ;; This function uses a non-reentrant model
  5158 ;;
  5159                           
  5160                           	psect	text37
  5161  00204E                     __ptext37:
  5162                           	opt callstack 0
  5163  00204E                     _swap:
  5164                           	opt callstack 21
  5165                           
  5166                           ;shared_logic.c: 48: void swap(char* a, char* b);shared_logic.c: 49: {;shared_logic.c: 5
      +                          0:     char t = *a;
  5167                           
  5168                           ;incstack = 0
  5169  00204E  C00C  FFD9         	movff	swap@a,fsr2l
  5170  002052  C00D  FFDA         	movff	swap@a+1,fsr2h
  5171  002056  50DF               	movf	indf2,w,c
  5172  002058  6E10               	movwf	swap@t,c
  5173                           
  5174                           ;shared_logic.c: 51:     *a = *b;
  5175  00205A  C00E  FFD9         	movff	swap@b,fsr2l
  5176  00205E  C00F  FFDA         	movff	swap@b+1,fsr2h
  5177  002062  C00C  FFE1         	movff	swap@a,fsr1l
  5178  002066  C00D  FFE2         	movff	swap@a+1,fsr1h
  5179  00206A  CFDF FFE7          	movff	indf2,indf1
  5180                           
  5181                           ;shared_logic.c: 52:     *b = t;
  5182  00206E  C00E  FFD9         	movff	swap@b,fsr2l
  5183  002072  C00F  FFDA         	movff	swap@b+1,fsr2h
  5184  002076  C010  FFDF         	movff	swap@t,indf2
  5185  00207A  0012               	return		;funcret
  5186  00207C                     __end_of_swap:
  5187                           	opt callstack 0
  5188                           
  5189 ;; *************** function ___awmod *****************
  5190 ;; Defined at:
  5191 ;;		line 7 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\awmod.c"
  5192 ;; Parameters:    Size  Location     Type
  5193 ;;  dividend        2   11[COMRAM] int 
  5194 ;;  divisor         2   13[COMRAM] int 
  5195 ;; Auto vars:     Size  Location     Type
  5196 ;;  sign            1   16[COMRAM] unsigned char 
  5197 ;;  counter         1   15[COMRAM] unsigned char 
  5198 ;; Return value:  Size  Location     Type
  5199 ;;                  2   11[COMRAM] int 
  5200 ;; Registers used:
  5201 ;;		wreg, status,2, status,0
  5202 ;; Tracked objects:
  5203 ;;		On entry : 0/0
  5204 ;;		On exit  : 0/0
  5205 ;;		Unchanged: 0/0
  5206 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5207 ;;      Params:         4       0       0       0       0       0       0
  5208 ;;      Locals:         2       0       0       0       0       0       0
  5209 ;;      Temps:          0       0       0       0       0       0       0
  5210 ;;      Totals:         6       0       0       0       0       0       0
  5211 ;;Total ram usage:        6 bytes
  5212 ;; Hardware stack levels used:    1
  5213 ;; Hardware stack levels required when called:    4
  5214 ;; This function calls:
  5215 ;;		Nothing
  5216 ;; This function is called by:
  5217 ;;		_selectNextObject
  5218 ;;		_itoa
  5219 ;; This function uses a non-reentrant model
  5220 ;;
  5221                           
  5222                           	psect	text38
  5223  001A96                     __ptext38:
  5224                           	opt callstack 0
  5225  001A96                     ___awmod:
  5226                           	opt callstack 20
  5227                           
  5228                           ;incstack = 0
  5229  001A96  0E00               	movlw	0
  5230  001A98  6E11               	movwf	___awmod@sign,c
  5231  001A9A  AE0D               	btfss	___awmod@dividend+1,7,c
  5232  001A9C  D006               	goto	l4321
  5233  001A9E  6C0C               	negf	___awmod@dividend,c
  5234  001AA0  1E0D               	comf	___awmod@dividend+1,f,c
  5235  001AA2  B0D8               	btfsc	status,0,c
  5236  001AA4  2A0D               	incf	___awmod@dividend+1,f,c
  5237  001AA6  0E01               	movlw	1
  5238  001AA8  6E11               	movwf	___awmod@sign,c
  5239  001AAA                     l4321:
  5240  001AAA  AE0F               	btfss	___awmod@divisor+1,7,c
  5241  001AAC  D004               	goto	l4325
  5242  001AAE  6C0E               	negf	___awmod@divisor,c
  5243  001AB0  1E0F               	comf	___awmod@divisor+1,f,c
  5244  001AB2  B0D8               	btfsc	status,0,c
  5245  001AB4  2A0F               	incf	___awmod@divisor+1,f,c
  5246  001AB6                     l4325:
  5247  001AB6  500E               	movf	___awmod@divisor,w,c
  5248  001AB8  100F               	iorwf	___awmod@divisor+1,w,c
  5249  001ABA  B4D8               	btfsc	status,2,c
  5250  001ABC  D018               	goto	l4341
  5251  001ABE  0E01               	movlw	1
  5252  001AC0  6E10               	movwf	___awmod@counter,c
  5253  001AC2  D004               	goto	l4331
  5254  001AC4                     l4329:
  5255  001AC4  90D8               	bcf	status,0,c
  5256  001AC6  360E               	rlcf	___awmod@divisor,f,c
  5257  001AC8  360F               	rlcf	___awmod@divisor+1,f,c
  5258  001ACA  2A10               	incf	___awmod@counter,f,c
  5259  001ACC                     l4331:
  5260  001ACC  AE0F               	btfss	___awmod@divisor+1,7,c
  5261  001ACE  D7FA               	goto	l4329
  5262  001AD0                     u3810:
  5263  001AD0  500E               	movf	___awmod@divisor,w,c
  5264  001AD2  5C0C               	subwf	___awmod@dividend,w,c
  5265  001AD4  500F               	movf	___awmod@divisor+1,w,c
  5266  001AD6  580D               	subwfb	___awmod@dividend+1,w,c
  5267  001AD8  A0D8               	btfss	status,0,c
  5268  001ADA  D004               	goto	l4337
  5269  001ADC  500E               	movf	___awmod@divisor,w,c
  5270  001ADE  5E0C               	subwf	___awmod@dividend,f,c
  5271  001AE0  500F               	movf	___awmod@divisor+1,w,c
  5272  001AE2  5A0D               	subwfb	___awmod@dividend+1,f,c
  5273  001AE4                     l4337:
  5274  001AE4  90D8               	bcf	status,0,c
  5275  001AE6  320F               	rrcf	___awmod@divisor+1,f,c
  5276  001AE8  320E               	rrcf	___awmod@divisor,f,c
  5277  001AEA  2E10               	decfsz	___awmod@counter,f,c
  5278  001AEC  D7F1               	goto	u3810
  5279  001AEE                     l4341:
  5280  001AEE  5011               	movf	___awmod@sign,w,c
  5281  001AF0  B4D8               	btfsc	status,2,c
  5282  001AF2  D004               	goto	l4345
  5283  001AF4  6C0C               	negf	___awmod@dividend,c
  5284  001AF6  1E0D               	comf	___awmod@dividend+1,f,c
  5285  001AF8  B0D8               	btfsc	status,0,c
  5286  001AFA  2A0D               	incf	___awmod@dividend+1,f,c
  5287  001AFC                     l4345:
  5288  001AFC  C00C  F00C         	movff	___awmod@dividend,?___awmod
  5289  001B00  C00D  F00D         	movff	___awmod@dividend+1,?___awmod+1
  5290  001B04  0012               	return		;funcret
  5291  001B06                     __end_of___awmod:
  5292                           	opt callstack 0
  5293                           
  5294 ;; *************** function ___awdiv *****************
  5295 ;; Defined at:
  5296 ;;		line 7 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\awdiv.c"
  5297 ;; Parameters:    Size  Location     Type
  5298 ;;  dividend        2   11[COMRAM] int 
  5299 ;;  divisor         2   13[COMRAM] int 
  5300 ;; Auto vars:     Size  Location     Type
  5301 ;;  quotient        2   17[COMRAM] int 
  5302 ;;  sign            1   16[COMRAM] unsigned char 
  5303 ;;  counter         1   15[COMRAM] unsigned char 
  5304 ;; Return value:  Size  Location     Type
  5305 ;;                  2   11[COMRAM] int 
  5306 ;; Registers used:
  5307 ;;		wreg, status,2, status,0
  5308 ;; Tracked objects:
  5309 ;;		On entry : 0/0
  5310 ;;		On exit  : 0/0
  5311 ;;		Unchanged: 0/0
  5312 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5313 ;;      Params:         4       0       0       0       0       0       0
  5314 ;;      Locals:         4       0       0       0       0       0       0
  5315 ;;      Temps:          0       0       0       0       0       0       0
  5316 ;;      Totals:         8       0       0       0       0       0       0
  5317 ;;Total ram usage:        8 bytes
  5318 ;; Hardware stack levels used:    1
  5319 ;; Hardware stack levels required when called:    4
  5320 ;; This function calls:
  5321 ;;		Nothing
  5322 ;; This function is called by:
  5323 ;;		_itoa
  5324 ;; This function uses a non-reentrant model
  5325 ;;
  5326                           
  5327                           	psect	text39
  5328  0017A0                     __ptext39:
  5329                           	opt callstack 0
  5330  0017A0                     ___awdiv:
  5331                           	opt callstack 22
  5332                           
  5333                           ;incstack = 0
  5334  0017A0  0E00               	movlw	0
  5335  0017A2  6E11               	movwf	___awdiv@sign,c
  5336  0017A4  AE0F               	btfss	___awdiv@divisor+1,7,c
  5337  0017A6  D006               	goto	l4685
  5338  0017A8  6C0E               	negf	___awdiv@divisor,c
  5339  0017AA  1E0F               	comf	___awdiv@divisor+1,f,c
  5340  0017AC  B0D8               	btfsc	status,0,c
  5341  0017AE  2A0F               	incf	___awdiv@divisor+1,f,c
  5342  0017B0  0E01               	movlw	1
  5343  0017B2  6E11               	movwf	___awdiv@sign,c
  5344  0017B4                     l4685:
  5345  0017B4  AE0D               	btfss	___awdiv@dividend+1,7,c
  5346  0017B6  D006               	goto	l4691
  5347  0017B8  6C0C               	negf	___awdiv@dividend,c
  5348  0017BA  1E0D               	comf	___awdiv@dividend+1,f,c
  5349  0017BC  B0D8               	btfsc	status,0,c
  5350  0017BE  2A0D               	incf	___awdiv@dividend+1,f,c
  5351  0017C0  0E01               	movlw	1
  5352  0017C2  1A11               	xorwf	___awdiv@sign,f,c
  5353  0017C4                     l4691:
  5354  0017C4  0E00               	movlw	0
  5355  0017C6  6E13               	movwf	___awdiv@quotient+1,c
  5356  0017C8  0E00               	movlw	0
  5357  0017CA  6E12               	movwf	___awdiv@quotient,c
  5358  0017CC  500E               	movf	___awdiv@divisor,w,c
  5359  0017CE  100F               	iorwf	___awdiv@divisor+1,w,c
  5360  0017D0  B4D8               	btfsc	status,2,c
  5361  0017D2  D01C               	goto	l4713
  5362  0017D4  0E01               	movlw	1
  5363  0017D6  6E10               	movwf	___awdiv@counter,c
  5364  0017D8  D004               	goto	l4699
  5365  0017DA                     l4697:
  5366  0017DA  90D8               	bcf	status,0,c
  5367  0017DC  360E               	rlcf	___awdiv@divisor,f,c
  5368  0017DE  360F               	rlcf	___awdiv@divisor+1,f,c
  5369  0017E0  2A10               	incf	___awdiv@counter,f,c
  5370  0017E2                     l4699:
  5371  0017E2  AE0F               	btfss	___awdiv@divisor+1,7,c
  5372  0017E4  D7FA               	goto	l4697
  5373  0017E6                     u4240:
  5374  0017E6  90D8               	bcf	status,0,c
  5375  0017E8  3612               	rlcf	___awdiv@quotient,f,c
  5376  0017EA  3613               	rlcf	___awdiv@quotient+1,f,c
  5377  0017EC  500E               	movf	___awdiv@divisor,w,c
  5378  0017EE  5C0C               	subwf	___awdiv@dividend,w,c
  5379  0017F0  500F               	movf	___awdiv@divisor+1,w,c
  5380  0017F2  580D               	subwfb	___awdiv@dividend+1,w,c
  5381  0017F4  A0D8               	btfss	status,0,c
  5382  0017F6  D005               	goto	l4709
  5383  0017F8  500E               	movf	___awdiv@divisor,w,c
  5384  0017FA  5E0C               	subwf	___awdiv@dividend,f,c
  5385  0017FC  500F               	movf	___awdiv@divisor+1,w,c
  5386  0017FE  5A0D               	subwfb	___awdiv@dividend+1,f,c
  5387  001800  8012               	bsf	___awdiv@quotient,0,c
  5388  001802                     l4709:
  5389  001802  90D8               	bcf	status,0,c
  5390  001804  320F               	rrcf	___awdiv@divisor+1,f,c
  5391  001806  320E               	rrcf	___awdiv@divisor,f,c
  5392  001808  2E10               	decfsz	___awdiv@counter,f,c
  5393  00180A  D7ED               	goto	u4240
  5394  00180C                     l4713:
  5395  00180C  5011               	movf	___awdiv@sign,w,c
  5396  00180E  B4D8               	btfsc	status,2,c
  5397  001810  D004               	goto	l4717
  5398  001812  6C12               	negf	___awdiv@quotient,c
  5399  001814  1E13               	comf	___awdiv@quotient+1,f,c
  5400  001816  B0D8               	btfsc	status,0,c
  5401  001818  2A13               	incf	___awdiv@quotient+1,f,c
  5402  00181A                     l4717:
  5403  00181A  C012  F00C         	movff	___awdiv@quotient,?___awdiv
  5404  00181E  C013  F00D         	movff	___awdiv@quotient+1,?___awdiv+1
  5405  001822  0012               	return		;funcret
  5406  001824                     __end_of___awdiv:
  5407                           	opt callstack 0
  5408                           
  5409 ;; *************** function _getNumber *****************
  5410 ;; Defined at:
  5411 ;;		line 196 in file "shared_logic.c"
  5412 ;; Parameters:    Size  Location     Type
  5413 ;;  pDigit          1    wreg     unsigned char 
  5414 ;;  pTarget         2   21[COMRAM] PTR unsigned short 
  5415 ;;		 -> show_score@tmpObjectData(16), 
  5416 ;; Auto vars:     Size  Location     Type
  5417 ;;  pDigit          1   23[COMRAM] unsigned char 
  5418 ;; Return value:  Size  Location     Type
  5419 ;;                  1    wreg      void 
  5420 ;; Registers used:
  5421 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5422 ;; Tracked objects:
  5423 ;;		On entry : 0/0
  5424 ;;		On exit  : 0/0
  5425 ;;		Unchanged: 0/0
  5426 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5427 ;;      Params:         2       0       0       0       0       0       0
  5428 ;;      Locals:         1       0       0       0       0       0       0
  5429 ;;      Temps:          0       0       0       0       0       0       0
  5430 ;;      Totals:         3       0       0       0       0       0       0
  5431 ;;Total ram usage:        3 bytes
  5432 ;; Hardware stack levels used:    1
  5433 ;; Hardware stack levels required when called:    5
  5434 ;; This function calls:
  5435 ;;		_memcpy
  5436 ;; This function is called by:
  5437 ;;		_show_score
  5438 ;; This function uses a non-reentrant model
  5439 ;;
  5440                           
  5441                           	psect	text40
  5442  00214A                     __ptext40:
  5443                           	opt callstack 0
  5444  00214A                     _getNumber:
  5445                           	opt callstack 22
  5446                           
  5447                           ;incstack = 0
  5448                           ;getNumber@pDigit stored from wreg
  5449  00214A  6E18               	movwf	getNumber@pDigit,c
  5450                           
  5451                           ;shared_logic.c: 196: void getNumber(uint8_t pDigit, uint16_t * pTarget);shared_logic.c:
      +                           197: {;shared_logic.c: 198:     memcpy(pTarget, Number[pDigit], 16);
  5452  00214C  C016  F00C         	movff	getNumber@pTarget,memcpy@dest
  5453  002150  C017  F00D         	movff	getNumber@pTarget+1,memcpy@dest+1
  5454  002154  5018               	movf	getNumber@pDigit,w,c
  5455  002156  0D10               	mullw	16
  5456  002158  0E21               	movlw	low _Number
  5457  00215A  24F3               	addwf	prodl,w,c
  5458  00215C  6E0E               	movwf	memcpy@src,c
  5459  00215E  0E06               	movlw	high _Number
  5460  002160  20F4               	addwfc	prodh,w,c
  5461  002162  6E0F               	movwf	memcpy@src+1,c
  5462  002164  0E00               	movlw	0
  5463  002166  6E11               	movwf	memcpy@n+1,c
  5464  002168  0E10               	movlw	16
  5465  00216A  6E10               	movwf	memcpy@n,c
  5466  00216C  EC20  F00F         	call	_memcpy	;wreg free
  5467  002170  0012               	return		;funcret
  5468  002172                     __end_of_getNumber:
  5469                           	opt callstack 0
  5470                           
  5471 ;; *************** function _memcpy *****************
  5472 ;; Defined at:
  5473 ;;		line 26 in file "shared_logic.c"
  5474 ;; Parameters:    Size  Location     Type
  5475 ;;  dest            2   11[COMRAM] PTR void 
  5476 ;;		 -> show_score@tmpObjectData(16), 
  5477 ;;  src             2   13[COMRAM] PTR const void 
  5478 ;;		 -> Number(160), 
  5479 ;;  n               2   15[COMRAM] unsigned int 
  5480 ;; Auto vars:     Size  Location     Type
  5481 ;;  s               2   19[COMRAM] PTR unsigned char 
  5482 ;;		 -> Number(160), 
  5483 ;;  d               2   17[COMRAM] PTR unsigned char 
  5484 ;;		 -> show_score@tmpObjectData(16), 
  5485 ;; Return value:  Size  Location     Type
  5486 ;;                  2   11[COMRAM] PTR void 
  5487 ;; Registers used:
  5488 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru
  5489 ;; Tracked objects:
  5490 ;;		On entry : 0/0
  5491 ;;		On exit  : 0/0
  5492 ;;		Unchanged: 0/0
  5493 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5494 ;;      Params:         6       0       0       0       0       0       0
  5495 ;;      Locals:         4       0       0       0       0       0       0
  5496 ;;      Temps:          0       0       0       0       0       0       0
  5497 ;;      Totals:        10       0       0       0       0       0       0
  5498 ;;Total ram usage:       10 bytes
  5499 ;; Hardware stack levels used:    1
  5500 ;; Hardware stack levels required when called:    4
  5501 ;; This function calls:
  5502 ;;		Nothing
  5503 ;; This function is called by:
  5504 ;;		_getNumber
  5505 ;; This function uses a non-reentrant model
  5506 ;;
  5507                           
  5508                           	psect	text41
  5509  001E40                     __ptext41:
  5510                           	opt callstack 0
  5511  001E40                     _memcpy:
  5512                           	opt callstack 22
  5513                           
  5514                           ;shared_logic.c: 26: void *memcpy(void *dest, const void *src, size_t n);shared_logic.c:
      +                           27: {;shared_logic.c: 28:     char *d = (char*)dest, *s = (char*)src;
  5515                           
  5516                           ;incstack = 0
  5517  001E40  C00C  F012         	movff	memcpy@dest,memcpy@d
  5518  001E44  C00D  F013         	movff	memcpy@dest+1,memcpy@d+1
  5519  001E48  C00E  F014         	movff	memcpy@src,memcpy@s
  5520  001E4C  C00F  F015         	movff	memcpy@src+1,memcpy@s+1
  5521                           
  5522                           ;shared_logic.c: 30:     while(n--)
  5523  001E50  D00F               	goto	l4663
  5524  001E52                     l4657:
  5525                           
  5526                           ;shared_logic.c: 31:         *d++ = *s++;
  5527  001E52  C014  FFF6         	movff	memcpy@s,tblptrl
  5528  001E56  C015  FFF7         	movff	memcpy@s+1,tblptrh
  5529  001E5A                     	if	0	;tblptru may be non-zero
  5530  001E5A                     	endif
  5531  001E5A                     	if	0	;tblptru may be non-zero
  5532  001E5A                     	endif
  5533  001E5A  C012  FFD9         	movff	memcpy@d,fsr2l
  5534  001E5E  C013  FFDA         	movff	memcpy@d+1,fsr2h
  5535  001E62  0008               	tblrd		*
  5536  001E64  CFF5 FFDF          	movff	tablat,indf2
  5537  001E68  4A14               	infsnz	memcpy@s,f,c
  5538  001E6A  2A15               	incf	memcpy@s+1,f,c
  5539  001E6C  4A12               	infsnz	memcpy@d,f,c
  5540  001E6E  2A13               	incf	memcpy@d+1,f,c
  5541  001E70                     l4663:
  5542                           
  5543                           ;shared_logic.c: 30:     while(n--)
  5544  001E70  0610               	decf	memcpy@n,f,c
  5545  001E72  A0D8               	btfss	status,0,c
  5546  001E74  0611               	decf	memcpy@n+1,f,c
  5547  001E76  2810               	incf	memcpy@n,w,c
  5548  001E78  E1EC               	bnz	l4657
  5549  001E7A  2811               	incf	memcpy@n+1,w,c
  5550  001E7C  B4D8               	btfsc	status,2,c
  5551  001E7E  0012               	return	
  5552  001E80  D7E8               	goto	l4657
  5553  001E82                     __end_of_memcpy:
  5554                           	opt callstack 0
  5555                           
  5556 ;; *************** function _readHighScore *****************
  5557 ;; Defined at:
  5558 ;;		line 201 in file "shared_logic.c"
  5559 ;; Parameters:    Size  Location     Type
  5560 ;;  adress          1    wreg     unsigned char 
  5561 ;; Auto vars:     Size  Location     Type
  5562 ;;  adress          1   13[COMRAM] unsigned char 
  5563 ;;  tmpbyte         1   14[COMRAM] unsigned char 
  5564 ;; Return value:  Size  Location     Type
  5565 ;;                  1    wreg      unsigned char 
  5566 ;; Registers used:
  5567 ;;		wreg, status,2, status,0, cstack
  5568 ;; Tracked objects:
  5569 ;;		On entry : 0/0
  5570 ;;		On exit  : 0/0
  5571 ;;		Unchanged: 0/0
  5572 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5573 ;;      Params:         0       0       0       0       0       0       0
  5574 ;;      Locals:         2       0       0       0       0       0       0
  5575 ;;      Temps:          0       0       0       0       0       0       0
  5576 ;;      Totals:         2       0       0       0       0       0       0
  5577 ;;Total ram usage:        2 bytes
  5578 ;; Hardware stack levels used:    1
  5579 ;; Hardware stack levels required when called:    6
  5580 ;; This function calls:
  5581 ;;		_ReadEEByte
  5582 ;;		_WriteEEByte
  5583 ;; This function is called by:
  5584 ;;		_tetris_main
  5585 ;;		_snake_main
  5586 ;; This function uses a non-reentrant model
  5587 ;;
  5588                           
  5589                           	psect	text42
  5590  002172                     __ptext42:
  5591                           	opt callstack 0
  5592  002172                     _readHighScore:
  5593                           	opt callstack 22
  5594                           
  5595                           ;incstack = 0
  5596                           ;readHighScore@adress stored from wreg
  5597  002172  6E0E               	movwf	readHighScore@adress,c
  5598                           
  5599                           ;shared_logic.c: 201: uint8_t readHighScore(uint8_t adress);shared_logic.c: 202: {;share
      +                          d_logic.c: 203:     uint8_t tmpbyte;;shared_logic.c: 204:     tmpbyte = ReadEEByte(adres
      +                          s);
  5600  002174  500E               	movf	readHighScore@adress,w,c
  5601  002176  EC8E  F011         	call	_ReadEEByte
  5602  00217A  6E0F               	movwf	readHighScore@tmpbyte,c
  5603                           
  5604                           ;shared_logic.c: 205:     if (tmpbyte == 255) {
  5605  00217C  280F               	incf	readHighScore@tmpbyte,w,c
  5606  00217E  A4D8               	btfss	status,2,c
  5607  002180  D002               	goto	l605
  5608                           
  5609                           ;shared_logic.c: 206:         tmpbyte = 0;
  5610  002182  0E00               	movlw	0
  5611  002184  6E0F               	movwf	readHighScore@tmpbyte,c
  5612  002186                     l605:
  5613                           
  5614                           ;shared_logic.c: 208:     if (tmpbyte == 0){
  5615  002186  500F               	movf	readHighScore@tmpbyte,w,c
  5616  002188  A4D8               	btfss	status,2,c
  5617  00218A  D005               	goto	l4951
  5618                           
  5619                           ;shared_logic.c: 209:        WriteEEByte(adress,0);
  5620  00218C  0E00               	movlw	0
  5621  00218E  6E0C               	movwf	WriteEEByte@data,c
  5622  002190  500E               	movf	readHighScore@adress,w,c
  5623  002192  EC0F  F010         	call	_WriteEEByte
  5624  002196                     l4951:
  5625                           
  5626                           ;shared_logic.c: 211:     return tmpbyte;
  5627  002196  500F               	movf	readHighScore@tmpbyte,w,c
  5628  002198  0012               	return		;funcret
  5629  00219A                     __end_of_readHighScore:
  5630                           	opt callstack 0
  5631                           
  5632 ;; *************** function _WriteEEByte *****************
  5633 ;; Defined at:
  5634 ;;		line 14 in file "EEPROM.c"
  5635 ;; Parameters:    Size  Location     Type
  5636 ;;  address         1    wreg     unsigned char 
  5637 ;;  data            1   11[COMRAM] unsigned char 
  5638 ;; Auto vars:     Size  Location     Type
  5639 ;;  address         1   12[COMRAM] unsigned char 
  5640 ;; Return value:  Size  Location     Type
  5641 ;;                  1    wreg      void 
  5642 ;; Registers used:
  5643 ;;		wreg, status,2, cstack
  5644 ;; Tracked objects:
  5645 ;;		On entry : 0/0
  5646 ;;		On exit  : 0/0
  5647 ;;		Unchanged: 0/0
  5648 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5649 ;;      Params:         1       0       0       0       0       0       0
  5650 ;;      Locals:         1       0       0       0       0       0       0
  5651 ;;      Temps:          0       0       0       0       0       0       0
  5652 ;;      Totals:         2       0       0       0       0       0       0
  5653 ;;Total ram usage:        2 bytes
  5654 ;; Hardware stack levels used:    1
  5655 ;; Hardware stack levels required when called:    5
  5656 ;; This function calls:
  5657 ;;		_waitForInterrupt
  5658 ;; This function is called by:
  5659 ;;		_readHighScore
  5660 ;;		_writeHighScore
  5661 ;; This function uses a non-reentrant model
  5662 ;;
  5663                           
  5664                           	psect	text43
  5665  00201E                     __ptext43:
  5666                           	opt callstack 0
  5667  00201E                     _WriteEEByte:
  5668                           	opt callstack 22
  5669                           
  5670                           ;incstack = 0
  5671                           ;WriteEEByte@address stored from wreg
  5672  00201E  6E0D               	movwf	WriteEEByte@address,c
  5673  002020                     l148:
  5674                           
  5675                           ;EEPROM.c: 17:     EECON1bits.WRERR = 0;
  5676  002020  96A6               	bcf	4006,3,c	;volsfr
  5677                           
  5678                           ;EEPROM.c: 18: EECON1bits.WREN=1;
  5679  002022  84A6               	bsf	4006,2,c	;volsfr
  5680                           
  5681                           ;EEPROM.c: 19: EEADR=address;
  5682  002024  C00D  FFA9         	movff	WriteEEByte@address,4009	;volatile
  5683                           
  5684                           ;EEPROM.c: 20: EEDATA=data;
  5685  002028  C00C  FFA8         	movff	WriteEEByte@data,4008	;volatile
  5686                           
  5687                           ;EEPROM.c: 21: EECON1bits.EEPGD=0;
  5688  00202C  9EA6               	bcf	4006,7,c	;volsfr
  5689                           
  5690                           ;EEPROM.c: 22: EECON1bits.CFGS=0;
  5691  00202E  9CA6               	bcf	4006,6,c	;volsfr
  5692                           
  5693                           ;EEPROM.c: 23: waitForInterrupt();
  5694  002030  ECBA  F011         	call	_waitForInterrupt	;wreg free
  5695                           
  5696                           ;EEPROM.c: 24: INTCONbits.GIE=0;
  5697  002034  9EF2               	bcf	4082,7,c	;volatile
  5698                           
  5699                           ;EEPROM.c: 26: EECON2=0x55;
  5700  002036  0E55               	movlw	85
  5701  002038  6EA7               	movwf	4007,c	;volsfr
  5702                           
  5703                           ;EEPROM.c: 27: EECON2=0xAA;
  5704  00203A  0EAA               	movlw	170
  5705  00203C  6EA7               	movwf	4007,c	;volsfr
  5706                           
  5707                           ;EEPROM.c: 28: EECON1bits.WR=1;
  5708  00203E  82A6               	bsf	4006,1,c	;volsfr
  5709                           
  5710                           ;EEPROM.c: 30: INTCONbits.GIE=1;
  5711  002040  8EF2               	bsf	4082,7,c	;volatile
  5712  002042                     l149:
  5713  002042  B2A6               	btfsc	4006,1,c	;volsfr
  5714  002044  D7FE               	goto	l149
  5715                           
  5716                           ;EEPROM.c: 32: } while (EECON1bits.WRERR == 1);
  5717  002046  B6A6               	btfsc	4006,3,c	;volsfr
  5718  002048  D7EB               	goto	l148
  5719                           
  5720                           ;EEPROM.c: 33: EECON1bits.WREN=0;
  5721  00204A  94A6               	bcf	4006,2,c	;volsfr
  5722  00204C  0012               	return		;funcret
  5723  00204E                     __end_of_WriteEEByte:
  5724                           	opt callstack 0
  5725                           
  5726 ;; *************** function _ReadEEByte *****************
  5727 ;; Defined at:
  5728 ;;		line 4 in file "EEPROM.c"
  5729 ;; Parameters:    Size  Location     Type
  5730 ;;  address         1    wreg     unsigned char 
  5731 ;; Auto vars:     Size  Location     Type
  5732 ;;  address         1   11[COMRAM] unsigned char 
  5733 ;; Return value:  Size  Location     Type
  5734 ;;                  1    wreg      unsigned char 
  5735 ;; Registers used:
  5736 ;;		wreg, status,2
  5737 ;; Tracked objects:
  5738 ;;		On entry : 0/0
  5739 ;;		On exit  : 0/0
  5740 ;;		Unchanged: 0/0
  5741 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5742 ;;      Params:         0       0       0       0       0       0       0
  5743 ;;      Locals:         1       0       0       0       0       0       0
  5744 ;;      Temps:          0       0       0       0       0       0       0
  5745 ;;      Totals:         1       0       0       0       0       0       0
  5746 ;;Total ram usage:        1 bytes
  5747 ;; Hardware stack levels used:    1
  5748 ;; Hardware stack levels required when called:    4
  5749 ;; This function calls:
  5750 ;;		Nothing
  5751 ;; This function is called by:
  5752 ;;		_readHighScore
  5753 ;; This function uses a non-reentrant model
  5754 ;;
  5755                           
  5756                           	psect	text44
  5757  00231C                     __ptext44:
  5758                           	opt callstack 0
  5759  00231C                     _ReadEEByte:
  5760                           	opt callstack 23
  5761                           
  5762                           ;incstack = 0
  5763                           ;ReadEEByte@address stored from wreg
  5764  00231C  6E0C               	movwf	ReadEEByte@address,c
  5765                           
  5766                           ;EEPROM.c: 4: uint8_t ReadEEByte(uint8_t address);EEPROM.c: 5: {;EEPROM.c: 6: EEADR=addr
      +                          ess;
  5767  00231E  C00C  FFA9         	movff	ReadEEByte@address,4009	;volatile
  5768                           
  5769                           ;EEPROM.c: 7: EECON1bits.EEPGD=0;
  5770  002322  9EA6               	bcf	4006,7,c	;volsfr
  5771                           
  5772                           ;EEPROM.c: 8: EECON1bits.CFGS=0;
  5773  002324  9CA6               	bcf	4006,6,c	;volsfr
  5774                           
  5775                           ;EEPROM.c: 9: EECON1bits.RD=1;
  5776  002326  80A6               	bsf	4006,0,c	;volsfr
  5777                           
  5778                           ;EEPROM.c: 10: return EEDATA;
  5779  002328  50A8               	movf	4008,w,c	;volatile
  5780  00232A  0012               	return		;funcret
  5781  00232C                     __end_of_ReadEEByte:
  5782                           	opt callstack 0
  5783                           
  5784 ;; *************** function _MoveSnakes *****************
  5785 ;; Defined at:
  5786 ;;		line 104 in file "snake.c"
  5787 ;; Parameters:    Size  Location     Type
  5788 ;;		None
  5789 ;; Auto vars:     Size  Location     Type
  5790 ;;  i               1   39[COMRAM] unsigned char 
  5791 ;; Return value:  Size  Location     Type
  5792 ;;                  1    wreg      void 
  5793 ;; Registers used:
  5794 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5795 ;; Tracked objects:
  5796 ;;		On entry : 0/0
  5797 ;;		On exit  : 0/0
  5798 ;;		Unchanged: 0/0
  5799 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5800 ;;      Params:         0       0       0       0       0       0       0
  5801 ;;      Locals:         1       0       0       0       0       0       0
  5802 ;;      Temps:          4       0       0       0       0       0       0
  5803 ;;      Totals:         5       0       0       0       0       0       0
  5804 ;;Total ram usage:        5 bytes
  5805 ;; Hardware stack levels used:    1
  5806 ;; Hardware stack levels required when called:    8
  5807 ;; This function calls:
  5808 ;;		_CreateBerry
  5809 ;;		_SnakeGraph
  5810 ;; This function is called by:
  5811 ;;		_snake_main
  5812 ;; This function uses a non-reentrant model
  5813 ;;
  5814                           
  5815                           	psect	text45
  5816  000890                     __ptext45:
  5817                           	opt callstack 0
  5818  000890                     _MoveSnakes:
  5819                           	opt callstack 20
  5820                           
  5821                           ;snake.c: 106:     uint8_t i;;snake.c: 107:     switch (direction){
  5822                           
  5823                           ;incstack = 0
  5824  000890  D030               	goto	l5045
  5825  000892                     l5007:
  5826                           
  5827                           ; BSR set to: 0
  5828                           ;snake.c: 109:             positions[0].y = positions[0].y - 1;
  5829  000892  0101               	movlb	1	; () banked
  5830  000894  0501               	decf	(_positions+1)& (0+255),w,b
  5831  000896  6F01               	movwf	(_positions+1)& (0+255),b
  5832                           
  5833                           ; BSR set to: 1
  5834                           ;snake.c: 110:             previous_direction = 0;
  5835  000898  0E00               	movlw	0
  5836  00089A  6E3C               	movwf	_previous_direction,c
  5837                           
  5838                           ; BSR set to: 1
  5839                           ;snake.c: 111:             if (positions[0].y >= 200){
  5840  00089C  0EC7               	movlw	199
  5841  00089E  6501               	cpfsgt	(_positions+1)& (0+255),b
  5842  0008A0  D03D               	goto	l5047
  5843                           
  5844                           ; BSR set to: 1
  5845                           ;snake.c: 112:                 positions[0].y = 15;
  5846  0008A2  0E0F               	movlw	15
  5847  0008A4  D019               	goto	L3
  5848  0008A6                     l5015:
  5849                           
  5850                           ; BSR set to: 0
  5851                           ;snake.c: 116:             positions[0].x = positions[0].x + 1;
  5852  0008A6  0101               	movlb	1	; () banked
  5853  0008A8  2900               	incf	_positions& (0+255),w,b
  5854  0008AA  6F00               	movwf	_positions& (0+255),b
  5855                           
  5856                           ; BSR set to: 1
  5857                           ;snake.c: 117:             previous_direction = 1;
  5858  0008AC  0E01               	movlw	1
  5859  0008AE  6E3C               	movwf	_previous_direction,c
  5860                           
  5861                           ; BSR set to: 1
  5862                           ;snake.c: 118:             if (positions[0].x > 7 & positions[0].x < 200){
  5863  0008B0  0E07               	movlw	7
  5864  0008B2  6500               	cpfsgt	_positions& (0+255),b
  5865  0008B4  D033               	goto	l5047
  5866                           
  5867                           ; BSR set to: 1
  5868  0008B6  0EC8               	movlw	200
  5869  0008B8  6100               	cpfslt	_positions& (0+255),b
  5870  0008BA  D030               	goto	l5047
  5871                           
  5872                           ; BSR set to: 1
  5873                           ;snake.c: 119:                 positions[0].x = 0;
  5874  0008BC  0E00               	movlw	0
  5875  0008BE  D017               	goto	L4
  5876  0008C0                     l5025:
  5877                           
  5878                           ; BSR set to: 0
  5879                           ;snake.c: 123:             positions[0].y = positions[0].y + 1;
  5880  0008C0  0101               	movlb	1	; () banked
  5881  0008C2  2901               	incf	(_positions+1)& (0+255),w,b
  5882  0008C4  6F01               	movwf	(_positions+1)& (0+255),b
  5883                           
  5884                           ; BSR set to: 1
  5885                           ;snake.c: 124:             previous_direction = 2;
  5886  0008C6  0E02               	movlw	2
  5887  0008C8  6E3C               	movwf	_previous_direction,c
  5888                           
  5889                           ; BSR set to: 1
  5890                           ;snake.c: 125:             if (positions[0].y > 15 & positions[0].y < 200) {
  5891  0008CA  0E0F               	movlw	15
  5892  0008CC  6501               	cpfsgt	(_positions+1)& (0+255),b
  5893  0008CE  D026               	goto	l5047
  5894                           
  5895                           ; BSR set to: 1
  5896  0008D0  0EC8               	movlw	200
  5897  0008D2  6101               	cpfslt	(_positions+1)& (0+255),b
  5898  0008D4  D023               	goto	l5047
  5899                           
  5900                           ; BSR set to: 1
  5901                           ;snake.c: 126:                 positions[0].y = 0;
  5902  0008D6  0E00               	movlw	0
  5903  0008D8                     L3:
  5904  0008D8  6F01               	movwf	(_positions+1)& (0+255),b
  5905  0008DA  D020               	goto	l5047
  5906  0008DC                     l5035:
  5907                           
  5908                           ; BSR set to: 0
  5909                           ;snake.c: 130:             positions[0].x = positions[0].x - 1;
  5910  0008DC  0101               	movlb	1	; () banked
  5911  0008DE  0500               	decf	_positions& (0+255),w,b
  5912  0008E0  6F00               	movwf	_positions& (0+255),b
  5913                           
  5914                           ; BSR set to: 1
  5915                           ;snake.c: 131:             previous_direction = 3;
  5916  0008E2  0E03               	movlw	3
  5917  0008E4  6E3C               	movwf	_previous_direction,c
  5918                           
  5919                           ; BSR set to: 1
  5920                           ;snake.c: 132:             if (positions[0].x >= 200){
  5921  0008E6  0EC7               	movlw	199
  5922  0008E8  6500               	cpfsgt	_positions& (0+255),b
  5923  0008EA  D018               	goto	l5047
  5924                           
  5925                           ; BSR set to: 1
  5926                           ;snake.c: 133:                 positions[0].x = 7;
  5927  0008EC  0E07               	movlw	7
  5928  0008EE                     L4:
  5929  0008EE  6F00               	movwf	_positions& (0+255),b
  5930  0008F0  D015               	goto	l5047
  5931  0008F2                     l5045:
  5932  0008F2  0100               	movlb	0	; () banked
  5933  0008F4  518A               	movf	_direction& (0+255),w,b
  5934  0008F6  6E24               	movwf	??_MoveSnakes& (0+255),c
  5935  0008F8  6A25               	clrf	(??_MoveSnakes+1)& (0+255),c
  5936                           
  5937                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  5938                           ; Switch size 1, requested type "simple"
  5939                           ; Number of cases is 1, Range of values is 0 to 0
  5940                           ; switch strategies available:
  5941                           ; Name         Instructions Cycles
  5942                           ; simple_byte            4     3 (average)
  5943                           ;	Chosen strategy is simple_byte
  5944  0008FA  5025               	movf	??_MoveSnakes+1,w,c
  5945  0008FC  0A00               	xorlw	0	; case 0
  5946  0008FE  A4D8               	btfss	status,2,c
  5947  000900  D00D               	goto	l5047
  5948                           
  5949                           ; BSR set to: 0
  5950                           ; Switch size 1, requested type "simple"
  5951                           ; Number of cases is 4, Range of values is 0 to 3
  5952                           ; switch strategies available:
  5953                           ; Name         Instructions Cycles
  5954                           ; simple_byte           13     7 (average)
  5955                           ;	Chosen strategy is simple_byte
  5956  000902  5024               	movf	??_MoveSnakes,w,c
  5957  000904  0A00               	xorlw	0	; case 0
  5958  000906  B4D8               	btfsc	status,2,c
  5959  000908  D7C4               	goto	l5007
  5960  00090A  0A01               	xorlw	1	; case 1
  5961  00090C  B4D8               	btfsc	status,2,c
  5962  00090E  D7CB               	goto	l5015
  5963  000910  0A03               	xorlw	3	; case 2
  5964  000912  B4D8               	btfsc	status,2,c
  5965  000914  D7D5               	goto	l5025
  5966  000916  0A01               	xorlw	1	; case 3
  5967  000918  B4D8               	btfsc	status,2,c
  5968  00091A  D7E0               	goto	l5035
  5969  00091C                     l5047:
  5970                           
  5971                           ;snake.c: 137:     for (i=0;i<=snakeLength;i++){
  5972  00091C  0E00               	movlw	0
  5973  00091E  6E28               	movwf	MoveSnakes@i,c
  5974  000920  D045               	goto	l5053
  5975  000922                     l5049:
  5976                           
  5977                           ;snake.c: 138:         positions[(snakeLength - i)+1].y = positions[snakeLength-i].y;
  5978  000922  5028               	movf	MoveSnakes@i,w,c
  5979  000924  C03F  F024         	movff	_snakeLength,??_MoveSnakes
  5980  000928  6A25               	clrf	(??_MoveSnakes+1)& (0+255),c
  5981  00092A  5E24               	subwf	??_MoveSnakes,f,c
  5982  00092C  0E00               	movlw	0
  5983  00092E  5A25               	subwfb	??_MoveSnakes+1,f,c
  5984  000930  90D8               	bcf	status,0,c
  5985  000932  3624               	rlcf	??_MoveSnakes,f,c
  5986  000934  3625               	rlcf	??_MoveSnakes+1,f,c
  5987  000936  0E01               	movlw	low (_positions+1)
  5988  000938  2424               	addwf	??_MoveSnakes,w,c
  5989  00093A  6ED9               	movwf	fsr2l,c
  5990  00093C  0E01               	movlw	high (_positions+1)
  5991  00093E  2025               	addwfc	??_MoveSnakes+1,w,c
  5992  000940  6EDA               	movwf	fsr2h,c
  5993  000942  5028               	movf	MoveSnakes@i,w,c
  5994  000944  C03F  F026         	movff	_snakeLength,??_MoveSnakes+2
  5995  000948  6A27               	clrf	(??_MoveSnakes+3)& (0+255),c
  5996  00094A  5E26               	subwf	??_MoveSnakes+2,f,c
  5997  00094C  0E00               	movlw	0
  5998  00094E  5A27               	subwfb	??_MoveSnakes+3,f,c
  5999  000950  90D8               	bcf	status,0,c
  6000  000952  3626               	rlcf	??_MoveSnakes+2,f,c
  6001  000954  3627               	rlcf	??_MoveSnakes+3,f,c
  6002  000956  0E03               	movlw	low (_positions+3)
  6003  000958  2426               	addwf	??_MoveSnakes+2,w,c
  6004  00095A  6EE1               	movwf	fsr1l,c
  6005  00095C  0E01               	movlw	high (_positions+3)
  6006  00095E  2027               	addwfc	??_MoveSnakes+3,w,c
  6007  000960  6EE2               	movwf	fsr1h,c
  6008  000962  CFDF FFE7          	movff	indf2,indf1
  6009                           
  6010                           ;snake.c: 139:         positions[(snakeLength - i)+1].x = positions[snakeLength-i].x;
  6011  000966  5028               	movf	MoveSnakes@i,w,c
  6012  000968  C03F  F024         	movff	_snakeLength,??_MoveSnakes
  6013  00096C  6A25               	clrf	(??_MoveSnakes+1)& (0+255),c
  6014  00096E  5E24               	subwf	??_MoveSnakes,f,c
  6015  000970  0E00               	movlw	0
  6016  000972  5A25               	subwfb	??_MoveSnakes+1,f,c
  6017  000974  90D8               	bcf	status,0,c
  6018  000976  3624               	rlcf	??_MoveSnakes,f,c
  6019  000978  3625               	rlcf	??_MoveSnakes+1,f,c
  6020  00097A  0E00               	movlw	low _positions
  6021  00097C  2424               	addwf	??_MoveSnakes,w,c
  6022  00097E  6ED9               	movwf	fsr2l,c
  6023  000980  0E01               	movlw	high _positions
  6024  000982  2025               	addwfc	??_MoveSnakes+1,w,c
  6025  000984  6EDA               	movwf	fsr2h,c
  6026  000986  5028               	movf	MoveSnakes@i,w,c
  6027  000988  C03F  F026         	movff	_snakeLength,??_MoveSnakes+2
  6028  00098C  6A27               	clrf	(??_MoveSnakes+3)& (0+255),c
  6029  00098E  5E26               	subwf	??_MoveSnakes+2,f,c
  6030  000990  0E00               	movlw	0
  6031  000992  5A27               	subwfb	??_MoveSnakes+3,f,c
  6032  000994  90D8               	bcf	status,0,c
  6033  000996  3626               	rlcf	??_MoveSnakes+2,f,c
  6034  000998  3627               	rlcf	??_MoveSnakes+3,f,c
  6035  00099A  0E02               	movlw	low (_positions+2)
  6036  00099C  2426               	addwf	??_MoveSnakes+2,w,c
  6037  00099E  6EE1               	movwf	fsr1l,c
  6038  0009A0  0E01               	movlw	high (_positions+2)
  6039  0009A2  2027               	addwfc	??_MoveSnakes+3,w,c
  6040  0009A4  6EE2               	movwf	fsr1h,c
  6041  0009A6  CFDF FFE7          	movff	indf2,indf1
  6042                           
  6043                           ;snake.c: 140:     }
  6044  0009AA  2A28               	incf	MoveSnakes@i,f,c
  6045  0009AC                     l5053:
  6046  0009AC  5028               	movf	MoveSnakes@i,w,c
  6047  0009AE  5C3F               	subwf	_snakeLength,w,c
  6048  0009B0  B0D8               	btfsc	status,0,c
  6049  0009B2  D7B7               	goto	l5049
  6050                           
  6051                           ;snake.c: 141:     if (positions[0].y == berryY && positions[0].x == berryX){
  6052  0009B4  503D               	movf	_berryY,w,c
  6053  0009B6  0101               	movlb	1	; () banked
  6054  0009B8  1901               	xorwf	(_positions+1)& (0+255),w,b
  6055  0009BA  A4D8               	btfss	status,2,c
  6056  0009BC  D008               	goto	l5063
  6057                           
  6058                           ; BSR set to: 1
  6059  0009BE  503E               	movf	_berryX,w,c
  6060  0009C0  1900               	xorwf	_positions& (0+255),w,b
  6061  0009C2  A4D8               	btfss	status,2,c
  6062  0009C4  D004               	goto	l5063
  6063                           
  6064                           ; BSR set to: 1
  6065                           ;snake.c: 142:         snakeLength = snakeLength + 1;
  6066  0009C6  283F               	incf	_snakeLength,w,c
  6067  0009C8  6E3F               	movwf	_snakeLength,c
  6068                           
  6069                           ; BSR set to: 1
  6070                           ;snake.c: 143:         CreateBerry();
  6071  0009CA  EC20  F00E         	call	_CreateBerry	;wreg free
  6072  0009CE                     l5063:
  6073                           
  6074                           ;snake.c: 145:     for (i=4;i<=snakeLength;i++){
  6075  0009CE  0E04               	movlw	4
  6076  0009D0  6E28               	movwf	MoveSnakes@i,c
  6077  0009D2  D01C               	goto	l5073
  6078  0009D4                     l5065:
  6079                           
  6080                           ;snake.c: 146:         if (positions[0].y == positions[i].y && positions[0].x == positio
      +                          ns[i].x){
  6081  0009D4  5028               	movf	MoveSnakes@i,w,c
  6082  0009D6  0D02               	mullw	2
  6083  0009D8  0E01               	movlw	low (_positions+1)
  6084  0009DA  24F3               	addwf	prodl,w,c
  6085  0009DC  6ED9               	movwf	fsr2l,c
  6086  0009DE  0E01               	movlw	high (_positions+1)
  6087  0009E0  20F4               	addwfc	prodh,w,c
  6088  0009E2  6EDA               	movwf	fsr2h,c
  6089  0009E4  50DE               	movf	postinc2,w,c
  6090  0009E6  0101               	movlb	1	; () banked
  6091  0009E8  1901               	xorwf	(_positions+1)& (0+255),w,b
  6092  0009EA  A4D8               	btfss	status,2,c
  6093  0009EC  D00E               	goto	l5071
  6094                           
  6095                           ; BSR set to: 1
  6096  0009EE  5028               	movf	MoveSnakes@i,w,c
  6097  0009F0  0D02               	mullw	2
  6098  0009F2  0E00               	movlw	low _positions
  6099  0009F4  24F3               	addwf	prodl,w,c
  6100  0009F6  6ED9               	movwf	fsr2l,c
  6101  0009F8  0E01               	movlw	high _positions
  6102  0009FA  20F4               	addwfc	prodh,w,c
  6103  0009FC  6EDA               	movwf	fsr2h,c
  6104  0009FE  5100               	movf	_positions& (0+255),w,b
  6105  000A00  18DE               	xorwf	postinc2,w,c
  6106  000A02  A4D8               	btfss	status,2,c
  6107  000A04  D002               	goto	l5071
  6108                           
  6109                           ; BSR set to: 1
  6110                           ;snake.c: 147:             EndOfGameSnake = 1;
  6111  000A06  0E01               	movlw	1
  6112  000A08  6E3B               	movwf	_EndOfGameSnake,c	;volatile
  6113  000A0A                     l5071:
  6114                           
  6115                           ; BSR set to: 1
  6116                           ;snake.c: 149:     };
  6117  000A0A  2A28               	incf	MoveSnakes@i,f,c
  6118  000A0C                     l5073:
  6119  000A0C  5028               	movf	MoveSnakes@i,w,c
  6120  000A0E  5C3F               	subwf	_snakeLength,w,c
  6121  000A10  B0D8               	btfsc	status,0,c
  6122  000A12  D7E0               	goto	l5065
  6123                           
  6124                           ;snake.c: 150:     SnakeGraph();
  6125  000A14  EC0D  F005         	call	_SnakeGraph	;wreg free
  6126  000A18  0012               	return		;funcret
  6127  000A1A                     __end_of_MoveSnakes:
  6128                           	opt callstack 0
  6129                           
  6130 ;; *************** function _SnakeGraph *****************
  6131 ;; Defined at:
  6132 ;;		line 83 in file "snake.c"
  6133 ;; Parameters:    Size  Location     Type
  6134 ;;		None
  6135 ;; Auto vars:     Size  Location     Type
  6136 ;;  i               1   34[COMRAM] unsigned char 
  6137 ;;  j               1   33[COMRAM] unsigned char 
  6138 ;; Return value:  Size  Location     Type
  6139 ;;                  1    wreg      void 
  6140 ;; Registers used:
  6141 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6142 ;; Tracked objects:
  6143 ;;		On entry : 0/0
  6144 ;;		On exit  : 0/0
  6145 ;;		Unchanged: 0/0
  6146 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6147 ;;      Params:         0       0       0       0       0       0       0
  6148 ;;      Locals:         2       0       0       0       0       0       0
  6149 ;;      Temps:          5       0       0       0       0       0       0
  6150 ;;      Totals:         7       0       0       0       0       0       0
  6151 ;;Total ram usage:        7 bytes
  6152 ;; Hardware stack levels used:    1
  6153 ;; Hardware stack levels required when called:    7
  6154 ;; This function calls:
  6155 ;;		_clearArray
  6156 ;;		_set_screen
  6157 ;; This function is called by:
  6158 ;;		_MoveSnakes
  6159 ;; This function uses a non-reentrant model
  6160 ;;
  6161                           
  6162                           	psect	text46
  6163  000A1A                     __ptext46:
  6164                           	opt callstack 0
  6165  000A1A                     _SnakeGraph:
  6166                           	opt callstack 20
  6167                           
  6168                           ;snake.c: 85:     uint8_t i;;snake.c: 86:     uint8_t j;;snake.c: 87:     clearArray(tmp
      +                          ObjectData, 8);
  6169                           
  6170                           ;incstack = 0
  6171  000A1A  0EB0               	movlw	low _tmpObjectData
  6172  000A1C  6E0C               	movwf	clearArray@pArray,c
  6173  000A1E  0E00               	movlw	high _tmpObjectData
  6174  000A20  6E0D               	movwf	clearArray@pArray+1,c
  6175  000A22  0E00               	movlw	0
  6176  000A24  6E0F               	movwf	clearArray@size+1,c
  6177  000A26  0E08               	movlw	8
  6178  000A28  6E0E               	movwf	clearArray@size,c
  6179  000A2A  EC9E  F00F         	call	_clearArray	;wreg free
  6180                           
  6181                           ;snake.c: 88:     for(i=0;i<=snakeLength;i++){
  6182  000A2E  0E00               	movlw	0
  6183  000A30  6E23               	movwf	SnakeGraph@i,c
  6184  000A32  D03F               	goto	l4827
  6185  000A34                     l4821:
  6186                           
  6187                           ;snake.c: 89:         j = positions[i].x;
  6188  000A34  5023               	movf	SnakeGraph@i,w,c
  6189  000A36  0D02               	mullw	2
  6190  000A38  0E00               	movlw	low _positions
  6191  000A3A  24F3               	addwf	prodl,w,c
  6192  000A3C  6ED9               	movwf	fsr2l,c
  6193  000A3E  0E01               	movlw	high _positions
  6194  000A40  20F4               	addwfc	prodh,w,c
  6195  000A42  6EDA               	movwf	fsr2h,c
  6196  000A44  50DF               	movf	indf2,w,c
  6197  000A46  6E22               	movwf	SnakeGraph@j,c
  6198                           
  6199                           ;snake.c: 90:         tmpObjectData[j] = (SnakeYtext[positions[i].y] | tmpObjectData[j])
      +                          ;
  6200  000A48  5022               	movf	SnakeGraph@j,w,c
  6201  000A4A  0D02               	mullw	2
  6202  000A4C  0EB0               	movlw	low _tmpObjectData
  6203  000A4E  24F3               	addwf	prodl,w,c
  6204  000A50  6ED9               	movwf	fsr2l,c
  6205  000A52  0E00               	movlw	high _tmpObjectData
  6206  000A54  20F4               	addwfc	prodh,w,c
  6207  000A56  6EDA               	movwf	fsr2h,c
  6208  000A58  CFDE F01D          	movff	postinc2,??_SnakeGraph
  6209  000A5C  CFDD F01E          	movff	postdec2,??_SnakeGraph+1
  6210  000A60  5023               	movf	SnakeGraph@i,w,c
  6211  000A62  0D02               	mullw	2
  6212  000A64  0E01               	movlw	low (_positions+1)
  6213  000A66  24F3               	addwf	prodl,w,c
  6214  000A68  6ED9               	movwf	fsr2l,c
  6215  000A6A  0E01               	movlw	high (_positions+1)
  6216  000A6C  20F4               	addwfc	prodh,w,c
  6217  000A6E  6EDA               	movwf	fsr2h,c
  6218  000A70  50DF               	movf	indf2,w,c
  6219  000A72  6E1F               	movwf	(??_SnakeGraph+2)& (0+255),c
  6220  000A74  501F               	movf	??_SnakeGraph+2,w,c
  6221  000A76  0D02               	mullw	2
  6222  000A78  0E01               	movlw	low _SnakeYtext
  6223  000A7A  24F3               	addwf	prodl,w,c
  6224  000A7C  6EF6               	movwf	tblptrl,c
  6225  000A7E  0E06               	movlw	high _SnakeYtext
  6226  000A80  20F4               	addwfc	prodh,w,c
  6227  000A82  6EF7               	movwf	tblptrh,c
  6228  000A84                     	if	0	;There are less than 3 active tblptr bytes
  6229  000A84                     	endif
  6230  000A84  0009               	tblrd		*+
  6231  000A86  CFF5 F020          	movff	tablat,??_SnakeGraph+3
  6232  000A8A  0009               	tblrd		*+
  6233  000A8C  CFF5 F021          	movff	tablat,??_SnakeGraph+4
  6234  000A90  501D               	movf	??_SnakeGraph,w,c
  6235  000A92  1220               	iorwf	??_SnakeGraph+3,f,c
  6236  000A94  501E               	movf	??_SnakeGraph+1,w,c
  6237  000A96  1221               	iorwf	??_SnakeGraph+4,f,c
  6238  000A98  5022               	movf	SnakeGraph@j,w,c
  6239  000A9A  0D02               	mullw	2
  6240  000A9C  0EB0               	movlw	low _tmpObjectData
  6241  000A9E  24F3               	addwf	prodl,w,c
  6242  000AA0  6ED9               	movwf	fsr2l,c
  6243  000AA2  0E00               	movlw	high _tmpObjectData
  6244  000AA4  20F4               	addwfc	prodh,w,c
  6245  000AA6  6EDA               	movwf	fsr2h,c
  6246  000AA8  C020  FFDE         	movff	??_SnakeGraph+3,postinc2
  6247  000AAC  C021  FFDD         	movff	??_SnakeGraph+4,postdec2
  6248                           
  6249                           ;snake.c: 91:     }
  6250  000AB0  2A23               	incf	SnakeGraph@i,f,c
  6251  000AB2                     l4827:
  6252  000AB2  5023               	movf	SnakeGraph@i,w,c
  6253  000AB4  5C3F               	subwf	_snakeLength,w,c
  6254  000AB6  B0D8               	btfsc	status,0,c
  6255  000AB8  D7BD               	goto	l4821
  6256                           
  6257                           ;snake.c: 92:     for(i=0;i<8;i++){
  6258  000ABA  0E00               	movlw	0
  6259  000ABC  6E23               	movwf	SnakeGraph@i,c
  6260  000ABE                     l4835:
  6261                           
  6262                           ;snake.c: 93:         if (berryX == i){
  6263  000ABE  5023               	movf	SnakeGraph@i,w,c
  6264  000AC0  183E               	xorwf	_berryX,w,c
  6265  000AC2  A4D8               	btfss	status,2,c
  6266  000AC4  D02A               	goto	l4839
  6267                           
  6268                           ;snake.c: 94:             tmpObjectData[i] = SnakeYtext[berryY] | tmpObjectData[i];
  6269  000AC6  5023               	movf	SnakeGraph@i,w,c
  6270  000AC8  0D02               	mullw	2
  6271  000ACA  0EB0               	movlw	low _tmpObjectData
  6272  000ACC  24F3               	addwf	prodl,w,c
  6273  000ACE  6ED9               	movwf	fsr2l,c
  6274  000AD0  0E00               	movlw	high _tmpObjectData
  6275  000AD2  20F4               	addwfc	prodh,w,c
  6276  000AD4  6EDA               	movwf	fsr2h,c
  6277  000AD6  CFDE F01D          	movff	postinc2,??_SnakeGraph
  6278  000ADA  CFDD F01E          	movff	postdec2,??_SnakeGraph+1
  6279  000ADE  503D               	movf	_berryY,w,c
  6280  000AE0  0D02               	mullw	2
  6281  000AE2  0E01               	movlw	low _SnakeYtext
  6282  000AE4  24F3               	addwf	prodl,w,c
  6283  000AE6  6EF6               	movwf	tblptrl,c
  6284  000AE8  0E06               	movlw	high _SnakeYtext
  6285  000AEA  20F4               	addwfc	prodh,w,c
  6286  000AEC  6EF7               	movwf	tblptrh,c
  6287  000AEE                     	if	0	;There are less than 3 active tblptr bytes
  6288  000AEE                     	endif
  6289  000AEE  0009               	tblrd		*+
  6290  000AF0  CFF5 F01F          	movff	tablat,??_SnakeGraph+2
  6291  000AF4  0009               	tblrd		*+
  6292  000AF6  CFF5 F020          	movff	tablat,??_SnakeGraph+3
  6293  000AFA  501D               	movf	??_SnakeGraph,w,c
  6294  000AFC  121F               	iorwf	??_SnakeGraph+2,f,c
  6295  000AFE  501E               	movf	??_SnakeGraph+1,w,c
  6296  000B00  1220               	iorwf	??_SnakeGraph+3,f,c
  6297  000B02  5023               	movf	SnakeGraph@i,w,c
  6298  000B04  0D02               	mullw	2
  6299  000B06  0EB0               	movlw	low _tmpObjectData
  6300  000B08  24F3               	addwf	prodl,w,c
  6301  000B0A  6ED9               	movwf	fsr2l,c
  6302  000B0C  0E00               	movlw	high _tmpObjectData
  6303  000B0E  20F4               	addwfc	prodh,w,c
  6304  000B10  6EDA               	movwf	fsr2h,c
  6305  000B12  C01F  FFDE         	movff	??_SnakeGraph+2,postinc2
  6306  000B16  C020  FFDD         	movff	??_SnakeGraph+3,postdec2
  6307  000B1A                     l4839:
  6308                           
  6309                           ;snake.c: 96:     }
  6310  000B1A  2A23               	incf	SnakeGraph@i,f,c
  6311  000B1C  0E07               	movlw	7
  6312  000B1E  6423               	cpfsgt	SnakeGraph@i,c
  6313  000B20  D7CE               	goto	l4835
  6314                           
  6315                           ;snake.c: 97:     clearArray(ObjectData, 8);
  6316  000B22  0ED0               	movlw	low _ObjectData
  6317  000B24  6E0C               	movwf	clearArray@pArray,c
  6318  000B26  0E00               	movlw	high _ObjectData
  6319  000B28  6E0D               	movwf	clearArray@pArray+1,c
  6320  000B2A  0E00               	movlw	0
  6321  000B2C  6E0F               	movwf	clearArray@size+1,c
  6322  000B2E  0E08               	movlw	8
  6323  000B30  6E0E               	movwf	clearArray@size,c
  6324  000B32  EC9E  F00F         	call	_clearArray	;wreg free
  6325                           
  6326                           ;snake.c: 98:     for(i=8;i!=0;i++){
  6327  000B36  0E08               	movlw	8
  6328  000B38  6E23               	movwf	SnakeGraph@i,c
  6329  000B3A                     l4851:
  6330                           
  6331                           ;snake.c: 99:         ObjectData[i] = tmpObjectData[i];
  6332  000B3A  5023               	movf	SnakeGraph@i,w,c
  6333  000B3C  0D02               	mullw	2
  6334  000B3E  0EB0               	movlw	low _tmpObjectData
  6335  000B40  24F3               	addwf	prodl,w,c
  6336  000B42  6ED9               	movwf	fsr2l,c
  6337  000B44  0E00               	movlw	high _tmpObjectData
  6338  000B46  20F4               	addwfc	prodh,w,c
  6339  000B48  6EDA               	movwf	fsr2h,c
  6340  000B4A  5023               	movf	SnakeGraph@i,w,c
  6341  000B4C  0D02               	mullw	2
  6342  000B4E  0ED0               	movlw	low _ObjectData
  6343  000B50  24F3               	addwf	prodl,w,c
  6344  000B52  6EE1               	movwf	fsr1l,c
  6345  000B54  0E00               	movlw	high _ObjectData
  6346  000B56  20F4               	addwfc	prodh,w,c
  6347  000B58  6EE2               	movwf	fsr1h,c
  6348  000B5A  CFDE FFE6          	movff	postinc2,postinc1
  6349  000B5E  CFDD FFE5          	movff	postdec2,postdec1
  6350                           
  6351                           ;snake.c: 100:     }
  6352  000B62  2A23               	incf	SnakeGraph@i,f,c
  6353  000B64  5023               	movf	SnakeGraph@i,w,c
  6354  000B66  A4D8               	btfss	status,2,c
  6355  000B68  D7E8               	goto	l4851
  6356                           
  6357                           ;snake.c: 101:     set_screen(ObjectData);
  6358  000B6A  0ED0               	movlw	low _ObjectData
  6359  000B6C  6E13               	movwf	set_screen@newData,c
  6360  000B6E  0E00               	movlw	high _ObjectData
  6361  000B70  6E14               	movwf	set_screen@newData+1,c
  6362  000B72  EC73  F00A         	call	_set_screen	;wreg free
  6363  000B76  0012               	return		;funcret
  6364  000B78                     __end_of_SnakeGraph:
  6365                           	opt callstack 0
  6366                           
  6367 ;; *************** function _CreateBerry *****************
  6368 ;; Defined at:
  6369 ;;		line 63 in file "snake.c"
  6370 ;; Parameters:    Size  Location     Type
  6371 ;;		None
  6372 ;; Auto vars:     Size  Location     Type
  6373 ;;  i               1   21[COMRAM] unsigned char 
  6374 ;;  randomGood      1   20[COMRAM] _Bool 
  6375 ;; Return value:  Size  Location     Type
  6376 ;;                  1    wreg      void 
  6377 ;; Registers used:
  6378 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6379 ;; Tracked objects:
  6380 ;;		On entry : 0/0
  6381 ;;		On exit  : 0/0
  6382 ;;		Unchanged: 0/0
  6383 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6384 ;;      Params:         0       0       0       0       0       0       0
  6385 ;;      Locals:         2       0       0       0       0       0       0
  6386 ;;      Temps:          1       0       0       0       0       0       0
  6387 ;;      Totals:         3       0       0       0       0       0       0
  6388 ;;Total ram usage:        3 bytes
  6389 ;; Hardware stack levels used:    1
  6390 ;; Hardware stack levels required when called:    6
  6391 ;; This function calls:
  6392 ;;		_genBerry
  6393 ;; This function is called by:
  6394 ;;		_MoveSnakes
  6395 ;;		_inistialize_snake
  6396 ;; This function uses a non-reentrant model
  6397 ;;
  6398                           
  6399                           	psect	text47
  6400  001C40                     __ptext47:
  6401                           	opt callstack 0
  6402  001C40                     _CreateBerry:
  6403                           	opt callstack 21
  6404                           
  6405                           ;snake.c: 69:     {;snake.c: 70:         randomGood = 0;
  6406                           
  6407                           ;snake.c: 68:     do
  6408                           
  6409                           ;incstack = 0
  6410  001C40  0E00               	movlw	0
  6411  001C42  6E15               	movwf	CreateBerry@randomGood,c
  6412                           
  6413                           ;snake.c: 71:         berryX = genBerry(8);
  6414  001C44  0E08               	movlw	8
  6415  001C46  EC51  F011         	call	_genBerry
  6416  001C4A  6E3E               	movwf	_berryX,c
  6417                           
  6418                           ;snake.c: 72:         berryY = genBerry(16);
  6419  001C4C  0E10               	movlw	16
  6420  001C4E  EC51  F011         	call	_genBerry
  6421  001C52  6E3D               	movwf	_berryY,c
  6422                           
  6423                           ;snake.c: 73:         for(i=0;i<snakeLength;i++)
  6424  001C54  0E00               	movlw	0
  6425  001C56  6E16               	movwf	CreateBerry@i,c
  6426  001C58  D01B               	goto	l3631
  6427  001C5A                     l3623:
  6428                           
  6429                           ;snake.c: 74:         {;snake.c: 75:             if (berryX == positions[i].x && berryY 
      +                          == positions[i].y)
  6430  001C5A  5016               	movf	CreateBerry@i,w,c
  6431  001C5C  0D02               	mullw	2
  6432  001C5E  0E00               	movlw	low _positions
  6433  001C60  24F3               	addwf	prodl,w,c
  6434  001C62  6ED9               	movwf	fsr2l,c
  6435  001C64  0E01               	movlw	high _positions
  6436  001C66  20F4               	addwfc	prodh,w,c
  6437  001C68  6EDA               	movwf	fsr2h,c
  6438  001C6A  503E               	movf	_berryX,w,c
  6439  001C6C  18DE               	xorwf	postinc2,w,c
  6440  001C6E  A4D8               	btfss	status,2,c
  6441  001C70  D00E               	goto	l3629
  6442  001C72  5016               	movf	CreateBerry@i,w,c
  6443  001C74  0D02               	mullw	2
  6444  001C76  0E01               	movlw	low (_positions+1)
  6445  001C78  24F3               	addwf	prodl,w,c
  6446  001C7A  6ED9               	movwf	fsr2l,c
  6447  001C7C  0E01               	movlw	high (_positions+1)
  6448  001C7E  20F4               	addwfc	prodh,w,c
  6449  001C80  6EDA               	movwf	fsr2h,c
  6450  001C82  503D               	movf	_berryY,w,c
  6451  001C84  18DE               	xorwf	postinc2,w,c
  6452  001C86  A4D8               	btfss	status,2,c
  6453  001C88  D002               	goto	l3629
  6454                           
  6455                           ;snake.c: 76:             {;snake.c: 77:                 randomGood = 1;
  6456  001C8A  0E01               	movlw	1
  6457  001C8C  6E15               	movwf	CreateBerry@randomGood,c
  6458  001C8E                     l3629:
  6459                           
  6460                           ;snake.c: 79:         }
  6461  001C8E  2A16               	incf	CreateBerry@i,f,c
  6462  001C90                     l3631:
  6463  001C90  503F               	movf	_snakeLength,w,c
  6464  001C92  5C16               	subwf	CreateBerry@i,w,c
  6465  001C94  A0D8               	btfss	status,0,c
  6466  001C96  D7E1               	goto	l3623
  6467                           
  6468                           ;snake.c: 80:     } while (randomGood == 1);
  6469  001C98  0415               	decf	CreateBerry@randomGood,w,c
  6470  001C9A  A4D8               	btfss	status,2,c
  6471  001C9C  0012               	return	
  6472  001C9E  D7D0               	goto	_CreateBerry
  6473  001CA0                     __end_of_CreateBerry:
  6474                           	opt callstack 0
  6475                           
  6476 ;; *************** function _genBerry *****************
  6477 ;; Defined at:
  6478 ;;		line 55 in file "snake.c"
  6479 ;; Parameters:    Size  Location     Type
  6480 ;;  size            1    wreg     unsigned char 
  6481 ;; Auto vars:     Size  Location     Type
  6482 ;;  size            1   17[COMRAM] unsigned char 
  6483 ;;  temp            1   18[COMRAM] unsigned char 
  6484 ;; Return value:  Size  Location     Type
  6485 ;;                  1    wreg      unsigned char 
  6486 ;; Registers used:
  6487 ;;		wreg, status,2, status,0, cstack
  6488 ;; Tracked objects:
  6489 ;;		On entry : 0/0
  6490 ;;		On exit  : 0/0
  6491 ;;		Unchanged: 0/0
  6492 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6493 ;;      Params:         0       0       0       0       0       0       0
  6494 ;;      Locals:         2       0       0       0       0       0       0
  6495 ;;      Temps:          0       0       0       0       0       0       0
  6496 ;;      Totals:         2       0       0       0       0       0       0
  6497 ;;Total ram usage:        2 bytes
  6498 ;; Hardware stack levels used:    1
  6499 ;; Hardware stack levels required when called:    5
  6500 ;; This function calls:
  6501 ;;		___lbmod
  6502 ;;		_rnd_get_num
  6503 ;; This function is called by:
  6504 ;;		_CreateBerry
  6505 ;; This function uses a non-reentrant model
  6506 ;;
  6507                           
  6508                           	psect	text48
  6509  0022A2                     __ptext48:
  6510                           	opt callstack 0
  6511  0022A2                     _genBerry:
  6512                           	opt callstack 21
  6513                           
  6514                           ;incstack = 0
  6515                           ;genBerry@size stored from wreg
  6516  0022A2  6E12               	movwf	genBerry@size,c
  6517                           
  6518                           ;snake.c: 55: uint8_t genBerry(uint8_t size);snake.c: 56: {;snake.c: 57:     uint8_t tem
      +                          p;;snake.c: 58:     temp = rnd_get_num();
  6519  0022A4  EC11  F00D         	call	_rnd_get_num	;wreg free
  6520  0022A8  6E13               	movwf	genBerry@temp,c
  6521                           
  6522                           ;snake.c: 60:     temp = temp % size;
  6523  0022AA  C012  F00C         	movff	genBerry@size,___lbmod@divisor
  6524  0022AE  5013               	movf	genBerry@temp,w,c
  6525  0022B0  EC54  F010         	call	___lbmod
  6526  0022B4  6E13               	movwf	genBerry@temp,c
  6527                           
  6528                           ;snake.c: 61:     return temp;
  6529  0022B6  5013               	movf	genBerry@temp,w,c
  6530  0022B8  0012               	return		;funcret
  6531  0022BA                     __end_of_genBerry:
  6532                           	opt callstack 0
  6533                           
  6534 ;; *************** function _rnd_get_num *****************
  6535 ;; Defined at:
  6536 ;;		line 18 in file "randgen.c"
  6537 ;; Parameters:    Size  Location     Type
  6538 ;;		None
  6539 ;; Auto vars:     Size  Location     Type
  6540 ;;  b               2   15[COMRAM] unsigned int 
  6541 ;; Return value:  Size  Location     Type
  6542 ;;                  1    wreg      unsigned char 
  6543 ;; Registers used:
  6544 ;;		wreg, status,2, status,0
  6545 ;; Tracked objects:
  6546 ;;		On entry : 0/0
  6547 ;;		On exit  : 0/0
  6548 ;;		Unchanged: 0/0
  6549 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6550 ;;      Params:         0       0       0       0       0       0       0
  6551 ;;      Locals:         2       0       0       0       0       0       0
  6552 ;;      Temps:          4       0       0       0       0       0       0
  6553 ;;      Totals:         6       0       0       0       0       0       0
  6554 ;;Total ram usage:        6 bytes
  6555 ;; Hardware stack levels used:    1
  6556 ;; Hardware stack levels required when called:    4
  6557 ;; This function calls:
  6558 ;;		Nothing
  6559 ;; This function is called by:
  6560 ;;		_selectNextObject
  6561 ;;		_genBerry
  6562 ;; This function uses a non-reentrant model
  6563 ;;
  6564                           
  6565                           	psect	text49
  6566  001A22                     __ptext49:
  6567                           	opt callstack 0
  6568  001A22                     _rnd_get_num:
  6569                           	opt callstack 20
  6570                           
  6571                           ;randgen.c: 21:     unsigned b = ((_lfsr >> 0) ^ (_lfsr >> 1) ^ (_lfsr >> 3) ^ (_lfsr >>
      +                           12) ) & 1;
  6572                           
  6573                           ;incstack = 0
  6574  001A22  C036  F00C         	movff	__lfsr,??_rnd_get_num
  6575  001A26  C037  F00D         	movff	__lfsr+1,??_rnd_get_num+1
  6576  001A2A  90D8               	bcf	status,0,c
  6577  001A2C  320D               	rrcf	??_rnd_get_num+1,f,c
  6578  001A2E  320C               	rrcf	??_rnd_get_num,f,c
  6579  001A30  90D8               	bcf	status,0,c
  6580  001A32  320D               	rrcf	??_rnd_get_num+1,f,c
  6581  001A34  320C               	rrcf	??_rnd_get_num,f,c
  6582  001A36  90D8               	bcf	status,0,c
  6583  001A38  320D               	rrcf	??_rnd_get_num+1,f,c
  6584  001A3A  320C               	rrcf	??_rnd_get_num,f,c
  6585  001A3C  90D8               	bcf	status,0,c
  6586  001A3E  3037               	rrcf	__lfsr+1,w,c
  6587  001A40  6E0F               	movwf	(??_rnd_get_num+3)& (0+255),c
  6588  001A42  3036               	rrcf	__lfsr,w,c
  6589  001A44  6E0E               	movwf	(??_rnd_get_num+2)& (0+255),c
  6590  001A46  500C               	movf	??_rnd_get_num,w,c
  6591  001A48  1A0E               	xorwf	??_rnd_get_num+2,f,c
  6592  001A4A  500D               	movf	??_rnd_get_num+1,w,c
  6593  001A4C  1A0F               	xorwf	??_rnd_get_num+3,f,c
  6594  001A4E  3837               	swapf	__lfsr+1,w,c
  6595  001A50  0B0F               	andlw	15
  6596  001A52  1A0E               	xorwf	??_rnd_get_num+2,f,c
  6597  001A54  0E00               	movlw	0
  6598  001A56  1A0F               	xorwf	??_rnd_get_num+3,f,c
  6599  001A58  5036               	movf	__lfsr,w,c
  6600  001A5A  1A0E               	xorwf	??_rnd_get_num+2,f,c
  6601  001A5C  5037               	movf	__lfsr+1,w,c
  6602  001A5E  1A0F               	xorwf	??_rnd_get_num+3,f,c
  6603  001A60  0E01               	movlw	1
  6604  001A62  140E               	andwf	??_rnd_get_num+2,w,c
  6605  001A64  6E10               	movwf	rnd_get_num@b,c
  6606  001A66  6A11               	clrf	rnd_get_num@b+1,c
  6607                           
  6608                           ;randgen.c: 22:     _lfsr = (_lfsr >> 1) | (b << 15);
  6609  001A68  C010  F00C         	movff	rnd_get_num@b,??_rnd_get_num
  6610  001A6C  C011  F00D         	movff	rnd_get_num@b+1,??_rnd_get_num+1
  6611  001A70  0E0F               	movlw	15
  6612  001A72                     u1895:
  6613  001A72  90D8               	bcf	status,0,c
  6614  001A74  360C               	rlcf	??_rnd_get_num,f,c
  6615  001A76  360D               	rlcf	??_rnd_get_num+1,f,c
  6616  001A78  2EE8               	decfsz	wreg,f,c
  6617  001A7A  D7FB               	goto	u1895
  6618  001A7C  90D8               	bcf	status,0,c
  6619  001A7E  3037               	rrcf	__lfsr+1,w,c
  6620  001A80  6E0F               	movwf	(??_rnd_get_num+3)& (0+255),c
  6621  001A82  3036               	rrcf	__lfsr,w,c
  6622  001A84  6E0E               	movwf	(??_rnd_get_num+2)& (0+255),c
  6623  001A86  500C               	movf	??_rnd_get_num,w,c
  6624  001A88  100E               	iorwf	??_rnd_get_num+2,w,c
  6625  001A8A  6E36               	movwf	__lfsr,c
  6626  001A8C  500D               	movf	??_rnd_get_num+1,w,c
  6627  001A8E  100F               	iorwf	??_rnd_get_num+3,w,c
  6628  001A90  6E37               	movwf	__lfsr+1,c
  6629                           
  6630                           ;randgen.c: 30:     return _lfsr;
  6631  001A92  5036               	movf	__lfsr,w,c
  6632  001A94  0012               	return		;funcret
  6633  001A96                     __end_of_rnd_get_num:
  6634                           	opt callstack 0
  6635                           
  6636 ;; *************** function ___lbmod *****************
  6637 ;; Defined at:
  6638 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\lbmod.c"
  6639 ;; Parameters:    Size  Location     Type
  6640 ;;  dividend        1    wreg     unsigned char 
  6641 ;;  divisor         1   11[COMRAM] unsigned char 
  6642 ;; Auto vars:     Size  Location     Type
  6643 ;;  dividend        1   12[COMRAM] unsigned char 
  6644 ;;  rem             1   14[COMRAM] unsigned char 
  6645 ;;  counter         1   13[COMRAM] unsigned char 
  6646 ;; Return value:  Size  Location     Type
  6647 ;;                  1    wreg      unsigned char 
  6648 ;; Registers used:
  6649 ;;		wreg, status,2, status,0
  6650 ;; Tracked objects:
  6651 ;;		On entry : 0/0
  6652 ;;		On exit  : 0/0
  6653 ;;		Unchanged: 0/0
  6654 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6655 ;;      Params:         1       0       0       0       0       0       0
  6656 ;;      Locals:         3       0       0       0       0       0       0
  6657 ;;      Temps:          0       0       0       0       0       0       0
  6658 ;;      Totals:         4       0       0       0       0       0       0
  6659 ;;Total ram usage:        4 bytes
  6660 ;; Hardware stack levels used:    1
  6661 ;; Hardware stack levels required when called:    4
  6662 ;; This function calls:
  6663 ;;		Nothing
  6664 ;; This function is called by:
  6665 ;;		_genBerry
  6666 ;; This function uses a non-reentrant model
  6667 ;;
  6668                           
  6669                           	psect	text50
  6670  0020A8                     __ptext50:
  6671                           	opt callstack 0
  6672  0020A8                     ___lbmod:
  6673                           	opt callstack 21
  6674                           
  6675                           ;incstack = 0
  6676                           ;___lbmod@dividend stored from wreg
  6677  0020A8  6E0D               	movwf	___lbmod@dividend,c
  6678  0020AA  0E08               	movlw	8
  6679  0020AC  6E0E               	movwf	___lbmod@counter,c
  6680  0020AE  0E00               	movlw	0
  6681  0020B0  6E0F               	movwf	___lbmod@rem,c
  6682  0020B2                     l3217:
  6683  0020B2  90D8               	bcf	status,0,c
  6684  0020B4  340D               	rlcf	___lbmod@dividend,w,c
  6685  0020B6  340F               	rlcf	___lbmod@rem,w,c
  6686  0020B8  6E0F               	movwf	___lbmod@rem,c
  6687  0020BA  90D8               	bcf	status,0,c
  6688  0020BC  360D               	rlcf	___lbmod@dividend,f,c
  6689  0020BE  500C               	movf	___lbmod@divisor,w,c
  6690  0020C0  5C0F               	subwf	___lbmod@rem,w,c
  6691  0020C2  A0D8               	btfss	status,0,c
  6692  0020C4  D002               	goto	l3225
  6693  0020C6  500C               	movf	___lbmod@divisor,w,c
  6694  0020C8  5E0F               	subwf	___lbmod@rem,f,c
  6695  0020CA                     l3225:
  6696  0020CA  2E0E               	decfsz	___lbmod@counter,f,c
  6697  0020CC  D7F2               	goto	l3217
  6698  0020CE  500F               	movf	___lbmod@rem,w,c
  6699  0020D0  0012               	return		;funcret
  6700  0020D2                     __end_of___lbmod:
  6701                           	opt callstack 0
  6702                           
  6703 ;; *************** function _initialise_globals *****************
  6704 ;; Defined at:
  6705 ;;		line 112 in file "pictris.c"
  6706 ;; Parameters:    Size  Location     Type
  6707 ;;		None
  6708 ;; Auto vars:     Size  Location     Type
  6709 ;;		None
  6710 ;; Return value:  Size  Location     Type
  6711 ;;                  1    wreg      void 
  6712 ;; Registers used:
  6713 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6714 ;; Tracked objects:
  6715 ;;		On entry : 0/0
  6716 ;;		On exit  : 0/0
  6717 ;;		Unchanged: 0/0
  6718 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6719 ;;      Params:         0       0       0       0       0       0       0
  6720 ;;      Locals:         0       0       0       0       0       0       0
  6721 ;;      Temps:          0       0       0       0       0       0       0
  6722 ;;      Totals:         0       0       0       0       0       0       0
  6723 ;;Total ram usage:        0 bytes
  6724 ;; Hardware stack levels used:    1
  6725 ;; Hardware stack levels required when called:    5
  6726 ;; This function calls:
  6727 ;;		_clearArray
  6728 ;;		_set_mS
  6729 ;; This function is called by:
  6730 ;;		_mainGameLoop
  6731 ;;		_main
  6732 ;; This function uses a non-reentrant model
  6733 ;;
  6734                           
  6735                           	psect	text51
  6736  001FE8                     __ptext51:
  6737                           	opt callstack 0
  6738  001FE8                     _initialise_globals:
  6739                           	opt callstack 24
  6740                           
  6741                           ;pictris.c: 115:     clearArray(ObjectData, 8);
  6742                           
  6743                           ;incstack = 0
  6744  001FE8  0ED0               	movlw	low _ObjectData
  6745  001FEA  6E0C               	movwf	clearArray@pArray,c
  6746  001FEC  0E00               	movlw	high _ObjectData
  6747  001FEE  6E0D               	movwf	clearArray@pArray+1,c
  6748  001FF0  0E00               	movlw	0
  6749  001FF2  6E0F               	movwf	clearArray@size+1,c
  6750  001FF4  0E08               	movlw	8
  6751  001FF6  6E0E               	movwf	clearArray@size,c
  6752  001FF8  EC9E  F00F         	call	_clearArray	;wreg free
  6753                           
  6754                           ;pictris.c: 116:     clearArray(BackgroundData, 8);
  6755  001FFC  0EC0               	movlw	low _BackgroundData
  6756  001FFE  6E0C               	movwf	clearArray@pArray,c
  6757  002000  0E00               	movlw	high _BackgroundData
  6758  002002  6E0D               	movwf	clearArray@pArray+1,c
  6759  002004  0E00               	movlw	0
  6760  002006  6E0F               	movwf	clearArray@size+1,c
  6761  002008  0E08               	movlw	8
  6762  00200A  6E0E               	movwf	clearArray@size,c
  6763  00200C  EC9E  F00F         	call	_clearArray	;wreg free
  6764                           
  6765                           ;pictris.c: 117:     set_mS(0);
  6766  002010  0E00               	movlw	0
  6767  002012  6E0D               	movwf	set_mS@amount+1,c
  6768  002014  0E00               	movlw	0
  6769  002016  6E0C               	movwf	set_mS@amount,c
  6770  002018  ECC5  F011         	call	_set_mS	;wreg free
  6771  00201C  0012               	return		;funcret
  6772  00201E                     __end_of_initialise_globals:
  6773                           	opt callstack 0
  6774                           
  6775 ;; *************** function _set_mS *****************
  6776 ;; Defined at:
  6777 ;;		line 15 in file "shared_logic.c"
  6778 ;; Parameters:    Size  Location     Type
  6779 ;;  amount          2   11[COMRAM] unsigned short 
  6780 ;; Auto vars:     Size  Location     Type
  6781 ;;		None
  6782 ;; Return value:  Size  Location     Type
  6783 ;;                  1    wreg      void 
  6784 ;; Registers used:
  6785 ;;		None
  6786 ;; Tracked objects:
  6787 ;;		On entry : 0/0
  6788 ;;		On exit  : 0/0
  6789 ;;		Unchanged: 0/0
  6790 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6791 ;;      Params:         2       0       0       0       0       0       0
  6792 ;;      Locals:         0       0       0       0       0       0       0
  6793 ;;      Temps:          0       0       0       0       0       0       0
  6794 ;;      Totals:         2       0       0       0       0       0       0
  6795 ;;Total ram usage:        2 bytes
  6796 ;; Hardware stack levels used:    1
  6797 ;; Hardware stack levels required when called:    4
  6798 ;; This function calls:
  6799 ;;		Nothing
  6800 ;; This function is called by:
  6801 ;;		_initialise_globals
  6802 ;;		_moveObjectDown
  6803 ;;		_selectNextObject
  6804 ;; This function uses a non-reentrant model
  6805 ;;
  6806                           
  6807                           	psect	text52
  6808  00238A                     __ptext52:
  6809                           	opt callstack 0
  6810  00238A                     _set_mS:
  6811                           	opt callstack 21
  6812                           
  6813                           ;shared_logic.c: 16:     mS = amount;
  6814                           
  6815                           ;incstack = 0
  6816  00238A  C00C  F034         	movff	set_mS@amount,_mS	;volatile
  6817  00238E  C00D  F035         	movff	set_mS@amount+1,_mS+1	;volatile
  6818  002392  0012               	return		;funcret
  6819  002394                     __end_of_set_mS:
  6820                           	opt callstack 0
  6821                           
  6822 ;; *************** function _initialise_screen *****************
  6823 ;; Defined at:
  6824 ;;		line 27 in file "screen.c"
  6825 ;; Parameters:    Size  Location     Type
  6826 ;;		None
  6827 ;; Auto vars:     Size  Location     Type
  6828 ;;		None
  6829 ;; Return value:  Size  Location     Type
  6830 ;;                  1    wreg      void 
  6831 ;; Registers used:
  6832 ;;		wreg, status,2
  6833 ;; Tracked objects:
  6834 ;;		On entry : 0/0
  6835 ;;		On exit  : 0/0
  6836 ;;		Unchanged: 0/0
  6837 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6838 ;;      Params:         0       0       0       0       0       0       0
  6839 ;;      Locals:         0       0       0       0       0       0       0
  6840 ;;      Temps:          0       0       0       0       0       0       0
  6841 ;;      Totals:         0       0       0       0       0       0       0
  6842 ;;Total ram usage:        0 bytes
  6843 ;; Hardware stack levels used:    1
  6844 ;; Hardware stack levels required when called:    4
  6845 ;; This function calls:
  6846 ;;		Nothing
  6847 ;; This function is called by:
  6848 ;;		_main
  6849 ;; This function uses a non-reentrant model
  6850 ;;
  6851                           
  6852                           	psect	text53
  6853  0023BE                     __ptext53:
  6854                           	opt callstack 0
  6855  0023BE                     _initialise_screen:
  6856                           	opt callstack 26
  6857                           
  6858                           ;screen.c: 28:     UpdateScreen = 1;
  6859                           
  6860                           ;incstack = 0
  6861  0023BE  0E01               	movlw	1
  6862  0023C0  6E39               	movwf	_UpdateScreen,c	;volatile
  6863  0023C2  0012               	return		;funcret
  6864  0023C4                     __end_of_initialise_screen:
  6865                           	opt callstack 0
  6866                           
  6867 ;; *************** function _initialise_hardware *****************
  6868 ;; Defined at:
  6869 ;;		line 89 in file "pictris.c"
  6870 ;; Parameters:    Size  Location     Type
  6871 ;;		None
  6872 ;; Auto vars:     Size  Location     Type
  6873 ;;		None
  6874 ;; Return value:  Size  Location     Type
  6875 ;;                  1    wreg      void 
  6876 ;; Registers used:
  6877 ;;		wreg, status,2, cstack
  6878 ;; Tracked objects:
  6879 ;;		On entry : 0/0
  6880 ;;		On exit  : 0/0
  6881 ;;		Unchanged: 0/0
  6882 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6883 ;;      Params:         0       0       0       0       0       0       0
  6884 ;;      Locals:         0       0       0       0       0       0       0
  6885 ;;      Temps:          0       0       0       0       0       0       0
  6886 ;;      Totals:         0       0       0       0       0       0       0
  6887 ;;Total ram usage:        0 bytes
  6888 ;; Hardware stack levels used:    1
  6889 ;; Hardware stack levels required when called:    5
  6890 ;; This function calls:
  6891 ;;		_initialise_TMR0
  6892 ;; This function is called by:
  6893 ;;		_main
  6894 ;; This function uses a non-reentrant model
  6895 ;;
  6896                           
  6897                           	psect	text54
  6898  001F00                     __ptext54:
  6899                           	opt callstack 0
  6900  001F00                     _initialise_hardware:
  6901                           	opt callstack 25
  6902                           
  6903                           ;pictris.c: 92:     OSCCONbits.IDLEN = 0;
  6904                           
  6905                           ;incstack = 0
  6906  001F00  9ED3               	bcf	4051,7,c	;volatile
  6907                           
  6908                           ;pictris.c: 93:     OSCCONbits.IRCF = 0x7;
  6909  001F02  0E70               	movlw	112
  6910  001F04  12D3               	iorwf	4051,f,c	;volatile
  6911                           
  6912                           ;pictris.c: 94:     OSCCONbits.SCS = 0x2;
  6913  001F06  50D3               	movf	4051,w,c	;volatile
  6914  001F08  0BFC               	andlw	-4
  6915  001F0A  0902               	iorlw	2
  6916  001F0C  6ED3               	movwf	4051,c	;volatile
  6917                           
  6918                           ;pictris.c: 97:     ADCON1bits.PCFG = 0x0F;
  6919  001F0E  0E0F               	movlw	15
  6920  001F10  12C1               	iorwf	4033,f,c	;volatile
  6921                           
  6922                           ;pictris.c: 100:     DDRA = 0x00; PORTA = 0x00;
  6923  001F12  0E00               	movlw	0
  6924  001F14  6E92               	movwf	3986,c	;volatile
  6925  001F16  0E00               	movlw	0
  6926  001F18  6E80               	movwf	3968,c	;volatile
  6927                           
  6928                           ;pictris.c: 101:     DDRB = 0xFF; PORTB = 0x00; INTCON2bits.RBPU = 0;
  6929  001F1A  6893               	setf	3987,c	;volatile
  6930  001F1C  0E00               	movlw	0
  6931  001F1E  6E81               	movwf	3969,c	;volatile
  6932  001F20  9EF1               	bcf	4081,7,c	;volatile
  6933                           
  6934                           ;pictris.c: 102:     DDRC = 0x00; PORTC = 0x00;
  6935  001F22  0E00               	movlw	0
  6936  001F24  6E94               	movwf	3988,c	;volatile
  6937  001F26  0E00               	movlw	0
  6938  001F28  6E82               	movwf	3970,c	;volatile
  6939                           
  6940                           ;pictris.c: 103:     DDRD = 0x00; PORTD = 0x00;
  6941  001F2A  0E00               	movlw	0
  6942  001F2C  6E95               	movwf	3989,c	;volatile
  6943  001F2E  0E00               	movlw	0
  6944  001F30  6E83               	movwf	3971,c	;volatile
  6945                           
  6946                           ;pictris.c: 105:     initialise_TMR0();
  6947  001F32  EC28  F011         	call	_initialise_TMR0	;wreg free
  6948                           
  6949                           ;pictris.c: 107:     IPEN = 0;
  6950  001F36  9ED0               	bcf	4048,7,c	;volatile
  6951                           
  6952                           ;pictris.c: 108:     GIE = 1;
  6953  001F38  8EF2               	bsf	4082,7,c	;volatile
  6954  001F3A  0012               	return		;funcret
  6955  001F3C                     __end_of_initialise_hardware:
  6956                           	opt callstack 0
  6957                           
  6958 ;; *************** function _initialise_TMR0 *****************
  6959 ;; Defined at:
  6960 ;;		line 77 in file "pictris.c"
  6961 ;; Parameters:    Size  Location     Type
  6962 ;;		None
  6963 ;; Auto vars:     Size  Location     Type
  6964 ;;		None
  6965 ;; Return value:  Size  Location     Type
  6966 ;;                  1    wreg      void 
  6967 ;; Registers used:
  6968 ;;		wreg, status,2
  6969 ;; Tracked objects:
  6970 ;;		On entry : 0/0
  6971 ;;		On exit  : 0/0
  6972 ;;		Unchanged: 0/0
  6973 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6974 ;;      Params:         0       0       0       0       0       0       0
  6975 ;;      Locals:         0       0       0       0       0       0       0
  6976 ;;      Temps:          0       0       0       0       0       0       0
  6977 ;;      Totals:         0       0       0       0       0       0       0
  6978 ;;Total ram usage:        0 bytes
  6979 ;; Hardware stack levels used:    1
  6980 ;; Hardware stack levels required when called:    4
  6981 ;; This function calls:
  6982 ;;		Nothing
  6983 ;; This function is called by:
  6984 ;;		_initialise_hardware
  6985 ;; This function uses a non-reentrant model
  6986 ;;
  6987                           
  6988                           	psect	text55
  6989  002250                     __ptext55:
  6990                           	opt callstack 0
  6991  002250                     _initialise_TMR0:
  6992                           	opt callstack 25
  6993                           
  6994                           ;pictris.c: 79:     T0CONbits.T0PS = 0x3;
  6995                           
  6996                           ;incstack = 0
  6997  002250  50D5               	movf	4053,w,c	;volatile
  6998  002252  0BF8               	andlw	-8
  6999  002254  0903               	iorlw	3
  7000  002256  6ED5               	movwf	4053,c	;volatile
  7001                           
  7002                           ;pictris.c: 80:     PSA = 0;
  7003  002258  96D5               	bcf	4053,3,c	;volatile
  7004                           
  7005                           ;pictris.c: 81:     T0CS = 0;
  7006  00225A  9AD5               	bcf	4053,5,c	;volatile
  7007                           
  7008                           ;pictris.c: 82:     TMR0ON = 1;
  7009  00225C  8ED5               	bsf	4053,7,c	;volatile
  7010                           
  7011                           ;pictris.c: 83:     TMR0 = (~125);
  7012  00225E  0EFF               	movlw	255
  7013  002260  6ED7               	movwf	4055,c	;volatile
  7014  002262  0E82               	movlw	130
  7015  002264  6ED6               	movwf	4054,c	;volatile
  7016                           
  7017                           ;pictris.c: 84:     INTCONbits.TMR0IF = 0;
  7018  002266  94F2               	bcf	4082,2,c	;volatile
  7019                           
  7020                           ;pictris.c: 85:     TMR0IE = 1;
  7021  002268  8AF2               	bsf	4082,5,c	;volatile
  7022                           
  7023                           ;pictris.c: 86:     TMR0ON = 1;
  7024  00226A  8ED5               	bsf	4053,7,c	;volatile
  7025  00226C  0012               	return		;funcret
  7026  00226E                     __end_of_initialise_TMR0:
  7027                           	opt callstack 0
  7028                           
  7029 ;; *************** function _get_mS *****************
  7030 ;; Defined at:
  7031 ;;		line 23 in file "shared_logic.c"
  7032 ;; Parameters:    Size  Location     Type
  7033 ;;		None
  7034 ;; Auto vars:     Size  Location     Type
  7035 ;;		None
  7036 ;; Return value:  Size  Location     Type
  7037 ;;                  2   11[COMRAM] unsigned short 
  7038 ;; Registers used:
  7039 ;;		None
  7040 ;; Tracked objects:
  7041 ;;		On entry : 0/0
  7042 ;;		On exit  : 0/0
  7043 ;;		Unchanged: 0/0
  7044 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7045 ;;      Params:         2       0       0       0       0       0       0
  7046 ;;      Locals:         0       0       0       0       0       0       0
  7047 ;;      Temps:          0       0       0       0       0       0       0
  7048 ;;      Totals:         2       0       0       0       0       0       0
  7049 ;;Total ram usage:        2 bytes
  7050 ;; Hardware stack levels used:    1
  7051 ;; Hardware stack levels required when called:    4
  7052 ;; This function calls:
  7053 ;;		Nothing
  7054 ;; This function is called by:
  7055 ;;		_main
  7056 ;; This function uses a non-reentrant model
  7057 ;;
  7058                           
  7059                           	psect	text56
  7060  002394                     __ptext56:
  7061                           	opt callstack 0
  7062  002394                     _get_mS:
  7063                           	opt callstack 26
  7064                           
  7065                           ;shared_logic.c: 24:     return mS;
  7066                           
  7067                           ;incstack = 0
  7068  002394  C034  F00C         	movff	_mS,?_get_mS	;volatile
  7069  002398  C035  F00D         	movff	_mS+1,?_get_mS+1	;volatile
  7070  00239C  0012               	return		;funcret
  7071  00239E                     __end_of_get_mS:
  7072                           	opt callstack 0
  7073                           
  7074 ;; *************** function _choosescreen *****************
  7075 ;; Defined at:
  7076 ;;		line 59 in file "screen.c"
  7077 ;; Parameters:    Size  Location     Type
  7078 ;;		None
  7079 ;; Auto vars:     Size  Location     Type
  7080 ;;  mask           16   28[COMRAM] unsigned short [8]
  7081 ;;  i               2   45[COMRAM] int 
  7082 ;;  tetris          1    0        _Bool 
  7083 ;; Return value:  Size  Location     Type
  7084 ;;                  1    wreg      _Bool 
  7085 ;; Registers used:
  7086 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7087 ;; Tracked objects:
  7088 ;;		On entry : 0/0
  7089 ;;		On exit  : 0/0
  7090 ;;		Unchanged: 0/0
  7091 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7092 ;;      Params:         0       0       0       0       0       0       0
  7093 ;;      Locals:        19       0       0       0       0       0       0
  7094 ;;      Temps:          0       0       0       0       0       0       0
  7095 ;;      Totals:        19       0       0       0       0       0       0
  7096 ;;Total ram usage:       19 bytes
  7097 ;; Hardware stack levels used:    1
  7098 ;; Hardware stack levels required when called:    7
  7099 ;; This function calls:
  7100 ;;		_checkDown
  7101 ;;		_checkUp
  7102 ;;		_mergeObjects
  7103 ;;		_pauseMultiplexing
  7104 ;;		_resumeMultiplexing
  7105 ;;		_set_screen
  7106 ;; This function is called by:
  7107 ;;		_main
  7108 ;; This function uses a non-reentrant model
  7109 ;;
  7110                           
  7111                           	psect	text57
  7112  001234                     __ptext57:
  7113                           	opt callstack 0
  7114  001234                     _choosescreen:
  7115                           	opt callstack 23
  7116                           
  7117                           ;screen.c: 61:     _Bool tetris;;screen.c: 62:     int i;;screen.c: 63:     set_screen(c
      +                          hoose_screen);
  7118                           
  7119                           ;incstack = 0
  7120  001234  0EC1               	movlw	low _choose_screen
  7121  001236  6E13               	movwf	set_screen@newData,c
  7122  001238  0E06               	movlw	high _choose_screen
  7123  00123A  6E14               	movwf	set_screen@newData+1,c
  7124  00123C  EC73  F00A         	call	_set_screen	;wreg free
  7125  001240                     l5177:
  7126                           
  7127                           ;screen.c: 65:      while (checkDown(0) || checkUp(0))
  7128  001240  0E00               	movlw	0
  7129  001242  ECE1  F010         	call	_checkDown
  7130  001246  0900               	iorlw	0
  7131  001248  A4D8               	btfss	status,2,c
  7132  00124A  D7FA               	goto	l5177
  7133  00124C  0E00               	movlw	0
  7134  00124E  ECCD  F010         	call	_checkUp
  7135  001252  0900               	iorlw	0
  7136  001254  A4D8               	btfss	status,2,c
  7137  001256  D7F4               	goto	l5177
  7138  001258                     u4910:
  7139                           
  7140                           ;screen.c: 69:     while (!checkDown(0) && !checkUp(0))
  7141  001258  0E00               	movlw	0
  7142  00125A  ECE1  F010         	call	_checkDown
  7143  00125E  0900               	iorlw	0
  7144  001260  A4D8               	btfss	status,2,c
  7145  001262  D006               	goto	u4930
  7146  001264  0E00               	movlw	0
  7147  001266  ECCD  F010         	call	_checkUp
  7148  00126A  0900               	iorlw	0
  7149  00126C  B4D8               	btfsc	status,2,c
  7150  00126E  D7F4               	goto	u4910
  7151  001270                     u4930:
  7152                           
  7153                           ;screen.c: 71:     uint16_t mask[8];;screen.c: 72:     if(checkDown(0) == 1) { for (i=0;
      +                          i<8;i++){ mask[i] = 0xFF00; } tetris = 1;}
  7154  001270  0E00               	movlw	0
  7155  001272  ECE1  F010         	call	_checkDown
  7156  001276  06E8               	decf	wreg,f,c
  7157  001278  A4D8               	btfss	status,2,c
  7158  00127A  D01C               	goto	l5201
  7159  00127C  0E00               	movlw	0
  7160  00127E  6E2F               	movwf	choosescreen@i+1,c
  7161  001280  0E00               	movlw	0
  7162  001282  6E2E               	movwf	choosescreen@i,c
  7163  001284                     l5193:
  7164  001284  90D8               	bcf	status,0,c
  7165  001286  342E               	rlcf	choosescreen@i,w,c
  7166  001288  6ED9               	movwf	fsr2l,c
  7167  00128A  342F               	rlcf	choosescreen@i+1,w,c
  7168  00128C  6EDA               	movwf	fsr2h,c
  7169  00128E  0E1D               	movlw	low choosescreen@mask
  7170  001290  26D9               	addwf	fsr2l,f,c
  7171  001292  0E00               	movlw	high choosescreen@mask
  7172  001294  22DA               	addwfc	fsr2h,f,c
  7173  001296  0E00               	movlw	0
  7174  001298  6EDE               	movwf	postinc2,c
  7175  00129A  0EFF               	movlw	255
  7176  00129C  6EDD               	movwf	postdec2,c
  7177  00129E  4A2E               	infsnz	choosescreen@i,f,c
  7178  0012A0  2A2F               	incf	choosescreen@i+1,f,c
  7179  0012A2  BE2F               	btfsc	choosescreen@i+1,7,c
  7180  0012A4  D7EF               	goto	l5193
  7181  0012A6  502F               	movf	choosescreen@i+1,w,c
  7182  0012A8  E126               	bnz	l5217
  7183  0012AA  0E08               	movlw	8
  7184  0012AC  5C2E               	subwf	choosescreen@i,w,c
  7185  0012AE  B0D8               	btfsc	status,0,c
  7186  0012B0  D022               	goto	u4970
  7187  0012B2  D7E8               	goto	l5193
  7188  0012B4                     l5201:
  7189  0012B4  0E00               	movlw	0
  7190  0012B6  ECCD  F010         	call	_checkUp
  7191  0012BA  06E8               	decf	wreg,f,c
  7192  0012BC  A4D8               	btfss	status,2,c
  7193  0012BE  D01B               	goto	u4970
  7194  0012C0  0E00               	movlw	0
  7195  0012C2  6E2F               	movwf	choosescreen@i+1,c
  7196  0012C4  0E00               	movlw	0
  7197  0012C6  6E2E               	movwf	choosescreen@i,c
  7198  0012C8                     l5209:
  7199  0012C8  90D8               	bcf	status,0,c
  7200  0012CA  342E               	rlcf	choosescreen@i,w,c
  7201  0012CC  6ED9               	movwf	fsr2l,c
  7202  0012CE  342F               	rlcf	choosescreen@i+1,w,c
  7203  0012D0  6EDA               	movwf	fsr2h,c
  7204  0012D2  0E1D               	movlw	low choosescreen@mask
  7205  0012D4  26D9               	addwf	fsr2l,f,c
  7206  0012D6  0E00               	movlw	high choosescreen@mask
  7207  0012D8  22DA               	addwfc	fsr2h,f,c
  7208  0012DA  0EFF               	movlw	255
  7209  0012DC  6EDE               	movwf	postinc2,c
  7210  0012DE  0E00               	movlw	0
  7211  0012E0  6EDD               	movwf	postdec2,c
  7212  0012E2  4A2E               	infsnz	choosescreen@i,f,c
  7213  0012E4  2A2F               	incf	choosescreen@i+1,f,c
  7214  0012E6  BE2F               	btfsc	choosescreen@i+1,7,c
  7215  0012E8  D7EF               	goto	l5209
  7216  0012EA  502F               	movf	choosescreen@i+1,w,c
  7217  0012EC  E104               	bnz	u4970
  7218  0012EE  0E08               	movlw	8
  7219  0012F0  5C2E               	subwf	choosescreen@i,w,c
  7220  0012F2  A0D8               	btfss	status,0,c
  7221  0012F4  D7E9               	goto	l5209
  7222  0012F6                     u4970:
  7223  0012F6                     l5217:
  7224                           
  7225                           ;screen.c: 75:     pauseMultiplexing();
  7226  0012F6  EC96  F011         	call	_pauseMultiplexing	;wreg free
  7227                           
  7228                           ;screen.c: 76:     mergeObjects(mask, ScreenData, INVERT);
  7229  0012FA  0E1D               	movlw	low choosescreen@mask
  7230  0012FC  6E0C               	movwf	mergeObjects@pSource,c
  7231  0012FE  0E00               	movlw	high choosescreen@mask
  7232  001300  6E0D               	movwf	mergeObjects@pSource+1,c
  7233  001302  0E90               	movlw	low _ScreenData
  7234  001304  6E0E               	movwf	mergeObjects@pTarget,c
  7235  001306  0E00               	movlw	high _ScreenData
  7236  001308  6E0F               	movwf	mergeObjects@pTarget+1,c
  7237  00130A  0E02               	movlw	2
  7238  00130C  6E10               	movwf	mergeObjects@mode,c
  7239  00130E  EC13  F008         	call	_mergeObjects	;wreg free
  7240                           
  7241                           ;screen.c: 77:     resumeMultiplexing();
  7242  001312  ECE2  F011         	call	_resumeMultiplexing	;wreg free
  7243  001316                     l5223:
  7244                           
  7245                           ;screen.c: 80:     while (checkDown(0) || checkUp(0))
  7246  001316  0E00               	movlw	0
  7247  001318  ECE1  F010         	call	_checkDown
  7248  00131C  0900               	iorlw	0
  7249  00131E  A4D8               	btfss	status,2,c
  7250  001320  D7FA               	goto	l5223
  7251  001322  0E00               	movlw	0
  7252  001324  ECCD  F010         	call	_checkUp
  7253  001328  0900               	iorlw	0
  7254  00132A  B4D8               	btfsc	status,2,c
  7255  00132C  0012               	return	
  7256  00132E  D7F3               	goto	l5223
  7257  001330                     __end_of_choosescreen:
  7258                           	opt callstack 0
  7259                           
  7260 ;; *************** function _set_screen *****************
  7261 ;; Defined at:
  7262 ;;		line 48 in file "screen.c"
  7263 ;; Parameters:    Size  Location     Type
  7264 ;;  newData         2   18[COMRAM] PTR volatile unsigned sh
  7265 ;;		 -> choose_screen(16), show_score@Numberscreen(16), Screen_Data(16), TETRIS(16), 
  7266 ;;		 -> ObjectData(16), 
  7267 ;; Auto vars:     Size  Location     Type
  7268 ;;  i               2   26[COMRAM] int 
  7269 ;; Return value:  Size  Location     Type
  7270 ;;                  1    wreg      void 
  7271 ;; Registers used:
  7272 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7273 ;; Tracked objects:
  7274 ;;		On entry : 0/0
  7275 ;;		On exit  : 0/0
  7276 ;;		Unchanged: 0/0
  7277 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7278 ;;      Params:         2       0       0       0       0       0       0
  7279 ;;      Locals:         2       0       0       0       0       0       0
  7280 ;;      Temps:          6       0       0       0       0       0       0
  7281 ;;      Totals:        10       0       0       0       0       0       0
  7282 ;;Total ram usage:       10 bytes
  7283 ;; Hardware stack levels used:    1
  7284 ;; Hardware stack levels required when called:    6
  7285 ;; This function calls:
  7286 ;;		_clearArray
  7287 ;;		_pauseMultiplexing
  7288 ;;		_resumeMultiplexing
  7289 ;; This function is called by:
  7290 ;;		_tetris_screen
  7291 ;;		_tetris_main
  7292 ;;		_SnakeGraph
  7293 ;;		_show_score
  7294 ;;		_choosescreen
  7295 ;; This function uses a non-reentrant model
  7296 ;;
  7297                           
  7298                           	psect	text58
  7299  0014E6                     __ptext58:
  7300                           	opt callstack 0
  7301  0014E6                     _set_screen:
  7302                           	opt callstack 22
  7303                           
  7304                           ;screen.c: 48: void set_screen(volatile uint16_t newData[]);screen.c: 49: {;screen.c: 50
      +                          :     pauseMultiplexing();
  7305                           
  7306                           ;incstack = 0
  7307  0014E6  EC96  F011         	call	_pauseMultiplexing	;wreg free
  7308                           
  7309                           ;screen.c: 51:     clearArray(ScreenData, 8);
  7310  0014EA  0E90               	movlw	low _ScreenData
  7311  0014EC  6E0C               	movwf	clearArray@pArray,c
  7312  0014EE  0E00               	movlw	high _ScreenData
  7313  0014F0  6E0D               	movwf	clearArray@pArray+1,c
  7314  0014F2  0E00               	movlw	0
  7315  0014F4  6E0F               	movwf	clearArray@size+1,c
  7316  0014F6  0E08               	movlw	8
  7317  0014F8  6E0E               	movwf	clearArray@size,c
  7318  0014FA  EC9E  F00F         	call	_clearArray	;wreg free
  7319                           
  7320                           ;screen.c: 52:     int i;;screen.c: 53:     for(i=0;i<8;i++){
  7321  0014FE  0E00               	movlw	0
  7322  001500  6E1C               	movwf	set_screen@i+1,c
  7323  001502  0E00               	movlw	0
  7324  001504  6E1B               	movwf	set_screen@i,c
  7325  001506                     l4567:
  7326                           
  7327                           ;screen.c: 54:         ScreenData[i] = newData[i];
  7328  001506  C01B  F015         	movff	set_screen@i,??_set_screen
  7329  00150A  C01C  F016         	movff	set_screen@i+1,??_set_screen+1
  7330  00150E  90D8               	bcf	status,0,c
  7331  001510  3615               	rlcf	??_set_screen,f,c
  7332  001512  3616               	rlcf	??_set_screen+1,f,c
  7333  001514  C013  F017         	movff	set_screen@newData,??_set_screen+2
  7334  001518  C014  F018         	movff	set_screen@newData+1,??_set_screen+3
  7335  00151C  5015               	movf	??_set_screen,w,c
  7336  00151E  2617               	addwf	??_set_screen+2,f,c
  7337  001520  5016               	movf	??_set_screen+1,w,c
  7338  001522  2218               	addwfc	??_set_screen+3,f,c
  7339  001524  C017  FFF6         	movff	??_set_screen+2,tblptrl
  7340  001528  C018  FFF7         	movff	??_set_screen+3,tblptrh
  7341  00152C  6AF8               	clrf	tblptru,c
  7342  00152E  0E05               	movlw	(high __ramtop+-1)
  7343  001530  64F7               	cpfsgt	tblptrh,c
  7344  001532  D007               	bra	u4027
  7345  001534  0009               	tblrd		*+
  7346  001536  CFF5 F019          	movff	tablat,??_set_screen+4
  7347  00153A  0009               	tblrd		*+
  7348  00153C  CFF5 F01A          	movff	tablat,??_set_screen+5
  7349  001540  D008               	bra	u4020
  7350  001542                     u4027:
  7351  001542  CFF6 FFE9          	movff	tblptrl,fsr0l
  7352  001546  CFF7 FFEA          	movff	tblptrh,fsr0h
  7353  00154A  CFEE F019          	movff	postinc0,??_set_screen+4
  7354  00154E  CFEE F01A          	movff	postinc0,??_set_screen+5
  7355  001552                     u4020:
  7356  001552  90D8               	bcf	status,0,c
  7357  001554  341B               	rlcf	set_screen@i,w,c
  7358  001556  6ED9               	movwf	fsr2l,c
  7359  001558  341C               	rlcf	set_screen@i+1,w,c
  7360  00155A  6EDA               	movwf	fsr2h,c
  7361  00155C  0E90               	movlw	low _ScreenData
  7362  00155E  26D9               	addwf	fsr2l,f,c
  7363  001560  0E00               	movlw	high _ScreenData
  7364  001562  22DA               	addwfc	fsr2h,f,c
  7365  001564  C019  FFDE         	movff	??_set_screen+4,postinc2
  7366  001568  C01A  FFDD         	movff	??_set_screen+5,postdec2
  7367                           
  7368                           ;screen.c: 55:     }
  7369  00156C  4A1B               	infsnz	set_screen@i,f,c
  7370  00156E  2A1C               	incf	set_screen@i+1,f,c
  7371  001570  BE1C               	btfsc	set_screen@i+1,7,c
  7372  001572  D7C9               	goto	l4567
  7373  001574  501C               	movf	set_screen@i+1,w,c
  7374  001576  E104               	bnz	u4030
  7375  001578  0E08               	movlw	8
  7376  00157A  5C1B               	subwf	set_screen@i,w,c
  7377  00157C  A0D8               	btfss	status,0,c
  7378  00157E  D7C3               	goto	l4567
  7379  001580                     u4030:
  7380                           
  7381                           ;screen.c: 56:     resumeMultiplexing();
  7382  001580  ECE2  F011         	call	_resumeMultiplexing	;wreg free
  7383  001584  0012               	return		;funcret
  7384  001586                     __end_of_set_screen:
  7385                           	opt callstack 0
  7386                           
  7387 ;; *************** function _resumeMultiplexing *****************
  7388 ;; Defined at:
  7389 ;;		line 43 in file "screen.c"
  7390 ;; Parameters:    Size  Location     Type
  7391 ;;		None
  7392 ;; Auto vars:     Size  Location     Type
  7393 ;;		None
  7394 ;; Return value:  Size  Location     Type
  7395 ;;                  1    wreg      void 
  7396 ;; Registers used:
  7397 ;;		wreg, status,2
  7398 ;; Tracked objects:
  7399 ;;		On entry : 0/0
  7400 ;;		On exit  : 0/0
  7401 ;;		Unchanged: 0/0
  7402 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7403 ;;      Params:         0       0       0       0       0       0       0
  7404 ;;      Locals:         0       0       0       0       0       0       0
  7405 ;;      Temps:          0       0       0       0       0       0       0
  7406 ;;      Totals:         0       0       0       0       0       0       0
  7407 ;;Total ram usage:        0 bytes
  7408 ;; Hardware stack levels used:    1
  7409 ;; Hardware stack levels required when called:    4
  7410 ;; This function calls:
  7411 ;;		Nothing
  7412 ;; This function is called by:
  7413 ;;		_mainGameLoop
  7414 ;;		_tetris_button_left
  7415 ;;		_tetris_button_right
  7416 ;;		_tetris_button_up
  7417 ;;		_show_score
  7418 ;;		_set_screen
  7419 ;;		_choosescreen
  7420 ;; This function uses a non-reentrant model
  7421 ;;
  7422                           
  7423                           	psect	text59
  7424  0023C4                     __ptext59:
  7425                           	opt callstack 0
  7426  0023C4                     _resumeMultiplexing:
  7427                           	opt callstack 23
  7428                           
  7429                           ;screen.c: 45:     UpdateScreen = 1;
  7430                           
  7431                           ;incstack = 0
  7432  0023C4  0E01               	movlw	1
  7433  0023C6  6E39               	movwf	_UpdateScreen,c	;volatile
  7434  0023C8  0012               	return		;funcret
  7435  0023CA                     __end_of_resumeMultiplexing:
  7436                           	opt callstack 0
  7437                           
  7438 ;; *************** function _pauseMultiplexing *****************
  7439 ;; Defined at:
  7440 ;;		line 33 in file "screen.c"
  7441 ;; Parameters:    Size  Location     Type
  7442 ;;		None
  7443 ;; Auto vars:     Size  Location     Type
  7444 ;;		None
  7445 ;; Return value:  Size  Location     Type
  7446 ;;                  1    wreg      void 
  7447 ;; Registers used:
  7448 ;;		wreg, status,2, cstack
  7449 ;; Tracked objects:
  7450 ;;		On entry : 0/0
  7451 ;;		On exit  : 0/0
  7452 ;;		Unchanged: 0/0
  7453 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7454 ;;      Params:         0       0       0       0       0       0       0
  7455 ;;      Locals:         0       0       0       0       0       0       0
  7456 ;;      Temps:          0       0       0       0       0       0       0
  7457 ;;      Totals:         0       0       0       0       0       0       0
  7458 ;;Total ram usage:        0 bytes
  7459 ;; Hardware stack levels used:    1
  7460 ;; Hardware stack levels required when called:    5
  7461 ;; This function calls:
  7462 ;;		_waitForInterrupt
  7463 ;; This function is called by:
  7464 ;;		_mainGameLoop
  7465 ;;		_tetris_button_left
  7466 ;;		_tetris_button_right
  7467 ;;		_tetris_button_up
  7468 ;;		_show_score
  7469 ;;		_set_screen
  7470 ;;		_choosescreen
  7471 ;; This function uses a non-reentrant model
  7472 ;;
  7473                           
  7474                           	psect	text60
  7475  00232C                     __ptext60:
  7476                           	opt callstack 0
  7477  00232C                     _pauseMultiplexing:
  7478                           	opt callstack 22
  7479                           
  7480                           ;screen.c: 35:     if (UpdateScreen)
  7481                           
  7482                           ;incstack = 0
  7483  00232C  5039               	movf	_UpdateScreen,w,c	;volatile
  7484  00232E  B4D8               	btfsc	status,2,c
  7485  002330  0012               	return	
  7486                           
  7487                           ;screen.c: 36:     {;screen.c: 37:         waitForInterrupt();
  7488  002332  ECBA  F011         	call	_waitForInterrupt	;wreg free
  7489                           
  7490                           ;screen.c: 38:         UpdateScreen = 0;
  7491  002336  0E00               	movlw	0
  7492  002338  6E39               	movwf	_UpdateScreen,c	;volatile
  7493  00233A  0012               	return		;funcret
  7494  00233C                     __end_of_pauseMultiplexing:
  7495                           	opt callstack 0
  7496                           
  7497 ;; *************** function _waitForInterrupt *****************
  7498 ;; Defined at:
  7499 ;;		line 45 in file "interrupt.c"
  7500 ;; Parameters:    Size  Location     Type
  7501 ;;		None
  7502 ;; Auto vars:     Size  Location     Type
  7503 ;;		None
  7504 ;; Return value:  Size  Location     Type
  7505 ;;                  1    wreg      void 
  7506 ;; Registers used:
  7507 ;;		wreg, status,2
  7508 ;; Tracked objects:
  7509 ;;		On entry : 0/0
  7510 ;;		On exit  : 0/0
  7511 ;;		Unchanged: 0/0
  7512 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7513 ;;      Params:         0       0       0       0       0       0       0
  7514 ;;      Locals:         0       0       0       0       0       0       0
  7515 ;;      Temps:          0       0       0       0       0       0       0
  7516 ;;      Totals:         0       0       0       0       0       0       0
  7517 ;;Total ram usage:        0 bytes
  7518 ;; Hardware stack levels used:    1
  7519 ;; Hardware stack levels required when called:    4
  7520 ;; This function calls:
  7521 ;;		Nothing
  7522 ;; This function is called by:
  7523 ;;		_WriteEEByte
  7524 ;;		_pauseMultiplexing
  7525 ;; This function uses a non-reentrant model
  7526 ;;
  7527                           
  7528                           	psect	text61
  7529  002374                     __ptext61:
  7530                           	opt callstack 0
  7531  002374                     _waitForInterrupt:
  7532                           	opt callstack 22
  7533                           
  7534                           ;interrupt.c: 47:     InterruptComplete = 0;
  7535                           
  7536                           ;incstack = 0
  7537  002374  0E00               	movlw	0
  7538  002376  6E38               	movwf	_InterruptComplete,c	;volatile
  7539  002378                     l4311:
  7540                           
  7541                           ;interrupt.c: 48:     while (!InterruptComplete)
  7542  002378  5038               	movf	_InterruptComplete,w,c	;volatile
  7543  00237A  A4D8               	btfss	status,2,c
  7544  00237C  0012               	return	
  7545  00237E  D7FC               	goto	l4311
  7546  002380                     __end_of_waitForInterrupt:
  7547                           	opt callstack 0
  7548                           
  7549 ;; *************** function _clearArray *****************
  7550 ;; Defined at:
  7551 ;;		line 110 in file "shared_logic.c"
  7552 ;; Parameters:    Size  Location     Type
  7553 ;;  pArray          2   11[COMRAM] PTR volatile unsigned sh
  7554 ;;		 -> ScreenData(16), show_score@Numberscreen(16), show_score@tmpObjectData(16), tmpObjectData(16), 
  7555 ;;		 -> BackgroundData(16), ObjectData(16), 
  7556 ;;  size            2   13[COMRAM] unsigned int 
  7557 ;; Auto vars:     Size  Location     Type
  7558 ;;  i               1   17[COMRAM] unsigned char 
  7559 ;; Return value:  Size  Location     Type
  7560 ;;                  1    wreg      void 
  7561 ;; Registers used:
  7562 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  7563 ;; Tracked objects:
  7564 ;;		On entry : 0/0
  7565 ;;		On exit  : 0/0
  7566 ;;		Unchanged: 0/0
  7567 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7568 ;;      Params:         4       0       0       0       0       0       0
  7569 ;;      Locals:         1       0       0       0       0       0       0
  7570 ;;      Temps:          2       0       0       0       0       0       0
  7571 ;;      Totals:         7       0       0       0       0       0       0
  7572 ;;Total ram usage:        7 bytes
  7573 ;; Hardware stack levels used:    1
  7574 ;; Hardware stack levels required when called:    4
  7575 ;; This function calls:
  7576 ;;		Nothing
  7577 ;; This function is called by:
  7578 ;;		_initialise_globals
  7579 ;;		_mainGameLoop
  7580 ;;		_newRotation
  7581 ;;		_SnakeGraph
  7582 ;;		_show_score
  7583 ;;		_set_screen
  7584 ;; This function uses a non-reentrant model
  7585 ;;
  7586                           
  7587                           	psect	text62
  7588  001F3C                     __ptext62:
  7589                           	opt callstack 0
  7590  001F3C                     _clearArray:
  7591                           	opt callstack 23
  7592                           
  7593                           ;shared_logic.c: 110: void clearArray(volatile uint16_t *pArray, size_t size);shared_log
      +                          ic.c: 111: {;shared_logic.c: 112:     uint8_t i;;shared_logic.c: 113:     for (i = 0; i 
      +                          < size; i++)
  7594                           
  7595                           ;incstack = 0
  7596  001F3C  0E00               	movlw	0
  7597  001F3E  6E12               	movwf	clearArray@i,c
  7598  001F40  D011               	goto	l4355
  7599  001F42                     l4351:
  7600                           
  7601                           ;shared_logic.c: 114:         pArray[i] = 0;
  7602  001F42  5012               	movf	clearArray@i,w,c
  7603  001F44  0D02               	mullw	2
  7604  001F46  CFF3 F010          	movff	prodl,??_clearArray
  7605  001F4A  CFF4 F011          	movff	prodh,??_clearArray+1
  7606  001F4E  5010               	movf	??_clearArray,w,c
  7607  001F50  240C               	addwf	clearArray@pArray,w,c
  7608  001F52  6ED9               	movwf	fsr2l,c
  7609  001F54  5011               	movf	??_clearArray+1,w,c
  7610  001F56  200D               	addwfc	clearArray@pArray+1,w,c
  7611  001F58  6EDA               	movwf	fsr2h,c
  7612  001F5A  0E00               	movlw	0
  7613  001F5C  6EDE               	movwf	postinc2,c
  7614  001F5E  0E00               	movlw	0
  7615  001F60  6EDD               	movwf	postdec2,c
  7616  001F62  2A12               	incf	clearArray@i,f,c
  7617  001F64                     l4355:
  7618  001F64  5012               	movf	clearArray@i,w,c
  7619  001F66  6E10               	movwf	??_clearArray& (0+255),c
  7620  001F68  6A11               	clrf	(??_clearArray+1)& (0+255),c
  7621  001F6A  500E               	movf	clearArray@size,w,c
  7622  001F6C  5C10               	subwf	??_clearArray,w,c
  7623  001F6E  500F               	movf	clearArray@size+1,w,c
  7624  001F70  5811               	subwfb	??_clearArray+1,w,c
  7625  001F72  B0D8               	btfsc	status,0,c
  7626  001F74  0012               	return	
  7627  001F76  D7E5               	goto	l4351
  7628  001F78                     __end_of_clearArray:
  7629                           	opt callstack 0
  7630                           
  7631 ;; *************** function _mergeObjects *****************
  7632 ;; Defined at:
  7633 ;;		line 117 in file "shared_logic.c"
  7634 ;; Parameters:    Size  Location     Type
  7635 ;;  pSource         2   11[COMRAM] PTR volatile unsigned sh
  7636 ;;		 -> choosescreen@mask(16), show_score@mask(16), show_score@tmpObjectData(16), tmpObjectData(16), 
  7637 ;;		 -> BackgroundData(16), ObjectData(16), 
  7638 ;;  pTarget         2   13[COMRAM] PTR volatile unsigned sh
  7639 ;;		 -> ScreenData(16), show_score@Numberscreen(16), Screen_Data(16), tmpObjectData(16), 
  7640 ;;		 -> BackgroundData(16), ObjectData(16), 
  7641 ;;  mode            1   15[COMRAM] enum E2557
  7642 ;; Auto vars:     Size  Location     Type
  7643 ;;  i               1   22[COMRAM] unsigned char 
  7644 ;; Return value:  Size  Location     Type
  7645 ;;                  1    wreg      void 
  7646 ;; Registers used:
  7647 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  7648 ;; Tracked objects:
  7649 ;;		On entry : 0/0
  7650 ;;		On exit  : 0/0
  7651 ;;		Unchanged: 0/0
  7652 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7653 ;;      Params:         5       0       0       0       0       0       0
  7654 ;;      Locals:         1       0       0       0       0       0       0
  7655 ;;      Temps:          6       0       0       0       0       0       0
  7656 ;;      Totals:        12       0       0       0       0       0       0
  7657 ;;Total ram usage:       12 bytes
  7658 ;; Hardware stack levels used:    1
  7659 ;; Hardware stack levels required when called:    4
  7660 ;; This function calls:
  7661 ;;		Nothing
  7662 ;; This function is called by:
  7663 ;;		_moveObjectDown
  7664 ;;		_tetris_button_left
  7665 ;;		_tetris_button_right
  7666 ;;		_tetris_button_up
  7667 ;;		_tetris_main
  7668 ;;		_show_score
  7669 ;;		_choosescreen
  7670 ;; This function uses a non-reentrant model
  7671 ;;
  7672                           
  7673                           	psect	text63
  7674  001026                     __ptext63:
  7675                           	opt callstack 0
  7676  001026                     _mergeObjects:
  7677                           	opt callstack 22
  7678                           
  7679                           ;shared_logic.c: 117: void mergeObjects(volatile uint16_t * pSource, volatile uint16_t *
      +                           pTarget, mode_t mode);shared_logic.c: 118: {;shared_logic.c: 119:     uint8_t i;;shared
      +                          _logic.c: 121:     switch (mode)
  7680                           
  7681                           ;incstack = 0
  7682  001026  D071               	goto	l4405
  7683  001028                     l4367:
  7684                           
  7685                           ;shared_logic.c: 124:         for (i = 0; i < 8; i++)
  7686  001028  0E00               	movlw	0
  7687  00102A  6E17               	movwf	mergeObjects@i,c
  7688  00102C                     l4373:
  7689                           
  7690                           ;shared_logic.c: 125:             pTarget[i] = pSource[i];
  7691  00102C  5017               	movf	mergeObjects@i,w,c
  7692  00102E  0D02               	mullw	2
  7693  001030  CFF3 F011          	movff	prodl,??_mergeObjects
  7694  001034  CFF4 F012          	movff	prodh,??_mergeObjects+1
  7695  001038  5011               	movf	??_mergeObjects,w,c
  7696  00103A  240C               	addwf	mergeObjects@pSource,w,c
  7697  00103C  6ED9               	movwf	fsr2l,c
  7698  00103E  5012               	movf	??_mergeObjects+1,w,c
  7699  001040  200D               	addwfc	mergeObjects@pSource+1,w,c
  7700  001042  6EDA               	movwf	fsr2h,c
  7701  001044  5017               	movf	mergeObjects@i,w,c
  7702  001046  0D02               	mullw	2
  7703  001048  CFF3 F013          	movff	prodl,??_mergeObjects+2
  7704  00104C  CFF4 F014          	movff	prodh,??_mergeObjects+3
  7705  001050  5013               	movf	??_mergeObjects+2,w,c
  7706  001052  240E               	addwf	mergeObjects@pTarget,w,c
  7707  001054  6EE1               	movwf	fsr1l,c
  7708  001056  5014               	movf	??_mergeObjects+3,w,c
  7709  001058  200F               	addwfc	mergeObjects@pTarget+1,w,c
  7710  00105A  6EE2               	movwf	fsr1h,c
  7711  00105C  CFDE FFE6          	movff	postinc2,postinc1
  7712  001060  CFDD FFE5          	movff	postdec2,postdec1
  7713  001064  2A17               	incf	mergeObjects@i,f,c
  7714  001066  0E07               	movlw	7
  7715  001068  6417               	cpfsgt	mergeObjects@i,c
  7716  00106A  D7E0               	goto	l4373
  7717  00106C  0012               	return	
  7718  00106E                     l4379:
  7719                           
  7720                           ;shared_logic.c: 128:         for (i = 0; i < 8; i++)
  7721  00106E  0E00               	movlw	0
  7722  001070  6E17               	movwf	mergeObjects@i,c
  7723  001072                     l4385:
  7724                           
  7725                           ;shared_logic.c: 129:             pTarget[i] |= pSource[i];
  7726  001072  5017               	movf	mergeObjects@i,w,c
  7727  001074  0D02               	mullw	2
  7728  001076  CFF3 F011          	movff	prodl,??_mergeObjects
  7729  00107A  CFF4 F012          	movff	prodh,??_mergeObjects+1
  7730  00107E  5011               	movf	??_mergeObjects,w,c
  7731  001080  240C               	addwf	mergeObjects@pSource,w,c
  7732  001082  6ED9               	movwf	fsr2l,c
  7733  001084  5012               	movf	??_mergeObjects+1,w,c
  7734  001086  200D               	addwfc	mergeObjects@pSource+1,w,c
  7735  001088  6EDA               	movwf	fsr2h,c
  7736  00108A  CFDE F013          	movff	postinc2,??_mergeObjects+2
  7737  00108E  CFDD F014          	movff	postdec2,??_mergeObjects+3
  7738  001092  5017               	movf	mergeObjects@i,w,c
  7739  001094  0D02               	mullw	2
  7740  001096  CFF3 F015          	movff	prodl,??_mergeObjects+4
  7741  00109A  CFF4 F016          	movff	prodh,??_mergeObjects+5
  7742  00109E  5015               	movf	??_mergeObjects+4,w,c
  7743  0010A0  240E               	addwf	mergeObjects@pTarget,w,c
  7744  0010A2  6ED9               	movwf	fsr2l,c
  7745  0010A4  5016               	movf	??_mergeObjects+5,w,c
  7746  0010A6  200F               	addwfc	mergeObjects@pTarget+1,w,c
  7747  0010A8  6EDA               	movwf	fsr2h,c
  7748  0010AA  5013               	movf	??_mergeObjects+2,w,c
  7749  0010AC  12DE               	iorwf	postinc2,f,c
  7750  0010AE  5014               	movf	??_mergeObjects+3,w,c
  7751  0010B0  12DD               	iorwf	postdec2,f,c
  7752  0010B2  2A17               	incf	mergeObjects@i,f,c
  7753  0010B4  0E07               	movlw	7
  7754  0010B6  6417               	cpfsgt	mergeObjects@i,c
  7755  0010B8  D7DC               	goto	l4385
  7756  0010BA  0012               	return	
  7757  0010BC                     l4391:
  7758                           
  7759                           ;shared_logic.c: 132:         for (i = 0; i < 8; i++)
  7760  0010BC  0E00               	movlw	0
  7761  0010BE  6E17               	movwf	mergeObjects@i,c
  7762  0010C0                     l4397:
  7763                           
  7764                           ;shared_logic.c: 133:             pTarget[i] ^= pSource[i];
  7765  0010C0  5017               	movf	mergeObjects@i,w,c
  7766  0010C2  0D02               	mullw	2
  7767  0010C4  CFF3 F011          	movff	prodl,??_mergeObjects
  7768  0010C8  CFF4 F012          	movff	prodh,??_mergeObjects+1
  7769  0010CC  5011               	movf	??_mergeObjects,w,c
  7770  0010CE  240C               	addwf	mergeObjects@pSource,w,c
  7771  0010D0  6ED9               	movwf	fsr2l,c
  7772  0010D2  5012               	movf	??_mergeObjects+1,w,c
  7773  0010D4  200D               	addwfc	mergeObjects@pSource+1,w,c
  7774  0010D6  6EDA               	movwf	fsr2h,c
  7775  0010D8  CFDE F013          	movff	postinc2,??_mergeObjects+2
  7776  0010DC  CFDD F014          	movff	postdec2,??_mergeObjects+3
  7777  0010E0  5017               	movf	mergeObjects@i,w,c
  7778  0010E2  0D02               	mullw	2
  7779  0010E4  CFF3 F015          	movff	prodl,??_mergeObjects+4
  7780  0010E8  CFF4 F016          	movff	prodh,??_mergeObjects+5
  7781  0010EC  5015               	movf	??_mergeObjects+4,w,c
  7782  0010EE  240E               	addwf	mergeObjects@pTarget,w,c
  7783  0010F0  6ED9               	movwf	fsr2l,c
  7784  0010F2  5016               	movf	??_mergeObjects+5,w,c
  7785  0010F4  200F               	addwfc	mergeObjects@pTarget+1,w,c
  7786  0010F6  6EDA               	movwf	fsr2h,c
  7787  0010F8  5013               	movf	??_mergeObjects+2,w,c
  7788  0010FA  1ADE               	xorwf	postinc2,f,c
  7789  0010FC  5014               	movf	??_mergeObjects+3,w,c
  7790  0010FE  1ADD               	xorwf	postdec2,f,c
  7791  001100  2A17               	incf	mergeObjects@i,f,c
  7792  001102  0E07               	movlw	7
  7793  001104  6417               	cpfsgt	mergeObjects@i,c
  7794  001106  D7DC               	goto	l4397
  7795  001108  0012               	return	
  7796  00110A                     l4405:
  7797  00110A  5010               	movf	mergeObjects@mode,w,c
  7798  00110C  6E11               	movwf	??_mergeObjects& (0+255),c
  7799  00110E  6A12               	clrf	(??_mergeObjects+1)& (0+255),c
  7800                           
  7801                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  7802                           ; Switch size 1, requested type "simple"
  7803                           ; Number of cases is 1, Range of values is 0 to 0
  7804                           ; switch strategies available:
  7805                           ; Name         Instructions Cycles
  7806                           ; simple_byte            4     3 (average)
  7807                           ;	Chosen strategy is simple_byte
  7808  001110  5012               	movf	??_mergeObjects+1,w,c
  7809  001112  0A00               	xorlw	0	; case 0
  7810  001114  A4D8               	btfss	status,2,c
  7811  001116  0012               	return	
  7812                           
  7813                           ; Switch size 1, requested type "simple"
  7814                           ; Number of cases is 3, Range of values is 0 to 2
  7815                           ; switch strategies available:
  7816                           ; Name         Instructions Cycles
  7817                           ; simple_byte           10     6 (average)
  7818                           ;	Chosen strategy is simple_byte
  7819  001118  5011               	movf	??_mergeObjects,w,c
  7820  00111A  0A00               	xorlw	0	; case 0
  7821  00111C  B4D8               	btfsc	status,2,c
  7822  00111E  D784               	goto	l4367
  7823  001120  0A01               	xorlw	1	; case 1
  7824  001122  B4D8               	btfsc	status,2,c
  7825  001124  D7A4               	goto	l4379
  7826  001126  0A03               	xorlw	3	; case 2
  7827  001128  A4D8               	btfss	status,2,c
  7828  00112A  0012               	return	
  7829  00112C  D7C7               	goto	l4391
  7830  00112E                     __end_of_mergeObjects:
  7831                           	opt callstack 0
  7832                           
  7833 ;; *************** function _checkUp *****************
  7834 ;; Defined at:
  7835 ;;		line 71 in file "buttons.c"
  7836 ;; Parameters:    Size  Location     Type
  7837 ;;  reset           1    wreg     _Bool 
  7838 ;; Auto vars:     Size  Location     Type
  7839 ;;  reset           1   11[COMRAM] _Bool 
  7840 ;; Return value:  Size  Location     Type
  7841 ;;                  1    wreg      _Bool 
  7842 ;; Registers used:
  7843 ;;		wreg, status,2
  7844 ;; Tracked objects:
  7845 ;;		On entry : 0/0
  7846 ;;		On exit  : 0/0
  7847 ;;		Unchanged: 0/0
  7848 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7849 ;;      Params:         0       0       0       0       0       0       0
  7850 ;;      Locals:         1       0       0       0       0       0       0
  7851 ;;      Temps:          0       0       0       0       0       0       0
  7852 ;;      Totals:         1       0       0       0       0       0       0
  7853 ;;Total ram usage:        1 bytes
  7854 ;; Hardware stack levels used:    1
  7855 ;; Hardware stack levels required when called:    4
  7856 ;; This function calls:
  7857 ;;		Nothing
  7858 ;; This function is called by:
  7859 ;;		_tetris_buttons
  7860 ;;		_choosescreen
  7861 ;; This function uses a non-reentrant model
  7862 ;;
  7863                           
  7864                           	psect	text64
  7865  00219A                     __ptext64:
  7866                           	opt callstack 0
  7867  00219A                     _checkUp:
  7868                           	opt callstack 23
  7869                           
  7870                           ;incstack = 0
  7871                           ;checkUp@reset stored from wreg
  7872  00219A  6E0C               	movwf	checkUp@reset,c
  7873                           
  7874                           ;buttons.c: 72:     if (Rotate_Debounced)
  7875  00219C  504F               	movf	_Rotate_Debounced,w,c	;volatile
  7876  00219E  B4D8               	btfsc	status,2,c
  7877  0021A0  D00E               	goto	l3599
  7878                           
  7879                           ;buttons.c: 73:     {;buttons.c: 74:         Rotate_Delay = 500;
  7880  0021A2  0E01               	movlw	1
  7881  0021A4  0100               	movlb	0	; () banked
  7882  0021A6  6FE3               	movwf	(_Rotate_Delay+1)& (0+255),b	;volatile
  7883  0021A8  0EF4               	movlw	244
  7884  0021AA  6FE2               	movwf	_Rotate_Delay& (0+255),b	;volatile
  7885                           
  7886                           ;buttons.c: 75:         Rotate_Debounced = !reset;
  7887  0021AC  500C               	movf	checkUp@reset,w,c
  7888  0021AE  A4D8               	btfss	status,2,c
  7889  0021B0  D002               	goto	u2830
  7890  0021B2  0E01               	movlw	1
  7891  0021B4  D001               	goto	u2840
  7892  0021B6                     u2830:
  7893  0021B6  0E00               	movlw	0
  7894  0021B8                     u2840:
  7895  0021B8  6E4F               	movwf	_Rotate_Debounced,c	;volatile
  7896                           
  7897                           ; BSR set to: 0
  7898                           ;buttons.c: 76:         return 1;
  7899  0021BA  0E01               	movlw	1
  7900  0021BC  0012               	return	
  7901  0021BE                     l3599:
  7902  0021BE  0E00               	movlw	0
  7903  0021C0  0012               	return		;funcret
  7904  0021C2                     __end_of_checkUp:
  7905                           	opt callstack 0
  7906                           
  7907 ;; *************** function _checkDown *****************
  7908 ;; Defined at:
  7909 ;;		line 80 in file "buttons.c"
  7910 ;; Parameters:    Size  Location     Type
  7911 ;;  reset           1    wreg     _Bool 
  7912 ;; Auto vars:     Size  Location     Type
  7913 ;;  reset           1   11[COMRAM] _Bool 
  7914 ;; Return value:  Size  Location     Type
  7915 ;;                  1    wreg      _Bool 
  7916 ;; Registers used:
  7917 ;;		wreg, status,2
  7918 ;; Tracked objects:
  7919 ;;		On entry : 0/0
  7920 ;;		On exit  : 0/0
  7921 ;;		Unchanged: 0/0
  7922 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7923 ;;      Params:         0       0       0       0       0       0       0
  7924 ;;      Locals:         1       0       0       0       0       0       0
  7925 ;;      Temps:          0       0       0       0       0       0       0
  7926 ;;      Totals:         1       0       0       0       0       0       0
  7927 ;;Total ram usage:        1 bytes
  7928 ;; Hardware stack levels used:    1
  7929 ;; Hardware stack levels required when called:    4
  7930 ;; This function calls:
  7931 ;;		Nothing
  7932 ;; This function is called by:
  7933 ;;		_tetris_buttons
  7934 ;;		_show_score
  7935 ;;		_choosescreen
  7936 ;; This function uses a non-reentrant model
  7937 ;;
  7938                           
  7939                           	psect	text65
  7940  0021C2                     __ptext65:
  7941                           	opt callstack 0
  7942  0021C2                     _checkDown:
  7943                           	opt callstack 23
  7944                           
  7945                           ;incstack = 0
  7946                           ;checkDown@reset stored from wreg
  7947  0021C2  6E0C               	movwf	checkDown@reset,c
  7948                           
  7949                           ;buttons.c: 81:     if (Down_Debounced)
  7950  0021C4  504C               	movf	_Down_Debounced,w,c	;volatile
  7951  0021C6  B4D8               	btfsc	status,2,c
  7952  0021C8  D00E               	goto	l4813
  7953                           
  7954                           ;buttons.c: 82:     {;buttons.c: 83:         Down_Delay = 500;
  7955  0021CA  0E01               	movlw	1
  7956  0021CC  0100               	movlb	0	; () banked
  7957  0021CE  6FE1               	movwf	(_Down_Delay+1)& (0+255),b	;volatile
  7958  0021D0  0EF4               	movlw	244
  7959  0021D2  6FE0               	movwf	_Down_Delay& (0+255),b	;volatile
  7960                           
  7961                           ;buttons.c: 84:         Down_Debounced = !reset;
  7962  0021D4  500C               	movf	checkDown@reset,w,c
  7963  0021D6  A4D8               	btfss	status,2,c
  7964  0021D8  D002               	goto	u4430
  7965  0021DA  0E01               	movlw	1
  7966  0021DC  D001               	goto	u4440
  7967  0021DE                     u4430:
  7968  0021DE  0E00               	movlw	0
  7969  0021E0                     u4440:
  7970  0021E0  6E4C               	movwf	_Down_Debounced,c	;volatile
  7971                           
  7972                           ; BSR set to: 0
  7973                           ;buttons.c: 85:         return 1;
  7974  0021E2  0E01               	movlw	1
  7975  0021E4  0012               	return	
  7976  0021E6                     l4813:
  7977  0021E6  0E00               	movlw	0
  7978  0021E8  0012               	return		;funcret
  7979  0021EA                     __end_of_checkDown:
  7980                           	opt callstack 0
  7981                           
  7982 ;; *************** function _isr *****************
  7983 ;; Defined at:
  7984 ;;		line 66 in file "pictris.c"
  7985 ;; Parameters:    Size  Location     Type
  7986 ;;		None
  7987 ;; Auto vars:     Size  Location     Type
  7988 ;;		None
  7989 ;; Return value:  Size  Location     Type
  7990 ;;                  1    wreg      void 
  7991 ;; Registers used:
  7992 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  7993 ;; Tracked objects:
  7994 ;;		On entry : 0/0
  7995 ;;		On exit  : 0/0
  7996 ;;		Unchanged: 0/0
  7997 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7998 ;;      Params:         0       0       0       0       0       0       0
  7999 ;;      Locals:         0       0       0       0       0       0       0
  8000 ;;      Temps:          4       0       0       0       0       0       0
  8001 ;;      Totals:         4       0       0       0       0       0       0
  8002 ;;Total ram usage:        4 bytes
  8003 ;; Hardware stack levels used:    1
  8004 ;; Hardware stack levels required when called:    3
  8005 ;; This function calls:
  8006 ;;		_Interrupt
  8007 ;; This function is called by:
  8008 ;;		Interrupt level 2
  8009 ;; This function uses a non-reentrant model
  8010 ;;
  8011                           
  8012                           	psect	intcode
  8013  000008                     __pintcode:
  8014                           	opt callstack 0
  8015  000008                     _isr:
  8016                           	opt callstack 20
  8017                           
  8018                           ;incstack = 0
  8019  000008  8250               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
  8020  00000A  EDD8  F00F         	call	int_func,f	;refresh shadow registers
  8021                           
  8022                           	psect	intcode_body
  8023  001FB0                     __pintcode_body:
  8024                           	opt callstack 20
  8025  001FB0                     int_func:
  8026                           	opt callstack 20
  8027  001FB0  0006               	pop		; remove dummy address from shadow register refresh
  8028  001FB2  CFD9 F008          	movff	fsr2l,??_isr
  8029  001FB6  CFDA F009          	movff	fsr2h,??_isr+1
  8030  001FBA  CFF3 F00A          	movff	prodl,??_isr+2
  8031  001FBE  CFF4 F00B          	movff	prodh,??_isr+3
  8032                           
  8033                           ;pictris.c: 68:     if (INTCONbits.TMR0IF)
  8034  001FC2  A4F2               	btfss	4082,2,c	;volatile
  8035  001FC4  D007               	goto	i2l90
  8036                           
  8037                           ;pictris.c: 69:     {;pictris.c: 70:         INTCONbits.TMR0IF = 0;
  8038  001FC6  94F2               	bcf	4082,2,c	;volatile
  8039                           
  8040                           ;pictris.c: 71:         TMR0 = (~125);
  8041  001FC8  0EFF               	movlw	255
  8042  001FCA  6ED7               	movwf	4055,c	;volatile
  8043  001FCC  0E82               	movlw	130
  8044  001FCE  6ED6               	movwf	4054,c	;volatile
  8045                           
  8046                           ;pictris.c: 72:         Interrupt();
  8047  001FD0  EC53  F00C         	call	_Interrupt	;wreg free
  8048  001FD4                     i2l90:
  8049  001FD4  C00B  FFF4         	movff	??_isr+3,prodh
  8050  001FD8  C00A  FFF3         	movff	??_isr+2,prodl
  8051  001FDC  C009  FFDA         	movff	??_isr+1,fsr2h
  8052  001FE0  C008  FFD9         	movff	??_isr,fsr2l
  8053  001FE4  9250               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
  8054  001FE6  0011               	retfie		f
  8055  001FE8                     __end_of_isr:
  8056                           	opt callstack 0
  8057                           
  8058 ;; *************** function _Interrupt *****************
  8059 ;; Defined at:
  8060 ;;		line 27 in file "interrupt.c"
  8061 ;; Parameters:    Size  Location     Type
  8062 ;;		None
  8063 ;; Auto vars:     Size  Location     Type
  8064 ;;		None
  8065 ;; Return value:  Size  Location     Type
  8066 ;;                  1    wreg      void 
  8067 ;; Registers used:
  8068 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  8069 ;; Tracked objects:
  8070 ;;		On entry : 0/0
  8071 ;;		On exit  : 0/0
  8072 ;;		Unchanged: 0/0
  8073 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8074 ;;      Params:         0       0       0       0       0       0       0
  8075 ;;      Locals:         0       0       0       0       0       0       0
  8076 ;;      Temps:          0       0       0       0       0       0       0
  8077 ;;      Totals:         0       0       0       0       0       0       0
  8078 ;;Total ram usage:        0 bytes
  8079 ;; Hardware stack levels used:    1
  8080 ;; Hardware stack levels required when called:    2
  8081 ;; This function calls:
  8082 ;;		___lwmod
  8083 ;;		_add_mS
  8084 ;;		_checkButtons
  8085 ;;		_screen_update
  8086 ;;		_snake_timer
  8087 ;;		_tetris_timer
  8088 ;;		i2_get_mS
  8089 ;;		i2_set_mS
  8090 ;; This function is called by:
  8091 ;;		_isr
  8092 ;; This function uses a non-reentrant model
  8093 ;;
  8094                           
  8095                           	psect	text67
  8096  0018A6                     __ptext67:
  8097                           	opt callstack 0
  8098  0018A6                     _Interrupt:
  8099                           	opt callstack 20
  8100                           
  8101                           ;interrupt.c: 29:         time--;
  8102                           
  8103                           ;incstack = 0
  8104  0018A6  0100               	movlb	0	; () banked
  8105  0018A8  0788               	decf	_time& (0+255),f,b	;volatile
  8106  0018AA  A0D8               	btfss	status,0,c
  8107  0018AC  0789               	decf	(_time+1)& (0+255),f,b	;volatile
  8108                           
  8109                           ; BSR set to: 0
  8110                           ;interrupt.c: 31:         add_mS(1);
  8111  0018AE  0E00               	movlw	0
  8112  0018B0  6E02               	movwf	add_mS@amount+1,c
  8113  0018B2  0E01               	movlw	1
  8114  0018B4  6E01               	movwf	add_mS@amount,c
  8115  0018B6  ECB3  F011         	call	_add_mS	;wreg free
  8116                           
  8117                           ;interrupt.c: 32:         if (get_mS() >= 1600)
  8118  0018BA  ECD4  F011         	call	i2_get_mS	;wreg free
  8119  0018BE  0E40               	movlw	64
  8120  0018C0  5C01               	subwf	?i2_get_mS,w,c
  8121  0018C2  0E06               	movlw	6
  8122  0018C4  5802               	subwfb	?i2_get_mS+1,w,c
  8123  0018C6  A0D8               	btfss	status,0,c
  8124  0018C8  D006               	goto	i2l4089
  8125                           
  8126                           ;interrupt.c: 33:         {;interrupt.c: 34:             set_mS(0);
  8127  0018CA  0E00               	movlw	0
  8128  0018CC  6E02               	movwf	i2set_mS@amount+1,c
  8129  0018CE  0E00               	movlw	0
  8130  0018D0  6E01               	movwf	i2set_mS@amount,c
  8131  0018D2  ECCF  F011         	call	i2_set_mS	;wreg free
  8132  0018D6                     i2l4089:
  8133                           
  8134                           ;interrupt.c: 36:         if (get_mS() % 800 == 0 && tetris_timer())
  8135  0018D6  ECD4  F011         	call	i2_get_mS	;wreg free
  8136  0018DA  C001  F003         	movff	?i2_get_mS,___lwmod@dividend
  8137  0018DE  C002  F004         	movff	?i2_get_mS+1,___lwmod@dividend+1
  8138  0018E2  0E03               	movlw	3
  8139  0018E4  6E06               	movwf	___lwmod@divisor+1,c
  8140  0018E6  0E20               	movlw	32
  8141  0018E8  6E05               	movwf	___lwmod@divisor,c
  8142  0018EA  EC41  F00F         	call	___lwmod	;wreg free
  8143  0018EE  5003               	movf	?___lwmod,w,c
  8144  0018F0  1004               	iorwf	?___lwmod+1,w,c
  8145  0018F2  B4D8               	btfsc	status,2,c
  8146  0018F4  ECA5  F011         	call	_tetris_timer	;wreg free
  8147                           
  8148                           ;interrupt.c: 38:         if(get_mS() % 200 == 0 && snake_timer())
  8149  0018F8  ECD4  F011         	call	i2_get_mS	;wreg free
  8150  0018FC  C001  F003         	movff	?i2_get_mS,___lwmod@dividend
  8151  001900  C002  F004         	movff	?i2_get_mS+1,___lwmod@dividend+1
  8152  001904  0E00               	movlw	0
  8153  001906  6E06               	movwf	___lwmod@divisor+1,c
  8154  001908  0EC8               	movlw	200
  8155  00190A  6E05               	movwf	___lwmod@divisor,c
  8156  00190C  EC41  F00F         	call	___lwmod	;wreg free
  8157  001910  5003               	movf	?___lwmod,w,c
  8158  001912  1004               	iorwf	?___lwmod+1,w,c
  8159  001914  B4D8               	btfsc	status,2,c
  8160  001916  ECAC  F011         	call	_snake_timer	;wreg free
  8161                           
  8162                           ;interrupt.c: 40:         checkButtons();
  8163  00191A  EC94  F00C         	call	_checkButtons	;wreg free
  8164                           
  8165                           ;interrupt.c: 41:         screen_update();
  8166  00191E  ECD0  F00E         	call	_screen_update	;wreg free
  8167                           
  8168                           ;interrupt.c: 42:         InterruptComplete = 1;
  8169  001922  0E01               	movlw	1
  8170  001924  6E38               	movwf	_InterruptComplete,c	;volatile
  8171  001926  0012               	return		;funcret
  8172  001928                     __end_of_Interrupt:
  8173                           	opt callstack 0
  8174                           
  8175 ;; *************** function i2_set_mS *****************
  8176 ;; Defined at:
  8177 ;;		line 15 in file "shared_logic.c"
  8178 ;; Parameters:    Size  Location     Type
  8179 ;;  amount          2    0[COMRAM] unsigned short 
  8180 ;; Auto vars:     Size  Location     Type
  8181 ;;		None
  8182 ;; Return value:  Size  Location     Type
  8183 ;;                  1    wreg      void 
  8184 ;; Registers used:
  8185 ;;		None
  8186 ;; Tracked objects:
  8187 ;;		On entry : 0/0
  8188 ;;		On exit  : 0/0
  8189 ;;		Unchanged: 0/0
  8190 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8191 ;;      Params:         2       0       0       0       0       0       0
  8192 ;;      Locals:         0       0       0       0       0       0       0
  8193 ;;      Temps:          0       0       0       0       0       0       0
  8194 ;;      Totals:         2       0       0       0       0       0       0
  8195 ;;Total ram usage:        2 bytes
  8196 ;; Hardware stack levels used:    1
  8197 ;; This function calls:
  8198 ;;		Nothing
  8199 ;; This function is called by:
  8200 ;;		_Interrupt
  8201 ;; This function uses a non-reentrant model
  8202 ;;
  8203                           
  8204                           	psect	text68
  8205  00239E                     __ptext68:
  8206                           	opt callstack 0
  8207  00239E                     i2_set_mS:
  8208                           	opt callstack 21
  8209                           
  8210                           ;shared_logic.c: 16:     mS = amount;
  8211                           
  8212                           ;incstack = 0
  8213  00239E  C001  F034         	movff	i2set_mS@amount,_mS	;volatile
  8214  0023A2  C002  F035         	movff	i2set_mS@amount+1,_mS+1	;volatile
  8215  0023A6  0012               	return		;funcret
  8216  0023A8                     __end_ofi2_set_mS:
  8217                           	opt callstack 0
  8218                           
  8219 ;; *************** function i2_get_mS *****************
  8220 ;; Defined at:
  8221 ;;		line 23 in file "shared_logic.c"
  8222 ;; Parameters:    Size  Location     Type
  8223 ;;		None
  8224 ;; Auto vars:     Size  Location     Type
  8225 ;;		None
  8226 ;; Return value:  Size  Location     Type
  8227 ;;                  2    0[COMRAM] unsigned short 
  8228 ;; Registers used:
  8229 ;;		None
  8230 ;; Tracked objects:
  8231 ;;		On entry : 0/0
  8232 ;;		On exit  : 0/0
  8233 ;;		Unchanged: 0/0
  8234 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8235 ;;      Params:         2       0       0       0       0       0       0
  8236 ;;      Locals:         0       0       0       0       0       0       0
  8237 ;;      Temps:          0       0       0       0       0       0       0
  8238 ;;      Totals:         2       0       0       0       0       0       0
  8239 ;;Total ram usage:        2 bytes
  8240 ;; Hardware stack levels used:    1
  8241 ;; This function calls:
  8242 ;;		Nothing
  8243 ;; This function is called by:
  8244 ;;		_Interrupt
  8245 ;; This function uses a non-reentrant model
  8246 ;;
  8247                           
  8248                           	psect	text69
  8249  0023A8                     __ptext69:
  8250                           	opt callstack 0
  8251  0023A8                     i2_get_mS:
  8252                           	opt callstack 21
  8253                           
  8254                           ;shared_logic.c: 24:     return mS;
  8255                           
  8256                           ;incstack = 0
  8257  0023A8  C034  F001         	movff	_mS,?i2_get_mS	;volatile
  8258  0023AC  C035  F002         	movff	_mS+1,?i2_get_mS+1	;volatile
  8259  0023B0  0012               	return		;funcret
  8260  0023B2                     __end_ofi2_get_mS:
  8261                           	opt callstack 0
  8262                           
  8263 ;; *************** function _tetris_timer *****************
  8264 ;; Defined at:
  8265 ;;		line 336 in file "tetris.c"
  8266 ;; Parameters:    Size  Location     Type
  8267 ;;		None
  8268 ;; Auto vars:     Size  Location     Type
  8269 ;;		None
  8270 ;; Return value:  Size  Location     Type
  8271 ;;                  1    wreg      _Bool 
  8272 ;; Registers used:
  8273 ;;		wreg, status,2
  8274 ;; Tracked objects:
  8275 ;;		On entry : 0/0
  8276 ;;		On exit  : 0/0
  8277 ;;		Unchanged: 0/0
  8278 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8279 ;;      Params:         0       0       0       0       0       0       0
  8280 ;;      Locals:         0       0       0       0       0       0       0
  8281 ;;      Temps:          0       0       0       0       0       0       0
  8282 ;;      Totals:         0       0       0       0       0       0       0
  8283 ;;Total ram usage:        0 bytes
  8284 ;; Hardware stack levels used:    1
  8285 ;; This function calls:
  8286 ;;		Nothing
  8287 ;; This function is called by:
  8288 ;;		_Interrupt
  8289 ;; This function uses a non-reentrant model
  8290 ;;
  8291                           
  8292                           	psect	text70
  8293  00234A                     __ptext70:
  8294                           	opt callstack 0
  8295  00234A                     _tetris_timer:
  8296                           	opt callstack 21
  8297                           
  8298                           ;tetris.c: 337:     if (game) {
  8299                           
  8300                           ;incstack = 0
  8301  00234A  5041               	movf	_game,w,c	;volatile
  8302  00234C  B4D8               	btfsc	status,2,c
  8303  00234E  D002               	goto	i2l339
  8304                           
  8305                           ;tetris.c: 338:     DropObject = 1;
  8306  002350  0E01               	movlw	1
  8307  002352  6E44               	movwf	_DropObject,c	;volatile
  8308  002354                     i2l339:
  8309                           
  8310                           ;tetris.c: 340:     return game;
  8311  002354  5041               	movf	_game,w,c	;volatile
  8312  002356  0012               	return		;funcret
  8313  002358                     __end_of_tetris_timer:
  8314                           	opt callstack 0
  8315                           
  8316 ;; *************** function _snake_timer *****************
  8317 ;; Defined at:
  8318 ;;		line 153 in file "snake.c"
  8319 ;; Parameters:    Size  Location     Type
  8320 ;;		None
  8321 ;; Auto vars:     Size  Location     Type
  8322 ;;		None
  8323 ;; Return value:  Size  Location     Type
  8324 ;;                  1    wreg      _Bool 
  8325 ;; Registers used:
  8326 ;;		wreg, status,2
  8327 ;; Tracked objects:
  8328 ;;		On entry : 0/0
  8329 ;;		On exit  : 0/0
  8330 ;;		Unchanged: 0/0
  8331 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8332 ;;      Params:         0       0       0       0       0       0       0
  8333 ;;      Locals:         0       0       0       0       0       0       0
  8334 ;;      Temps:          0       0       0       0       0       0       0
  8335 ;;      Totals:         0       0       0       0       0       0       0
  8336 ;;Total ram usage:        0 bytes
  8337 ;; Hardware stack levels used:    1
  8338 ;; This function calls:
  8339 ;;		Nothing
  8340 ;; This function is called by:
  8341 ;;		_Interrupt
  8342 ;; This function uses a non-reentrant model
  8343 ;;
  8344                           
  8345                           	psect	text71
  8346  002358                     __ptext71:
  8347                           	opt callstack 0
  8348  002358                     _snake_timer:
  8349                           	opt callstack 21
  8350                           
  8351                           ;snake.c: 154:     if (game){
  8352                           
  8353                           ;incstack = 0
  8354  002358  5041               	movf	_game,w,c	;volatile
  8355  00235A  B4D8               	btfsc	status,2,c
  8356  00235C  D002               	goto	i2l472
  8357                           
  8358                           ;snake.c: 155:     moveSnake = 1;
  8359  00235E  0E01               	movlw	1
  8360  002360  6E40               	movwf	_moveSnake,c	;volatile
  8361  002362                     i2l472:
  8362                           
  8363                           ;snake.c: 157:     return game;
  8364  002362  5041               	movf	_game,w,c	;volatile
  8365  002364  0012               	return		;funcret
  8366  002366                     __end_of_snake_timer:
  8367                           	opt callstack 0
  8368                           
  8369 ;; *************** function _screen_update *****************
  8370 ;; Defined at:
  8371 ;;		line 87 in file "screen.c"
  8372 ;; Parameters:    Size  Location     Type
  8373 ;;		None
  8374 ;; Auto vars:     Size  Location     Type
  8375 ;;  ymask           2    2[COMRAM] unsigned short 
  8376 ;;  xmask           1    4[COMRAM] unsigned char 
  8377 ;; Return value:  Size  Location     Type
  8378 ;;                  1    wreg      void 
  8379 ;; Registers used:
  8380 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  8381 ;; Tracked objects:
  8382 ;;		On entry : 0/0
  8383 ;;		On exit  : 0/0
  8384 ;;		Unchanged: 0/0
  8385 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8386 ;;      Params:         0       0       0       0       0       0       0
  8387 ;;      Locals:         3       0       0       0       0       0       0
  8388 ;;      Temps:          2       0       0       0       0       0       0
  8389 ;;      Totals:         5       0       0       0       0       0       0
  8390 ;;Total ram usage:        5 bytes
  8391 ;; Hardware stack levels used:    1
  8392 ;; This function calls:
  8393 ;;		Nothing
  8394 ;; This function is called by:
  8395 ;;		_Interrupt
  8396 ;; This function uses a non-reentrant model
  8397 ;;
  8398                           
  8399                           	psect	text72
  8400  001DA0                     __ptext72:
  8401                           	opt callstack 0
  8402  001DA0                     _screen_update:
  8403                           	opt callstack 21
  8404                           
  8405                           ;screen.c: 89:     if (UpdateScreen)
  8406                           
  8407                           ;incstack = 0
  8408  001DA0  5039               	movf	_UpdateScreen,w,c	;volatile
  8409  001DA2  B4D8               	btfsc	status,2,c
  8410  001DA4  0012               	return	
  8411                           
  8412                           ;screen.c: 90:         {;screen.c: 91:             static uint8_t CurrentX = 0;;screen.c
      +                          : 93:             uint8_t xmask = 1 << CurrentX;
  8413  001DA6  C04B  F001         	movff	screen_update@CurrentX,??_screen_update
  8414  001DAA  0E01               	movlw	1
  8415  001DAC  6E02               	movwf	(??_screen_update+1)& (0+255),c
  8416  001DAE  2A01               	incf	??_screen_update,f,c
  8417  001DB0  D002               	goto	i2u354_44
  8418  001DB2                     i2u354_45:
  8419  001DB2  90D8               	bcf	status,0,c
  8420  001DB4  3602               	rlcf	??_screen_update+1,f,c
  8421  001DB6                     i2u354_44:
  8422  001DB6  2E01               	decfsz	??_screen_update,f,c
  8423  001DB8  D7FC               	goto	i2u354_45
  8424  001DBA  5002               	movf	??_screen_update+1,w,c
  8425  001DBC  6E05               	movwf	screen_update@xmask,c
  8426                           
  8427                           ;screen.c: 94:             uint16_t ymask = ScreenData[CurrentX];
  8428  001DBE  504B               	movf	screen_update@CurrentX,w,c
  8429  001DC0  0D02               	mullw	2
  8430  001DC2  0E90               	movlw	low _ScreenData
  8431  001DC4  24F3               	addwf	prodl,w,c
  8432  001DC6  6ED9               	movwf	fsr2l,c
  8433  001DC8  0E00               	movlw	high _ScreenData
  8434  001DCA  20F4               	addwfc	prodh,w,c
  8435  001DCC  6EDA               	movwf	fsr2h,c
  8436  001DCE  CFDE F003          	movff	postinc2,screen_update@ymask
  8437  001DD2  CFDD F004          	movff	postdec2,screen_update@ymask+1
  8438                           
  8439                           ;screen.c: 96:             port_display = 0;
  8440  001DD6  0E00               	movlw	0
  8441  001DD8  6E83               	movwf	3971,c	;volatile
  8442  001DDA  0E00               	movlw	0
  8443  001DDC  6E82               	movwf	3970,c	;volatile
  8444                           
  8445                           ;screen.c: 98:             PORTA = xmask;
  8446  001DDE  C005  FF80         	movff	screen_update@xmask,3968	;volatile
  8447                           
  8448                           ;screen.c: 100:             port_display = ~ymask;
  8449  001DE2  1C03               	comf	screen_update@ymask,w,c
  8450  001DE4  6E82               	movwf	3970,c	;volatile
  8451  001DE6  1C04               	comf	screen_update@ymask+1,w,c
  8452  001DE8  6E83               	movwf	3971,c	;volatile
  8453                           
  8454                           ;screen.c: 103:             CurrentX++;
  8455  001DEA  2A4B               	incf	screen_update@CurrentX,f,c
  8456                           
  8457                           ;screen.c: 104:             CurrentX &= 0x07;
  8458  001DEC  0E07               	movlw	7
  8459  001DEE  164B               	andwf	screen_update@CurrentX,f,c
  8460  001DF0  0012               	return		;funcret
  8461  001DF2                     __end_of_screen_update:
  8462                           	opt callstack 0
  8463                           
  8464 ;; *************** function _checkButtons *****************
  8465 ;; Defined at:
  8466 ;;		line 108 in file "buttons.c"
  8467 ;; Parameters:    Size  Location     Type
  8468 ;;		None
  8469 ;; Auto vars:     Size  Location     Type
  8470 ;;		None
  8471 ;; Return value:  Size  Location     Type
  8472 ;;                  1    wreg      void 
  8473 ;; Registers used:
  8474 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  8475 ;; Tracked objects:
  8476 ;;		On entry : 0/0
  8477 ;;		On exit  : 0/0
  8478 ;;		Unchanged: 0/0
  8479 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8480 ;;      Params:         0       0       0       0       0       0       0
  8481 ;;      Locals:         0       0       0       0       0       0       0
  8482 ;;      Temps:          0       0       0       0       0       0       0
  8483 ;;      Totals:         0       0       0       0       0       0       0
  8484 ;;Total ram usage:        0 bytes
  8485 ;; Hardware stack levels used:    1
  8486 ;; Hardware stack levels required when called:    1
  8487 ;; This function calls:
  8488 ;;		_debounceButton
  8489 ;; This function is called by:
  8490 ;;		_Interrupt
  8491 ;; This function uses a non-reentrant model
  8492 ;;
  8493                           
  8494                           	psect	text73
  8495  001928                     __ptext73:
  8496                           	opt callstack 0
  8497  001928                     _checkButtons:
  8498                           	opt callstack 20
  8499                           
  8500                           ;buttons.c: 110:     if (mtxButtons)
  8501                           
  8502                           ;incstack = 0
  8503  001928  503A               	movf	_mtxButtons,w,c	;volatile
  8504  00192A  B4D8               	btfsc	status,2,c
  8505  00192C  0012               	return	
  8506                           
  8507                           ;buttons.c: 111:     {;buttons.c: 112:         debounceButton(PORTBbits.RB0, &Left_Delay
      +                          , &Left_Debounced );
  8508  00192E  0EE6               	movlw	low _Left_Delay
  8509  001930  6E01               	movwf	debounceButton@delay,c
  8510  001932  0E00               	movlw	high _Left_Delay
  8511  001934  6E02               	movwf	debounceButton@delay+1,c
  8512  001936  0E4E               	movlw	low _Left_Debounced
  8513  001938  6E03               	movwf	debounceButton@debounced,c
  8514  00193A  0E00               	movlw	high _Left_Debounced
  8515  00193C  6E04               	movwf	debounceButton@debounced+1,c
  8516  00193E  A081               	btfss	3969,0,c	;volatile
  8517  001940  D002               	goto	i2u349_40
  8518  001942  0E01               	movlw	1
  8519  001944  D001               	goto	i2u349_46
  8520  001946                     i2u349_40:
  8521  001946  0E00               	movlw	0
  8522  001948                     i2u349_46:
  8523  001948  EC83  F00D         	call	_debounceButton
  8524                           
  8525                           ;buttons.c: 113:         debounceButton(PORTBbits.RB1, &Right_Delay, &Right_Debounced );
  8526  00194C  0EE4               	movlw	low _Right_Delay
  8527  00194E  6E01               	movwf	debounceButton@delay,c
  8528  001950  0E00               	movlw	high _Right_Delay
  8529  001952  6E02               	movwf	debounceButton@delay+1,c
  8530  001954  0E4D               	movlw	low _Right_Debounced
  8531  001956  6E03               	movwf	debounceButton@debounced,c
  8532  001958  0E00               	movlw	high _Right_Debounced
  8533  00195A  6E04               	movwf	debounceButton@debounced+1,c
  8534  00195C  A281               	btfss	3969,1,c	;volatile
  8535  00195E  D002               	goto	i2u350_40
  8536  001960  0E01               	movlw	1
  8537  001962  D001               	goto	i2u350_46
  8538  001964                     i2u350_40:
  8539  001964  0E00               	movlw	0
  8540  001966                     i2u350_46:
  8541  001966  EC83  F00D         	call	_debounceButton
  8542                           
  8543                           ;buttons.c: 114:         debounceButton(PORTBbits.RB2, &Rotate_Delay, &Rotate_Debounced)
      +                          ;
  8544  00196A  0EE2               	movlw	low _Rotate_Delay
  8545  00196C  6E01               	movwf	debounceButton@delay,c
  8546  00196E  0E00               	movlw	high _Rotate_Delay
  8547  001970  6E02               	movwf	debounceButton@delay+1,c
  8548  001972  0E4F               	movlw	low _Rotate_Debounced
  8549  001974  6E03               	movwf	debounceButton@debounced,c
  8550  001976  0E00               	movlw	high _Rotate_Debounced
  8551  001978  6E04               	movwf	debounceButton@debounced+1,c
  8552  00197A  A481               	btfss	3969,2,c	;volatile
  8553  00197C  D002               	goto	i2u351_40
  8554  00197E  0E01               	movlw	1
  8555  001980  D001               	goto	i2u351_46
  8556  001982                     i2u351_40:
  8557  001982  0E00               	movlw	0
  8558  001984                     i2u351_46:
  8559  001984  EC83  F00D         	call	_debounceButton
  8560                           
  8561                           ;buttons.c: 115:         debounceButton(PORTBbits.RB3, &Down_Delay, &Down_Debounced );
  8562  001988  0EE0               	movlw	low _Down_Delay
  8563  00198A  6E01               	movwf	debounceButton@delay,c
  8564  00198C  0E00               	movlw	high _Down_Delay
  8565  00198E  6E02               	movwf	debounceButton@delay+1,c
  8566  001990  0E4C               	movlw	low _Down_Debounced
  8567  001992  6E03               	movwf	debounceButton@debounced,c
  8568  001994  0E00               	movlw	high _Down_Debounced
  8569  001996  6E04               	movwf	debounceButton@debounced+1,c
  8570  001998  A681               	btfss	3969,3,c	;volatile
  8571  00199A  D002               	goto	i2u352_40
  8572  00199C  0E01               	movlw	1
  8573  00199E  D001               	goto	i2u352_46
  8574  0019A0                     i2u352_40:
  8575  0019A0  0E00               	movlw	0
  8576  0019A2                     i2u352_46:
  8577  0019A2  EC83  F00D         	call	_debounceButton
  8578  0019A6  0012               	return		;funcret
  8579  0019A8                     __end_of_checkButtons:
  8580                           	opt callstack 0
  8581                           
  8582 ;; *************** function _debounceButton *****************
  8583 ;; Defined at:
  8584 ;;		line 91 in file "buttons.c"
  8585 ;; Parameters:    Size  Location     Type
  8586 ;;  button          1    wreg     volatile _Bool 
  8587 ;;  delay           2    0[COMRAM] PTR volatile short 
  8588 ;;		 -> Down_Delay(2), Rotate_Delay(2), Right_Delay(2), Left_Delay(2), 
  8589 ;;  debounced       2    2[COMRAM] PTR volatile _Bool 
  8590 ;;		 -> Down_Debounced(1), Rotate_Debounced(1), Right_Debounced(1), Left_Debounced(1), 
  8591 ;; Auto vars:     Size  Location     Type
  8592 ;;  button          1    6[COMRAM] volatile _Bool 
  8593 ;; Return value:  Size  Location     Type
  8594 ;;                  1    wreg      void 
  8595 ;; Registers used:
  8596 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  8597 ;; Tracked objects:
  8598 ;;		On entry : 0/0
  8599 ;;		On exit  : 0/0
  8600 ;;		Unchanged: 0/0
  8601 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8602 ;;      Params:         4       0       0       0       0       0       0
  8603 ;;      Locals:         1       0       0       0       0       0       0
  8604 ;;      Temps:          2       0       0       0       0       0       0
  8605 ;;      Totals:         7       0       0       0       0       0       0
  8606 ;;Total ram usage:        7 bytes
  8607 ;; Hardware stack levels used:    1
  8608 ;; This function calls:
  8609 ;;		Nothing
  8610 ;; This function is called by:
  8611 ;;		_checkButtons
  8612 ;; This function uses a non-reentrant model
  8613 ;;
  8614                           
  8615                           	psect	text74
  8616  001B06                     __ptext74:
  8617                           	opt callstack 0
  8618  001B06                     _debounceButton:
  8619                           	opt callstack 20
  8620                           
  8621                           ;incstack = 0
  8622                           ;debounceButton@button stored from wreg
  8623  001B06  6E07               	movwf	debounceButton@button,c	;volatile
  8624                           
  8625                           ;buttons.c: 91: void debounceButton(volatile _Bool button, volatile int16_t *delay, vola
      +                          tile _Bool *debounced);buttons.c: 92: {;buttons.c: 93:     if (button == 0)
  8626  001B08  5007               	movf	debounceButton@button,w,c	;volatile
  8627  001B0A  A4D8               	btfss	status,2,c
  8628  001B0C  D023               	goto	i2l3943
  8629                           
  8630                           ;buttons.c: 94:     {;buttons.c: 95:         if (*delay < 0)
  8631  001B0E  C001  FFD9         	movff	debounceButton@delay,fsr2l
  8632  001B12  C002  FFDA         	movff	debounceButton@delay+1,fsr2h
  8633  001B16  0E01               	movlw	1
  8634  001B18  AEDB               	btfss	plusw2,7,c
  8635  001B1A  D009               	goto	i2l3939
  8636                           
  8637                           ;buttons.c: 96:             *delay = 50;
  8638  001B1C  C001  FFD9         	movff	debounceButton@delay,fsr2l
  8639  001B20  C002  FFDA         	movff	debounceButton@delay+1,fsr2h
  8640  001B24  0E32               	movlw	50
  8641  001B26  6EDE               	movwf	postinc2,c
  8642  001B28  0E00               	movlw	0
  8643  001B2A  6EDD               	movwf	postdec2,c
  8644  001B2C  0012               	return	
  8645  001B2E                     i2l3939:
  8646  001B2E  C001  FFD9         	movff	debounceButton@delay,fsr2l
  8647  001B32  C002  FFDA         	movff	debounceButton@delay+1,fsr2h
  8648  001B36  06DE               	decf	postinc2,f,c
  8649  001B38  0E00               	movlw	0
  8650  001B3A  5ADD               	subwfb	postdec2,f,c
  8651  001B3C  28DE               	incf	postinc2,w,c
  8652  001B3E  E118               	bnz	i2l687
  8653  001B40  28DE               	incf	postinc2,w,c
  8654  001B42  A4D8               	btfss	status,2,c
  8655  001B44  0012               	return	
  8656                           
  8657                           ;buttons.c: 98:             *debounced = 1;
  8658  001B46  C003  FFD9         	movff	debounceButton@debounced,fsr2l
  8659  001B4A  C004  FFDA         	movff	debounceButton@debounced+1,fsr2h
  8660  001B4E  0E01               	movlw	1
  8661  001B50  6EDF               	movwf	indf2,c
  8662  001B52  0012               	return	
  8663  001B54                     i2l3943:
  8664                           
  8665                           ;buttons.c: 101:     {;buttons.c: 102:         *delay = -1;
  8666  001B54  C001  FFD9         	movff	debounceButton@delay,fsr2l
  8667  001B58  C002  FFDA         	movff	debounceButton@delay+1,fsr2h
  8668  001B5C  0EFF               	movlw	255
  8669  001B5E  6EDE               	movwf	postinc2,c
  8670  001B60  0EFF               	movlw	255
  8671  001B62  6EDD               	movwf	postdec2,c
  8672                           
  8673                           ;buttons.c: 103:         *debounced = 0;
  8674  001B64  C003  FFD9         	movff	debounceButton@debounced,fsr2l
  8675  001B68  C004  FFDA         	movff	debounceButton@debounced+1,fsr2h
  8676  001B6C  0E00               	movlw	0
  8677  001B6E  6EDF               	movwf	indf2,c
  8678  001B70                     i2l687:
  8679  001B70  0012               	return		;funcret
  8680  001B72                     __end_of_debounceButton:
  8681                           	opt callstack 0
  8682                           
  8683 ;; *************** function _add_mS *****************
  8684 ;; Defined at:
  8685 ;;		line 19 in file "shared_logic.c"
  8686 ;; Parameters:    Size  Location     Type
  8687 ;;  amount          2    0[COMRAM] unsigned short 
  8688 ;; Auto vars:     Size  Location     Type
  8689 ;;		None
  8690 ;; Return value:  Size  Location     Type
  8691 ;;                  1    wreg      void 
  8692 ;; Registers used:
  8693 ;;		wreg, status,2, status,0
  8694 ;; Tracked objects:
  8695 ;;		On entry : 0/0
  8696 ;;		On exit  : 0/0
  8697 ;;		Unchanged: 0/0
  8698 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8699 ;;      Params:         2       0       0       0       0       0       0
  8700 ;;      Locals:         0       0       0       0       0       0       0
  8701 ;;      Temps:          0       0       0       0       0       0       0
  8702 ;;      Totals:         2       0       0       0       0       0       0
  8703 ;;Total ram usage:        2 bytes
  8704 ;; Hardware stack levels used:    1
  8705 ;; This function calls:
  8706 ;;		Nothing
  8707 ;; This function is called by:
  8708 ;;		_Interrupt
  8709 ;; This function uses a non-reentrant model
  8710 ;;
  8711                           
  8712                           	psect	text75
  8713  002366                     __ptext75:
  8714                           	opt callstack 0
  8715  002366                     _add_mS:
  8716                           	opt callstack 21
  8717                           
  8718                           ;shared_logic.c: 20:     mS = mS + amount;
  8719                           
  8720                           ;incstack = 0
  8721  002366  5001               	movf	add_mS@amount,w,c
  8722  002368  2434               	addwf	_mS,w,c	;volatile
  8723  00236A  6E34               	movwf	_mS,c	;volatile
  8724  00236C  5002               	movf	add_mS@amount+1,w,c
  8725  00236E  2035               	addwfc	_mS+1,w,c	;volatile
  8726  002370  6E35               	movwf	_mS+1,c	;volatile
  8727  002372  0012               	return		;funcret
  8728  002374                     __end_of_add_mS:
  8729                           	opt callstack 0
  8730                           
  8731 ;; *************** function ___lwmod *****************
  8732 ;; Defined at:
  8733 ;;		line 7 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\lwmod.c"
  8734 ;; Parameters:    Size  Location     Type
  8735 ;;  dividend        2    2[COMRAM] unsigned int 
  8736 ;;  divisor         2    4[COMRAM] unsigned int 
  8737 ;; Auto vars:     Size  Location     Type
  8738 ;;  counter         1    6[COMRAM] unsigned char 
  8739 ;; Return value:  Size  Location     Type
  8740 ;;                  2    2[COMRAM] unsigned int 
  8741 ;; Registers used:
  8742 ;;		wreg, status,2, status,0
  8743 ;; Tracked objects:
  8744 ;;		On entry : 0/0
  8745 ;;		On exit  : 0/0
  8746 ;;		Unchanged: 0/0
  8747 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8748 ;;      Params:         4       0       0       0       0       0       0
  8749 ;;      Locals:         1       0       0       0       0       0       0
  8750 ;;      Temps:          0       0       0       0       0       0       0
  8751 ;;      Totals:         5       0       0       0       0       0       0
  8752 ;;Total ram usage:        5 bytes
  8753 ;; Hardware stack levels used:    1
  8754 ;; This function calls:
  8755 ;;		Nothing
  8756 ;; This function is called by:
  8757 ;;		_Interrupt
  8758 ;; This function uses a non-reentrant model
  8759 ;;
  8760                           
  8761                           	psect	text76
  8762  001E82                     __ptext76:
  8763                           	opt callstack 0
  8764  001E82                     ___lwmod:
  8765                           	opt callstack 21
  8766                           
  8767                           ;incstack = 0
  8768  001E82  5005               	movf	___lwmod@divisor,w,c
  8769  001E84  1006               	iorwf	___lwmod@divisor+1,w,c
  8770  001E86  B4D8               	btfsc	status,2,c
  8771  001E88  D018               	goto	i2l1293
  8772  001E8A  0E01               	movlw	1
  8773  001E8C  6E07               	movwf	___lwmod@counter,c
  8774  001E8E  D004               	goto	i2l4067
  8775  001E90                     i2l4065:
  8776  001E90  90D8               	bcf	status,0,c
  8777  001E92  3605               	rlcf	___lwmod@divisor,f,c
  8778  001E94  3606               	rlcf	___lwmod@divisor+1,f,c
  8779  001E96  2A07               	incf	___lwmod@counter,f,c
  8780  001E98                     i2l4067:
  8781  001E98  AE06               	btfss	___lwmod@divisor+1,7,c
  8782  001E9A  D7FA               	goto	i2l4065
  8783  001E9C                     i2u356_40:
  8784  001E9C  5005               	movf	___lwmod@divisor,w,c
  8785  001E9E  5C03               	subwf	___lwmod@dividend,w,c
  8786  001EA0  5006               	movf	___lwmod@divisor+1,w,c
  8787  001EA2  5804               	subwfb	___lwmod@dividend+1,w,c
  8788  001EA4  A0D8               	btfss	status,0,c
  8789  001EA6  D004               	goto	i2l4073
  8790  001EA8  5005               	movf	___lwmod@divisor,w,c
  8791  001EAA  5E03               	subwf	___lwmod@dividend,f,c
  8792  001EAC  5006               	movf	___lwmod@divisor+1,w,c
  8793  001EAE  5A04               	subwfb	___lwmod@dividend+1,f,c
  8794  001EB0                     i2l4073:
  8795  001EB0  90D8               	bcf	status,0,c
  8796  001EB2  3206               	rrcf	___lwmod@divisor+1,f,c
  8797  001EB4  3205               	rrcf	___lwmod@divisor,f,c
  8798  001EB6  2E07               	decfsz	___lwmod@counter,f,c
  8799  001EB8  D7F1               	goto	i2u356_40
  8800  001EBA                     i2l1293:
  8801  001EBA  C003  F003         	movff	___lwmod@dividend,?___lwmod
  8802  001EBE  C004  F004         	movff	___lwmod@dividend+1,?___lwmod+1
  8803  001EC2  0012               	return		;funcret
  8804  001EC4                     __end_of___lwmod:
  8805                           	opt callstack 0
  8806                           
  8807                           	psect	rparam
  8808  0000                     
  8809                           	psect	temp
  8810  000050                     btemp:
  8811                           	opt callstack 0
  8812  000050                     	ds	1
  8813  0000                     int$flags	set	btemp
  8814  0000                     wtemp8	set	btemp+1
  8815  0000                     ttemp5	set	btemp+1
  8816  0000                     ttemp6	set	btemp+4
  8817  0000                     ttemp7	set	btemp+8
  8818                           tosu	equ	0xFFF
  8819                           tosh	equ	0xFFE
  8820                           tosl	equ	0xFFD
  8821                           stkptr	equ	0xFFC
  8822                           pclatu	equ	0xFFB
  8823                           pclath	equ	0xFFA
  8824                           pcl	equ	0xFF9
  8825                           tblptru	equ	0xFF8
  8826                           tblptrh	equ	0xFF7
  8827                           tblptrl	equ	0xFF6
  8828                           tablat	equ	0xFF5
  8829                           prodh	equ	0xFF4
  8830                           prodl	equ	0xFF3
  8831                           indf0	equ	0xFEF
  8832                           postinc0	equ	0xFEE
  8833                           postdec0	equ	0xFED
  8834                           preinc0	equ	0xFEC
  8835                           plusw0	equ	0xFEB
  8836                           fsr0h	equ	0xFEA
  8837                           fsr0l	equ	0xFE9
  8838                           wreg	equ	0xFE8
  8839                           indf1	equ	0xFE7
  8840                           postinc1	equ	0xFE6
  8841                           postdec1	equ	0xFE5
  8842                           preinc1	equ	0xFE4
  8843                           plusw1	equ	0xFE3
  8844                           fsr1h	equ	0xFE2
  8845                           fsr1l	equ	0xFE1
  8846                           bsr	equ	0xFE0
  8847                           indf2	equ	0xFDF
  8848                           postinc2	equ	0xFDE
  8849                           postdec2	equ	0xFDD
  8850                           preinc2	equ	0xFDC
  8851                           plusw2	equ	0xFDB
  8852                           fsr2h	equ	0xFDA
  8853                           fsr2l	equ	0xFD9
  8854                           status	equ	0xFD8


Data Sizes:
    Strings     0
    Constant    240
    Data        149
    BSS         388
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          126     51      79
    BANK0           128      0     120
    BANK1           256      0     256
    BANK2           256     55     188
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0

Pointer List with Targets:

    set_screen@newData	PTR volatile unsigned short  size(2) Largest target is 16
		 -> choose_screen(CODE[16]), show_score@Numberscreen(BANK2[16]), Screen_Data(BANK0[16]), TETRIS(CODE[16]), 
		 -> ObjectData(BANK0[16]), 

    debounceButton@debounced	PTR volatile _Bool  size(2) Largest target is 1
		 -> Down_Debounced(COMRAM[1]), Rotate_Debounced(COMRAM[1]), Right_Debounced(COMRAM[1]), Left_Debounced(COMRAM[1]), 

    debounceButton@delay	PTR volatile short  size(2) Largest target is 2
		 -> Down_Delay(BANK0[2]), Rotate_Delay(BANK0[2]), Right_Delay(BANK0[2]), Left_Delay(BANK0[2]), 

    getNumber@pTarget	PTR unsigned short  size(2) Largest target is 16
		 -> show_score@tmpObjectData(BANK2[16]), 

    removeLine@pObject	PTR volatile unsigned short  size(2) Largest target is 16
		 -> BackgroundData(BANK0[16]), 

    pixelCount@pSource	PTR volatile unsigned short  size(2) Largest target is 16
		 -> tmpObjectData(BANK0[16]), ObjectData(BANK0[16]), 

    collisionDetect@pTarget	PTR volatile unsigned short  size(2) Largest target is 16
		 -> BackgroundData(BANK0[16]), 

    collisionDetect@pSource	PTR volatile unsigned short  size(2) Largest target is 16
		 -> tmpObjectData(BANK0[16]), ObjectData(BANK0[16]), 

    checkForRightWall@pObject	PTR volatile unsigned short  size(2) Largest target is 16
		 -> ObjectData(BANK0[16]), 

    checkForLeftWall@pObject	PTR volatile unsigned short  size(2) Largest target is 16
		 -> ObjectData(BANK0[16]), 

    mergeObjects@pSource	PTR volatile unsigned short  size(2) Largest target is 16
		 -> choosescreen@mask(COMRAM[16]), show_score@mask(BANK2[16]), show_score@tmpObjectData(BANK2[16]), tmpObjectData(BANK0[16]), 
		 -> BackgroundData(BANK0[16]), ObjectData(BANK0[16]), 

    mergeObjects@pTarget	PTR volatile unsigned short  size(2) Largest target is 16
		 -> ScreenData(BANK0[16]), show_score@Numberscreen(BANK2[16]), Screen_Data(BANK0[16]), tmpObjectData(BANK0[16]), 
		 -> BackgroundData(BANK0[16]), ObjectData(BANK0[16]), 

    clearArray@pArray	PTR volatile unsigned short  size(2) Largest target is 16
		 -> ScreenData(BANK0[16]), show_score@Numberscreen(BANK2[16]), show_score@tmpObjectData(BANK2[16]), tmpObjectData(BANK0[16]), 
		 -> BackgroundData(BANK0[16]), ObjectData(BANK0[16]), 

    sp__itoa	PTR unsigned char  size(2) Largest target is 4
		 -> show_score@number(BANK2[4]), 

    itoa@str	PTR unsigned char  size(2) Largest target is 4
		 -> show_score@number(BANK2[4]), 

    reverse@str	PTR unsigned char  size(2) Largest target is 4
		 -> show_score@number(BANK2[4]), 

    swap@b	PTR unsigned char  size(2) Largest target is 4
		 -> show_score@number(BANK2[4]), 

    swap@a	PTR unsigned char  size(2) Largest target is 4
		 -> show_score@number(BANK2[4]), 

    memcpyvol@src	PTR  void  size(2) Largest target is 133
		 -> SNAKE(CODE[16]), ObjectData(BANK0[16]), shapes.graphic(BANK2[16]), shapes(BANK2[133]), 

    memcpyvol@s	PTR unsigned char  size(2) Largest target is 133
		 -> SNAKE(CODE[16]), ObjectData(BANK0[16]), shapes.graphic(BANK2[16]), shapes(BANK2[133]), 

    memcpyvol@dest	PTR volatile void  size(2) Largest target is 16
		 -> tmpObjectData(BANK0[16]), ObjectData(BANK0[16]), 

    memcpyvol@d	PTR unsigned char  size(2) Largest target is 16
		 -> tmpObjectData(BANK0[16]), ObjectData(BANK0[16]), 

    sp__memcpy	PTR void  size(2) Largest target is 16
		 -> show_score@tmpObjectData(BANK2[16]), 

    memcpy@src	PTR const void  size(2) Largest target is 160
		 -> Number(CODE[160]), 

    memcpy@s	PTR unsigned char  size(2) Largest target is 160
		 -> Number(CODE[160]), 

    memcpy@dest	PTR void  size(2) Largest target is 16
		 -> show_score@tmpObjectData(BANK2[16]), 

    memcpy@d	PTR unsigned char  size(2) Largest target is 16
		 -> show_score@tmpObjectData(BANK2[16]), 

    checkForLines@pObject	PTR volatile unsigned short  size(2) Largest target is 16
		 -> BackgroundData(BANK0[16]), 

    checkForBottom@pObject	PTR volatile unsigned short  size(2) Largest target is 16
		 -> ObjectData(BANK0[16]), 

    selectNextObject@pTarget	PTR volatile unsigned short  size(2) Largest target is 16
		 -> ObjectData(BANK0[16]), 

    selectNextObject@s	PTR struct shape size(2) Largest target is 133
		 -> shapes(BANK2[133]), 

    sp__memcpyvol	PTR volatile void  size(2) Largest target is 16
		 -> tmpObjectData(BANK0[16]), ObjectData(BANK0[16]), 

    newRotation@pSource	PTR volatile unsigned short  size(2) Largest target is 16
		 -> ObjectData(BANK0[16]), 

    newRotation@pTarget	PTR unsigned short  size(2) Largest target is 16
		 -> tmpObjectData(BANK0[16]), 

    moveObject@pObject	PTR volatile unsigned short  size(2) Largest target is 16
		 -> show_score@tmpObjectData(BANK2[16]), tmpObjectData(BANK0[16]), ObjectData(BANK0[16]), 

    moveObjectDown@pObject	PTR volatile unsigned short  size(2) Largest target is 16
		 -> ObjectData(BANK0[16]), 


Critical Paths under _main in COMRAM

    _tetris_screen->_set_screen
    _snake_screen->_memcpyvol
    _mainGameLoop->_tetris_main
    _tetris_main->_checkForLines
    _tetris_button_up->_newRotation
    _newRotation->_memcpyvol
    _tetris_button_right->_collisionDetect
    _tetris_button_left->_collisionDetect
    _tetris_button_down->_moveObjectDown
    _moveObjectDown->_selectNextObject
    _selectNextObject->_memcpyvol
    _checkForLines->_removeLine
    _snake_main->_MoveSnakes
    _writeHighScore->_WriteEEByte
    _show_score->_itoa
    _itoa->_reverse
    _reverse->_swap
    _getNumber->_memcpy
    _readHighScore->_WriteEEByte
    _MoveSnakes->_SnakeGraph
    _SnakeGraph->_set_screen
    _CreateBerry->_genBerry
    _genBerry->_rnd_get_num
    _initialise_globals->_clearArray
    _choosescreen->_set_screen
    _set_screen->_clearArray

Critical Paths under _isr in COMRAM

    _Interrupt->___lwmod
    _checkButtons->_debounceButton
    ___lwmod->i2_get_mS

Critical Paths under _main in BANK0

    None.

Critical Paths under _isr in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _isr in BANK1

    None.

Critical Paths under _main in BANK2

    _tetris_main->_show_score
    _snake_main->_show_score

Critical Paths under _isr in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _isr in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _isr in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _isr in BANK5

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0  116087
                       _choosescreen
                             _get_mS
                 _initialise_globals
                _initialise_hardware
                  _initialise_screen
                       _mainGameLoop
                     _rnd_initialize
                      _splash_screen
                       _start_button
 ---------------------------------------------------------------------------------
 (1) _start_button                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _splash_screen                                        0     0      0    4031
                       _snake_screen
                      _tetris_screen
                             _waitms
 ---------------------------------------------------------------------------------
 (2) _waitms                                               2     0      2      98
                                             11 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (2) _tetris_screen                                        0     0      0    2901
                         _set_screen
 ---------------------------------------------------------------------------------
 (2) _snake_screen                                         0     0      0    1032
                          _memcpyvol
 ---------------------------------------------------------------------------------
 (1) _rnd_initialize                                       1     1      0      15
                                             11 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _mainGameLoop                                         0     0      0  102775
                         _clearArray
                 _initialise_globals
                  _pauseMultiplexing
                 _resumeMultiplexing
                         _snake_main
                        _tetris_main
 ---------------------------------------------------------------------------------
 (2) _tetris_main                                          5     5      0   74946
                                             46 COMRAM     5     5      0
                      _checkForLines
                  _initialise_tetris
                       _mergeObjects
                     _moveObjectDown
                      _readHighScore
                   _selectNextObject
                         _set_screen
                         _show_score
                     _tetris_buttons
                     _writeHighScore
 ---------------------------------------------------------------------------------
 (3) _tetris_buttons                                       1     1      0   35953
                                             39 COMRAM     1     1      0
                          _checkDown
                          _checkLeft
                         _checkRight
                            _checkUp
                 _tetris_button_down
                 _tetris_button_left
                _tetris_button_right
                   _tetris_button_up
 ---------------------------------------------------------------------------------
 (4) _tetris_button_up                                     1     1      0    9237
                                             37 COMRAM     1     1      0
                    _collisionDetect
                       _mergeObjects
                        _newRotation
                  _pauseMultiplexing
                         _pixelCount
                 _resumeMultiplexing
 ---------------------------------------------------------------------------------
 (5) _pixelCount                                          12    10      2     334
                                             11 COMRAM    12    10      2
 ---------------------------------------------------------------------------------
 (5) _newRotation                                         16    11      5    4432
                                             21 COMRAM    16    11      5
                             ___wmul
                         _clearArray
                          _memcpyvol
 ---------------------------------------------------------------------------------
 (6) ___wmul                                               6     2      4     311
                                             11 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (4) _tetris_button_right                                  0     0      0    7198
                  _checkForRightWall
                    _collisionDetect
                       _mergeObjects
                         _moveObject
                  _pauseMultiplexing
                 _resumeMultiplexing
 ---------------------------------------------------------------------------------
 (5) _checkForRightWall                                    4     2      2      98
                                             11 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (4) _tetris_button_left                                   0     0      0    8230
                   _checkForLeftWall
                    _collisionDetect
                          _memcpyvol
                       _mergeObjects
                         _moveObject
                  _pauseMultiplexing
                 _resumeMultiplexing
 ---------------------------------------------------------------------------------
 (5) _checkForLeftWall                                     4     2      2      98
                                             11 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (4) _tetris_button_down                                   0     0      0   11145
                     _moveObjectDown
 ---------------------------------------------------------------------------------
 (5) _moveObjectDown                                       3     1      2   11145
                                             36 COMRAM     3     1      2
                     _checkForBottom
                    _collisionDetect
                       _mergeObjects
                         _moveObject
                   _selectNextObject
                             _set_mS
 ---------------------------------------------------------------------------------
 (6) _selectNextObject                                    16    14      2    3080
                                             21 COMRAM    15    13      2
                            ___awmod
                          _memcpyvol
                        _rnd_get_num
                             _set_mS
 ---------------------------------------------------------------------------------
 (3) _memcpyvol                                           10     4      6    1032
                                             11 COMRAM    10     4      6
 ---------------------------------------------------------------------------------
 (5) _collisionDetect                                     13     9      4     894
                                             11 COMRAM    13     9      4
 ---------------------------------------------------------------------------------
 (6) _checkForBottom                                       7     5      2     166
                                             11 COMRAM     7     5      2
 ---------------------------------------------------------------------------------
 (4) _checkRight                                           1     1      0      22
                                             11 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (4) _checkLeft                                            1     1      0      22
                                             11 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (3) _initialise_tetris                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _checkForLines                                       12    10      2     879
                                             34 COMRAM    12    10      2
                         _removeLine
 ---------------------------------------------------------------------------------
 (4) _removeLine                                          23    20      3     577
                                             11 COMRAM    23    20      3
 ---------------------------------------------------------------------------------
 (2) _snake_main                                           1     1      0   23309
                                             40 COMRAM     1     1      0
                         _MoveSnakes
                      _readHighScore
                         _show_score
                     _writeHighScore
 ---------------------------------------------------------------------------------
 (3) _writeHighScore                                       3     1      2     726
                                             13 COMRAM     3     1      2
                        _WriteEEByte
 ---------------------------------------------------------------------------------
 (3) _show_score                                          55    55      0   15948
                                              0 BANK2     55    55      0
                          _checkDown
                         _clearArray
                          _getNumber
                               _itoa
                       _mergeObjects
                         _moveObject
                       _pauseButtons
                  _pauseMultiplexing
                      _resumeButtons
                 _resumeMultiplexing
                         _set_screen
 ---------------------------------------------------------------------------------
 (4) _resumeButtons                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (4) _pauseButtons                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (5) _moveObject                                          12     8      4    2629
                                             11 COMRAM    12     8      4
 ---------------------------------------------------------------------------------
 (4) _itoa                                                13     7      6    3288
                                             25 COMRAM    13     7      6
                            ___awdiv
                            ___awmod
                            _reverse
 ---------------------------------------------------------------------------------
 (5) _reverse                                              9     5      4     747
                                             16 COMRAM     9     5      4
                               _swap
 ---------------------------------------------------------------------------------
 (6) _swap                                                 5     1      4     338
                                             11 COMRAM     5     1      4
 ---------------------------------------------------------------------------------
 (7) ___awmod                                              6     2      4     793
                                             11 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (5) ___awdiv                                              8     4      4     625
                                             11 COMRAM     8     4      4
 ---------------------------------------------------------------------------------
 (4) _getNumber                                            3     1      2     596
                                             21 COMRAM     3     1      2
                             _memcpy
 ---------------------------------------------------------------------------------
 (5) _memcpy                                              10     4      6     444
                                             11 COMRAM    10     4      6
 ---------------------------------------------------------------------------------
 (3) _readHighScore                                        2     2      0     425
                                             13 COMRAM     2     2      0
                         _ReadEEByte
                        _WriteEEByte
 ---------------------------------------------------------------------------------
 (4) _WriteEEByte                                          2     1      1     242
                                             11 COMRAM     2     1      1
                   _waitForInterrupt
 ---------------------------------------------------------------------------------
 (4) _ReadEEByte                                           1     1      0      22
                                             11 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (3) _MoveSnakes                                           5     5      0    6145
                                             35 COMRAM     5     5      0
                        _CreateBerry
                         _SnakeGraph
 ---------------------------------------------------------------------------------
 (4) _SnakeGraph                                           7     7      0    5466
                                             28 COMRAM     7     7      0
                         _clearArray
                         _set_screen
 ---------------------------------------------------------------------------------
 (4) _CreateBerry                                          3     3      0     419
                                             19 COMRAM     3     3      0
                           _genBerry
 ---------------------------------------------------------------------------------
 (5) _genBerry                                             2     2      0     326
                                             17 COMRAM     2     2      0
                            ___lbmod
                        _rnd_get_num
 ---------------------------------------------------------------------------------
 (7) _rnd_get_num                                          6     6      0      23
                                             11 COMRAM     6     6      0
 ---------------------------------------------------------------------------------
 (6) ___lbmod                                              4     3      1     235
                                             11 COMRAM     4     3      1
 ---------------------------------------------------------------------------------
 (2) _initialise_globals                                   0     0      0    2410
                         _clearArray
                             _set_mS
 ---------------------------------------------------------------------------------
 (6) _set_mS                                               2     0      2     300
                                             11 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (1) _initialise_screen                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _initialise_hardware                                  0     0      0       0
                    _initialise_TMR0
 ---------------------------------------------------------------------------------
 (2) _initialise_TMR0                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _get_mS                                               2     0      2       0
                                             11 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (1) _choosescreen                                        19    19      0    6856
                                             28 COMRAM    19    19      0
                          _checkDown
                            _checkUp
                       _mergeObjects
                  _pauseMultiplexing
                 _resumeMultiplexing
                         _set_screen
 ---------------------------------------------------------------------------------
 (3) _set_screen                                          10     8      2    2901
                                             18 COMRAM    10     8      2
                         _clearArray
                  _pauseMultiplexing
                 _resumeMultiplexing
 ---------------------------------------------------------------------------------
 (4) _resumeMultiplexing                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (4) _pauseMultiplexing                                    0     0      0       0
                   _waitForInterrupt
 ---------------------------------------------------------------------------------
 (5) _waitForInterrupt                                     0     0      0       0
 ---------------------------------------------------------------------------------
 (4) _clearArray                                           7     3      4    2110
                                             11 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (5) _mergeObjects                                        12     7      5    3577
                                             11 COMRAM    12     7      5
 ---------------------------------------------------------------------------------
 (4) _checkUp                                              1     1      0      22
                                             11 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (4) _checkDown                                            1     1      0      31
                                             11 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 7
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (8) _isr                                                  4     4      0    1417
                                              7 COMRAM     4     4      0
                          _Interrupt
 ---------------------------------------------------------------------------------
 (9) _Interrupt                                            0     0      0    1417
                            ___lwmod
                             _add_mS
                       _checkButtons
                      _screen_update
                        _snake_timer
                       _tetris_timer
                           i2_get_mS
                           i2_set_mS
 ---------------------------------------------------------------------------------
 (10) i2_set_mS                                            2     0      2      48
                                              0 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (10) i2_get_mS                                            2     0      2       0
                                              0 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (10) _tetris_timer                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (10) _snake_timer                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (10) _screen_update                                       5     5      0      46
                                              0 COMRAM     5     5      0
 ---------------------------------------------------------------------------------
 (10) _checkButtons                                        0     0      0     762
                     _debounceButton
 ---------------------------------------------------------------------------------
 (11) _debounceButton                                      7     3      4     762
                                              0 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (10) _add_mS                                              2     0      2      98
                                              0 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (10) ___lwmod                                             5     1      4     463
                                              2 COMRAM     5     1      4
                           i2_get_mS (ARG)
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 11
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _choosescreen
     _checkDown
     _checkUp
     _mergeObjects
     _pauseMultiplexing
       _waitForInterrupt
     _resumeMultiplexing
     _set_screen
       _clearArray
       _pauseMultiplexing
         _waitForInterrupt
       _resumeMultiplexing
   _get_mS
   _initialise_globals
     _clearArray
     _set_mS
   _initialise_hardware
     _initialise_TMR0
   _initialise_screen
   _mainGameLoop
     _clearArray
     _initialise_globals
       _clearArray
       _set_mS
     _pauseMultiplexing
       _waitForInterrupt
     _resumeMultiplexing
     _snake_main
       _MoveSnakes
         _CreateBerry
           _genBerry
             ___lbmod
             _rnd_get_num
         _SnakeGraph
           _clearArray
           _set_screen
             _clearArray
             _pauseMultiplexing
               _waitForInterrupt
             _resumeMultiplexing
       _readHighScore
         _ReadEEByte
         _WriteEEByte
           _waitForInterrupt
       _show_score
         _checkDown
         _clearArray
         _getNumber
           _memcpy
         _itoa
           ___awdiv
           ___awmod
           _reverse
             _swap
         _mergeObjects
         _moveObject
         _pauseButtons
         _pauseMultiplexing
           _waitForInterrupt
         _resumeButtons
         _resumeMultiplexing
         _set_screen
           _clearArray
           _pauseMultiplexing
             _waitForInterrupt
           _resumeMultiplexing
       _writeHighScore
         _WriteEEByte
           _waitForInterrupt
     _tetris_main
       _checkForLines
         _removeLine
       _initialise_tetris
       _mergeObjects
       _moveObjectDown
         _checkForBottom
         _collisionDetect
         _mergeObjects
         _moveObject
         _selectNextObject
           ___awmod
           _memcpyvol
           _rnd_get_num
           _set_mS
         _set_mS
       _readHighScore
         _ReadEEByte
         _WriteEEByte
           _waitForInterrupt
       _selectNextObject
         ___awmod
         _memcpyvol
         _rnd_get_num
         _set_mS
       _set_screen
         _clearArray
         _pauseMultiplexing
           _waitForInterrupt
         _resumeMultiplexing
       _show_score
         _checkDown
         _clearArray
         _getNumber
           _memcpy
         _itoa
           ___awdiv
           ___awmod
           _reverse
             _swap
         _mergeObjects
         _moveObject
         _pauseButtons
         _pauseMultiplexing
           _waitForInterrupt
         _resumeButtons
         _resumeMultiplexing
         _set_screen
           _clearArray
           _pauseMultiplexing
             _waitForInterrupt
           _resumeMultiplexing
       _tetris_buttons
         _checkDown
         _checkLeft
         _checkRight
         _checkUp
         _tetris_button_down
           _moveObjectDown
             _checkForBottom
             _collisionDetect
             _mergeObjects
             _moveObject
             _selectNextObject
               ___awmod
               _memcpyvol
               _rnd_get_num
               _set_mS
             _set_mS
         _tetris_button_left
           _checkForLeftWall
           _collisionDetect
           _memcpyvol
           _mergeObjects
           _moveObject
           _pauseMultiplexing
             _waitForInterrupt
           _resumeMultiplexing
         _tetris_button_right
           _checkForRightWall
           _collisionDetect
           _mergeObjects
           _moveObject
           _pauseMultiplexing
             _waitForInterrupt
           _resumeMultiplexing
         _tetris_button_up
           _collisionDetect
           _mergeObjects
           _newRotation
             ___wmul
             _clearArray
             _memcpyvol
           _pauseMultiplexing
             _waitForInterrupt
           _pixelCount
           _resumeMultiplexing
       _writeHighScore
         _WriteEEByte
           _waitForInterrupt
   _rnd_initialize
   _splash_screen
     _snake_screen
       _memcpyvol
     _tetris_screen
       _set_screen
         _clearArray
         _pauseMultiplexing
           _waitForInterrupt
         _resumeMultiplexing
     _waitms
   _start_button

 _isr (ROOT)
   _Interrupt
     ___lwmod
       i2_get_mS (ARG)
     _add_mS
     _checkButtons
       _debounceButton
     _screen_update
     _snake_timer
     _tetris_timer
     i2_get_mS
     i2_set_mS

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             5FF      0       0      17        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK5           100      0       0      16        0.0%
BANK5              100      0       0      14        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100     37      BC       9       73.4%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0     100       7      100.0%
BITBANK0            80      0       0       4        0.0%
BANK0               80      0      78       5       93.8%
BITCOMRAM           7E      0       0       0        0.0%
COMRAM              7E     33      4F       1       62.7%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     283      15        0.0%
DATA                 0      0     283       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V2.05 build -831301201 
Symbol Table                                                                                   Fri Mar 01 09:07:22 2019

        __end_of_checkButtons 19A8               WriteEEByte@data 000C         __size_of_start_button 002C  
         ?_tetris_button_left 0001           ?_tetris_button_down 0001          __size_of_WriteEEByte 0030  
        ?_tetris_button_right 0001              moveObject@cycles 000F             moveObject@pObject 000C  
               ?_mainGameLoop 0001                  ___awdiv@sign 0011                            _mS 0034  
              ??_choosescreen 001D           ___wmul@multiplicand 000E                   __CFG_BORV$3 000000  
               _splash_screen 22FA            WriteEEByte@address 000D          debounceButton@button 0007  
                __CFG_CP0$OFF 000000                  __CFG_CP1$OFF 000000                  __CFG_CP2$OFF 000000  
                __CFG_CP3$OFF 000000                 newRotation@x1 0024                 newRotation@x2 0022  
               newRotation@y1 0025                 newRotation@y2 0023                           l148 2020  
                         l149 2042                           l355 1376                           l276 0D14  
                         l356 139E                           l605 2186                           l359 13B4  
                         _GIE 007F97                  __CFG_CPB$OFF 000000                  __CFG_CPD$OFF 000000  
                         _PSA 007EAB                           _isr 0008                  ___awmod@sign 0011  
     __end_of_collisionDetect 1C40                           prod 000FF3                           wreg 000FE8  
              ?_tetris_screen 0001          ??_tetris_button_left 0019          ??_tetris_button_down 0028  
     __size_of_moveObjectDown 00D6                  __CFG_LVP$OFF 000000                  __CFG_WDT$OFF 000000  
                        l3225 20CA                          l3217 20B2                          l5101 135E  
                        l4311 2378                          l5015 08A6                          l5007 0892  
                        l3343 1B7A                          l5201 12B4                          l5025 08C0  
                        l4321 1AAA                          l5035 08DC                          l4331 1ACC  
                        l3195 1C34                          l4405 110A                          l5053 09AC  
                        l5045 08F2                          l4341 1AEE                          l4325 1AB6  
                        l4501 0768                          l3189 1BE0                          l3349 1B7E  
                        l4351 1F42                          l5223 1316                          l3623 1C5A  
                        l3631 1C90                          l5071 0A0A                          l5063 09CE  
                        l5047 091C                          l4503 0772                          l4431 0E36  
                        l5209 12C8                          l5217 12F6                          l5065 09D4  
                        l5073 0A0C                          l5049 0922                          l4345 1AFC  
                        l4337 1AE4                          l4329 1AC4                          l4505 0778  
                        l4521 07E0                          l5153 1EE4                          l4433 0E3A  
                        l5137 13FA                          l5241 20F4                          l4355 1F64  
                        l4531 07F4                          l4523 07EA                          l5147 1ED6  
                        l3571 2146                          l2923 1D3C                          l4443 0E8C  
                        l4419 0E0A                          l4603 14D6                          l4373 102C  
                        l3629 1C8E                          l4525 07F0                          l4509 077C  
                        l3493 0FFC                          l3477 0F28                          l3469 0F20  
                        l3485 0FF0                          l2917 1D0A                          l4613 0CF0  
                        l4391 10BC                          l4367 1028                          l4543 085C  
                        l3743 1830                          l4631 0D1C                          l4385 1072  
                        l5193 1284                          l5177 1240                          l4713 180C  
                        l4545 0866                          l3737 1828                          l3585 211E  
                        l4625 0D18                          l4379 106E                          l4475 06FE  
                        l4483 0728                          l4467 06F4                          l3755 189C  
                        l4813 21E6                          l4397 10C0                          l4821 0A34  
                        l4717 181A                          l4709 1802                          l4901 120E  
                        l4493 073C                          l4485 0732                          l4469 06FA  
                        l4637 0D7A                          l3599 21BE                          l4567 1506  
                        l4663 1E70                          l4487 0738                          l2983 1F7C  
                        l4647 0DE8                          l4657 1E52                          l4585 144E  
                        l4921 1CB8                          l4851 0B3A                          l4835 0ABE  
                        l4827 0AB2                          l4691 17C4                          l4675 1D8A  
                        l4587 1454                          l3955 22EE                          l4685 17B4  
                        l4669 1D64                          l2989 1FA4                          l4933 1CE0  
                        l4839 0B1A                          l4951 2196                          l4871 1164  
                        l4927 1CCC                          l4697 17DA                          l4961 0BC6  
                        l4699 17E2                          l4939 1CF4                          ?_isr 0001  
                        l4885 11B0                          l4893 11EC                          l4973 0C32  
                        l4879 1180                          l4983 0C5E                          l4997 0CB4  
                        _DDRA 000F92                          _DDRB 000F93                          _DDRC 000F94  
                        _DDRD 000F95                          _T0CS 007EAD                          u3024 1866  
                        u3025 1860                          u2410 2286                          u4020 1552  
                        u4030 1580                          u2434 1BB4                          u4027 1542  
                        u2435 1BAE                          u1910 1D32                          u2390 229E  
                        u4240 17E6                          u2800 2116                          _IPEN 007E87  
                        u2810 2118                          u4164 0DBA                   _upper_8bits 008C  
                        u1917 1D28                          u4165 0DB4                          u4430 21DE  
                        u2830 21B6                          u2574 0F5A                          u4094 0D52  
                        u2575 0F54                          u4095 0D4C                          u4440 21E0  
                        u2840 21B8                          u4520 11AC                          u2584 0F70  
                        u2585 0F6A                          u3810 1AD0                          u2594 0FAA  
                        u2770 213E                          u2595 0FA4                          u4620 0C4A  
                        u2780 2140                          u4380 1608                          u4630 0C6A  
                        u4390 160A                          u1895 1A72                          u3930 0E9A  
                        u4651 0C80                          u4820 1380                          u4910 1258  
                        u4830 1382                          u4930 1270                          i2l90 1FD4  
                        u4970 12F6                          _TMR0 000FD6       show_score@tmpObjectData 02A5  
             ?_checkForBottom 000C                  _start_button 207C                          _game 0041  
         __end_of_CreateBerry 1CA0                          _main 20D2                          _itoa 112E  
                        _time 0088                          fsr0h 000FEA                          fsr1h 000FE2  
                        indf0 000FEF                          fsr2h 000FDA                          fsr0l 000FE9  
                        indf1 000FE7                          indf2 000FDF                          fsr1l 000FE1  
                        fsr2l 000FD9                          _swap 204E                          btemp 0050  
            ??_writeHighScore 0010           rnd_initialize@input 000C                          prodh 000FF4  
                        prodl 000FF3                          start 000E                 __CFG_IESO$OFF 000000  
             ?_tetris_buttons 0001           moveObject@direction 000E                 __CFG_MCLRE$ON 000000  
                ___param_bank 000000         ??_tetris_button_right 0019       writeHighScore@highscore 000E  
              ??_mainGameLoop 0034                         ??_isr 0008   __size_of_initialise_globals 0036  
              ?_splash_screen 0001                         ?_main 0001             ??_initialise_TMR0 000C  
                       ?_itoa 001A               __end_of___awdiv 1824                         _EEADR 000FA9  
             __end_of___awmod 1B06               __end_of___lbmod 20D2                         ?_swap 000C  
             ___awdiv@divisor 000E               __end_of___lwmod 1EC4                         i2l339 2354  
                       i2l472 2362                         i2l687 1B70               ___awdiv@counter 0010  
     debounceButton@debounced 0003                         _SNAKE 06D1                         _PORTA 000F80  
                       _PORTB 000F81                         _PORTC 000F82                         _PORTD 000F83  
             __end_of_checkUp 21C2                 __CFG_PWRT$OFF 000000                 __CFG_WRT0$OFF 000000  
               __CFG_WRT1$OFF 000000                 __CFG_WRT2$OFF 000000                 __CFG_WRT3$OFF 000000  
              __CFG_EBTR0$OFF 000000                __CFG_FCMEN$OFF 000000                __CFG_EBTR1$OFF 000000  
              __CFG_EBTR2$OFF 000000                __CFG_EBTR3$OFF 000000                 __CFG_WRTB$OFF 000000  
               __CFG_WRTC$OFF 000000                 __CFG_WRTD$OFF 000000                __CFG_EBTRB$OFF 000000  
                       __lfsr 0036                  ?_newRotation 0016                         itoa@i 0025  
                  _Left_Delay 00E6                         tablat 000FF5               __end_of_reverse 1DA0  
                  _DropObject 0044                    _Down_Delay 00E0                         plusw1 000FE3  
                       plusw2 000FDB                         swap@a 000C                         swap@b 000E  
                       swap@t 0010                         ttemp5 0051                         ttemp6 0054  
                       ttemp7 0058                    _ReadEEByte 231C                         status 000FD8  
            __end_ofi2_get_mS 23B2                         wtemp8 0051              __end_ofi2_set_mS 23A8  
                  _ObjectData 00D0        __size_of_readHighScore 0028               __initialization 19A8  
          _resumeMultiplexing 23C4                  __end_of_main 20FA                  __end_of_itoa 1234  
                __end_of_swap 207C      __end_of_selectNextObject 0F1A  __size_of_initialise_hardware 003C  
         ?_resumeMultiplexing 0001                        ??_main 0034                        ??_itoa 0020  
                      ??_swap 0010                 __activetblptr 000002               ??_tetris_screen 001D  
            ?_collisionDetect 000C                 ?_mergeObjects 000C                   _CreateBerry 1C40  
       selectNextObject@check 0019                        _EEDATA 000FA8                        _EECON2 000FA7  
            ___awdiv@dividend 000C                _debounceButton 1B06                        i2l1293 1EBA  
                      i2l4073 1EB0                        i2l4065 1E90                        i2l4067 1E98  
                      i2l4089 18D6                        i2l3943 1B54                        i2l3939 1B2E  
        ??_resumeMultiplexing 000C                    _ScreenData 0090          __end_of_choosescreen 1330  
                      _TMR0IE 007F95                        _TMR0ON 007EAF                        _TETRIS 06E1  
                  _MoveSnakes 0890                  ?_rnd_get_num 0001         __size_of_checkButtons 0080  
        checkForLines@pObject 0023              __end_of_genBerry 22BA                    _SnakeGraph 0A1A  
       __end_of_screen_update 1DF2                __CFG_XINST$OFF 000000                        _Number 0621  
          __size_of_Interrupt 0082                    _SnakeYtext 0601               ??_splash_screen 001D  
                      _add_mS 2366             ?_checkForLeftWall 000C                        ___wmul 21EA  
                   ??___awdiv 0010                __CFG_STVREN$ON 000000                     ??___awmod 0010  
                   ??___lbmod 000D                        _berryX 003E                        _berryY 003D  
                      _get_mS 2394                     ??___lwmod 0007                  ?_snake_timer 0001  
          ??_checkForLeftWall 000E                        _memcpy 1E40                     ??_checkUp 000C  
                      clear_0 19F0                        clear_1 1A02                        clear_2 1A0E  
            ___awdiv@quotient 0012               ___awmod@divisor 000E                        _shapes 0200  
                      _set_mS 238A                        _waitms 22E6               ___awmod@counter 0010  
              _BackgroundData 00C0                        _tetris 008E             ?_waitForInterrupt 0001  
     __size_of_rnd_initialize 000A            ??_waitForInterrupt 000C                show_score@mask 0285  
                __mediumconst 0000                 _readHighScore 2172                ??_mergeObjects 0011  
                      preinc2 000FDC                _moveObjectDown 1410                        tblptrh 000FF7  
                      tblptrl 000FF6                        tblptru 000FF8                     ??_reverse 0015  
      __end_of_debounceButton 1B72                  _checkButtons 1928              getNumber@pTarget 0016  
     snake_main@LastHighScore 0029          __end_of_mainGameLoop 1E40               ___lbmod@divisor 000C  
                  __accesstop 0080       __end_of__initialization 1A14             ?_tetris_button_up 0001  
             ___lbmod@counter 000E                   ?_ReadEEByte 0001               __CFG_PBADEN$OFF 000000  
        writeHighScore@adress 0010                  ?_tetris_main 0001                 ___rparam_used 000001  
          ??_tetris_button_up 0026                 __end_of_SNAKE 06E1          writeHighScore@scored 000F  
                add_mS@amount 0001             _pauseMultiplexing 232C                __pcstackCOMRAM 0001  
                __pidataBANK0 230C                  __pidataBANK2 1696            __size_of_checkLeft 0028  
          __size_of_checkDown 0028            ?_pauseMultiplexing 0001                 ?_pauseButtons 0001  
         ??_pauseMultiplexing 000C        __end_of_moveObjectDown 14E6                     ?i2_get_mS 0001  
              ?_readHighScore 0001            __size_of_getNumber 0028                     ?i2_set_mS 0001  
             ?_debounceButton 0001             __end_of_Interrupt 1928              ??_checkForBottom 000E  
        moveObjectDown@result 0027                   MoveSnakes@i 0028                    _checkRight 20FA  
          screen_update@xmask 0005            screen_update@ymask 0003                    __pbssBANK0 0080  
                  __pbssBANK1 0100              ??_tetris_buttons 0028                   ?_MoveSnakes 0001  
        __size_of_newRotation 0130     __end_of_pauseMultiplexing 233C            __size_of_memcpyvol 0056  
               ??_WriteEEByte 000D                    _clearArray 1F3C                   ?_SnakeGraph 0001  
             _initialise_TMR0 2250         __end_of_resumeButtons 23B8                       ?_add_mS 0001  
                     ?___wmul 000C                       ?_get_mS 000C                ??_pauseButtons 000C  
                     ?_memcpy 000C                   SnakeGraph@i 0023                   SnakeGraph@j 0022  
                     ?_set_mS 000C                       ?_waitms 000C             _initialise_screen 23BE  
       __end_of_choose_screen 06D1             _initialise_tetris 2210           __size_of_ReadEEByte 0010  
             ?_moveObjectDown 0025  selectNextObject@rndSelection 0023            ?_initialise_screen 0001  
                  ??i2_get_mS 0003            ?_initialise_tetris 0001           newRotation@rotation 001A  
                   ?_genBerry 0001        __size_of_checkForLines 0082                    ??i2_set_mS 0003  
                 _Right_Delay 00E4                   _Screen_Data 00A0   __size_of_tetris_button_left 0088  
 __size_of_tetris_button_down 0016         __size_of_choosescreen 00FC              _CheckForNewLines 0046  
           __end_of_checkLeft 214A             __end_of_checkDown 21EA                   moveObject@c 0016  
                 moveObject@i 0017           ??_initialise_screen 000C           ??_initialise_tetris 000C  
         _initialise_hardware 1F00   __end_of_tetris_button_right 17A0                checkForLines@x 002D  
              checkForLines@y 002E         screen_update@CurrentX 004B                       __Hparam 0000  
        __size_of_rnd_get_num 0074             __end_of_getNumber 2172                       __Lparam 0000  
              checkLeft@reset 000C                       _OriginX 0043                       _OriginY 0042  
  __end_of_initialise_globals 201E          __end_of_mergeObjects 112E                checkDown@reset 000C  
             __size_of_add_mS 000E                       ___awdiv 17A0                       ___awmod 1A96  
                     ___lbmod 20A8               __size_of___wmul 0026             removeLine@pObject 000C  
   __end_of_initialise_screen 23C4                       ___lwmod 1E82             ?_selectNextObject 0016  
                __psmallconst 0600           __end_of_WriteEEByte 204E               __size_of_get_mS 000A  
   __end_of_initialise_tetris 2232                   removeLine@x 0022                   removeLine@y 0021  
                     _checkUp 219A                       __pcinit 19A8          ?_initialise_hardware 0001  
             __size_of_memcpy 0042                       __ramtop 0600                _rnd_initialize 2380  
             __size_of_set_mS 000A                       __ptext0 20D2            ??_selectNextObject 0018  
                     __ptext1 207C                       __ptext2 22FA                       __ptext3 22E6  
                     __ptext4 233C                       __ptext5 2232                       __ptext6 2380  
                     __ptext7 1DF2                       __ptext8 1330                       __ptext9 1CA0  
                _choosescreen 1234               __size_of_waitms 0014               ??_readHighScore 000E  
                   _T0CONbits 000FD5          __size_of_snake_timer 000E                 ?_snake_screen 0001  
         __size_of_MoveSnakes 018A                       _counter 008B                  __size_of_isr 1FE0  
           __end_of_memcpyvol 1D4E              ___awmod@dividend 000C                   pixelCount@r 0015  
                 pixelCount@x 0016                   pixelCount@y 0017                    ??_genBerry 0012  
       __size_of_mainGameLoop 004E           __size_of_SnakeGraph 015E                       _reverse 1D4E  
                ?_CreateBerry 0001               show_score@F2762 00E8             _checkForRightWall 226E  
         mergeObjects@pTarget 000E                __pintcode_body 1FB0           mergeObjects@pSource 000C  
                 ?_checkRight 0001          end_of_initialization 1A14            ?_checkForRightWall 000C  
     __end_of_initialise_TMR0 226E                  memcpyvol@src 000E                   set_screen@i 001B  
                     memcpy@d 0012                       memcpy@n 0010                       memcpy@s 0014  
                     itoa@bas 001E                       itoa@rem 0023                    _moveObject 06F2  
               __Lmediumconst 0000                       itoa@str 001C                       int_func 1FB0  
  __size_of_pauseMultiplexing 0010                   ?_clearArray 000C           ??_checkForRightWall 000E  
             show_score@score 02B5                    _removeLine 0F1A             pixelCount@pSource 000C  
               _checkForLines 1824                    _pixelCount 1B72          __size_of_tetris_main 00E0  
                  _mtxButtons 003A                       waitms@t 000C                    _set_screen 14E6  
                     postdec1 000FE5                       postdec2 000FDD                    _snake_main 1EC4  
                     postinc0 000FEE                       postinc1 000FE6                       postinc2 000FDE  
    tetris_buttons@returnbool 0028        __end_of_rnd_initialize 238A         ??_initialise_hardware 000C  
     __size_of_writeHighScore 0016                  _mainGameLoop 1DF2                     _PORTBbits 000F81  
              ??_snake_screen 0016                    _show_score 0B78      tetris_main@LastHighScore 0032  
   __end_of_checkForRightWall 228A              ___lbmod@dividend 000D         __end_of_tetris_screen 234A  
               _randomobjects 0080     __size_of_checkForLeftWall 0018           debounceButton@delay 0001  
        __end_of_pauseButtons 23BE                   ___lbmod@rem 000F      __size_of_collisionDetect 0064  
 __size_of_resumeMultiplexing 0006     __size_of_waitForInterrupt 000C                 ?_tetris_timer 0001  
                ??_ReadEEByte 000C                __end_of_TETRIS 06F1         CreateBerry@randomGood 0015  
                   _EndOfGame 004A                ?_checkForLines 0023                   show_score@i 02BB  
                 _WriteEEByte 201E       show_score@currentNumber 02B6                __end_of_Number 06C1  
  __size_of_initialise_screen 0006                __end_of_add_mS 2374               ?_rnd_initialize 0001  
       __end_of_splash_screen 230C    __size_of_initialise_tetris 0022                __end_of___wmul 2210  
   __size_of_tetris_button_up 0088           __size_of_checkRight 0028                __end_of_get_mS 239E  
              __end_of_memcpy 1E82              ??_debounceButton 0005              mergeObjects@mode 0010  
              __end_of_set_mS 2394                __end_of_waitms 22FA                     _IsRotated 0047  
          __end_of_ReadEEByte 232C           start_initialization 19A8           __size_of_clearArray 003C  
      __size_of_screen_update 0052                   __end_of_isr 1FE8             __size_ofi2_get_mS 000A  
           __size_ofi2_set_mS 000A              choosescreen@mask 001D                ??_tetris_timer 0001  
                   _Interrupt 18A6              ?_initialise_TMR0 0001                 ?_start_button 0001  
                ??_MoveSnakes 0024                   ?_moveObject 000C          selectNextObject@fill 0020  
       __size_of_mergeObjects 0108         moveObjectDown@pObject 0025              __CFG_OSC$INTIO67 000000  
                ??_SnakeGraph 001D                   ?_removeLine 000C                    memcpy@dest 000C  
                 ?_pixelCount 000C                   ?_set_screen 0013           checkForLines@pixels 002C  
                    ??_add_mS 0003                   ?_snake_main 0001                      ??___wmul 0010  
                    ??_get_mS 000E              ??_moveObjectDown 0027                   __pdataBANK0 00E8  
                 __pdataBANK2 0200                    memcpyvol@d 0012                    memcpyvol@n 0010  
                  memcpyvol@s 0014              __CFG_LPT1OSC$OFF 000000                      ??_memcpy 0012  
                checkUp@reset 000C               getNumber@pDigit 0018                      ??_set_mS 000E  
                    ??_waitms 000E        collisionDetect@pTarget 000E                   ?_show_score 0001  
      collisionDetect@pSource 000C            __end_of_MoveSnakes 0A1A    __size_of_checkForRightWall 001C  
                 __pbssCOMRAM 0034                 __pcstackBANK2 0285                 _NumberOfLines 0048  
          __end_of_SnakeGraph 0B78                  _mergeObjects 1026             __size_of_genBerry 0018  
               ??_newRotation 001B            __end_of_SnakeYtext 0621          __size_of_CreateBerry 0060  
              ??_start_button 000C                    ?_Interrupt 0001               ??_checkForLines 0025  
                   _checkLeft 2122                     _checkDown 21C2          __end_of_snake_screen 2250  
          newRotation@pTarget 0018            newRotation@pSource 0016             __CFG_CCP2MX$PORTC 000000  
               _screen_update 1DA0             ??_collisionDetect 0010                     __pintcode 0008  
                    ?___awdiv 000C                      ?___awmod 000C                      ?___lbmod 000C  
                   _getNumber 214A                      ?___lwmod 0003                _writeHighScore 22D0  
                   _direction 008A                      ?_checkUp 0001             set_screen@newData 0013  
         __size_of_moveObject 019E                   __smallconst 0600    __end_of_tetris_button_left 1696  
  __end_of_tetris_button_down 22D0            _initialise_globals 1FE8       selectNextObject@pTarget 0016  
         __size_of_removeLine 010C         __size_of_pauseButtons 0006                      ?_reverse 0011  
            _checkForLeftWall 228A       selectNextObject@counter 0024           __size_of_pixelCount 006A  
                   _memcpyvol 1CF8     __size_of_selectNextObject 0120           __size_of_set_screen 00A0  
      __size_of_resumeButtons 0006                  ??_checkRight 000C           __size_of_snake_main 003C  
         ?_initialise_globals 0001                  genBerry@temp 0013                  genBerry@size 0012  
            _waitForInterrupt 2374                 ??_rnd_get_num 000C                ___wmul@product 0010  
                  ?_checkLeft 0001                    ?_checkDown 0001                  ??_clearArray 0010  
         __end_of_newRotation 0DFA                    reverse@end 0018       __size_of_checkForBottom 0038  
         __size_of_show_score 0152                     _moveSnake 0040                    reverse@str 0011  
              ?_screen_update 0001                      i2u350_40 1964                      i2u350_46 1966  
                    i2u351_40 1982                      i2u351_46 1984                      i2u352_40 19A0  
                    i2u352_46 19A2                      i2u354_44 1DB6                      i2u354_45 1DB2  
                    i2u356_40 1E9C                      i2u349_40 1946                      i2u349_46 1948  
      __end_of_writeHighScore 22E6              __CFG_WDTPS$32768 000000       __size_of_tetris_buttons 0058  
        tetris_main@newScreen 0033  __size_of_tetris_button_right 0084          ??_initialise_globals 0013  
                  ?_getNumber 0016                 ??_snake_timer 0001              _tetris_button_up 1586  
                _pauseButtons 23B8                     _positions 0100          __end_of_tetris_timer 2358  
          __end_of_checkRight 2122                    _ADCON1bits 000FC1         removeLine@currentLine 0020  
           ___wmul@multiplier 000C                      i2_get_mS 23A8         __end_of_readHighScore 219A  
                    i2_set_mS 239E            __end_of_clearArray 1F78                 ?_checkButtons 0001  
           ReadEEByte@address 000C                    ?_memcpyvol 000C                   _INTCON2bits 000FF1  
                   copy_data0 19BC                     copy_data1 19DC               checkForBottom@i 0012  
                 ??_Interrupt 0008                itoa@isNegative 0022                  set_mS@amount 000C  
               ??_tetris_main 002F                   _countblocks 0045                    _EECON1bits 000FA6  
                ?_WriteEEByte 000C                      __Hrparam 0000              ??_rnd_initialize 000C  
 __end_of_initialise_hardware 1F3C                     memcpy@src 000E                      __Lrparam 0000  
          __CFG_BOREN$SBORDIS 000000               ?_writeHighScore 000E           __end_of_rnd_get_num 1A96  
              _Left_Debounced 004E              collisionDetect@i 0018                 _resumeButtons 23B2  
                   itoa@value 001A              __size_of___awdiv 0084      checkForRightWall@pObject 000C  
            __size_of___awmod 0070              __size_of___lbmod 002A                  CreateBerry@i 0016  
            __size_of___lwmod 0042          __end_of_start_button 20A8              __size_of_checkUp 0028  
               mergeObjects@i 0017                  rnd_get_num@b 0010                 _choose_screen 06C1  
                removeLine@pY 000E                 _tmpObjectData 00B0                 reverse@length 0013  
         __end_of_snake_timer 2366                      _genBerry 22A2                ??_checkButtons 0008  
              _EndOfGameSnake 003B                      __ptext10 1586                      __ptext11 1B72  
                    __ptext20 0DFA                      __ptext12 0CCA                      __ptext21 1CF8  
                    __ptext13 21EA                      __ptext30 22D0                      __ptext22 1BDC  
                    __ptext14 171C                      __ptext31 0B78                      __ptext23 1F78  
                    __ptext15 226E                      __ptext40 214A                      __ptext32 23B2  
                    __ptext24 20FA                      __ptext16 160E                      __ptext41 1E40  
                    __ptext33 23B8                      __ptext25 2122                      __ptext17 228A  
                    __ptext50 20A8                      __ptext42 2172                      __ptext34 06F2  
                    __ptext26 2210                      __ptext18 22BA                      __ptext51 1FE8  
                    __ptext43 201E                      __ptext35 112E                      __ptext27 1824  
                    __ptext19 1410                      __ptext60 232C                      __ptext52 238A  
                    __ptext44 231C                      __ptext36 1D4E                      __ptext28 0F1A  
                    __ptext61 2374                      __ptext53 23BE                      __ptext45 0890  
                    __ptext37 204E                      __ptext29 1EC4                      __ptext70 234A  
                    __ptext62 1F3C                      __ptext54 1F00                      __ptext46 0A1A  
                    __ptext38 1A96                      __ptext71 2358                      __ptext63 1026  
                    __ptext55 2250                      __ptext47 1C40                      __ptext39 17A0  
                    __ptext72 1DA0                      __ptext64 219A                      __ptext56 2394  
                    __ptext48 22A2                      __ptext73 1928                      __ptext65 21C2  
                    __ptext57 1234                      __ptext49 1A22                      __ptext74 1B06  
                    __ptext58 14E6                      __ptext75 2366                      __ptext67 18A6  
                    __ptext59 23C4                      __ptext76 1E82                      __ptext68 239E  
                    __ptext69 23A8              __size_of_reverse 0052    __end_of_resumeMultiplexing 23CA  
            _Rotate_Debounced 004F         __size_of_snake_screen 001E                      _itoa$757 0020  
                 _newRotation 0CCA            _previous_direction 003C               _LimitedRotation 0049  
                ??_moveObject 0010               _tetris_main$635 002F                 __size_of_main 0028  
                 ??_checkLeft 000C                   ??_checkDown 000C                 __size_of_itoa 0106  
               __size_of_swap 002E               ??_screen_update 0001                  ??_removeLine 000F  
                ??_pixelCount 000E                  ??_set_screen 0015                  ??_snake_main 0029  
              ?_resumeButtons 0001                _Down_Debounced 004C                   clearArray@i 0012  
      __size_of_tetris_screen 000E               _Right_Debounced 004D                      int$flags 0050  
         __end_of_tetris_main 1410                   ??_getNumber 0018                  ??_show_score 0027  
                _snake_screen 2232            __end_of_moveObject 0890                 memcpyvol@dest 000C  
                  _INTCONbits 000FF2              clearArray@pArray 000C            __end_of_removeLine 1026  
                 ??_memcpyvol 0012            __end_of_pixelCount 1BDC              _selectNextObject 0DFA  
        readHighScore@tmpbyte 000F            __end_of_set_screen 1586               _collisionDetect 1BDC  
                    intlevel2 0000            __end_of_snake_main 1F00                  _UpdateScreen 0039  
                 _lower_8bits 008D                  reverse@start 0016        __size_of_splash_screen 0012  
            ___lwmod@dividend 0003                   _rnd_get_num 1A22              show_score@number 02B7  
              _checkForBottom 1F78                  _Rotate_Delay 00E2                    _OSCCONbits 000FD3  
          __end_of_show_score 0CCA                   _snakeLength 003F      __end_of_checkForLeftWall 22A2  
    __size_of_initialise_TMR0 001E                _tetris_buttons 1CA0         __size_of_tetris_timer 000E  
         readHighScore@adress 000E               checkRight@reset 000C                   _snake_timer 2358  
               choosescreen@i 002E             selectNextObject@s 0021      __end_of_waitForInterrupt 2380  
               ?_choosescreen 0001        show_score@Numberscreen 0295               ___lwmod@divisor 0005  
             ___lwmod@counter 0007                 _LastHighScore 008F         checkForBottom@pObject 000C  
               ??_CreateBerry 0014                 _tetris_screen 233C           _tetris_button_right 171C  
     checkForLeftWall@pObject 000C             _InterruptComplete 0038                clearArray@size 000E  
     __size_of_debounceButton 006C                  _port_display 000F82      __end_of_tetris_button_up 160E  
      __end_of_checkForBottom 1FB0                  _tetris_timer 234A            _tetris_button_left 160E  
          _tetris_button_down 22BA                   _tetris_main 1330         __end_of_checkForLines 18A6  
      __end_of_tetris_buttons 1CF8               ??_resumeButtons 000C                i2set_mS@amount 0001  
