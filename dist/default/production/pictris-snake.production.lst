

Microchip MPLAB XC8 Assembler V2.05 build -831301201 
                                                                                               Sat Mar 09 00:47:58 2019

Microchip MPLAB XC8 C Compiler v2.05 (Free license) build 20181220022703 Og1 
     1                           	processor	18F4520
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	flic
     5                           	psect	idataBANK0,global,class=CODE,delta=1,noexec
     6                           	psect	idataBANK2,global,class=CODE,delta=1,noexec
     7                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1,noexec
     8                           	psect	nvCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     9                           	psect	cinit,global,reloc=2,class=CODE,delta=1
    10                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    11                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    12                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    13                           	psect	dataBANK2,global,class=BANK2,space=1,delta=1,lowdata,noexec
    14                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1,noexec
    15                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    16                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    17                           	psect	text0,global,reloc=2,class=CODE,delta=1
    18                           	psect	text1,global,reloc=2,class=CODE,delta=1
    19                           	psect	text2,global,reloc=2,class=CODE,delta=1
    20                           	psect	text3,global,reloc=2,class=CODE,delta=1
    21                           	psect	text4,global,reloc=2,class=CODE,delta=1
    22                           	psect	text5,global,reloc=2,class=CODE,delta=1
    23                           	psect	text6,global,reloc=2,class=CODE,delta=1
    24                           	psect	text7,global,reloc=2,class=CODE,delta=1,group=1
    25                           	psect	text8,global,reloc=2,class=CODE,delta=1
    26                           	psect	text9,global,reloc=2,class=CODE,delta=1
    27                           	psect	text10,global,reloc=2,class=CODE,delta=1
    28                           	psect	text11,global,reloc=2,class=CODE,delta=1
    29                           	psect	text12,global,reloc=2,class=CODE,delta=1
    30                           	psect	text13,global,reloc=2,class=CODE,delta=1
    31                           	psect	text14,global,reloc=2,class=CODE,delta=1
    32                           	psect	text15,global,reloc=2,class=CODE,delta=1
    33                           	psect	text16,global,reloc=2,class=CODE,delta=1
    34                           	psect	text17,global,reloc=2,class=CODE,delta=1
    35                           	psect	text18,global,reloc=2,class=CODE,delta=1
    36                           	psect	text19,global,reloc=2,class=CODE,delta=1
    37                           	psect	text20,global,reloc=2,class=CODE,delta=1
    38                           	psect	text21,global,reloc=2,class=CODE,delta=1
    39                           	psect	text22,global,reloc=2,class=CODE,delta=1
    40                           	psect	text23,global,reloc=2,class=CODE,delta=1
    41                           	psect	text24,global,reloc=2,class=CODE,delta=1
    42                           	psect	text25,global,reloc=2,class=CODE,delta=1
    43                           	psect	text26,global,reloc=2,class=CODE,delta=1
    44                           	psect	text27,global,reloc=2,class=CODE,delta=1
    45                           	psect	text28,global,reloc=2,class=CODE,delta=1
    46                           	psect	text29,global,reloc=2,class=CODE,delta=1
    47                           	psect	text30,global,reloc=2,class=CODE,delta=1
    48                           	psect	text31,global,reloc=2,class=CODE,delta=1
    49                           	psect	text32,global,reloc=2,class=CODE,delta=1
    50                           	psect	text33,global,reloc=2,class=CODE,delta=1
    51                           	psect	text34,global,reloc=2,class=CODE,delta=1
    52                           	psect	text35,global,reloc=2,class=CODE,delta=1
    53                           	psect	text36,global,reloc=2,class=CODE,delta=1
    54                           	psect	text37,global,reloc=2,class=CODE,delta=1
    55                           	psect	text38,global,reloc=2,class=CODE,delta=1
    56                           	psect	text39,global,reloc=2,class=CODE,delta=1
    57                           	psect	text40,global,reloc=2,class=CODE,delta=1,group=1
    58                           	psect	text41,global,reloc=2,class=CODE,delta=1,group=1
    59                           	psect	text42,global,reloc=2,class=CODE,delta=1
    60                           	psect	text43,global,reloc=2,class=CODE,delta=1
    61                           	psect	text44,global,reloc=2,class=CODE,delta=1
    62                           	psect	text45,global,reloc=2,class=CODE,delta=1
    63                           	psect	text46,global,reloc=2,class=CODE,delta=1
    64                           	psect	text47,global,reloc=2,class=CODE,delta=1
    65                           	psect	text48,global,reloc=2,class=CODE,delta=1
    66                           	psect	text49,global,reloc=2,class=CODE,delta=1
    67                           	psect	text50,global,reloc=2,class=CODE,delta=1
    68                           	psect	text51,global,reloc=2,class=CODE,delta=1
    69                           	psect	text52,global,reloc=2,class=CODE,delta=1
    70                           	psect	text53,global,reloc=2,class=CODE,delta=1
    71                           	psect	text54,global,reloc=2,class=CODE,delta=1
    72                           	psect	text55,global,reloc=2,class=CODE,delta=1
    73                           	psect	text56,global,reloc=2,class=CODE,delta=1,group=1
    74                           	psect	text57,global,reloc=2,class=CODE,delta=1
    75                           	psect	text58,global,reloc=2,class=CODE,delta=1
    76                           	psect	text59,global,reloc=2,class=CODE,delta=1
    77                           	psect	text60,global,reloc=2,class=CODE,delta=1
    78                           	psect	text61,global,reloc=2,class=CODE,delta=1
    79                           	psect	text62,global,reloc=2,class=CODE,delta=1
    80                           	psect	text63,global,reloc=2,class=CODE,delta=1
    81                           	psect	text64,global,reloc=2,class=CODE,delta=1
    82                           	psect	text65,global,reloc=2,class=CODE,delta=1
    83                           	psect	text66,global,reloc=2,class=CODE,delta=1
    84                           	psect	text67,global,reloc=2,class=CODE,delta=1
    85                           	psect	text68,global,reloc=2,class=CODE,delta=1
    86                           	psect	text69,global,reloc=2,class=CODE,delta=1
    87                           	psect	text70,global,reloc=2,class=CODE,delta=1
    88                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    89                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    90                           	psect	text72,global,reloc=2,class=CODE,delta=1
    91                           	psect	text73,global,reloc=2,class=CODE,delta=1
    92                           	psect	text74,global,reloc=2,class=CODE,delta=1
    93                           	psect	text75,global,reloc=2,class=CODE,delta=1
    94                           	psect	text76,global,reloc=2,class=CODE,delta=1
    95                           	psect	text77,global,reloc=2,class=CODE,delta=1
    96                           	psect	text78,global,reloc=2,class=CODE,delta=1
    97                           	psect	text79,global,reloc=2,class=CODE,delta=1
    98                           	psect	text80,global,reloc=2,class=CODE,delta=1
    99                           	psect	text81,global,reloc=2,class=CODE,delta=1,group=1
   100                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
   101                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
   102                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
   103  0000                     
   104                           ; Version 2.05
   105                           ; Generated 20/12/2018 GMT
   106                           ; 
   107                           ; Copyright Â© 2018, Microchip Technology Inc. and its subsidiaries ("Microchip")
   108                           ; All rights reserved.
   109                           ; 
   110                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
   111                           ; 
   112                           ; Redistribution and use in source and binary forms, with or without modification, are
   113                           ; permitted provided that the following conditions are met:
   114                           ; 
   115                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
   116                           ;        conditions and the following disclaimer.
   117                           ; 
   118                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
   119                           ;        of conditions and the following disclaimer in the documentation and/or other
   120                           ;        materials provided with the distribution.
   121                           ; 
   122                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
   123                           ;        software without specific prior written permission.
   124                           ; 
   125                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   126                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   127                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   128                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   129                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   130                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   131                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   132                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   133                           ; 
   134                           ; 
   135                           ; Code-generator required, PIC18F4520 Definitions
   136                           ; 
   137                           ; SFR Addresses
   138  0000                     
   139                           	psect	idataBANK0
   140  0025C6                     __pidataBANK0:
   141                           	opt callstack 0
   142                           
   143                           ;initializer for show_score@F2757
   144  0025C6  FFFF               	dw	65535
   145  0025C8  FFFF               	dw	65535
   146  0025CA  FFFF               	dw	65535
   147  0025CC  FFFF               	dw	65535
   148  0025CE  FFFF               	dw	65535
   149  0025D0  FFFF               	dw	65535
   150  0025D2  FFFF               	dw	65535
   151  0025D4  FFFF               	dw	65535
   152                           
   153                           	psect	idataBANK2
   154  001B0C                     __pidataBANK2:
   155                           	opt callstack 0
   156                           
   157                           ;initializer for _shapes
   158  001B0C  0000               	dw	0
   159  001B0E  0000               	dw	0
   160  001B10  0000               	dw	0
   161  001B12  0001               	dw	1
   162  001B14  0003               	dw	3
   163  001B16  0001               	dw	1
   164  001B18  0000               	dw	0
   165  001B1A  0000               	dw	0
   166  001B1C  04                 	db	4
   167  001B1D  00                 	db	0
   168  001B1E  00                 	db	0
   169  001B1F  0000               	dw	0
   170  001B21  0000               	dw	0
   171  001B23  0001               	dw	1
   172  001B25  0001               	dw	1
   173  001B27  0001               	dw	1
   174  001B29  0001               	dw	1
   175  001B2B  0000               	dw	0
   176  001B2D  0000               	dw	0
   177  001B2F  04                 	db	4
   178  001B30  00                 	db	0
   179  001B31  01                 	db	1
   180  001B32  0000               	dw	0
   181  001B34  0000               	dw	0
   182  001B36  0000               	dw	0
   183  001B38  0003               	dw	3
   184  001B3A  0001               	dw	1
   185  001B3C  0001               	dw	1
   186  001B3E  0000               	dw	0
   187  001B40  0000               	dw	0
   188  001B42  04                 	db	4
   189  001B43  00                 	db	0
   190  001B44  00                 	db	0
   191  001B45  0000               	dw	0
   192  001B47  0000               	dw	0
   193  001B49  0000               	dw	0
   194  001B4B  0001               	dw	1
   195  001B4D  0001               	dw	1
   196  001B4F  0003               	dw	3
   197  001B51  0000               	dw	0
   198  001B53  0000               	dw	0
   199  001B55  04                 	db	4
   200  001B56  00                 	db	0
   201  001B57  00                 	db	0
   202  001B58  0000               	dw	0
   203  001B5A  0000               	dw	0
   204  001B5C  0000               	dw	0
   205  001B5E  0003               	dw	3
   206  001B60  0003               	dw	3
   207  001B62  0000               	dw	0
   208  001B64  0000               	dw	0
   209  001B66  0000               	dw	0
   210  001B68  03                 	db	3
   211  001B69  01                 	db	1
   212  001B6A  02                 	db	2
   213  001B6B  0000               	dw	0
   214  001B6D  0000               	dw	0
   215  001B6F  0000               	dw	0
   216  001B71  0002               	dw	2
   217  001B73  0003               	dw	3
   218  001B75  0001               	dw	1
   219  001B77  0000               	dw	0
   220  001B79  0000               	dw	0
   221  001B7B  04                 	db	4
   222  001B7C  01                 	db	1
   223  001B7D  01                 	db	1
   224  001B7E  0000               	dw	0
   225  001B80  0000               	dw	0
   226  001B82  0000               	dw	0
   227  001B84  0001               	dw	1
   228  001B86  0003               	dw	3
   229  001B88  0002               	dw	2
   230  001B8A  0000               	dw	0
   231  001B8C  0000               	dw	0
   232  001B8E  04                 	db	4
   233  001B8F  01                 	db	1
   234  001B90  01                 	db	1
   235                           
   236                           	psect	mediumconst
   237  007EFE                     __pmediumconst:
   238                           	opt callstack 0
   239  007EFE  00                 	db	0
   240  007EFF                     SnakeGraph@SnakeYtext:
   241                           	opt callstack 0
   242  007EFF  0001               	dw	1
   243  007F01  0002               	dw	2
   244  007F03  0004               	dw	4
   245  007F05  0008               	dw	8
   246  007F07  0010               	dw	16
   247  007F09  0020               	dw	32
   248  007F0B  0040               	dw	64
   249  007F0D  0080               	dw	128
   250  007F0F  0100               	dw	256
   251  007F11  0200               	dw	512
   252  007F13  0400               	dw	1024
   253  007F15  0800               	dw	2048
   254  007F17  1000               	dw	4096
   255  007F19  2000               	dw	8192
   256  007F1B  4000               	dw	16384
   257  007F1D  8000               	dw	32768
   258  007F1F                     __end_ofSnakeGraph@SnakeYtext:
   259                           	opt callstack 0
   260  007F1F                     choosescreen@choosescreen2:
   261                           	opt callstack 0
   262  007F1F  FF00               	dw	65280
   263  007F21  8100               	dw	33024
   264  007F23  BD00               	dw	48384
   265  007F25  8500               	dw	34048
   266  007F27  8500               	dw	34048
   267  007F29  AD00               	dw	44288
   268  007F2B  8100               	dw	33024
   269  007F2D  FF00               	dw	65280
   270  007F2F                     __end_ofchoosescreen@choosescreen2:
   271                           	opt callstack 0
   272  007F2F                     choosescreen@choosescreen1:
   273                           	opt callstack 0
   274  007F2F  00FF               	dw	255
   275  007F31  0081               	dw	129
   276  007F33  0081               	dw	129
   277  007F35  008D               	dw	141
   278  007F37  0099               	dw	153
   279  007F39  0081               	dw	129
   280  007F3B  0081               	dw	129
   281  007F3D  00FF               	dw	255
   282  007F3F                     __end_ofchoosescreen@choosescreen1:
   283                           	opt callstack 0
   284  007F3F                     _Number:
   285                           	opt callstack 0
   286  007F3F  001E               	dw	30
   287  007F41  0012               	dw	18
   288  007F43  0012               	dw	18
   289  007F45  0012               	dw	18
   290  007F47  001E               	dw	30
   291  007F49  0000               	dw	0
   292  007F4B  0000               	dw	0
   293  007F4D  0000               	dw	0
   294  007F4F  0004               	dw	4
   295  007F51  000C               	dw	12
   296  007F53  0004               	dw	4
   297  007F55  0004               	dw	4
   298  007F57  001E               	dw	30
   299  007F59  0000               	dw	0
   300  007F5B  0000               	dw	0
   301  007F5D  0000               	dw	0
   302  007F5F  001E               	dw	30
   303  007F61  0002               	dw	2
   304  007F63  001E               	dw	30
   305  007F65  0010               	dw	16
   306  007F67  001E               	dw	30
   307  007F69  0000               	dw	0
   308  007F6B  0000               	dw	0
   309  007F6D  0000               	dw	0
   310  007F6F  001E               	dw	30
   311  007F71  0002               	dw	2
   312  007F73  000E               	dw	14
   313  007F75  0002               	dw	2
   314  007F77  001E               	dw	30
   315  007F79  0000               	dw	0
   316  007F7B  0000               	dw	0
   317  007F7D  0000               	dw	0
   318  007F7F  0012               	dw	18
   319  007F81  0012               	dw	18
   320  007F83  001E               	dw	30
   321  007F85  0002               	dw	2
   322  007F87  0002               	dw	2
   323  007F89  0000               	dw	0
   324  007F8B  0000               	dw	0
   325  007F8D  0000               	dw	0
   326  007F8F  001E               	dw	30
   327  007F91  0010               	dw	16
   328  007F93  001E               	dw	30
   329  007F95  0002               	dw	2
   330  007F97  001E               	dw	30
   331  007F99  0000               	dw	0
   332  007F9B  0000               	dw	0
   333  007F9D  0000               	dw	0
   334  007F9F  001E               	dw	30
   335  007FA1  0010               	dw	16
   336  007FA3  001E               	dw	30
   337  007FA5  0012               	dw	18
   338  007FA7  001E               	dw	30
   339  007FA9  0000               	dw	0
   340  007FAB  0000               	dw	0
   341  007FAD  0000               	dw	0
   342  007FAF  001E               	dw	30
   343  007FB1  0002               	dw	2
   344  007FB3  0004               	dw	4
   345  007FB5  0008               	dw	8
   346  007FB7  0010               	dw	16
   347  007FB9  0000               	dw	0
   348  007FBB  0000               	dw	0
   349  007FBD  0000               	dw	0
   350  007FBF  001E               	dw	30
   351  007FC1  0012               	dw	18
   352  007FC3  001E               	dw	30
   353  007FC5  0012               	dw	18
   354  007FC7  001E               	dw	30
   355  007FC9  0000               	dw	0
   356  007FCB  0000               	dw	0
   357  007FCD  0000               	dw	0
   358  007FCF  001E               	dw	30
   359  007FD1  0012               	dw	18
   360  007FD3  001E               	dw	30
   361  007FD5  0002               	dw	2
   362  007FD7  0002               	dw	2
   363  007FD9  0000               	dw	0
   364  007FDB  0000               	dw	0
   365  007FDD  0000               	dw	0
   366  007FDF                     __end_of_Number:
   367                           	opt callstack 0
   368  007FDF                     snake_screen@SNAKE:
   369                           	opt callstack 0
   370  007FDF  FB97               	dw	64407
   371  007FE1  A955               	dw	43349
   372  007FE3  AB9D               	dw	43933
   373  007FE5  0000               	dw	0
   374  007FE7  03DF               	dw	991
   375  007FE9  B881               	dw	47233
   376  007FEB  035F               	dw	863
   377  007FED  0000               	dw	0
   378  007FEF                     __end_ofsnake_screen@SNAKE:
   379                           	opt callstack 0
   380  007FEF                     _TETRIS:
   381                           	opt callstack 0
   382  007FEF  8841               	dw	34881
   383  007FF1  FBDF               	dw	64479
   384  007FF3  8841               	dw	34881
   385  007FF5  0000               	dw	0
   386  007FF7  9BDF               	dw	39903
   387  007FF9  A955               	dw	43349
   388  007FFB  CA91               	dw	51857
   389  007FFD  0000               	dw	0
   390  007FFF                     __end_of_TETRIS:
   391                           	opt callstack 0
   392  007FFF  00                 	db	0	; dummy byte at the end
   393  0000                     
   394                           	psect	nvCOMRAM
   395  000057                     __pnvCOMRAM:
   396                           	opt callstack 0
   397  000057                     _mS:
   398                           	opt callstack 0
   399  000057                     	ds	2
   400  000059                     __lfsr:
   401                           	opt callstack 0
   402  000059                     	ds	2
   403  00005B                     _UpdateScreen:
   404                           	opt callstack 0
   405  00005B                     	ds	1
   406  00005C                     _mtxButtons:
   407                           	opt callstack 0
   408  00005C                     	ds	1
   409  00005D                     _game:
   410                           	opt callstack 0
   411  00005D                     	ds	1
   412  00005E                     _Down_Delay:
   413                           	opt callstack 0
   414  00005E                     	ds	2
   415  000060                     _Rotate_Delay:
   416                           	opt callstack 0
   417  000060                     	ds	2
   418  000062                     _Right_Delay:
   419                           	opt callstack 0
   420  000062                     	ds	2
   421  000064                     _Left_Delay:
   422                           	opt callstack 0
   423  000064                     	ds	2
   424  0000                     _TMR0	set	4054
   425  0000                     _PORTBbits	set	3969
   426  0000                     _EECON2	set	4007
   427  0000                     _EEDATA	set	4008
   428  0000                     _EECON1bits	set	4006
   429  0000                     _EEADR	set	4009
   430  0000                     _PORTD	set	3971
   431  0000                     _DDRD	set	3989
   432  0000                     _PORTC	set	3970
   433  0000                     _DDRC	set	3988
   434  0000                     _INTCON2bits	set	4081
   435  0000                     _PORTB	set	3969
   436  0000                     _DDRB	set	3987
   437  0000                     _PORTA	set	3968
   438  0000                     _DDRA	set	3986
   439  0000                     _ADCON1bits	set	4033
   440  0000                     _OSCCONbits	set	4051
   441  0000                     _T0CONbits	set	4053
   442  0000                     _INTCONbits	set	4082
   443  0000                     _GIE	set	32663
   444  0000                     _IPEN	set	32391
   445  0000                     _TMR0IE	set	32661
   446  0000                     _TMR0ON	set	32431
   447  0000                     _T0CS	set	32429
   448  0000                     _PSA	set	32427
   449                           
   450                           ; #config settings
   451  0000                     
   452                           	psect	cinit
   453  001EDC                     __pcinit:
   454                           	opt callstack 0
   455  001EDC                     start_initialization:
   456                           	opt callstack 0
   457  001EDC                     __initialization:
   458                           	opt callstack 0
   459                           
   460                           ; Initialize objects allocated to BANK2 (133 bytes)
   461                           ; load TBLPTR registers with __pidataBANK2
   462  001EDC  0E0C               	movlw	low __pidataBANK2
   463  001EDE  6EF6               	movwf	tblptrl,c
   464  001EE0  0E1B               	movlw	high __pidataBANK2
   465  001EE2  6EF7               	movwf	tblptrh,c
   466  001EE4  0E00               	movlw	low (__pidataBANK2 shr (0+16))
   467  001EE6  6EF8               	movwf	tblptru,c
   468  001EE8  EE02  F000         	lfsr	0,__pdataBANK2
   469  001EEC  EE10 F085          	lfsr	1,133
   470  001EF0                     copy_data0:
   471  001EF0  0009               	tblrd		*+
   472  001EF2  CFF5 FFEE          	movff	tablat,postinc0
   473  001EF6  50E5               	movf	postdec1,w,c
   474  001EF8  50E1               	movf	fsr1l,w,c
   475  001EFA  E1FA               	bnz	copy_data0
   476                           
   477                           ; Initialize objects allocated to BANK0 (16 bytes)
   478                           ; load TBLPTR registers with __pidataBANK0
   479  001EFC  0EC6               	movlw	low __pidataBANK0
   480  001EFE  6EF6               	movwf	tblptrl,c
   481  001F00  0E25               	movlw	high __pidataBANK0
   482  001F02  6EF7               	movwf	tblptrh,c
   483  001F04  0E00               	movlw	low (__pidataBANK0 shr (0+16))
   484  001F06  6EF8               	movwf	tblptru,c
   485  001F08  EE00  F0C8         	lfsr	0,__pdataBANK0
   486  001F0C  EE10 F010          	lfsr	1,16
   487  001F10                     copy_data1:
   488  001F10  0009               	tblrd		*+
   489  001F12  CFF5 FFEE          	movff	tablat,postinc0
   490  001F16  50E5               	movf	postdec1,w,c
   491  001F18  50E1               	movf	fsr1l,w,c
   492  001F1A  E1FA               	bnz	copy_data1
   493                           
   494                           ; Clear objects allocated to BANK0 (17 bytes)
   495  001F1C  EE00  F0B7         	lfsr	0,__pbssBANK0
   496  001F20  0E11               	movlw	17
   497  001F22                     clear_0:
   498  001F22  6AEE               	clrf	postinc0,c
   499  001F24  06E8               	decf	wreg,f,c
   500  001F26  E1FD               	bnz	clear_0
   501                           
   502                           ; Clear objects allocated to COMRAM (9 bytes)
   503  001F28  EE00  F066         	lfsr	0,__pbssCOMRAM
   504  001F2C  0E09               	movlw	9
   505  001F2E                     clear_1:
   506  001F2E  6AEE               	clrf	postinc0,c
   507  001F30  06E8               	decf	wreg,f,c
   508  001F32  E1FD               	bnz	clear_1
   509  001F34                     end_of_initialization:
   510                           	opt callstack 0
   511  001F34                     __end_of__initialization:
   512                           	opt callstack 0
   513  001F34  906F               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   514  001F36  926F               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   515  001F38  0E00               	movlw	low (__Lmediumconst shr (0+16))
   516  001F3A  6EF8               	movwf	tblptru,c
   517  001F3C  0100               	movlb	0
   518  001F3E  EFAF  F010         	goto	_main	;jump to C main() function
   519                           
   520                           	psect	bssCOMRAM
   521  000066                     __pbssCOMRAM:
   522                           	opt callstack 0
   523  000066                     _RemainingWaitTime:
   524                           	opt callstack 0
   525  000066                     	ds	2
   526  000068                     _InterruptComplete:
   527                           	opt callstack 0
   528  000068                     	ds	1
   529  000069                     _moveSnake:
   530                           	opt callstack 0
   531  000069                     	ds	1
   532  00006A                     screen_update@CurrentX:
   533                           	opt callstack 0
   534  00006A                     	ds	1
   535  00006B                     _Down_Debounced:
   536                           	opt callstack 0
   537  00006B                     	ds	1
   538  00006C                     _Right_Debounced:
   539                           	opt callstack 0
   540  00006C                     	ds	1
   541  00006D                     _Left_Debounced:
   542                           	opt callstack 0
   543  00006D                     	ds	1
   544  00006E                     _Rotate_Debounced:
   545                           	opt callstack 0
   546  00006E                     	ds	1
   547                           
   548                           	psect	bssBANK0
   549  0000B7                     __pbssBANK0:
   550                           	opt callstack 0
   551  0000B7                     _DropObject:
   552                           	opt callstack 0
   553  0000B7                     	ds	1
   554  0000B8                     _ScreenData:
   555                           	opt callstack 0
   556  0000B8                     	ds	16
   557                           
   558                           	psect	dataBANK0
   559  0000C8                     __pdataBANK0:
   560                           	opt callstack 0
   561  0000C8                     show_score@F2757:
   562                           	opt callstack 0
   563  0000C8                     	ds	16
   564                           
   565                           	psect	dataBANK2
   566  000200                     __pdataBANK2:
   567                           	opt callstack 0
   568  000200                     _shapes:
   569                           	opt callstack 0
   570  000200                     	ds	133
   571                           
   572                           	psect	cstackBANK1
   573  000100                     __pcstackBANK1:
   574                           	opt callstack 0
   575  000100                     tetris_main@Screen_Data:
   576                           	opt callstack 0
   577  000100                     snake_main@positions:
   578                           	opt callstack 0
   579                           
   580                           ; 256 bytes @ 0x0
   581  000100                     	ds	16
   582  000110                     tetris_main@BackgroundData:
   583                           	opt callstack 0
   584                           
   585                           ; 16 bytes @ 0x10
   586  000110                     	ds	16
   587  000120                     _tetris_main$701:
   588                           	opt callstack 0
   589                           
   590                           ; 1 bytes @ 0x20
   591  000120                     	ds	1
   592  000121                     tetris_main@rotation:
   593                           	opt callstack 0
   594                           
   595                           ; 1 bytes @ 0x21
   596  000121                     	ds	1
   597  000122                     tetris_main@LastHighScore:
   598                           	opt callstack 0
   599                           
   600                           ; 1 bytes @ 0x22
   601  000122                     	ds	1
   602  000123                     tetris_main@newScreen:
   603                           	opt callstack 0
   604                           
   605                           ; 1 bytes @ 0x23
   606  000123                     	ds	1
   607  000124                     tetris_main@NumberOfLines:
   608                           	opt callstack 0
   609                           
   610                           ; 1 bytes @ 0x24
   611  000124                     	ds	1
   612  000125                     tetris_main@EndOfGame:
   613                           	opt callstack 0
   614                           
   615                           ; 1 bytes @ 0x25
   616  000125                     	ds	1
   617  000126                     tetris_main@CheckForNewLines:
   618                           	opt callstack 0
   619                           
   620                           ; 1 bytes @ 0x26
   621  000126                     	ds	1
   622  000127                     tetris_main@tetris:
   623                           	opt callstack 0
   624                           
   625                           ; 28 bytes @ 0x27
   626  000127                     	ds	217
   627                           
   628                           	psect	cstackBANK0
   629  000080                     __pcstackBANK0:
   630                           	opt callstack 0
   631  000080                     show_score@mask:
   632                           	opt callstack 0
   633                           
   634                           ; 16 bytes @ 0x0
   635  000080                     	ds	16
   636  000090                     show_score@Numberscreen:
   637                           	opt callstack 0
   638                           
   639                           ; 16 bytes @ 0x10
   640  000090                     	ds	16
   641  0000A0                     show_score@tmpObjectData:
   642                           	opt callstack 0
   643                           
   644                           ; 16 bytes @ 0x20
   645  0000A0                     	ds	16
   646  0000B0                     show_score@score:
   647                           	opt callstack 0
   648                           
   649                           ; 1 bytes @ 0x30
   650  0000B0                     	ds	1
   651  0000B1                     show_score@currentNumber:
   652                           	opt callstack 0
   653                           
   654                           ; 1 bytes @ 0x31
   655  0000B1                     	ds	1
   656  0000B2                     show_score@number:
   657                           	opt callstack 0
   658                           
   659                           ; 4 bytes @ 0x32
   660  0000B2                     	ds	4
   661  0000B6                     show_score@i:
   662                           	opt callstack 0
   663                           
   664                           ; 1 bytes @ 0x36
   665  0000B6                     	ds	1
   666                           
   667                           	psect	cstackCOMRAM
   668  000001                     __pcstackCOMRAM:
   669                           	opt callstack 0
   670  000001                     ??_screen_update:
   671  000001                     ?i2_get_mS:
   672                           	opt callstack 0
   673  000001                     add_mS@amount:
   674                           	opt callstack 0
   675  000001                     debounceButton@delay:
   676                           	opt callstack 0
   677  000001                     i2set_mS@amount:
   678                           	opt callstack 0
   679                           
   680                           ; 2 bytes @ 0x0
   681  000001                     	ds	2
   682  000003                     ?___lwmod:
   683                           	opt callstack 0
   684  000003                     debounceButton@debounced:
   685                           	opt callstack 0
   686  000003                     screen_update@ymask:
   687                           	opt callstack 0
   688  000003                     ___lwmod@dividend:
   689                           	opt callstack 0
   690                           
   691                           ; 2 bytes @ 0x2
   692  000003                     	ds	2
   693  000005                     screen_update@xmask:
   694                           	opt callstack 0
   695  000005                     ___lwmod@divisor:
   696                           	opt callstack 0
   697                           
   698                           ; 2 bytes @ 0x4
   699  000005                     	ds	2
   700  000007                     debounceButton@button:
   701                           	opt callstack 0
   702  000007                     ___lwmod@counter:
   703                           	opt callstack 0
   704                           
   705                           ; 1 bytes @ 0x6
   706  000007                     	ds	1
   707  000008                     Interrupt@game:
   708                           	opt callstack 0
   709                           
   710                           ; 1 bytes @ 0x7
   711  000008                     	ds	1
   712  000009                     ??_isr:
   713                           
   714                           ; 1 bytes @ 0x8
   715  000009                     	ds	4
   716  00000D                     ?_get_mS:
   717                           	opt callstack 0
   718  00000D                     ?_rnd_get_num:
   719                           	opt callstack 0
   720  00000D                     ?___wmul:
   721                           	opt callstack 0
   722  00000D                     ?___awdiv:
   723                           	opt callstack 0
   724  00000D                     ?___awmod:
   725                           	opt callstack 0
   726  00000D                     rnd_initialize@input:
   727                           	opt callstack 0
   728  00000D                     ReadEEByte@address:
   729                           	opt callstack 0
   730  00000D                     WriteEEByte@data:
   731                           	opt callstack 0
   732  00000D                     checkLeft@reset:
   733                           	opt callstack 0
   734  00000D                     checkRight@reset:
   735                           	opt callstack 0
   736  00000D                     checkUp@reset:
   737                           	opt callstack 0
   738  00000D                     checkDown@reset:
   739                           	opt callstack 0
   740  00000D                     ___lbmod@divisor:
   741                           	opt callstack 0
   742  00000D                     checkForBottom@pObject:
   743                           	opt callstack 0
   744  00000D                     moveObjecttetris@tetrisblock:
   745                           	opt callstack 0
   746  00000D                     snake_button_left@direction:
   747                           	opt callstack 0
   748  00000D                     snake_button_up@direction:
   749                           	opt callstack 0
   750  00000D                     snake_button_right@direction:
   751                           	opt callstack 0
   752  00000D                     snake_button_down@direction:
   753                           	opt callstack 0
   754  00000D                     aibuttons@direction:
   755                           	opt callstack 0
   756  00000D                     set_mS@amount:
   757                           	opt callstack 0
   758  00000D                     memcpy@dest:
   759                           	opt callstack 0
   760  00000D                     memcpyvol@dest:
   761                           	opt callstack 0
   762  00000D                     swap@a:
   763                           	opt callstack 0
   764  00000D                     clearArray@pArray:
   765                           	opt callstack 0
   766  00000D                     mergeObjects@pSource:
   767                           	opt callstack 0
   768  00000D                     checkForLeftWall@pObject:
   769                           	opt callstack 0
   770  00000D                     checkForRightWall@pObject:
   771                           	opt callstack 0
   772  00000D                     collisionDetect@pSource:
   773                           	opt callstack 0
   774  00000D                     pixelCount@pSource:
   775                           	opt callstack 0
   776  00000D                     removeLine@pObject:
   777                           	opt callstack 0
   778  00000D                     moveObject@pObject:
   779                           	opt callstack 0
   780  00000D                     waitms@t:
   781                           	opt callstack 0
   782  00000D                     ___wmul@multiplier:
   783                           	opt callstack 0
   784  00000D                     ___awdiv@dividend:
   785                           	opt callstack 0
   786  00000D                     ___awmod@dividend:
   787                           	opt callstack 0
   788                           
   789                           ; 2 bytes @ 0xC
   790  00000D                     	ds	1
   791  00000E                     WriteEEByte@address:
   792                           	opt callstack 0
   793  00000E                     ___lbmod@dividend:
   794                           	opt callstack 0
   795                           
   796                           ; 1 bytes @ 0xD
   797  00000E                     	ds	1
   798  00000F                     ??_pixelCount:
   799  00000F                     ??_rnd_get_num:
   800  00000F                     ??_checkForBottom:
   801  00000F                     moveObjecttetris@direction:
   802                           	opt callstack 0
   803  00000F                     removeLine@pY:
   804                           	opt callstack 0
   805  00000F                     readHighScore@adress:
   806                           	opt callstack 0
   807  00000F                     writeHighScore@highscore:
   808                           	opt callstack 0
   809  00000F                     moveObject@direction:
   810                           	opt callstack 0
   811  00000F                     ___lbmod@counter:
   812                           	opt callstack 0
   813  00000F                     snake_button_left@previous_direction:
   814                           	opt callstack 0
   815  00000F                     snake_button_up@previous_direction:
   816                           	opt callstack 0
   817  00000F                     snake_button_right@previous_direction:
   818                           	opt callstack 0
   819  00000F                     snake_button_down@previous_direction:
   820                           	opt callstack 0
   821  00000F                     aibuttons@positions:
   822                           	opt callstack 0
   823  00000F                     memcpy@src:
   824                           	opt callstack 0
   825  00000F                     memcpyvol@src:
   826                           	opt callstack 0
   827  00000F                     swap@b:
   828                           	opt callstack 0
   829  00000F                     clearArray@size:
   830                           	opt callstack 0
   831  00000F                     mergeObjects@pTarget:
   832                           	opt callstack 0
   833  00000F                     collisionDetect@pTarget:
   834                           	opt callstack 0
   835  00000F                     ___wmul@multiplicand:
   836                           	opt callstack 0
   837  00000F                     ___awdiv@divisor:
   838                           	opt callstack 0
   839  00000F                     ___awmod@divisor:
   840                           	opt callstack 0
   841                           
   842                           ; 2 bytes @ 0xE
   843  00000F                     	ds	1
   844  000010                     ??_removeLine:
   845  000010                     moveObjecttetris@cycles:
   846                           	opt callstack 0
   847  000010                     readHighScore@tmpbyte:
   848                           	opt callstack 0
   849  000010                     writeHighScore@scored:
   850                           	opt callstack 0
   851  000010                     moveObject@cycles:
   852                           	opt callstack 0
   853  000010                     ___lbmod@rem:
   854                           	opt callstack 0
   855                           
   856                           ; 1 bytes @ 0xF
   857  000010                     	ds	1
   858  000011                     ??_collisionDetect:
   859  000011                     ??_moveObject:
   860  000011                     ??_moveObjecttetris:
   861  000011                     ??_aibuttons:
   862  000011                     swap@t:
   863                           	opt callstack 0
   864  000011                     mergeObjects@mode:
   865                           	opt callstack 0
   866  000011                     writeHighScore@adress:
   867                           	opt callstack 0
   868  000011                     ___awdiv@counter:
   869                           	opt callstack 0
   870  000011                     ___awmod@counter:
   871                           	opt callstack 0
   872  000011                     memcpy@n:
   873                           	opt callstack 0
   874  000011                     memcpyvol@n:
   875                           	opt callstack 0
   876  000011                     ___wmul@product:
   877                           	opt callstack 0
   878                           
   879                           ; 2 bytes @ 0x10
   880  000011                     	ds	1
   881  000012                     ??_mergeObjects:
   882  000012                     ___awdiv@sign:
   883                           	opt callstack 0
   884  000012                     ___awmod@sign:
   885                           	opt callstack 0
   886  000012                     snake_buttons@direction:
   887                           	opt callstack 0
   888  000012                     reverse@str:
   889                           	opt callstack 0
   890                           
   891                           ; 2 bytes @ 0x11
   892  000012                     	ds	1
   893  000013                     checkForBottom@i:
   894                           	opt callstack 0
   895  000013                     rnd_get_num@b:
   896                           	opt callstack 0
   897  000013                     memcpy@d:
   898                           	opt callstack 0
   899  000013                     memcpyvol@d:
   900                           	opt callstack 0
   901  000013                     ___awdiv@quotient:
   902                           	opt callstack 0
   903                           
   904                           ; 2 bytes @ 0x12
   905  000013                     	ds	1
   906  000014                     snake_buttons@previous_direction:
   907                           	opt callstack 0
   908  000014                     reverse@length:
   909                           	opt callstack 0
   910                           
   911                           ; 2 bytes @ 0x13
   912  000014                     	ds	1
   913  000015                     genBerry@size:
   914                           	opt callstack 0
   915  000015                     memcpy@s:
   916                           	opt callstack 0
   917  000015                     memcpyvol@s:
   918                           	opt callstack 0
   919                           
   920                           ; 2 bytes @ 0x14
   921  000015                     	ds	1
   922  000016                     ??_reverse:
   923  000016                     genBerry@temp:
   924                           	opt callstack 0
   925  000016                     pixelCount@r:
   926                           	opt callstack 0
   927                           
   928                           ; 1 bytes @ 0x15
   929  000016                     	ds	1
   930  000017                     moveObjecttetris@c:
   931                           	opt callstack 0
   932  000017                     pixelCount@x:
   933                           	opt callstack 0
   934  000017                     moveObject@c:
   935                           	opt callstack 0
   936  000017                     selectNextObject@tetris:
   937                           	opt callstack 0
   938  000017                     newRotation@tetris:
   939                           	opt callstack 0
   940  000017                     CreateBerry@snakeLength:
   941                           	opt callstack 0
   942  000017                     reverse@start:
   943                           	opt callstack 0
   944  000017                     getNumber@pTarget:
   945                           	opt callstack 0
   946  000017                     set_screen@newData:
   947                           	opt callstack 0
   948  000017                     set_splashscreen@newData:
   949                           	opt callstack 0
   950                           
   951                           ; 2 bytes @ 0x16
   952  000017                     	ds	1
   953  000018                     moveObjecttetris@i:
   954                           	opt callstack 0
   955  000018                     mergeObjects@i:
   956                           	opt callstack 0
   957  000018                     pixelCount@y:
   958                           	opt callstack 0
   959  000018                     moveObject@i:
   960                           	opt callstack 0
   961                           
   962                           ; 1 bytes @ 0x17
   963  000018                     	ds	1
   964  000019                     ??_choosescreen:
   965  000019                     ??_selectNextObject:
   966  000019                     collisionDetect@i:
   967                           	opt callstack 0
   968  000019                     getNumber@pDigit:
   969                           	opt callstack 0
   970  000019                     newRotation@pTarget:
   971                           	opt callstack 0
   972  000019                     CreateBerry@positions:
   973                           	opt callstack 0
   974  000019                     SnakeGraph@snakeLength:
   975                           	opt callstack 0
   976  000019                     reverse@end:
   977                           	opt callstack 0
   978                           
   979                           ; 2 bytes @ 0x18
   980  000019                     	ds	1
   981  00001A                     tetris_button_left@tetrisblock:
   982                           	opt callstack 0
   983  00001A                     tetris_button_right@tetrisblock:
   984                           	opt callstack 0
   985                           
   986                           ; 2 bytes @ 0x19
   987  00001A                     	ds	1
   988  00001B                     newRotation@rotation:
   989                           	opt callstack 0
   990  00001B                     CreateBerry@berry:
   991                           	opt callstack 0
   992  00001B                     SnakeGraph@positions:
   993                           	opt callstack 0
   994  00001B                     itoa@value:
   995                           	opt callstack 0
   996                           
   997                           ; 2 bytes @ 0x1A
   998  00001B                     	ds	1
   999  00001C                     tetris_button_left@BackgroundData:
  1000                           	opt callstack 0
  1001  00001C                     tetris_button_right@BackgroundData:
  1002                           	opt callstack 0
  1003                           
  1004                           ; 2 bytes @ 0x1B
  1005  00001C                     	ds	1
  1006  00001D                     ??_newRotation:
  1007  00001D                     ??_CreateBerry:
  1008  00001D                     SnakeGraph@berry:
  1009                           	opt callstack 0
  1010  00001D                     itoa@str:
  1011                           	opt callstack 0
  1012  00001D                     selectNextObject@check:
  1013                           	opt callstack 0
  1014  00001D                     choosescreen@choosescreen:
  1015                           	opt callstack 0
  1016                           
  1017                           ; 16 bytes @ 0x1C
  1018  00001D                     	ds	1
  1019  00001E                     tetris_button_left@tmpObjectData:
  1020                           	opt callstack 0
  1021  00001E                     tetris_button_right@tmpObjectData:
  1022                           	opt callstack 0
  1023                           
  1024                           ; 16 bytes @ 0x1D
  1025  00001E                     	ds	1
  1026  00001F                     ??_SnakeGraph:
  1027  00001F                     itoa@bas:
  1028                           	opt callstack 0
  1029                           
  1030                           ; 2 bytes @ 0x1E
  1031  00001F                     	ds	2
  1032  000021                     CreateBerry@randomGood:
  1033                           	opt callstack 0
  1034  000021                     removeLine@x_907:
  1035                           	opt callstack 0
  1036  000021                     _itoa$878:
  1037                           	opt callstack 0
  1038                           
  1039                           ; 2 bytes @ 0x20
  1040  000021                     	ds	1
  1041  000022                     CreateBerry@i:
  1042                           	opt callstack 0
  1043  000022                     removeLine@y:
  1044                           	opt callstack 0
  1045                           
  1046                           ; 1 bytes @ 0x21
  1047  000022                     	ds	1
  1048  000023                     itoa@isNegative:
  1049                           	opt callstack 0
  1050  000023                     removeLine@currentLine:
  1051                           	opt callstack 0
  1052  000023                     inistialize_snake@snakeLength:
  1053                           	opt callstack 0
  1054                           
  1055                           ; 2 bytes @ 0x22
  1056  000023                     	ds	1
  1057  000024                     selectNextObject@fill:
  1058                           	opt callstack 0
  1059  000024                     newRotation@x2:
  1060                           	opt callstack 0
  1061  000024                     removeLine@x:
  1062                           	opt callstack 0
  1063  000024                     itoa@rem:
  1064                           	opt callstack 0
  1065                           
  1066                           ; 2 bytes @ 0x23
  1067  000024                     	ds	1
  1068  000025                     selectNextObject@counter_546:
  1069                           	opt callstack 0
  1070  000025                     newRotation@y2:
  1071                           	opt callstack 0
  1072  000025                     checkForLines@pObject:
  1073                           	opt callstack 0
  1074  000025                     inistialize_snake@positions:
  1075                           	opt callstack 0
  1076                           
  1077                           ; 2 bytes @ 0x24
  1078  000025                     	ds	1
  1079  000026                     selectNextObject@counter:
  1080                           	opt callstack 0
  1081  000026                     newRotation@x1:
  1082                           	opt callstack 0
  1083  000026                     itoa@i:
  1084                           	opt callstack 0
  1085  000026                     SnakeGraph@ObjectData:
  1086                           	opt callstack 0
  1087                           
  1088                           ; 16 bytes @ 0x25
  1089  000026                     	ds	1
  1090  000027                     ??_checkForLines:
  1091  000027                     newRotation@y1:
  1092                           	opt callstack 0
  1093  000027                     selectNextObject@s:
  1094                           	opt callstack 0
  1095  000027                     inistialize_snake@berry:
  1096                           	opt callstack 0
  1097                           
  1098                           ; 2 bytes @ 0x26
  1099  000027                     	ds	1
  1100  000028                     newRotation@tetrisblock:
  1101                           	opt callstack 0
  1102                           
  1103                           ; 2 bytes @ 0x27
  1104  000028                     	ds	1
  1105  000029                     ??_inistialize_snake:
  1106  000029                     selectNextObject@rndSelection:
  1107                           	opt callstack 0
  1108                           
  1109                           ; 1 bytes @ 0x28
  1110  000029                     	ds	1
  1111  00002A                     selectNextObject@NewBlock:
  1112                           	opt callstack 0
  1113  00002A                     tetris_button_up@tetris:
  1114                           	opt callstack 0
  1115                           
  1116                           ; 2 bytes @ 0x29
  1117  00002A                     	ds	1
  1118  00002B                     inistialize_snake@i:
  1119                           	opt callstack 0
  1120                           
  1121                           ; 1 bytes @ 0x2A
  1122  00002B                     	ds	1
  1123  00002C                     moveObjectDown@tetris:
  1124                           	opt callstack 0
  1125  00002C                     tetris_button_up@BackgroundData:
  1126                           	opt callstack 0
  1127                           
  1128                           ; 2 bytes @ 0x2B
  1129  00002C                     	ds	1
  1130  00002D                     choosescreen@mask:
  1131                           	opt callstack 0
  1132                           
  1133                           ; 16 bytes @ 0x2C
  1134  00002D                     	ds	1
  1135  00002E                     checkForLines@pixels:
  1136                           	opt callstack 0
  1137  00002E                     moveObjectDown@BackgroundData:
  1138                           	opt callstack 0
  1139  00002E                     tetris_button_up@rotation:
  1140                           	opt callstack 0
  1141                           
  1142                           ; 2 bytes @ 0x2D
  1143  00002E                     	ds	1
  1144  00002F                     checkForLines@NumberOfLines:
  1145                           	opt callstack 0
  1146                           
  1147                           ; 1 bytes @ 0x2E
  1148  00002F                     	ds	1
  1149  000030                     ??_tetris_button_up:
  1150  000030                     checkForLines@x:
  1151                           	opt callstack 0
  1152  000030                     moveObjectDown@CheckForNewLines:
  1153                           	opt callstack 0
  1154                           
  1155                           ; 2 bytes @ 0x2F
  1156  000030                     	ds	1
  1157  000031                     checkForLines@y:
  1158                           	opt callstack 0
  1159  000031                     tetris_button_up@tmpObjectData:
  1160                           	opt callstack 0
  1161                           
  1162                           ; 16 bytes @ 0x30
  1163  000031                     	ds	1
  1164  000032                     moveObjectDown@EndOfGame:
  1165                           	opt callstack 0
  1166                           
  1167                           ; 2 bytes @ 0x31
  1168  000032                     	ds	2
  1169  000034                     moveObjectDown@result:
  1170                           	opt callstack 0
  1171                           
  1172                           ; 1 bytes @ 0x33
  1173  000034                     	ds	1
  1174  000035                     moveObjectDown@tetrisblock:
  1175                           	opt callstack 0
  1176                           
  1177                           ; 2 bytes @ 0x34
  1178  000035                     	ds	1
  1179  000036                     SnakeGraph@j:
  1180                           	opt callstack 0
  1181                           
  1182                           ; 1 bytes @ 0x35
  1183  000036                     	ds	1
  1184  000037                     SnakeGraph@i:
  1185                           	opt callstack 0
  1186  000037                     tetris_button_down@tetris:
  1187                           	opt callstack 0
  1188                           
  1189                           ; 2 bytes @ 0x36
  1190  000037                     	ds	1
  1191  000038                     SnakeGraph@i_758:
  1192                           	opt callstack 0
  1193                           
  1194                           ; 1 bytes @ 0x37
  1195  000038                     	ds	1
  1196  000039                     tetris_button_down@BackgroundData:
  1197                           	opt callstack 0
  1198  000039                     MoveSnakes@snakeLength:
  1199                           	opt callstack 0
  1200                           
  1201                           ; 2 bytes @ 0x38
  1202  000039                     	ds	2
  1203  00003B                     tetris_button_down@CheckForNewLines:
  1204                           	opt callstack 0
  1205  00003B                     MoveSnakes@EndOfGame:
  1206                           	opt callstack 0
  1207                           
  1208                           ; 2 bytes @ 0x3A
  1209  00003B                     	ds	2
  1210  00003D                     choosescreen@game:
  1211                           	opt callstack 0
  1212  00003D                     tetris_button_down@EndOfGame:
  1213                           	opt callstack 0
  1214  00003D                     MoveSnakes@direction:
  1215                           	opt callstack 0
  1216                           
  1217                           ; 2 bytes @ 0x3C
  1218  00003D                     	ds	1
  1219  00003E                     choosescreen@i_1068:
  1220                           	opt callstack 0
  1221                           
  1222                           ; 2 bytes @ 0x3D
  1223  00003E                     	ds	1
  1224  00003F                     MoveSnakes@previous_direction:
  1225                           	opt callstack 0
  1226                           
  1227                           ; 2 bytes @ 0x3E
  1228  00003F                     	ds	1
  1229  000040                     choosescreen@i_1069:
  1230                           	opt callstack 0
  1231                           
  1232                           ; 2 bytes @ 0x3F
  1233  000040                     	ds	1
  1234  000041                     tetris_button_up@tetrisblock:
  1235                           	opt callstack 0
  1236  000041                     MoveSnakes@positions:
  1237                           	opt callstack 0
  1238                           
  1239                           ; 2 bytes @ 0x40
  1240  000041                     	ds	1
  1241  000042                     choosescreen@i:
  1242                           	opt callstack 0
  1243                           
  1244                           ; 1 bytes @ 0x41
  1245  000042                     	ds	1
  1246  000043                     tetris_buttons@tetris:
  1247                           	opt callstack 0
  1248  000043                     MoveSnakes@berry:
  1249                           	opt callstack 0
  1250                           
  1251                           ; 2 bytes @ 0x42
  1252  000043                     	ds	2
  1253  000045                     ??_MoveSnakes:
  1254  000045                     tetris_buttons@BackgroundData:
  1255                           	opt callstack 0
  1256                           
  1257                           ; 2 bytes @ 0x44
  1258  000045                     	ds	2
  1259  000047                     tetris_buttons@CheckForNewLines:
  1260                           	opt callstack 0
  1261                           
  1262                           ; 2 bytes @ 0x46
  1263  000047                     	ds	2
  1264  000049                     tetris_buttons@EndOfGame:
  1265                           	opt callstack 0
  1266                           
  1267                           ; 2 bytes @ 0x48
  1268  000049                     	ds	2
  1269  00004B                     tetris_buttons@rotation:
  1270                           	opt callstack 0
  1271                           
  1272                           ; 2 bytes @ 0x4A
  1273  00004B                     	ds	2
  1274  00004D                     tetris_buttons@returnbool:
  1275                           	opt callstack 0
  1276  00004D                     MoveSnakes@i_774:
  1277                           	opt callstack 0
  1278                           
  1279                           ; 1 bytes @ 0x4C
  1280  00004D                     	ds	1
  1281  00004E                     MoveSnakes@i:
  1282                           	opt callstack 0
  1283                           
  1284                           ; 1 bytes @ 0x4D
  1285  00004E                     	ds	1
  1286  00004F                     snake_main@ai:
  1287                           	opt callstack 0
  1288                           
  1289                           ; 1 bytes @ 0x4E
  1290  00004F                     	ds	1
  1291  000050                     snake_main@LastHighScore:
  1292                           	opt callstack 0
  1293                           
  1294                           ; 1 bytes @ 0x4F
  1295  000050                     	ds	1
  1296  000051                     snake_main@EndOfGame:
  1297                           	opt callstack 0
  1298                           
  1299                           ; 1 bytes @ 0x50
  1300  000051                     	ds	1
  1301  000052                     snake_main@berry:
  1302                           	opt callstack 0
  1303                           
  1304                           ; 2 bytes @ 0x51
  1305  000052                     	ds	2
  1306  000054                     snake_main@previous_direction:
  1307                           	opt callstack 0
  1308                           
  1309                           ; 1 bytes @ 0x53
  1310  000054                     	ds	1
  1311  000055                     snake_main@direction:
  1312                           	opt callstack 0
  1313                           
  1314                           ; 1 bytes @ 0x54
  1315  000055                     	ds	1
  1316  000056                     snake_main@snakeLength:
  1317                           	opt callstack 0
  1318                           
  1319                           ; 1 bytes @ 0x55
  1320  000056                     	ds	1
  1321  000057                     
  1322                           ; 1 bytes @ 0x56
  1323 ;;
  1324 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  1325 ;;
  1326 ;; *************** function _main *****************
  1327 ;; Defined at:
  1328 ;;		line 87 in file "pictris.c"
  1329 ;; Parameters:    Size  Location     Type
  1330 ;;		None
  1331 ;; Auto vars:     Size  Location     Type
  1332 ;;		None
  1333 ;; Return value:  Size  Location     Type
  1334 ;;                  1    wreg      void 
  1335 ;; Registers used:
  1336 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1337 ;; Tracked objects:
  1338 ;;		On entry : 0/0
  1339 ;;		On exit  : 0/0
  1340 ;;		Unchanged: 0/0
  1341 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1342 ;;      Params:         0       0       0       0       0       0       0
  1343 ;;      Locals:         0       0       0       0       0       0       0
  1344 ;;      Temps:          0       0       0       0       0       0       0
  1345 ;;      Totals:         0       0       0       0       0       0       0
  1346 ;;Total ram usage:        0 bytes
  1347 ;; Hardware stack levels required when called:   10
  1348 ;; This function calls:
  1349 ;;		_choosescreen
  1350 ;;		_get_mS
  1351 ;;		_initialise_hardware
  1352 ;;		_initialise_screen
  1353 ;;		_rnd_initialize
  1354 ;;		_set_mS
  1355 ;;		_snake_main
  1356 ;;		_start_button
  1357 ;;		_tetris_main
  1358 ;; This function is called by:
  1359 ;;		Startup code after reset
  1360 ;; This function uses a non-reentrant model
  1361 ;;
  1362                           
  1363                           	psect	text0
  1364  00215E                     __ptext0:
  1365                           	opt callstack 0
  1366  00215E                     _main:
  1367                           	opt callstack 21
  1368                           
  1369                           ;pictris.c: 90:     initialise_hardware();
  1370                           
  1371                           ;incstack = 0
  1372  00215E  EC91  F010         	call	_initialise_hardware	;wreg free
  1373  002162                     l77:
  1374                           
  1375                           ;pictris.c: 93:     {;pictris.c: 95:         start_button();
  1376  002162  ECCD  F011         	call	_start_button	;wreg free
  1377                           
  1378                           ;pictris.c: 96:         initialise_screen();
  1379  002166  EC2B  F013         	call	_initialise_screen	;wreg free
  1380                           
  1381                           ;pictris.c: 97:         game = choosescreen();
  1382  00216A  EC22  F006         	call	_choosescreen	;wreg free
  1383  00216E  6E5D               	movwf	_game,c
  1384                           
  1385                           ;pictris.c: 98:         rnd_initialize(get_mS());
  1386  002170  EC12  F013         	call	_get_mS	;wreg free
  1387  002174  500D               	movf	?_get_mS,w,c
  1388  002176  EC0D  F013         	call	_rnd_initialize
  1389                           
  1390                           ;pictris.c: 99:         set_mS(0);
  1391  00217A  0E00               	movlw	0
  1392  00217C  6E0E               	movwf	set_mS@amount+1,c
  1393  00217E  0E00               	movlw	0
  1394  002180  6E0D               	movwf	set_mS@amount,c
  1395  002182  EC08  F013         	call	_set_mS	;wreg free
  1396                           
  1397                           ;pictris.c: 100:         if(game)
  1398  002186  505D               	movf	_game,w,c
  1399  002188  B4D8               	btfsc	status,2,c
  1400  00218A  D003               	goto	l5709
  1401                           
  1402                           ;pictris.c: 101:         {;pictris.c: 102:             tetris_main();
  1403  00218C  EC64  F005         	call	_tetris_main	;wreg free
  1404                           
  1405                           ;pictris.c: 103:         }
  1406  002190  D7E8               	goto	l77
  1407  002192                     l5709:
  1408                           
  1409                           ;pictris.c: 105:         {;pictris.c: 106:             snake_main();
  1410  002192  ECB2  F00A         	call	_snake_main	;wreg free
  1411  002196  D7E5               	goto	l77
  1412  002198                     __end_of_main:
  1413                           	opt callstack 0
  1414                           
  1415 ;; *************** function _tetris_main *****************
  1416 ;; Defined at:
  1417 ;;		line 374 in file "tetris.c"
  1418 ;; Parameters:    Size  Location     Type
  1419 ;;		None
  1420 ;; Auto vars:     Size  Location     Type
  1421 ;;  Screen_Data    16    0[BANK1 ] unsigned short [8]
  1422 ;;  newScreen       1   35[BANK1 ] _Bool 
  1423 ;;  tetris         28   39[BANK1 ] struct tetris
  1424 ;;  BackgroundDa   16   16[BANK1 ] unsigned short [8]
  1425 ;;  CheckForNewL    1   38[BANK1 ] _Bool 
  1426 ;;  EndOfGame       1   37[BANK1 ] _Bool 
  1427 ;;  NumberOfLine    1   36[BANK1 ] unsigned char 
  1428 ;;  LastHighScor    1   34[BANK1 ] unsigned char 
  1429 ;;  rotation        1   33[BANK1 ] enum E2586
  1430 ;; Return value:  Size  Location     Type
  1431 ;;                  1    wreg      void 
  1432 ;; Registers used:
  1433 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1434 ;; Tracked objects:
  1435 ;;		On entry : 0/0
  1436 ;;		On exit  : 0/0
  1437 ;;		Unchanged: 0/0
  1438 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1439 ;;      Params:         0       0       0       0       0       0       0
  1440 ;;      Locals:         0       0      67       0       0       0       0
  1441 ;;      Temps:          0       0       0       0       0       0       0
  1442 ;;      Totals:         0       0      67       0       0       0       0
  1443 ;;Total ram usage:       67 bytes
  1444 ;; Hardware stack levels used:    1
  1445 ;; Hardware stack levels required when called:    9
  1446 ;; This function calls:
  1447 ;;		_checkForLines
  1448 ;;		_clearArray
  1449 ;;		_mergeObjects
  1450 ;;		_moveObjectDown
  1451 ;;		_readHighScore
  1452 ;;		_selectNextObject
  1453 ;;		_set_screen
  1454 ;;		_show_score
  1455 ;;		_tetris_buttons
  1456 ;;		_tetris_screen
  1457 ;;		_writeHighScore
  1458 ;; This function is called by:
  1459 ;;		_main
  1460 ;; This function uses a non-reentrant model
  1461 ;;
  1462                           
  1463                           	psect	text1
  1464  000AC8                     __ptext1:
  1465                           	opt callstack 0
  1466  000AC8                     _tetris_main:
  1467                           	opt callstack 21
  1468                           
  1469                           ;tetris.c: 376:     uint16_t BackgroundData[8];;tetris.c: 377:     clearArray(Background
      +                          Data, 8);
  1470                           
  1471                           ;incstack = 0
  1472  000AC8  0E10               	movlw	low tetris_main@BackgroundData
  1473  000ACA  6E0D               	movwf	clearArray@pArray,c
  1474  000ACC  0E01               	movlw	high tetris_main@BackgroundData
  1475  000ACE  6E0E               	movwf	clearArray@pArray+1,c
  1476  000AD0  0E00               	movlw	0
  1477  000AD2  6E10               	movwf	clearArray@size+1,c
  1478  000AD4  0E08               	movlw	8
  1479  000AD6  6E0F               	movwf	clearArray@size,c
  1480  000AD8  EC50  F011         	call	_clearArray	;wreg free
  1481                           
  1482                           ;tetris.c: 379:     tetris_screen();
  1483  000ADC  ECA9  F012         	call	_tetris_screen	;wreg free
  1484                           
  1485                           ;tetris.c: 380:     uint8_t LastHighScore = readHighScore(0);
  1486  000AE0  0E00               	movlw	0
  1487  000AE2  ECA6  F011         	call	_readHighScore
  1488  000AE6  0101               	movlb	1	; () banked
  1489  000AE8  6F22               	movwf	tetris_main@LastHighScore& (0+255),b
  1490                           
  1491                           ; BSR set to: 1
  1492                           ;tetris.c: 381:     show_score(LastHighScore);
  1493  000AEA  5122               	movf	tetris_main@LastHighScore& (0+255),w,b
  1494  000AEC  EC7D  F007         	call	_show_score
  1495                           
  1496                           ;tetris.c: 383:     struct tetris tetris;;tetris.c: 384:     clearArray(tetris.currentbl
      +                          ock.graphic, 8);
  1497  000AF0  0E27               	movlw	low tetris_main@tetris
  1498  000AF2  6E0D               	movwf	clearArray@pArray,c
  1499  000AF4  0E01               	movlw	high tetris_main@tetris
  1500  000AF6  6E0E               	movwf	clearArray@pArray+1,c
  1501  000AF8  0E00               	movlw	0
  1502  000AFA  6E10               	movwf	clearArray@size+1,c
  1503  000AFC  0E08               	movlw	8
  1504  000AFE  6E0F               	movwf	clearArray@size,c
  1505  000B00  EC50  F011         	call	_clearArray	;wreg free
  1506                           
  1507                           ;tetris.c: 386:     tetris.countblocks = 7;
  1508  000B04  0E07               	movlw	7
  1509  000B06  0101               	movlb	1	; () banked
  1510  000B08  6F3B               	movwf	(tetris_main@tetris+20)& (0+255),b
  1511                           
  1512                           ; BSR set to: 1
  1513                           ;tetris.c: 388:     uint8_t NumberOfLines = 0;
  1514  000B0A  0E00               	movlw	0
  1515  000B0C  6F24               	movwf	tetris_main@NumberOfLines& (0+255),b
  1516                           
  1517                           ; BSR set to: 1
  1518                           ;tetris.c: 390:     _Bool CheckForNewLines = 0;
  1519  000B0E  0E00               	movlw	0
  1520  000B10  6F26               	movwf	tetris_main@CheckForNewLines& (0+255),b
  1521                           
  1522                           ; BSR set to: 1
  1523                           ;tetris.c: 392:     selectNextObject(&tetris);
  1524  000B12  0E27               	movlw	low tetris_main@tetris
  1525  000B14  6E17               	movwf	selectNextObject@tetris,c
  1526  000B16  0E01               	movlw	high tetris_main@tetris
  1527  000B18  6E18               	movwf	selectNextObject@tetris+1,c
  1528  000B1A  ECBE  F003         	call	_selectNextObject	;wreg free
  1529                           
  1530                           ;tetris.c: 393:     set_screen(tetris.currentblock.graphic);
  1531  000B1E  0E27               	movlw	low tetris_main@tetris
  1532  000B20  6E17               	movwf	set_screen@newData,c
  1533  000B22  0E01               	movlw	high tetris_main@tetris
  1534  000B24  6E18               	movwf	set_screen@newData+1,c
  1535  000B26  EC06  F012         	call	_set_screen	;wreg free
  1536                           
  1537                           ;tetris.c: 395:     rotation_t rotation;;tetris.c: 397:     _Bool EndOfGame = 0;
  1538  000B2A  0E00               	movlw	0
  1539  000B2C  0101               	movlb	1	; () banked
  1540  000B2E  6F25               	movwf	tetris_main@EndOfGame& (0+255),b
  1541                           
  1542                           ; BSR set to: 1
  1543                           ;tetris.c: 398:     DropObject = 0;
  1544  000B30  0E00               	movlw	0
  1545  000B32  0100               	movlb	0	; () banked
  1546  000B34  6FB7               	movwf	_DropObject& (0+255),b	;volatile
  1547  000B36                     l5629:
  1548                           
  1549                           ;tetris.c: 400:     {;tetris.c: 401:         _Bool newScreen;;tetris.c: 402:         new
      +                          Screen = tetris_buttons(&tetris, BackgroundData, &CheckForNewLines, &EndOfGame, &rotatio
      +                          n) || newScreen;
  1550  000B36  0E01               	movlw	1
  1551  000B38  0101               	movlb	1	; () banked
  1552  000B3A  6F20               	movwf	_tetris_main$701& (0+255),b
  1553                           
  1554                           ; BSR set to: 1
  1555  000B3C  0E27               	movlw	low tetris_main@tetris
  1556  000B3E  6E43               	movwf	tetris_buttons@tetris,c
  1557  000B40  0E01               	movlw	high tetris_main@tetris
  1558  000B42  6E44               	movwf	tetris_buttons@tetris+1,c
  1559  000B44  0E10               	movlw	low tetris_main@BackgroundData
  1560  000B46  6E45               	movwf	tetris_buttons@BackgroundData,c
  1561  000B48  0E01               	movlw	high tetris_main@BackgroundData
  1562  000B4A  6E46               	movwf	tetris_buttons@BackgroundData+1,c
  1563  000B4C  0E26               	movlw	low tetris_main@CheckForNewLines
  1564  000B4E  6E47               	movwf	tetris_buttons@CheckForNewLines,c
  1565  000B50  0E01               	movlw	high tetris_main@CheckForNewLines
  1566  000B52  6E48               	movwf	tetris_buttons@CheckForNewLines+1,c
  1567  000B54  0E25               	movlw	low tetris_main@EndOfGame
  1568  000B56  6E49               	movwf	tetris_buttons@EndOfGame,c
  1569  000B58  0E01               	movlw	high tetris_main@EndOfGame
  1570  000B5A  6E4A               	movwf	tetris_buttons@EndOfGame+1,c
  1571  000B5C  0E21               	movlw	low tetris_main@rotation
  1572  000B5E  6E4B               	movwf	tetris_buttons@rotation,c
  1573  000B60  0E01               	movlw	high tetris_main@rotation
  1574  000B62  6E4C               	movwf	tetris_buttons@rotation+1,c
  1575  000B64  EC16  F00B         	call	_tetris_buttons	;wreg free
  1576  000B68  0900               	iorlw	0
  1577  000B6A  A4D8               	btfss	status,2,c
  1578  000B6C  D006               	goto	l281
  1579  000B6E  0101               	movlb	1	; () banked
  1580  000B70  5123               	movf	tetris_main@newScreen& (0+255),w,b
  1581  000B72  A4D8               	btfss	status,2,c
  1582  000B74  D002               	goto	l281
  1583                           
  1584                           ; BSR set to: 1
  1585  000B76  0E00               	movlw	0
  1586  000B78  6F20               	movwf	_tetris_main$701& (0+255),b
  1587  000B7A                     l281:
  1588  000B7A  0101               	movlb	1	; () banked
  1589  000B7C  5120               	movf	_tetris_main$701& (0+255),w,b
  1590  000B7E  B4D8               	btfsc	status,2,c
  1591  000B80  D002               	goto	u5790
  1592  000B82  0E01               	movlw	1
  1593  000B84  D001               	goto	u5800
  1594  000B86                     u5790:
  1595  000B86  0E00               	movlw	0
  1596  000B88                     u5800:
  1597  000B88  6F23               	movwf	tetris_main@newScreen& (0+255),b
  1598                           
  1599                           ;tetris.c: 403:         if(DropObject)
  1600  000B8A  0100               	movlb	0	; () banked
  1601  000B8C  51B7               	movf	_DropObject& (0+255),w,b	;volatile
  1602  000B8E  B4D8               	btfsc	status,2,c
  1603  000B90  D017               	goto	l5643
  1604                           
  1605                           ; BSR set to: 0
  1606                           ;tetris.c: 404:         {;tetris.c: 405:             DropObject = 0;
  1607  000B92  0E00               	movlw	0
  1608  000B94  6FB7               	movwf	_DropObject& (0+255),b	;volatile
  1609                           
  1610                           ; BSR set to: 0
  1611                           ;tetris.c: 406:             moveObjectDown(&tetris, BackgroundData, &CheckForNewLines, &
      +                          EndOfGame);
  1612  000B96  0E27               	movlw	low tetris_main@tetris
  1613  000B98  6E2C               	movwf	moveObjectDown@tetris,c
  1614  000B9A  0E01               	movlw	high tetris_main@tetris
  1615  000B9C  6E2D               	movwf	moveObjectDown@tetris+1,c
  1616  000B9E  0E10               	movlw	low tetris_main@BackgroundData
  1617  000BA0  6E2E               	movwf	moveObjectDown@BackgroundData,c
  1618  000BA2  0E01               	movlw	high tetris_main@BackgroundData
  1619  000BA4  6E2F               	movwf	moveObjectDown@BackgroundData+1,c
  1620  000BA6  0E26               	movlw	low tetris_main@CheckForNewLines
  1621  000BA8  6E30               	movwf	moveObjectDown@CheckForNewLines,c
  1622  000BAA  0E01               	movlw	high tetris_main@CheckForNewLines
  1623  000BAC  6E31               	movwf	moveObjectDown@CheckForNewLines+1,c
  1624  000BAE  0E25               	movlw	low tetris_main@EndOfGame
  1625  000BB0  6E32               	movwf	moveObjectDown@EndOfGame,c
  1626  000BB2  0E01               	movlw	high tetris_main@EndOfGame
  1627  000BB4  6E33               	movwf	moveObjectDown@EndOfGame+1,c
  1628  000BB6  EC3B  F00A         	call	_moveObjectDown	;wreg free
  1629                           
  1630                           ;tetris.c: 407:             newScreen = 1;
  1631  000BBA  0E01               	movlw	1
  1632  000BBC  0101               	movlb	1	; () banked
  1633  000BBE  6F23               	movwf	tetris_main@newScreen& (0+255),b
  1634  000BC0                     l5643:
  1635                           
  1636                           ;tetris.c: 409:         if(CheckForNewLines)
  1637  000BC0  0101               	movlb	1	; () banked
  1638  000BC2  5126               	movf	tetris_main@CheckForNewLines& (0+255),w,b
  1639  000BC4  B4D8               	btfsc	status,2,c
  1640  000BC6  D00B               	goto	l5649
  1641                           
  1642                           ; BSR set to: 1
  1643                           ;tetris.c: 410:         {;tetris.c: 411:             NumberOfLines = NumberOfLines + che
      +                          ckForLines(BackgroundData);
  1644  000BC8  0E10               	movlw	low tetris_main@BackgroundData
  1645  000BCA  6E25               	movwf	checkForLines@pObject,c
  1646  000BCC  0E01               	movlw	high tetris_main@BackgroundData
  1647  000BCE  6E26               	movwf	checkForLines@pObject+1,c
  1648  000BD0  EC42  F00D         	call	_checkForLines	;wreg free
  1649  000BD4  0101               	movlb	1	; () banked
  1650  000BD6  2524               	addwf	tetris_main@NumberOfLines& (0+255),w,b
  1651  000BD8  6F24               	movwf	tetris_main@NumberOfLines& (0+255),b
  1652                           
  1653                           ; BSR set to: 1
  1654                           ;tetris.c: 412:             newScreen = 1;
  1655  000BDA  0E01               	movlw	1
  1656  000BDC  6F23               	movwf	tetris_main@newScreen& (0+255),b
  1657  000BDE                     l5649:
  1658                           
  1659                           ; BSR set to: 1
  1660                           ;tetris.c: 414:         if(newScreen)
  1661  000BDE  5123               	movf	tetris_main@newScreen& (0+255),w,b
  1662  000BE0  B4D8               	btfsc	status,2,c
  1663  000BE2  D021               	goto	l5657
  1664                           
  1665                           ; BSR set to: 1
  1666                           ;tetris.c: 415:         {;tetris.c: 416:             uint16_t Screen_Data[8];;tetris.c: 
      +                          417:             mergeObjects(BackgroundData, Screen_Data, OVERRIDE);
  1667  000BE4  0E10               	movlw	low tetris_main@BackgroundData
  1668  000BE6  6E0D               	movwf	mergeObjects@pSource,c
  1669  000BE8  0E01               	movlw	high tetris_main@BackgroundData
  1670  000BEA  6E0E               	movwf	mergeObjects@pSource+1,c
  1671  000BEC  0E00               	movlw	low tetris_main@Screen_Data
  1672  000BEE  6E0F               	movwf	mergeObjects@pTarget,c
  1673  000BF0  0E01               	movlw	high tetris_main@Screen_Data
  1674  000BF2  6E10               	movwf	mergeObjects@pTarget+1,c
  1675  000BF4  0E00               	movlw	0
  1676  000BF6  6E11               	movwf	mergeObjects@mode,c
  1677  000BF8  ECBB  F009         	call	_mergeObjects	;wreg free
  1678                           
  1679                           ;tetris.c: 418:             mergeObjects(tetris.currentblock.graphic, Screen_Data, MERGE
      +                          );
  1680  000BFC  0E27               	movlw	low tetris_main@tetris
  1681  000BFE  6E0D               	movwf	mergeObjects@pSource,c
  1682  000C00  0E01               	movlw	high tetris_main@tetris
  1683  000C02  6E0E               	movwf	mergeObjects@pSource+1,c
  1684  000C04  0E00               	movlw	low tetris_main@Screen_Data
  1685  000C06  6E0F               	movwf	mergeObjects@pTarget,c
  1686  000C08  0E01               	movlw	high tetris_main@Screen_Data
  1687  000C0A  6E10               	movwf	mergeObjects@pTarget+1,c
  1688  000C0C  0E01               	movlw	1
  1689  000C0E  6E11               	movwf	mergeObjects@mode,c
  1690  000C10  ECBB  F009         	call	_mergeObjects	;wreg free
  1691                           
  1692                           ;tetris.c: 419:             set_screen(Screen_Data);
  1693  000C14  0E00               	movlw	low tetris_main@Screen_Data
  1694  000C16  6E17               	movwf	set_screen@newData,c
  1695  000C18  0E01               	movlw	high tetris_main@Screen_Data
  1696  000C1A  6E18               	movwf	set_screen@newData+1,c
  1697  000C1C  EC06  F012         	call	_set_screen	;wreg free
  1698                           
  1699                           ;tetris.c: 420:             newScreen = 0;
  1700  000C20  0E00               	movlw	0
  1701  000C22  0101               	movlb	1	; () banked
  1702  000C24  6F23               	movwf	tetris_main@newScreen& (0+255),b
  1703  000C26                     l5657:
  1704                           
  1705                           ; BSR set to: 1
  1706                           ;tetris.c: 422:     }
  1707  000C26  5125               	movf	tetris_main@EndOfGame& (0+255),w,b
  1708  000C28  B4D8               	btfsc	status,2,c
  1709  000C2A  D785               	goto	l5629
  1710                           
  1711                           ; BSR set to: 1
  1712                           ;tetris.c: 424:     writeHighScore(0, LastHighScore, NumberOfLines);
  1713  000C2C  C122  F00F         	movff	tetris_main@LastHighScore,writeHighScore@highscore
  1714  000C30  C124  F010         	movff	tetris_main@NumberOfLines,writeHighScore@scored
  1715  000C34  0E00               	movlw	0
  1716  000C36  ECCF  F012         	call	_writeHighScore
  1717                           
  1718                           ;tetris.c: 425:     show_score(NumberOfLines);
  1719  000C3A  0101               	movlb	1	; () banked
  1720  000C3C  5124               	movf	tetris_main@NumberOfLines& (0+255),w,b
  1721  000C3E  EC7D  F007         	call	_show_score
  1722  000C42  0012               	return		;funcret
  1723  000C44                     __end_of_tetris_main:
  1724                           	opt callstack 0
  1725                           
  1726 ;; *************** function _tetris_screen *****************
  1727 ;; Defined at:
  1728 ;;		line 35 in file "tetris.c"
  1729 ;; Parameters:    Size  Location     Type
  1730 ;;		None
  1731 ;; Auto vars:     Size  Location     Type
  1732 ;;		None
  1733 ;; Return value:  Size  Location     Type
  1734 ;;                  1    wreg      void 
  1735 ;; Registers used:
  1736 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  1737 ;; Tracked objects:
  1738 ;;		On entry : 0/0
  1739 ;;		On exit  : 0/0
  1740 ;;		Unchanged: 0/0
  1741 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1742 ;;      Params:         0       0       0       0       0       0       0
  1743 ;;      Locals:         0       0       0       0       0       0       0
  1744 ;;      Temps:          0       0       0       0       0       0       0
  1745 ;;      Totals:         0       0       0       0       0       0       0
  1746 ;;Total ram usage:        0 bytes
  1747 ;; Hardware stack levels used:    1
  1748 ;; Hardware stack levels required when called:    7
  1749 ;; This function calls:
  1750 ;;		_set_splashscreen
  1751 ;;		_waitms
  1752 ;; This function is called by:
  1753 ;;		_tetris_main
  1754 ;; This function uses a non-reentrant model
  1755 ;;
  1756                           
  1757                           	psect	text2
  1758  002552                     __ptext2:
  1759                           	opt callstack 0
  1760  002552                     _tetris_screen:
  1761                           	opt callstack 22
  1762                           
  1763                           ;tetris.c: 37:     set_splashscreen(TETRIS);
  1764                           
  1765                           ;incstack = 0
  1766  002552  0EEF               	movlw	low _TETRIS
  1767  002554  6E17               	movwf	set_splashscreen@newData,c
  1768  002556  0E7F               	movlw	high _TETRIS
  1769  002558  6E18               	movwf	set_splashscreen@newData+1,c
  1770  00255A  EC19  F012         	call	_set_splashscreen	;wreg free
  1771                           
  1772                           ;tetris.c: 38:     waitms(3500);
  1773  00255E  0E0D               	movlw	13
  1774  002560  6E0E               	movwf	waitms@t+1,c
  1775  002562  0EAC               	movlw	172
  1776  002564  6E0D               	movwf	waitms@t,c
  1777  002566  ECDA  F012         	call	_waitms	;wreg free
  1778  00256A  0012               	return		;funcret
  1779  00256C                     __end_of_tetris_screen:
  1780                           	opt callstack 0
  1781                           
  1782 ;; *************** function _tetris_buttons *****************
  1783 ;; Defined at:
  1784 ;;		line 348 in file "tetris.c"
  1785 ;; Parameters:    Size  Location     Type
  1786 ;;  tetris          2   66[COMRAM] PTR struct tetris
  1787 ;;		 -> tetris_main@tetris(28), 
  1788 ;;  BackgroundDa    2   68[COMRAM] PTR unsigned short 
  1789 ;;		 -> tetris_main@BackgroundData(16), 
  1790 ;;  CheckForNewL    2   70[COMRAM] PTR _Bool 
  1791 ;;		 -> tetris_main@CheckForNewLines(1), 
  1792 ;;  EndOfGame       2   72[COMRAM] PTR _Bool 
  1793 ;;		 -> tetris_main@EndOfGame(1), 
  1794 ;;  rotation        2   74[COMRAM] PTR enum E2586
  1795 ;;		 -> tetris_main@rotation(1), 
  1796 ;; Auto vars:     Size  Location     Type
  1797 ;;  returnbool      1   76[COMRAM] _Bool 
  1798 ;; Return value:  Size  Location     Type
  1799 ;;                  1    wreg      _Bool 
  1800 ;; Registers used:
  1801 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1802 ;; Tracked objects:
  1803 ;;		On entry : 0/0
  1804 ;;		On exit  : 0/0
  1805 ;;		Unchanged: 0/0
  1806 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1807 ;;      Params:        10       0       0       0       0       0       0
  1808 ;;      Locals:         1       0       0       0       0       0       0
  1809 ;;      Temps:          0       0       0       0       0       0       0
  1810 ;;      Totals:        11       0       0       0       0       0       0
  1811 ;;Total ram usage:       11 bytes
  1812 ;; Hardware stack levels used:    1
  1813 ;; Hardware stack levels required when called:    8
  1814 ;; This function calls:
  1815 ;;		_checkDown
  1816 ;;		_checkLeft
  1817 ;;		_checkRight
  1818 ;;		_checkUp
  1819 ;;		_tetris_button_down
  1820 ;;		_tetris_button_left
  1821 ;;		_tetris_button_right
  1822 ;;		_tetris_button_up
  1823 ;; This function is called by:
  1824 ;;		_tetris_main
  1825 ;; This function uses a non-reentrant model
  1826 ;;
  1827                           
  1828                           	psect	text3
  1829  00162C                     __ptext3:
  1830                           	opt callstack 0
  1831  00162C                     _tetris_buttons:
  1832                           	opt callstack 21
  1833                           
  1834                           ;tetris.c: 348: _Bool tetris_buttons(struct tetris *tetris, uint16_t *BackgroundData, _B
      +                          ool *CheckForNewLines, _Bool *EndOfGame, rotation_t *rotation);tetris.c: 349: {;tetris.c
      +                          : 350:     _Bool returnbool = 0;
  1835                           
  1836                           ;incstack = 0
  1837  00162C  0E00               	movlw	0
  1838  00162E  6E4D               	movwf	tetris_buttons@returnbool,c
  1839                           
  1840                           ;tetris.c: 351:     if(checkLeft(1))
  1841  001630  0E01               	movlw	1
  1842  001632  ECF3  F011         	call	_checkLeft
  1843  001636  0900               	iorlw	0
  1844  001638  B4D8               	btfsc	status,2,c
  1845  00163A  D011               	goto	l5329
  1846                           
  1847                           ;tetris.c: 352:     {;tetris.c: 353:         *CheckForNewLines = tetris_button_left(&tet
      +                          ris->currentblock, BackgroundData);
  1848  00163C  C043  F01A         	movff	tetris_buttons@tetris,tetris_button_left@tetrisblock
  1849  001640  C044  F01B         	movff	tetris_buttons@tetris+1,tetris_button_left@tetrisblock+1
  1850  001644  C045  F01C         	movff	tetris_buttons@BackgroundData,tetris_button_left@BackgroundData
  1851  001648  C046  F01D         	movff	tetris_buttons@BackgroundData+1,tetris_button_left@BackgroundData+1
  1852  00164C  EC25  F00C         	call	_tetris_button_left	;wreg free
  1853  001650  C047  FFD9         	movff	tetris_buttons@CheckForNewLines,fsr2l
  1854  001654  C048  FFDA         	movff	tetris_buttons@CheckForNewLines+1,fsr2h
  1855  001658  6EDF               	movwf	indf2,c
  1856                           
  1857                           ;tetris.c: 354:         returnbool = 1;
  1858  00165A  0E01               	movlw	1
  1859  00165C  6E4D               	movwf	tetris_buttons@returnbool,c
  1860  00165E                     l5329:
  1861                           
  1862                           ;tetris.c: 356:     if(checkRight(1))
  1863  00165E  0E01               	movlw	1
  1864  001660  ECE0  F011         	call	_checkRight
  1865  001664  0900               	iorlw	0
  1866  001666  B4D8               	btfsc	status,2,c
  1867  001668  D011               	goto	l5335
  1868                           
  1869                           ;tetris.c: 357:     {;tetris.c: 358:         *CheckForNewLines = tetris_button_right(&te
      +                          tris->currentblock, BackgroundData);
  1870  00166A  C043  F01A         	movff	tetris_buttons@tetris,tetris_button_right@tetrisblock
  1871  00166E  C044  F01B         	movff	tetris_buttons@tetris+1,tetris_button_right@tetrisblock+1
  1872  001672  C045  F01C         	movff	tetris_buttons@BackgroundData,tetris_button_right@BackgroundData
  1873  001676  C046  F01D         	movff	tetris_buttons@BackgroundData+1,tetris_button_right@BackgroundData+1
  1874  00167A  EC6E  F00C         	call	_tetris_button_right	;wreg free
  1875  00167E  C047  FFD9         	movff	tetris_buttons@CheckForNewLines,fsr2l
  1876  001682  C048  FFDA         	movff	tetris_buttons@CheckForNewLines+1,fsr2h
  1877  001686  6EDF               	movwf	indf2,c
  1878                           
  1879                           ;tetris.c: 359:         returnbool = 1;
  1880  001688  0E01               	movlw	1
  1881  00168A  6E4D               	movwf	tetris_buttons@returnbool,c
  1882  00168C                     l5335:
  1883                           
  1884                           ;tetris.c: 361:     if(checkUp(1))
  1885  00168C  0E01               	movlw	1
  1886  00168E  EC2C  F012         	call	_checkUp
  1887  001692  0900               	iorlw	0
  1888  001694  B4D8               	btfsc	status,2,c
  1889  001696  D010               	goto	l5341
  1890                           
  1891                           ;tetris.c: 362:     {;tetris.c: 363:         tetris_button_up(tetris, BackgroundData, ro
      +                          tation);
  1892  001698  C043  F02A         	movff	tetris_buttons@tetris,tetris_button_up@tetris
  1893  00169C  C044  F02B         	movff	tetris_buttons@tetris+1,tetris_button_up@tetris+1
  1894  0016A0  C045  F02C         	movff	tetris_buttons@BackgroundData,tetris_button_up@BackgroundData
  1895  0016A4  C046  F02D         	movff	tetris_buttons@BackgroundData+1,tetris_button_up@BackgroundData+1
  1896  0016A8  C04B  F02E         	movff	tetris_buttons@rotation,tetris_button_up@rotation
  1897  0016AC  C04C  F02F         	movff	tetris_buttons@rotation+1,tetris_button_up@rotation+1
  1898  0016B0  EC78  F00B         	call	_tetris_button_up	;wreg free
  1899                           
  1900                           ;tetris.c: 364:         returnbool = 1;
  1901  0016B4  0E01               	movlw	1
  1902  0016B6  6E4D               	movwf	tetris_buttons@returnbool,c
  1903  0016B8                     l5341:
  1904                           
  1905                           ;tetris.c: 366:     if(checkDown(1))
  1906  0016B8  0E01               	movlw	1
  1907  0016BA  EC3F  F012         	call	_checkDown
  1908  0016BE  0900               	iorlw	0
  1909  0016C0  B4D8               	btfsc	status,2,c
  1910  0016C2  D014               	goto	l5347
  1911                           
  1912                           ;tetris.c: 367:     {;tetris.c: 368:         tetris_button_down(tetris, BackgroundData, 
      +                          CheckForNewLines, EndOfGame);
  1913  0016C4  C043  F037         	movff	tetris_buttons@tetris,tetris_button_down@tetris
  1914  0016C8  C044  F038         	movff	tetris_buttons@tetris+1,tetris_button_down@tetris+1
  1915  0016CC  C045  F039         	movff	tetris_buttons@BackgroundData,tetris_button_down@BackgroundData
  1916  0016D0  C046  F03A         	movff	tetris_buttons@BackgroundData+1,tetris_button_down@BackgroundData+1
  1917  0016D4  C047  F03B         	movff	tetris_buttons@CheckForNewLines,tetris_button_down@CheckForNewLines
  1918  0016D8  C048  F03C         	movff	tetris_buttons@CheckForNewLines+1,tetris_button_down@CheckForNewLines+1
  1919  0016DC  C049  F03D         	movff	tetris_buttons@EndOfGame,tetris_button_down@EndOfGame
  1920  0016E0  C04A  F03E         	movff	tetris_buttons@EndOfGame+1,tetris_button_down@EndOfGame+1
  1921  0016E4  EC67  F011         	call	_tetris_button_down	;wreg free
  1922                           
  1923                           ;tetris.c: 369:         returnbool = 1;
  1924  0016E8  0E01               	movlw	1
  1925  0016EA  6E4D               	movwf	tetris_buttons@returnbool,c
  1926  0016EC                     l5347:
  1927                           
  1928                           ;tetris.c: 371:     return returnbool;
  1929  0016EC  504D               	movf	tetris_buttons@returnbool,w,c
  1930  0016EE  0012               	return		;funcret
  1931  0016F0                     __end_of_tetris_buttons:
  1932                           	opt callstack 0
  1933                           
  1934 ;; *************** function _tetris_button_up *****************
  1935 ;; Defined at:
  1936 ;;		line 310 in file "tetris.c"
  1937 ;; Parameters:    Size  Location     Type
  1938 ;;  tetris          2   41[COMRAM] PTR struct tetris
  1939 ;;		 -> tetris_main@tetris(28), 
  1940 ;;  BackgroundDa    2   43[COMRAM] PTR unsigned short 
  1941 ;;		 -> tetris_main@BackgroundData(16), 
  1942 ;;  rotation        2   45[COMRAM] PTR enum E2586
  1943 ;;		 -> tetris_main@rotation(1), 
  1944 ;; Auto vars:     Size  Location     Type
  1945 ;;  tetrisblock     2   64[COMRAM] PTR struct shape
  1946 ;;		 -> removeLine@currentLine(1), tetris.currentblock(19), tetris_main@tetris(28), 
  1947 ;;  tmpObjectDat   16   48[COMRAM] unsigned short [8]
  1948 ;; Return value:  Size  Location     Type
  1949 ;;                  1    wreg      void 
  1950 ;; Registers used:
  1951 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1952 ;; Tracked objects:
  1953 ;;		On entry : 0/0
  1954 ;;		On exit  : 0/0
  1955 ;;		Unchanged: 0/0
  1956 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1957 ;;      Params:         6       0       0       0       0       0       0
  1958 ;;      Locals:        18       0       0       0       0       0       0
  1959 ;;      Temps:          1       0       0       0       0       0       0
  1960 ;;      Totals:        25       0       0       0       0       0       0
  1961 ;;Total ram usage:       25 bytes
  1962 ;; Hardware stack levels used:    1
  1963 ;; Hardware stack levels required when called:    6
  1964 ;; This function calls:
  1965 ;;		_clearArray
  1966 ;;		_collisionDetect
  1967 ;;		_mergeObjects
  1968 ;;		_newRotation
  1969 ;;		_pixelCount
  1970 ;; This function is called by:
  1971 ;;		_tetris_buttons
  1972 ;; This function uses a non-reentrant model
  1973 ;;
  1974                           
  1975                           	psect	text4
  1976  0016F0                     __ptext4:
  1977                           	opt callstack 0
  1978  0016F0                     _tetris_button_up:
  1979                           	opt callstack 22
  1980                           
  1981                           ;tetris.c: 310: void tetris_button_up(struct tetris *tetris, uint16_t *BackgroundData, r
      +                          otation_t *rotation);tetris.c: 311: {;tetris.c: 312:     uint16_t tmpObjectData[8];;tetr
      +                          is.c: 313:     clearArray(tmpObjectData, 8);
  1982                           
  1983                           ;incstack = 0
  1984  0016F0  0E31               	movlw	low tetris_button_up@tmpObjectData
  1985  0016F2  6E0D               	movwf	clearArray@pArray,c
  1986  0016F4  0E00               	movlw	high tetris_button_up@tmpObjectData
  1987  0016F6  6E0E               	movwf	clearArray@pArray+1,c
  1988  0016F8  0E00               	movlw	0
  1989  0016FA  6E10               	movwf	clearArray@size+1,c
  1990  0016FC  0E08               	movlw	8
  1991  0016FE  6E0F               	movwf	clearArray@size,c
  1992  001700  EC50  F011         	call	_clearArray	;wreg free
  1993                           
  1994                           ;tetris.c: 315:     newRotation(tetris, tmpObjectData, rotation);
  1995  001704  C02A  F017         	movff	tetris_button_up@tetris,newRotation@tetris
  1996  001708  C02B  F018         	movff	tetris_button_up@tetris+1,newRotation@tetris+1
  1997  00170C  0E31               	movlw	low tetris_button_up@tmpObjectData
  1998  00170E  6E19               	movwf	newRotation@pTarget,c
  1999  001710  0E00               	movlw	high tetris_button_up@tmpObjectData
  2000  001712  6E1A               	movwf	newRotation@pTarget+1,c
  2001  001714  C02E  F01B         	movff	tetris_button_up@rotation,newRotation@rotation
  2002  001718  C02F  F01C         	movff	tetris_button_up@rotation+1,newRotation@rotation+1
  2003  00171C  ECC7  F002         	call	_newRotation	;wreg free
  2004                           
  2005                           ;tetris.c: 317:     {;tetris.c: 318:     struct shape *tetrisblock = &tetris->currentblo
      +                          ck;
  2006  001720  C02A  F041         	movff	tetris_button_up@tetris,tetris_button_up@tetrisblock
  2007  001724  C02B  F042         	movff	tetris_button_up@tetris+1,tetris_button_up@tetrisblock+1
  2008                           
  2009                           ;tetris.c: 320:     if(pixelCount(tetrisblock->graphic) == pixelCount(tmpObjectData))
  2010  001728  C041  F00D         	movff	tetris_button_up@tetrisblock,pixelCount@pSource
  2011  00172C  C042  F00E         	movff	tetris_button_up@tetrisblock+1,pixelCount@pSource+1
  2012  001730  EC01  F00F         	call	_pixelCount	;wreg free
  2013  001734  6E30               	movwf	??_tetris_button_up& (0+255),c
  2014  001736  0E31               	movlw	low tetris_button_up@tmpObjectData
  2015  001738  6E0D               	movwf	pixelCount@pSource,c
  2016  00173A  0E00               	movlw	high tetris_button_up@tmpObjectData
  2017  00173C  6E0E               	movwf	pixelCount@pSource+1,c
  2018  00173E  EC01  F00F         	call	_pixelCount	;wreg free
  2019  001742  1830               	xorwf	??_tetris_button_up,w,c
  2020  001744  A4D8               	btfss	status,2,c
  2021  001746  0012               	return	
  2022                           
  2023                           ;tetris.c: 321:     {;tetris.c: 323:         if(!collisionDetect(tmpObjectData, Backgrou
      +                          ndData))
  2024  001748  0E31               	movlw	low tetris_button_up@tmpObjectData
  2025  00174A  6E0D               	movwf	collisionDetect@pSource,c
  2026  00174C  0E00               	movlw	high tetris_button_up@tmpObjectData
  2027  00174E  6E0E               	movwf	collisionDetect@pSource+1,c
  2028  001750  C02C  F00F         	movff	tetris_button_up@BackgroundData,collisionDetect@pTarget
  2029  001754  C02D  F010         	movff	tetris_button_up@BackgroundData+1,collisionDetect@pTarget+1
  2030  001758  ECA1  F00F         	call	_collisionDetect	;wreg free
  2031  00175C  0900               	iorlw	0
  2032  00175E  A4D8               	btfss	status,2,c
  2033  001760  0012               	return	
  2034                           
  2035                           ;tetris.c: 324:         {;tetris.c: 328:             mergeObjects(tmpObjectData, tetrisb
      +                          lock->graphic, OVERRIDE);
  2036  001762  0E31               	movlw	low tetris_button_up@tmpObjectData
  2037  001764  6E0D               	movwf	mergeObjects@pSource,c
  2038  001766  0E00               	movlw	high tetris_button_up@tmpObjectData
  2039  001768  6E0E               	movwf	mergeObjects@pSource+1,c
  2040  00176A  C041  F00F         	movff	tetris_button_up@tetrisblock,mergeObjects@pTarget
  2041  00176E  C042  F010         	movff	tetris_button_up@tetrisblock+1,mergeObjects@pTarget+1
  2042  001772  0E00               	movlw	0
  2043  001774  6E11               	movwf	mergeObjects@mode,c
  2044  001776  ECBB  F009         	call	_mergeObjects	;wreg free
  2045                           
  2046                           ;tetris.c: 329:             tetris->IsRotated = ~tetris->IsRotated;
  2047  00177A  EE20 F013          	lfsr	2,19
  2048  00177E  502A               	movf	tetris_button_up@tetris,w,c
  2049  001780  26D9               	addwf	fsr2l,f,c
  2050  001782  502B               	movf	tetris_button_up@tetris+1,w,c
  2051  001784  22DA               	addwfc	fsr2h,f,c
  2052  001786  EE10 F013          	lfsr	1,19
  2053  00178A  502A               	movf	tetris_button_up@tetris,w,c
  2054  00178C  26E1               	addwf	fsr1l,f,c
  2055  00178E  502B               	movf	tetris_button_up@tetris+1,w,c
  2056  001790  22E2               	addwfc	fsr1h,f,c
  2057  001792  04E6               	decf	postinc1,w,c
  2058  001794  B4D8               	btfsc	status,2,c
  2059  001796  D002               	goto	u5010
  2060  001798  0E01               	movlw	1
  2061  00179A  D001               	goto	u5020
  2062  00179C                     u5010:
  2063  00179C  0E00               	movlw	0
  2064  00179E                     u5020:
  2065  00179E  6EDF               	movwf	indf2,c
  2066  0017A0  0012               	return		;funcret
  2067  0017A2                     __end_of_tetris_button_up:
  2068                           	opt callstack 0
  2069                           
  2070 ;; *************** function _pixelCount *****************
  2071 ;; Defined at:
  2072 ;;		line 191 in file "shared_logic.c"
  2073 ;; Parameters:    Size  Location     Type
  2074 ;;  pSource         2   12[COMRAM] PTR volatile unsigned sh
  2075 ;;		 -> tetris_main@tetris.graphic(16), removeLine@currentLine.graphic(16), tetris.currentblock.graphic(16), tetris_butt
      +on_up@tetrisblock(2), 
  2076 ;;		 -> tetris_button_up@tmpObjectData(16), 
  2077 ;; Auto vars:     Size  Location     Type
  2078 ;;  y               1   23[COMRAM] unsigned char 
  2079 ;;  x               1   22[COMRAM] unsigned char 
  2080 ;;  r               1   21[COMRAM] unsigned char 
  2081 ;; Return value:  Size  Location     Type
  2082 ;;                  1    wreg      unsigned char 
  2083 ;; Registers used:
  2084 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  2085 ;; Tracked objects:
  2086 ;;		On entry : 0/0
  2087 ;;		On exit  : 0/0
  2088 ;;		Unchanged: 0/0
  2089 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2090 ;;      Params:         2       0       0       0       0       0       0
  2091 ;;      Locals:         3       0       0       0       0       0       0
  2092 ;;      Temps:          7       0       0       0       0       0       0
  2093 ;;      Totals:        12       0       0       0       0       0       0
  2094 ;;Total ram usage:       12 bytes
  2095 ;; Hardware stack levels used:    1
  2096 ;; Hardware stack levels required when called:    4
  2097 ;; This function calls:
  2098 ;;		Nothing
  2099 ;; This function is called by:
  2100 ;;		_tetris_button_up
  2101 ;; This function uses a non-reentrant model
  2102 ;;
  2103                           
  2104                           	psect	text5
  2105  001E02                     __ptext5:
  2106                           	opt callstack 0
  2107  001E02                     _pixelCount:
  2108                           	opt callstack 23
  2109                           
  2110                           ;shared_logic.c: 191: uint8_t pixelCount(volatile uint16_t * pSource);shared_logic.c: 19
      +                          2: {;shared_logic.c: 193:     uint8_t r = 0;
  2111                           
  2112                           ;incstack = 0
  2113  001E02  0E00               	movlw	0
  2114  001E04  6E16               	movwf	pixelCount@r,c
  2115                           
  2116                           ;shared_logic.c: 194:     uint8_t x = 8;
  2117  001E06  0E08               	movlw	8
  2118  001E08  6E17               	movwf	pixelCount@x,c
  2119                           
  2120                           ;shared_logic.c: 195:     while(x--)
  2121  001E0A  D02C               	goto	u4760
  2122  001E0C                     l4911:
  2123                           
  2124                           ;shared_logic.c: 196:     {;shared_logic.c: 197:         uint8_t y = 16;
  2125  001E0C  0E10               	movlw	16
  2126  001E0E  6E18               	movwf	pixelCount@y,c
  2127                           
  2128                           ;shared_logic.c: 198:         while(y--)
  2129  001E10  D025               	goto	l4917
  2130  001E12                     l4913:
  2131                           
  2132                           ;shared_logic.c: 199:         {;shared_logic.c: 200:             if(pSource[x] & (1<<y))
  2133  001E12  5017               	movf	pixelCount@x,w,c
  2134  001E14  0D02               	mullw	2
  2135  001E16  CFF3 F00F          	movff	prodl,??_pixelCount
  2136  001E1A  CFF4 F010          	movff	prodh,??_pixelCount+1
  2137  001E1E  500F               	movf	??_pixelCount,w,c
  2138  001E20  240D               	addwf	pixelCount@pSource,w,c
  2139  001E22  6ED9               	movwf	fsr2l,c
  2140  001E24  5010               	movf	??_pixelCount+1,w,c
  2141  001E26  200E               	addwfc	pixelCount@pSource+1,w,c
  2142  001E28  6EDA               	movwf	fsr2h,c
  2143  001E2A  CFDE F011          	movff	postinc2,??_pixelCount+2
  2144  001E2E  CFDD F012          	movff	postdec2,??_pixelCount+3
  2145  001E32  C018  F013         	movff	pixelCount@y,??_pixelCount+4
  2146  001E36  0E01               	movlw	1
  2147  001E38  6E14               	movwf	(??_pixelCount+5)& (0+255),c
  2148  001E3A  0E00               	movlw	0
  2149  001E3C  6E15               	movwf	(??_pixelCount+6)& (0+255),c
  2150  001E3E  2A13               	incf	??_pixelCount+4,f,c
  2151  001E40  D003               	goto	u4744
  2152  001E42                     u4745:
  2153  001E42  90D8               	bcf	status,0,c
  2154  001E44  3614               	rlcf	??_pixelCount+5,f,c
  2155  001E46  3615               	rlcf	??_pixelCount+6,f,c
  2156  001E48                     u4744:
  2157  001E48  2E13               	decfsz	??_pixelCount+4,f,c
  2158  001E4A  D7FB               	goto	u4745
  2159  001E4C  5011               	movf	??_pixelCount+2,w,c
  2160  001E4E  1614               	andwf	??_pixelCount+5,f,c
  2161  001E50  5012               	movf	??_pixelCount+3,w,c
  2162  001E52  1615               	andwf	??_pixelCount+6,f,c
  2163  001E54  5014               	movf	??_pixelCount+5,w,c
  2164  001E56  1015               	iorwf	??_pixelCount+6,w,c
  2165  001E58  A4D8               	btfss	status,2,c
  2166                           
  2167                           ;shared_logic.c: 201:             {;shared_logic.c: 202:                 r++;
  2168  001E5A  2A16               	incf	pixelCount@r,f,c
  2169  001E5C                     l4917:
  2170                           
  2171                           ;shared_logic.c: 198:         while(y--)
  2172  001E5C  0618               	decf	pixelCount@y,f,c
  2173  001E5E  2818               	incf	pixelCount@y,w,c
  2174  001E60  A4D8               	btfss	status,2,c
  2175  001E62  D7D7               	goto	l4913
  2176  001E64                     u4760:
  2177                           
  2178                           ;shared_logic.c: 195:     while(x--)
  2179  001E64  0617               	decf	pixelCount@x,f,c
  2180  001E66  2817               	incf	pixelCount@x,w,c
  2181  001E68  A4D8               	btfss	status,2,c
  2182  001E6A  D7D0               	goto	l4911
  2183                           
  2184                           ;shared_logic.c: 206:     return r;
  2185  001E6C  5016               	movf	pixelCount@r,w,c
  2186  001E6E  0012               	return		;funcret
  2187  001E70                     __end_of_pixelCount:
  2188                           	opt callstack 0
  2189                           
  2190 ;; *************** function _newRotation *****************
  2191 ;; Defined at:
  2192 ;;		line 196 in file "tetris.c"
  2193 ;; Parameters:    Size  Location     Type
  2194 ;;  tetris          2   22[COMRAM] PTR struct tetris
  2195 ;;		 -> tetris_main@tetris(28), 
  2196 ;;  pTarget         2   24[COMRAM] PTR unsigned short 
  2197 ;;		 -> tetris_button_up@tmpObjectData(16), 
  2198 ;;  rotation        2   26[COMRAM] PTR enum E2586
  2199 ;;		 -> tetris_main@rotation(1), 
  2200 ;; Auto vars:     Size  Location     Type
  2201 ;;  tetrisblock     2   39[COMRAM] PTR struct shape
  2202 ;;		 -> tetris.currentblock(19), tetris_main@tetris(28), 
  2203 ;;  y1              1   38[COMRAM] unsigned char 
  2204 ;;  x1              1   37[COMRAM] unsigned char 
  2205 ;;  y2              1   36[COMRAM] char 
  2206 ;;  x2              1   35[COMRAM] char 
  2207 ;; Return value:  Size  Location     Type
  2208 ;;                  1    wreg      void 
  2209 ;; Registers used:
  2210 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2211 ;; Tracked objects:
  2212 ;;		On entry : 0/0
  2213 ;;		On exit  : 0/0
  2214 ;;		Unchanged: 0/0
  2215 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2216 ;;      Params:         6       0       0       0       0       0       0
  2217 ;;      Locals:         6       0       0       0       0       0       0
  2218 ;;      Temps:          7       0       0       0       0       0       0
  2219 ;;      Totals:        19       0       0       0       0       0       0
  2220 ;;Total ram usage:       19 bytes
  2221 ;; Hardware stack levels used:    1
  2222 ;; Hardware stack levels required when called:    5
  2223 ;; This function calls:
  2224 ;;		___wmul
  2225 ;;		_clearArray
  2226 ;;		_memcpyvol
  2227 ;; This function is called by:
  2228 ;;		_tetris_button_up
  2229 ;; This function uses a non-reentrant model
  2230 ;;
  2231                           
  2232                           	psect	text6
  2233  00058E                     __ptext6:
  2234                           	opt callstack 0
  2235  00058E                     _newRotation:
  2236                           	opt callstack 22
  2237                           
  2238                           ;tetris.c: 196: void newRotation(struct tetris *tetris, uint16_t * pTarget, rotation_t *
      +                          rotation);tetris.c: 197: {;tetris.c: 198:     int8_t x2, y2;;tetris.c: 199:     uint8_t 
      +                          x1, y1;;tetris.c: 200:     struct shape *tetrisblock = &tetris->currentblock;
  2239                           
  2240                           ;incstack = 0
  2241  00058E  C017  F028         	movff	newRotation@tetris,newRotation@tetrisblock
  2242  000592  C018  F029         	movff	newRotation@tetris+1,newRotation@tetrisblock+1
  2243                           
  2244                           ;tetris.c: 202:     if(tetrisblock->limitedRotation == 2)
  2245  000596  EE20 F012          	lfsr	2,18
  2246  00059A  5028               	movf	newRotation@tetrisblock,w,c
  2247  00059C  26D9               	addwf	fsr2l,f,c
  2248  00059E  5029               	movf	newRotation@tetrisblock+1,w,c
  2249  0005A0  22DA               	addwfc	fsr2h,f,c
  2250  0005A2  0E02               	movlw	2
  2251  0005A4  18DE               	xorwf	postinc2,w,c
  2252  0005A6  A4D8               	btfss	status,2,c
  2253  0005A8  D00F               	goto	l4773
  2254                           
  2255                           ;tetris.c: 203:     {;tetris.c: 204:         memcpyvol(pTarget, tetrisblock->graphic, 16
      +                          );
  2256  0005AA  C019  F00D         	movff	newRotation@pTarget,memcpyvol@dest
  2257  0005AE  C01A  F00E         	movff	newRotation@pTarget+1,memcpyvol@dest+1
  2258  0005B2  C028  F00F         	movff	newRotation@tetrisblock,memcpyvol@src
  2259  0005B6  C029  F010         	movff	newRotation@tetrisblock+1,memcpyvol@src+1
  2260  0005BA  0E00               	movlw	0
  2261  0005BC  6E12               	movwf	memcpyvol@n+1,c
  2262  0005BE  0E10               	movlw	16
  2263  0005C0  6E11               	movwf	memcpyvol@n,c
  2264  0005C2  ECD4  F00F         	call	_memcpyvol	;wreg free
  2265                           
  2266                           ;tetris.c: 205:     }
  2267  0005C6  0012               	return	
  2268  0005C8                     l4773:
  2269                           
  2270                           ;tetris.c: 207:     {;tetris.c: 209:         clearArray(pTarget, 8);
  2271  0005C8  C019  F00D         	movff	newRotation@pTarget,clearArray@pArray
  2272  0005CC  C01A  F00E         	movff	newRotation@pTarget+1,clearArray@pArray+1
  2273  0005D0  0E00               	movlw	0
  2274  0005D2  6E10               	movwf	clearArray@size+1,c
  2275  0005D4  0E08               	movlw	8
  2276  0005D6  6E0F               	movwf	clearArray@size,c
  2277  0005D8  EC50  F011         	call	_clearArray	;wreg free
  2278                           
  2279                           ;tetris.c: 214:         if(tetrisblock->limitedRotation == 1 && tetris->IsRotated)
  2280  0005DC  EE20 F012          	lfsr	2,18
  2281  0005E0  5028               	movf	newRotation@tetrisblock,w,c
  2282  0005E2  26D9               	addwf	fsr2l,f,c
  2283  0005E4  5029               	movf	newRotation@tetrisblock+1,w,c
  2284  0005E6  22DA               	addwfc	fsr2h,f,c
  2285  0005E8  04DE               	decf	postinc2,w,c
  2286  0005EA  A4D8               	btfss	status,2,c
  2287  0005EC  D00F               	goto	l4781
  2288  0005EE  EE20 F013          	lfsr	2,19
  2289  0005F2  5017               	movf	newRotation@tetris,w,c
  2290  0005F4  26D9               	addwf	fsr2l,f,c
  2291  0005F6  5018               	movf	newRotation@tetris+1,w,c
  2292  0005F8  22DA               	addwfc	fsr2h,f,c
  2293  0005FA  50DF               	movf	indf2,w,c
  2294  0005FC  B4D8               	btfsc	status,2,c
  2295  0005FE  D006               	goto	l4781
  2296                           
  2297                           ;tetris.c: 215:         {;tetris.c: 216:             *rotation = CCW;
  2298  000600  C01B  FFD9         	movff	newRotation@rotation,fsr2l
  2299  000604  C01C  FFDA         	movff	newRotation@rotation+1,fsr2h
  2300  000608  0E00               	movlw	0
  2301  00060A  6EDF               	movwf	indf2,c
  2302  00060C                     l4781:
  2303                           
  2304                           ;tetris.c: 219:         for(x1 = 0; x1 < 8; x1++)
  2305  00060C  0E00               	movlw	0
  2306  00060E  6E26               	movwf	newRotation@x1,c
  2307  000610                     l4787:
  2308                           
  2309                           ;tetris.c: 220:         {;tetris.c: 221:             for(y1 = 0; y1 < 16; y1++)
  2310  000610  0E00               	movlw	0
  2311  000612  6E27               	movwf	newRotation@y1,c
  2312  000614                     l4793:
  2313                           
  2314                           ;tetris.c: 222:             {;tetris.c: 223:                 if(tetrisblock->graphic[x1]
      +                           & (1<<y1))
  2315  000614  5026               	movf	newRotation@x1,w,c
  2316  000616  0D02               	mullw	2
  2317  000618  CFF3 F01D          	movff	prodl,??_newRotation
  2318  00061C  CFF4 F01E          	movff	prodh,??_newRotation+1
  2319  000620  501D               	movf	??_newRotation,w,c
  2320  000622  2428               	addwf	newRotation@tetrisblock,w,c
  2321  000624  6ED9               	movwf	fsr2l,c
  2322  000626  501E               	movf	??_newRotation+1,w,c
  2323  000628  2029               	addwfc	newRotation@tetrisblock+1,w,c
  2324  00062A  6EDA               	movwf	fsr2h,c
  2325  00062C  CFDE F01F          	movff	postinc2,??_newRotation+2
  2326  000630  CFDD F020          	movff	postdec2,??_newRotation+3
  2327  000634  C027  F021         	movff	newRotation@y1,??_newRotation+4
  2328  000638  0E01               	movlw	1
  2329  00063A  6E22               	movwf	(??_newRotation+5)& (0+255),c
  2330  00063C  0E00               	movlw	0
  2331  00063E  6E23               	movwf	(??_newRotation+6)& (0+255),c
  2332  000640  2A21               	incf	??_newRotation+4,f,c
  2333  000642  D003               	goto	u4524
  2334  000644                     u4525:
  2335  000644  90D8               	bcf	status,0,c
  2336  000646  3622               	rlcf	??_newRotation+5,f,c
  2337  000648  3623               	rlcf	??_newRotation+6,f,c
  2338  00064A                     u4524:
  2339  00064A  2E21               	decfsz	??_newRotation+4,f,c
  2340  00064C  D7FB               	goto	u4525
  2341  00064E  501F               	movf	??_newRotation+2,w,c
  2342  000650  1622               	andwf	??_newRotation+5,f,c
  2343  000652  5020               	movf	??_newRotation+3,w,c
  2344  000654  1623               	andwf	??_newRotation+6,f,c
  2345  000656  5022               	movf	??_newRotation+5,w,c
  2346  000658  1023               	iorwf	??_newRotation+6,w,c
  2347  00065A  B4D8               	btfsc	status,2,c
  2348  00065C  D086               	goto	l4811
  2349                           
  2350                           ;tetris.c: 224:                 {;tetris.c: 225:                     if(*rotation == CW)
  2351  00065E  C01B  FFD9         	movff	newRotation@rotation,fsr2l
  2352  000662  C01C  FFDA         	movff	newRotation@rotation+1,fsr2h
  2353  000666  04DE               	decf	postinc2,w,c
  2354  000668  A4D8               	btfss	status,2,c
  2355  00066A  D028               	goto	l4799
  2356                           
  2357                           ;tetris.c: 226:                     {;tetris.c: 227:                         x2 = tetris
      +                          block->x + tetrisblock->y - y1;
  2358  00066C  EE20 F011          	lfsr	2,17
  2359  000670  5028               	movf	newRotation@tetrisblock,w,c
  2360  000672  26D9               	addwf	fsr2l,f,c
  2361  000674  5029               	movf	newRotation@tetrisblock+1,w,c
  2362  000676  22DA               	addwfc	fsr2h,f,c
  2363  000678  50DF               	movf	indf2,w,c
  2364  00067A  6E1D               	movwf	??_newRotation& (0+255),c
  2365  00067C  EE20 F010          	lfsr	2,16
  2366  000680  5028               	movf	newRotation@tetrisblock,w,c
  2367  000682  26D9               	addwf	fsr2l,f,c
  2368  000684  5029               	movf	newRotation@tetrisblock+1,w,c
  2369  000686  22DA               	addwfc	fsr2h,f,c
  2370  000688  50DF               	movf	indf2,w,c
  2371  00068A  6E1E               	movwf	(??_newRotation+1)& (0+255),c
  2372  00068C  5027               	movf	newRotation@y1,w,c
  2373  00068E  5C1E               	subwf	??_newRotation+1,w,c
  2374  000690  241D               	addwf	??_newRotation,w,c
  2375  000692  6E24               	movwf	newRotation@x2,c
  2376                           
  2377                           ;tetris.c: 228:                         y2 = x1 + tetrisblock->y - tetrisblock->x;
  2378  000694  EE20 F010          	lfsr	2,16
  2379  000698  5028               	movf	newRotation@tetrisblock,w,c
  2380  00069A  26D9               	addwf	fsr2l,f,c
  2381  00069C  5029               	movf	newRotation@tetrisblock+1,w,c
  2382  00069E  22DA               	addwfc	fsr2h,f,c
  2383  0006A0  50DF               	movf	indf2,w,c
  2384  0006A2  6E1D               	movwf	??_newRotation& (0+255),c
  2385  0006A4  EE20 F011          	lfsr	2,17
  2386  0006A8  5028               	movf	newRotation@tetrisblock,w,c
  2387  0006AA  26D9               	addwf	fsr2l,f,c
  2388  0006AC  5029               	movf	newRotation@tetrisblock+1,w,c
  2389  0006AE  22DA               	addwfc	fsr2h,f,c
  2390  0006B0  50DF               	movf	indf2,w,c
  2391  0006B2  6E1E               	movwf	(??_newRotation+1)& (0+255),c
  2392  0006B4  501D               	movf	??_newRotation,w,c
  2393  0006B6  5C1E               	subwf	??_newRotation+1,w,c
  2394  0006B8  2426               	addwf	newRotation@x1,w,c
  2395  0006BA  D027               	goto	L1
  2396  0006BC                     l4799:
  2397                           
  2398                           ;tetris.c: 231:                     {;tetris.c: 232:                         x2 = y1 + t
      +                          etrisblock->x - tetrisblock->y;
  2399  0006BC  EE20 F011          	lfsr	2,17
  2400  0006C0  5028               	movf	newRotation@tetrisblock,w,c
  2401  0006C2  26D9               	addwf	fsr2l,f,c
  2402  0006C4  5029               	movf	newRotation@tetrisblock+1,w,c
  2403  0006C6  22DA               	addwfc	fsr2h,f,c
  2404  0006C8  50DF               	movf	indf2,w,c
  2405  0006CA  6E1D               	movwf	??_newRotation& (0+255),c
  2406  0006CC  EE20 F010          	lfsr	2,16
  2407  0006D0  5028               	movf	newRotation@tetrisblock,w,c
  2408  0006D2  26D9               	addwf	fsr2l,f,c
  2409  0006D4  5029               	movf	newRotation@tetrisblock+1,w,c
  2410  0006D6  22DA               	addwfc	fsr2h,f,c
  2411  0006D8  50DF               	movf	indf2,w,c
  2412  0006DA  6E1E               	movwf	(??_newRotation+1)& (0+255),c
  2413  0006DC  501D               	movf	??_newRotation,w,c
  2414  0006DE  5C1E               	subwf	??_newRotation+1,w,c
  2415  0006E0  2427               	addwf	newRotation@y1,w,c
  2416  0006E2  6E24               	movwf	newRotation@x2,c
  2417                           
  2418                           ;tetris.c: 233:                         y2 = tetrisblock->x + tetrisblock->y - x1;
  2419  0006E4  EE20 F011          	lfsr	2,17
  2420  0006E8  5028               	movf	newRotation@tetrisblock,w,c
  2421  0006EA  26D9               	addwf	fsr2l,f,c
  2422  0006EC  5029               	movf	newRotation@tetrisblock+1,w,c
  2423  0006EE  22DA               	addwfc	fsr2h,f,c
  2424  0006F0  50DF               	movf	indf2,w,c
  2425  0006F2  6E1D               	movwf	??_newRotation& (0+255),c
  2426  0006F4  EE20 F010          	lfsr	2,16
  2427  0006F8  5028               	movf	newRotation@tetrisblock,w,c
  2428  0006FA  26D9               	addwf	fsr2l,f,c
  2429  0006FC  5029               	movf	newRotation@tetrisblock+1,w,c
  2430  0006FE  22DA               	addwfc	fsr2h,f,c
  2431  000700  50DF               	movf	indf2,w,c
  2432  000702  6E1E               	movwf	(??_newRotation+1)& (0+255),c
  2433  000704  5026               	movf	newRotation@x1,w,c
  2434  000706  5C1E               	subwf	??_newRotation+1,w,c
  2435  000708  241D               	addwf	??_newRotation,w,c
  2436  00070A                     L1:
  2437  00070A  6E25               	movwf	newRotation@y2,c
  2438                           
  2439                           ;tetris.c: 235:                     if(x2 >= 0 && x2 < 8 && y2 >= 0 && y2 < 16)
  2440  00070C  BE24               	btfsc	newRotation@x2,7,c
  2441  00070E  D02D               	goto	l4811
  2442  000710  5024               	movf	newRotation@x2,w,c
  2443  000712  0A80               	xorlw	128
  2444  000714  0F78               	addlw	-136
  2445  000716  A0D8               	btfss	status,0,c
  2446  000718  BE25               	btfsc	newRotation@y2,7,c
  2447  00071A  D027               	goto	l4811
  2448  00071C  5025               	movf	newRotation@y2,w,c
  2449  00071E  0A80               	xorlw	128
  2450  000720  0F70               	addlw	-144
  2451  000722  B0D8               	btfsc	status,0,c
  2452  000724  D022               	goto	l4811
  2453                           
  2454                           ;tetris.c: 236:                         pTarget[x2] |= (1<<y2);
  2455  000726  C025  F01D         	movff	newRotation@y2,??_newRotation
  2456  00072A  0E01               	movlw	1
  2457  00072C  6E1E               	movwf	(??_newRotation+1)& (0+255),c
  2458  00072E  0E00               	movlw	0
  2459  000730  6E1F               	movwf	(??_newRotation+2)& (0+255),c
  2460  000732  2A1D               	incf	??_newRotation,f,c
  2461  000734  D003               	goto	u4594
  2462  000736                     u4595:
  2463  000736  90D8               	bcf	status,0,c
  2464  000738  361E               	rlcf	??_newRotation+1,f,c
  2465  00073A  361F               	rlcf	??_newRotation+2,f,c
  2466  00073C                     u4594:
  2467  00073C  2E1D               	decfsz	??_newRotation,f,c
  2468  00073E  D7FB               	goto	u4595
  2469  000740  5024               	movf	newRotation@x2,w,c
  2470  000742  6E0D               	movwf	___wmul@multiplier,c
  2471  000744  6A0E               	clrf	___wmul@multiplier+1,c
  2472  000746  BE0D               	btfsc	___wmul@multiplier,7,c
  2473  000748  060E               	decf	___wmul@multiplier+1,f,c
  2474  00074A  0E00               	movlw	0
  2475  00074C  6E10               	movwf	___wmul@multiplicand+1,c
  2476  00074E  0E02               	movlw	2
  2477  000750  6E0F               	movwf	___wmul@multiplicand,c
  2478  000752  ECBA  F011         	call	___wmul	;wreg free
  2479  000756  500D               	movf	?___wmul,w,c
  2480  000758  2419               	addwf	newRotation@pTarget,w,c
  2481  00075A  6ED9               	movwf	fsr2l,c
  2482  00075C  500E               	movf	?___wmul+1,w,c
  2483  00075E  201A               	addwfc	newRotation@pTarget+1,w,c
  2484  000760  6EDA               	movwf	fsr2h,c
  2485  000762  501E               	movf	??_newRotation+1,w,c
  2486  000764  12DE               	iorwf	postinc2,f,c
  2487  000766  501F               	movf	??_newRotation+2,w,c
  2488  000768  12DD               	iorwf	postdec2,f,c
  2489  00076A                     l4811:
  2490                           
  2491                           ;tetris.c: 238:             }
  2492  00076A  2A27               	incf	newRotation@y1,f,c
  2493  00076C  0E0F               	movlw	15
  2494  00076E  6427               	cpfsgt	newRotation@y1,c
  2495  000770  D751               	goto	l4793
  2496                           
  2497                           ;tetris.c: 239:         }
  2498  000772  2A26               	incf	newRotation@x1,f,c
  2499  000774  0E07               	movlw	7
  2500  000776  6426               	cpfsgt	newRotation@x1,c
  2501  000778  D74B               	goto	l4787
  2502  00077A  0012               	return	
  2503  00077C                     __end_of_newRotation:
  2504                           	opt callstack 0
  2505                           
  2506 ;; *************** function ___wmul *****************
  2507 ;; Defined at:
  2508 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\Umul16.c"
  2509 ;; Parameters:    Size  Location     Type
  2510 ;;  multiplier      2   12[COMRAM] unsigned int 
  2511 ;;  multiplicand    2   14[COMRAM] unsigned int 
  2512 ;; Auto vars:     Size  Location     Type
  2513 ;;  product         2   16[COMRAM] unsigned int 
  2514 ;; Return value:  Size  Location     Type
  2515 ;;                  2   12[COMRAM] unsigned int 
  2516 ;; Registers used:
  2517 ;;		wreg, status,2, status,0, prodl, prodh
  2518 ;; Tracked objects:
  2519 ;;		On entry : 0/0
  2520 ;;		On exit  : 0/0
  2521 ;;		Unchanged: 0/0
  2522 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2523 ;;      Params:         4       0       0       0       0       0       0
  2524 ;;      Locals:         2       0       0       0       0       0       0
  2525 ;;      Temps:          0       0       0       0       0       0       0
  2526 ;;      Totals:         6       0       0       0       0       0       0
  2527 ;;Total ram usage:        6 bytes
  2528 ;; Hardware stack levels used:    1
  2529 ;; Hardware stack levels required when called:    4
  2530 ;; This function calls:
  2531 ;;		Nothing
  2532 ;; This function is called by:
  2533 ;;		_newRotation
  2534 ;; This function uses a non-reentrant model
  2535 ;;
  2536                           
  2537                           	psect	text7
  2538  002374                     __ptext7:
  2539                           	opt callstack 0
  2540  002374                     ___wmul:
  2541                           	opt callstack 22
  2542                           
  2543                           ;incstack = 0
  2544  002374  500D               	movf	___wmul@multiplier,w,c
  2545  002376  020F               	mulwf	___wmul@multiplicand,c
  2546  002378  CFF3 F011          	movff	prodl,___wmul@product
  2547  00237C  CFF4 F012          	movff	prodh,___wmul@product+1
  2548  002380  500D               	movf	___wmul@multiplier,w,c
  2549  002382  0210               	mulwf	___wmul@multiplicand+1,c
  2550  002384  50F3               	movf	prodl,w,c
  2551  002386  2612               	addwf	___wmul@product+1,f,c
  2552  002388  500E               	movf	___wmul@multiplier+1,w,c
  2553  00238A  020F               	mulwf	___wmul@multiplicand,c
  2554  00238C  50F3               	movf	prodl,w,c
  2555  00238E  2612               	addwf	___wmul@product+1,f,c
  2556  002390  C011  F00D         	movff	___wmul@product,?___wmul
  2557  002394  C012  F00E         	movff	___wmul@product+1,?___wmul+1
  2558  002398  0012               	return		;funcret
  2559  00239A                     __end_of___wmul:
  2560                           	opt callstack 0
  2561                           
  2562 ;; *************** function _tetris_button_right *****************
  2563 ;; Defined at:
  2564 ;;		line 289 in file "tetris.c"
  2565 ;; Parameters:    Size  Location     Type
  2566 ;;  tetrisblock     2   25[COMRAM] PTR struct shape
  2567 ;;		 -> tetris_main@tetris(28), 
  2568 ;;  BackgroundDa    2   27[COMRAM] PTR unsigned short 
  2569 ;;		 -> tetris_main@BackgroundData(16), 
  2570 ;; Auto vars:     Size  Location     Type
  2571 ;;  tmpObjectDat   16   29[COMRAM] unsigned short [8]
  2572 ;; Return value:  Size  Location     Type
  2573 ;;                  1    wreg      _Bool 
  2574 ;; Registers used:
  2575 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2576 ;; Tracked objects:
  2577 ;;		On entry : 0/0
  2578 ;;		On exit  : 0/0
  2579 ;;		Unchanged: 0/0
  2580 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2581 ;;      Params:         4       0       0       0       0       0       0
  2582 ;;      Locals:        16       0       0       0       0       0       0
  2583 ;;      Temps:          0       0       0       0       0       0       0
  2584 ;;      Totals:        20       0       0       0       0       0       0
  2585 ;;Total ram usage:       20 bytes
  2586 ;; Hardware stack levels used:    1
  2587 ;; Hardware stack levels required when called:    6
  2588 ;; This function calls:
  2589 ;;		_checkForRightWall
  2590 ;;		_collisionDetect
  2591 ;;		_mergeObjects
  2592 ;;		_moveObject
  2593 ;;		_pauseMultiplexing
  2594 ;;		_resumeMultiplexing
  2595 ;; This function is called by:
  2596 ;;		_tetris_buttons
  2597 ;; This function uses a non-reentrant model
  2598 ;;
  2599                           
  2600                           	psect	text8
  2601  0018DC                     __ptext8:
  2602                           	opt callstack 0
  2603  0018DC                     _tetris_button_right:
  2604                           	opt callstack 22
  2605                           
  2606                           ;tetris.c: 289: _Bool tetris_button_right(struct shape *tetrisblock, uint16_t *Backgroun
      +                          dData);tetris.c: 290: {;tetris.c: 291:     if(!checkForRightWall(tetrisblock->graphic))
  2607                           
  2608                           ;incstack = 0
  2609  0018DC  C01A  F00D         	movff	tetris_button_right@tetrisblock,checkForRightWall@pObject
  2610  0018E0  C01B  F00E         	movff	tetris_button_right@tetrisblock+1,checkForRightWall@pObject+1
  2611  0018E4  EC7F  F012         	call	_checkForRightWall	;wreg free
  2612  0018E8  0900               	iorlw	0
  2613  0018EA  A4D8               	btfss	status,2,c
  2614  0018EC  D03C               	goto	l5107
  2615                           
  2616                           ;tetris.c: 292:     {;tetris.c: 293:         uint16_t tmpObjectData[8];;tetris.c: 295:  
      +                                 mergeObjects(tetrisblock->graphic, tmpObjectData, OVERRIDE);
  2617  0018EE  C01A  F00D         	movff	tetris_button_right@tetrisblock,mergeObjects@pSource
  2618  0018F2  C01B  F00E         	movff	tetris_button_right@tetrisblock+1,mergeObjects@pSource+1
  2619  0018F6  0E1E               	movlw	low tetris_button_right@tmpObjectData
  2620  0018F8  6E0F               	movwf	mergeObjects@pTarget,c
  2621  0018FA  0E00               	movlw	high tetris_button_right@tmpObjectData
  2622  0018FC  6E10               	movwf	mergeObjects@pTarget+1,c
  2623  0018FE  0E00               	movlw	0
  2624  001900  6E11               	movwf	mergeObjects@mode,c
  2625  001902  ECBB  F009         	call	_mergeObjects	;wreg free
  2626                           
  2627                           ;tetris.c: 296:         moveObject(tmpObjectData, RIGHT, 1);
  2628  001906  0E1E               	movlw	low tetris_button_right@tmpObjectData
  2629  001908  6E0D               	movwf	moveObject@pObject,c
  2630  00190A  0E00               	movlw	high tetris_button_right@tmpObjectData
  2631  00190C  6E0E               	movwf	moveObject@pObject+1,c
  2632  00190E  0E03               	movlw	3
  2633  001910  6E0F               	movwf	moveObject@direction,c
  2634  001912  0E01               	movlw	1
  2635  001914  6E10               	movwf	moveObject@cycles,c
  2636  001916  EC99  F004         	call	_moveObject	;wreg free
  2637                           
  2638                           ;tetris.c: 298:         if(!collisionDetect(tmpObjectData, BackgroundData))
  2639  00191A  0E1E               	movlw	low tetris_button_right@tmpObjectData
  2640  00191C  6E0D               	movwf	collisionDetect@pSource,c
  2641  00191E  0E00               	movlw	high tetris_button_right@tmpObjectData
  2642  001920  6E0E               	movwf	collisionDetect@pSource+1,c
  2643  001922  C01C  F00F         	movff	tetris_button_right@BackgroundData,collisionDetect@pTarget
  2644  001926  C01D  F010         	movff	tetris_button_right@BackgroundData+1,collisionDetect@pTarget+1
  2645  00192A  ECA1  F00F         	call	_collisionDetect	;wreg free
  2646  00192E  0900               	iorlw	0
  2647  001930  A4D8               	btfss	status,2,c
  2648  001932  D019               	goto	l5107
  2649                           
  2650                           ;tetris.c: 299:         {;tetris.c: 300:             pauseMultiplexing();
  2651  001934  ECF3  F012         	call	_pauseMultiplexing	;wreg free
  2652                           
  2653                           ;tetris.c: 301:             mergeObjects(tmpObjectData, tetrisblock->graphic, OVERRIDE);
  2654  001938  0E1E               	movlw	low tetris_button_right@tmpObjectData
  2655  00193A  6E0D               	movwf	mergeObjects@pSource,c
  2656  00193C  0E00               	movlw	high tetris_button_right@tmpObjectData
  2657  00193E  6E0E               	movwf	mergeObjects@pSource+1,c
  2658  001940  C01A  F00F         	movff	tetris_button_right@tetrisblock,mergeObjects@pTarget
  2659  001944  C01B  F010         	movff	tetris_button_right@tetrisblock+1,mergeObjects@pTarget+1
  2660  001948  0E00               	movlw	0
  2661  00194A  6E11               	movwf	mergeObjects@mode,c
  2662  00194C  ECBB  F009         	call	_mergeObjects	;wreg free
  2663                           
  2664                           ;tetris.c: 302:             resumeMultiplexing();
  2665  001950  EC2E  F013         	call	_resumeMultiplexing	;wreg free
  2666                           
  2667                           ;tetris.c: 303:             tetrisblock->x++;
  2668  001954  EE20 F010          	lfsr	2,16
  2669  001958  501A               	movf	tetris_button_right@tetrisblock,w,c
  2670  00195A  26D9               	addwf	fsr2l,f,c
  2671  00195C  501B               	movf	tetris_button_right@tetrisblock+1,w,c
  2672  00195E  22DA               	addwfc	fsr2h,f,c
  2673  001960  2ADF               	incf	indf2,f,c
  2674                           
  2675                           ;tetris.c: 304:             return 1;
  2676  001962  0E01               	movlw	1
  2677  001964  0012               	return	
  2678  001966                     l5107:
  2679                           
  2680                           ;tetris.c: 307:     return 0;
  2681  001966  0E00               	movlw	0
  2682  001968  0012               	return		;funcret
  2683  00196A                     __end_of_tetris_button_right:
  2684                           	opt callstack 0
  2685                           
  2686 ;; *************** function _checkForRightWall *****************
  2687 ;; Defined at:
  2688 ;;		line 169 in file "shared_logic.c"
  2689 ;; Parameters:    Size  Location     Type
  2690 ;;  pObject         2   12[COMRAM] PTR volatile unsigned sh
  2691 ;;		 -> tetris_main@tetris.graphic(16), tetris_main@tetris(28), 
  2692 ;; Auto vars:     Size  Location     Type
  2693 ;;		None
  2694 ;; Return value:  Size  Location     Type
  2695 ;;                  1    wreg      _Bool 
  2696 ;; Registers used:
  2697 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  2698 ;; Tracked objects:
  2699 ;;		On entry : 0/0
  2700 ;;		On exit  : 0/0
  2701 ;;		Unchanged: 0/0
  2702 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2703 ;;      Params:         2       0       0       0       0       0       0
  2704 ;;      Locals:         0       0       0       0       0       0       0
  2705 ;;      Temps:          2       0       0       0       0       0       0
  2706 ;;      Totals:         4       0       0       0       0       0       0
  2707 ;;Total ram usage:        4 bytes
  2708 ;; Hardware stack levels used:    1
  2709 ;; Hardware stack levels required when called:    4
  2710 ;; This function calls:
  2711 ;;		Nothing
  2712 ;; This function is called by:
  2713 ;;		_tetris_button_right
  2714 ;; This function uses a non-reentrant model
  2715 ;;
  2716                           
  2717                           	psect	text9
  2718  0024FE                     __ptext9:
  2719                           	opt callstack 0
  2720  0024FE                     _checkForRightWall:
  2721                           	opt callstack 23
  2722                           
  2723                           ;shared_logic.c: 169: _Bool checkForRightWall(volatile uint16_t * pObject);shared_logic.
      +                          c: 170: {;shared_logic.c: 171:     return pObject[7] != 0;
  2724                           
  2725                           ;incstack = 0
  2726  0024FE  EE20 F00E          	lfsr	2,14
  2727  002502  500D               	movf	checkForRightWall@pObject,w,c
  2728  002504  26D9               	addwf	fsr2l,f,c
  2729  002506  500E               	movf	checkForRightWall@pObject+1,w,c
  2730  002508  22DA               	addwfc	fsr2h,f,c
  2731  00250A  50DE               	movf	postinc2,w,c
  2732  00250C  10DE               	iorwf	postinc2,w,c
  2733  00250E  B4D8               	btfsc	status,2,c
  2734  002510  D002               	goto	u4720
  2735  002512  0E01               	movlw	1
  2736  002514  0012               	return	
  2737  002516                     u4720:
  2738  002516  0E00               	movlw	0
  2739  002518  0012               	return		;funcret
  2740  00251A                     __end_of_checkForRightWall:
  2741                           	opt callstack 0
  2742                           
  2743 ;; *************** function _tetris_button_left *****************
  2744 ;; Defined at:
  2745 ;;		line 264 in file "tetris.c"
  2746 ;; Parameters:    Size  Location     Type
  2747 ;;  tetrisblock     2   25[COMRAM] PTR struct shape
  2748 ;;		 -> tetris_main@tetris(28), 
  2749 ;;  BackgroundDa    2   27[COMRAM] PTR unsigned short 
  2750 ;;		 -> tetris_main@BackgroundData(16), 
  2751 ;; Auto vars:     Size  Location     Type
  2752 ;;  tmpObjectDat   16   29[COMRAM] unsigned short [8]
  2753 ;; Return value:  Size  Location     Type
  2754 ;;                  1    wreg      _Bool 
  2755 ;; Registers used:
  2756 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2757 ;; Tracked objects:
  2758 ;;		On entry : 0/0
  2759 ;;		On exit  : 0/0
  2760 ;;		Unchanged: 0/0
  2761 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2762 ;;      Params:         4       0       0       0       0       0       0
  2763 ;;      Locals:        16       0       0       0       0       0       0
  2764 ;;      Temps:          0       0       0       0       0       0       0
  2765 ;;      Totals:        20       0       0       0       0       0       0
  2766 ;;Total ram usage:       20 bytes
  2767 ;; Hardware stack levels used:    1
  2768 ;; Hardware stack levels required when called:    6
  2769 ;; This function calls:
  2770 ;;		_checkForLeftWall
  2771 ;;		_collisionDetect
  2772 ;;		_memcpyvol
  2773 ;;		_mergeObjects
  2774 ;;		_moveObject
  2775 ;;		_pauseMultiplexing
  2776 ;;		_resumeMultiplexing
  2777 ;; This function is called by:
  2778 ;;		_tetris_buttons
  2779 ;; This function uses a non-reentrant model
  2780 ;;
  2781                           
  2782                           	psect	text10
  2783  00184A                     __ptext10:
  2784                           	opt callstack 0
  2785  00184A                     _tetris_button_left:
  2786                           	opt callstack 22
  2787                           
  2788                           ;tetris.c: 264: _Bool tetris_button_left(struct shape *tetrisblock, uint16_t *Background
      +                          Data);tetris.c: 265: {;tetris.c: 266:     if(!checkForLeftWall(tetrisblock->graphic))
  2789                           
  2790                           ;incstack = 0
  2791  00184A  C01A  F00D         	movff	tetris_button_left@tetrisblock,checkForLeftWall@pObject
  2792  00184E  C01B  F00E         	movff	tetris_button_left@tetrisblock+1,checkForLeftWall@pObject+1
  2793  001852  ECC3  F012         	call	_checkForLeftWall	;wreg free
  2794  001856  0900               	iorlw	0
  2795  001858  A4D8               	btfss	status,2,c
  2796  00185A  D03E               	goto	l5085
  2797                           
  2798                           ;tetris.c: 267:     {;tetris.c: 268:         uint16_t tmpObjectData[8];;tetris.c: 272:  
      +                                 memcpyvol(tmpObjectData, tetrisblock->graphic, 16);
  2799  00185C  0E1E               	movlw	low tetris_button_left@tmpObjectData
  2800  00185E  6E0D               	movwf	memcpyvol@dest,c
  2801  001860  0E00               	movlw	high tetris_button_left@tmpObjectData
  2802  001862  6E0E               	movwf	memcpyvol@dest+1,c
  2803  001864  C01A  F00F         	movff	tetris_button_left@tetrisblock,memcpyvol@src
  2804  001868  C01B  F010         	movff	tetris_button_left@tetrisblock+1,memcpyvol@src+1
  2805  00186C  0E00               	movlw	0
  2806  00186E  6E12               	movwf	memcpyvol@n+1,c
  2807  001870  0E10               	movlw	16
  2808  001872  6E11               	movwf	memcpyvol@n,c
  2809  001874  ECD4  F00F         	call	_memcpyvol	;wreg free
  2810                           
  2811                           ;tetris.c: 274:         moveObject(tmpObjectData, LEFT, 1);
  2812  001878  0E1E               	movlw	low tetris_button_left@tmpObjectData
  2813  00187A  6E0D               	movwf	moveObject@pObject,c
  2814  00187C  0E00               	movlw	high tetris_button_left@tmpObjectData
  2815  00187E  6E0E               	movwf	moveObject@pObject+1,c
  2816  001880  0E02               	movlw	2
  2817  001882  6E0F               	movwf	moveObject@direction,c
  2818  001884  0E01               	movlw	1
  2819  001886  6E10               	movwf	moveObject@cycles,c
  2820  001888  EC99  F004         	call	_moveObject	;wreg free
  2821                           
  2822                           ;tetris.c: 276:         if(!collisionDetect(tmpObjectData, BackgroundData))
  2823  00188C  0E1E               	movlw	low tetris_button_left@tmpObjectData
  2824  00188E  6E0D               	movwf	collisionDetect@pSource,c
  2825  001890  0E00               	movlw	high tetris_button_left@tmpObjectData
  2826  001892  6E0E               	movwf	collisionDetect@pSource+1,c
  2827  001894  C01C  F00F         	movff	tetris_button_left@BackgroundData,collisionDetect@pTarget
  2828  001898  C01D  F010         	movff	tetris_button_left@BackgroundData+1,collisionDetect@pTarget+1
  2829  00189C  ECA1  F00F         	call	_collisionDetect	;wreg free
  2830  0018A0  0900               	iorlw	0
  2831  0018A2  A4D8               	btfss	status,2,c
  2832  0018A4  D019               	goto	l5085
  2833                           
  2834                           ;tetris.c: 277:         {;tetris.c: 278:             pauseMultiplexing();
  2835  0018A6  ECF3  F012         	call	_pauseMultiplexing	;wreg free
  2836                           
  2837                           ;tetris.c: 279:             mergeObjects(tmpObjectData, tetrisblock->graphic, OVERRIDE);
  2838  0018AA  0E1E               	movlw	low tetris_button_left@tmpObjectData
  2839  0018AC  6E0D               	movwf	mergeObjects@pSource,c
  2840  0018AE  0E00               	movlw	high tetris_button_left@tmpObjectData
  2841  0018B0  6E0E               	movwf	mergeObjects@pSource+1,c
  2842  0018B2  C01A  F00F         	movff	tetris_button_left@tetrisblock,mergeObjects@pTarget
  2843  0018B6  C01B  F010         	movff	tetris_button_left@tetrisblock+1,mergeObjects@pTarget+1
  2844  0018BA  0E00               	movlw	0
  2845  0018BC  6E11               	movwf	mergeObjects@mode,c
  2846  0018BE  ECBB  F009         	call	_mergeObjects	;wreg free
  2847                           
  2848                           ;tetris.c: 280:             resumeMultiplexing();
  2849  0018C2  EC2E  F013         	call	_resumeMultiplexing	;wreg free
  2850                           
  2851                           ;tetris.c: 281:             tetrisblock->x--;
  2852  0018C6  EE20 F010          	lfsr	2,16
  2853  0018CA  501A               	movf	tetris_button_left@tetrisblock,w,c
  2854  0018CC  26D9               	addwf	fsr2l,f,c
  2855  0018CE  501B               	movf	tetris_button_left@tetrisblock+1,w,c
  2856  0018D0  22DA               	addwfc	fsr2h,f,c
  2857  0018D2  06DF               	decf	indf2,f,c
  2858                           
  2859                           ;tetris.c: 282:             return 1;
  2860  0018D4  0E01               	movlw	1
  2861  0018D6  0012               	return	
  2862  0018D8                     l5085:
  2863                           
  2864                           ;tetris.c: 285:     return 0;
  2865  0018D8  0E00               	movlw	0
  2866  0018DA  0012               	return		;funcret
  2867  0018DC                     __end_of_tetris_button_left:
  2868                           	opt callstack 0
  2869                           
  2870 ;; *************** function _checkForLeftWall *****************
  2871 ;; Defined at:
  2872 ;;		line 160 in file "shared_logic.c"
  2873 ;; Parameters:    Size  Location     Type
  2874 ;;  pObject         2   12[COMRAM] PTR volatile unsigned sh
  2875 ;;		 -> tetris_main@tetris.graphic(16), tetris_main@tetris(28), 
  2876 ;; Auto vars:     Size  Location     Type
  2877 ;;		None
  2878 ;; Return value:  Size  Location     Type
  2879 ;;                  1    wreg      _Bool 
  2880 ;; Registers used:
  2881 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  2882 ;; Tracked objects:
  2883 ;;		On entry : 0/0
  2884 ;;		On exit  : 0/0
  2885 ;;		Unchanged: 0/0
  2886 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2887 ;;      Params:         2       0       0       0       0       0       0
  2888 ;;      Locals:         0       0       0       0       0       0       0
  2889 ;;      Temps:          2       0       0       0       0       0       0
  2890 ;;      Totals:         4       0       0       0       0       0       0
  2891 ;;Total ram usage:        4 bytes
  2892 ;; Hardware stack levels used:    1
  2893 ;; Hardware stack levels required when called:    4
  2894 ;; This function calls:
  2895 ;;		Nothing
  2896 ;; This function is called by:
  2897 ;;		_tetris_button_left
  2898 ;; This function uses a non-reentrant model
  2899 ;;
  2900                           
  2901                           	psect	text11
  2902  002586                     __ptext11:
  2903                           	opt callstack 0
  2904  002586                     _checkForLeftWall:
  2905                           	opt callstack 23
  2906                           
  2907                           ;shared_logic.c: 160: _Bool checkForLeftWall(volatile uint16_t * pObject);shared_logic.c
      +                          : 161: {;shared_logic.c: 162:     return pObject[0] != 0;
  2908                           
  2909                           ;incstack = 0
  2910  002586  C00D  FFD9         	movff	checkForLeftWall@pObject,fsr2l
  2911  00258A  C00E  FFDA         	movff	checkForLeftWall@pObject+1,fsr2h
  2912  00258E  50DE               	movf	postinc2,w,c
  2913  002590  10DE               	iorwf	postinc2,w,c
  2914  002592  B4D8               	btfsc	status,2,c
  2915  002594  D002               	goto	u4620
  2916  002596  0E01               	movlw	1
  2917  002598  0012               	return	
  2918  00259A                     u4620:
  2919  00259A  0E00               	movlw	0
  2920  00259C  0012               	return		;funcret
  2921  00259E                     __end_of_checkForLeftWall:
  2922                           	opt callstack 0
  2923                           
  2924 ;; *************** function _tetris_button_down *****************
  2925 ;; Defined at:
  2926 ;;		line 335 in file "tetris.c"
  2927 ;; Parameters:    Size  Location     Type
  2928 ;;  tetris          2   54[COMRAM] PTR struct tetris
  2929 ;;		 -> tetris_main@tetris(28), 
  2930 ;;  BackgroundDa    2   56[COMRAM] PTR unsigned short 
  2931 ;;		 -> tetris_main@BackgroundData(16), 
  2932 ;;  CheckForNewL    2   58[COMRAM] PTR _Bool 
  2933 ;;		 -> tetris_main@CheckForNewLines(1), 
  2934 ;;  EndOfGame       2   60[COMRAM] PTR _Bool 
  2935 ;;		 -> tetris_main@EndOfGame(1), 
  2936 ;; Auto vars:     Size  Location     Type
  2937 ;;		None
  2938 ;; Return value:  Size  Location     Type
  2939 ;;                  1    wreg      void 
  2940 ;; Registers used:
  2941 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2942 ;; Tracked objects:
  2943 ;;		On entry : 0/0
  2944 ;;		On exit  : 0/0
  2945 ;;		Unchanged: 0/0
  2946 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2947 ;;      Params:         8       0       0       0       0       0       0
  2948 ;;      Locals:         0       0       0       0       0       0       0
  2949 ;;      Temps:          0       0       0       0       0       0       0
  2950 ;;      Totals:         8       0       0       0       0       0       0
  2951 ;;Total ram usage:        8 bytes
  2952 ;; Hardware stack levels used:    1
  2953 ;; Hardware stack levels required when called:    7
  2954 ;; This function calls:
  2955 ;;		_moveObjectDown
  2956 ;; This function is called by:
  2957 ;;		_tetris_buttons
  2958 ;; This function uses a non-reentrant model
  2959 ;;
  2960                           
  2961                           	psect	text12
  2962  0022CE                     __ptext12:
  2963                           	opt callstack 0
  2964  0022CE                     _tetris_button_down:
  2965                           	opt callstack 21
  2966                           
  2967                           ;tetris.c: 337:     while(moveObjectDown(tetris, BackgroundData, CheckForNewLines, EndOf
      +                          Game))
  2968                           
  2969                           ;tetris.c: 335: void tetris_button_down(struct tetris *tetris, uint16_t *BackgroundData,
      +                           _Bool *CheckForNewLines, _Bool *EndOfGame);tetris.c: 336: {;tetris.c: 337:     while(mo
      +                          veObjectDown(tetris, BackgroundData, CheckForNewLines, EndOfGame))
  2970                           
  2971                           ;incstack = 0
  2972  0022CE  C037  F02C         	movff	tetris_button_down@tetris,moveObjectDown@tetris
  2973  0022D2  C038  F02D         	movff	tetris_button_down@tetris+1,moveObjectDown@tetris+1
  2974  0022D6  C039  F02E         	movff	tetris_button_down@BackgroundData,moveObjectDown@BackgroundData
  2975  0022DA  C03A  F02F         	movff	tetris_button_down@BackgroundData+1,moveObjectDown@BackgroundData+1
  2976  0022DE  C03B  F030         	movff	tetris_button_down@CheckForNewLines,moveObjectDown@CheckForNewLines
  2977  0022E2  C03C  F031         	movff	tetris_button_down@CheckForNewLines+1,moveObjectDown@CheckForNewLines+1
  2978  0022E6  C03D  F032         	movff	tetris_button_down@EndOfGame,moveObjectDown@EndOfGame
  2979  0022EA  C03E  F033         	movff	tetris_button_down@EndOfGame+1,moveObjectDown@EndOfGame+1
  2980  0022EE  EC3B  F00A         	call	_moveObjectDown	;wreg free
  2981  0022F2  0900               	iorlw	0
  2982  0022F4  B4D8               	btfsc	status,2,c
  2983  0022F6  0012               	return	
  2984  0022F8  D7EA               	goto	_tetris_button_down
  2985  0022FA                     __end_of_tetris_button_down:
  2986                           	opt callstack 0
  2987                           
  2988 ;; *************** function _moveObjectDown *****************
  2989 ;; Defined at:
  2990 ;;		line 138 in file "tetris.c"
  2991 ;; Parameters:    Size  Location     Type
  2992 ;;  tetris          2   43[COMRAM] PTR struct tetris
  2993 ;;		 -> tetris_main@tetris(28), 
  2994 ;;  BackgroundDa    2   45[COMRAM] PTR unsigned short 
  2995 ;;		 -> tetris_main@BackgroundData(16), 
  2996 ;;  CheckForNewL    2   47[COMRAM] PTR _Bool 
  2997 ;;		 -> tetris_main@CheckForNewLines(1), 
  2998 ;;  EndOfGame       2   49[COMRAM] PTR _Bool 
  2999 ;;		 -> tetris_main@EndOfGame(1), 
  3000 ;; Auto vars:     Size  Location     Type
  3001 ;;  tetrisblock     2   52[COMRAM] PTR struct shape
  3002 ;;		 -> tetris.currentblock(19), tetris_main@tetris(28), 
  3003 ;;  result          1   51[COMRAM] _Bool 
  3004 ;; Return value:  Size  Location     Type
  3005 ;;                  1    wreg      _Bool 
  3006 ;; Registers used:
  3007 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3008 ;; Tracked objects:
  3009 ;;		On entry : 0/0
  3010 ;;		On exit  : 0/0
  3011 ;;		Unchanged: 0/0
  3012 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3013 ;;      Params:         8       0       0       0       0       0       0
  3014 ;;      Locals:         3       0       0       0       0       0       0
  3015 ;;      Temps:          0       0       0       0       0       0       0
  3016 ;;      Totals:        11       0       0       0       0       0       0
  3017 ;;Total ram usage:       11 bytes
  3018 ;; Hardware stack levels used:    1
  3019 ;; Hardware stack levels required when called:    6
  3020 ;; This function calls:
  3021 ;;		_checkForBottom
  3022 ;;		_collisionDetect
  3023 ;;		_mergeObjects
  3024 ;;		_moveObjecttetris
  3025 ;;		_selectNextObject
  3026 ;;		_set_mS
  3027 ;; This function is called by:
  3028 ;;		_tetris_button_down
  3029 ;;		_tetris_main
  3030 ;; This function uses a non-reentrant model
  3031 ;;
  3032                           
  3033                           	psect	text13
  3034  001476                     __ptext13:
  3035                           	opt callstack 0
  3036  001476                     _moveObjectDown:
  3037                           	opt callstack 21
  3038                           
  3039                           ;tetris.c: 138: _Bool moveObjectDown(struct tetris *tetris, uint16_t *BackgroundData, _B
      +                          ool *CheckForNewLines, _Bool *EndOfGame);tetris.c: 139: {;tetris.c: 140:     struct shap
      +                          e *tetrisblock = &tetris->currentblock;
  3040                           
  3041                           ;incstack = 0
  3042  001476  C02C  F035         	movff	moveObjectDown@tetris,moveObjectDown@tetrisblock
  3043  00147A  C02D  F036         	movff	moveObjectDown@tetris+1,moveObjectDown@tetrisblock+1
  3044                           
  3045                           ;tetris.c: 141:     _Bool result = 1;
  3046  00147E  0E01               	movlw	1
  3047  001480  6E34               	movwf	moveObjectDown@result,c
  3048                           
  3049                           ;tetris.c: 144:     if(checkForBottom(tetrisblock->graphic))
  3050  001482  C035  F00D         	movff	moveObjectDown@tetrisblock,checkForBottom@pObject
  3051  001486  C036  F00E         	movff	moveObjectDown@tetrisblock+1,checkForBottom@pObject+1
  3052  00148A  ECE9  F010         	call	_checkForBottom	;wreg free
  3053  00148E  0900               	iorlw	0
  3054  001490  B4D8               	btfsc	status,2,c
  3055  001492  D01B               	goto	l4745
  3056                           
  3057                           ;tetris.c: 145:     {;tetris.c: 147:         result = 0;
  3058  001494  0E00               	movlw	0
  3059  001496  6E34               	movwf	moveObjectDown@result,c
  3060                           
  3061                           ;tetris.c: 149:         mergeObjects(tetrisblock->graphic, BackgroundData, MERGE);
  3062  001498  C035  F00D         	movff	moveObjectDown@tetrisblock,mergeObjects@pSource
  3063  00149C  C036  F00E         	movff	moveObjectDown@tetrisblock+1,mergeObjects@pSource+1
  3064  0014A0  C02E  F00F         	movff	moveObjectDown@BackgroundData,mergeObjects@pTarget
  3065  0014A4  C02F  F010         	movff	moveObjectDown@BackgroundData+1,mergeObjects@pTarget+1
  3066  0014A8  0E01               	movlw	1
  3067  0014AA  6E11               	movwf	mergeObjects@mode,c
  3068  0014AC  ECBB  F009         	call	_mergeObjects	;wreg free
  3069                           
  3070                           ;tetris.c: 151:         selectNextObject(tetris);
  3071  0014B0  C02C  F017         	movff	moveObjectDown@tetris,selectNextObject@tetris
  3072  0014B4  C02D  F018         	movff	moveObjectDown@tetris+1,selectNextObject@tetris+1
  3073  0014B8  ECBE  F003         	call	_selectNextObject	;wreg free
  3074  0014BC                     l4743:
  3075                           
  3076                           ;tetris.c: 153:         *CheckForNewLines = 1;
  3077  0014BC  C030  FFD9         	movff	moveObjectDown@CheckForNewLines,fsr2l
  3078  0014C0  C031  FFDA         	movff	moveObjectDown@CheckForNewLines+1,fsr2h
  3079  0014C4  0E01               	movlw	1
  3080  0014C6  6EDF               	movwf	indf2,c
  3081                           
  3082                           ;tetris.c: 154:     }
  3083  0014C8  D045               	goto	l4761
  3084  0014CA                     l4745:
  3085                           
  3086                           ;tetris.c: 156:     {;tetris.c: 158:         moveObjecttetris(tetrisblock, DOWN, 1);
  3087  0014CA  C035  F00D         	movff	moveObjectDown@tetrisblock,moveObjecttetris@tetrisblock
  3088  0014CE  C036  F00E         	movff	moveObjectDown@tetrisblock+1,moveObjecttetris@tetrisblock+1
  3089  0014D2  0E00               	movlw	0
  3090  0014D4  6E0F               	movwf	moveObjecttetris@direction,c
  3091  0014D6  0E01               	movlw	1
  3092  0014D8  6E10               	movwf	moveObjecttetris@cycles,c
  3093  0014DA  ECBC  F001         	call	_moveObjecttetris	;wreg free
  3094                           
  3095                           ;tetris.c: 160:         if(collisionDetect(tetrisblock->graphic, BackgroundData))
  3096  0014DE  C035  F00D         	movff	moveObjectDown@tetrisblock,collisionDetect@pSource
  3097  0014E2  C036  F00E         	movff	moveObjectDown@tetrisblock+1,collisionDetect@pSource+1
  3098  0014E6  C02E  F00F         	movff	moveObjectDown@BackgroundData,collisionDetect@pTarget
  3099  0014EA  C02F  F010         	movff	moveObjectDown@BackgroundData+1,collisionDetect@pTarget+1
  3100  0014EE  ECA1  F00F         	call	_collisionDetect	;wreg free
  3101  0014F2  0900               	iorlw	0
  3102  0014F4  B4D8               	btfsc	status,2,c
  3103  0014F6  D02E               	goto	l4761
  3104                           
  3105                           ;tetris.c: 161:         {;tetris.c: 164:             result = 0;
  3106  0014F8  0E00               	movlw	0
  3107  0014FA  6E34               	movwf	moveObjectDown@result,c
  3108                           
  3109                           ;tetris.c: 166:             moveObjecttetris(tetrisblock, UP, 1);
  3110  0014FC  C035  F00D         	movff	moveObjectDown@tetrisblock,moveObjecttetris@tetrisblock
  3111  001500  C036  F00E         	movff	moveObjectDown@tetrisblock+1,moveObjecttetris@tetrisblock+1
  3112  001504  0E01               	movlw	1
  3113  001506  6E0F               	movwf	moveObjecttetris@direction,c
  3114  001508  0E01               	movlw	1
  3115  00150A  6E10               	movwf	moveObjecttetris@cycles,c
  3116  00150C  ECBC  F001         	call	_moveObjecttetris	;wreg free
  3117                           
  3118                           ;tetris.c: 168:             mergeObjects(tetrisblock->graphic, BackgroundData, MERGE);
  3119  001510  C035  F00D         	movff	moveObjectDown@tetrisblock,mergeObjects@pSource
  3120  001514  C036  F00E         	movff	moveObjectDown@tetrisblock+1,mergeObjects@pSource+1
  3121  001518  C02E  F00F         	movff	moveObjectDown@BackgroundData,mergeObjects@pTarget
  3122  00151C  C02F  F010         	movff	moveObjectDown@BackgroundData+1,mergeObjects@pTarget+1
  3123  001520  0E01               	movlw	1
  3124  001522  6E11               	movwf	mergeObjects@mode,c
  3125  001524  ECBB  F009         	call	_mergeObjects	;wreg free
  3126                           
  3127                           ;tetris.c: 170:             selectNextObject(tetris);
  3128  001528  C02C  F017         	movff	moveObjectDown@tetris,selectNextObject@tetris
  3129  00152C  C02D  F018         	movff	moveObjectDown@tetris+1,selectNextObject@tetris+1
  3130  001530  ECBE  F003         	call	_selectNextObject	;wreg free
  3131                           
  3132                           ;tetris.c: 173:             *EndOfGame = collisionDetect(tetrisblock->graphic, Backgroun
      +                          dData);
  3133  001534  C035  F00D         	movff	moveObjectDown@tetrisblock,collisionDetect@pSource
  3134  001538  C036  F00E         	movff	moveObjectDown@tetrisblock+1,collisionDetect@pSource+1
  3135  00153C  C02E  F00F         	movff	moveObjectDown@BackgroundData,collisionDetect@pTarget
  3136  001540  C02F  F010         	movff	moveObjectDown@BackgroundData+1,collisionDetect@pTarget+1
  3137  001544  ECA1  F00F         	call	_collisionDetect	;wreg free
  3138  001548  C032  FFD9         	movff	moveObjectDown@EndOfGame,fsr2l
  3139  00154C  C033  FFDA         	movff	moveObjectDown@EndOfGame+1,fsr2h
  3140  001550  6EDF               	movwf	indf2,c
  3141  001552  D7B4               	goto	l4743
  3142  001554                     l4761:
  3143                           
  3144                           ;tetris.c: 178:     set_mS(0);
  3145  001554  0E00               	movlw	0
  3146  001556  6E0E               	movwf	set_mS@amount+1,c
  3147  001558  0E00               	movlw	0
  3148  00155A  6E0D               	movwf	set_mS@amount,c
  3149  00155C  EC08  F013         	call	_set_mS	;wreg free
  3150                           
  3151                           ;tetris.c: 180:     return result;
  3152  001560  5034               	movf	moveObjectDown@result,w,c
  3153  001562  0012               	return		;funcret
  3154  001564                     __end_of_moveObjectDown:
  3155                           	opt callstack 0
  3156                           
  3157 ;; *************** function _selectNextObject *****************
  3158 ;; Defined at:
  3159 ;;		line 41 in file "tetris.c"
  3160 ;; Parameters:    Size  Location     Type
  3161 ;;  tetris          2   22[COMRAM] PTR struct tetris
  3162 ;;		 -> tetris_main@tetris(28), 
  3163 ;; Auto vars:     Size  Location     Type
  3164 ;;  rndSelection    1   40[COMRAM] unsigned char 
  3165 ;;  fill            1   35[COMRAM] _Bool 
  3166 ;;  counter         1   36[COMRAM] unsigned char 
  3167 ;;  counter         1   37[COMRAM] unsigned char 
  3168 ;;  check           7   28[COMRAM] _Bool [7]
  3169 ;;  NewBlock        2   41[COMRAM] PTR struct shape
  3170 ;;		 -> removeLine@currentLine(1), tetris.currentblock(19), tetris_main@tetris(28), 
  3171 ;;  s               2   38[COMRAM] PTR struct shape
  3172 ;;		 -> shapes(133), 
  3173 ;; Return value:  Size  Location     Type
  3174 ;;                  1    wreg      void 
  3175 ;; Registers used:
  3176 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3177 ;; Tracked objects:
  3178 ;;		On entry : 0/0
  3179 ;;		On exit  : 0/0
  3180 ;;		Unchanged: 0/0
  3181 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3182 ;;      Params:         2       0       0       0       0       0       0
  3183 ;;      Locals:        15       0       0       0       0       0       0
  3184 ;;      Temps:          4       0       0       0       0       0       0
  3185 ;;      Totals:        21       0       0       0       0       0       0
  3186 ;;Total ram usage:       21 bytes
  3187 ;; Hardware stack levels used:    1
  3188 ;; Hardware stack levels required when called:    5
  3189 ;; This function calls:
  3190 ;;		___awmod
  3191 ;;		_memcpyvol
  3192 ;;		_rnd_get_num
  3193 ;;		_set_mS
  3194 ;; This function is called by:
  3195 ;;		_moveObjectDown
  3196 ;;		_tetris_main
  3197 ;; This function uses a non-reentrant model
  3198 ;;
  3199                           
  3200                           	psect	text14
  3201  00077C                     __ptext14:
  3202                           	opt callstack 0
  3203  00077C                     _selectNextObject:
  3204                           	opt callstack 21
  3205                           
  3206                           ;tetris.c: 41: void selectNextObject(struct tetris *tetris);tetris.c: 42: {;tetris.c: 43
      +                          :     struct shape *s;;tetris.c: 44:     if (tetris->countblocks == 7)
  3207                           
  3208                           ;incstack = 0
  3209  00077C  EE20 F014          	lfsr	2,20
  3210  000780  5017               	movf	selectNextObject@tetris,w,c
  3211  000782  26D9               	addwf	fsr2l,f,c
  3212  000784  5018               	movf	selectNextObject@tetris+1,w,c
  3213  000786  22DA               	addwfc	fsr2h,f,c
  3214  000788  0E07               	movlw	7
  3215  00078A  18DE               	xorwf	postinc2,w,c
  3216  00078C  A4D8               	btfss	status,2,c
  3217  00078E  D061               	goto	u4290
  3218                           
  3219                           ;tetris.c: 45:     {;tetris.c: 46:         _Bool check[7];;tetris.c: 47:         tetris-
      +                          >countblocks = 0;
  3220  000790  EE20 F014          	lfsr	2,20
  3221  000794  5017               	movf	selectNextObject@tetris,w,c
  3222  000796  26D9               	addwf	fsr2l,f,c
  3223  000798  5018               	movf	selectNextObject@tetris+1,w,c
  3224  00079A  22DA               	addwfc	fsr2h,f,c
  3225  00079C  0E00               	movlw	0
  3226  00079E  6EDF               	movwf	indf2,c
  3227                           
  3228                           ;tetris.c: 48:         {;tetris.c: 49:         uint8_t counter = 7;
  3229  0007A0  0E07               	movlw	7
  3230  0007A2  6E26               	movwf	selectNextObject@counter,c
  3231                           
  3232                           ;tetris.c: 50:         while(counter--)
  3233  0007A4  D016               	goto	l4521
  3234  0007A6                     l4519:
  3235                           
  3236                           ;tetris.c: 51:         {;tetris.c: 52:             tetris->randomobjects[counter] = 255;
  3237  0007A6  5026               	movf	selectNextObject@counter,w,c
  3238  0007A8  2417               	addwf	selectNextObject@tetris,w,c
  3239  0007AA  6E19               	movwf	??_selectNextObject& (0+255),c
  3240  0007AC  0E00               	movlw	0
  3241  0007AE  2018               	addwfc	selectNextObject@tetris+1,w,c
  3242  0007B0  6E1A               	movwf	(??_selectNextObject+1)& (0+255),c
  3243  0007B2  0E15               	movlw	21
  3244  0007B4  2419               	addwf	??_selectNextObject,w,c
  3245  0007B6  6ED9               	movwf	fsr2l,c
  3246  0007B8  0E00               	movlw	0
  3247  0007BA  201A               	addwfc	??_selectNextObject+1,w,c
  3248  0007BC  6EDA               	movwf	fsr2h,c
  3249  0007BE  0EFF               	movlw	255
  3250  0007C0  6EDF               	movwf	indf2,c
  3251                           
  3252                           ;tetris.c: 53:             check[counter] = 0;
  3253  0007C2  0E1D               	movlw	low selectNextObject@check
  3254  0007C4  2426               	addwf	selectNextObject@counter,w,c
  3255  0007C6  6ED9               	movwf	fsr2l,c
  3256  0007C8  6ADA               	clrf	fsr2h,c
  3257  0007CA  0E00               	movlw	high selectNextObject@check
  3258  0007CC  22DA               	addwfc	fsr2h,f,c
  3259  0007CE  0E00               	movlw	0
  3260  0007D0  6EDF               	movwf	indf2,c
  3261  0007D2                     l4521:
  3262                           
  3263                           ;tetris.c: 50:         while(counter--)
  3264  0007D2  0626               	decf	selectNextObject@counter,f,c
  3265  0007D4  2826               	incf	selectNextObject@counter,w,c
  3266  0007D6  A4D8               	btfss	status,2,c
  3267  0007D8  D7E6               	goto	l4519
  3268                           
  3269                           ;tetris.c: 55:         };tetris.c: 56:         {;tetris.c: 57:         uint8_t counter =
      +                           7;
  3270  0007DA  0E07               	movlw	7
  3271  0007DC  6E25               	movwf	selectNextObject@counter_546,c
  3272                           
  3273                           ;tetris.c: 58:         while(counter--)
  3274  0007DE  D035               	goto	u4280
  3275  0007E0                     l4525:
  3276                           
  3277                           ;tetris.c: 59:         {;tetris.c: 60:             _Bool fill = 0;
  3278  0007E0  0E00               	movlw	0
  3279  0007E2  6E24               	movwf	selectNextObject@fill,c
  3280  0007E4                     l4527:
  3281                           
  3282                           ;tetris.c: 62:             {;tetris.c: 63:                 uint8_t rndSelection = rnd_ge
      +                          t_num();
  3283  0007E4  EC8C  F00E         	call	_rnd_get_num	;wreg free
  3284  0007E8  500D               	movf	?_rnd_get_num,w,c
  3285  0007EA  6E29               	movwf	selectNextObject@rndSelection,c
  3286                           
  3287                           ;tetris.c: 64:                 rndSelection = rndSelection % 7;
  3288  0007EC  C029  F00D         	movff	selectNextObject@rndSelection,___awmod@dividend
  3289  0007F0  6A0E               	clrf	___awmod@dividend+1,c
  3290  0007F2  0E00               	movlw	0
  3291  0007F4  6E10               	movwf	___awmod@divisor+1,c
  3292  0007F6  0E07               	movlw	7
  3293  0007F8  6E0F               	movwf	___awmod@divisor,c
  3294  0007FA  ECC9  F00E         	call	___awmod	;wreg free
  3295  0007FE  500D               	movf	?___awmod,w,c
  3296  000800  6E29               	movwf	selectNextObject@rndSelection,c
  3297                           
  3298                           ;tetris.c: 65:                 if(check[rndSelection] == 0)
  3299  000802  0E1D               	movlw	low selectNextObject@check
  3300  000804  2429               	addwf	selectNextObject@rndSelection,w,c
  3301  000806  6ED9               	movwf	fsr2l,c
  3302  000808  6ADA               	clrf	fsr2h,c
  3303  00080A  0E00               	movlw	high selectNextObject@check
  3304  00080C  22DA               	addwfc	fsr2h,f,c
  3305  00080E  50DF               	movf	indf2,w,c
  3306  000810  A4D8               	btfss	status,2,c
  3307  000812  D018               	goto	l4537
  3308                           
  3309                           ;tetris.c: 66:                 {;tetris.c: 67:                     tetris->randomobjects
      +                          [counter] = rndSelection;
  3310  000814  5025               	movf	selectNextObject@counter_546,w,c
  3311  000816  2417               	addwf	selectNextObject@tetris,w,c
  3312  000818  6E19               	movwf	??_selectNextObject& (0+255),c
  3313  00081A  0E00               	movlw	0
  3314  00081C  2018               	addwfc	selectNextObject@tetris+1,w,c
  3315  00081E  6E1A               	movwf	(??_selectNextObject+1)& (0+255),c
  3316  000820  0E15               	movlw	21
  3317  000822  2419               	addwf	??_selectNextObject,w,c
  3318  000824  6ED9               	movwf	fsr2l,c
  3319  000826  0E00               	movlw	0
  3320  000828  201A               	addwfc	??_selectNextObject+1,w,c
  3321  00082A  6EDA               	movwf	fsr2h,c
  3322  00082C  C029  FFDF         	movff	selectNextObject@rndSelection,indf2
  3323                           
  3324                           ;tetris.c: 68:                     check[rndSelection] = 1;
  3325  000830  0E1D               	movlw	low selectNextObject@check
  3326  000832  2429               	addwf	selectNextObject@rndSelection,w,c
  3327  000834  6ED9               	movwf	fsr2l,c
  3328  000836  6ADA               	clrf	fsr2h,c
  3329  000838  0E00               	movlw	high selectNextObject@check
  3330  00083A  22DA               	addwfc	fsr2h,f,c
  3331  00083C  0E01               	movlw	1
  3332  00083E  6EDF               	movwf	indf2,c
  3333                           
  3334                           ;tetris.c: 69:                     fill = 1;
  3335  000840  0E01               	movlw	1
  3336  000842  6E24               	movwf	selectNextObject@fill,c
  3337  000844                     l4537:
  3338                           
  3339                           ;tetris.c: 71:             }
  3340  000844  5024               	movf	selectNextObject@fill,w,c
  3341  000846  B4D8               	btfsc	status,2,c
  3342  000848  D7CD               	goto	l4527
  3343  00084A                     u4280:
  3344                           
  3345                           ;tetris.c: 58:         while(counter--)
  3346  00084A  0625               	decf	selectNextObject@counter_546,f,c
  3347  00084C  2825               	incf	selectNextObject@counter_546,w,c
  3348  00084E  A4D8               	btfss	status,2,c
  3349  000850  D7C7               	goto	l4525
  3350  000852                     u4290:
  3351                           
  3352                           ;tetris.c: 76:     s = &shapes[tetris->randomobjects[tetris->countblocks]];
  3353  000852  EE20 F014          	lfsr	2,20
  3354  000856  5017               	movf	selectNextObject@tetris,w,c
  3355  000858  26D9               	addwf	fsr2l,f,c
  3356  00085A  5018               	movf	selectNextObject@tetris+1,w,c
  3357  00085C  22DA               	addwfc	fsr2h,f,c
  3358  00085E  50DF               	movf	indf2,w,c
  3359  000860  6E19               	movwf	??_selectNextObject& (0+255),c
  3360  000862  5019               	movf	??_selectNextObject,w,c
  3361  000864  2417               	addwf	selectNextObject@tetris,w,c
  3362  000866  6E1A               	movwf	(??_selectNextObject+1)& (0+255),c
  3363  000868  0E00               	movlw	0
  3364  00086A  2018               	addwfc	selectNextObject@tetris+1,w,c
  3365  00086C  6E1B               	movwf	(??_selectNextObject+2)& (0+255),c
  3366  00086E  0E15               	movlw	21
  3367  000870  241A               	addwf	??_selectNextObject+1,w,c
  3368  000872  6ED9               	movwf	fsr2l,c
  3369  000874  0E00               	movlw	0
  3370  000876  201B               	addwfc	??_selectNextObject+2,w,c
  3371  000878  6EDA               	movwf	fsr2h,c
  3372  00087A  50DF               	movf	indf2,w,c
  3373  00087C  6E1C               	movwf	(??_selectNextObject+3)& (0+255),c
  3374  00087E  501C               	movf	??_selectNextObject+3,w,c
  3375  000880  0D13               	mullw	19
  3376  000882  0E00               	movlw	low _shapes
  3377  000884  24F3               	addwf	prodl,w,c
  3378  000886  6E27               	movwf	selectNextObject@s,c
  3379  000888  0E02               	movlw	high _shapes
  3380  00088A  20F4               	addwfc	prodh,w,c
  3381  00088C  6E28               	movwf	selectNextObject@s+1,c
  3382                           
  3383                           ;tetris.c: 77:     struct shape *NewBlock = &tetris->currentblock;
  3384  00088E  C017  F02A         	movff	selectNextObject@tetris,selectNextObject@NewBlock
  3385  000892  C018  F02B         	movff	selectNextObject@tetris+1,selectNextObject@NewBlock+1
  3386                           
  3387                           ;tetris.c: 78:     memcpyvol(NewBlock->graphic, s->graphic, 16);
  3388  000896  C02A  F00D         	movff	selectNextObject@NewBlock,memcpyvol@dest
  3389  00089A  C02B  F00E         	movff	selectNextObject@NewBlock+1,memcpyvol@dest+1
  3390  00089E  C027  F00F         	movff	selectNextObject@s,memcpyvol@src
  3391  0008A2  C028  F010         	movff	selectNextObject@s+1,memcpyvol@src+1
  3392  0008A6  0E00               	movlw	0
  3393  0008A8  6E12               	movwf	memcpyvol@n+1,c
  3394  0008AA  0E10               	movlw	16
  3395  0008AC  6E11               	movwf	memcpyvol@n,c
  3396  0008AE  ECD4  F00F         	call	_memcpyvol	;wreg free
  3397                           
  3398                           ;tetris.c: 79:     NewBlock->x = s->x;
  3399  0008B2  EE20 F010          	lfsr	2,16
  3400  0008B6  5027               	movf	selectNextObject@s,w,c
  3401  0008B8  26D9               	addwf	fsr2l,f,c
  3402  0008BA  5028               	movf	selectNextObject@s+1,w,c
  3403  0008BC  22DA               	addwfc	fsr2h,f,c
  3404  0008BE  EE10 F010          	lfsr	1,16
  3405  0008C2  502A               	movf	selectNextObject@NewBlock,w,c
  3406  0008C4  26E1               	addwf	fsr1l,f,c
  3407  0008C6  502B               	movf	selectNextObject@NewBlock+1,w,c
  3408  0008C8  22E2               	addwfc	fsr1h,f,c
  3409  0008CA  CFDF FFE7          	movff	indf2,indf1
  3410                           
  3411                           ;tetris.c: 80:     NewBlock->y = s->y;
  3412  0008CE  EE20 F011          	lfsr	2,17
  3413  0008D2  5027               	movf	selectNextObject@s,w,c
  3414  0008D4  26D9               	addwf	fsr2l,f,c
  3415  0008D6  5028               	movf	selectNextObject@s+1,w,c
  3416  0008D8  22DA               	addwfc	fsr2h,f,c
  3417  0008DA  EE10 F011          	lfsr	1,17
  3418  0008DE  502A               	movf	selectNextObject@NewBlock,w,c
  3419  0008E0  26E1               	addwf	fsr1l,f,c
  3420  0008E2  502B               	movf	selectNextObject@NewBlock+1,w,c
  3421  0008E4  22E2               	addwfc	fsr1h,f,c
  3422  0008E6  CFDF FFE7          	movff	indf2,indf1
  3423                           
  3424                           ;tetris.c: 81:     tetris->IsRotated = 0;
  3425  0008EA  EE20 F013          	lfsr	2,19
  3426  0008EE  5017               	movf	selectNextObject@tetris,w,c
  3427  0008F0  26D9               	addwf	fsr2l,f,c
  3428  0008F2  5018               	movf	selectNextObject@tetris+1,w,c
  3429  0008F4  22DA               	addwfc	fsr2h,f,c
  3430  0008F6  0E00               	movlw	0
  3431  0008F8  6EDF               	movwf	indf2,c
  3432                           
  3433                           ;tetris.c: 82:     NewBlock->limitedRotation = s->limitedRotation;
  3434  0008FA  EE20 F012          	lfsr	2,18
  3435  0008FE  5027               	movf	selectNextObject@s,w,c
  3436  000900  26D9               	addwf	fsr2l,f,c
  3437  000902  5028               	movf	selectNextObject@s+1,w,c
  3438  000904  22DA               	addwfc	fsr2h,f,c
  3439  000906  EE10 F012          	lfsr	1,18
  3440  00090A  502A               	movf	selectNextObject@NewBlock,w,c
  3441  00090C  26E1               	addwf	fsr1l,f,c
  3442  00090E  502B               	movf	selectNextObject@NewBlock+1,w,c
  3443  000910  22E2               	addwfc	fsr1h,f,c
  3444  000912  CFDF FFE7          	movff	indf2,indf1
  3445                           
  3446                           ;tetris.c: 83:     set_mS(0);
  3447  000916  0E00               	movlw	0
  3448  000918  6E0E               	movwf	set_mS@amount+1,c
  3449  00091A  0E00               	movlw	0
  3450  00091C  6E0D               	movwf	set_mS@amount,c
  3451  00091E  EC08  F013         	call	_set_mS	;wreg free
  3452                           
  3453                           ;tetris.c: 84:     tetris->countblocks++;
  3454  000922  EE20 F014          	lfsr	2,20
  3455  000926  5017               	movf	selectNextObject@tetris,w,c
  3456  000928  26D9               	addwf	fsr2l,f,c
  3457  00092A  5018               	movf	selectNextObject@tetris+1,w,c
  3458  00092C  22DA               	addwfc	fsr2h,f,c
  3459  00092E  2ADF               	incf	indf2,f,c
  3460  000930  0012               	return		;funcret
  3461  000932                     __end_of_selectNextObject:
  3462                           	opt callstack 0
  3463                           
  3464 ;; *************** function _set_mS *****************
  3465 ;; Defined at:
  3466 ;;		line 16 in file "shared_logic.c"
  3467 ;; Parameters:    Size  Location     Type
  3468 ;;  amount          2   12[COMRAM] unsigned short 
  3469 ;; Auto vars:     Size  Location     Type
  3470 ;;		None
  3471 ;; Return value:  Size  Location     Type
  3472 ;;                  1    wreg      void 
  3473 ;; Registers used:
  3474 ;;		None
  3475 ;; Tracked objects:
  3476 ;;		On entry : 0/0
  3477 ;;		On exit  : 0/0
  3478 ;;		Unchanged: 0/0
  3479 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3480 ;;      Params:         2       0       0       0       0       0       0
  3481 ;;      Locals:         0       0       0       0       0       0       0
  3482 ;;      Temps:          0       0       0       0       0       0       0
  3483 ;;      Totals:         2       0       0       0       0       0       0
  3484 ;;Total ram usage:        2 bytes
  3485 ;; Hardware stack levels used:    1
  3486 ;; Hardware stack levels required when called:    4
  3487 ;; This function calls:
  3488 ;;		Nothing
  3489 ;; This function is called by:
  3490 ;;		_main
  3491 ;;		_selectNextObject
  3492 ;;		_moveObjectDown
  3493 ;; This function uses a non-reentrant model
  3494 ;;
  3495                           
  3496                           	psect	text15
  3497  002610                     __ptext15:
  3498                           	opt callstack 0
  3499  002610                     _set_mS:
  3500                           	opt callstack 22
  3501                           
  3502                           ;shared_logic.c: 16: void set_mS(uint16_t amount);shared_logic.c: 17: {;shared_logic.c: 
      +                          18:     mS = amount;
  3503                           
  3504                           ;incstack = 0
  3505  002610  C00D  F057         	movff	set_mS@amount,_mS	;volatile
  3506  002614  C00E  F058         	movff	set_mS@amount+1,_mS+1	;volatile
  3507  002618  0012               	return		;funcret
  3508  00261A                     __end_of_set_mS:
  3509                           	opt callstack 0
  3510                           
  3511 ;; *************** function _moveObjecttetris *****************
  3512 ;; Defined at:
  3513 ;;		line 98 in file "tetris.c"
  3514 ;; Parameters:    Size  Location     Type
  3515 ;;  tetrisblock     2   12[COMRAM] PTR struct shape
  3516 ;;		 -> tetris.currentblock(19), tetris_main@tetris(28), 
  3517 ;;  direction       1   14[COMRAM] enum E2580
  3518 ;;  cycles          1   15[COMRAM] unsigned char 
  3519 ;; Auto vars:     Size  Location     Type
  3520 ;;  i               1   23[COMRAM] unsigned char 
  3521 ;;  c               1   22[COMRAM] unsigned char 
  3522 ;; Return value:  Size  Location     Type
  3523 ;;                  1    wreg      void 
  3524 ;; Registers used:
  3525 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  3526 ;; Tracked objects:
  3527 ;;		On entry : 0/0
  3528 ;;		On exit  : 0/0
  3529 ;;		Unchanged: 0/0
  3530 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3531 ;;      Params:         4       0       0       0       0       0       0
  3532 ;;      Locals:         2       0       0       0       0       0       0
  3533 ;;      Temps:          6       0       0       0       0       0       0
  3534 ;;      Totals:        12       0       0       0       0       0       0
  3535 ;;Total ram usage:       12 bytes
  3536 ;; Hardware stack levels used:    1
  3537 ;; Hardware stack levels required when called:    4
  3538 ;; This function calls:
  3539 ;;		Nothing
  3540 ;; This function is called by:
  3541 ;;		_moveObjectDown
  3542 ;; This function uses a non-reentrant model
  3543 ;;
  3544                           
  3545                           	psect	text16
  3546  000378                     __ptext16:
  3547                           	opt callstack 0
  3548  000378                     _moveObjecttetris:
  3549                           	opt callstack 22
  3550                           
  3551                           ;tetris.c: 98: void moveObjecttetris(struct shape *tetrisblock, direction_t direction, u
      +                          int8_t cycles);tetris.c: 99: {;tetris.c: 100:     uint8_t i, c;;tetris.c: 102:     switc
      +                          h(direction)
  3552                           
  3553                           ;incstack = 0
  3554  000378  D0F5               	goto	l4663
  3555  00037A                     l4581:
  3556                           
  3557                           ;tetris.c: 105:             for(c = 0; c < cycles; c++)
  3558  00037A  0E00               	movlw	0
  3559  00037C  6E17               	movwf	moveObjecttetris@c,c
  3560  00037E  D026               	goto	l4599
  3561  000380                     l4583:
  3562                           
  3563                           ;tetris.c: 106:             {;tetris.c: 107:                 for(i = 0; i < 8; i++) {tet
      +                          risblock->graphic[i] <<= 1; }
  3564  000380  0E00               	movlw	0
  3565  000382  6E18               	movwf	moveObjecttetris@i,c
  3566  000384                     l4589:
  3567  000384  5018               	movf	moveObjecttetris@i,w,c
  3568  000386  0D02               	mullw	2
  3569  000388  CFF3 F011          	movff	prodl,??_moveObjecttetris
  3570  00038C  CFF4 F012          	movff	prodh,??_moveObjecttetris+1
  3571  000390  5011               	movf	??_moveObjecttetris,w,c
  3572  000392  240D               	addwf	moveObjecttetris@tetrisblock,w,c
  3573  000394  6ED9               	movwf	fsr2l,c
  3574  000396  5012               	movf	??_moveObjecttetris+1,w,c
  3575  000398  200E               	addwfc	moveObjecttetris@tetrisblock+1,w,c
  3576  00039A  6EDA               	movwf	fsr2h,c
  3577  00039C  90D8               	bcf	status,0,c
  3578  00039E  36DE               	rlcf	postinc2,f,c
  3579  0003A0  36DD               	rlcf	postdec2,f,c
  3580  0003A2  2A18               	incf	moveObjecttetris@i,f,c
  3581  0003A4  0E07               	movlw	7
  3582  0003A6  6418               	cpfsgt	moveObjecttetris@i,c
  3583  0003A8  D7ED               	goto	l4589
  3584                           
  3585                           ;tetris.c: 108:                 tetrisblock->y = tetrisblock->y + 1;
  3586  0003AA  EE20 F011          	lfsr	2,17
  3587  0003AE  500D               	movf	moveObjecttetris@tetrisblock,w,c
  3588  0003B0  26D9               	addwf	fsr2l,f,c
  3589  0003B2  500E               	movf	moveObjecttetris@tetrisblock+1,w,c
  3590  0003B4  22DA               	addwfc	fsr2h,f,c
  3591  0003B6  EE10 F011          	lfsr	1,17
  3592  0003BA  500D               	movf	moveObjecttetris@tetrisblock,w,c
  3593  0003BC  26E1               	addwf	fsr1l,f,c
  3594  0003BE  500E               	movf	moveObjecttetris@tetrisblock+1,w,c
  3595  0003C0  22E2               	addwfc	fsr1h,f,c
  3596  0003C2  50E7               	movf	indf1,w,c
  3597  0003C4  6E11               	movwf	??_moveObjecttetris& (0+255),c
  3598  0003C6  2811               	incf	??_moveObjecttetris,w,c
  3599  0003C8  6EDF               	movwf	indf2,c
  3600                           
  3601                           ;tetris.c: 109:             }
  3602  0003CA  2A17               	incf	moveObjecttetris@c,f,c
  3603  0003CC                     l4599:
  3604  0003CC  5010               	movf	moveObjecttetris@cycles,w,c
  3605  0003CE  5C17               	subwf	moveObjecttetris@c,w,c
  3606  0003D0  B0D8               	btfsc	status,0,c
  3607  0003D2  0012               	return	
  3608  0003D4  D7D5               	goto	l4583
  3609  0003D6                     l4601:
  3610                           
  3611                           ;tetris.c: 112:             for(c = 0; c < cycles; c++)
  3612  0003D6  0E00               	movlw	0
  3613  0003D8  6E17               	movwf	moveObjecttetris@c,c
  3614  0003DA  D027               	goto	l4619
  3615  0003DC                     l4603:
  3616                           
  3617                           ;tetris.c: 113:             {;tetris.c: 114:                 for(i = 0; i < 8; i++) {tet
      +                          risblock->graphic[i] >>= 1; }
  3618  0003DC  0E00               	movlw	0
  3619  0003DE  6E18               	movwf	moveObjecttetris@i,c
  3620  0003E0                     l4609:
  3621  0003E0  5018               	movf	moveObjecttetris@i,w,c
  3622  0003E2  0D02               	mullw	2
  3623  0003E4  CFF3 F011          	movff	prodl,??_moveObjecttetris
  3624  0003E8  CFF4 F012          	movff	prodh,??_moveObjecttetris+1
  3625  0003EC  5011               	movf	??_moveObjecttetris,w,c
  3626  0003EE  240D               	addwf	moveObjecttetris@tetrisblock,w,c
  3627  0003F0  6ED9               	movwf	fsr2l,c
  3628  0003F2  5012               	movf	??_moveObjecttetris+1,w,c
  3629  0003F4  200E               	addwfc	moveObjecttetris@tetrisblock+1,w,c
  3630  0003F6  6EDA               	movwf	fsr2h,c
  3631  0003F8  90D8               	bcf	status,0,c
  3632  0003FA  32DC               	rrcf	preinc2,f,c
  3633  0003FC  50DD               	movf	postdec2,w,c
  3634  0003FE  32DF               	rrcf	indf2,f,c
  3635  000400  2A18               	incf	moveObjecttetris@i,f,c
  3636  000402  0E07               	movlw	7
  3637  000404  6418               	cpfsgt	moveObjecttetris@i,c
  3638  000406  D7EC               	goto	l4609
  3639                           
  3640                           ;tetris.c: 115:                 tetrisblock->y = tetrisblock->y - 1;
  3641  000408  EE20 F011          	lfsr	2,17
  3642  00040C  500D               	movf	moveObjecttetris@tetrisblock,w,c
  3643  00040E  26D9               	addwf	fsr2l,f,c
  3644  000410  500E               	movf	moveObjecttetris@tetrisblock+1,w,c
  3645  000412  22DA               	addwfc	fsr2h,f,c
  3646  000414  EE10 F011          	lfsr	1,17
  3647  000418  500D               	movf	moveObjecttetris@tetrisblock,w,c
  3648  00041A  26E1               	addwf	fsr1l,f,c
  3649  00041C  500E               	movf	moveObjecttetris@tetrisblock+1,w,c
  3650  00041E  22E2               	addwfc	fsr1h,f,c
  3651  000420  50E7               	movf	indf1,w,c
  3652  000422  6E11               	movwf	??_moveObjecttetris& (0+255),c
  3653  000424  0411               	decf	??_moveObjecttetris,w,c
  3654  000426  6EDF               	movwf	indf2,c
  3655                           
  3656                           ;tetris.c: 116:             }
  3657  000428  2A17               	incf	moveObjecttetris@c,f,c
  3658  00042A                     l4619:
  3659  00042A  5010               	movf	moveObjecttetris@cycles,w,c
  3660  00042C  5C17               	subwf	moveObjecttetris@c,w,c
  3661  00042E  B0D8               	btfsc	status,0,c
  3662  000430  0012               	return	
  3663  000432  D7D4               	goto	l4603
  3664  000434                     l4621:
  3665                           
  3666                           ;tetris.c: 119:             for(c = 0; c < cycles; c++)
  3667  000434  0E00               	movlw	0
  3668  000436  6E17               	movwf	moveObjecttetris@c,c
  3669  000438  D043               	goto	l4639
  3670  00043A                     l4623:
  3671                           
  3672                           ;tetris.c: 120:             {;tetris.c: 121:                 for(i = 7; i > 0; i--) {tet
      +                          risblock->graphic[i] = tetrisblock->graphic[i - 1]; }
  3673  00043A  0E07               	movlw	7
  3674  00043C  6E18               	movwf	moveObjecttetris@i,c
  3675  00043E                     l4627:
  3676  00043E  5018               	movf	moveObjecttetris@i,w,c
  3677  000440  6E11               	movwf	??_moveObjecttetris& (0+255),c
  3678  000442  6A12               	clrf	(??_moveObjecttetris+1)& (0+255),c
  3679  000444  90D8               	bcf	status,0,c
  3680  000446  3611               	rlcf	??_moveObjecttetris,f,c
  3681  000448  3612               	rlcf	??_moveObjecttetris+1,f,c
  3682  00044A  C00D  F013         	movff	moveObjecttetris@tetrisblock,??_moveObjecttetris+2
  3683  00044E  C00E  F014         	movff	moveObjecttetris@tetrisblock+1,??_moveObjecttetris+3
  3684  000452  5011               	movf	??_moveObjecttetris,w,c
  3685  000454  2613               	addwf	??_moveObjecttetris+2,f,c
  3686  000456  5012               	movf	??_moveObjecttetris+1,w,c
  3687  000458  2214               	addwfc	??_moveObjecttetris+3,f,c
  3688  00045A  0EFE               	movlw	254
  3689  00045C  2413               	addwf	??_moveObjecttetris+2,w,c
  3690  00045E  6ED9               	movwf	fsr2l,c
  3691  000460  0EFF               	movlw	255
  3692  000462  2014               	addwfc	??_moveObjecttetris+3,w,c
  3693  000464  6EDA               	movwf	fsr2h,c
  3694  000466  5018               	movf	moveObjecttetris@i,w,c
  3695  000468  0D02               	mullw	2
  3696  00046A  CFF3 F015          	movff	prodl,??_moveObjecttetris+4
  3697  00046E  CFF4 F016          	movff	prodh,??_moveObjecttetris+5
  3698  000472  5015               	movf	??_moveObjecttetris+4,w,c
  3699  000474  240D               	addwf	moveObjecttetris@tetrisblock,w,c
  3700  000476  6EE1               	movwf	fsr1l,c
  3701  000478  5016               	movf	??_moveObjecttetris+5,w,c
  3702  00047A  200E               	addwfc	moveObjecttetris@tetrisblock+1,w,c
  3703  00047C  6EE2               	movwf	fsr1h,c
  3704  00047E  CFDE FFE6          	movff	postinc2,postinc1
  3705  000482  CFDD FFE5          	movff	postdec2,postdec1
  3706  000486  0618               	decf	moveObjecttetris@i,f,c
  3707  000488  5018               	movf	moveObjecttetris@i,w,c
  3708  00048A  A4D8               	btfss	status,2,c
  3709  00048C  D7D8               	goto	l4627
  3710                           
  3711                           ;tetris.c: 122:                 tetrisblock->graphic[0] = 0;
  3712  00048E  C00D  FFD9         	movff	moveObjecttetris@tetrisblock,fsr2l
  3713  000492  C00E  FFDA         	movff	moveObjecttetris@tetrisblock+1,fsr2h
  3714  000496  0E00               	movlw	0
  3715  000498  6EDE               	movwf	postinc2,c
  3716  00049A  0E00               	movlw	0
  3717  00049C  6EDD               	movwf	postdec2,c
  3718                           
  3719                           ;tetris.c: 123:                 tetrisblock->x = tetrisblock->x + 1;
  3720  00049E  EE20 F010          	lfsr	2,16
  3721  0004A2  500D               	movf	moveObjecttetris@tetrisblock,w,c
  3722  0004A4  26D9               	addwf	fsr2l,f,c
  3723  0004A6  500E               	movf	moveObjecttetris@tetrisblock+1,w,c
  3724  0004A8  22DA               	addwfc	fsr2h,f,c
  3725  0004AA  EE10 F010          	lfsr	1,16
  3726  0004AE  500D               	movf	moveObjecttetris@tetrisblock,w,c
  3727  0004B0  26E1               	addwf	fsr1l,f,c
  3728  0004B2  500E               	movf	moveObjecttetris@tetrisblock+1,w,c
  3729  0004B4  22E2               	addwfc	fsr1h,f,c
  3730  0004B6  50E7               	movf	indf1,w,c
  3731  0004B8  6E11               	movwf	??_moveObjecttetris& (0+255),c
  3732  0004BA  2811               	incf	??_moveObjecttetris,w,c
  3733  0004BC  6EDF               	movwf	indf2,c
  3734                           
  3735                           ;tetris.c: 124:             }
  3736  0004BE  2A17               	incf	moveObjecttetris@c,f,c
  3737  0004C0                     l4639:
  3738  0004C0  5010               	movf	moveObjecttetris@cycles,w,c
  3739  0004C2  5C17               	subwf	moveObjecttetris@c,w,c
  3740  0004C4  B0D8               	btfsc	status,0,c
  3741  0004C6  0012               	return	
  3742  0004C8  D7B8               	goto	l4623
  3743  0004CA                     l4641:
  3744                           
  3745                           ;tetris.c: 127:             for(c = 0; c < cycles; c++)
  3746  0004CA  0E00               	movlw	0
  3747  0004CC  6E17               	movwf	moveObjecttetris@c,c
  3748  0004CE  D045               	goto	l4661
  3749  0004D0                     l4643:
  3750                           
  3751                           ;tetris.c: 128:             {;tetris.c: 129:                 for(i = 0; i < 7; i++) {tet
      +                          risblock->graphic[i] = tetrisblock->graphic[i + 1];}
  3752  0004D0  0E00               	movlw	0
  3753  0004D2  6E18               	movwf	moveObjecttetris@i,c
  3754  0004D4                     l4649:
  3755  0004D4  5018               	movf	moveObjecttetris@i,w,c
  3756  0004D6  6E11               	movwf	??_moveObjecttetris& (0+255),c
  3757  0004D8  6A12               	clrf	(??_moveObjecttetris+1)& (0+255),c
  3758  0004DA  90D8               	bcf	status,0,c
  3759  0004DC  3611               	rlcf	??_moveObjecttetris,f,c
  3760  0004DE  3612               	rlcf	??_moveObjecttetris+1,f,c
  3761  0004E0  C00D  F013         	movff	moveObjecttetris@tetrisblock,??_moveObjecttetris+2
  3762  0004E4  C00E  F014         	movff	moveObjecttetris@tetrisblock+1,??_moveObjecttetris+3
  3763  0004E8  5011               	movf	??_moveObjecttetris,w,c
  3764  0004EA  2613               	addwf	??_moveObjecttetris+2,f,c
  3765  0004EC  5012               	movf	??_moveObjecttetris+1,w,c
  3766  0004EE  2214               	addwfc	??_moveObjecttetris+3,f,c
  3767  0004F0  0E02               	movlw	2
  3768  0004F2  2413               	addwf	??_moveObjecttetris+2,w,c
  3769  0004F4  6ED9               	movwf	fsr2l,c
  3770  0004F6  0E00               	movlw	0
  3771  0004F8  2014               	addwfc	??_moveObjecttetris+3,w,c
  3772  0004FA  6EDA               	movwf	fsr2h,c
  3773  0004FC  5018               	movf	moveObjecttetris@i,w,c
  3774  0004FE  0D02               	mullw	2
  3775  000500  CFF3 F015          	movff	prodl,??_moveObjecttetris+4
  3776  000504  CFF4 F016          	movff	prodh,??_moveObjecttetris+5
  3777  000508  5015               	movf	??_moveObjecttetris+4,w,c
  3778  00050A  240D               	addwf	moveObjecttetris@tetrisblock,w,c
  3779  00050C  6EE1               	movwf	fsr1l,c
  3780  00050E  5016               	movf	??_moveObjecttetris+5,w,c
  3781  000510  200E               	addwfc	moveObjecttetris@tetrisblock+1,w,c
  3782  000512  6EE2               	movwf	fsr1h,c
  3783  000514  CFDE FFE6          	movff	postinc2,postinc1
  3784  000518  CFDD FFE5          	movff	postdec2,postdec1
  3785  00051C  2A18               	incf	moveObjecttetris@i,f,c
  3786  00051E  0E06               	movlw	6
  3787  000520  6418               	cpfsgt	moveObjecttetris@i,c
  3788  000522  D7D8               	goto	l4649
  3789                           
  3790                           ;tetris.c: 130:                 tetrisblock->graphic[7] = 0;
  3791  000524  EE20 F00E          	lfsr	2,14
  3792  000528  500D               	movf	moveObjecttetris@tetrisblock,w,c
  3793  00052A  26D9               	addwf	fsr2l,f,c
  3794  00052C  500E               	movf	moveObjecttetris@tetrisblock+1,w,c
  3795  00052E  22DA               	addwfc	fsr2h,f,c
  3796  000530  0E00               	movlw	0
  3797  000532  6EDE               	movwf	postinc2,c
  3798  000534  0E00               	movlw	0
  3799  000536  6EDD               	movwf	postdec2,c
  3800                           
  3801                           ;tetris.c: 131:                 tetrisblock->x = tetrisblock->x - 1;
  3802  000538  EE20 F010          	lfsr	2,16
  3803  00053C  500D               	movf	moveObjecttetris@tetrisblock,w,c
  3804  00053E  26D9               	addwf	fsr2l,f,c
  3805  000540  500E               	movf	moveObjecttetris@tetrisblock+1,w,c
  3806  000542  22DA               	addwfc	fsr2h,f,c
  3807  000544  EE10 F010          	lfsr	1,16
  3808  000548  500D               	movf	moveObjecttetris@tetrisblock,w,c
  3809  00054A  26E1               	addwf	fsr1l,f,c
  3810  00054C  500E               	movf	moveObjecttetris@tetrisblock+1,w,c
  3811  00054E  22E2               	addwfc	fsr1h,f,c
  3812  000550  50E7               	movf	indf1,w,c
  3813  000552  6E11               	movwf	??_moveObjecttetris& (0+255),c
  3814  000554  0411               	decf	??_moveObjecttetris,w,c
  3815  000556  6EDF               	movwf	indf2,c
  3816                           
  3817                           ;tetris.c: 132:             }
  3818  000558  2A17               	incf	moveObjecttetris@c,f,c
  3819  00055A                     l4661:
  3820  00055A  5010               	movf	moveObjecttetris@cycles,w,c
  3821  00055C  5C17               	subwf	moveObjecttetris@c,w,c
  3822  00055E  B0D8               	btfsc	status,0,c
  3823  000560  0012               	return	
  3824  000562  D7B6               	goto	l4643
  3825  000564                     l4663:
  3826  000564  500F               	movf	moveObjecttetris@direction,w,c
  3827  000566  6E11               	movwf	??_moveObjecttetris& (0+255),c
  3828  000568  6A12               	clrf	(??_moveObjecttetris+1)& (0+255),c
  3829                           
  3830                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  3831                           ; Switch size 1, requested type "simple"
  3832                           ; Number of cases is 1, Range of values is 0 to 0
  3833                           ; switch strategies available:
  3834                           ; Name         Instructions Cycles
  3835                           ; simple_byte            4     3 (average)
  3836                           ;	Chosen strategy is simple_byte
  3837  00056A  5012               	movf	??_moveObjecttetris+1,w,c
  3838  00056C  0A00               	xorlw	0	; case 0
  3839  00056E  A4D8               	btfss	status,2,c
  3840  000570  0012               	return	
  3841                           
  3842                           ; Switch size 1, requested type "simple"
  3843                           ; Number of cases is 4, Range of values is 0 to 3
  3844                           ; switch strategies available:
  3845                           ; Name         Instructions Cycles
  3846                           ; simple_byte           13     7 (average)
  3847                           ;	Chosen strategy is simple_byte
  3848  000572  5011               	movf	??_moveObjecttetris,w,c
  3849  000574  0A00               	xorlw	0	; case 0
  3850  000576  B4D8               	btfsc	status,2,c
  3851  000578  D700               	goto	l4581
  3852  00057A  0A01               	xorlw	1	; case 1
  3853  00057C  B4D8               	btfsc	status,2,c
  3854  00057E  D72B               	goto	l4601
  3855  000580  0A03               	xorlw	3	; case 2
  3856  000582  B4D8               	btfsc	status,2,c
  3857  000584  D7A2               	goto	l4641
  3858  000586  0A01               	xorlw	1	; case 3
  3859  000588  A4D8               	btfss	status,2,c
  3860  00058A  0012               	return	
  3861  00058C  D753               	goto	l4621
  3862  00058E                     __end_of_moveObjecttetris:
  3863                           	opt callstack 0
  3864                           
  3865 ;; *************** function _collisionDetect *****************
  3866 ;; Defined at:
  3867 ;;		line 177 in file "shared_logic.c"
  3868 ;; Parameters:    Size  Location     Type
  3869 ;;  pSource         2   12[COMRAM] PTR volatile unsigned sh
  3870 ;;		 -> tetris_main@tetris.graphic(16), tetris.currentblock.graphic(16), tetris_button_up@tmpObjectData(16), tetris_butt
      +on_right@tmpObjectData(16), 
  3871 ;;		 -> tetris_button_left@tmpObjectData(16), moveObjectDown@tetrisblock(2), 
  3872 ;;  pTarget         2   14[COMRAM] PTR volatile unsigned sh
  3873 ;;		 -> tetris_main@BackgroundData(16), 
  3874 ;; Auto vars:     Size  Location     Type
  3875 ;;  i               1   24[COMRAM] unsigned char 
  3876 ;; Return value:  Size  Location     Type
  3877 ;;                  1    wreg      _Bool 
  3878 ;; Registers used:
  3879 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  3880 ;; Tracked objects:
  3881 ;;		On entry : 0/0
  3882 ;;		On exit  : 0/0
  3883 ;;		Unchanged: 0/0
  3884 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3885 ;;      Params:         4       0       0       0       0       0       0
  3886 ;;      Locals:         1       0       0       0       0       0       0
  3887 ;;      Temps:          8       0       0       0       0       0       0
  3888 ;;      Totals:        13       0       0       0       0       0       0
  3889 ;;Total ram usage:       13 bytes
  3890 ;; Hardware stack levels used:    1
  3891 ;; Hardware stack levels required when called:    4
  3892 ;; This function calls:
  3893 ;;		Nothing
  3894 ;; This function is called by:
  3895 ;;		_moveObjectDown
  3896 ;;		_tetris_button_left
  3897 ;;		_tetris_button_right
  3898 ;;		_tetris_button_up
  3899 ;; This function uses a non-reentrant model
  3900 ;;
  3901                           
  3902                           	psect	text17
  3903  001F42                     __ptext17:
  3904                           	opt callstack 0
  3905  001F42                     _collisionDetect:
  3906                           	opt callstack 23
  3907                           
  3908                           ;shared_logic.c: 177: _Bool collisionDetect(volatile uint16_t * pSource, volatile uint16
      +                          _t * pTarget);shared_logic.c: 178: {;shared_logic.c: 179:     uint8_t i = 8;
  3909                           
  3910                           ;incstack = 0
  3911  001F42  0E08               	movlw	8
  3912  001F44  6E19               	movwf	collisionDetect@i,c
  3913                           
  3914                           ;shared_logic.c: 180:     while(i--)
  3915  001F46  D02A               	goto	l4699
  3916  001F48                     l4693:
  3917                           
  3918                           ;shared_logic.c: 181:     {;shared_logic.c: 182:         if(pSource[i] & pTarget[i])
  3919  001F48  5019               	movf	collisionDetect@i,w,c
  3920  001F4A  0D02               	mullw	2
  3921  001F4C  CFF3 F011          	movff	prodl,??_collisionDetect
  3922  001F50  CFF4 F012          	movff	prodh,??_collisionDetect+1
  3923  001F54  5011               	movf	??_collisionDetect,w,c
  3924  001F56  240F               	addwf	collisionDetect@pTarget,w,c
  3925  001F58  6ED9               	movwf	fsr2l,c
  3926  001F5A  5012               	movf	??_collisionDetect+1,w,c
  3927  001F5C  2010               	addwfc	collisionDetect@pTarget+1,w,c
  3928  001F5E  6EDA               	movwf	fsr2h,c
  3929  001F60  CFDE F013          	movff	postinc2,??_collisionDetect+2
  3930  001F64  CFDD F014          	movff	postdec2,??_collisionDetect+3
  3931  001F68  5019               	movf	collisionDetect@i,w,c
  3932  001F6A  0D02               	mullw	2
  3933  001F6C  CFF3 F015          	movff	prodl,??_collisionDetect+4
  3934  001F70  CFF4 F016          	movff	prodh,??_collisionDetect+5
  3935  001F74  5015               	movf	??_collisionDetect+4,w,c
  3936  001F76  240D               	addwf	collisionDetect@pSource,w,c
  3937  001F78  6ED9               	movwf	fsr2l,c
  3938  001F7A  5016               	movf	??_collisionDetect+5,w,c
  3939  001F7C  200E               	addwfc	collisionDetect@pSource+1,w,c
  3940  001F7E  6EDA               	movwf	fsr2h,c
  3941  001F80  CFDE F017          	movff	postinc2,??_collisionDetect+6
  3942  001F84  CFDD F018          	movff	postdec2,??_collisionDetect+7
  3943  001F88  5013               	movf	??_collisionDetect+2,w,c
  3944  001F8A  1617               	andwf	??_collisionDetect+6,f,c
  3945  001F8C  5014               	movf	??_collisionDetect+3,w,c
  3946  001F8E  1618               	andwf	??_collisionDetect+7,f,c
  3947  001F90  5017               	movf	??_collisionDetect+6,w,c
  3948  001F92  1018               	iorwf	??_collisionDetect+7,w,c
  3949  001F94  B4D8               	btfsc	status,2,c
  3950  001F96  D002               	goto	l4699
  3951                           
  3952                           ;shared_logic.c: 183:             return 1;
  3953  001F98  0E01               	movlw	1
  3954  001F9A  0012               	return	
  3955  001F9C                     l4699:
  3956                           
  3957                           ;shared_logic.c: 180:     while(i--)
  3958  001F9C  0619               	decf	collisionDetect@i,f,c
  3959  001F9E  2819               	incf	collisionDetect@i,w,c
  3960  001FA0  A4D8               	btfss	status,2,c
  3961  001FA2  D7D2               	goto	l4693
  3962                           
  3963                           ;shared_logic.c: 185:     return 0;
  3964  001FA4  0E00               	movlw	0
  3965  001FA6  0012               	return		;funcret
  3966  001FA8                     __end_of_collisionDetect:
  3967                           	opt callstack 0
  3968                           
  3969 ;; *************** function _checkForBottom *****************
  3970 ;; Defined at:
  3971 ;;		line 87 in file "tetris.c"
  3972 ;; Parameters:    Size  Location     Type
  3973 ;;  pObject         2   12[COMRAM] PTR volatile unsigned sh
  3974 ;;		 -> tetris_main@tetris.graphic(16), tetris.currentblock.graphic(16), moveObjectDown@tetrisblock(2), 
  3975 ;; Auto vars:     Size  Location     Type
  3976 ;;  i               1   18[COMRAM] unsigned char 
  3977 ;; Return value:  Size  Location     Type
  3978 ;;                  1    wreg      _Bool 
  3979 ;; Registers used:
  3980 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  3981 ;; Tracked objects:
  3982 ;;		On entry : 0/0
  3983 ;;		On exit  : 0/0
  3984 ;;		Unchanged: 0/0
  3985 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3986 ;;      Params:         2       0       0       0       0       0       0
  3987 ;;      Locals:         1       0       0       0       0       0       0
  3988 ;;      Temps:          4       0       0       0       0       0       0
  3989 ;;      Totals:         7       0       0       0       0       0       0
  3990 ;;Total ram usage:        7 bytes
  3991 ;; Hardware stack levels used:    1
  3992 ;; Hardware stack levels required when called:    4
  3993 ;; This function calls:
  3994 ;;		Nothing
  3995 ;; This function is called by:
  3996 ;;		_moveObjectDown
  3997 ;; This function uses a non-reentrant model
  3998 ;;
  3999                           
  4000                           	psect	text18
  4001  0021D2                     __ptext18:
  4002                           	opt callstack 0
  4003  0021D2                     _checkForBottom:
  4004                           	opt callstack 22
  4005                           
  4006                           ;tetris.c: 87: _Bool checkForBottom(volatile uint16_t * pObject);tetris.c: 88: {;tetris.
      +                          c: 89:     for(uint8_t i = 0; i < 8; i++)
  4007                           
  4008                           ;incstack = 0
  4009  0021D2  0E00               	movlw	0
  4010  0021D4  6E13               	movwf	checkForBottom@i,c
  4011  0021D6                     l4565:
  4012                           
  4013                           ;tetris.c: 90:         if(pObject[i] & (1<<15))
  4014  0021D6  5013               	movf	checkForBottom@i,w,c
  4015  0021D8  0D02               	mullw	2
  4016  0021DA  CFF3 F00F          	movff	prodl,??_checkForBottom
  4017  0021DE  CFF4 F010          	movff	prodh,??_checkForBottom+1
  4018  0021E2  500F               	movf	??_checkForBottom,w,c
  4019  0021E4  240D               	addwf	checkForBottom@pObject,w,c
  4020  0021E6  6ED9               	movwf	fsr2l,c
  4021  0021E8  5010               	movf	??_checkForBottom+1,w,c
  4022  0021EA  200E               	addwfc	checkForBottom@pObject+1,w,c
  4023  0021EC  6EDA               	movwf	fsr2h,c
  4024  0021EE  CFDE F011          	movff	postinc2,??_checkForBottom+2
  4025  0021F2  CFDD F012          	movff	postdec2,??_checkForBottom+3
  4026  0021F6  AE12               	btfss	??_checkForBottom+3,7,c
  4027  0021F8  D002               	goto	l4571
  4028                           
  4029                           ;tetris.c: 91:             return 1;
  4030  0021FA  0E01               	movlw	1
  4031  0021FC  0012               	return	
  4032  0021FE                     l4571:
  4033  0021FE  2A13               	incf	checkForBottom@i,f,c
  4034  002200  0E07               	movlw	7
  4035  002202  6413               	cpfsgt	checkForBottom@i,c
  4036  002204  D7E8               	goto	l4565
  4037                           
  4038                           ;tetris.c: 92:     return 0;
  4039  002206  0E00               	movlw	0
  4040  002208  0012               	return		;funcret
  4041  00220A                     __end_of_checkForBottom:
  4042                           	opt callstack 0
  4043                           
  4044 ;; *************** function _checkForLines *****************
  4045 ;; Defined at:
  4046 ;;		line 245 in file "tetris.c"
  4047 ;; Parameters:    Size  Location     Type
  4048 ;;  pObject         2   36[COMRAM] PTR unsigned short 
  4049 ;;		 -> tetris_main@BackgroundData(16), 
  4050 ;; Auto vars:     Size  Location     Type
  4051 ;;  y               1   48[COMRAM] unsigned char 
  4052 ;;  x               1   47[COMRAM] unsigned char 
  4053 ;;  NumberOfLine    1   46[COMRAM] unsigned char 
  4054 ;;  pixels          1   45[COMRAM] unsigned char 
  4055 ;; Return value:  Size  Location     Type
  4056 ;;                  1    wreg      unsigned char 
  4057 ;; Registers used:
  4058 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4059 ;; Tracked objects:
  4060 ;;		On entry : 0/0
  4061 ;;		On exit  : 0/0
  4062 ;;		Unchanged: 0/0
  4063 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4064 ;;      Params:         2       0       0       0       0       0       0
  4065 ;;      Locals:         4       0       0       0       0       0       0
  4066 ;;      Temps:          7       0       0       0       0       0       0
  4067 ;;      Totals:        13       0       0       0       0       0       0
  4068 ;;Total ram usage:       13 bytes
  4069 ;; Hardware stack levels used:    1
  4070 ;; Hardware stack levels required when called:    5
  4071 ;; This function calls:
  4072 ;;		_removeLine
  4073 ;; This function is called by:
  4074 ;;		_tetris_main
  4075 ;; This function uses a non-reentrant model
  4076 ;;
  4077                           
  4078                           	psect	text19
  4079  001A84                     __ptext19:
  4080                           	opt callstack 0
  4081  001A84                     _checkForLines:
  4082                           	opt callstack 24
  4083                           
  4084                           ;tetris.c: 245: uint8_t checkForLines(uint16_t * pObject);tetris.c: 246: {;tetris.c: 247
      +                          :     uint8_t x, y, pixels;;tetris.c: 248:     uint8_t NumberOfLines = 0;
  4085                           
  4086                           ;incstack = 0
  4087  001A84  0E00               	movlw	0
  4088  001A86  6E2F               	movwf	checkForLines@NumberOfLines,c
  4089                           
  4090                           ;tetris.c: 249:     for(y = 0; y < 16; y++)
  4091  001A88  0E00               	movlw	0
  4092  001A8A  6E31               	movwf	checkForLines@y,c
  4093  001A8C                     l5295:
  4094                           
  4095                           ;tetris.c: 250:     {;tetris.c: 251:         pixels = 0;
  4096  001A8C  0E00               	movlw	0
  4097  001A8E  6E2E               	movwf	checkForLines@pixels,c
  4098                           
  4099                           ;tetris.c: 252:         for(x = 0; x < 8; x++)
  4100  001A90  0E00               	movlw	0
  4101  001A92  6E30               	movwf	checkForLines@x,c
  4102  001A94                     l5301:
  4103                           
  4104                           ;tetris.c: 253:             if(pObject[x] & (1<<y))
  4105  001A94  5030               	movf	checkForLines@x,w,c
  4106  001A96  0D02               	mullw	2
  4107  001A98  CFF3 F027          	movff	prodl,??_checkForLines
  4108  001A9C  CFF4 F028          	movff	prodh,??_checkForLines+1
  4109  001AA0  5027               	movf	??_checkForLines,w,c
  4110  001AA2  2425               	addwf	checkForLines@pObject,w,c
  4111  001AA4  6ED9               	movwf	fsr2l,c
  4112  001AA6  5028               	movf	??_checkForLines+1,w,c
  4113  001AA8  2026               	addwfc	checkForLines@pObject+1,w,c
  4114  001AAA  6EDA               	movwf	fsr2h,c
  4115  001AAC  CFDE F029          	movff	postinc2,??_checkForLines+2
  4116  001AB0  CFDD F02A          	movff	postdec2,??_checkForLines+3
  4117  001AB4  C031  F02B         	movff	checkForLines@y,??_checkForLines+4
  4118  001AB8  0E01               	movlw	1
  4119  001ABA  6E2C               	movwf	(??_checkForLines+5)& (0+255),c
  4120  001ABC  0E00               	movlw	0
  4121  001ABE  6E2D               	movwf	(??_checkForLines+6)& (0+255),c
  4122  001AC0  2A2B               	incf	??_checkForLines+4,f,c
  4123  001AC2  D003               	goto	u5294
  4124  001AC4                     u5295:
  4125  001AC4  90D8               	bcf	status,0,c
  4126  001AC6  362C               	rlcf	??_checkForLines+5,f,c
  4127  001AC8  362D               	rlcf	??_checkForLines+6,f,c
  4128  001ACA                     u5294:
  4129  001ACA  2E2B               	decfsz	??_checkForLines+4,f,c
  4130  001ACC  D7FB               	goto	u5295
  4131  001ACE  5029               	movf	??_checkForLines+2,w,c
  4132  001AD0  162C               	andwf	??_checkForLines+5,f,c
  4133  001AD2  502A               	movf	??_checkForLines+3,w,c
  4134  001AD4  162D               	andwf	??_checkForLines+6,f,c
  4135  001AD6  502C               	movf	??_checkForLines+5,w,c
  4136  001AD8  102D               	iorwf	??_checkForLines+6,w,c
  4137  001ADA  A4D8               	btfss	status,2,c
  4138                           
  4139                           ;tetris.c: 254:                 pixels++;
  4140  001ADC  2A2E               	incf	checkForLines@pixels,f,c
  4141  001ADE  2A30               	incf	checkForLines@x,f,c
  4142  001AE0  0E07               	movlw	7
  4143  001AE2  6430               	cpfsgt	checkForLines@x,c
  4144  001AE4  D7D7               	goto	l5301
  4145                           
  4146                           ;tetris.c: 255:         if(pixels == 8)
  4147  001AE6  0E08               	movlw	8
  4148  001AE8  182E               	xorwf	checkForLines@pixels,w,c
  4149  001AEA  A4D8               	btfss	status,2,c
  4150  001AEC  D009               	goto	l5313
  4151                           
  4152                           ;tetris.c: 256:         {;tetris.c: 257:             removeLine(pObject, y);
  4153  001AEE  C025  F00D         	movff	checkForLines@pObject,removeLine@pObject
  4154  001AF2  C026  F00E         	movff	checkForLines@pObject+1,removeLine@pObject+1
  4155  001AF6  C031  F00F         	movff	checkForLines@y,removeLine@pY
  4156  001AFA  ECB0  F008         	call	_removeLine	;wreg free
  4157                           
  4158                           ;tetris.c: 258:             NumberOfLines++;
  4159  001AFE  2A2F               	incf	checkForLines@NumberOfLines,f,c
  4160  001B00                     l5313:
  4161                           
  4162                           ;tetris.c: 260:     }
  4163  001B00  2A31               	incf	checkForLines@y,f,c
  4164  001B02  0E0F               	movlw	15
  4165  001B04  6431               	cpfsgt	checkForLines@y,c
  4166  001B06  D7C2               	goto	l5295
  4167                           
  4168                           ;tetris.c: 261:     return NumberOfLines;
  4169  001B08  502F               	movf	checkForLines@NumberOfLines,w,c
  4170  001B0A  0012               	return		;funcret
  4171  001B0C                     __end_of_checkForLines:
  4172                           	opt callstack 0
  4173                           
  4174 ;; *************** function _removeLine *****************
  4175 ;; Defined at:
  4176 ;;		line 211 in file "shared_logic.c"
  4177 ;; Parameters:    Size  Location     Type
  4178 ;;  pObject         2   12[COMRAM] PTR volatile unsigned sh
  4179 ;;		 -> tetris_main@BackgroundData(16), 
  4180 ;;  pY              1   14[COMRAM] unsigned char 
  4181 ;; Auto vars:     Size  Location     Type
  4182 ;;  x               1   35[COMRAM] unsigned char 
  4183 ;;  currentLine     1   34[COMRAM] unsigned char 
  4184 ;;  y               1   33[COMRAM] unsigned char 
  4185 ;;  x               1   32[COMRAM] unsigned char 
  4186 ;; Return value:  Size  Location     Type
  4187 ;;                  1    wreg      void 
  4188 ;; Registers used:
  4189 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  4190 ;; Tracked objects:
  4191 ;;		On entry : 0/0
  4192 ;;		On exit  : 0/0
  4193 ;;		Unchanged: 0/0
  4194 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4195 ;;      Params:         3       0       0       0       0       0       0
  4196 ;;      Locals:         4       0       0       0       0       0       0
  4197 ;;      Temps:         17       0       0       0       0       0       0
  4198 ;;      Totals:        24       0       0       0       0       0       0
  4199 ;;Total ram usage:       24 bytes
  4200 ;; Hardware stack levels used:    1
  4201 ;; Hardware stack levels required when called:    4
  4202 ;; This function calls:
  4203 ;;		Nothing
  4204 ;; This function is called by:
  4205 ;;		_checkForLines
  4206 ;; This function uses a non-reentrant model
  4207 ;;
  4208                           
  4209                           	psect	text20
  4210  001160                     __ptext20:
  4211                           	opt callstack 0
  4212  001160                     _removeLine:
  4213                           	opt callstack 24
  4214                           
  4215                           ;shared_logic.c: 211: void removeLine(volatile uint16_t * pObject, uint8_t pY);shared_lo
      +                          gic.c: 212: {;shared_logic.c: 213:     uint8_t y, currentLine;;shared_logic.c: 216:     
      +                          for(y = pY - 1; y < pY; y--)
  4216                           
  4217                           ;incstack = 0
  4218  001160  040F               	decf	removeLine@pY,w,c
  4219  001162  6E22               	movwf	removeLine@y,c
  4220  001164  D069               	goto	l5057
  4221  001166                     l5047:
  4222                           
  4223                           ;shared_logic.c: 217:     {;shared_logic.c: 218:         currentLine = y + 1;
  4224  001166  2822               	incf	removeLine@y,w,c
  4225  001168  6E23               	movwf	removeLine@currentLine,c
  4226                           
  4227                           ;shared_logic.c: 219:         uint8_t x = 8;
  4228  00116A  0E08               	movlw	8
  4229  00116C  6E24               	movwf	removeLine@x,c
  4230                           
  4231                           ;shared_logic.c: 220:         while(x--)
  4232  00116E  D05F               	goto	l5053
  4233  001170                     l5051:
  4234                           
  4235                           ;shared_logic.c: 221:         {;shared_logic.c: 222:             pObject[x] = (pObject[x
      +                          ] & ~(1<<currentLine)) | ((((pObject[x] >> y) & 1)&1)<<currentLine);
  4236  001170  C023  F010         	movff	removeLine@currentLine,??_removeLine
  4237  001174  C022  F011         	movff	removeLine@y,??_removeLine+1
  4238  001178  5024               	movf	removeLine@x,w,c
  4239  00117A  0D02               	mullw	2
  4240  00117C  CFF3 F012          	movff	prodl,??_removeLine+2
  4241  001180  CFF4 F013          	movff	prodh,??_removeLine+3
  4242  001184  5012               	movf	??_removeLine+2,w,c
  4243  001186  240D               	addwf	removeLine@pObject,w,c
  4244  001188  6ED9               	movwf	fsr2l,c
  4245  00118A  5013               	movf	??_removeLine+3,w,c
  4246  00118C  200E               	addwfc	removeLine@pObject+1,w,c
  4247  00118E  6EDA               	movwf	fsr2h,c
  4248  001190  CFDE F014          	movff	postinc2,??_removeLine+4
  4249  001194  CFDD F015          	movff	postdec2,??_removeLine+5
  4250  001198  2A11               	incf	??_removeLine+1,f,c
  4251  00119A  D003               	goto	u4894
  4252  00119C                     u4895:
  4253  00119C  90D8               	bcf	status,0,c
  4254  00119E  3215               	rrcf	??_removeLine+5,f,c
  4255  0011A0  3214               	rrcf	??_removeLine+4,f,c
  4256  0011A2                     u4894:
  4257  0011A2  2E11               	decfsz	??_removeLine+1,f,c
  4258  0011A4  D7FB               	goto	u4895
  4259  0011A6  0E01               	movlw	1
  4260  0011A8  1614               	andwf	??_removeLine+4,f,c
  4261  0011AA  0E00               	movlw	0
  4262  0011AC  1615               	andwf	??_removeLine+5,f,c
  4263  0011AE  2A10               	incf	??_removeLine,f,c
  4264  0011B0  D003               	goto	u4904
  4265  0011B2                     u4905:
  4266  0011B2  90D8               	bcf	status,0,c
  4267  0011B4  3614               	rlcf	??_removeLine+4,f,c
  4268  0011B6  3615               	rlcf	??_removeLine+5,f,c
  4269  0011B8                     u4904:
  4270  0011B8  2E10               	decfsz	??_removeLine,f,c
  4271  0011BA  D7FB               	goto	u4905
  4272  0011BC  5024               	movf	removeLine@x,w,c
  4273  0011BE  0D02               	mullw	2
  4274  0011C0  CFF3 F016          	movff	prodl,??_removeLine+6
  4275  0011C4  CFF4 F017          	movff	prodh,??_removeLine+7
  4276  0011C8  5016               	movf	??_removeLine+6,w,c
  4277  0011CA  240D               	addwf	removeLine@pObject,w,c
  4278  0011CC  6ED9               	movwf	fsr2l,c
  4279  0011CE  5017               	movf	??_removeLine+7,w,c
  4280  0011D0  200E               	addwfc	removeLine@pObject+1,w,c
  4281  0011D2  6EDA               	movwf	fsr2h,c
  4282  0011D4  CFDE F018          	movff	postinc2,??_removeLine+8
  4283  0011D8  CFDD F019          	movff	postdec2,??_removeLine+9
  4284  0011DC  C023  F01A         	movff	removeLine@currentLine,??_removeLine+10
  4285  0011E0  0E01               	movlw	1
  4286  0011E2  6E1B               	movwf	(??_removeLine+11)& (0+255),c
  4287  0011E4  0E00               	movlw	0
  4288  0011E6  6E1C               	movwf	(??_removeLine+12)& (0+255),c
  4289  0011E8  2A1A               	incf	??_removeLine+10,f,c
  4290  0011EA  D003               	goto	u4914
  4291  0011EC                     u4915:
  4292  0011EC  90D8               	bcf	status,0,c
  4293  0011EE  361B               	rlcf	??_removeLine+11,f,c
  4294  0011F0  361C               	rlcf	??_removeLine+12,f,c
  4295  0011F2                     u4914:
  4296  0011F2  2E1A               	decfsz	??_removeLine+10,f,c
  4297  0011F4  D7FB               	goto	u4915
  4298  0011F6  1C1B               	comf	??_removeLine+11,w,c
  4299  0011F8  6E1D               	movwf	(??_removeLine+13)& (0+255),c
  4300  0011FA  1C1C               	comf	??_removeLine+12,w,c
  4301  0011FC  6E1E               	movwf	(??_removeLine+14)& (0+255),c
  4302  0011FE  5018               	movf	??_removeLine+8,w,c
  4303  001200  161D               	andwf	??_removeLine+13,f,c
  4304  001202  5019               	movf	??_removeLine+9,w,c
  4305  001204  161E               	andwf	??_removeLine+14,f,c
  4306  001206  5014               	movf	??_removeLine+4,w,c
  4307  001208  121D               	iorwf	??_removeLine+13,f,c
  4308  00120A  5015               	movf	??_removeLine+5,w,c
  4309  00120C  121E               	iorwf	??_removeLine+14,f,c
  4310  00120E  5024               	movf	removeLine@x,w,c
  4311  001210  0D02               	mullw	2
  4312  001212  CFF3 F01F          	movff	prodl,??_removeLine+15
  4313  001216  CFF4 F020          	movff	prodh,??_removeLine+16
  4314  00121A  501F               	movf	??_removeLine+15,w,c
  4315  00121C  240D               	addwf	removeLine@pObject,w,c
  4316  00121E  6ED9               	movwf	fsr2l,c
  4317  001220  5020               	movf	??_removeLine+16,w,c
  4318  001222  200E               	addwfc	removeLine@pObject+1,w,c
  4319  001224  6EDA               	movwf	fsr2h,c
  4320  001226  C01D  FFDE         	movff	??_removeLine+13,postinc2
  4321  00122A  C01E  FFDD         	movff	??_removeLine+14,postdec2
  4322  00122E                     l5053:
  4323                           
  4324                           ;shared_logic.c: 220:         while(x--)
  4325  00122E  0624               	decf	removeLine@x,f,c
  4326  001230  2824               	incf	removeLine@x,w,c
  4327  001232  A4D8               	btfss	status,2,c
  4328  001234  D79D               	goto	l5051
  4329                           
  4330                           ;shared_logic.c: 224:     }
  4331  001236  0622               	decf	removeLine@y,f,c
  4332  001238                     l5057:
  4333  001238  500F               	movf	removeLine@pY,w,c
  4334  00123A  5C22               	subwf	removeLine@y,w,c
  4335  00123C  A0D8               	btfss	status,0,c
  4336  00123E  D793               	goto	l5047
  4337                           
  4338                           ;shared_logic.c: 226:     uint8_t x = 8;
  4339  001240  0E08               	movlw	8
  4340  001242  6E21               	movwf	removeLine@x_907,c
  4341                           
  4342                           ;shared_logic.c: 227:     while(x--)
  4343  001244  D010               	goto	l5063
  4344  001246                     l5061:
  4345                           
  4346                           ;shared_logic.c: 228:     {;shared_logic.c: 229:         pObject[x] &= ~(1<<0);
  4347  001246  5021               	movf	removeLine@x_907,w,c
  4348  001248  0D02               	mullw	2
  4349  00124A  CFF3 F010          	movff	prodl,??_removeLine
  4350  00124E  CFF4 F011          	movff	prodh,??_removeLine+1
  4351  001252  5010               	movf	??_removeLine,w,c
  4352  001254  240D               	addwf	removeLine@pObject,w,c
  4353  001256  6ED9               	movwf	fsr2l,c
  4354  001258  5011               	movf	??_removeLine+1,w,c
  4355  00125A  200E               	addwfc	removeLine@pObject+1,w,c
  4356  00125C  6EDA               	movwf	fsr2h,c
  4357  00125E  0EFE               	movlw	254
  4358  001260  16DE               	andwf	postinc2,f,c
  4359  001262  0EFF               	movlw	255
  4360  001264  16DD               	andwf	postdec2,f,c
  4361  001266                     l5063:
  4362                           
  4363                           ;shared_logic.c: 227:     while(x--)
  4364  001266  0621               	decf	removeLine@x_907,f,c
  4365  001268  2821               	incf	removeLine@x_907,w,c
  4366  00126A  B4D8               	btfsc	status,2,c
  4367  00126C  0012               	return	
  4368  00126E  D7EB               	goto	l5061
  4369  001270                     __end_of_removeLine:
  4370                           	opt callstack 0
  4371                           
  4372 ;; *************** function _start_button *****************
  4373 ;; Defined at:
  4374 ;;		line 12 in file "buttons.c"
  4375 ;; Parameters:    Size  Location     Type
  4376 ;;		None
  4377 ;; Auto vars:     Size  Location     Type
  4378 ;;		None
  4379 ;; Return value:  Size  Location     Type
  4380 ;;                  1    wreg      void 
  4381 ;; Registers used:
  4382 ;;		wreg, status,2
  4383 ;; Tracked objects:
  4384 ;;		On entry : 0/0
  4385 ;;		On exit  : 0/0
  4386 ;;		Unchanged: 0/0
  4387 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4388 ;;      Params:         0       0       0       0       0       0       0
  4389 ;;      Locals:         0       0       0       0       0       0       0
  4390 ;;      Temps:          0       0       0       0       0       0       0
  4391 ;;      Totals:         0       0       0       0       0       0       0
  4392 ;;Total ram usage:        0 bytes
  4393 ;; Hardware stack levels used:    1
  4394 ;; Hardware stack levels required when called:    4
  4395 ;; This function calls:
  4396 ;;		Nothing
  4397 ;; This function is called by:
  4398 ;;		_main
  4399 ;; This function uses a non-reentrant model
  4400 ;;
  4401                           
  4402                           	psect	text21
  4403  00239A                     __ptext21:
  4404                           	opt callstack 0
  4405  00239A                     _start_button:
  4406                           	opt callstack 26
  4407                           
  4408                           ;buttons.c: 14:     Left_Delay = -1;
  4409                           
  4410                           ;incstack = 0
  4411  00239A  6864               	setf	_Left_Delay,c	;volatile
  4412  00239C  6865               	setf	_Left_Delay+1,c	;volatile
  4413                           
  4414                           ;buttons.c: 15:     Left_Debounced = 0;
  4415  00239E  0E00               	movlw	0
  4416  0023A0  6E6D               	movwf	_Left_Debounced,c	;volatile
  4417                           
  4418                           ;buttons.c: 17:     Right_Delay = -1;
  4419  0023A2  6862               	setf	_Right_Delay,c	;volatile
  4420  0023A4  6863               	setf	_Right_Delay+1,c	;volatile
  4421                           
  4422                           ;buttons.c: 18:     Right_Debounced = 0;
  4423  0023A6  0E00               	movlw	0
  4424  0023A8  6E6C               	movwf	_Right_Debounced,c	;volatile
  4425                           
  4426                           ;buttons.c: 20:     Rotate_Delay = -1;
  4427  0023AA  6860               	setf	_Rotate_Delay,c	;volatile
  4428  0023AC  6861               	setf	_Rotate_Delay+1,c	;volatile
  4429                           
  4430                           ;buttons.c: 21:     Rotate_Debounced = 0;
  4431  0023AE  0E00               	movlw	0
  4432  0023B0  6E6E               	movwf	_Rotate_Debounced,c	;volatile
  4433                           
  4434                           ;buttons.c: 23:     Down_Delay = -1;
  4435  0023B2  685E               	setf	_Down_Delay,c	;volatile
  4436  0023B4  685F               	setf	_Down_Delay+1,c	;volatile
  4437                           
  4438                           ;buttons.c: 24:     Down_Debounced = 0;
  4439  0023B6  0E00               	movlw	0
  4440  0023B8  6E6B               	movwf	_Down_Debounced,c	;volatile
  4441                           
  4442                           ;buttons.c: 26:     mtxButtons = 1;
  4443  0023BA  0E01               	movlw	1
  4444  0023BC  6E5C               	movwf	_mtxButtons,c	;volatile
  4445  0023BE  0012               	return		;funcret
  4446  0023C0                     __end_of_start_button:
  4447                           	opt callstack 0
  4448                           
  4449 ;; *************** function _snake_main *****************
  4450 ;; Defined at:
  4451 ;;		line 252 in file "snake.c"
  4452 ;; Parameters:    Size  Location     Type
  4453 ;;		None
  4454 ;; Auto vars:     Size  Location     Type
  4455 ;;  positions     256    0[BANK1 ] struct position[128]
  4456 ;;  berry           2   81[COMRAM] struct position
  4457 ;;  direction       1   84[COMRAM] unsigned char 
  4458 ;;  previous_dir    1   83[COMRAM] unsigned char 
  4459 ;;  EndOfGame       1   80[COMRAM] _Bool 
  4460 ;;  LastHighScor    1   79[COMRAM] unsigned char 
  4461 ;;  ai              1   78[COMRAM] _Bool 
  4462 ;;  snakeLength     1   85[COMRAM] unsigned char 
  4463 ;; Return value:  Size  Location     Type
  4464 ;;                  1    wreg      void 
  4465 ;; Registers used:
  4466 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4467 ;; Tracked objects:
  4468 ;;		On entry : 0/0
  4469 ;;		On exit  : 0/0
  4470 ;;		Unchanged: 0/0
  4471 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4472 ;;      Params:         0       0       0       0       0       0       0
  4473 ;;      Locals:         8       0     256       0       0       0       0
  4474 ;;      Temps:          0       0       0       0       0       0       0
  4475 ;;      Totals:         8       0     256       0       0       0       0
  4476 ;;Total ram usage:      264 bytes
  4477 ;; Hardware stack levels used:    1
  4478 ;; Hardware stack levels required when called:    9
  4479 ;; This function calls:
  4480 ;;		_MoveSnakes
  4481 ;;		_aibuttons
  4482 ;;		_inistialize_snake
  4483 ;;		_readHighScore
  4484 ;;		_show_score
  4485 ;;		_snake_buttons
  4486 ;;		_snake_screen
  4487 ;;		_writeHighScore
  4488 ;; This function is called by:
  4489 ;;		_main
  4490 ;; This function uses a non-reentrant model
  4491 ;;
  4492                           
  4493                           	psect	text22
  4494  001564                     __ptext22:
  4495                           	opt callstack 0
  4496  001564                     _snake_main:
  4497                           	opt callstack 21
  4498                           
  4499                           ;snake.c: 254:         uint8_t snakeLength = 3;
  4500                           
  4501                           ;incstack = 0
  4502  001564  0E03               	movlw	3
  4503  001566  6E56               	movwf	snake_main@snakeLength,c
  4504                           
  4505                           ;snake.c: 255:         {;snake.c: 256:             _Bool ai = snake_screen();
  4506  001568  EC05  F011         	call	_snake_screen	;wreg free
  4507  00156C  6E4F               	movwf	snake_main@ai,c
  4508                           
  4509                           ;snake.c: 257:             uint8_t LastHighScore = readHighScore(1);
  4510  00156E  0E01               	movlw	1
  4511  001570  ECA6  F011         	call	_readHighScore
  4512  001574  6E50               	movwf	snake_main@LastHighScore,c
  4513                           
  4514                           ;snake.c: 258:             show_score(LastHighScore);
  4515  001576  5050               	movf	snake_main@LastHighScore,w,c
  4516  001578  EC7D  F007         	call	_show_score
  4517                           
  4518                           ;snake.c: 259:             {;snake.c: 260:                 uint8_t direction = 1;
  4519  00157C  0E01               	movlw	1
  4520  00157E  6E55               	movwf	snake_main@direction,c
  4521                           
  4522                           ;snake.c: 261:                 uint8_t previous_direction = 3;
  4523  001580  0E03               	movlw	3
  4524  001582  6E54               	movwf	snake_main@previous_direction,c
  4525                           
  4526                           ;snake.c: 262:                 struct position positions[128];;snake.c: 263:            
      +                               struct position berry;;snake.c: 265:                 inistialize_snake(&snakeLength
      +                          , positions, &berry);
  4527  001584  0E56               	movlw	low snake_main@snakeLength
  4528  001586  6E23               	movwf	inistialize_snake@snakeLength,c
  4529  001588  0E00               	movlw	high snake_main@snakeLength
  4530  00158A  6E24               	movwf	inistialize_snake@snakeLength+1,c
  4531  00158C  0E00               	movlw	low snake_main@positions
  4532  00158E  6E25               	movwf	inistialize_snake@positions,c
  4533  001590  0E01               	movlw	high snake_main@positions
  4534  001592  6E26               	movwf	inistialize_snake@positions+1,c
  4535  001594  0E52               	movlw	low snake_main@berry
  4536  001596  6E27               	movwf	inistialize_snake@berry,c
  4537  001598  0E00               	movlw	high snake_main@berry
  4538  00159A  6E28               	movwf	inistialize_snake@berry+1,c
  4539  00159C  ECFC  F00C         	call	_inistialize_snake	;wreg free
  4540                           
  4541                           ;snake.c: 266:                 _Bool EndOfGame = 0;
  4542  0015A0  0E00               	movlw	0
  4543  0015A2  6E51               	movwf	snake_main@EndOfGame,c
  4544  0015A4                     l5679:
  4545                           
  4546                           ;snake.c: 269:                 {;snake.c: 270:                     snake_buttons(&direct
      +                          ion, &previous_direction);
  4547  0015A4  0E55               	movlw	low snake_main@direction
  4548  0015A6  6E12               	movwf	snake_buttons@direction,c
  4549  0015A8  0E00               	movlw	high snake_main@direction
  4550  0015AA  6E13               	movwf	snake_buttons@direction+1,c
  4551  0015AC  0E54               	movlw	low snake_main@previous_direction
  4552  0015AE  6E14               	movwf	snake_buttons@previous_direction,c
  4553  0015B0  0E00               	movlw	high snake_main@previous_direction
  4554  0015B2  6E15               	movwf	snake_buttons@previous_direction+1,c
  4555  0015B4  EC0B  F00E         	call	_snake_buttons	;wreg free
  4556                           
  4557                           ;snake.c: 271:                     if(moveSnake == 1)
  4558  0015B8  0469               	decf	_moveSnake,w,c	;volatile
  4559  0015BA  A4D8               	btfss	status,2,c
  4560  0015BC  D029               	goto	l5691
  4561                           
  4562                           ;snake.c: 272:                     {;snake.c: 273:                         if(ai)
  4563  0015BE  504F               	movf	snake_main@ai,w,c
  4564  0015C0  B4D8               	btfsc	status,2,c
  4565  0015C2  D00A               	goto	l5687
  4566                           
  4567                           ;snake.c: 274:                         {;snake.c: 275:                             aibut
      +                          tons(&direction, positions);
  4568  0015C4  0E55               	movlw	low snake_main@direction
  4569  0015C6  6E0D               	movwf	aibuttons@direction,c
  4570  0015C8  0E00               	movlw	high snake_main@direction
  4571  0015CA  6E0E               	movwf	aibuttons@direction+1,c
  4572  0015CC  0E00               	movlw	low snake_main@positions
  4573  0015CE  6E0F               	movwf	aibuttons@positions,c
  4574  0015D0  0E01               	movlw	high snake_main@positions
  4575  0015D2  6E10               	movwf	aibuttons@positions+1,c
  4576  0015D4  EC1C  F008         	call	_aibuttons	;wreg free
  4577  0015D8                     l5687:
  4578                           
  4579                           ;snake.c: 277:                         moveSnake = 0;
  4580  0015D8  0E00               	movlw	0
  4581  0015DA  6E69               	movwf	_moveSnake,c	;volatile
  4582                           
  4583                           ;snake.c: 278:                         MoveSnakes(&snakeLength, &EndOfGame, &direction, 
      +                          &previous_direction, positions, &berry);
  4584  0015DC  0E56               	movlw	low snake_main@snakeLength
  4585  0015DE  6E39               	movwf	MoveSnakes@snakeLength,c
  4586  0015E0  0E00               	movlw	high snake_main@snakeLength
  4587  0015E2  6E3A               	movwf	MoveSnakes@snakeLength+1,c
  4588  0015E4  0E51               	movlw	low snake_main@EndOfGame
  4589  0015E6  6E3B               	movwf	MoveSnakes@EndOfGame,c
  4590  0015E8  0E00               	movlw	high snake_main@EndOfGame
  4591  0015EA  6E3C               	movwf	MoveSnakes@EndOfGame+1,c
  4592  0015EC  0E55               	movlw	low snake_main@direction
  4593  0015EE  6E3D               	movwf	MoveSnakes@direction,c
  4594  0015F0  0E00               	movlw	high snake_main@direction
  4595  0015F2  6E3E               	movwf	MoveSnakes@direction+1,c
  4596  0015F4  0E54               	movlw	low snake_main@previous_direction
  4597  0015F6  6E3F               	movwf	MoveSnakes@previous_direction,c
  4598  0015F8  0E00               	movlw	high snake_main@previous_direction
  4599  0015FA  6E40               	movwf	MoveSnakes@previous_direction+1,c
  4600  0015FC  0E00               	movlw	low snake_main@positions
  4601  0015FE  6E41               	movwf	MoveSnakes@positions,c
  4602  001600  0E01               	movlw	high snake_main@positions
  4603  001602  6E42               	movwf	MoveSnakes@positions+1,c
  4604  001604  0E52               	movlw	low snake_main@berry
  4605  001606  6E43               	movwf	MoveSnakes@berry,c
  4606  001608  0E00               	movlw	high snake_main@berry
  4607  00160A  6E44               	movwf	MoveSnakes@berry+1,c
  4608  00160C  EC09  F000         	call	_MoveSnakes	;wreg free
  4609  001610                     l5691:
  4610                           
  4611                           ;snake.c: 280:                 }
  4612  001610  5051               	movf	snake_main@EndOfGame,w,c
  4613  001612  B4D8               	btfsc	status,2,c
  4614  001614  D7C7               	goto	l5679
  4615                           
  4616                           ;snake.c: 282:             };snake.c: 283:             writeHighScore(1, LastHighScore, 
      +                          snakeLength);
  4617  001616  C050  F00F         	movff	snake_main@LastHighScore,writeHighScore@highscore
  4618  00161A  C056  F010         	movff	snake_main@snakeLength,writeHighScore@scored
  4619  00161E  0E01               	movlw	1
  4620  001620  ECCF  F012         	call	_writeHighScore
  4621                           
  4622                           ;snake.c: 284:         };snake.c: 285:         show_score(snakeLength);
  4623  001624  5056               	movf	snake_main@snakeLength,w,c
  4624  001626  EC7D  F007         	call	_show_score
  4625  00162A  0012               	return		;funcret
  4626  00162C                     __end_of_snake_main:
  4627                           	opt callstack 0
  4628                           
  4629 ;; *************** function _writeHighScore *****************
  4630 ;; Defined at:
  4631 ;;		line 252 in file "shared_logic.c"
  4632 ;; Parameters:    Size  Location     Type
  4633 ;;  adress          1    wreg     unsigned char 
  4634 ;;  highscore       1   14[COMRAM] unsigned char 
  4635 ;;  scored          1   15[COMRAM] unsigned char 
  4636 ;; Auto vars:     Size  Location     Type
  4637 ;;  adress          1   16[COMRAM] unsigned char 
  4638 ;; Return value:  Size  Location     Type
  4639 ;;                  1    wreg      void 
  4640 ;; Registers used:
  4641 ;;		wreg, status,2, status,0, cstack
  4642 ;; Tracked objects:
  4643 ;;		On entry : 0/0
  4644 ;;		On exit  : 0/0
  4645 ;;		Unchanged: 0/0
  4646 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4647 ;;      Params:         2       0       0       0       0       0       0
  4648 ;;      Locals:         1       0       0       0       0       0       0
  4649 ;;      Temps:          0       0       0       0       0       0       0
  4650 ;;      Totals:         3       0       0       0       0       0       0
  4651 ;;Total ram usage:        3 bytes
  4652 ;; Hardware stack levels used:    1
  4653 ;; Hardware stack levels required when called:    6
  4654 ;; This function calls:
  4655 ;;		_WriteEEByte
  4656 ;; This function is called by:
  4657 ;;		_tetris_main
  4658 ;;		_snake_main
  4659 ;; This function uses a non-reentrant model
  4660 ;;
  4661                           
  4662                           	psect	text23
  4663  00259E                     __ptext23:
  4664                           	opt callstack 0
  4665  00259E                     _writeHighScore:
  4666                           	opt callstack 23
  4667                           
  4668                           ;incstack = 0
  4669                           ;writeHighScore@adress stored from wreg
  4670  00259E  6E11               	movwf	writeHighScore@adress,c
  4671                           
  4672                           ;shared_logic.c: 252: void writeHighScore(uint8_t adress, uint8_t highscore, uint8_t sco
      +                          red);shared_logic.c: 253: {;shared_logic.c: 254:     if(scored > highscore)
  4673  0025A0  5010               	movf	writeHighScore@scored,w,c
  4674  0025A2  5C0F               	subwf	writeHighScore@highscore,w,c
  4675  0025A4  B0D8               	btfsc	status,0,c
  4676  0025A6  0012               	return	
  4677                           
  4678                           ;shared_logic.c: 255:     {;shared_logic.c: 256:         WriteEEByte(adress, scored);
  4679  0025A8  C010  F00D         	movff	writeHighScore@scored,WriteEEByte@data
  4680  0025AC  5011               	movf	writeHighScore@adress,w,c
  4681  0025AE  EC21  F011         	call	_WriteEEByte
  4682  0025B2  0012               	return		;funcret
  4683  0025B4                     __end_of_writeHighScore:
  4684                           	opt callstack 0
  4685                           
  4686 ;; *************** function _snake_screen *****************
  4687 ;; Defined at:
  4688 ;;		line 21 in file "snake.c"
  4689 ;; Parameters:    Size  Location     Type
  4690 ;;		None
  4691 ;; Auto vars:     Size  Location     Type
  4692 ;;		None
  4693 ;; Return value:  Size  Location     Type
  4694 ;;                  1    wreg      _Bool 
  4695 ;; Registers used:
  4696 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  4697 ;; Tracked objects:
  4698 ;;		On entry : 0/0
  4699 ;;		On exit  : 0/0
  4700 ;;		Unchanged: 0/0
  4701 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4702 ;;      Params:         0       0       0       0       0       0       0
  4703 ;;      Locals:         0       0       0       0       0       0       0
  4704 ;;      Temps:          0       0       0       0       0       0       0
  4705 ;;      Totals:         0       0       0       0       0       0       0
  4706 ;;Total ram usage:        0 bytes
  4707 ;; Hardware stack levels used:    1
  4708 ;; Hardware stack levels required when called:    7
  4709 ;; This function calls:
  4710 ;;		_checkLeft
  4711 ;;		_checkRight
  4712 ;;		_set_splashscreen
  4713 ;;		_waitms
  4714 ;; This function is called by:
  4715 ;;		_snake_main
  4716 ;; This function uses a non-reentrant model
  4717 ;;
  4718                           
  4719                           	psect	text24
  4720  00220A                     __ptext24:
  4721                           	opt callstack 0
  4722  00220A                     _snake_screen:
  4723                           	opt callstack 22
  4724                           
  4725                           ;snake.c: 23:     const uint16_t SNAKE[] = {;snake.c: 33:     set_splashscreen(SNAKE);
  4726                           
  4727                           ;incstack = 0
  4728  00220A  0EDF               	movlw	low snake_screen@SNAKE
  4729  00220C  6E17               	movwf	set_splashscreen@newData,c
  4730  00220E  0E7F               	movlw	high snake_screen@SNAKE
  4731  002210  6E18               	movwf	set_splashscreen@newData+1,c
  4732  002212  EC19  F012         	call	_set_splashscreen	;wreg free
  4733                           
  4734                           ;snake.c: 34:     waitms(3500);
  4735  002216  0E0D               	movlw	13
  4736  002218  6E0E               	movwf	waitms@t+1,c
  4737  00221A  0EAC               	movlw	172
  4738  00221C  6E0D               	movwf	waitms@t,c
  4739  00221E  ECDA  F012         	call	_waitms	;wreg free
  4740                           
  4741                           ;snake.c: 35:     if(checkRight(0) && checkLeft(0))
  4742  002222  0E00               	movlw	0
  4743  002224  ECE0  F011         	call	_checkRight
  4744  002228  0900               	iorlw	0
  4745  00222A  B4D8               	btfsc	status,2,c
  4746  00222C  D008               	goto	l5425
  4747  00222E  0E00               	movlw	0
  4748  002230  ECF3  F011         	call	_checkLeft
  4749  002234  0900               	iorlw	0
  4750  002236  B4D8               	btfsc	status,2,c
  4751  002238  D002               	goto	l5425
  4752                           
  4753                           ;snake.c: 36:     {;snake.c: 37:         return 1;
  4754  00223A  0E01               	movlw	1
  4755  00223C  0012               	return	
  4756  00223E                     l5425:
  4757                           
  4758                           ;snake.c: 39:     return 0;
  4759  00223E  0E00               	movlw	0
  4760  002240  0012               	return		;funcret
  4761  002242                     __end_of_snake_screen:
  4762                           	opt callstack 0
  4763                           
  4764 ;; *************** function _waitms *****************
  4765 ;; Defined at:
  4766 ;;		line 12 in file "interrupt.c"
  4767 ;; Parameters:    Size  Location     Type
  4768 ;;  t               2   12[COMRAM] unsigned int 
  4769 ;; Auto vars:     Size  Location     Type
  4770 ;;		None
  4771 ;; Return value:  Size  Location     Type
  4772 ;;                  1    wreg      void 
  4773 ;; Registers used:
  4774 ;;		wreg, status,2, status,0
  4775 ;; Tracked objects:
  4776 ;;		On entry : 0/0
  4777 ;;		On exit  : 0/0
  4778 ;;		Unchanged: 0/0
  4779 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4780 ;;      Params:         2       0       0       0       0       0       0
  4781 ;;      Locals:         0       0       0       0       0       0       0
  4782 ;;      Temps:          0       0       0       0       0       0       0
  4783 ;;      Totals:         2       0       0       0       0       0       0
  4784 ;;Total ram usage:        2 bytes
  4785 ;; Hardware stack levels used:    1
  4786 ;; Hardware stack levels required when called:    4
  4787 ;; This function calls:
  4788 ;;		Nothing
  4789 ;; This function is called by:
  4790 ;;		_tetris_screen
  4791 ;;		_snake_screen
  4792 ;; This function uses a non-reentrant model
  4793 ;;
  4794                           
  4795                           	psect	text25
  4796  0025B4                     __ptext25:
  4797                           	opt callstack 0
  4798  0025B4                     _waitms:
  4799                           	opt callstack 24
  4800                           
  4801                           ;interrupt.c: 12: void waitms(unsigned t);interrupt.c: 13: {;interrupt.c: 14:     Remain
      +                          ingWaitTime = t;
  4802                           
  4803                           ;incstack = 0
  4804  0025B4  C00D  F066         	movff	waitms@t,_RemainingWaitTime	;volatile
  4805  0025B8  C00E  F067         	movff	waitms@t+1,_RemainingWaitTime+1	;volatile
  4806  0025BC                     l5043:
  4807                           
  4808                           ;interrupt.c: 15:     while(RemainingWaitTime)
  4809  0025BC  5066               	movf	_RemainingWaitTime,w,c	;volatile
  4810  0025BE  1067               	iorwf	_RemainingWaitTime+1,w,c	;volatile
  4811  0025C0  B4D8               	btfsc	status,2,c
  4812  0025C2  0012               	return	
  4813  0025C4  D7FB               	goto	l5043
  4814  0025C6                     __end_of_waitms:
  4815                           	opt callstack 0
  4816                           
  4817 ;; *************** function _snake_buttons *****************
  4818 ;; Defined at:
  4819 ;;		line 200 in file "snake.c"
  4820 ;; Parameters:    Size  Location     Type
  4821 ;;  direction       2   17[COMRAM] PTR unsigned char 
  4822 ;;		 -> snake_main@direction(1), 
  4823 ;;  previous_dir    2   19[COMRAM] PTR unsigned char 
  4824 ;;		 -> snake_main@previous_direction(1), 
  4825 ;; Auto vars:     Size  Location     Type
  4826 ;;		None
  4827 ;; Return value:  Size  Location     Type
  4828 ;;                  1    wreg      void 
  4829 ;; Registers used:
  4830 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  4831 ;; Tracked objects:
  4832 ;;		On entry : 0/0
  4833 ;;		On exit  : 0/0
  4834 ;;		Unchanged: 0/0
  4835 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4836 ;;      Params:         4       0       0       0       0       0       0
  4837 ;;      Locals:         0       0       0       0       0       0       0
  4838 ;;      Temps:          0       0       0       0       0       0       0
  4839 ;;      Totals:         4       0       0       0       0       0       0
  4840 ;;Total ram usage:        4 bytes
  4841 ;; Hardware stack levels used:    1
  4842 ;; Hardware stack levels required when called:    5
  4843 ;; This function calls:
  4844 ;;		_checkDown
  4845 ;;		_checkLeft
  4846 ;;		_checkRight
  4847 ;;		_checkUp
  4848 ;;		_snake_button_down
  4849 ;;		_snake_button_left
  4850 ;;		_snake_button_right
  4851 ;;		_snake_button_up
  4852 ;; This function is called by:
  4853 ;;		_snake_main
  4854 ;; This function uses a non-reentrant model
  4855 ;;
  4856                           
  4857                           	psect	text26
  4858  001C16                     __ptext26:
  4859                           	opt callstack 0
  4860  001C16                     _snake_buttons:
  4861                           	opt callstack 24
  4862                           
  4863                           ;snake.c: 200: void snake_buttons(uint8_t *direction, uint8_t *previous_direction);snake
      +                          .c: 201: {;snake.c: 202:     if(checkLeft(1))
  4864                           
  4865                           ;incstack = 0
  4866  001C16  0E01               	movlw	1
  4867  001C18  ECF3  F011         	call	_checkLeft
  4868  001C1C  0900               	iorlw	0
  4869  001C1E  B4D8               	btfsc	status,2,c
  4870  001C20  D00A               	goto	l5525
  4871                           
  4872                           ;snake.c: 203:     {;snake.c: 204:         snake_button_left(direction, previous_directi
      +                          on);
  4873  001C22  C012  F00D         	movff	snake_buttons@direction,snake_button_left@direction
  4874  001C26  C013  F00E         	movff	snake_buttons@direction+1,snake_button_left@direction+1
  4875  001C2A  C014  F00F         	movff	snake_buttons@previous_direction,snake_button_left@previous_direction
  4876  001C2E  C015  F010         	movff	snake_buttons@previous_direction+1,snake_button_left@previous_direction+1
  4877  001C32  EC8D  F012         	call	_snake_button_left	;wreg free
  4878  001C36                     l5525:
  4879                           
  4880                           ;snake.c: 206:     if(checkRight(1))
  4881  001C36  0E01               	movlw	1
  4882  001C38  ECE0  F011         	call	_checkRight
  4883  001C3C  0900               	iorlw	0
  4884  001C3E  B4D8               	btfsc	status,2,c
  4885  001C40  D00A               	goto	l5529
  4886                           
  4887                           ;snake.c: 207:     {;snake.c: 208:         snake_button_right(direction, previous_direct
      +                          ion);
  4888  001C42  C012  F00D         	movff	snake_buttons@direction,snake_button_right@direction
  4889  001C46  C013  F00E         	movff	snake_buttons@direction+1,snake_button_right@direction+1
  4890  001C4A  C014  F00F         	movff	snake_buttons@previous_direction,snake_button_right@previous_direction
  4891  001C4E  C015  F010         	movff	snake_buttons@previous_direction+1,snake_button_right@previous_direction+1
  4892  001C52  EC61  F012         	call	_snake_button_right	;wreg free
  4893  001C56                     l5529:
  4894                           
  4895                           ;snake.c: 210:     if(checkUp(1))
  4896  001C56  0E01               	movlw	1
  4897  001C58  EC2C  F012         	call	_checkUp
  4898  001C5C  0900               	iorlw	0
  4899  001C5E  B4D8               	btfsc	status,2,c
  4900  001C60  D00A               	goto	l5533
  4901                           
  4902                           ;snake.c: 211:     {;snake.c: 212:         snake_button_up(direction, previous_direction
      +                          );
  4903  001C62  C012  F00D         	movff	snake_buttons@direction,snake_button_up@direction
  4904  001C66  C013  F00E         	movff	snake_buttons@direction+1,snake_button_up@direction+1
  4905  001C6A  C014  F00F         	movff	snake_buttons@previous_direction,snake_button_up@previous_direction
  4906  001C6E  C015  F010         	movff	snake_buttons@previous_direction+1,snake_button_up@previous_direction+1
  4907  001C72  EC52  F012         	call	_snake_button_up	;wreg free
  4908  001C76                     l5533:
  4909                           
  4910                           ;snake.c: 214:     if(checkDown(1))
  4911  001C76  0E01               	movlw	1
  4912  001C78  EC3F  F012         	call	_checkDown
  4913  001C7C  0900               	iorlw	0
  4914  001C7E  B4D8               	btfsc	status,2,c
  4915  001C80  0012               	return	
  4916                           
  4917                           ;snake.c: 215:     {;snake.c: 216:         snake_button_down(direction, previous_directi
      +                          on);
  4918  001C82  C012  F00D         	movff	snake_buttons@direction,snake_button_down@direction
  4919  001C86  C013  F00E         	movff	snake_buttons@direction+1,snake_button_down@direction+1
  4920  001C8A  C014  F00F         	movff	snake_buttons@previous_direction,snake_button_down@previous_direction
  4921  001C8E  C015  F010         	movff	snake_buttons@previous_direction+1,snake_button_down@previous_direction+1
  4922  001C92  EC9B  F012         	call	_snake_button_down	;wreg free
  4923  001C96  0012               	return		;funcret
  4924  001C98                     __end_of_snake_buttons:
  4925                           	opt callstack 0
  4926                           
  4927 ;; *************** function _snake_button_up *****************
  4928 ;; Defined at:
  4929 ;;		line 50 in file "snake.c"
  4930 ;; Parameters:    Size  Location     Type
  4931 ;;  direction       2   12[COMRAM] PTR unsigned char 
  4932 ;;		 -> snake_main@direction(1), 
  4933 ;;  previous_dir    2   14[COMRAM] PTR unsigned char 
  4934 ;;		 -> snake_main@previous_direction(1), 
  4935 ;; Auto vars:     Size  Location     Type
  4936 ;;		None
  4937 ;; Return value:  Size  Location     Type
  4938 ;;                  1    wreg      void 
  4939 ;; Registers used:
  4940 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  4941 ;; Tracked objects:
  4942 ;;		On entry : 0/0
  4943 ;;		On exit  : 0/0
  4944 ;;		Unchanged: 0/0
  4945 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4946 ;;      Params:         4       0       0       0       0       0       0
  4947 ;;      Locals:         0       0       0       0       0       0       0
  4948 ;;      Temps:          1       0       0       0       0       0       0
  4949 ;;      Totals:         5       0       0       0       0       0       0
  4950 ;;Total ram usage:        5 bytes
  4951 ;; Hardware stack levels used:    1
  4952 ;; Hardware stack levels required when called:    4
  4953 ;; This function calls:
  4954 ;;		Nothing
  4955 ;; This function is called by:
  4956 ;;		_snake_buttons
  4957 ;; This function uses a non-reentrant model
  4958 ;;
  4959                           
  4960                           	psect	text27
  4961  0024A4                     __ptext27:
  4962                           	opt callstack 0
  4963  0024A4                     _snake_button_up:
  4964                           	opt callstack 24
  4965                           
  4966                           ;snake.c: 50: void snake_button_up(uint8_t *direction, uint8_t *previous_direction);snak
      +                          e.c: 51: {;snake.c: 52:     if(*previous_direction != 2)
  4967                           
  4968                           ;incstack = 0
  4969  0024A4  C00F  FFD9         	movff	snake_button_up@previous_direction,fsr2l
  4970  0024A8  C010  FFDA         	movff	snake_button_up@previous_direction+1,fsr2h
  4971  0024AC  0E02               	movlw	2
  4972  0024AE  18DE               	xorwf	postinc2,w,c
  4973  0024B0  B4D8               	btfsc	status,2,c
  4974  0024B2  0012               	return	
  4975                           
  4976                           ;snake.c: 53:     {;snake.c: 54:         *direction = 0;
  4977  0024B4  C00D  FFD9         	movff	snake_button_up@direction,fsr2l
  4978  0024B8  C00E  FFDA         	movff	snake_button_up@direction+1,fsr2h
  4979  0024BC  0E00               	movlw	0
  4980  0024BE  6EDF               	movwf	indf2,c
  4981  0024C0  0012               	return		;funcret
  4982  0024C2                     __end_of_snake_button_up:
  4983                           	opt callstack 0
  4984                           
  4985 ;; *************** function _snake_button_right *****************
  4986 ;; Defined at:
  4987 ;;		line 58 in file "snake.c"
  4988 ;; Parameters:    Size  Location     Type
  4989 ;;  direction       2   12[COMRAM] PTR unsigned char 
  4990 ;;		 -> snake_main@direction(1), 
  4991 ;;  previous_dir    2   14[COMRAM] PTR unsigned char 
  4992 ;;		 -> snake_main@previous_direction(1), 
  4993 ;; Auto vars:     Size  Location     Type
  4994 ;;		None
  4995 ;; Return value:  Size  Location     Type
  4996 ;;                  1    wreg      void 
  4997 ;; Registers used:
  4998 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  4999 ;; Tracked objects:
  5000 ;;		On entry : 0/0
  5001 ;;		On exit  : 0/0
  5002 ;;		Unchanged: 0/0
  5003 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5004 ;;      Params:         4       0       0       0       0       0       0
  5005 ;;      Locals:         0       0       0       0       0       0       0
  5006 ;;      Temps:          1       0       0       0       0       0       0
  5007 ;;      Totals:         5       0       0       0       0       0       0
  5008 ;;Total ram usage:        5 bytes
  5009 ;; Hardware stack levels used:    1
  5010 ;; Hardware stack levels required when called:    4
  5011 ;; This function calls:
  5012 ;;		Nothing
  5013 ;; This function is called by:
  5014 ;;		_snake_buttons
  5015 ;; This function uses a non-reentrant model
  5016 ;;
  5017                           
  5018                           	psect	text28
  5019  0024C2                     __ptext28:
  5020                           	opt callstack 0
  5021  0024C2                     _snake_button_right:
  5022                           	opt callstack 24
  5023                           
  5024                           ;snake.c: 58: void snake_button_right(uint8_t *direction, uint8_t *previous_direction);s
      +                          nake.c: 59: {;snake.c: 60:     if(*previous_direction != 3)
  5025                           
  5026                           ;incstack = 0
  5027  0024C2  C00F  FFD9         	movff	snake_button_right@previous_direction,fsr2l
  5028  0024C6  C010  FFDA         	movff	snake_button_right@previous_direction+1,fsr2h
  5029  0024CA  0E03               	movlw	3
  5030  0024CC  18DE               	xorwf	postinc2,w,c
  5031  0024CE  B4D8               	btfsc	status,2,c
  5032  0024D0  0012               	return	
  5033                           
  5034                           ;snake.c: 61:     {;snake.c: 62:         *direction = 1;
  5035  0024D2  C00D  FFD9         	movff	snake_button_right@direction,fsr2l
  5036  0024D6  C00E  FFDA         	movff	snake_button_right@direction+1,fsr2h
  5037  0024DA  0E01               	movlw	1
  5038  0024DC  6EDF               	movwf	indf2,c
  5039  0024DE  0012               	return		;funcret
  5040  0024E0                     __end_of_snake_button_right:
  5041                           	opt callstack 0
  5042                           
  5043 ;; *************** function _snake_button_left *****************
  5044 ;; Defined at:
  5045 ;;		line 42 in file "snake.c"
  5046 ;; Parameters:    Size  Location     Type
  5047 ;;  direction       2   12[COMRAM] PTR unsigned char 
  5048 ;;		 -> snake_main@direction(1), 
  5049 ;;  previous_dir    2   14[COMRAM] PTR unsigned char 
  5050 ;;		 -> snake_main@previous_direction(1), 
  5051 ;; Auto vars:     Size  Location     Type
  5052 ;;		None
  5053 ;; Return value:  Size  Location     Type
  5054 ;;                  1    wreg      void 
  5055 ;; Registers used:
  5056 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  5057 ;; Tracked objects:
  5058 ;;		On entry : 0/0
  5059 ;;		On exit  : 0/0
  5060 ;;		Unchanged: 0/0
  5061 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5062 ;;      Params:         4       0       0       0       0       0       0
  5063 ;;      Locals:         0       0       0       0       0       0       0
  5064 ;;      Temps:          1       0       0       0       0       0       0
  5065 ;;      Totals:         5       0       0       0       0       0       0
  5066 ;;Total ram usage:        5 bytes
  5067 ;; Hardware stack levels used:    1
  5068 ;; Hardware stack levels required when called:    4
  5069 ;; This function calls:
  5070 ;;		Nothing
  5071 ;; This function is called by:
  5072 ;;		_snake_buttons
  5073 ;; This function uses a non-reentrant model
  5074 ;;
  5075                           
  5076                           	psect	text29
  5077  00251A                     __ptext29:
  5078                           	opt callstack 0
  5079  00251A                     _snake_button_left:
  5080                           	opt callstack 24
  5081                           
  5082                           ;snake.c: 42: void snake_button_left(uint8_t *direction, uint8_t *previous_direction);sn
      +                          ake.c: 43: {;snake.c: 44:     if(*previous_direction != 1)
  5083                           
  5084                           ;incstack = 0
  5085  00251A  C00F  FFD9         	movff	snake_button_left@previous_direction,fsr2l
  5086  00251E  C010  FFDA         	movff	snake_button_left@previous_direction+1,fsr2h
  5087  002522  04DE               	decf	postinc2,w,c
  5088  002524  B4D8               	btfsc	status,2,c
  5089  002526  0012               	return	
  5090                           
  5091                           ;snake.c: 45:     {;snake.c: 46:         *direction = 3;
  5092  002528  C00D  FFD9         	movff	snake_button_left@direction,fsr2l
  5093  00252C  C00E  FFDA         	movff	snake_button_left@direction+1,fsr2h
  5094  002530  0E03               	movlw	3
  5095  002532  6EDF               	movwf	indf2,c
  5096  002534  0012               	return		;funcret
  5097  002536                     __end_of_snake_button_left:
  5098                           	opt callstack 0
  5099                           
  5100 ;; *************** function _snake_button_down *****************
  5101 ;; Defined at:
  5102 ;;		line 66 in file "snake.c"
  5103 ;; Parameters:    Size  Location     Type
  5104 ;;  direction       2   12[COMRAM] PTR unsigned char 
  5105 ;;		 -> snake_main@direction(1), 
  5106 ;;  previous_dir    2   14[COMRAM] PTR unsigned char 
  5107 ;;		 -> snake_main@previous_direction(1), 
  5108 ;; Auto vars:     Size  Location     Type
  5109 ;;		None
  5110 ;; Return value:  Size  Location     Type
  5111 ;;                  1    wreg      void 
  5112 ;; Registers used:
  5113 ;;		wreg, fsr2l, fsr2h, status,2
  5114 ;; Tracked objects:
  5115 ;;		On entry : 0/0
  5116 ;;		On exit  : 0/0
  5117 ;;		Unchanged: 0/0
  5118 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5119 ;;      Params:         4       0       0       0       0       0       0
  5120 ;;      Locals:         0       0       0       0       0       0       0
  5121 ;;      Temps:          0       0       0       0       0       0       0
  5122 ;;      Totals:         4       0       0       0       0       0       0
  5123 ;;Total ram usage:        4 bytes
  5124 ;; Hardware stack levels used:    1
  5125 ;; Hardware stack levels required when called:    4
  5126 ;; This function calls:
  5127 ;;		Nothing
  5128 ;; This function is called by:
  5129 ;;		_snake_buttons
  5130 ;; This function uses a non-reentrant model
  5131 ;;
  5132                           
  5133                           	psect	text30
  5134  002536                     __ptext30:
  5135                           	opt callstack 0
  5136  002536                     _snake_button_down:
  5137                           	opt callstack 24
  5138                           
  5139                           ;snake.c: 66: void snake_button_down(uint8_t *direction, uint8_t *previous_direction);sn
      +                          ake.c: 67: {;snake.c: 68:     if(*previous_direction != 0)
  5140                           
  5141                           ;incstack = 0
  5142  002536  C00F  FFD9         	movff	snake_button_down@previous_direction,fsr2l
  5143  00253A  C010  FFDA         	movff	snake_button_down@previous_direction+1,fsr2h
  5144  00253E  50DF               	movf	indf2,w,c
  5145  002540  B4D8               	btfsc	status,2,c
  5146  002542  0012               	return	
  5147                           
  5148                           ;snake.c: 69:     {;snake.c: 70:         *direction = 2;
  5149  002544  C00D  FFD9         	movff	snake_button_down@direction,fsr2l
  5150  002548  C00E  FFDA         	movff	snake_button_down@direction+1,fsr2h
  5151  00254C  0E02               	movlw	2
  5152  00254E  6EDF               	movwf	indf2,c
  5153  002550  0012               	return		;funcret
  5154  002552                     __end_of_snake_button_down:
  5155                           	opt callstack 0
  5156                           
  5157 ;; *************** function _checkRight *****************
  5158 ;; Defined at:
  5159 ;;		line 58 in file "buttons.c"
  5160 ;; Parameters:    Size  Location     Type
  5161 ;;  reset           1    wreg     _Bool 
  5162 ;; Auto vars:     Size  Location     Type
  5163 ;;  reset           1   12[COMRAM] _Bool 
  5164 ;; Return value:  Size  Location     Type
  5165 ;;                  1    wreg      _Bool 
  5166 ;; Registers used:
  5167 ;;		wreg, status,2
  5168 ;; Tracked objects:
  5169 ;;		On entry : 0/0
  5170 ;;		On exit  : 0/0
  5171 ;;		Unchanged: 0/0
  5172 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5173 ;;      Params:         0       0       0       0       0       0       0
  5174 ;;      Locals:         1       0       0       0       0       0       0
  5175 ;;      Temps:          0       0       0       0       0       0       0
  5176 ;;      Totals:         1       0       0       0       0       0       0
  5177 ;;Total ram usage:        1 bytes
  5178 ;; Hardware stack levels used:    1
  5179 ;; Hardware stack levels required when called:    4
  5180 ;; This function calls:
  5181 ;;		Nothing
  5182 ;; This function is called by:
  5183 ;;		_tetris_buttons
  5184 ;;		_snake_screen
  5185 ;;		_snake_buttons
  5186 ;; This function uses a non-reentrant model
  5187 ;;
  5188                           
  5189                           	psect	text31
  5190  0023C0                     __ptext31:
  5191                           	opt callstack 0
  5192  0023C0                     _checkRight:
  5193                           	opt callstack 24
  5194                           
  5195                           ;incstack = 0
  5196                           ;checkRight@reset stored from wreg
  5197  0023C0  6E0D               	movwf	checkRight@reset,c
  5198                           
  5199                           ;buttons.c: 58: _Bool checkRight(_Bool reset);buttons.c: 59: {;buttons.c: 60:     if (Ri
      +                          ght_Debounced)
  5200  0023C2  506C               	movf	_Right_Debounced,w,c	;volatile
  5201  0023C4  B4D8               	btfsc	status,2,c
  5202  0023C6  D00D               	goto	l5153
  5203                           
  5204                           ;buttons.c: 61:     {;buttons.c: 62:         Right_Delay = 500;
  5205  0023C8  0E01               	movlw	1
  5206  0023CA  6E63               	movwf	_Right_Delay+1,c	;volatile
  5207  0023CC  0EF4               	movlw	244
  5208  0023CE  6E62               	movwf	_Right_Delay,c	;volatile
  5209                           
  5210                           ;buttons.c: 63:         Right_Debounced = !reset;
  5211  0023D0  500D               	movf	checkRight@reset,w,c
  5212  0023D2  A4D8               	btfss	status,2,c
  5213  0023D4  D002               	goto	u5080
  5214  0023D6  0E01               	movlw	1
  5215  0023D8  D001               	goto	u5090
  5216  0023DA                     u5080:
  5217  0023DA  0E00               	movlw	0
  5218  0023DC                     u5090:
  5219  0023DC  6E6C               	movwf	_Right_Debounced,c	;volatile
  5220                           
  5221                           ;buttons.c: 64:         return 1;
  5222  0023DE  0E01               	movlw	1
  5223  0023E0  0012               	return	
  5224  0023E2                     l5153:
  5225  0023E2  0E00               	movlw	0
  5226  0023E4  0012               	return		;funcret
  5227  0023E6                     __end_of_checkRight:
  5228                           	opt callstack 0
  5229                           
  5230 ;; *************** function _checkLeft *****************
  5231 ;; Defined at:
  5232 ;;		line 48 in file "buttons.c"
  5233 ;; Parameters:    Size  Location     Type
  5234 ;;  reset           1    wreg     _Bool 
  5235 ;; Auto vars:     Size  Location     Type
  5236 ;;  reset           1   12[COMRAM] _Bool 
  5237 ;; Return value:  Size  Location     Type
  5238 ;;                  1    wreg      _Bool 
  5239 ;; Registers used:
  5240 ;;		wreg, status,2
  5241 ;; Tracked objects:
  5242 ;;		On entry : 0/0
  5243 ;;		On exit  : 0/0
  5244 ;;		Unchanged: 0/0
  5245 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5246 ;;      Params:         0       0       0       0       0       0       0
  5247 ;;      Locals:         1       0       0       0       0       0       0
  5248 ;;      Temps:          0       0       0       0       0       0       0
  5249 ;;      Totals:         1       0       0       0       0       0       0
  5250 ;;Total ram usage:        1 bytes
  5251 ;; Hardware stack levels used:    1
  5252 ;; Hardware stack levels required when called:    4
  5253 ;; This function calls:
  5254 ;;		Nothing
  5255 ;; This function is called by:
  5256 ;;		_tetris_buttons
  5257 ;;		_snake_screen
  5258 ;;		_snake_buttons
  5259 ;; This function uses a non-reentrant model
  5260 ;;
  5261                           
  5262                           	psect	text32
  5263  0023E6                     __ptext32:
  5264                           	opt callstack 0
  5265  0023E6                     _checkLeft:
  5266                           	opt callstack 24
  5267                           
  5268                           ;incstack = 0
  5269                           ;checkLeft@reset stored from wreg
  5270  0023E6  6E0D               	movwf	checkLeft@reset,c
  5271                           
  5272                           ;buttons.c: 48: _Bool checkLeft(_Bool reset);buttons.c: 49: {;buttons.c: 50:     if (Lef
      +                          t_Debounced)
  5273  0023E8  506D               	movf	_Left_Debounced,w,c	;volatile
  5274  0023EA  B4D8               	btfsc	status,2,c
  5275  0023EC  D00D               	goto	l5139
  5276                           
  5277                           ;buttons.c: 51:     {;buttons.c: 52:         Left_Delay = 500;
  5278  0023EE  0E01               	movlw	1
  5279  0023F0  6E65               	movwf	_Left_Delay+1,c	;volatile
  5280  0023F2  0EF4               	movlw	244
  5281  0023F4  6E64               	movwf	_Left_Delay,c	;volatile
  5282                           
  5283                           ;buttons.c: 53:         Left_Debounced = !reset;
  5284  0023F6  500D               	movf	checkLeft@reset,w,c
  5285  0023F8  A4D8               	btfss	status,2,c
  5286  0023FA  D002               	goto	u5050
  5287  0023FC  0E01               	movlw	1
  5288  0023FE  D001               	goto	u5060
  5289  002400                     u5050:
  5290  002400  0E00               	movlw	0
  5291  002402                     u5060:
  5292  002402  6E6D               	movwf	_Left_Debounced,c	;volatile
  5293                           
  5294                           ;buttons.c: 54:         return 1;
  5295  002404  0E01               	movlw	1
  5296  002406  0012               	return	
  5297  002408                     l5139:
  5298  002408  0E00               	movlw	0
  5299  00240A  0012               	return		;funcret
  5300  00240C                     __end_of_checkLeft:
  5301                           	opt callstack 0
  5302                           
  5303 ;; *************** function _show_score *****************
  5304 ;; Defined at:
  5305 ;;		line 297 in file "shared_logic.c"
  5306 ;; Parameters:    Size  Location     Type
  5307 ;;  score           1    wreg     unsigned char 
  5308 ;; Auto vars:     Size  Location     Type
  5309 ;;  score           1   48[BANK0 ] unsigned char 
  5310 ;;  tmpObjectDat   16   32[BANK0 ] unsigned short [8]
  5311 ;;  currentNumbe    1   49[BANK0 ] unsigned char 
  5312 ;;  i               1   54[BANK0 ] unsigned char 
  5313 ;;  mask           16    0[BANK0 ] unsigned short [8]
  5314 ;;  number          4   50[BANK0 ] unsigned char [4]
  5315 ;;  Numberscreen   16   16[BANK0 ] unsigned short [8]
  5316 ;; Return value:  Size  Location     Type
  5317 ;;                  1    wreg      void 
  5318 ;; Registers used:
  5319 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5320 ;; Tracked objects:
  5321 ;;		On entry : 0/0
  5322 ;;		On exit  : 0/0
  5323 ;;		Unchanged: 0/0
  5324 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5325 ;;      Params:         0       0       0       0       0       0       0
  5326 ;;      Locals:         0      55       0       0       0       0       0
  5327 ;;      Temps:          0       0       0       0       0       0       0
  5328 ;;      Totals:         0      55       0       0       0       0       0
  5329 ;;Total ram usage:       55 bytes
  5330 ;; Hardware stack levels used:    1
  5331 ;; Hardware stack levels required when called:    7
  5332 ;; This function calls:
  5333 ;;		_checkDown
  5334 ;;		_clearArray
  5335 ;;		_getNumber
  5336 ;;		_itoa
  5337 ;;		_mergeObjects
  5338 ;;		_moveObject
  5339 ;;		_pauseButtons
  5340 ;;		_pauseMultiplexing
  5341 ;;		_resumeButtons
  5342 ;;		_resumeMultiplexing
  5343 ;;		_set_screen
  5344 ;; This function is called by:
  5345 ;;		_tetris_main
  5346 ;;		_snake_main
  5347 ;; This function uses a non-reentrant model
  5348 ;;
  5349                           
  5350                           	psect	text33
  5351  000EFA                     __ptext33:
  5352                           	opt callstack 0
  5353  000EFA                     _show_score:
  5354                           	opt callstack 22
  5355                           
  5356                           ;incstack = 0
  5357                           ;show_score@score stored from wreg
  5358  000EFA  0100               	movlb	0	; () banked
  5359  000EFC  6FB0               	movwf	show_score@score& (0+255),b
  5360                           
  5361                           ;shared_logic.c: 297: void show_score(uint8_t score);shared_logic.c: 298: {;shared_logic
      +                          .c: 299:     uint16_t Numberscreen[8];;shared_logic.c: 300:     clearArray(Numberscreen,
      +                           8);
  5362  000EFE  0E90               	movlw	low show_score@Numberscreen
  5363  000F00  6E0D               	movwf	clearArray@pArray,c
  5364  000F02  0E00               	movlw	high show_score@Numberscreen
  5365  000F04  6E0E               	movwf	clearArray@pArray+1,c
  5366  000F06  0E00               	movlw	0
  5367  000F08  6E10               	movwf	clearArray@size+1,c
  5368  000F0A  0E08               	movlw	8
  5369  000F0C  6E0F               	movwf	clearArray@size,c
  5370  000F0E  EC50  F011         	call	_clearArray	;wreg free
  5371                           
  5372                           ;shared_logic.c: 301:     {;shared_logic.c: 302:         char number[4];;shared_logic.c:
      +                           303:         itoa(score, number, 10);
  5373  000F12  C0B0  F01B         	movff	show_score@score,itoa@value
  5374  000F16  6A1C               	clrf	itoa@value+1,c
  5375  000F18  0EB2               	movlw	low show_score@number
  5376  000F1A  6E1D               	movwf	itoa@str,c
  5377  000F1C  0E00               	movlw	high show_score@number
  5378  000F1E  6E1E               	movwf	itoa@str+1,c
  5379  000F20  0E00               	movlw	0
  5380  000F22  6E20               	movwf	itoa@bas+1,c
  5381  000F24  0E0A               	movlw	10
  5382  000F26  6E1F               	movwf	itoa@bas,c
  5383  000F28  EC38  F009         	call	_itoa	;wreg free
  5384                           
  5385                           ;shared_logic.c: 304:         for(uint8_t i = 0; i < 3 && number[i]; i++)
  5386  000F2C  0E00               	movlw	0
  5387  000F2E  0100               	movlb	0	; () banked
  5388  000F30  6FB6               	movwf	show_score@i& (0+255),b
  5389  000F32  D036               	goto	l5381
  5390  000F34                     l5369:
  5391                           
  5392                           ; BSR set to: 0
  5393                           ;shared_logic.c: 305:         {;shared_logic.c: 306:             uint8_t currentNumber =
      +                           number[i] - '0';
  5394  000F34  0EB2               	movlw	low show_score@number
  5395  000F36  25B6               	addwf	show_score@i& (0+255),w,b
  5396  000F38  6ED9               	movwf	fsr2l,c
  5397  000F3A  6ADA               	clrf	fsr2h,c
  5398  000F3C  0E00               	movlw	high show_score@number
  5399  000F3E  22DA               	addwfc	fsr2h,f,c
  5400  000F40  50DF               	movf	indf2,w,c
  5401  000F42  0FD0               	addlw	208
  5402  000F44  6FB1               	movwf	show_score@currentNumber& (0+255),b
  5403                           
  5404                           ; BSR set to: 0
  5405                           ;shared_logic.c: 307:             uint16_t tmpObjectData[8];;shared_logic.c: 308:       
      +                                getNumber(currentNumber, tmpObjectData);
  5406  000F46  0EA0               	movlw	low show_score@tmpObjectData
  5407  000F48  6E17               	movwf	getNumber@pTarget,c
  5408  000F4A  0E00               	movlw	high show_score@tmpObjectData
  5409  000F4C  6E18               	movwf	getNumber@pTarget+1,c
  5410  000F4E  51B1               	movf	show_score@currentNumber& (0+255),w,b
  5411  000F50  EC92  F011         	call	_getNumber
  5412                           
  5413                           ;shared_logic.c: 309:             moveObject(tmpObjectData, DOWN, (2 - i) * 5);
  5414  000F54  0EA0               	movlw	low show_score@tmpObjectData
  5415  000F56  6E0D               	movwf	moveObject@pObject,c
  5416  000F58  0E00               	movlw	high show_score@tmpObjectData
  5417  000F5A  6E0E               	movwf	moveObject@pObject+1,c
  5418  000F5C  0E00               	movlw	0
  5419  000F5E  6E0F               	movwf	moveObject@direction,c
  5420  000F60  0100               	movlb	0	; () banked
  5421  000F62  51B6               	movf	show_score@i& (0+255),w,b
  5422  000F64  0802               	sublw	2
  5423  000F66  0D05               	mullw	5
  5424  000F68  CFF3 F010          	movff	prodl,moveObject@cycles
  5425  000F6C  EC99  F004         	call	_moveObject	;wreg free
  5426                           
  5427                           ;shared_logic.c: 310:             moveObject(tmpObjectData, RIGHT, i);
  5428  000F70  0EA0               	movlw	low show_score@tmpObjectData
  5429  000F72  6E0D               	movwf	moveObject@pObject,c
  5430  000F74  0E00               	movlw	high show_score@tmpObjectData
  5431  000F76  6E0E               	movwf	moveObject@pObject+1,c
  5432  000F78  0E03               	movlw	3
  5433  000F7A  6E0F               	movwf	moveObject@direction,c
  5434  000F7C  C0B6  F010         	movff	show_score@i,moveObject@cycles
  5435  000F80  EC99  F004         	call	_moveObject	;wreg free
  5436                           
  5437                           ;shared_logic.c: 311:             mergeObjects(tmpObjectData, Numberscreen, MERGE);
  5438  000F84  0EA0               	movlw	low show_score@tmpObjectData
  5439  000F86  6E0D               	movwf	mergeObjects@pSource,c
  5440  000F88  0E00               	movlw	high show_score@tmpObjectData
  5441  000F8A  6E0E               	movwf	mergeObjects@pSource+1,c
  5442  000F8C  0E90               	movlw	low show_score@Numberscreen
  5443  000F8E  6E0F               	movwf	mergeObjects@pTarget,c
  5444  000F90  0E00               	movlw	high show_score@Numberscreen
  5445  000F92  6E10               	movwf	mergeObjects@pTarget+1,c
  5446  000F94  0E01               	movlw	1
  5447  000F96  6E11               	movwf	mergeObjects@mode,c
  5448  000F98  ECBB  F009         	call	_mergeObjects	;wreg free
  5449                           
  5450                           ;shared_logic.c: 312:         }
  5451  000F9C  0100               	movlb	0	; () banked
  5452  000F9E  2BB6               	incf	show_score@i& (0+255),f,b
  5453  000FA0                     l5381:
  5454                           
  5455                           ; BSR set to: 0
  5456  000FA0  0E03               	movlw	3
  5457  000FA2  61B6               	cpfslt	show_score@i& (0+255),b
  5458  000FA4  D009               	goto	u5410
  5459                           
  5460                           ; BSR set to: 0
  5461  000FA6  0EB2               	movlw	low show_score@number
  5462  000FA8  25B6               	addwf	show_score@i& (0+255),w,b
  5463  000FAA  6ED9               	movwf	fsr2l,c
  5464  000FAC  6ADA               	clrf	fsr2h,c
  5465  000FAE  0E00               	movlw	high show_score@number
  5466  000FB0  22DA               	addwfc	fsr2h,f,c
  5467  000FB2  50DF               	movf	indf2,w,c
  5468  000FB4  A4D8               	btfss	status,2,c
  5469  000FB6  D7BE               	goto	l5369
  5470  000FB8                     u5410:
  5471                           
  5472                           ; BSR set to: 0
  5473                           ;shared_logic.c: 313:     };shared_logic.c: 314:     pauseMultiplexing();
  5474  000FB8  ECF3  F012         	call	_pauseMultiplexing	;wreg free
  5475                           
  5476                           ;shared_logic.c: 315:     set_screen(Numberscreen);
  5477  000FBC  0E90               	movlw	low show_score@Numberscreen
  5478  000FBE  6E17               	movwf	set_screen@newData,c
  5479  000FC0  0E00               	movlw	high show_score@Numberscreen
  5480  000FC2  6E18               	movwf	set_screen@newData+1,c
  5481  000FC4  EC06  F012         	call	_set_screen	;wreg free
  5482                           
  5483                           ;shared_logic.c: 316:     resumeMultiplexing();
  5484  000FC8  EC2E  F013         	call	_resumeMultiplexing	;wreg free
  5485  000FCC                     l5391:
  5486                           
  5487                           ;shared_logic.c: 318:     while(checkDown(0))
  5488  000FCC  0E00               	movlw	0
  5489  000FCE  EC3F  F012         	call	_checkDown
  5490  000FD2  0900               	iorlw	0
  5491  000FD4  A4D8               	btfss	status,2,c
  5492  000FD6  D7FA               	goto	l5391
  5493  000FD8                     u5420:
  5494                           
  5495                           ;shared_logic.c: 323:     while(!checkDown(0))
  5496  000FD8  0E00               	movlw	0
  5497  000FDA  EC3F  F012         	call	_checkDown
  5498  000FDE  0900               	iorlw	0
  5499  000FE0  B4D8               	btfsc	status,2,c
  5500  000FE2  D7FA               	goto	u5420
  5501                           
  5502                           ;shared_logic.c: 328:     {;shared_logic.c: 329:         uint16_t mask[] = {0xffff, 0xff
      +                          ff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff};
  5503  000FE4  EE20  F0C8         	lfsr	2,show_score@F2757
  5504  000FE8  EE10  F080         	lfsr	1,show_score@mask
  5505  000FEC  0E0F               	movlw	15
  5506  000FEE                     u5441:
  5507  000FEE  CFDB FFE3          	movff	plusw2,plusw1
  5508  000FF2  06E8               	decf	wreg,f,c
  5509  000FF4  E2FC               	bc	u5441
  5510                           
  5511                           ;shared_logic.c: 330:         mergeObjects(mask, Numberscreen, INVERT);
  5512  000FF6  0E80               	movlw	low show_score@mask
  5513  000FF8  6E0D               	movwf	mergeObjects@pSource,c
  5514  000FFA  0E00               	movlw	high show_score@mask
  5515  000FFC  6E0E               	movwf	mergeObjects@pSource+1,c
  5516  000FFE  0E90               	movlw	low show_score@Numberscreen
  5517  001000  6E0F               	movwf	mergeObjects@pTarget,c
  5518  001002  0E00               	movlw	high show_score@Numberscreen
  5519  001004  6E10               	movwf	mergeObjects@pTarget+1,c
  5520  001006  0E02               	movlw	2
  5521  001008  6E11               	movwf	mergeObjects@mode,c
  5522  00100A  ECBB  F009         	call	_mergeObjects	;wreg free
  5523                           
  5524                           ;shared_logic.c: 331:     };shared_logic.c: 332:     pauseMultiplexing();
  5525  00100E  ECF3  F012         	call	_pauseMultiplexing	;wreg free
  5526                           
  5527                           ;shared_logic.c: 333:     set_screen(Numberscreen);
  5528  001012  0E90               	movlw	low show_score@Numberscreen
  5529  001014  6E17               	movwf	set_screen@newData,c
  5530  001016  0E00               	movlw	high show_score@Numberscreen
  5531  001018  6E18               	movwf	set_screen@newData+1,c
  5532  00101A  EC06  F012         	call	_set_screen	;wreg free
  5533                           
  5534                           ;shared_logic.c: 334:     resumeMultiplexing();
  5535  00101E  EC2E  F013         	call	_resumeMultiplexing	;wreg free
  5536  001022                     l5405:
  5537                           
  5538                           ;shared_logic.c: 336:     while(checkDown(0))
  5539  001022  0E00               	movlw	0
  5540  001024  EC3F  F012         	call	_checkDown
  5541  001028  0900               	iorlw	0
  5542  00102A  A4D8               	btfss	status,2,c
  5543  00102C  D7FA               	goto	l5405
  5544                           
  5545                           ;shared_logic.c: 338:     pauseButtons();
  5546  00102E  EC28  F013         	call	_pauseButtons	;wreg free
  5547                           
  5548                           ;shared_logic.c: 339:     resumeButtons();
  5549  001032  EC25  F013         	call	_resumeButtons	;wreg free
  5550  001036  0012               	return		;funcret
  5551  001038                     __end_of_show_score:
  5552                           	opt callstack 0
  5553                           
  5554 ;; *************** function _resumeButtons *****************
  5555 ;; Defined at:
  5556 ;;		line 43 in file "buttons.c"
  5557 ;; Parameters:    Size  Location     Type
  5558 ;;		None
  5559 ;; Auto vars:     Size  Location     Type
  5560 ;;		None
  5561 ;; Return value:  Size  Location     Type
  5562 ;;                  1    wreg      void 
  5563 ;; Registers used:
  5564 ;;		wreg, status,2
  5565 ;; Tracked objects:
  5566 ;;		On entry : 0/0
  5567 ;;		On exit  : 0/0
  5568 ;;		Unchanged: 0/0
  5569 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5570 ;;      Params:         0       0       0       0       0       0       0
  5571 ;;      Locals:         0       0       0       0       0       0       0
  5572 ;;      Temps:          0       0       0       0       0       0       0
  5573 ;;      Totals:         0       0       0       0       0       0       0
  5574 ;;Total ram usage:        0 bytes
  5575 ;; Hardware stack levels used:    1
  5576 ;; Hardware stack levels required when called:    4
  5577 ;; This function calls:
  5578 ;;		Nothing
  5579 ;; This function is called by:
  5580 ;;		_show_score
  5581 ;; This function uses a non-reentrant model
  5582 ;;
  5583                           
  5584                           	psect	text34
  5585  00264A                     __ptext34:
  5586                           	opt callstack 0
  5587  00264A                     _resumeButtons:
  5588                           	opt callstack 24
  5589                           
  5590                           ;buttons.c: 45:     mtxButtons = 1;
  5591                           
  5592                           ;incstack = 0
  5593  00264A  0E01               	movlw	1
  5594  00264C  6E5C               	movwf	_mtxButtons,c	;volatile
  5595  00264E  0012               	return		;funcret
  5596  002650                     __end_of_resumeButtons:
  5597                           	opt callstack 0
  5598                           
  5599 ;; *************** function _pauseButtons *****************
  5600 ;; Defined at:
  5601 ;;		line 38 in file "buttons.c"
  5602 ;; Parameters:    Size  Location     Type
  5603 ;;		None
  5604 ;; Auto vars:     Size  Location     Type
  5605 ;;		None
  5606 ;; Return value:  Size  Location     Type
  5607 ;;                  1    wreg      void 
  5608 ;; Registers used:
  5609 ;;		wreg, status,2
  5610 ;; Tracked objects:
  5611 ;;		On entry : 0/0
  5612 ;;		On exit  : 0/0
  5613 ;;		Unchanged: 0/0
  5614 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5615 ;;      Params:         0       0       0       0       0       0       0
  5616 ;;      Locals:         0       0       0       0       0       0       0
  5617 ;;      Temps:          0       0       0       0       0       0       0
  5618 ;;      Totals:         0       0       0       0       0       0       0
  5619 ;;Total ram usage:        0 bytes
  5620 ;; Hardware stack levels used:    1
  5621 ;; Hardware stack levels required when called:    4
  5622 ;; This function calls:
  5623 ;;		Nothing
  5624 ;; This function is called by:
  5625 ;;		_show_score
  5626 ;; This function uses a non-reentrant model
  5627 ;;
  5628                           
  5629                           	psect	text35
  5630  002650                     __ptext35:
  5631                           	opt callstack 0
  5632  002650                     _pauseButtons:
  5633                           	opt callstack 24
  5634                           
  5635                           ;buttons.c: 40:     mtxButtons = 0;
  5636                           
  5637                           ;incstack = 0
  5638  002650  0E00               	movlw	0
  5639  002652  6E5C               	movwf	_mtxButtons,c	;volatile
  5640  002654  0012               	return		;funcret
  5641  002656                     __end_of_pauseButtons:
  5642                           	opt callstack 0
  5643                           
  5644 ;; *************** function _moveObject *****************
  5645 ;; Defined at:
  5646 ;;		line 260 in file "shared_logic.c"
  5647 ;; Parameters:    Size  Location     Type
  5648 ;;  pObject         2   12[COMRAM] PTR unsigned short 
  5649 ;;		 -> show_score@tmpObjectData(16), tetris_button_right@tmpObjectData(16), tetris_button_left@tmpObjectData(16), 
  5650 ;;  direction       1   14[COMRAM] enum E2562
  5651 ;;  cycles          1   15[COMRAM] unsigned char 
  5652 ;; Auto vars:     Size  Location     Type
  5653 ;;  i               1   23[COMRAM] unsigned char 
  5654 ;;  c               1   22[COMRAM] unsigned char 
  5655 ;; Return value:  Size  Location     Type
  5656 ;;                  1    wreg      void 
  5657 ;; Registers used:
  5658 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  5659 ;; Tracked objects:
  5660 ;;		On entry : 0/0
  5661 ;;		On exit  : 0/0
  5662 ;;		Unchanged: 0/0
  5663 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5664 ;;      Params:         4       0       0       0       0       0       0
  5665 ;;      Locals:         2       0       0       0       0       0       0
  5666 ;;      Temps:          6       0       0       0       0       0       0
  5667 ;;      Totals:        12       0       0       0       0       0       0
  5668 ;;Total ram usage:       12 bytes
  5669 ;; Hardware stack levels used:    1
  5670 ;; Hardware stack levels required when called:    4
  5671 ;; This function calls:
  5672 ;;		Nothing
  5673 ;; This function is called by:
  5674 ;;		_tetris_button_left
  5675 ;;		_tetris_button_right
  5676 ;;		_show_score
  5677 ;; This function uses a non-reentrant model
  5678 ;;
  5679                           
  5680                           	psect	text36
  5681  000932                     __ptext36:
  5682                           	opt callstack 0
  5683  000932                     _moveObject:
  5684                           	opt callstack 23
  5685                           
  5686                           ;shared_logic.c: 260: void moveObject(uint16_t * pObject, direction_t direction, uint8_t
      +                           cycles);shared_logic.c: 261: {;shared_logic.c: 262:     uint8_t i, c;;shared_logic.c: 2
      +                          64:     switch(direction)
  5687                           
  5688                           ;incstack = 0
  5689  000932  D0B5               	goto	l4899
  5690  000934                     l4825:
  5691                           
  5692                           ;shared_logic.c: 267:             for(c = 0; c < cycles; c++)
  5693  000934  0E00               	movlw	0
  5694  000936  6E17               	movwf	moveObject@c,c
  5695  000938  D016               	goto	l4841
  5696  00093A                     l4827:
  5697                           
  5698                           ;shared_logic.c: 268:             {;shared_logic.c: 269:                 for(i = 0; i < 
      +                          8; i++)
  5699  00093A  0E00               	movlw	0
  5700  00093C  6E18               	movwf	moveObject@i,c
  5701  00093E                     l4833:
  5702                           
  5703                           ;shared_logic.c: 270:                     pObject[i] <<= 1;
  5704  00093E  5018               	movf	moveObject@i,w,c
  5705  000940  0D02               	mullw	2
  5706  000942  CFF3 F011          	movff	prodl,??_moveObject
  5707  000946  CFF4 F012          	movff	prodh,??_moveObject+1
  5708  00094A  5011               	movf	??_moveObject,w,c
  5709  00094C  240D               	addwf	moveObject@pObject,w,c
  5710  00094E  6ED9               	movwf	fsr2l,c
  5711  000950  5012               	movf	??_moveObject+1,w,c
  5712  000952  200E               	addwfc	moveObject@pObject+1,w,c
  5713  000954  6EDA               	movwf	fsr2h,c
  5714  000956  90D8               	bcf	status,0,c
  5715  000958  36DE               	rlcf	postinc2,f,c
  5716  00095A  36DD               	rlcf	postdec2,f,c
  5717  00095C  2A18               	incf	moveObject@i,f,c
  5718  00095E  0E07               	movlw	7
  5719  000960  6418               	cpfsgt	moveObject@i,c
  5720  000962  D7ED               	goto	l4833
  5721                           
  5722                           ;shared_logic.c: 271:             }
  5723  000964  2A17               	incf	moveObject@c,f,c
  5724  000966                     l4841:
  5725  000966  5010               	movf	moveObject@cycles,w,c
  5726  000968  5C17               	subwf	moveObject@c,w,c
  5727  00096A  B0D8               	btfsc	status,0,c
  5728  00096C  0012               	return	
  5729  00096E  D7E5               	goto	l4827
  5730  000970                     l4843:
  5731                           
  5732                           ;shared_logic.c: 274:             for(c = 0; c < cycles; c++)
  5733  000970  0E00               	movlw	0
  5734  000972  6E17               	movwf	moveObject@c,c
  5735  000974  D017               	goto	l4859
  5736  000976                     l4845:
  5737                           
  5738                           ;shared_logic.c: 275:             {;shared_logic.c: 276:                 for(i = 0; i < 
      +                          8; i++)
  5739  000976  0E00               	movlw	0
  5740  000978  6E18               	movwf	moveObject@i,c
  5741  00097A                     l4851:
  5742                           
  5743                           ;shared_logic.c: 277:                     pObject[i] >>= 1;
  5744  00097A  5018               	movf	moveObject@i,w,c
  5745  00097C  0D02               	mullw	2
  5746  00097E  CFF3 F011          	movff	prodl,??_moveObject
  5747  000982  CFF4 F012          	movff	prodh,??_moveObject+1
  5748  000986  5011               	movf	??_moveObject,w,c
  5749  000988  240D               	addwf	moveObject@pObject,w,c
  5750  00098A  6ED9               	movwf	fsr2l,c
  5751  00098C  5012               	movf	??_moveObject+1,w,c
  5752  00098E  200E               	addwfc	moveObject@pObject+1,w,c
  5753  000990  6EDA               	movwf	fsr2h,c
  5754  000992  90D8               	bcf	status,0,c
  5755  000994  32DC               	rrcf	preinc2,f,c
  5756  000996  50DD               	movf	postdec2,w,c
  5757  000998  32DF               	rrcf	indf2,f,c
  5758  00099A  2A18               	incf	moveObject@i,f,c
  5759  00099C  0E07               	movlw	7
  5760  00099E  6418               	cpfsgt	moveObject@i,c
  5761  0009A0  D7EC               	goto	l4851
  5762                           
  5763                           ;shared_logic.c: 278:             }
  5764  0009A2  2A17               	incf	moveObject@c,f,c
  5765  0009A4                     l4859:
  5766  0009A4  5010               	movf	moveObject@cycles,w,c
  5767  0009A6  5C17               	subwf	moveObject@c,w,c
  5768  0009A8  B0D8               	btfsc	status,0,c
  5769  0009AA  0012               	return	
  5770  0009AC  D7E4               	goto	l4845
  5771  0009AE                     l4861:
  5772                           
  5773                           ;shared_logic.c: 281:             for(c = 0; c < cycles; c++)
  5774  0009AE  0E00               	movlw	0
  5775  0009B0  6E17               	movwf	moveObject@c,c
  5776  0009B2  D033               	goto	l4877
  5777  0009B4                     l4863:
  5778                           
  5779                           ;shared_logic.c: 282:             {;shared_logic.c: 283:                 for(i = 7; i > 
      +                          0; i--)
  5780  0009B4  0E07               	movlw	7
  5781  0009B6  6E18               	movwf	moveObject@i,c
  5782  0009B8                     l4867:
  5783                           
  5784                           ;shared_logic.c: 284:                     pObject[i] = pObject[i - 1];
  5785  0009B8  5018               	movf	moveObject@i,w,c
  5786  0009BA  6E11               	movwf	??_moveObject& (0+255),c
  5787  0009BC  6A12               	clrf	(??_moveObject+1)& (0+255),c
  5788  0009BE  90D8               	bcf	status,0,c
  5789  0009C0  3611               	rlcf	??_moveObject,f,c
  5790  0009C2  3612               	rlcf	??_moveObject+1,f,c
  5791  0009C4  C00D  F013         	movff	moveObject@pObject,??_moveObject+2
  5792  0009C8  C00E  F014         	movff	moveObject@pObject+1,??_moveObject+3
  5793  0009CC  5011               	movf	??_moveObject,w,c
  5794  0009CE  2613               	addwf	??_moveObject+2,f,c
  5795  0009D0  5012               	movf	??_moveObject+1,w,c
  5796  0009D2  2214               	addwfc	??_moveObject+3,f,c
  5797  0009D4  0EFE               	movlw	254
  5798  0009D6  2413               	addwf	??_moveObject+2,w,c
  5799  0009D8  6ED9               	movwf	fsr2l,c
  5800  0009DA  0EFF               	movlw	255
  5801  0009DC  2014               	addwfc	??_moveObject+3,w,c
  5802  0009DE  6EDA               	movwf	fsr2h,c
  5803  0009E0  5018               	movf	moveObject@i,w,c
  5804  0009E2  0D02               	mullw	2
  5805  0009E4  CFF3 F015          	movff	prodl,??_moveObject+4
  5806  0009E8  CFF4 F016          	movff	prodh,??_moveObject+5
  5807  0009EC  5015               	movf	??_moveObject+4,w,c
  5808  0009EE  240D               	addwf	moveObject@pObject,w,c
  5809  0009F0  6EE1               	movwf	fsr1l,c
  5810  0009F2  5016               	movf	??_moveObject+5,w,c
  5811  0009F4  200E               	addwfc	moveObject@pObject+1,w,c
  5812  0009F6  6EE2               	movwf	fsr1h,c
  5813  0009F8  CFDE FFE6          	movff	postinc2,postinc1
  5814  0009FC  CFDD FFE5          	movff	postdec2,postdec1
  5815  000A00  0618               	decf	moveObject@i,f,c
  5816  000A02  5018               	movf	moveObject@i,w,c
  5817  000A04  A4D8               	btfss	status,2,c
  5818  000A06  D7D8               	goto	l4867
  5819                           
  5820                           ;shared_logic.c: 285:                 pObject[0] = 0;
  5821  000A08  C00D  FFD9         	movff	moveObject@pObject,fsr2l
  5822  000A0C  C00E  FFDA         	movff	moveObject@pObject+1,fsr2h
  5823  000A10  0E00               	movlw	0
  5824  000A12  6EDE               	movwf	postinc2,c
  5825  000A14  0E00               	movlw	0
  5826  000A16  6EDD               	movwf	postdec2,c
  5827                           
  5828                           ;shared_logic.c: 286:             }
  5829  000A18  2A17               	incf	moveObject@c,f,c
  5830  000A1A                     l4877:
  5831  000A1A  5010               	movf	moveObject@cycles,w,c
  5832  000A1C  5C17               	subwf	moveObject@c,w,c
  5833  000A1E  B0D8               	btfsc	status,0,c
  5834  000A20  0012               	return	
  5835  000A22  D7C8               	goto	l4863
  5836  000A24                     l4879:
  5837                           
  5838                           ;shared_logic.c: 289:             for(c = 0; c < cycles; c++)
  5839  000A24  0E00               	movlw	0
  5840  000A26  6E17               	movwf	moveObject@c,c
  5841  000A28  D035               	goto	l4897
  5842  000A2A                     l4881:
  5843                           
  5844                           ;shared_logic.c: 290:             {;shared_logic.c: 291:                 for(i = 0; i < 
      +                          7; i++)
  5845  000A2A  0E00               	movlw	0
  5846  000A2C  6E18               	movwf	moveObject@i,c
  5847  000A2E                     l4887:
  5848                           
  5849                           ;shared_logic.c: 292:                     pObject[i] = pObject[i + 1];
  5850  000A2E  5018               	movf	moveObject@i,w,c
  5851  000A30  6E11               	movwf	??_moveObject& (0+255),c
  5852  000A32  6A12               	clrf	(??_moveObject+1)& (0+255),c
  5853  000A34  90D8               	bcf	status,0,c
  5854  000A36  3611               	rlcf	??_moveObject,f,c
  5855  000A38  3612               	rlcf	??_moveObject+1,f,c
  5856  000A3A  C00D  F013         	movff	moveObject@pObject,??_moveObject+2
  5857  000A3E  C00E  F014         	movff	moveObject@pObject+1,??_moveObject+3
  5858  000A42  5011               	movf	??_moveObject,w,c
  5859  000A44  2613               	addwf	??_moveObject+2,f,c
  5860  000A46  5012               	movf	??_moveObject+1,w,c
  5861  000A48  2214               	addwfc	??_moveObject+3,f,c
  5862  000A4A  0E02               	movlw	2
  5863  000A4C  2413               	addwf	??_moveObject+2,w,c
  5864  000A4E  6ED9               	movwf	fsr2l,c
  5865  000A50  0E00               	movlw	0
  5866  000A52  2014               	addwfc	??_moveObject+3,w,c
  5867  000A54  6EDA               	movwf	fsr2h,c
  5868  000A56  5018               	movf	moveObject@i,w,c
  5869  000A58  0D02               	mullw	2
  5870  000A5A  CFF3 F015          	movff	prodl,??_moveObject+4
  5871  000A5E  CFF4 F016          	movff	prodh,??_moveObject+5
  5872  000A62  5015               	movf	??_moveObject+4,w,c
  5873  000A64  240D               	addwf	moveObject@pObject,w,c
  5874  000A66  6EE1               	movwf	fsr1l,c
  5875  000A68  5016               	movf	??_moveObject+5,w,c
  5876  000A6A  200E               	addwfc	moveObject@pObject+1,w,c
  5877  000A6C  6EE2               	movwf	fsr1h,c
  5878  000A6E  CFDE FFE6          	movff	postinc2,postinc1
  5879  000A72  CFDD FFE5          	movff	postdec2,postdec1
  5880  000A76  2A18               	incf	moveObject@i,f,c
  5881  000A78  0E06               	movlw	6
  5882  000A7A  6418               	cpfsgt	moveObject@i,c
  5883  000A7C  D7D8               	goto	l4887
  5884                           
  5885                           ;shared_logic.c: 293:                 pObject[7] = 0;
  5886  000A7E  EE20 F00E          	lfsr	2,14
  5887  000A82  500D               	movf	moveObject@pObject,w,c
  5888  000A84  26D9               	addwf	fsr2l,f,c
  5889  000A86  500E               	movf	moveObject@pObject+1,w,c
  5890  000A88  22DA               	addwfc	fsr2h,f,c
  5891  000A8A  0E00               	movlw	0
  5892  000A8C  6EDE               	movwf	postinc2,c
  5893  000A8E  0E00               	movlw	0
  5894  000A90  6EDD               	movwf	postdec2,c
  5895                           
  5896                           ;shared_logic.c: 294:             }
  5897  000A92  2A17               	incf	moveObject@c,f,c
  5898  000A94                     l4897:
  5899  000A94  5010               	movf	moveObject@cycles,w,c
  5900  000A96  5C17               	subwf	moveObject@c,w,c
  5901  000A98  B0D8               	btfsc	status,0,c
  5902  000A9A  0012               	return	
  5903  000A9C  D7C6               	goto	l4881
  5904  000A9E                     l4899:
  5905  000A9E  500F               	movf	moveObject@direction,w,c
  5906  000AA0  6E11               	movwf	??_moveObject& (0+255),c
  5907  000AA2  6A12               	clrf	(??_moveObject+1)& (0+255),c
  5908                           
  5909                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  5910                           ; Switch size 1, requested type "simple"
  5911                           ; Number of cases is 1, Range of values is 0 to 0
  5912                           ; switch strategies available:
  5913                           ; Name         Instructions Cycles
  5914                           ; simple_byte            4     3 (average)
  5915                           ;	Chosen strategy is simple_byte
  5916  000AA4  5012               	movf	??_moveObject+1,w,c
  5917  000AA6  0A00               	xorlw	0	; case 0
  5918  000AA8  A4D8               	btfss	status,2,c
  5919  000AAA  0012               	return	
  5920                           
  5921                           ; Switch size 1, requested type "simple"
  5922                           ; Number of cases is 4, Range of values is 0 to 3
  5923                           ; switch strategies available:
  5924                           ; Name         Instructions Cycles
  5925                           ; simple_byte           13     7 (average)
  5926                           ;	Chosen strategy is simple_byte
  5927  000AAC  5011               	movf	??_moveObject,w,c
  5928  000AAE  0A00               	xorlw	0	; case 0
  5929  000AB0  B4D8               	btfsc	status,2,c
  5930  000AB2  D740               	goto	l4825
  5931  000AB4  0A01               	xorlw	1	; case 1
  5932  000AB6  B4D8               	btfsc	status,2,c
  5933  000AB8  D75B               	goto	l4843
  5934  000ABA  0A03               	xorlw	3	; case 2
  5935  000ABC  B4D8               	btfsc	status,2,c
  5936  000ABE  D7B2               	goto	l4879
  5937  000AC0  0A01               	xorlw	1	; case 3
  5938  000AC2  A4D8               	btfss	status,2,c
  5939  000AC4  0012               	return	
  5940  000AC6  D773               	goto	l4861
  5941  000AC8                     __end_of_moveObject:
  5942                           	opt callstack 0
  5943                           
  5944 ;; *************** function _itoa *****************
  5945 ;; Defined at:
  5946 ;;		line 77 in file "shared_logic.c"
  5947 ;; Parameters:    Size  Location     Type
  5948 ;;  value           2   26[COMRAM] int 
  5949 ;;  str             2   28[COMRAM] PTR unsigned char 
  5950 ;;		 -> show_score@number(4), 
  5951 ;;  bas             2   30[COMRAM] int 
  5952 ;; Auto vars:     Size  Location     Type
  5953 ;;  rem             2   35[COMRAM] int 
  5954 ;;  i               2   37[COMRAM] int 
  5955 ;;  isNegative      1   34[COMRAM] _Bool 
  5956 ;; Return value:  Size  Location     Type
  5957 ;;                  2   26[COMRAM] PTR unsigned char 
  5958 ;; Registers used:
  5959 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  5960 ;; Tracked objects:
  5961 ;;		On entry : 0/0
  5962 ;;		On exit  : 0/0
  5963 ;;		Unchanged: 0/0
  5964 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5965 ;;      Params:         6       0       0       0       0       0       0
  5966 ;;      Locals:         7       0       0       0       0       0       0
  5967 ;;      Temps:          0       0       0       0       0       0       0
  5968 ;;      Totals:        13       0       0       0       0       0       0
  5969 ;;Total ram usage:       13 bytes
  5970 ;; Hardware stack levels used:    1
  5971 ;; Hardware stack levels required when called:    6
  5972 ;; This function calls:
  5973 ;;		___awdiv
  5974 ;;		___awmod
  5975 ;;		_reverse
  5976 ;; This function is called by:
  5977 ;;		_show_score
  5978 ;; This function uses a non-reentrant model
  5979 ;;
  5980                           
  5981                           	psect	text37
  5982  001270                     __ptext37:
  5983                           	opt callstack 0
  5984  001270                     _itoa:
  5985                           	opt callstack 22
  5986                           
  5987                           ;shared_logic.c: 77: char * itoa(int value, char * str, int bas);shared_logic.c: 78: {;s
      +                          hared_logic.c: 79:     int i = 0;
  5988                           
  5989                           ;incstack = 0
  5990  001270  0E00               	movlw	0
  5991  001272  6E27               	movwf	itoa@i+1,c
  5992  001274  0E00               	movlw	0
  5993  001276  6E26               	movwf	itoa@i,c
  5994                           
  5995                           ;shared_logic.c: 80:     _Bool isNegative = 0;
  5996  001278  0E00               	movlw	0
  5997  00127A  6E23               	movwf	itoa@isNegative,c
  5998                           
  5999                           ;shared_logic.c: 83:     if(value == 0)
  6000  00127C  501B               	movf	itoa@value,w,c
  6001  00127E  101C               	iorwf	itoa@value+1,w,c
  6002  001280  A4D8               	btfss	status,2,c
  6003  001282  D011               	goto	l5243
  6004                           
  6005                           ;shared_logic.c: 84:     {;shared_logic.c: 85:         str[i++] = '0';
  6006  001284  C01D  FFD9         	movff	itoa@str,fsr2l
  6007  001288  C01E  FFDA         	movff	itoa@str+1,fsr2h
  6008  00128C  0E30               	movlw	48
  6009  00128E  6EDF               	movwf	indf2,c
  6010  001290  4A26               	infsnz	itoa@i,f,c
  6011  001292  2A27               	incf	itoa@i+1,f,c
  6012                           
  6013                           ;shared_logic.c: 86:         str[i] = '\0';
  6014  001294  5026               	movf	itoa@i,w,c
  6015  001296  241D               	addwf	itoa@str,w,c
  6016  001298  6ED9               	movwf	fsr2l,c
  6017  00129A  5027               	movf	itoa@i+1,w,c
  6018  00129C  201E               	addwfc	itoa@str+1,w,c
  6019  00129E  6EDA               	movwf	fsr2h,c
  6020  0012A0  0E00               	movlw	0
  6021  0012A2  6EDF               	movwf	indf2,c
  6022  0012A4  0012               	return	
  6023  0012A6                     l5243:
  6024                           
  6025                           ;shared_logic.c: 92:     if(value < 0 && bas == 10)
  6026  0012A6  AE1C               	btfss	itoa@value+1,7,c
  6027  0012A8  D042               	goto	l5265
  6028  0012AA  0E0A               	movlw	10
  6029  0012AC  181F               	xorwf	itoa@bas,w,c
  6030  0012AE  1020               	iorwf	itoa@bas+1,w,c
  6031  0012B0  A4D8               	btfss	status,2,c
  6032  0012B2  D03D               	goto	l5265
  6033                           
  6034                           ;shared_logic.c: 93:     {;shared_logic.c: 94:         isNegative = 1;
  6035  0012B4  0E01               	movlw	1
  6036  0012B6  6E23               	movwf	itoa@isNegative,c
  6037                           
  6038                           ;shared_logic.c: 95:         value = -value;
  6039  0012B8  6C1B               	negf	itoa@value,c
  6040  0012BA  1E1C               	comf	itoa@value+1,f,c
  6041  0012BC  B0D8               	btfsc	status,0,c
  6042  0012BE  2A1C               	incf	itoa@value+1,f,c
  6043  0012C0  D036               	goto	l5265
  6044  0012C2                     l5251:
  6045                           
  6046                           ;shared_logic.c: 100:     {;shared_logic.c: 101:         int rem = value % bas;
  6047  0012C2  C01B  F00D         	movff	itoa@value,___awmod@dividend
  6048  0012C6  C01C  F00E         	movff	itoa@value+1,___awmod@dividend+1
  6049  0012CA  C01F  F00F         	movff	itoa@bas,___awmod@divisor
  6050  0012CE  C020  F010         	movff	itoa@bas+1,___awmod@divisor+1
  6051  0012D2  ECC9  F00E         	call	___awmod	;wreg free
  6052  0012D6  C00D  F024         	movff	?___awmod,itoa@rem
  6053  0012DA  C00E  F025         	movff	?___awmod+1,itoa@rem+1
  6054                           
  6055                           ;shared_logic.c: 102:         str[i++] = (rem > 9) ? (rem - 10) + 'a' : rem + '0';
  6056  0012DE  BE25               	btfsc	itoa@rem+1,7,c
  6057  0012E0  D006               	goto	u5260
  6058  0012E2  5025               	movf	itoa@rem+1,w,c
  6059  0012E4  E106               	bnz	l5257
  6060  0012E6  0E0A               	movlw	10
  6061  0012E8  5C24               	subwf	itoa@rem,w,c
  6062  0012EA  B0D8               	btfsc	status,0,c
  6063  0012EC  D002               	goto	l5257
  6064  0012EE                     u5260:
  6065  0012EE  0E30               	movlw	48
  6066  0012F0  D001               	goto	L2
  6067  0012F2                     l5257:
  6068  0012F2  0E57               	movlw	87
  6069  0012F4                     L2:
  6070  0012F4  2424               	addwf	itoa@rem,w,c
  6071  0012F6  6E21               	movwf	_itoa$878,c
  6072  0012F8  0E00               	movlw	0
  6073  0012FA  2025               	addwfc	itoa@rem+1,w,c
  6074  0012FC  6E22               	movwf	_itoa$878+1,c
  6075  0012FE  5026               	movf	itoa@i,w,c
  6076  001300  241D               	addwf	itoa@str,w,c
  6077  001302  6ED9               	movwf	fsr2l,c
  6078  001304  5027               	movf	itoa@i+1,w,c
  6079  001306  201E               	addwfc	itoa@str+1,w,c
  6080  001308  6EDA               	movwf	fsr2h,c
  6081  00130A  C021  FFDF         	movff	_itoa$878,indf2
  6082  00130E  4A26               	infsnz	itoa@i,f,c
  6083  001310  2A27               	incf	itoa@i+1,f,c
  6084                           
  6085                           ;shared_logic.c: 103:         value = value / bas;
  6086  001312  C01B  F00D         	movff	itoa@value,___awdiv@dividend
  6087  001316  C01C  F00E         	movff	itoa@value+1,___awdiv@dividend+1
  6088  00131A  C01F  F00F         	movff	itoa@bas,___awdiv@divisor
  6089  00131E  C020  F010         	movff	itoa@bas+1,___awdiv@divisor+1
  6090  001322  ECC9  F00D         	call	___awdiv	;wreg free
  6091  001326  C00D  F01B         	movff	?___awdiv,itoa@value
  6092  00132A  C00E  F01C         	movff	?___awdiv+1,itoa@value+1
  6093  00132E                     l5265:
  6094                           
  6095                           ;shared_logic.c: 99:     while(value != 0)
  6096  00132E  501B               	movf	itoa@value,w,c
  6097  001330  101C               	iorwf	itoa@value+1,w,c
  6098  001332  A4D8               	btfss	status,2,c
  6099  001334  D7C6               	goto	l5251
  6100                           
  6101                           ;shared_logic.c: 107:     if(isNegative)
  6102  001336  5023               	movf	itoa@isNegative,w,c
  6103  001338  B4D8               	btfsc	status,2,c
  6104  00133A  D00A               	goto	l5273
  6105                           
  6106                           ;shared_logic.c: 108:     {;shared_logic.c: 109:         str[i++] = '-';
  6107  00133C  5026               	movf	itoa@i,w,c
  6108  00133E  241D               	addwf	itoa@str,w,c
  6109  001340  6ED9               	movwf	fsr2l,c
  6110  001342  5027               	movf	itoa@i+1,w,c
  6111  001344  201E               	addwfc	itoa@str+1,w,c
  6112  001346  6EDA               	movwf	fsr2h,c
  6113  001348  0E2D               	movlw	45
  6114  00134A  6EDF               	movwf	indf2,c
  6115  00134C  4A26               	infsnz	itoa@i,f,c
  6116  00134E  2A27               	incf	itoa@i+1,f,c
  6117  001350                     l5273:
  6118                           
  6119                           ;shared_logic.c: 112:     str[i] = '\0';
  6120  001350  5026               	movf	itoa@i,w,c
  6121  001352  241D               	addwf	itoa@str,w,c
  6122  001354  6ED9               	movwf	fsr2l,c
  6123  001356  5027               	movf	itoa@i+1,w,c
  6124  001358  201E               	addwfc	itoa@str+1,w,c
  6125  00135A  6EDA               	movwf	fsr2h,c
  6126  00135C  0E00               	movlw	0
  6127  00135E  6EDF               	movwf	indf2,c
  6128                           
  6129                           ;shared_logic.c: 115:     reverse(str, i);
  6130  001360  C01D  F012         	movff	itoa@str,reverse@str
  6131  001364  C01E  F013         	movff	itoa@str+1,reverse@str+1
  6132  001368  C026  F014         	movff	itoa@i,reverse@length
  6133  00136C  C027  F015         	movff	itoa@i+1,reverse@length+1
  6134  001370  ECFF  F00F         	call	_reverse	;wreg free
  6135  001374  0012               	return		;funcret
  6136  001376                     __end_of_itoa:
  6137                           	opt callstack 0
  6138                           
  6139 ;; *************** function _reverse *****************
  6140 ;; Defined at:
  6141 ;;		line 65 in file "shared_logic.c"
  6142 ;; Parameters:    Size  Location     Type
  6143 ;;  str             2   17[COMRAM] PTR unsigned char 
  6144 ;;		 -> show_score@number(4), 
  6145 ;;  length          2   19[COMRAM] int 
  6146 ;; Auto vars:     Size  Location     Type
  6147 ;;  end             2   24[COMRAM] int 
  6148 ;;  start           2   22[COMRAM] int 
  6149 ;; Return value:  Size  Location     Type
  6150 ;;                  1    wreg      void 
  6151 ;; Registers used:
  6152 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  6153 ;; Tracked objects:
  6154 ;;		On entry : 0/0
  6155 ;;		On exit  : 0/0
  6156 ;;		Unchanged: 0/0
  6157 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6158 ;;      Params:         4       0       0       0       0       0       0
  6159 ;;      Locals:         4       0       0       0       0       0       0
  6160 ;;      Temps:          1       0       0       0       0       0       0
  6161 ;;      Totals:         9       0       0       0       0       0       0
  6162 ;;Total ram usage:        9 bytes
  6163 ;; Hardware stack levels used:    1
  6164 ;; Hardware stack levels required when called:    5
  6165 ;; This function calls:
  6166 ;;		_swap
  6167 ;; This function is called by:
  6168 ;;		_itoa
  6169 ;; This function uses a non-reentrant model
  6170 ;;
  6171                           
  6172                           	psect	text38
  6173  001FFE                     __ptext38:
  6174                           	opt callstack 0
  6175  001FFE                     _reverse:
  6176                           	opt callstack 22
  6177                           
  6178                           ;shared_logic.c: 65: void reverse(char str[], int length);shared_logic.c: 66: {;shared_l
      +                          ogic.c: 67:     int start = 0;
  6179                           
  6180                           ;incstack = 0
  6181  001FFE  0E00               	movlw	0
  6182  002000  6E18               	movwf	reverse@start+1,c
  6183  002002  0E00               	movlw	0
  6184  002004  6E17               	movwf	reverse@start,c
  6185                           
  6186                           ;shared_logic.c: 68:     int end = length - 1;
  6187  002006  0EFF               	movlw	255
  6188  002008  2414               	addwf	reverse@length,w,c
  6189  00200A  6E19               	movwf	reverse@end,c
  6190  00200C  0EFF               	movlw	255
  6191  00200E  2015               	addwfc	reverse@length+1,w,c
  6192  002010  6E1A               	movwf	reverse@end+1,c
  6193                           
  6194                           ;shared_logic.c: 69:     while(start < end)
  6195  002012  D013               	goto	l4957
  6196  002014                     l4951:
  6197                           
  6198                           ;shared_logic.c: 70:     {;shared_logic.c: 71:         swap(str + start, str + end);
  6199  002014  5017               	movf	reverse@start,w,c
  6200  002016  2412               	addwf	reverse@str,w,c
  6201  002018  6E0D               	movwf	swap@a,c
  6202  00201A  5018               	movf	reverse@start+1,w,c
  6203  00201C  2013               	addwfc	reverse@str+1,w,c
  6204  00201E  6E0E               	movwf	swap@a+1,c
  6205  002020  5019               	movf	reverse@end,w,c
  6206  002022  2412               	addwf	reverse@str,w,c
  6207  002024  6E0F               	movwf	swap@b,c
  6208  002026  501A               	movf	reverse@end+1,w,c
  6209  002028  2013               	addwfc	reverse@str+1,w,c
  6210  00202A  6E10               	movwf	swap@b+1,c
  6211  00202C  EC39  F011         	call	_swap	;wreg free
  6212                           
  6213                           ;shared_logic.c: 72:         start++;
  6214  002030  4A17               	infsnz	reverse@start,f,c
  6215  002032  2A18               	incf	reverse@start+1,f,c
  6216                           
  6217                           ;shared_logic.c: 73:         end--;
  6218  002034  0619               	decf	reverse@end,f,c
  6219  002036  A0D8               	btfss	status,0,c
  6220  002038  061A               	decf	reverse@end+1,f,c
  6221  00203A                     l4957:
  6222                           
  6223                           ;shared_logic.c: 69:     while(start < end)
  6224  00203A  5019               	movf	reverse@end,w,c
  6225  00203C  5C17               	subwf	reverse@start,w,c
  6226  00203E  5018               	movf	reverse@start+1,w,c
  6227  002040  0A80               	xorlw	128
  6228  002042  6E16               	movwf	??_reverse& (0+255),c
  6229  002044  501A               	movf	reverse@end+1,w,c
  6230  002046  0A80               	xorlw	128
  6231  002048  5816               	subwfb	??_reverse& (0+255),w,c
  6232  00204A  B0D8               	btfsc	status,0,c
  6233  00204C  0012               	return	
  6234  00204E  D7E2               	goto	l4951
  6235  002050                     __end_of_reverse:
  6236                           	opt callstack 0
  6237                           
  6238 ;; *************** function _swap *****************
  6239 ;; Defined at:
  6240 ;;		line 57 in file "shared_logic.c"
  6241 ;; Parameters:    Size  Location     Type
  6242 ;;  a               2   12[COMRAM] PTR unsigned char 
  6243 ;;		 -> show_score@number(4), 
  6244 ;;  b               2   14[COMRAM] PTR unsigned char 
  6245 ;;		 -> show_score@number(4), 
  6246 ;; Auto vars:     Size  Location     Type
  6247 ;;  t               1   16[COMRAM] unsigned char 
  6248 ;; Return value:  Size  Location     Type
  6249 ;;                  1    wreg      void 
  6250 ;; Registers used:
  6251 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2
  6252 ;; Tracked objects:
  6253 ;;		On entry : 0/0
  6254 ;;		On exit  : 0/0
  6255 ;;		Unchanged: 0/0
  6256 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6257 ;;      Params:         4       0       0       0       0       0       0
  6258 ;;      Locals:         1       0       0       0       0       0       0
  6259 ;;      Temps:          0       0       0       0       0       0       0
  6260 ;;      Totals:         5       0       0       0       0       0       0
  6261 ;;Total ram usage:        5 bytes
  6262 ;; Hardware stack levels used:    1
  6263 ;; Hardware stack levels required when called:    4
  6264 ;; This function calls:
  6265 ;;		Nothing
  6266 ;; This function is called by:
  6267 ;;		_reverse
  6268 ;; This function uses a non-reentrant model
  6269 ;;
  6270                           
  6271                           	psect	text39
  6272  002272                     __ptext39:
  6273                           	opt callstack 0
  6274  002272                     _swap:
  6275                           	opt callstack 22
  6276                           
  6277                           ;shared_logic.c: 57: void swap(char* a, char* b);shared_logic.c: 58: {;shared_logic.c: 5
      +                          9:     char t = *a;
  6278                           
  6279                           ;incstack = 0
  6280  002272  C00D  FFD9         	movff	swap@a,fsr2l
  6281  002276  C00E  FFDA         	movff	swap@a+1,fsr2h
  6282  00227A  50DF               	movf	indf2,w,c
  6283  00227C  6E11               	movwf	swap@t,c
  6284                           
  6285                           ;shared_logic.c: 60:     *a = *b;
  6286  00227E  C00F  FFD9         	movff	swap@b,fsr2l
  6287  002282  C010  FFDA         	movff	swap@b+1,fsr2h
  6288  002286  C00D  FFE1         	movff	swap@a,fsr1l
  6289  00228A  C00E  FFE2         	movff	swap@a+1,fsr1h
  6290  00228E  CFDF FFE7          	movff	indf2,indf1
  6291                           
  6292                           ;shared_logic.c: 61:     *b = t;
  6293  002292  C00F  FFD9         	movff	swap@b,fsr2l
  6294  002296  C010  FFDA         	movff	swap@b+1,fsr2h
  6295  00229A  C011  FFDF         	movff	swap@t,indf2
  6296  00229E  0012               	return		;funcret
  6297  0022A0                     __end_of_swap:
  6298                           	opt callstack 0
  6299                           
  6300 ;; *************** function ___awmod *****************
  6301 ;; Defined at:
  6302 ;;		line 7 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\awmod.c"
  6303 ;; Parameters:    Size  Location     Type
  6304 ;;  dividend        2   12[COMRAM] int 
  6305 ;;  divisor         2   14[COMRAM] int 
  6306 ;; Auto vars:     Size  Location     Type
  6307 ;;  sign            1   17[COMRAM] unsigned char 
  6308 ;;  counter         1   16[COMRAM] unsigned char 
  6309 ;; Return value:  Size  Location     Type
  6310 ;;                  2   12[COMRAM] int 
  6311 ;; Registers used:
  6312 ;;		wreg, status,2, status,0
  6313 ;; Tracked objects:
  6314 ;;		On entry : 0/0
  6315 ;;		On exit  : 0/0
  6316 ;;		Unchanged: 0/0
  6317 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6318 ;;      Params:         4       0       0       0       0       0       0
  6319 ;;      Locals:         2       0       0       0       0       0       0
  6320 ;;      Temps:          0       0       0       0       0       0       0
  6321 ;;      Totals:         6       0       0       0       0       0       0
  6322 ;;Total ram usage:        6 bytes
  6323 ;; Hardware stack levels used:    1
  6324 ;; Hardware stack levels required when called:    4
  6325 ;; This function calls:
  6326 ;;		Nothing
  6327 ;; This function is called by:
  6328 ;;		_selectNextObject
  6329 ;;		_itoa
  6330 ;; This function uses a non-reentrant model
  6331 ;;
  6332                           
  6333                           	psect	text40
  6334  001D92                     __ptext40:
  6335                           	opt callstack 0
  6336  001D92                     ___awmod:
  6337                           	opt callstack 21
  6338                           
  6339                           ;incstack = 0
  6340  001D92  0E00               	movlw	0
  6341  001D94  6E12               	movwf	___awmod@sign,c
  6342  001D96  AE0E               	btfss	___awmod@dividend+1,7,c
  6343  001D98  D006               	goto	l4485
  6344  001D9A  6C0D               	negf	___awmod@dividend,c
  6345  001D9C  1E0E               	comf	___awmod@dividend+1,f,c
  6346  001D9E  B0D8               	btfsc	status,0,c
  6347  001DA0  2A0E               	incf	___awmod@dividend+1,f,c
  6348  001DA2  0E01               	movlw	1
  6349  001DA4  6E12               	movwf	___awmod@sign,c
  6350  001DA6                     l4485:
  6351  001DA6  AE10               	btfss	___awmod@divisor+1,7,c
  6352  001DA8  D004               	goto	l4489
  6353  001DAA  6C0F               	negf	___awmod@divisor,c
  6354  001DAC  1E10               	comf	___awmod@divisor+1,f,c
  6355  001DAE  B0D8               	btfsc	status,0,c
  6356  001DB0  2A10               	incf	___awmod@divisor+1,f,c
  6357  001DB2                     l4489:
  6358  001DB2  500F               	movf	___awmod@divisor,w,c
  6359  001DB4  1010               	iorwf	___awmod@divisor+1,w,c
  6360  001DB6  B4D8               	btfsc	status,2,c
  6361  001DB8  D018               	goto	l4505
  6362  001DBA  0E01               	movlw	1
  6363  001DBC  6E11               	movwf	___awmod@counter,c
  6364  001DBE  D004               	goto	l4495
  6365  001DC0                     l4493:
  6366  001DC0  90D8               	bcf	status,0,c
  6367  001DC2  360F               	rlcf	___awmod@divisor,f,c
  6368  001DC4  3610               	rlcf	___awmod@divisor+1,f,c
  6369  001DC6  2A11               	incf	___awmod@counter,f,c
  6370  001DC8                     l4495:
  6371  001DC8  AE10               	btfss	___awmod@divisor+1,7,c
  6372  001DCA  D7FA               	goto	l4493
  6373  001DCC                     u4220:
  6374  001DCC  500F               	movf	___awmod@divisor,w,c
  6375  001DCE  5C0D               	subwf	___awmod@dividend,w,c
  6376  001DD0  5010               	movf	___awmod@divisor+1,w,c
  6377  001DD2  580E               	subwfb	___awmod@dividend+1,w,c
  6378  001DD4  A0D8               	btfss	status,0,c
  6379  001DD6  D004               	goto	l4501
  6380  001DD8  500F               	movf	___awmod@divisor,w,c
  6381  001DDA  5E0D               	subwf	___awmod@dividend,f,c
  6382  001DDC  5010               	movf	___awmod@divisor+1,w,c
  6383  001DDE  5A0E               	subwfb	___awmod@dividend+1,f,c
  6384  001DE0                     l4501:
  6385  001DE0  90D8               	bcf	status,0,c
  6386  001DE2  3210               	rrcf	___awmod@divisor+1,f,c
  6387  001DE4  320F               	rrcf	___awmod@divisor,f,c
  6388  001DE6  2E11               	decfsz	___awmod@counter,f,c
  6389  001DE8  D7F1               	goto	u4220
  6390  001DEA                     l4505:
  6391  001DEA  5012               	movf	___awmod@sign,w,c
  6392  001DEC  B4D8               	btfsc	status,2,c
  6393  001DEE  D004               	goto	l4509
  6394  001DF0  6C0D               	negf	___awmod@dividend,c
  6395  001DF2  1E0E               	comf	___awmod@dividend+1,f,c
  6396  001DF4  B0D8               	btfsc	status,0,c
  6397  001DF6  2A0E               	incf	___awmod@dividend+1,f,c
  6398  001DF8                     l4509:
  6399  001DF8  C00D  F00D         	movff	___awmod@dividend,?___awmod
  6400  001DFC  C00E  F00E         	movff	___awmod@dividend+1,?___awmod+1
  6401  001E00  0012               	return		;funcret
  6402  001E02                     __end_of___awmod:
  6403                           	opt callstack 0
  6404                           
  6405 ;; *************** function ___awdiv *****************
  6406 ;; Defined at:
  6407 ;;		line 7 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\awdiv.c"
  6408 ;; Parameters:    Size  Location     Type
  6409 ;;  dividend        2   12[COMRAM] int 
  6410 ;;  divisor         2   14[COMRAM] int 
  6411 ;; Auto vars:     Size  Location     Type
  6412 ;;  quotient        2   18[COMRAM] int 
  6413 ;;  sign            1   17[COMRAM] unsigned char 
  6414 ;;  counter         1   16[COMRAM] unsigned char 
  6415 ;; Return value:  Size  Location     Type
  6416 ;;                  2   12[COMRAM] int 
  6417 ;; Registers used:
  6418 ;;		wreg, status,2, status,0
  6419 ;; Tracked objects:
  6420 ;;		On entry : 0/0
  6421 ;;		On exit  : 0/0
  6422 ;;		Unchanged: 0/0
  6423 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6424 ;;      Params:         4       0       0       0       0       0       0
  6425 ;;      Locals:         4       0       0       0       0       0       0
  6426 ;;      Temps:          0       0       0       0       0       0       0
  6427 ;;      Totals:         8       0       0       0       0       0       0
  6428 ;;Total ram usage:        8 bytes
  6429 ;; Hardware stack levels used:    1
  6430 ;; Hardware stack levels required when called:    4
  6431 ;; This function calls:
  6432 ;;		Nothing
  6433 ;; This function is called by:
  6434 ;;		_itoa
  6435 ;; This function uses a non-reentrant model
  6436 ;;
  6437                           
  6438                           	psect	text41
  6439  001B92                     __ptext41:
  6440                           	opt callstack 0
  6441  001B92                     ___awdiv:
  6442                           	opt callstack 23
  6443                           
  6444                           ;incstack = 0
  6445  001B92  0E00               	movlw	0
  6446  001B94  6E12               	movwf	___awdiv@sign,c
  6447  001B96  AE10               	btfss	___awdiv@divisor+1,7,c
  6448  001B98  D006               	goto	l4967
  6449  001B9A  6C0F               	negf	___awdiv@divisor,c
  6450  001B9C  1E10               	comf	___awdiv@divisor+1,f,c
  6451  001B9E  B0D8               	btfsc	status,0,c
  6452  001BA0  2A10               	incf	___awdiv@divisor+1,f,c
  6453  001BA2  0E01               	movlw	1
  6454  001BA4  6E12               	movwf	___awdiv@sign,c
  6455  001BA6                     l4967:
  6456  001BA6  AE0E               	btfss	___awdiv@dividend+1,7,c
  6457  001BA8  D006               	goto	l4973
  6458  001BAA  6C0D               	negf	___awdiv@dividend,c
  6459  001BAC  1E0E               	comf	___awdiv@dividend+1,f,c
  6460  001BAE  B0D8               	btfsc	status,0,c
  6461  001BB0  2A0E               	incf	___awdiv@dividend+1,f,c
  6462  001BB2  0E01               	movlw	1
  6463  001BB4  1A12               	xorwf	___awdiv@sign,f,c
  6464  001BB6                     l4973:
  6465  001BB6  0E00               	movlw	0
  6466  001BB8  6E14               	movwf	___awdiv@quotient+1,c
  6467  001BBA  0E00               	movlw	0
  6468  001BBC  6E13               	movwf	___awdiv@quotient,c
  6469  001BBE  500F               	movf	___awdiv@divisor,w,c
  6470  001BC0  1010               	iorwf	___awdiv@divisor+1,w,c
  6471  001BC2  B4D8               	btfsc	status,2,c
  6472  001BC4  D01C               	goto	l4995
  6473  001BC6  0E01               	movlw	1
  6474  001BC8  6E11               	movwf	___awdiv@counter,c
  6475  001BCA  D004               	goto	l4981
  6476  001BCC                     l4979:
  6477  001BCC  90D8               	bcf	status,0,c
  6478  001BCE  360F               	rlcf	___awdiv@divisor,f,c
  6479  001BD0  3610               	rlcf	___awdiv@divisor+1,f,c
  6480  001BD2  2A11               	incf	___awdiv@counter,f,c
  6481  001BD4                     l4981:
  6482  001BD4  AE10               	btfss	___awdiv@divisor+1,7,c
  6483  001BD6  D7FA               	goto	l4979
  6484  001BD8                     u4830:
  6485  001BD8  90D8               	bcf	status,0,c
  6486  001BDA  3613               	rlcf	___awdiv@quotient,f,c
  6487  001BDC  3614               	rlcf	___awdiv@quotient+1,f,c
  6488  001BDE  500F               	movf	___awdiv@divisor,w,c
  6489  001BE0  5C0D               	subwf	___awdiv@dividend,w,c
  6490  001BE2  5010               	movf	___awdiv@divisor+1,w,c
  6491  001BE4  580E               	subwfb	___awdiv@dividend+1,w,c
  6492  001BE6  A0D8               	btfss	status,0,c
  6493  001BE8  D005               	goto	l4991
  6494  001BEA  500F               	movf	___awdiv@divisor,w,c
  6495  001BEC  5E0D               	subwf	___awdiv@dividend,f,c
  6496  001BEE  5010               	movf	___awdiv@divisor+1,w,c
  6497  001BF0  5A0E               	subwfb	___awdiv@dividend+1,f,c
  6498  001BF2  8013               	bsf	___awdiv@quotient,0,c
  6499  001BF4                     l4991:
  6500  001BF4  90D8               	bcf	status,0,c
  6501  001BF6  3210               	rrcf	___awdiv@divisor+1,f,c
  6502  001BF8  320F               	rrcf	___awdiv@divisor,f,c
  6503  001BFA  2E11               	decfsz	___awdiv@counter,f,c
  6504  001BFC  D7ED               	goto	u4830
  6505  001BFE                     l4995:
  6506  001BFE  5012               	movf	___awdiv@sign,w,c
  6507  001C00  B4D8               	btfsc	status,2,c
  6508  001C02  D004               	goto	l4999
  6509  001C04  6C13               	negf	___awdiv@quotient,c
  6510  001C06  1E14               	comf	___awdiv@quotient+1,f,c
  6511  001C08  B0D8               	btfsc	status,0,c
  6512  001C0A  2A14               	incf	___awdiv@quotient+1,f,c
  6513  001C0C                     l4999:
  6514  001C0C  C013  F00D         	movff	___awdiv@quotient,?___awdiv
  6515  001C10  C014  F00E         	movff	___awdiv@quotient+1,?___awdiv+1
  6516  001C14  0012               	return		;funcret
  6517  001C16                     __end_of___awdiv:
  6518                           	opt callstack 0
  6519                           
  6520 ;; *************** function _getNumber *****************
  6521 ;; Defined at:
  6522 ;;		line 233 in file "shared_logic.c"
  6523 ;; Parameters:    Size  Location     Type
  6524 ;;  pDigit          1    wreg     unsigned char 
  6525 ;;  pTarget         2   22[COMRAM] PTR unsigned short 
  6526 ;;		 -> show_score@tmpObjectData(16), 
  6527 ;; Auto vars:     Size  Location     Type
  6528 ;;  pDigit          1   24[COMRAM] unsigned char 
  6529 ;; Return value:  Size  Location     Type
  6530 ;;                  1    wreg      void 
  6531 ;; Registers used:
  6532 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6533 ;; Tracked objects:
  6534 ;;		On entry : 0/0
  6535 ;;		On exit  : 0/0
  6536 ;;		Unchanged: 0/0
  6537 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6538 ;;      Params:         2       0       0       0       0       0       0
  6539 ;;      Locals:         1       0       0       0       0       0       0
  6540 ;;      Temps:          0       0       0       0       0       0       0
  6541 ;;      Totals:         3       0       0       0       0       0       0
  6542 ;;Total ram usage:        3 bytes
  6543 ;; Hardware stack levels used:    1
  6544 ;; Hardware stack levels required when called:    5
  6545 ;; This function calls:
  6546 ;;		_memcpy
  6547 ;; This function is called by:
  6548 ;;		_show_score
  6549 ;; This function uses a non-reentrant model
  6550 ;;
  6551                           
  6552                           	psect	text42
  6553  002324                     __ptext42:
  6554                           	opt callstack 0
  6555  002324                     _getNumber:
  6556                           	opt callstack 23
  6557                           
  6558                           ;incstack = 0
  6559                           ;getNumber@pDigit stored from wreg
  6560  002324  6E19               	movwf	getNumber@pDigit,c
  6561                           
  6562                           ;shared_logic.c: 233: void getNumber(uint8_t pDigit, uint16_t * pTarget);shared_logic.c:
      +                           234: {;shared_logic.c: 235:     memcpy(pTarget, Number[pDigit], 16);
  6563  002326  C017  F00D         	movff	getNumber@pTarget,memcpy@dest
  6564  00232A  C018  F00E         	movff	getNumber@pTarget+1,memcpy@dest+1
  6565  00232E  5019               	movf	getNumber@pDigit,w,c
  6566  002330  0D10               	mullw	16
  6567  002332  0E3F               	movlw	low _Number
  6568  002334  24F3               	addwf	prodl,w,c
  6569  002336  6E0F               	movwf	memcpy@src,c
  6570  002338  0E7F               	movlw	high _Number
  6571  00233A  20F4               	addwfc	prodh,w,c
  6572  00233C  6E10               	movwf	memcpy@src+1,c
  6573  00233E  0E00               	movlw	0
  6574  002340  6E12               	movwf	memcpy@n+1,c
  6575  002342  0E10               	movlw	16
  6576  002344  6E11               	movwf	memcpy@n,c
  6577  002346  EC4F  F010         	call	_memcpy	;wreg free
  6578  00234A  0012               	return		;funcret
  6579  00234C                     __end_of_getNumber:
  6580                           	opt callstack 0
  6581                           
  6582 ;; *************** function _memcpy *****************
  6583 ;; Defined at:
  6584 ;;		line 32 in file "shared_logic.c"
  6585 ;; Parameters:    Size  Location     Type
  6586 ;;  dest            2   12[COMRAM] PTR void 
  6587 ;;		 -> show_score@tmpObjectData(16), 
  6588 ;;  src             2   14[COMRAM] PTR const void 
  6589 ;;		 -> Number(160), 
  6590 ;;  n               2   16[COMRAM] unsigned int 
  6591 ;; Auto vars:     Size  Location     Type
  6592 ;;  s               2   20[COMRAM] PTR unsigned char 
  6593 ;;		 -> Number(160), 
  6594 ;;  d               2   18[COMRAM] PTR unsigned char 
  6595 ;;		 -> show_score@tmpObjectData(16), 
  6596 ;; Return value:  Size  Location     Type
  6597 ;;                  2   12[COMRAM] PTR void 
  6598 ;; Registers used:
  6599 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru
  6600 ;; Tracked objects:
  6601 ;;		On entry : 0/0
  6602 ;;		On exit  : 0/0
  6603 ;;		Unchanged: 0/0
  6604 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6605 ;;      Params:         6       0       0       0       0       0       0
  6606 ;;      Locals:         4       0       0       0       0       0       0
  6607 ;;      Temps:          0       0       0       0       0       0       0
  6608 ;;      Totals:        10       0       0       0       0       0       0
  6609 ;;Total ram usage:       10 bytes
  6610 ;; Hardware stack levels used:    1
  6611 ;; Hardware stack levels required when called:    4
  6612 ;; This function calls:
  6613 ;;		Nothing
  6614 ;; This function is called by:
  6615 ;;		_getNumber
  6616 ;; This function uses a non-reentrant model
  6617 ;;
  6618                           
  6619                           	psect	text43
  6620  00209E                     __ptext43:
  6621                           	opt callstack 0
  6622  00209E                     _memcpy:
  6623                           	opt callstack 23
  6624                           
  6625                           ;shared_logic.c: 32: void *memcpy(void *dest, const void *src, size_t n);shared_logic.c:
      +                           33: {;shared_logic.c: 34:     char *d = (char*) dest, *s = (char*) src;
  6626                           
  6627                           ;incstack = 0
  6628  00209E  C00D  F013         	movff	memcpy@dest,memcpy@d
  6629  0020A2  C00E  F014         	movff	memcpy@dest+1,memcpy@d+1
  6630  0020A6  C00F  F015         	movff	memcpy@src,memcpy@s
  6631  0020AA  C010  F016         	movff	memcpy@src+1,memcpy@s+1
  6632                           
  6633                           ;shared_logic.c: 36:     while(n--)
  6634  0020AE  D00F               	goto	l4945
  6635  0020B0                     l4939:
  6636                           
  6637                           ;shared_logic.c: 37:     {;shared_logic.c: 38:         *d++ = *s++;
  6638  0020B0  C015  FFF6         	movff	memcpy@s,tblptrl
  6639  0020B4  C016  FFF7         	movff	memcpy@s+1,tblptrh
  6640  0020B8                     	if	0	;tblptru may be non-zero
  6641  0020B8                     	endif
  6642  0020B8                     	if	0	;tblptru may be non-zero
  6643  0020B8                     	endif
  6644  0020B8  C013  FFD9         	movff	memcpy@d,fsr2l
  6645  0020BC  C014  FFDA         	movff	memcpy@d+1,fsr2h
  6646  0020C0  0008               	tblrd		*
  6647  0020C2  CFF5 FFDF          	movff	tablat,indf2
  6648  0020C6  4A15               	infsnz	memcpy@s,f,c
  6649  0020C8  2A16               	incf	memcpy@s+1,f,c
  6650  0020CA  4A13               	infsnz	memcpy@d,f,c
  6651  0020CC  2A14               	incf	memcpy@d+1,f,c
  6652  0020CE                     l4945:
  6653                           
  6654                           ;shared_logic.c: 36:     while(n--)
  6655  0020CE  0611               	decf	memcpy@n,f,c
  6656  0020D0  A0D8               	btfss	status,0,c
  6657  0020D2  0612               	decf	memcpy@n+1,f,c
  6658  0020D4  2811               	incf	memcpy@n,w,c
  6659  0020D6  E1EC               	bnz	l4939
  6660  0020D8  2812               	incf	memcpy@n+1,w,c
  6661  0020DA  B4D8               	btfsc	status,2,c
  6662  0020DC  0012               	return	
  6663  0020DE  D7E8               	goto	l4939
  6664  0020E0                     __end_of_memcpy:
  6665                           	opt callstack 0
  6666                           
  6667 ;; *************** function _readHighScore *****************
  6668 ;; Defined at:
  6669 ;;		line 238 in file "shared_logic.c"
  6670 ;; Parameters:    Size  Location     Type
  6671 ;;  adress          1    wreg     unsigned char 
  6672 ;; Auto vars:     Size  Location     Type
  6673 ;;  adress          1   14[COMRAM] unsigned char 
  6674 ;;  tmpbyte         1   15[COMRAM] unsigned char 
  6675 ;; Return value:  Size  Location     Type
  6676 ;;                  1    wreg      unsigned char 
  6677 ;; Registers used:
  6678 ;;		wreg, status,2, status,0, cstack
  6679 ;; Tracked objects:
  6680 ;;		On entry : 0/0
  6681 ;;		On exit  : 0/0
  6682 ;;		Unchanged: 0/0
  6683 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6684 ;;      Params:         0       0       0       0       0       0       0
  6685 ;;      Locals:         2       0       0       0       0       0       0
  6686 ;;      Temps:          0       0       0       0       0       0       0
  6687 ;;      Totals:         2       0       0       0       0       0       0
  6688 ;;Total ram usage:        2 bytes
  6689 ;; Hardware stack levels used:    1
  6690 ;; Hardware stack levels required when called:    6
  6691 ;; This function calls:
  6692 ;;		_ReadEEByte
  6693 ;;		_WriteEEByte
  6694 ;; This function is called by:
  6695 ;;		_tetris_main
  6696 ;;		_snake_main
  6697 ;; This function uses a non-reentrant model
  6698 ;;
  6699                           
  6700                           	psect	text44
  6701  00234C                     __ptext44:
  6702                           	opt callstack 0
  6703  00234C                     _readHighScore:
  6704                           	opt callstack 23
  6705                           
  6706                           ;incstack = 0
  6707                           ;readHighScore@adress stored from wreg
  6708  00234C  6E0F               	movwf	readHighScore@adress,c
  6709                           
  6710                           ;shared_logic.c: 238: uint8_t readHighScore(uint8_t adress);shared_logic.c: 239: {;share
      +                          d_logic.c: 240:     uint8_t tmpbyte = ReadEEByte(adress);;
  6711  00234E  500F               	movf	readHighScore@adress,w,c
  6712  002350  ECEB  F012         	call	_ReadEEByte
  6713  002354  6E10               	movwf	readHighScore@tmpbyte,c
  6714                           
  6715                           ;shared_logic.c: 241:     if(tmpbyte == 255)
  6716  002356  2810               	incf	readHighScore@tmpbyte,w,c
  6717  002358  A4D8               	btfss	status,2,c
  6718  00235A  D002               	goto	l541
  6719                           
  6720                           ;shared_logic.c: 242:     {;shared_logic.c: 243:         tmpbyte = 0;
  6721  00235C  0E00               	movlw	0
  6722  00235E  6E10               	movwf	readHighScore@tmpbyte,c
  6723  002360                     l541:
  6724                           
  6725                           ;shared_logic.c: 245:     if(tmpbyte == 0)
  6726  002360  5010               	movf	readHighScore@tmpbyte,w,c
  6727  002362  A4D8               	btfss	status,2,c
  6728  002364  D005               	goto	l5359
  6729                           
  6730                           ;shared_logic.c: 246:     {;shared_logic.c: 247:         WriteEEByte(adress, 0);
  6731  002366  0E00               	movlw	0
  6732  002368  6E0D               	movwf	WriteEEByte@data,c
  6733  00236A  500F               	movf	readHighScore@adress,w,c
  6734  00236C  EC21  F011         	call	_WriteEEByte
  6735  002370                     l5359:
  6736                           
  6737                           ;shared_logic.c: 249:     return tmpbyte;
  6738  002370  5010               	movf	readHighScore@tmpbyte,w,c
  6739  002372  0012               	return		;funcret
  6740  002374                     __end_of_readHighScore:
  6741                           	opt callstack 0
  6742                           
  6743 ;; *************** function _WriteEEByte *****************
  6744 ;; Defined at:
  6745 ;;		line 15 in file "EEPROM.c"
  6746 ;; Parameters:    Size  Location     Type
  6747 ;;  address         1    wreg     unsigned char 
  6748 ;;  data            1   12[COMRAM] unsigned char 
  6749 ;; Auto vars:     Size  Location     Type
  6750 ;;  address         1   13[COMRAM] unsigned char 
  6751 ;; Return value:  Size  Location     Type
  6752 ;;                  1    wreg      void 
  6753 ;; Registers used:
  6754 ;;		wreg, status,2, cstack
  6755 ;; Tracked objects:
  6756 ;;		On entry : 0/0
  6757 ;;		On exit  : 0/0
  6758 ;;		Unchanged: 0/0
  6759 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6760 ;;      Params:         1       0       0       0       0       0       0
  6761 ;;      Locals:         1       0       0       0       0       0       0
  6762 ;;      Temps:          0       0       0       0       0       0       0
  6763 ;;      Totals:         2       0       0       0       0       0       0
  6764 ;;Total ram usage:        2 bytes
  6765 ;; Hardware stack levels used:    1
  6766 ;; Hardware stack levels required when called:    5
  6767 ;; This function calls:
  6768 ;;		_waitForInterrupt
  6769 ;; This function is called by:
  6770 ;;		_readHighScore
  6771 ;;		_writeHighScore
  6772 ;; This function uses a non-reentrant model
  6773 ;;
  6774                           
  6775                           	psect	text45
  6776  002242                     __ptext45:
  6777                           	opt callstack 0
  6778  002242                     _WriteEEByte:
  6779                           	opt callstack 23
  6780                           
  6781                           ;incstack = 0
  6782                           ;WriteEEByte@address stored from wreg
  6783  002242  6E0E               	movwf	WriteEEByte@address,c
  6784  002244                     l108:
  6785                           
  6786                           ;EEPROM.c: 18:         EECON1bits.WRERR = 0;
  6787  002244  96A6               	bcf	4006,3,c	;volsfr
  6788                           
  6789                           ;EEPROM.c: 19:         EECON1bits.WREN=1;
  6790  002246  84A6               	bsf	4006,2,c	;volsfr
  6791                           
  6792                           ;EEPROM.c: 20:         EEADR=address;
  6793  002248  C00E  FFA9         	movff	WriteEEByte@address,4009	;volatile
  6794                           
  6795                           ;EEPROM.c: 21:         EEDATA=data;
  6796  00224C  C00D  FFA8         	movff	WriteEEByte@data,4008	;volatile
  6797                           
  6798                           ;EEPROM.c: 22:         EECON1bits.EEPGD=0;
  6799  002250  9EA6               	bcf	4006,7,c	;volsfr
  6800                           
  6801                           ;EEPROM.c: 23:         EECON1bits.CFGS=0;
  6802  002252  9CA6               	bcf	4006,6,c	;volsfr
  6803                           
  6804                           ;EEPROM.c: 24:         waitForInterrupt();
  6805  002254  EC02  F013         	call	_waitForInterrupt	;wreg free
  6806                           
  6807                           ;EEPROM.c: 25:         INTCONbits.GIE=0;
  6808  002258  9EF2               	bcf	4082,7,c	;volatile
  6809                           
  6810                           ;EEPROM.c: 27:         EECON2=0x55;
  6811  00225A  0E55               	movlw	85
  6812  00225C  6EA7               	movwf	4007,c	;volsfr
  6813                           
  6814                           ;EEPROM.c: 28:         EECON2=0xAA;
  6815  00225E  0EAA               	movlw	170
  6816  002260  6EA7               	movwf	4007,c	;volsfr
  6817                           
  6818                           ;EEPROM.c: 29:         EECON1bits.WR=1;
  6819  002262  82A6               	bsf	4006,1,c	;volsfr
  6820                           
  6821                           ;EEPROM.c: 31:         INTCONbits.GIE=1;
  6822  002264  8EF2               	bsf	4082,7,c	;volatile
  6823  002266                     l109:
  6824  002266  B2A6               	btfsc	4006,1,c	;volsfr
  6825  002268  D7FE               	goto	l109
  6826                           
  6827                           ;EEPROM.c: 33:     } while (EECON1bits.WRERR == 1);
  6828  00226A  B6A6               	btfsc	4006,3,c	;volsfr
  6829  00226C  D7EB               	goto	l108
  6830                           
  6831                           ;EEPROM.c: 34:     EECON1bits.WREN=0;
  6832  00226E  94A6               	bcf	4006,2,c	;volsfr
  6833  002270  0012               	return		;funcret
  6834  002272                     __end_of_WriteEEByte:
  6835                           	opt callstack 0
  6836                           
  6837 ;; *************** function _ReadEEByte *****************
  6838 ;; Defined at:
  6839 ;;		line 5 in file "EEPROM.c"
  6840 ;; Parameters:    Size  Location     Type
  6841 ;;  address         1    wreg     unsigned char 
  6842 ;; Auto vars:     Size  Location     Type
  6843 ;;  address         1   12[COMRAM] unsigned char 
  6844 ;; Return value:  Size  Location     Type
  6845 ;;                  1    wreg      unsigned char 
  6846 ;; Registers used:
  6847 ;;		wreg, status,2
  6848 ;; Tracked objects:
  6849 ;;		On entry : 0/0
  6850 ;;		On exit  : 0/0
  6851 ;;		Unchanged: 0/0
  6852 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6853 ;;      Params:         0       0       0       0       0       0       0
  6854 ;;      Locals:         1       0       0       0       0       0       0
  6855 ;;      Temps:          0       0       0       0       0       0       0
  6856 ;;      Totals:         1       0       0       0       0       0       0
  6857 ;;Total ram usage:        1 bytes
  6858 ;; Hardware stack levels used:    1
  6859 ;; Hardware stack levels required when called:    4
  6860 ;; This function calls:
  6861 ;;		Nothing
  6862 ;; This function is called by:
  6863 ;;		_readHighScore
  6864 ;; This function uses a non-reentrant model
  6865 ;;
  6866                           
  6867                           	psect	text46
  6868  0025D6                     __ptext46:
  6869                           	opt callstack 0
  6870  0025D6                     _ReadEEByte:
  6871                           	opt callstack 24
  6872                           
  6873                           ;incstack = 0
  6874                           ;ReadEEByte@address stored from wreg
  6875  0025D6  6E0D               	movwf	ReadEEByte@address,c
  6876                           
  6877                           ;EEPROM.c: 5: uint8_t ReadEEByte(uint8_t address);EEPROM.c: 6: {;EEPROM.c: 7: EEADR=addr
      +                          ess;
  6878  0025D8  C00D  FFA9         	movff	ReadEEByte@address,4009	;volatile
  6879                           
  6880                           ;EEPROM.c: 8: EECON1bits.EEPGD=0;
  6881  0025DC  9EA6               	bcf	4006,7,c	;volsfr
  6882                           
  6883                           ;EEPROM.c: 9: EECON1bits.CFGS=0;
  6884  0025DE  9CA6               	bcf	4006,6,c	;volsfr
  6885                           
  6886                           ;EEPROM.c: 10: EECON1bits.RD=1;
  6887  0025E0  80A6               	bsf	4006,0,c	;volsfr
  6888                           
  6889                           ;EEPROM.c: 11: return EEDATA;
  6890  0025E2  50A8               	movf	4008,w,c	;volatile
  6891  0025E4  0012               	return		;funcret
  6892  0025E6                     __end_of_ReadEEByte:
  6893                           	opt callstack 0
  6894                           
  6895 ;; *************** function _inistialize_snake *****************
  6896 ;; Defined at:
  6897 ;;		line 187 in file "snake.c"
  6898 ;; Parameters:    Size  Location     Type
  6899 ;;  snakeLength     2   34[COMRAM] PTR unsigned char 
  6900 ;;		 -> snake_main@snakeLength(1), 
  6901 ;;  positions       2   36[COMRAM] PTR struct position
  6902 ;;		 -> snake_main@positions(256), 
  6903 ;;  berry           2   38[COMRAM] PTR struct position
  6904 ;;		 -> snake_main@berry(2), 
  6905 ;; Auto vars:     Size  Location     Type
  6906 ;;  i               1   42[COMRAM] unsigned char 
  6907 ;; Return value:  Size  Location     Type
  6908 ;;                  1    wreg      void 
  6909 ;; Registers used:
  6910 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6911 ;; Tracked objects:
  6912 ;;		On entry : 0/0
  6913 ;;		On exit  : 0/0
  6914 ;;		Unchanged: 0/0
  6915 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6916 ;;      Params:         6       0       0       0       0       0       0
  6917 ;;      Locals:         1       0       0       0       0       0       0
  6918 ;;      Temps:          2       0       0       0       0       0       0
  6919 ;;      Totals:         9       0       0       0       0       0       0
  6920 ;;Total ram usage:        9 bytes
  6921 ;; Hardware stack levels used:    1
  6922 ;; Hardware stack levels required when called:    7
  6923 ;; This function calls:
  6924 ;;		_CreateBerry
  6925 ;; This function is called by:
  6926 ;;		_snake_main
  6927 ;; This function uses a non-reentrant model
  6928 ;;
  6929                           
  6930                           	psect	text47
  6931  0019F8                     __ptext47:
  6932                           	opt callstack 0
  6933  0019F8                     _inistialize_snake:
  6934                           	opt callstack 22
  6935                           
  6936                           ;snake.c: 187: void inistialize_snake(uint8_t *snakeLength, struct position *positions, 
      +                          struct position *berry);snake.c: 188: {;snake.c: 189:     moveSnake = 0;
  6937                           
  6938                           ;incstack = 0
  6939  0019F8  0E00               	movlw	0
  6940  0019FA  6E69               	movwf	_moveSnake,c	;volatile
  6941                           
  6942                           ;snake.c: 190:     for(uint8_t i = 0; i < 4; i++)
  6943  0019FC  0E00               	movlw	0
  6944  0019FE  6E2B               	movwf	inistialize_snake@i,c
  6945  001A00                     l5509:
  6946                           
  6947                           ;snake.c: 191:     {;snake.c: 192:         positions[i].y = 3;
  6948  001A00  502B               	movf	inistialize_snake@i,w,c
  6949  001A02  0D02               	mullw	2
  6950  001A04  C025  F029         	movff	inistialize_snake@positions,??_inistialize_snake
  6951  001A08  C026  F02A         	movff	inistialize_snake@positions+1,??_inistialize_snake+1
  6952  001A0C  50F3               	movf	prodl,w,c
  6953  001A0E  2629               	addwf	??_inistialize_snake,f,c
  6954  001A10  50F4               	movf	prodh,w,c
  6955  001A12  222A               	addwfc	??_inistialize_snake+1,f,c
  6956  001A14  0E01               	movlw	1
  6957  001A16  2429               	addwf	??_inistialize_snake,w,c
  6958  001A18  6ED9               	movwf	fsr2l,c
  6959  001A1A  0E00               	movlw	0
  6960  001A1C  202A               	addwfc	??_inistialize_snake+1,w,c
  6961  001A1E  6EDA               	movwf	fsr2h,c
  6962  001A20  0E03               	movlw	3
  6963  001A22  6EDF               	movwf	indf2,c
  6964                           
  6965                           ;snake.c: 193:         positions[i].x = 4 - i;
  6966  001A24  502B               	movf	inistialize_snake@i,w,c
  6967  001A26  0D02               	mullw	2
  6968  001A28  CFF3 F029          	movff	prodl,??_inistialize_snake
  6969  001A2C  CFF4 F02A          	movff	prodh,??_inistialize_snake+1
  6970  001A30  5029               	movf	??_inistialize_snake,w,c
  6971  001A32  2425               	addwf	inistialize_snake@positions,w,c
  6972  001A34  6ED9               	movwf	fsr2l,c
  6973  001A36  502A               	movf	??_inistialize_snake+1,w,c
  6974  001A38  2026               	addwfc	inistialize_snake@positions+1,w,c
  6975  001A3A  6EDA               	movwf	fsr2h,c
  6976  001A3C  502B               	movf	inistialize_snake@i,w,c
  6977  001A3E  0804               	sublw	4
  6978  001A40  6EDF               	movwf	indf2,c
  6979                           
  6980                           ;snake.c: 194:     }
  6981  001A42  2A2B               	incf	inistialize_snake@i,f,c
  6982  001A44  0E03               	movlw	3
  6983  001A46  642B               	cpfsgt	inistialize_snake@i,c
  6984  001A48  D7DB               	goto	l5509
  6985                           
  6986                           ;snake.c: 195:     positions[0].y = 3;
  6987  001A4A  EE20 F001          	lfsr	2,1
  6988  001A4E  5025               	movf	inistialize_snake@positions,w,c
  6989  001A50  26D9               	addwf	fsr2l,f,c
  6990  001A52  5026               	movf	inistialize_snake@positions+1,w,c
  6991  001A54  22DA               	addwfc	fsr2h,f,c
  6992  001A56  0E03               	movlw	3
  6993  001A58  6EDF               	movwf	indf2,c
  6994                           
  6995                           ;snake.c: 196:     positions[0].x = 3;
  6996  001A5A  C025  FFD9         	movff	inistialize_snake@positions,fsr2l
  6997  001A5E  C026  FFDA         	movff	inistialize_snake@positions+1,fsr2h
  6998  001A62  0E03               	movlw	3
  6999  001A64  6EDF               	movwf	indf2,c
  7000                           
  7001                           ;snake.c: 197:     CreateBerry(snakeLength, positions, berry);
  7002  001A66  C023  F017         	movff	inistialize_snake@snakeLength,CreateBerry@snakeLength
  7003  001A6A  C024  F018         	movff	inistialize_snake@snakeLength+1,CreateBerry@snakeLength+1
  7004  001A6E  C025  F019         	movff	inistialize_snake@positions,CreateBerry@positions
  7005  001A72  C026  F01A         	movff	inistialize_snake@positions+1,CreateBerry@positions+1
  7006  001A76  C027  F01B         	movff	inistialize_snake@berry,CreateBerry@berry
  7007  001A7A  C028  F01C         	movff	inistialize_snake@berry+1,CreateBerry@berry+1
  7008  001A7E  ECD1  F00B         	call	_CreateBerry	;wreg free
  7009  001A82  0012               	return		;funcret
  7010  001A84                     __end_of_inistialize_snake:
  7011                           	opt callstack 0
  7012                           
  7013 ;; *************** function _aibuttons *****************
  7014 ;; Defined at:
  7015 ;;		line 220 in file "snake.c"
  7016 ;; Parameters:    Size  Location     Type
  7017 ;;  direction       2   12[COMRAM] PTR unsigned char 
  7018 ;;		 -> snake_main@direction(1), 
  7019 ;;  positions       2   14[COMRAM] PTR struct position
  7020 ;;		 -> snake_main@positions(256), 
  7021 ;; Auto vars:     Size  Location     Type
  7022 ;;		None
  7023 ;; Return value:  Size  Location     Type
  7024 ;;                  1    wreg      void 
  7025 ;; Registers used:
  7026 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  7027 ;; Tracked objects:
  7028 ;;		On entry : 0/0
  7029 ;;		On exit  : 0/0
  7030 ;;		Unchanged: 0/0
  7031 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7032 ;;      Params:         4       0       0       0       0       0       0
  7033 ;;      Locals:         0       0       0       0       0       0       0
  7034 ;;      Temps:          6       0       0       0       0       0       0
  7035 ;;      Totals:        10       0       0       0       0       0       0
  7036 ;;Total ram usage:       10 bytes
  7037 ;; Hardware stack levels used:    1
  7038 ;; Hardware stack levels required when called:    4
  7039 ;; This function calls:
  7040 ;;		Nothing
  7041 ;; This function is called by:
  7042 ;;		_snake_main
  7043 ;; This function uses a non-reentrant model
  7044 ;;
  7045                           
  7046                           	psect	text48
  7047  001038                     __ptext48:
  7048                           	opt callstack 0
  7049  001038                     _aibuttons:
  7050                           	opt callstack 25
  7051                           
  7052                           ;snake.c: 220: void aibuttons(uint8_t *direction, struct position *positions);snake.c: 2
      +                          21: {;snake.c: 222:     if(*direction == 3)
  7053                           
  7054                           ;incstack = 0
  7055  001038  C00D  FFD9         	movff	aibuttons@direction,fsr2l
  7056  00103C  C00E  FFDA         	movff	aibuttons@direction+1,fsr2h
  7057  001040  0E03               	movlw	3
  7058  001042  18DE               	xorwf	postinc2,w,c
  7059  001044  A4D8               	btfss	status,2,c
  7060  001046  D05D               	goto	l397
  7061                           
  7062                           ;snake.c: 223:     {;snake.c: 224:         if(positions[2].x == positions[1].x + 1 || po
      +                          sitions[2].x == positions[1].x - 7)
  7063  001048  EE20 F004          	lfsr	2,4
  7064  00104C  500F               	movf	aibuttons@positions,w,c
  7065  00104E  26D9               	addwf	fsr2l,f,c
  7066  001050  5010               	movf	aibuttons@positions+1,w,c
  7067  001052  22DA               	addwfc	fsr2h,f,c
  7068  001054  50DF               	movf	indf2,w,c
  7069  001056  6E11               	movwf	??_aibuttons& (0+255),c
  7070  001058  6A12               	clrf	(??_aibuttons+1)& (0+255),c
  7071  00105A  EE20 F002          	lfsr	2,2
  7072  00105E  500F               	movf	aibuttons@positions,w,c
  7073  001060  26D9               	addwf	fsr2l,f,c
  7074  001062  5010               	movf	aibuttons@positions+1,w,c
  7075  001064  22DA               	addwfc	fsr2h,f,c
  7076  001066  50DF               	movf	indf2,w,c
  7077  001068  6E13               	movwf	(??_aibuttons+2)& (0+255),c
  7078  00106A  6A14               	clrf	(??_aibuttons+3)& (0+255),c
  7079  00106C  0E01               	movlw	1
  7080  00106E  2613               	addwf	??_aibuttons+2,f,c
  7081  001070  0E00               	movlw	0
  7082  001072  2214               	addwfc	??_aibuttons+3,f,c
  7083  001074  5011               	movf	??_aibuttons,w,c
  7084  001076  1813               	xorwf	??_aibuttons+2,w,c
  7085  001078  E104               	bnz	u3680
  7086  00107A  5012               	movf	??_aibuttons+1,w,c
  7087  00107C  1814               	xorwf	??_aibuttons+3,w,c
  7088  00107E  B4D8               	btfsc	status,2,c
  7089  001080  D021               	goto	u3690
  7090  001082                     u3680:
  7091  001082  EE20 F004          	lfsr	2,4
  7092  001086  500F               	movf	aibuttons@positions,w,c
  7093  001088  26D9               	addwf	fsr2l,f,c
  7094  00108A  5010               	movf	aibuttons@positions+1,w,c
  7095  00108C  22DA               	addwfc	fsr2h,f,c
  7096  00108E  50DF               	movf	indf2,w,c
  7097  001090  6E11               	movwf	??_aibuttons& (0+255),c
  7098  001092  6A12               	clrf	(??_aibuttons+1)& (0+255),c
  7099  001094  0EF9               	movlw	249
  7100  001096  6E13               	movwf	(??_aibuttons+2)& (0+255),c
  7101  001098  0EFF               	movlw	255
  7102  00109A  6E14               	movwf	(??_aibuttons+3)& (0+255),c
  7103  00109C  EE20 F002          	lfsr	2,2
  7104  0010A0  500F               	movf	aibuttons@positions,w,c
  7105  0010A2  26D9               	addwf	fsr2l,f,c
  7106  0010A4  5010               	movf	aibuttons@positions+1,w,c
  7107  0010A6  22DA               	addwfc	fsr2h,f,c
  7108  0010A8  50DF               	movf	indf2,w,c
  7109  0010AA  6E15               	movwf	(??_aibuttons+4)& (0+255),c
  7110  0010AC  6A16               	clrf	(??_aibuttons+5)& (0+255),c
  7111  0010AE  5013               	movf	??_aibuttons+2,w,c
  7112  0010B0  2615               	addwf	??_aibuttons+4,f,c
  7113  0010B2  5014               	movf	??_aibuttons+3,w,c
  7114  0010B4  2216               	addwfc	??_aibuttons+5,f,c
  7115  0010B6  5011               	movf	??_aibuttons,w,c
  7116  0010B8  1815               	xorwf	??_aibuttons+4,w,c
  7117  0010BA  E123               	bnz	l4109
  7118  0010BC  5012               	movf	??_aibuttons+1,w,c
  7119  0010BE  1816               	xorwf	??_aibuttons+5,w,c
  7120  0010C0  A4D8               	btfss	status,2,c
  7121  0010C2  D01F               	goto	l397
  7122  0010C4                     u3690:
  7123                           
  7124                           ;snake.c: 225:         {;snake.c: 226:             if(positions[0].y == 15)
  7125  0010C4  EE20 F001          	lfsr	2,1
  7126  0010C8  500F               	movf	aibuttons@positions,w,c
  7127  0010CA  26D9               	addwf	fsr2l,f,c
  7128  0010CC  5010               	movf	aibuttons@positions+1,w,c
  7129  0010CE  22DA               	addwfc	fsr2h,f,c
  7130  0010D0  0E0F               	movlw	15
  7131  0010D2  18DE               	xorwf	postinc2,w,c
  7132  0010D4  A4D8               	btfss	status,2,c
  7133  0010D6  D006               	goto	l4105
  7134                           
  7135                           ;snake.c: 227:             {;snake.c: 228:                 *direction = 0;
  7136  0010D8  C00D  FFD9         	movff	aibuttons@direction,fsr2l
  7137  0010DC  C00E  FFDA         	movff	aibuttons@direction+1,fsr2h
  7138  0010E0  0E00               	movlw	0
  7139  0010E2  D00E               	goto	L3
  7140  0010E4                     l4105:
  7141  0010E4  EE20 F001          	lfsr	2,1
  7142  0010E8  500F               	movf	aibuttons@positions,w,c
  7143  0010EA  26D9               	addwf	fsr2l,f,c
  7144  0010EC  5010               	movf	aibuttons@positions+1,w,c
  7145  0010EE  22DA               	addwfc	fsr2h,f,c
  7146  0010F0  50DF               	movf	indf2,w,c
  7147  0010F2  A4D8               	btfss	status,2,c
  7148  0010F4  D006               	goto	l397
  7149                           
  7150                           ;snake.c: 231:             {;snake.c: 232:                 *direction = 2;
  7151  0010F6  C00D  FFD9         	movff	aibuttons@direction,fsr2l
  7152  0010FA  C00E  FFDA         	movff	aibuttons@direction+1,fsr2h
  7153  0010FE  0E02               	movlw	2
  7154  001100                     L3:
  7155  001100  6EDF               	movwf	indf2,c
  7156  001102                     l397:
  7157  001102                     l4109:
  7158                           
  7159                           ;snake.c: 236:     if(*direction == 0)
  7160  001102  C00D  FFD9         	movff	aibuttons@direction,fsr2l
  7161  001106  C00E  FFDA         	movff	aibuttons@direction+1,fsr2h
  7162  00110A  50DF               	movf	indf2,w,c
  7163  00110C  A4D8               	btfss	status,2,c
  7164  00110E  D00F               	goto	l4115
  7165                           
  7166                           ;snake.c: 237:     {;snake.c: 238:         if(positions[0].y == 0)
  7167  001110  EE20 F001          	lfsr	2,1
  7168  001114  500F               	movf	aibuttons@positions,w,c
  7169  001116  26D9               	addwf	fsr2l,f,c
  7170  001118  5010               	movf	aibuttons@positions+1,w,c
  7171  00111A  22DA               	addwfc	fsr2h,f,c
  7172  00111C  50DF               	movf	indf2,w,c
  7173  00111E  A4D8               	btfss	status,2,c
  7174  001120  D006               	goto	l4115
  7175                           
  7176                           ;snake.c: 239:         {;snake.c: 240:             *direction = 3;
  7177  001122  C00D  FFD9         	movff	aibuttons@direction,fsr2l
  7178  001126  C00E  FFDA         	movff	aibuttons@direction+1,fsr2h
  7179  00112A  0E03               	movlw	3
  7180  00112C  6EDF               	movwf	indf2,c
  7181  00112E                     l4115:
  7182                           
  7183                           ;snake.c: 243:     if(*direction == 2)
  7184  00112E  C00D  FFD9         	movff	aibuttons@direction,fsr2l
  7185  001132  C00E  FFDA         	movff	aibuttons@direction+1,fsr2h
  7186  001136  0E02               	movlw	2
  7187  001138  18DE               	xorwf	postinc2,w,c
  7188  00113A  A4D8               	btfss	status,2,c
  7189  00113C  0012               	return	
  7190                           
  7191                           ;snake.c: 244:     {;snake.c: 245:         if(positions[0].y == 15)
  7192  00113E  EE20 F001          	lfsr	2,1
  7193  001142  500F               	movf	aibuttons@positions,w,c
  7194  001144  26D9               	addwf	fsr2l,f,c
  7195  001146  5010               	movf	aibuttons@positions+1,w,c
  7196  001148  22DA               	addwfc	fsr2h,f,c
  7197  00114A  0E0F               	movlw	15
  7198  00114C  18DE               	xorwf	postinc2,w,c
  7199  00114E  A4D8               	btfss	status,2,c
  7200  001150  0012               	return	
  7201                           
  7202                           ;snake.c: 246:         {;snake.c: 247:             *direction = 3;
  7203  001152  C00D  FFD9         	movff	aibuttons@direction,fsr2l
  7204  001156  C00E  FFDA         	movff	aibuttons@direction+1,fsr2h
  7205  00115A  0E03               	movlw	3
  7206  00115C  6EDF               	movwf	indf2,c
  7207  00115E  0012               	return		;funcret
  7208  001160                     __end_of_aibuttons:
  7209                           	opt callstack 0
  7210                           
  7211 ;; *************** function _MoveSnakes *****************
  7212 ;; Defined at:
  7213 ;;		line 125 in file "snake.c"
  7214 ;; Parameters:    Size  Location     Type
  7215 ;;  snakeLength     2   56[COMRAM] PTR unsigned char 
  7216 ;;		 -> snake_main@snakeLength(1), 
  7217 ;;  EndOfGame       2   58[COMRAM] PTR _Bool 
  7218 ;;		 -> snake_main@EndOfGame(1), 
  7219 ;;  direction       2   60[COMRAM] PTR unsigned char 
  7220 ;;		 -> snake_main@direction(1), 
  7221 ;;  previous_dir    2   62[COMRAM] PTR unsigned char 
  7222 ;;		 -> snake_main@previous_direction(1), 
  7223 ;;  positions       2   64[COMRAM] PTR struct position
  7224 ;;		 -> snake_main@positions(256), 
  7225 ;;  berry           2   66[COMRAM] PTR struct position
  7226 ;;		 -> snake_main@berry(2), 
  7227 ;; Auto vars:     Size  Location     Type
  7228 ;;  i               1   76[COMRAM] unsigned char 
  7229 ;;  i               1   77[COMRAM] unsigned char 
  7230 ;; Return value:  Size  Location     Type
  7231 ;;                  1    wreg      void 
  7232 ;; Registers used:
  7233 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7234 ;; Tracked objects:
  7235 ;;		On entry : 0/0
  7236 ;;		On exit  : 0/0
  7237 ;;		Unchanged: 0/0
  7238 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7239 ;;      Params:        12       0       0       0       0       0       0
  7240 ;;      Locals:         2       0       0       0       0       0       0
  7241 ;;      Temps:          8       0       0       0       0       0       0
  7242 ;;      Totals:        22       0       0       0       0       0       0
  7243 ;;Total ram usage:       22 bytes
  7244 ;; Hardware stack levels used:    1
  7245 ;; Hardware stack levels required when called:    8
  7246 ;; This function calls:
  7247 ;;		_CreateBerry
  7248 ;;		_SnakeGraph
  7249 ;; This function is called by:
  7250 ;;		_snake_main
  7251 ;; This function uses a non-reentrant model
  7252 ;;
  7253                           
  7254                           	psect	text49
  7255  000012                     __ptext49:
  7256                           	opt callstack 0
  7257  000012                     _MoveSnakes:
  7258                           	opt callstack 21
  7259                           
  7260                           ;snake.c: 125: void MoveSnakes(uint8_t *snakeLength, _Bool *EndOfGame, uint8_t *directio
      +                          n, uint8_t *previous_direction, struct position *positions, struct position *berry);snak
      +                          e.c: 126: {;snake.c: 127:     switch(*direction)
  7261                           
  7262                           ;incstack = 0
  7263  000012  D09D               	goto	l5469
  7264  000014                     l5431:
  7265                           
  7266                           ;snake.c: 130:             positions[0].y = positions[0].y - 1;
  7267  000014  EE20 F001          	lfsr	2,1
  7268  000018  5041               	movf	MoveSnakes@positions,w,c
  7269  00001A  26D9               	addwf	fsr2l,f,c
  7270  00001C  5042               	movf	MoveSnakes@positions+1,w,c
  7271  00001E  22DA               	addwfc	fsr2h,f,c
  7272  000020  EE10 F001          	lfsr	1,1
  7273  000024  5041               	movf	MoveSnakes@positions,w,c
  7274  000026  26E1               	addwf	fsr1l,f,c
  7275  000028  5042               	movf	MoveSnakes@positions+1,w,c
  7276  00002A  22E2               	addwfc	fsr1h,f,c
  7277  00002C  50E7               	movf	indf1,w,c
  7278  00002E  6E45               	movwf	??_MoveSnakes& (0+255),c
  7279  000030  0445               	decf	??_MoveSnakes,w,c
  7280  000032  6EDF               	movwf	indf2,c
  7281                           
  7282                           ;snake.c: 131:             *previous_direction = 0;
  7283  000034  C03F  FFD9         	movff	MoveSnakes@previous_direction,fsr2l
  7284  000038  C040  FFDA         	movff	MoveSnakes@previous_direction+1,fsr2h
  7285  00003C  0E00               	movlw	0
  7286  00003E  6EDF               	movwf	indf2,c
  7287                           
  7288                           ;snake.c: 132:             if(positions[0].y >= 200)
  7289  000040  EE20 F001          	lfsr	2,1
  7290  000044  5041               	movf	MoveSnakes@positions,w,c
  7291  000046  26D9               	addwf	fsr2l,f,c
  7292  000048  5042               	movf	MoveSnakes@positions+1,w,c
  7293  00004A  22DA               	addwfc	fsr2h,f,c
  7294  00004C  0EC7               	movlw	199
  7295  00004E  64DF               	cpfsgt	indf2,c
  7296  000050  D096               	goto	l5471
  7297                           
  7298                           ;snake.c: 133:             {;snake.c: 134:                 positions[0].y = 15;
  7299  000052  EE20 F001          	lfsr	2,1
  7300  000056  5041               	movf	MoveSnakes@positions,w,c
  7301  000058  26D9               	addwf	fsr2l,f,c
  7302  00005A  5042               	movf	MoveSnakes@positions+1,w,c
  7303  00005C  22DA               	addwfc	fsr2h,f,c
  7304  00005E  0E0F               	movlw	15
  7305  000060  D025               	goto	L4
  7306  000062                     l5439:
  7307                           
  7308                           ;snake.c: 138:             positions[0].x = positions[0].x + 1;
  7309  000062  C041  FFD9         	movff	MoveSnakes@positions,fsr2l
  7310  000066  C042  FFDA         	movff	MoveSnakes@positions+1,fsr2h
  7311  00006A  50DF               	movf	indf2,w,c
  7312  00006C  6E45               	movwf	??_MoveSnakes& (0+255),c
  7313  00006E  2845               	incf	??_MoveSnakes,w,c
  7314  000070  C041  FFD9         	movff	MoveSnakes@positions,fsr2l
  7315  000074  C042  FFDA         	movff	MoveSnakes@positions+1,fsr2h
  7316  000078  6EDF               	movwf	indf2,c
  7317                           
  7318                           ;snake.c: 139:             *previous_direction = 1;
  7319  00007A  C03F  FFD9         	movff	MoveSnakes@previous_direction,fsr2l
  7320  00007E  C040  FFDA         	movff	MoveSnakes@previous_direction+1,fsr2h
  7321  000082  0E01               	movlw	1
  7322  000084  6EDF               	movwf	indf2,c
  7323                           
  7324                           ;snake.c: 140:             if(positions[0].x > 7 & positions[0].x < 200)
  7325  000086  C041  FFD9         	movff	MoveSnakes@positions,fsr2l
  7326  00008A  C042  FFDA         	movff	MoveSnakes@positions+1,fsr2h
  7327  00008E  0E07               	movlw	7
  7328  000090  64DF               	cpfsgt	indf2,c
  7329  000092  D075               	goto	l5471
  7330  000094  C041  FFD9         	movff	MoveSnakes@positions,fsr2l
  7331  000098  C042  FFDA         	movff	MoveSnakes@positions+1,fsr2h
  7332  00009C  0EC8               	movlw	200
  7333  00009E  60DF               	cpfslt	indf2,c
  7334  0000A0  D06E               	goto	l5471
  7335                           
  7336                           ;snake.c: 141:             {;snake.c: 142:                 positions[0].x = 0;
  7337  0000A2  C041  FFD9         	movff	MoveSnakes@positions,fsr2l
  7338  0000A6  C042  FFDA         	movff	MoveSnakes@positions+1,fsr2h
  7339  0000AA  D030               	goto	L5
  7340  0000AC                     L4:
  7341  0000AC  6EDF               	movwf	indf2,c
  7342  0000AE  D067               	goto	l5471
  7343  0000B0                     l5449:
  7344                           
  7345                           ;snake.c: 146:             positions[0].y = positions[0].y + 1;
  7346  0000B0  EE20 F001          	lfsr	2,1
  7347  0000B4  5041               	movf	MoveSnakes@positions,w,c
  7348  0000B6  26D9               	addwf	fsr2l,f,c
  7349  0000B8  5042               	movf	MoveSnakes@positions+1,w,c
  7350  0000BA  22DA               	addwfc	fsr2h,f,c
  7351  0000BC  EE10 F001          	lfsr	1,1
  7352  0000C0  5041               	movf	MoveSnakes@positions,w,c
  7353  0000C2  26E1               	addwf	fsr1l,f,c
  7354  0000C4  5042               	movf	MoveSnakes@positions+1,w,c
  7355  0000C6  22E2               	addwfc	fsr1h,f,c
  7356  0000C8  50E7               	movf	indf1,w,c
  7357  0000CA  6E45               	movwf	??_MoveSnakes& (0+255),c
  7358  0000CC  2845               	incf	??_MoveSnakes,w,c
  7359  0000CE  6EDF               	movwf	indf2,c
  7360                           
  7361                           ;snake.c: 147:             *previous_direction = 2;
  7362  0000D0  C03F  FFD9         	movff	MoveSnakes@previous_direction,fsr2l
  7363  0000D4  C040  FFDA         	movff	MoveSnakes@previous_direction+1,fsr2h
  7364  0000D8  0E02               	movlw	2
  7365  0000DA  6EDF               	movwf	indf2,c
  7366                           
  7367                           ;snake.c: 148:             if(positions[0].y > 15 & positions[0].y < 200)
  7368  0000DC  EE20 F001          	lfsr	2,1
  7369  0000E0  5041               	movf	MoveSnakes@positions,w,c
  7370  0000E2  26D9               	addwf	fsr2l,f,c
  7371  0000E4  5042               	movf	MoveSnakes@positions+1,w,c
  7372  0000E6  22DA               	addwfc	fsr2h,f,c
  7373  0000E8  0E0F               	movlw	15
  7374  0000EA  64DF               	cpfsgt	indf2,c
  7375  0000EC  D048               	goto	l5471
  7376  0000EE  EE20 F001          	lfsr	2,1
  7377  0000F2  5041               	movf	MoveSnakes@positions,w,c
  7378  0000F4  26D9               	addwf	fsr2l,f,c
  7379  0000F6  5042               	movf	MoveSnakes@positions+1,w,c
  7380  0000F8  22DA               	addwfc	fsr2h,f,c
  7381  0000FA  0EC8               	movlw	200
  7382  0000FC  60DF               	cpfslt	indf2,c
  7383  0000FE  D03F               	goto	l5471
  7384                           
  7385                           ;snake.c: 149:             {;snake.c: 150:                 positions[0].y = 0;
  7386  000100  EE20 F001          	lfsr	2,1
  7387  000104  5041               	movf	MoveSnakes@positions,w,c
  7388  000106  26D9               	addwf	fsr2l,f,c
  7389  000108  5042               	movf	MoveSnakes@positions+1,w,c
  7390  00010A  22DA               	addwfc	fsr2h,f,c
  7391  00010C                     L5:
  7392  00010C  0E00               	movlw	0
  7393  00010E  D7CE               	goto	L4
  7394  000110                     l5459:
  7395                           
  7396                           ;snake.c: 154:             positions[0].x = positions[0].x - 1;
  7397  000110  C041  FFD9         	movff	MoveSnakes@positions,fsr2l
  7398  000114  C042  FFDA         	movff	MoveSnakes@positions+1,fsr2h
  7399  000118  50DF               	movf	indf2,w,c
  7400  00011A  6E45               	movwf	??_MoveSnakes& (0+255),c
  7401  00011C  0445               	decf	??_MoveSnakes,w,c
  7402  00011E  C041  FFD9         	movff	MoveSnakes@positions,fsr2l
  7403  000122  C042  FFDA         	movff	MoveSnakes@positions+1,fsr2h
  7404  000126  6EDF               	movwf	indf2,c
  7405                           
  7406                           ;snake.c: 155:             *previous_direction = 3;
  7407  000128  C03F  FFD9         	movff	MoveSnakes@previous_direction,fsr2l
  7408  00012C  C040  FFDA         	movff	MoveSnakes@previous_direction+1,fsr2h
  7409  000130  0E03               	movlw	3
  7410  000132  6EDF               	movwf	indf2,c
  7411                           
  7412                           ;snake.c: 156:             if(positions[0].x >= 200)
  7413  000134  C041  FFD9         	movff	MoveSnakes@positions,fsr2l
  7414  000138  C042  FFDA         	movff	MoveSnakes@positions+1,fsr2h
  7415  00013C  0EC7               	movlw	199
  7416  00013E  64DF               	cpfsgt	indf2,c
  7417  000140  D01E               	goto	l5471
  7418                           
  7419                           ;snake.c: 157:             {;snake.c: 158:                 positions[0].x = 7;
  7420  000142  C041  FFD9         	movff	MoveSnakes@positions,fsr2l
  7421  000146  C042  FFDA         	movff	MoveSnakes@positions+1,fsr2h
  7422  00014A  0E07               	movlw	7
  7423  00014C  D7AF               	goto	L4
  7424  00014E                     l5469:
  7425  00014E  C03D  FFD9         	movff	MoveSnakes@direction,fsr2l
  7426  000152  C03E  FFDA         	movff	MoveSnakes@direction+1,fsr2h
  7427  000156  50DF               	movf	indf2,w,c
  7428  000158  6E45               	movwf	??_MoveSnakes& (0+255),c
  7429  00015A  6A46               	clrf	(??_MoveSnakes+1)& (0+255),c
  7430                           
  7431                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  7432                           ; Switch size 1, requested type "simple"
  7433                           ; Number of cases is 1, Range of values is 0 to 0
  7434                           ; switch strategies available:
  7435                           ; Name         Instructions Cycles
  7436                           ; simple_byte            4     3 (average)
  7437                           ;	Chosen strategy is simple_byte
  7438  00015C  5046               	movf	??_MoveSnakes+1,w,c
  7439  00015E  0A00               	xorlw	0	; case 0
  7440  000160  A4D8               	btfss	status,2,c
  7441  000162  D00D               	goto	l5471
  7442                           
  7443                           ; Switch size 1, requested type "simple"
  7444                           ; Number of cases is 4, Range of values is 0 to 3
  7445                           ; switch strategies available:
  7446                           ; Name         Instructions Cycles
  7447                           ; simple_byte           13     7 (average)
  7448                           ;	Chosen strategy is simple_byte
  7449  000164  5045               	movf	??_MoveSnakes,w,c
  7450  000166  0A00               	xorlw	0	; case 0
  7451  000168  B4D8               	btfsc	status,2,c
  7452  00016A  D754               	goto	l5431
  7453  00016C  0A01               	xorlw	1	; case 1
  7454  00016E  B4D8               	btfsc	status,2,c
  7455  000170  D778               	goto	l5439
  7456  000172  0A03               	xorlw	3	; case 2
  7457  000174  B4D8               	btfsc	status,2,c
  7458  000176  D79C               	goto	l5449
  7459  000178  0A01               	xorlw	1	; case 3
  7460  00017A  B4D8               	btfsc	status,2,c
  7461  00017C  D7C9               	goto	l5459
  7462  00017E                     l5471:
  7463                           
  7464                           ;snake.c: 162:     for(uint8_t i = 0; i <= *snakeLength; i++)
  7465  00017E  0E00               	movlw	0
  7466  000180  6E4E               	movwf	MoveSnakes@i,c
  7467  000182  D06D               	goto	l5477
  7468  000184                     l5473:
  7469                           
  7470                           ;snake.c: 163:     {;snake.c: 164:         positions[(*snakeLength - i) + 1].y = positio
      +                          ns[*snakeLength - i].y;
  7471  000184  C039  FFD9         	movff	MoveSnakes@snakeLength,fsr2l
  7472  000188  C03A  FFDA         	movff	MoveSnakes@snakeLength+1,fsr2h
  7473  00018C  50DF               	movf	indf2,w,c
  7474  00018E  6E45               	movwf	??_MoveSnakes& (0+255),c
  7475  000190  6A46               	clrf	(??_MoveSnakes+1)& (0+255),c
  7476  000192  504E               	movf	MoveSnakes@i,w,c
  7477  000194  5E45               	subwf	??_MoveSnakes,f,c
  7478  000196  0E00               	movlw	0
  7479  000198  5A46               	subwfb	??_MoveSnakes+1,f,c
  7480  00019A  90D8               	bcf	status,0,c
  7481  00019C  3645               	rlcf	??_MoveSnakes,f,c
  7482  00019E  3646               	rlcf	??_MoveSnakes+1,f,c
  7483  0001A0  C041  F047         	movff	MoveSnakes@positions,??_MoveSnakes+2
  7484  0001A4  C042  F048         	movff	MoveSnakes@positions+1,??_MoveSnakes+3
  7485  0001A8  5045               	movf	??_MoveSnakes,w,c
  7486  0001AA  2647               	addwf	??_MoveSnakes+2,f,c
  7487  0001AC  5046               	movf	??_MoveSnakes+1,w,c
  7488  0001AE  2248               	addwfc	??_MoveSnakes+3,f,c
  7489  0001B0  0E01               	movlw	1
  7490  0001B2  2447               	addwf	??_MoveSnakes+2,w,c
  7491  0001B4  6ED9               	movwf	fsr2l,c
  7492  0001B6  0E00               	movlw	0
  7493  0001B8  2048               	addwfc	??_MoveSnakes+3,w,c
  7494  0001BA  6EDA               	movwf	fsr2h,c
  7495  0001BC  C039  FFE1         	movff	MoveSnakes@snakeLength,fsr1l
  7496  0001C0  C03A  FFE2         	movff	MoveSnakes@snakeLength+1,fsr1h
  7497  0001C4  50E7               	movf	indf1,w,c
  7498  0001C6  6E49               	movwf	(??_MoveSnakes+4)& (0+255),c
  7499  0001C8  6A4A               	clrf	(??_MoveSnakes+5)& (0+255),c
  7500  0001CA  504E               	movf	MoveSnakes@i,w,c
  7501  0001CC  5E49               	subwf	??_MoveSnakes+4,f,c
  7502  0001CE  0E00               	movlw	0
  7503  0001D0  5A4A               	subwfb	??_MoveSnakes+5,f,c
  7504  0001D2  90D8               	bcf	status,0,c
  7505  0001D4  3649               	rlcf	??_MoveSnakes+4,f,c
  7506  0001D6  364A               	rlcf	??_MoveSnakes+5,f,c
  7507  0001D8  C041  F04B         	movff	MoveSnakes@positions,??_MoveSnakes+6
  7508  0001DC  C042  F04C         	movff	MoveSnakes@positions+1,??_MoveSnakes+7
  7509  0001E0  5049               	movf	??_MoveSnakes+4,w,c
  7510  0001E2  264B               	addwf	??_MoveSnakes+6,f,c
  7511  0001E4  504A               	movf	??_MoveSnakes+5,w,c
  7512  0001E6  224C               	addwfc	??_MoveSnakes+7,f,c
  7513  0001E8  0E03               	movlw	3
  7514  0001EA  244B               	addwf	??_MoveSnakes+6,w,c
  7515  0001EC  6EE1               	movwf	fsr1l,c
  7516  0001EE  0E00               	movlw	0
  7517  0001F0  204C               	addwfc	??_MoveSnakes+7,w,c
  7518  0001F2  6EE2               	movwf	fsr1h,c
  7519  0001F4  CFDF FFE7          	movff	indf2,indf1
  7520                           
  7521                           ;snake.c: 165:         positions[(*snakeLength - i) + 1].x = positions[*snakeLength - i]
      +                          .x;
  7522  0001F8  C039  FFD9         	movff	MoveSnakes@snakeLength,fsr2l
  7523  0001FC  C03A  FFDA         	movff	MoveSnakes@snakeLength+1,fsr2h
  7524  000200  50DF               	movf	indf2,w,c
  7525  000202  6E45               	movwf	??_MoveSnakes& (0+255),c
  7526  000204  6A46               	clrf	(??_MoveSnakes+1)& (0+255),c
  7527  000206  504E               	movf	MoveSnakes@i,w,c
  7528  000208  5E45               	subwf	??_MoveSnakes,f,c
  7529  00020A  0E00               	movlw	0
  7530  00020C  5A46               	subwfb	??_MoveSnakes+1,f,c
  7531  00020E  90D8               	bcf	status,0,c
  7532  000210  3645               	rlcf	??_MoveSnakes,f,c
  7533  000212  3646               	rlcf	??_MoveSnakes+1,f,c
  7534  000214  5045               	movf	??_MoveSnakes,w,c
  7535  000216  2441               	addwf	MoveSnakes@positions,w,c
  7536  000218  6ED9               	movwf	fsr2l,c
  7537  00021A  5046               	movf	??_MoveSnakes+1,w,c
  7538  00021C  2042               	addwfc	MoveSnakes@positions+1,w,c
  7539  00021E  6EDA               	movwf	fsr2h,c
  7540  000220  C039  FFE1         	movff	MoveSnakes@snakeLength,fsr1l
  7541  000224  C03A  FFE2         	movff	MoveSnakes@snakeLength+1,fsr1h
  7542  000228  50E7               	movf	indf1,w,c
  7543  00022A  6E47               	movwf	(??_MoveSnakes+2)& (0+255),c
  7544  00022C  6A48               	clrf	(??_MoveSnakes+3)& (0+255),c
  7545  00022E  504E               	movf	MoveSnakes@i,w,c
  7546  000230  5E47               	subwf	??_MoveSnakes+2,f,c
  7547  000232  0E00               	movlw	0
  7548  000234  5A48               	subwfb	??_MoveSnakes+3,f,c
  7549  000236  90D8               	bcf	status,0,c
  7550  000238  3647               	rlcf	??_MoveSnakes+2,f,c
  7551  00023A  3648               	rlcf	??_MoveSnakes+3,f,c
  7552  00023C  C041  F049         	movff	MoveSnakes@positions,??_MoveSnakes+4
  7553  000240  C042  F04A         	movff	MoveSnakes@positions+1,??_MoveSnakes+5
  7554  000244  5047               	movf	??_MoveSnakes+2,w,c
  7555  000246  2649               	addwf	??_MoveSnakes+4,f,c
  7556  000248  5048               	movf	??_MoveSnakes+3,w,c
  7557  00024A  224A               	addwfc	??_MoveSnakes+5,f,c
  7558  00024C  0E02               	movlw	2
  7559  00024E  2449               	addwf	??_MoveSnakes+4,w,c
  7560  000250  6EE1               	movwf	fsr1l,c
  7561  000252  0E00               	movlw	0
  7562  000254  204A               	addwfc	??_MoveSnakes+5,w,c
  7563  000256  6EE2               	movwf	fsr1h,c
  7564  000258  CFDF FFE7          	movff	indf2,indf1
  7565                           
  7566                           ;snake.c: 166:     }
  7567  00025C  2A4E               	incf	MoveSnakes@i,f,c
  7568  00025E                     l5477:
  7569  00025E  C039  FFD9         	movff	MoveSnakes@snakeLength,fsr2l
  7570  000262  C03A  FFDA         	movff	MoveSnakes@snakeLength+1,fsr2h
  7571  000266  504E               	movf	MoveSnakes@i,w,c
  7572  000268  5CDE               	subwf	postinc2,w,c
  7573  00026A  B0D8               	btfsc	status,0,c
  7574  00026C  D78B               	goto	l5473
  7575                           
  7576                           ;snake.c: 167:     if(positions[0].y == berry->y && positions[0].x == berry->x)
  7577  00026E  EE20 F001          	lfsr	2,1
  7578  000272  5043               	movf	MoveSnakes@berry,w,c
  7579  000274  26D9               	addwf	fsr2l,f,c
  7580  000276  5044               	movf	MoveSnakes@berry+1,w,c
  7581  000278  22DA               	addwfc	fsr2h,f,c
  7582  00027A  EE10 F001          	lfsr	1,1
  7583  00027E  5041               	movf	MoveSnakes@positions,w,c
  7584  000280  26E1               	addwf	fsr1l,f,c
  7585  000282  5042               	movf	MoveSnakes@positions+1,w,c
  7586  000284  22E2               	addwfc	fsr1h,f,c
  7587  000286  50DE               	movf	postinc2,w,c
  7588  000288  18E6               	xorwf	postinc1,w,c
  7589  00028A  A4D8               	btfss	status,2,c
  7590  00028C  D026               	goto	l5487
  7591  00028E  C043  FFD9         	movff	MoveSnakes@berry,fsr2l
  7592  000292  C044  FFDA         	movff	MoveSnakes@berry+1,fsr2h
  7593  000296  C041  FFE1         	movff	MoveSnakes@positions,fsr1l
  7594  00029A  C042  FFE2         	movff	MoveSnakes@positions+1,fsr1h
  7595  00029E  50DE               	movf	postinc2,w,c
  7596  0002A0  18E6               	xorwf	postinc1,w,c
  7597  0002A2  A4D8               	btfss	status,2,c
  7598  0002A4  D01A               	goto	l5487
  7599                           
  7600                           ;snake.c: 168:     {;snake.c: 169:         *snakeLength = *snakeLength + 1;
  7601  0002A6  C039  FFD9         	movff	MoveSnakes@snakeLength,fsr2l
  7602  0002AA  C03A  FFDA         	movff	MoveSnakes@snakeLength+1,fsr2h
  7603  0002AE  50DF               	movf	indf2,w,c
  7604  0002B0  6E45               	movwf	??_MoveSnakes& (0+255),c
  7605  0002B2  2845               	incf	??_MoveSnakes,w,c
  7606  0002B4  C039  FFD9         	movff	MoveSnakes@snakeLength,fsr2l
  7607  0002B8  C03A  FFDA         	movff	MoveSnakes@snakeLength+1,fsr2h
  7608  0002BC  6EDF               	movwf	indf2,c
  7609                           
  7610                           ;snake.c: 170:         CreateBerry(snakeLength, positions, berry);
  7611  0002BE  C039  F017         	movff	MoveSnakes@snakeLength,CreateBerry@snakeLength
  7612  0002C2  C03A  F018         	movff	MoveSnakes@snakeLength+1,CreateBerry@snakeLength+1
  7613  0002C6  C041  F019         	movff	MoveSnakes@positions,CreateBerry@positions
  7614  0002CA  C042  F01A         	movff	MoveSnakes@positions+1,CreateBerry@positions+1
  7615  0002CE  C043  F01B         	movff	MoveSnakes@berry,CreateBerry@berry
  7616  0002D2  C044  F01C         	movff	MoveSnakes@berry+1,CreateBerry@berry+1
  7617  0002D6  ECD1  F00B         	call	_CreateBerry	;wreg free
  7618  0002DA                     l5487:
  7619                           
  7620                           ;snake.c: 172:     for(uint8_t i = 4; i <= *snakeLength; i++)
  7621  0002DA  0E04               	movlw	4
  7622  0002DC  6E4D               	movwf	MoveSnakes@i_774,c
  7623  0002DE  D035               	goto	l374
  7624  0002E0                     l5489:
  7625                           
  7626                           ;snake.c: 173:     {;snake.c: 174:         if(positions[0].y == positions[i].y && positi
      +                          ons[0].x == positions[i].x)
  7627  0002E0  504D               	movf	MoveSnakes@i_774,w,c
  7628  0002E2  0D02               	mullw	2
  7629  0002E4  C041  F045         	movff	MoveSnakes@positions,??_MoveSnakes
  7630  0002E8  C042  F046         	movff	MoveSnakes@positions+1,??_MoveSnakes+1
  7631  0002EC  50F3               	movf	prodl,w,c
  7632  0002EE  2645               	addwf	??_MoveSnakes,f,c
  7633  0002F0  50F4               	movf	prodh,w,c
  7634  0002F2  2246               	addwfc	??_MoveSnakes+1,f,c
  7635  0002F4  0E01               	movlw	1
  7636  0002F6  2445               	addwf	??_MoveSnakes,w,c
  7637  0002F8  6ED9               	movwf	fsr2l,c
  7638  0002FA  0E00               	movlw	0
  7639  0002FC  2046               	addwfc	??_MoveSnakes+1,w,c
  7640  0002FE  6EDA               	movwf	fsr2h,c
  7641  000300  EE10 F001          	lfsr	1,1
  7642  000304  5041               	movf	MoveSnakes@positions,w,c
  7643  000306  26E1               	addwf	fsr1l,f,c
  7644  000308  5042               	movf	MoveSnakes@positions+1,w,c
  7645  00030A  22E2               	addwfc	fsr1h,f,c
  7646  00030C  50DE               	movf	postinc2,w,c
  7647  00030E  18E6               	xorwf	postinc1,w,c
  7648  000310  A4D8               	btfss	status,2,c
  7649  000312  D01A               	goto	l5495
  7650  000314  504D               	movf	MoveSnakes@i_774,w,c
  7651  000316  0D02               	mullw	2
  7652  000318  CFF3 F045          	movff	prodl,??_MoveSnakes
  7653  00031C  CFF4 F046          	movff	prodh,??_MoveSnakes+1
  7654  000320  5045               	movf	??_MoveSnakes,w,c
  7655  000322  2441               	addwf	MoveSnakes@positions,w,c
  7656  000324  6ED9               	movwf	fsr2l,c
  7657  000326  5046               	movf	??_MoveSnakes+1,w,c
  7658  000328  2042               	addwfc	MoveSnakes@positions+1,w,c
  7659  00032A  6EDA               	movwf	fsr2h,c
  7660  00032C  C041  FFE1         	movff	MoveSnakes@positions,fsr1l
  7661  000330  C042  FFE2         	movff	MoveSnakes@positions+1,fsr1h
  7662  000334  50DE               	movf	postinc2,w,c
  7663  000336  18E6               	xorwf	postinc1,w,c
  7664  000338  A4D8               	btfss	status,2,c
  7665  00033A  D006               	goto	l5495
  7666                           
  7667                           ;snake.c: 175:         {;snake.c: 176:             *EndOfGame = 1;
  7668  00033C  C03B  FFD9         	movff	MoveSnakes@EndOfGame,fsr2l
  7669  000340  C03C  FFDA         	movff	MoveSnakes@EndOfGame+1,fsr2h
  7670  000344  0E01               	movlw	1
  7671  000346  6EDF               	movwf	indf2,c
  7672  000348                     l5495:
  7673                           
  7674                           ;snake.c: 178:     };
  7675  000348  2A4D               	incf	MoveSnakes@i_774,f,c
  7676  00034A                     l374:
  7677  00034A  C039  FFD9         	movff	MoveSnakes@snakeLength,fsr2l
  7678  00034E  C03A  FFDA         	movff	MoveSnakes@snakeLength+1,fsr2h
  7679  000352  504D               	movf	MoveSnakes@i_774,w,c
  7680  000354  5CDE               	subwf	postinc2,w,c
  7681  000356  B0D8               	btfsc	status,0,c
  7682  000358  D7C3               	goto	l5489
  7683                           
  7684                           ;snake.c: 179:     SnakeGraph(snakeLength, positions, berry);
  7685  00035A  C039  F019         	movff	MoveSnakes@snakeLength,SnakeGraph@snakeLength
  7686  00035E  C03A  F01A         	movff	MoveSnakes@snakeLength+1,SnakeGraph@snakeLength+1
  7687  000362  C041  F01B         	movff	MoveSnakes@positions,SnakeGraph@positions
  7688  000366  C042  F01C         	movff	MoveSnakes@positions+1,SnakeGraph@positions+1
  7689  00036A  C043  F01D         	movff	MoveSnakes@berry,SnakeGraph@berry
  7690  00036E  C044  F01E         	movff	MoveSnakes@berry+1,SnakeGraph@berry+1
  7691  000372  ECD6  F006         	call	_SnakeGraph	;wreg free
  7692  000376  0012               	return		;funcret
  7693  000378                     __end_of_MoveSnakes:
  7694                           	opt callstack 0
  7695                           
  7696 ;; *************** function _SnakeGraph *****************
  7697 ;; Defined at:
  7698 ;;		line 102 in file "snake.c"
  7699 ;; Parameters:    Size  Location     Type
  7700 ;;  snakeLength     2   24[COMRAM] PTR unsigned char 
  7701 ;;		 -> snake_main@snakeLength(1), 
  7702 ;;  positions       2   26[COMRAM] PTR struct position
  7703 ;;		 -> snake_main@positions(256), 
  7704 ;;  berry           2   28[COMRAM] PTR struct position
  7705 ;;		 -> snake_main@berry(2), 
  7706 ;; Auto vars:     Size  Location     Type
  7707 ;;  j               1   53[COMRAM] unsigned char 
  7708 ;;  i               1   55[COMRAM] unsigned char 
  7709 ;;  i               1   54[COMRAM] unsigned char 
  7710 ;;  ObjectData     16   37[COMRAM] unsigned short [8]
  7711 ;; Return value:  Size  Location     Type
  7712 ;;                  1    wreg      void 
  7713 ;; Registers used:
  7714 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7715 ;; Tracked objects:
  7716 ;;		On entry : 0/0
  7717 ;;		On exit  : 0/0
  7718 ;;		Unchanged: 0/0
  7719 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7720 ;;      Params:         6       0       0       0       0       0       0
  7721 ;;      Locals:        19       0       0       0       0       0       0
  7722 ;;      Temps:          7       0       0       0       0       0       0
  7723 ;;      Totals:        32       0       0       0       0       0       0
  7724 ;;Total ram usage:       32 bytes
  7725 ;; Hardware stack levels used:    1
  7726 ;; Hardware stack levels required when called:    7
  7727 ;; This function calls:
  7728 ;;		_clearArray
  7729 ;;		_set_screen
  7730 ;; This function is called by:
  7731 ;;		_MoveSnakes
  7732 ;; This function uses a non-reentrant model
  7733 ;;
  7734                           
  7735                           	psect	text50
  7736  000DAC                     __ptext50:
  7737                           	opt callstack 0
  7738  000DAC                     _SnakeGraph:
  7739                           	opt callstack 21
  7740                           
  7741                           ;snake.c: 102: void SnakeGraph(uint8_t *snakeLength, struct position *positions, struct 
      +                          position *berry);snake.c: 103: {;snake.c: 104:     uint16_t ObjectData[8];;snake.c: 105:
      +                               clearArray(ObjectData, 8);
  7742                           
  7743                           ;incstack = 0
  7744  000DAC  0E26               	movlw	low SnakeGraph@ObjectData
  7745  000DAE  6E0D               	movwf	clearArray@pArray,c
  7746  000DB0  0E00               	movlw	high SnakeGraph@ObjectData
  7747  000DB2  6E0E               	movwf	clearArray@pArray+1,c
  7748  000DB4  0E00               	movlw	0
  7749  000DB6  6E10               	movwf	clearArray@size+1,c
  7750  000DB8  0E08               	movlw	8
  7751  000DBA  6E0F               	movwf	clearArray@size,c
  7752  000DBC  EC50  F011         	call	_clearArray	;wreg free
  7753                           
  7754                           ;snake.c: 106:     {;snake.c: 108:         const uint16_t SnakeYtext[] = {0x001, 0x0002,
      +                           0x0004, 0x0008, 0x0010, 0x0020, 0x0040, 0x0080, 0x0100, 0x0200, 0x0400, 0x0800, 0x1000,
      +                           0x2000, 0x4000, 0x8000};;snake.c: 109:         for(uint8_t i = 0; i <= *snakeLength; i+
      +                          +)
  7755  000DC0  0E00               	movlw	0
  7756  000DC2  6E37               	movwf	SnakeGraph@i,c
  7757  000DC4  D04B               	goto	l5213
  7758  000DC6                     l5207:
  7759                           
  7760                           ;snake.c: 110:         {;snake.c: 111:             uint8_t j = positions[i].x;
  7761  000DC6  5037               	movf	SnakeGraph@i,w,c
  7762  000DC8  0D02               	mullw	2
  7763  000DCA  CFF3 F01F          	movff	prodl,??_SnakeGraph
  7764  000DCE  CFF4 F020          	movff	prodh,??_SnakeGraph+1
  7765  000DD2  501F               	movf	??_SnakeGraph,w,c
  7766  000DD4  241B               	addwf	SnakeGraph@positions,w,c
  7767  000DD6  6ED9               	movwf	fsr2l,c
  7768  000DD8  5020               	movf	??_SnakeGraph+1,w,c
  7769  000DDA  201C               	addwfc	SnakeGraph@positions+1,w,c
  7770  000DDC  6EDA               	movwf	fsr2h,c
  7771  000DDE  50DF               	movf	indf2,w,c
  7772  000DE0  6E36               	movwf	SnakeGraph@j,c
  7773                           
  7774                           ;snake.c: 112:             ObjectData[j] = (SnakeYtext[positions[i].y] | ObjectData[j]);
  7775  000DE2  5036               	movf	SnakeGraph@j,w,c
  7776  000DE4  0D02               	mullw	2
  7777  000DE6  0E26               	movlw	low SnakeGraph@ObjectData
  7778  000DE8  24F3               	addwf	prodl,w,c
  7779  000DEA  6ED9               	movwf	fsr2l,c
  7780  000DEC  0E00               	movlw	high SnakeGraph@ObjectData
  7781  000DEE  20F4               	addwfc	prodh,w,c
  7782  000DF0  6EDA               	movwf	fsr2h,c
  7783  000DF2  CFDE F01F          	movff	postinc2,??_SnakeGraph
  7784  000DF6  CFDD F020          	movff	postdec2,??_SnakeGraph+1
  7785  000DFA  5037               	movf	SnakeGraph@i,w,c
  7786  000DFC  0D02               	mullw	2
  7787  000DFE  C01B  F021         	movff	SnakeGraph@positions,??_SnakeGraph+2
  7788  000E02  C01C  F022         	movff	SnakeGraph@positions+1,??_SnakeGraph+3
  7789  000E06  50F3               	movf	prodl,w,c
  7790  000E08  2621               	addwf	??_SnakeGraph+2,f,c
  7791  000E0A  50F4               	movf	prodh,w,c
  7792  000E0C  2222               	addwfc	??_SnakeGraph+3,f,c
  7793  000E0E  0E01               	movlw	1
  7794  000E10  2421               	addwf	??_SnakeGraph+2,w,c
  7795  000E12  6ED9               	movwf	fsr2l,c
  7796  000E14  0E00               	movlw	0
  7797  000E16  2022               	addwfc	??_SnakeGraph+3,w,c
  7798  000E18  6EDA               	movwf	fsr2h,c
  7799  000E1A  50DF               	movf	indf2,w,c
  7800  000E1C  6E23               	movwf	(??_SnakeGraph+4)& (0+255),c
  7801  000E1E  5023               	movf	??_SnakeGraph+4,w,c
  7802  000E20  0D02               	mullw	2
  7803  000E22  0EFF               	movlw	low SnakeGraph@SnakeYtext
  7804  000E24  24F3               	addwf	prodl,w,c
  7805  000E26  6EF6               	movwf	tblptrl,c
  7806  000E28  0E7E               	movlw	high SnakeGraph@SnakeYtext
  7807  000E2A  20F4               	addwfc	prodh,w,c
  7808  000E2C  6EF7               	movwf	tblptrh,c
  7809  000E2E                     	if	0	;There are less than 3 active tblptr bytes
  7810  000E2E                     	endif
  7811  000E2E  0009               	tblrd		*+
  7812  000E30  CFF5 F024          	movff	tablat,??_SnakeGraph+5
  7813  000E34  0009               	tblrd		*+
  7814  000E36  CFF5 F025          	movff	tablat,??_SnakeGraph+6
  7815  000E3A  501F               	movf	??_SnakeGraph,w,c
  7816  000E3C  1224               	iorwf	??_SnakeGraph+5,f,c
  7817  000E3E  5020               	movf	??_SnakeGraph+1,w,c
  7818  000E40  1225               	iorwf	??_SnakeGraph+6,f,c
  7819  000E42  5036               	movf	SnakeGraph@j,w,c
  7820  000E44  0D02               	mullw	2
  7821  000E46  0E26               	movlw	low SnakeGraph@ObjectData
  7822  000E48  24F3               	addwf	prodl,w,c
  7823  000E4A  6ED9               	movwf	fsr2l,c
  7824  000E4C  0E00               	movlw	high SnakeGraph@ObjectData
  7825  000E4E  20F4               	addwfc	prodh,w,c
  7826  000E50  6EDA               	movwf	fsr2h,c
  7827  000E52  C024  FFDE         	movff	??_SnakeGraph+5,postinc2
  7828  000E56  C025  FFDD         	movff	??_SnakeGraph+6,postdec2
  7829                           
  7830                           ;snake.c: 113:         }
  7831  000E5A  2A37               	incf	SnakeGraph@i,f,c
  7832  000E5C                     l5213:
  7833  000E5C  C019  FFD9         	movff	SnakeGraph@snakeLength,fsr2l
  7834  000E60  C01A  FFDA         	movff	SnakeGraph@snakeLength+1,fsr2h
  7835  000E64  5037               	movf	SnakeGraph@i,w,c
  7836  000E66  5CDE               	subwf	postinc2,w,c
  7837  000E68  B0D8               	btfsc	status,0,c
  7838  000E6A  D7AD               	goto	l5207
  7839                           
  7840                           ;snake.c: 114:         for(uint8_t i = 0; i < 8; i++)
  7841  000E6C  0E00               	movlw	0
  7842  000E6E  6E38               	movwf	SnakeGraph@i_758,c
  7843  000E70                     l5221:
  7844                           
  7845                           ;snake.c: 115:         {;snake.c: 116:             if(berry->x == i)
  7846  000E70  C01D  FFD9         	movff	SnakeGraph@berry,fsr2l
  7847  000E74  C01E  FFDA         	movff	SnakeGraph@berry+1,fsr2h
  7848  000E78  5038               	movf	SnakeGraph@i_758,w,c
  7849  000E7A  18DE               	xorwf	postinc2,w,c
  7850  000E7C  A4D8               	btfss	status,2,c
  7851  000E7E  D032               	goto	l5225
  7852                           
  7853                           ;snake.c: 117:             {;snake.c: 118:                 ObjectData[i] = SnakeYtext[be
      +                          rry->y] | ObjectData[i];
  7854  000E80  5038               	movf	SnakeGraph@i_758,w,c
  7855  000E82  0D02               	mullw	2
  7856  000E84  0E26               	movlw	low SnakeGraph@ObjectData
  7857  000E86  24F3               	addwf	prodl,w,c
  7858  000E88  6ED9               	movwf	fsr2l,c
  7859  000E8A  0E00               	movlw	high SnakeGraph@ObjectData
  7860  000E8C  20F4               	addwfc	prodh,w,c
  7861  000E8E  6EDA               	movwf	fsr2h,c
  7862  000E90  CFDE F01F          	movff	postinc2,??_SnakeGraph
  7863  000E94  CFDD F020          	movff	postdec2,??_SnakeGraph+1
  7864  000E98  EE20 F001          	lfsr	2,1
  7865  000E9C  501D               	movf	SnakeGraph@berry,w,c
  7866  000E9E  26D9               	addwf	fsr2l,f,c
  7867  000EA0  501E               	movf	SnakeGraph@berry+1,w,c
  7868  000EA2  22DA               	addwfc	fsr2h,f,c
  7869  000EA4  50DF               	movf	indf2,w,c
  7870  000EA6  6E21               	movwf	(??_SnakeGraph+2)& (0+255),c
  7871  000EA8  5021               	movf	??_SnakeGraph+2,w,c
  7872  000EAA  0D02               	mullw	2
  7873  000EAC  0EFF               	movlw	low SnakeGraph@SnakeYtext
  7874  000EAE  24F3               	addwf	prodl,w,c
  7875  000EB0  6EF6               	movwf	tblptrl,c
  7876  000EB2  0E7E               	movlw	high SnakeGraph@SnakeYtext
  7877  000EB4  20F4               	addwfc	prodh,w,c
  7878  000EB6  6EF7               	movwf	tblptrh,c
  7879  000EB8                     	if	0	;There are less than 3 active tblptr bytes
  7880  000EB8                     	endif
  7881  000EB8  0009               	tblrd		*+
  7882  000EBA  CFF5 F022          	movff	tablat,??_SnakeGraph+3
  7883  000EBE  0009               	tblrd		*+
  7884  000EC0  CFF5 F023          	movff	tablat,??_SnakeGraph+4
  7885  000EC4  501F               	movf	??_SnakeGraph,w,c
  7886  000EC6  1222               	iorwf	??_SnakeGraph+3,f,c
  7887  000EC8  5020               	movf	??_SnakeGraph+1,w,c
  7888  000ECA  1223               	iorwf	??_SnakeGraph+4,f,c
  7889  000ECC  5038               	movf	SnakeGraph@i_758,w,c
  7890  000ECE  0D02               	mullw	2
  7891  000ED0  0E26               	movlw	low SnakeGraph@ObjectData
  7892  000ED2  24F3               	addwf	prodl,w,c
  7893  000ED4  6ED9               	movwf	fsr2l,c
  7894  000ED6  0E00               	movlw	high SnakeGraph@ObjectData
  7895  000ED8  20F4               	addwfc	prodh,w,c
  7896  000EDA  6EDA               	movwf	fsr2h,c
  7897  000EDC  C022  FFDE         	movff	??_SnakeGraph+3,postinc2
  7898  000EE0  C023  FFDD         	movff	??_SnakeGraph+4,postdec2
  7899  000EE4                     l5225:
  7900                           
  7901                           ;snake.c: 120:         }
  7902  000EE4  2A38               	incf	SnakeGraph@i_758,f,c
  7903  000EE6  0E07               	movlw	7
  7904  000EE8  6438               	cpfsgt	SnakeGraph@i_758,c
  7905  000EEA  D7C2               	goto	l5221
  7906                           
  7907                           ;snake.c: 121:     };snake.c: 122:     set_screen(ObjectData);
  7908  000EEC  0E26               	movlw	low SnakeGraph@ObjectData
  7909  000EEE  6E17               	movwf	set_screen@newData,c
  7910  000EF0  0E00               	movlw	high SnakeGraph@ObjectData
  7911  000EF2  6E18               	movwf	set_screen@newData+1,c
  7912  000EF4  EC06  F012         	call	_set_screen	;wreg free
  7913  000EF8  0012               	return		;funcret
  7914  000EFA                     __end_of_SnakeGraph:
  7915                           	opt callstack 0
  7916                           
  7917 ;; *************** function _set_screen *****************
  7918 ;; Defined at:
  7919 ;;		line 32 in file "screen.c"
  7920 ;; Parameters:    Size  Location     Type
  7921 ;;  newData         2   22[COMRAM] PTR unsigned short 
  7922 ;;		 -> show_score@Numberscreen(16), SnakeGraph@ObjectData(16), tetris_main@Screen_Data(16), tetris.currentblock(19), 
  7923 ;;		 -> tetris_main@tetris(28), 
  7924 ;; Auto vars:     Size  Location     Type
  7925 ;;		None
  7926 ;; Return value:  Size  Location     Type
  7927 ;;                  1    wreg      void 
  7928 ;; Registers used:
  7929 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  7930 ;; Tracked objects:
  7931 ;;		On entry : 0/0
  7932 ;;		On exit  : 0/0
  7933 ;;		Unchanged: 0/0
  7934 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7935 ;;      Params:         2       0       0       0       0       0       0
  7936 ;;      Locals:         0       0       0       0       0       0       0
  7937 ;;      Temps:          0       0       0       0       0       0       0
  7938 ;;      Totals:         2       0       0       0       0       0       0
  7939 ;;Total ram usage:        2 bytes
  7940 ;; Hardware stack levels used:    1
  7941 ;; Hardware stack levels required when called:    6
  7942 ;; This function calls:
  7943 ;;		_memcpyvol
  7944 ;;		_pauseMultiplexing
  7945 ;;		_resumeMultiplexing
  7946 ;; This function is called by:
  7947 ;;		_tetris_main
  7948 ;;		_SnakeGraph
  7949 ;;		_show_score
  7950 ;; This function uses a non-reentrant model
  7951 ;;
  7952                           
  7953                           	psect	text51
  7954  00240C                     __ptext51:
  7955                           	opt callstack 0
  7956  00240C                     _set_screen:
  7957                           	opt callstack 22
  7958                           
  7959                           ;screen.c: 32: void set_screen(uint16_t *newData);screen.c: 33: {;screen.c: 34:     paus
      +                          eMultiplexing();
  7960                           
  7961                           ;incstack = 0
  7962  00240C  ECF3  F012         	call	_pauseMultiplexing	;wreg free
  7963                           
  7964                           ;screen.c: 35:     memcpyvol(ScreenData, newData, 16);
  7965  002410  0EB8               	movlw	low _ScreenData
  7966  002412  6E0D               	movwf	memcpyvol@dest,c
  7967  002414  0E00               	movlw	high _ScreenData
  7968  002416  6E0E               	movwf	memcpyvol@dest+1,c
  7969  002418  C017  F00F         	movff	set_screen@newData,memcpyvol@src
  7970  00241C  C018  F010         	movff	set_screen@newData+1,memcpyvol@src+1
  7971  002420  0E00               	movlw	0
  7972  002422  6E12               	movwf	memcpyvol@n+1,c
  7973  002424  0E10               	movlw	16
  7974  002426  6E11               	movwf	memcpyvol@n,c
  7975  002428  ECD4  F00F         	call	_memcpyvol	;wreg free
  7976                           
  7977                           ;screen.c: 36:     resumeMultiplexing();
  7978  00242C  EC2E  F013         	call	_resumeMultiplexing	;wreg free
  7979  002430  0012               	return		;funcret
  7980  002432                     __end_of_set_screen:
  7981                           	opt callstack 0
  7982                           
  7983 ;; *************** function _clearArray *****************
  7984 ;; Defined at:
  7985 ;;		line 122 in file "shared_logic.c"
  7986 ;; Parameters:    Size  Location     Type
  7987 ;;  pArray          2   12[COMRAM] PTR volatile unsigned sh
  7988 ;;		 -> show_score@Numberscreen(16), SnakeGraph@ObjectData(16), tetris.currentblock.graphic(16), tetris.currentblock(19)
      +, 
  7989 ;;		 -> tetris_main@BackgroundData(16), tetris_button_up@tmpObjectData(16), 
  7990 ;;  size            2   14[COMRAM] unsigned int 
  7991 ;; Auto vars:     Size  Location     Type
  7992 ;;		None
  7993 ;; Return value:  Size  Location     Type
  7994 ;;                  1    wreg      void 
  7995 ;; Registers used:
  7996 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  7997 ;; Tracked objects:
  7998 ;;		On entry : 0/0
  7999 ;;		On exit  : 0/0
  8000 ;;		Unchanged: 0/0
  8001 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8002 ;;      Params:         4       0       0       0       0       0       0
  8003 ;;      Locals:         0       0       0       0       0       0       0
  8004 ;;      Temps:          0       0       0       0       0       0       0
  8005 ;;      Totals:         4       0       0       0       0       0       0
  8006 ;;Total ram usage:        4 bytes
  8007 ;; Hardware stack levels used:    1
  8008 ;; Hardware stack levels required when called:    4
  8009 ;; This function calls:
  8010 ;;		Nothing
  8011 ;; This function is called by:
  8012 ;;		_newRotation
  8013 ;;		_tetris_button_up
  8014 ;;		_tetris_main
  8015 ;;		_SnakeGraph
  8016 ;;		_show_score
  8017 ;; This function uses a non-reentrant model
  8018 ;;
  8019                           
  8020                           	psect	text52
  8021  0022A0                     __ptext52:
  8022                           	opt callstack 0
  8023  0022A0                     _clearArray:
  8024                           	opt callstack 22
  8025                           
  8026                           ;shared_logic.c: 122: void clearArray(volatile uint16_t *pArray, size_t size);shared_log
      +                          ic.c: 123: {;shared_logic.c: 124:     while(size--)
  8027                           
  8028                           ;incstack = 0
  8029  0022A0  D00D               	goto	l4709
  8030  0022A2                     l4707:
  8031                           
  8032                           ;shared_logic.c: 125:     {;shared_logic.c: 126:         pArray[size] = 0;
  8033  0022A2  90D8               	bcf	status,0,c
  8034  0022A4  340F               	rlcf	clearArray@size,w,c
  8035  0022A6  6ED9               	movwf	fsr2l,c
  8036  0022A8  3410               	rlcf	clearArray@size+1,w,c
  8037  0022AA  6EDA               	movwf	fsr2h,c
  8038  0022AC  500D               	movf	clearArray@pArray,w,c
  8039  0022AE  26D9               	addwf	fsr2l,f,c
  8040  0022B0  500E               	movf	clearArray@pArray+1,w,c
  8041  0022B2  22DA               	addwfc	fsr2h,f,c
  8042  0022B4  0E00               	movlw	0
  8043  0022B6  6EDE               	movwf	postinc2,c
  8044  0022B8  0E00               	movlw	0
  8045  0022BA  6EDD               	movwf	postdec2,c
  8046  0022BC                     l4709:
  8047                           
  8048                           ;shared_logic.c: 124:     while(size--)
  8049  0022BC  060F               	decf	clearArray@size,f,c
  8050  0022BE  A0D8               	btfss	status,0,c
  8051  0022C0  0610               	decf	clearArray@size+1,f,c
  8052  0022C2  280F               	incf	clearArray@size,w,c
  8053  0022C4  E1EE               	bnz	l4707
  8054  0022C6  2810               	incf	clearArray@size+1,w,c
  8055  0022C8  B4D8               	btfsc	status,2,c
  8056  0022CA  0012               	return	
  8057  0022CC  D7EA               	goto	l4707
  8058  0022CE                     __end_of_clearArray:
  8059                           	opt callstack 0
  8060                           
  8061 ;; *************** function _CreateBerry *****************
  8062 ;; Defined at:
  8063 ;;		line 82 in file "snake.c"
  8064 ;; Parameters:    Size  Location     Type
  8065 ;;  snakeLength     2   22[COMRAM] PTR unsigned char 
  8066 ;;		 -> snake_main@snakeLength(1), 
  8067 ;;  positions       2   24[COMRAM] PTR struct position
  8068 ;;		 -> snake_main@positions(256), 
  8069 ;;  berry           2   26[COMRAM] PTR struct position
  8070 ;;		 -> snake_main@berry(2), 
  8071 ;; Auto vars:     Size  Location     Type
  8072 ;;  i               1   33[COMRAM] unsigned char 
  8073 ;;  randomGood      1   32[COMRAM] _Bool 
  8074 ;; Return value:  Size  Location     Type
  8075 ;;                  1    wreg      void 
  8076 ;; Registers used:
  8077 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  8078 ;; Tracked objects:
  8079 ;;		On entry : 0/0
  8080 ;;		On exit  : 0/0
  8081 ;;		Unchanged: 0/0
  8082 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8083 ;;      Params:         6       0       0       0       0       0       0
  8084 ;;      Locals:         2       0       0       0       0       0       0
  8085 ;;      Temps:          4       0       0       0       0       0       0
  8086 ;;      Totals:        12       0       0       0       0       0       0
  8087 ;;Total ram usage:       12 bytes
  8088 ;; Hardware stack levels used:    1
  8089 ;; Hardware stack levels required when called:    6
  8090 ;; This function calls:
  8091 ;;		_genBerry
  8092 ;; This function is called by:
  8093 ;;		_MoveSnakes
  8094 ;;		_inistialize_snake
  8095 ;; This function uses a non-reentrant model
  8096 ;;
  8097                           
  8098                           	psect	text53
  8099  0017A2                     __ptext53:
  8100                           	opt callstack 0
  8101  0017A2                     _CreateBerry:
  8102                           	opt callstack 22
  8103                           
  8104                           ;snake.c: 87:     {;snake.c: 88:         randomGood = 0;
  8105                           
  8106                           ;snake.c: 86:     do
  8107                           
  8108                           ;incstack = 0
  8109  0017A2  0E00               	movlw	0
  8110  0017A4  6E21               	movwf	CreateBerry@randomGood,c
  8111                           
  8112                           ;snake.c: 89:         berry->x = genBerry(8);
  8113  0017A6  0E08               	movlw	8
  8114  0017A8  ECB6  F012         	call	_genBerry
  8115  0017AC  C01B  FFD9         	movff	CreateBerry@berry,fsr2l
  8116  0017B0  C01C  FFDA         	movff	CreateBerry@berry+1,fsr2h
  8117  0017B4  6EDF               	movwf	indf2,c
  8118                           
  8119                           ;snake.c: 90:         berry->y = genBerry(16);
  8120  0017B6  EE20 F001          	lfsr	2,1
  8121  0017BA  501B               	movf	CreateBerry@berry,w,c
  8122  0017BC  26D9               	addwf	fsr2l,f,c
  8123  0017BE  501C               	movf	CreateBerry@berry+1,w,c
  8124  0017C0  22DA               	addwfc	fsr2h,f,c
  8125  0017C2  0E10               	movlw	16
  8126  0017C4  ECB6  F012         	call	_genBerry
  8127  0017C8  6EDF               	movwf	indf2,c
  8128                           
  8129                           ;snake.c: 91:         for(uint8_t i = 0; i < *snakeLength; i++)
  8130  0017CA  0E00               	movlw	0
  8131  0017CC  6E22               	movwf	CreateBerry@i,c
  8132  0017CE  D031               	goto	l5199
  8133  0017D0                     l5191:
  8134                           
  8135                           ;snake.c: 92:         {;snake.c: 93:             if(berry->x == positions[i].x && berry-
      +                          >y == positions[i].y)
  8136  0017D0  5022               	movf	CreateBerry@i,w,c
  8137  0017D2  0D02               	mullw	2
  8138  0017D4  CFF3 F01D          	movff	prodl,??_CreateBerry
  8139  0017D8  CFF4 F01E          	movff	prodh,??_CreateBerry+1
  8140  0017DC  501D               	movf	??_CreateBerry,w,c
  8141  0017DE  2419               	addwf	CreateBerry@positions,w,c
  8142  0017E0  6ED9               	movwf	fsr2l,c
  8143  0017E2  501E               	movf	??_CreateBerry+1,w,c
  8144  0017E4  201A               	addwfc	CreateBerry@positions+1,w,c
  8145  0017E6  6EDA               	movwf	fsr2h,c
  8146  0017E8  C01B  FFE1         	movff	CreateBerry@berry,fsr1l
  8147  0017EC  C01C  FFE2         	movff	CreateBerry@berry+1,fsr1h
  8148  0017F0  50DE               	movf	postinc2,w,c
  8149  0017F2  18E6               	xorwf	postinc1,w,c
  8150  0017F4  A4D8               	btfss	status,2,c
  8151  0017F6  D01C               	goto	l5197
  8152  0017F8  5022               	movf	CreateBerry@i,w,c
  8153  0017FA  0D02               	mullw	2
  8154  0017FC  C019  F01D         	movff	CreateBerry@positions,??_CreateBerry
  8155  001800  C01A  F01E         	movff	CreateBerry@positions+1,??_CreateBerry+1
  8156  001804  50F3               	movf	prodl,w,c
  8157  001806  261D               	addwf	??_CreateBerry,f,c
  8158  001808  50F4               	movf	prodh,w,c
  8159  00180A  221E               	addwfc	??_CreateBerry+1,f,c
  8160  00180C  0E01               	movlw	1
  8161  00180E  241D               	addwf	??_CreateBerry,w,c
  8162  001810  6ED9               	movwf	fsr2l,c
  8163  001812  0E00               	movlw	0
  8164  001814  201E               	addwfc	??_CreateBerry+1,w,c
  8165  001816  6EDA               	movwf	fsr2h,c
  8166  001818  EE10 F001          	lfsr	1,1
  8167  00181C  501B               	movf	CreateBerry@berry,w,c
  8168  00181E  26E1               	addwf	fsr1l,f,c
  8169  001820  501C               	movf	CreateBerry@berry+1,w,c
  8170  001822  22E2               	addwfc	fsr1h,f,c
  8171  001824  50DE               	movf	postinc2,w,c
  8172  001826  18E6               	xorwf	postinc1,w,c
  8173  001828  A4D8               	btfss	status,2,c
  8174  00182A  D002               	goto	l5197
  8175                           
  8176                           ;snake.c: 94:             {;snake.c: 95:                 randomGood = 1;
  8177  00182C  0E01               	movlw	1
  8178  00182E  6E21               	movwf	CreateBerry@randomGood,c
  8179  001830                     l5197:
  8180                           
  8181                           ;snake.c: 97:         }
  8182  001830  2A22               	incf	CreateBerry@i,f,c
  8183  001832                     l5199:
  8184  001832  C017  FFD9         	movff	CreateBerry@snakeLength,fsr2l
  8185  001836  C018  FFDA         	movff	CreateBerry@snakeLength+1,fsr2h
  8186  00183A  50DE               	movf	postinc2,w,c
  8187  00183C  5C22               	subwf	CreateBerry@i,w,c
  8188  00183E  A0D8               	btfss	status,0,c
  8189  001840  D7C7               	goto	l5191
  8190                           
  8191                           ;snake.c: 98:     }
  8192  001842  0421               	decf	CreateBerry@randomGood,w,c
  8193  001844  A4D8               	btfss	status,2,c
  8194  001846  0012               	return	
  8195  001848  D7AC               	goto	_CreateBerry
  8196  00184A                     __end_of_CreateBerry:
  8197                           	opt callstack 0
  8198                           
  8199 ;; *************** function _genBerry *****************
  8200 ;; Defined at:
  8201 ;;		line 74 in file "snake.c"
  8202 ;; Parameters:    Size  Location     Type
  8203 ;;  size            1    wreg     unsigned char 
  8204 ;; Auto vars:     Size  Location     Type
  8205 ;;  size            1   20[COMRAM] unsigned char 
  8206 ;;  temp            1   21[COMRAM] unsigned char 
  8207 ;; Return value:  Size  Location     Type
  8208 ;;                  1    wreg      unsigned char 
  8209 ;; Registers used:
  8210 ;;		wreg, status,2, status,0, cstack
  8211 ;; Tracked objects:
  8212 ;;		On entry : 0/0
  8213 ;;		On exit  : 0/0
  8214 ;;		Unchanged: 0/0
  8215 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8216 ;;      Params:         0       0       0       0       0       0       0
  8217 ;;      Locals:         2       0       0       0       0       0       0
  8218 ;;      Temps:          0       0       0       0       0       0       0
  8219 ;;      Totals:         2       0       0       0       0       0       0
  8220 ;;Total ram usage:        2 bytes
  8221 ;; Hardware stack levels used:    1
  8222 ;; Hardware stack levels required when called:    5
  8223 ;; This function calls:
  8224 ;;		___lbmod
  8225 ;;		_rnd_get_num
  8226 ;; This function is called by:
  8227 ;;		_CreateBerry
  8228 ;; This function uses a non-reentrant model
  8229 ;;
  8230                           
  8231                           	psect	text54
  8232  00256C                     __ptext54:
  8233                           	opt callstack 0
  8234  00256C                     _genBerry:
  8235                           	opt callstack 22
  8236                           
  8237                           ;incstack = 0
  8238                           ;genBerry@size stored from wreg
  8239  00256C  6E15               	movwf	genBerry@size,c
  8240                           
  8241                           ;snake.c: 74: uint8_t genBerry(uint8_t size);snake.c: 75: {;snake.c: 76:     uint8_t tem
      +                          p;;snake.c: 77:     temp = rnd_get_num();
  8242  00256E  EC8C  F00E         	call	_rnd_get_num	;wreg free
  8243  002572  500D               	movf	?_rnd_get_num,w,c
  8244  002574  6E16               	movwf	genBerry@temp,c
  8245                           
  8246                           ;snake.c: 78:     temp = temp % size;
  8247  002576  C015  F00D         	movff	genBerry@size,___lbmod@divisor
  8248  00257A  5016               	movf	genBerry@temp,w,c
  8249  00257C  EC7D  F011         	call	___lbmod
  8250  002580  6E16               	movwf	genBerry@temp,c
  8251                           
  8252                           ;snake.c: 79:     return temp;
  8253  002582  5016               	movf	genBerry@temp,w,c
  8254  002584  0012               	return		;funcret
  8255  002586                     __end_of_genBerry:
  8256                           	opt callstack 0
  8257                           
  8258 ;; *************** function _rnd_get_num *****************
  8259 ;; Defined at:
  8260 ;;		line 7 in file "randgen.c"
  8261 ;; Parameters:    Size  Location     Type
  8262 ;;		None
  8263 ;; Auto vars:     Size  Location     Type
  8264 ;;  b               2   18[COMRAM] unsigned int 
  8265 ;; Return value:  Size  Location     Type
  8266 ;;                  2   12[COMRAM] unsigned short 
  8267 ;; Registers used:
  8268 ;;		wreg, status,2, status,0
  8269 ;; Tracked objects:
  8270 ;;		On entry : 0/0
  8271 ;;		On exit  : 0/0
  8272 ;;		Unchanged: 0/0
  8273 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8274 ;;      Params:         2       0       0       0       0       0       0
  8275 ;;      Locals:         2       0       0       0       0       0       0
  8276 ;;      Temps:          4       0       0       0       0       0       0
  8277 ;;      Totals:         8       0       0       0       0       0       0
  8278 ;;Total ram usage:        8 bytes
  8279 ;; Hardware stack levels used:    1
  8280 ;; Hardware stack levels required when called:    4
  8281 ;; This function calls:
  8282 ;;		Nothing
  8283 ;; This function is called by:
  8284 ;;		_selectNextObject
  8285 ;;		_genBerry
  8286 ;; This function uses a non-reentrant model
  8287 ;;
  8288                           
  8289                           	psect	text55
  8290  001D18                     __ptext55:
  8291                           	opt callstack 0
  8292  001D18                     _rnd_get_num:
  8293                           	opt callstack 21
  8294                           
  8295                           ;randgen.c: 10:     unsigned b = ((_lfsr >> 0) ^ (_lfsr >> 1) ^ (_lfsr >> 3) ^ (_lfsr >>
      +                           12) ) & 1;
  8296                           
  8297                           ;incstack = 0
  8298  001D18  C059  F00F         	movff	__lfsr,??_rnd_get_num
  8299  001D1C  C05A  F010         	movff	__lfsr+1,??_rnd_get_num+1
  8300  001D20  90D8               	bcf	status,0,c
  8301  001D22  3210               	rrcf	??_rnd_get_num+1,f,c
  8302  001D24  320F               	rrcf	??_rnd_get_num,f,c
  8303  001D26  90D8               	bcf	status,0,c
  8304  001D28  3210               	rrcf	??_rnd_get_num+1,f,c
  8305  001D2A  320F               	rrcf	??_rnd_get_num,f,c
  8306  001D2C  90D8               	bcf	status,0,c
  8307  001D2E  3210               	rrcf	??_rnd_get_num+1,f,c
  8308  001D30  320F               	rrcf	??_rnd_get_num,f,c
  8309  001D32  90D8               	bcf	status,0,c
  8310  001D34  305A               	rrcf	__lfsr+1,w,c
  8311  001D36  6E12               	movwf	(??_rnd_get_num+3)& (0+255),c
  8312  001D38  3059               	rrcf	__lfsr,w,c
  8313  001D3A  6E11               	movwf	(??_rnd_get_num+2)& (0+255),c
  8314  001D3C  500F               	movf	??_rnd_get_num,w,c
  8315  001D3E  1A11               	xorwf	??_rnd_get_num+2,f,c
  8316  001D40  5010               	movf	??_rnd_get_num+1,w,c
  8317  001D42  1A12               	xorwf	??_rnd_get_num+3,f,c
  8318  001D44  385A               	swapf	__lfsr+1,w,c
  8319  001D46  0B0F               	andlw	15
  8320  001D48  1A11               	xorwf	??_rnd_get_num+2,f,c
  8321  001D4A  0E00               	movlw	0
  8322  001D4C  1A12               	xorwf	??_rnd_get_num+3,f,c
  8323  001D4E  5059               	movf	__lfsr,w,c
  8324  001D50  1A11               	xorwf	??_rnd_get_num+2,f,c
  8325  001D52  505A               	movf	__lfsr+1,w,c
  8326  001D54  1A12               	xorwf	??_rnd_get_num+3,f,c
  8327  001D56  0E01               	movlw	1
  8328  001D58  1411               	andwf	??_rnd_get_num+2,w,c
  8329  001D5A  6E13               	movwf	rnd_get_num@b,c
  8330  001D5C  6A14               	clrf	rnd_get_num@b+1,c
  8331                           
  8332                           ;randgen.c: 11:     _lfsr = (_lfsr >> 1) | (b << 15);
  8333  001D5E  C013  F00F         	movff	rnd_get_num@b,??_rnd_get_num
  8334  001D62  C014  F010         	movff	rnd_get_num@b+1,??_rnd_get_num+1
  8335  001D66  0E0F               	movlw	15
  8336  001D68                     u4155:
  8337  001D68  90D8               	bcf	status,0,c
  8338  001D6A  360F               	rlcf	??_rnd_get_num,f,c
  8339  001D6C  3610               	rlcf	??_rnd_get_num+1,f,c
  8340  001D6E  2EE8               	decfsz	wreg,f,c
  8341  001D70  D7FB               	goto	u4155
  8342  001D72  90D8               	bcf	status,0,c
  8343  001D74  305A               	rrcf	__lfsr+1,w,c
  8344  001D76  6E12               	movwf	(??_rnd_get_num+3)& (0+255),c
  8345  001D78  3059               	rrcf	__lfsr,w,c
  8346  001D7A  6E11               	movwf	(??_rnd_get_num+2)& (0+255),c
  8347  001D7C  500F               	movf	??_rnd_get_num,w,c
  8348  001D7E  1011               	iorwf	??_rnd_get_num+2,w,c
  8349  001D80  6E59               	movwf	__lfsr,c
  8350  001D82  5010               	movf	??_rnd_get_num+1,w,c
  8351  001D84  1012               	iorwf	??_rnd_get_num+3,w,c
  8352  001D86  6E5A               	movwf	__lfsr+1,c
  8353                           
  8354                           ;randgen.c: 12:     return _lfsr;
  8355  001D88  C059  F00D         	movff	__lfsr,?_rnd_get_num
  8356  001D8C  C05A  F00E         	movff	__lfsr+1,?_rnd_get_num+1
  8357  001D90  0012               	return		;funcret
  8358  001D92                     __end_of_rnd_get_num:
  8359                           	opt callstack 0
  8360                           
  8361 ;; *************** function ___lbmod *****************
  8362 ;; Defined at:
  8363 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\lbmod.c"
  8364 ;; Parameters:    Size  Location     Type
  8365 ;;  dividend        1    wreg     unsigned char 
  8366 ;;  divisor         1   12[COMRAM] unsigned char 
  8367 ;; Auto vars:     Size  Location     Type
  8368 ;;  dividend        1   13[COMRAM] unsigned char 
  8369 ;;  rem             1   15[COMRAM] unsigned char 
  8370 ;;  counter         1   14[COMRAM] unsigned char 
  8371 ;; Return value:  Size  Location     Type
  8372 ;;                  1    wreg      unsigned char 
  8373 ;; Registers used:
  8374 ;;		wreg, status,2, status,0
  8375 ;; Tracked objects:
  8376 ;;		On entry : 0/0
  8377 ;;		On exit  : 0/0
  8378 ;;		Unchanged: 0/0
  8379 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8380 ;;      Params:         1       0       0       0       0       0       0
  8381 ;;      Locals:         3       0       0       0       0       0       0
  8382 ;;      Temps:          0       0       0       0       0       0       0
  8383 ;;      Totals:         4       0       0       0       0       0       0
  8384 ;;Total ram usage:        4 bytes
  8385 ;; Hardware stack levels used:    1
  8386 ;; Hardware stack levels required when called:    4
  8387 ;; This function calls:
  8388 ;;		Nothing
  8389 ;; This function is called by:
  8390 ;;		_genBerry
  8391 ;; This function uses a non-reentrant model
  8392 ;;
  8393                           
  8394                           	psect	text56
  8395  0022FA                     __ptext56:
  8396                           	opt callstack 0
  8397  0022FA                     ___lbmod:
  8398                           	opt callstack 22
  8399                           
  8400                           ;incstack = 0
  8401                           ;___lbmod@dividend stored from wreg
  8402  0022FA  6E0E               	movwf	___lbmod@dividend,c
  8403  0022FC  0E08               	movlw	8
  8404  0022FE  6E0F               	movwf	___lbmod@counter,c
  8405  002300  0E00               	movlw	0
  8406  002302  6E10               	movwf	___lbmod@rem,c
  8407  002304                     l3245:
  8408  002304  90D8               	bcf	status,0,c
  8409  002306  340E               	rlcf	___lbmod@dividend,w,c
  8410  002308  3410               	rlcf	___lbmod@rem,w,c
  8411  00230A  6E10               	movwf	___lbmod@rem,c
  8412  00230C  90D8               	bcf	status,0,c
  8413  00230E  360E               	rlcf	___lbmod@dividend,f,c
  8414  002310  500D               	movf	___lbmod@divisor,w,c
  8415  002312  5C10               	subwf	___lbmod@rem,w,c
  8416  002314  A0D8               	btfss	status,0,c
  8417  002316  D002               	goto	l3253
  8418  002318  500D               	movf	___lbmod@divisor,w,c
  8419  00231A  5E10               	subwf	___lbmod@rem,f,c
  8420  00231C                     l3253:
  8421  00231C  2E0F               	decfsz	___lbmod@counter,f,c
  8422  00231E  D7F2               	goto	l3245
  8423  002320  5010               	movf	___lbmod@rem,w,c
  8424  002322  0012               	return		;funcret
  8425  002324                     __end_of___lbmod:
  8426                           	opt callstack 0
  8427                           
  8428 ;; *************** function _rnd_initialize *****************
  8429 ;; Defined at:
  8430 ;;		line 16 in file "randgen.c"
  8431 ;; Parameters:    Size  Location     Type
  8432 ;;  input           1    wreg     unsigned char 
  8433 ;; Auto vars:     Size  Location     Type
  8434 ;;  input           1   12[COMRAM] unsigned char 
  8435 ;; Return value:  Size  Location     Type
  8436 ;;                  1    wreg      void 
  8437 ;; Registers used:
  8438 ;;		wreg
  8439 ;; Tracked objects:
  8440 ;;		On entry : 0/0
  8441 ;;		On exit  : 0/0
  8442 ;;		Unchanged: 0/0
  8443 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8444 ;;      Params:         0       0       0       0       0       0       0
  8445 ;;      Locals:         1       0       0       0       0       0       0
  8446 ;;      Temps:          0       0       0       0       0       0       0
  8447 ;;      Totals:         1       0       0       0       0       0       0
  8448 ;;Total ram usage:        1 bytes
  8449 ;; Hardware stack levels used:    1
  8450 ;; Hardware stack levels required when called:    4
  8451 ;; This function calls:
  8452 ;;		Nothing
  8453 ;; This function is called by:
  8454 ;;		_main
  8455 ;; This function uses a non-reentrant model
  8456 ;;
  8457                           
  8458                           	psect	text57
  8459  00261A                     __ptext57:
  8460                           	opt callstack 0
  8461  00261A                     _rnd_initialize:
  8462                           	opt callstack 26
  8463                           
  8464                           ;incstack = 0
  8465                           ;rnd_initialize@input stored from wreg
  8466  00261A  6E0D               	movwf	rnd_initialize@input,c
  8467                           
  8468                           ;randgen.c: 16: void rnd_initialize(uint8_t input);randgen.c: 17: {;randgen.c: 18:     _
      +                          lfsr = input;
  8469  00261C  C00D  F059         	movff	rnd_initialize@input,__lfsr
  8470  002620  6A5A               	clrf	__lfsr+1,c
  8471  002622  0012               	return		;funcret
  8472  002624                     __end_of_rnd_initialize:
  8473                           	opt callstack 0
  8474                           
  8475 ;; *************** function _initialise_screen *****************
  8476 ;; Defined at:
  8477 ;;		line 13 in file "screen.c"
  8478 ;; Parameters:    Size  Location     Type
  8479 ;;		None
  8480 ;; Auto vars:     Size  Location     Type
  8481 ;;		None
  8482 ;; Return value:  Size  Location     Type
  8483 ;;                  1    wreg      void 
  8484 ;; Registers used:
  8485 ;;		wreg, status,2
  8486 ;; Tracked objects:
  8487 ;;		On entry : 0/0
  8488 ;;		On exit  : 0/0
  8489 ;;		Unchanged: 0/0
  8490 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8491 ;;      Params:         0       0       0       0       0       0       0
  8492 ;;      Locals:         0       0       0       0       0       0       0
  8493 ;;      Temps:          0       0       0       0       0       0       0
  8494 ;;      Totals:         0       0       0       0       0       0       0
  8495 ;;Total ram usage:        0 bytes
  8496 ;; Hardware stack levels used:    1
  8497 ;; Hardware stack levels required when called:    4
  8498 ;; This function calls:
  8499 ;;		Nothing
  8500 ;; This function is called by:
  8501 ;;		_main
  8502 ;; This function uses a non-reentrant model
  8503 ;;
  8504                           
  8505                           	psect	text58
  8506  002656                     __ptext58:
  8507                           	opt callstack 0
  8508  002656                     _initialise_screen:
  8509                           	opt callstack 26
  8510                           
  8511                           ;screen.c: 15:     UpdateScreen = 1;
  8512                           
  8513                           ;incstack = 0
  8514  002656  0E01               	movlw	1
  8515  002658  6E5B               	movwf	_UpdateScreen,c	;volatile
  8516  00265A  0012               	return		;funcret
  8517  00265C                     __end_of_initialise_screen:
  8518                           	opt callstack 0
  8519                           
  8520 ;; *************** function _initialise_hardware *****************
  8521 ;; Defined at:
  8522 ;;		line 59 in file "pictris.c"
  8523 ;; Parameters:    Size  Location     Type
  8524 ;;		None
  8525 ;; Auto vars:     Size  Location     Type
  8526 ;;		None
  8527 ;; Return value:  Size  Location     Type
  8528 ;;                  1    wreg      void 
  8529 ;; Registers used:
  8530 ;;		wreg, status,2, cstack
  8531 ;; Tracked objects:
  8532 ;;		On entry : 0/0
  8533 ;;		On exit  : 0/0
  8534 ;;		Unchanged: 0/0
  8535 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8536 ;;      Params:         0       0       0       0       0       0       0
  8537 ;;      Locals:         0       0       0       0       0       0       0
  8538 ;;      Temps:          0       0       0       0       0       0       0
  8539 ;;      Totals:         0       0       0       0       0       0       0
  8540 ;;Total ram usage:        0 bytes
  8541 ;; Hardware stack levels used:    1
  8542 ;; Hardware stack levels required when called:    5
  8543 ;; This function calls:
  8544 ;;		_initialise_TMR0
  8545 ;; This function is called by:
  8546 ;;		_main
  8547 ;; This function uses a non-reentrant model
  8548 ;;
  8549                           
  8550                           	psect	text59
  8551  002122                     __ptext59:
  8552                           	opt callstack 0
  8553  002122                     _initialise_hardware:
  8554                           	opt callstack 25
  8555                           
  8556                           ;pictris.c: 62:     OSCCONbits.IDLEN = 0;
  8557                           
  8558                           ;incstack = 0
  8559  002122  9ED3               	bcf	4051,7,c	;volatile
  8560                           
  8561                           ;pictris.c: 63:     OSCCONbits.IRCF = 0x7;
  8562  002124  0E70               	movlw	112
  8563  002126  12D3               	iorwf	4051,f,c	;volatile
  8564                           
  8565                           ;pictris.c: 64:     OSCCONbits.SCS = 0x2;
  8566  002128  50D3               	movf	4051,w,c	;volatile
  8567  00212A  0BFC               	andlw	-4
  8568  00212C  0902               	iorlw	2
  8569  00212E  6ED3               	movwf	4051,c	;volatile
  8570                           
  8571                           ;pictris.c: 67:     ADCON1bits.PCFG = 0x0F;
  8572  002130  0E0F               	movlw	15
  8573  002132  12C1               	iorwf	4033,f,c	;volatile
  8574                           
  8575                           ;pictris.c: 70:     DDRA = 0x00;
  8576  002134  0E00               	movlw	0
  8577  002136  6E92               	movwf	3986,c	;volatile
  8578                           
  8579                           ;pictris.c: 71:     PORTA = 0x00;
  8580  002138  0E00               	movlw	0
  8581  00213A  6E80               	movwf	3968,c	;volatile
  8582                           
  8583                           ;pictris.c: 72:     DDRB = 0xFF;
  8584  00213C  6893               	setf	3987,c	;volatile
  8585                           
  8586                           ;pictris.c: 73:     PORTB = 0x00;
  8587  00213E  0E00               	movlw	0
  8588  002140  6E81               	movwf	3969,c	;volatile
  8589                           
  8590                           ;pictris.c: 74:     INTCON2bits.RBPU = 0;
  8591  002142  9EF1               	bcf	4081,7,c	;volatile
  8592                           
  8593                           ;pictris.c: 75:     DDRC = 0x00;
  8594  002144  0E00               	movlw	0
  8595  002146  6E94               	movwf	3988,c	;volatile
  8596                           
  8597                           ;pictris.c: 76:     PORTC = 0x00;
  8598  002148  0E00               	movlw	0
  8599  00214A  6E82               	movwf	3970,c	;volatile
  8600                           
  8601                           ;pictris.c: 77:     DDRD = 0x00;
  8602  00214C  0E00               	movlw	0
  8603  00214E  6E95               	movwf	3989,c	;volatile
  8604                           
  8605                           ;pictris.c: 78:     PORTD = 0x00;
  8606  002150  0E00               	movlw	0
  8607  002152  6E83               	movwf	3971,c	;volatile
  8608                           
  8609                           ;pictris.c: 80:     initialise_TMR0();
  8610  002154  EC70  F012         	call	_initialise_TMR0	;wreg free
  8611                           
  8612                           ;pictris.c: 82:     IPEN = 0;
  8613  002158  9ED0               	bcf	4048,7,c	;volatile
  8614                           
  8615                           ;pictris.c: 83:     GIE = 1;
  8616  00215A  8EF2               	bsf	4082,7,c	;volatile
  8617  00215C  0012               	return		;funcret
  8618  00215E                     __end_of_initialise_hardware:
  8619                           	opt callstack 0
  8620                           
  8621 ;; *************** function _initialise_TMR0 *****************
  8622 ;; Defined at:
  8623 ;;		line 47 in file "pictris.c"
  8624 ;; Parameters:    Size  Location     Type
  8625 ;;		None
  8626 ;; Auto vars:     Size  Location     Type
  8627 ;;		None
  8628 ;; Return value:  Size  Location     Type
  8629 ;;                  1    wreg      void 
  8630 ;; Registers used:
  8631 ;;		wreg, status,2
  8632 ;; Tracked objects:
  8633 ;;		On entry : 0/0
  8634 ;;		On exit  : 0/0
  8635 ;;		Unchanged: 0/0
  8636 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8637 ;;      Params:         0       0       0       0       0       0       0
  8638 ;;      Locals:         0       0       0       0       0       0       0
  8639 ;;      Temps:          0       0       0       0       0       0       0
  8640 ;;      Totals:         0       0       0       0       0       0       0
  8641 ;;Total ram usage:        0 bytes
  8642 ;; Hardware stack levels used:    1
  8643 ;; Hardware stack levels required when called:    4
  8644 ;; This function calls:
  8645 ;;		Nothing
  8646 ;; This function is called by:
  8647 ;;		_initialise_hardware
  8648 ;; This function uses a non-reentrant model
  8649 ;;
  8650                           
  8651                           	psect	text60
  8652  0024E0                     __ptext60:
  8653                           	opt callstack 0
  8654  0024E0                     _initialise_TMR0:
  8655                           	opt callstack 25
  8656                           
  8657                           ;pictris.c: 49:     T0CONbits.T0PS = 0x3;
  8658                           
  8659                           ;incstack = 0
  8660  0024E0  50D5               	movf	4053,w,c	;volatile
  8661  0024E2  0BF8               	andlw	-8
  8662  0024E4  0903               	iorlw	3
  8663  0024E6  6ED5               	movwf	4053,c	;volatile
  8664                           
  8665                           ;pictris.c: 50:     PSA = 0;
  8666  0024E8  96D5               	bcf	4053,3,c	;volatile
  8667                           
  8668                           ;pictris.c: 51:     T0CS = 0;
  8669  0024EA  9AD5               	bcf	4053,5,c	;volatile
  8670                           
  8671                           ;pictris.c: 52:     TMR0ON = 1;
  8672  0024EC  8ED5               	bsf	4053,7,c	;volatile
  8673                           
  8674                           ;pictris.c: 53:     TMR0 = (~125);
  8675  0024EE  0EFF               	movlw	255
  8676  0024F0  6ED7               	movwf	4055,c	;volatile
  8677  0024F2  0E82               	movlw	130
  8678  0024F4  6ED6               	movwf	4054,c	;volatile
  8679                           
  8680                           ;pictris.c: 54:     INTCONbits.TMR0IF = 0;
  8681  0024F6  94F2               	bcf	4082,2,c	;volatile
  8682                           
  8683                           ;pictris.c: 55:     TMR0IE = 1;
  8684  0024F8  8AF2               	bsf	4082,5,c	;volatile
  8685                           
  8686                           ;pictris.c: 56:     TMR0ON = 1;
  8687  0024FA  8ED5               	bsf	4053,7,c	;volatile
  8688  0024FC  0012               	return		;funcret
  8689  0024FE                     __end_of_initialise_TMR0:
  8690                           	opt callstack 0
  8691                           
  8692 ;; *************** function _get_mS *****************
  8693 ;; Defined at:
  8694 ;;		line 27 in file "shared_logic.c"
  8695 ;; Parameters:    Size  Location     Type
  8696 ;;		None
  8697 ;; Auto vars:     Size  Location     Type
  8698 ;;		None
  8699 ;; Return value:  Size  Location     Type
  8700 ;;                  2   12[COMRAM] unsigned short 
  8701 ;; Registers used:
  8702 ;;		None
  8703 ;; Tracked objects:
  8704 ;;		On entry : 0/0
  8705 ;;		On exit  : 0/0
  8706 ;;		Unchanged: 0/0
  8707 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8708 ;;      Params:         2       0       0       0       0       0       0
  8709 ;;      Locals:         0       0       0       0       0       0       0
  8710 ;;      Temps:          0       0       0       0       0       0       0
  8711 ;;      Totals:         2       0       0       0       0       0       0
  8712 ;;Total ram usage:        2 bytes
  8713 ;; Hardware stack levels used:    1
  8714 ;; Hardware stack levels required when called:    4
  8715 ;; This function calls:
  8716 ;;		Nothing
  8717 ;; This function is called by:
  8718 ;;		_main
  8719 ;; This function uses a non-reentrant model
  8720 ;;
  8721                           
  8722                           	psect	text61
  8723  002624                     __ptext61:
  8724                           	opt callstack 0
  8725  002624                     _get_mS:
  8726                           	opt callstack 26
  8727                           
  8728                           ;shared_logic.c: 29:     return mS;
  8729                           
  8730                           ;incstack = 0
  8731  002624  C057  F00D         	movff	_mS,?_get_mS	;volatile
  8732  002628  C058  F00E         	movff	_mS+1,?_get_mS+1	;volatile
  8733  00262C  0012               	return		;funcret
  8734  00262E                     __end_of_get_mS:
  8735                           	opt callstack 0
  8736                           
  8737 ;; *************** function _choosescreen *****************
  8738 ;; Defined at:
  8739 ;;		line 46 in file "screen.c"
  8740 ;; Parameters:    Size  Location     Type
  8741 ;;		None
  8742 ;; Auto vars:     Size  Location     Type
  8743 ;;  i               2   63[COMRAM] int 
  8744 ;;  i               2   61[COMRAM] int 
  8745 ;;  i               1   65[COMRAM] unsigned char 
  8746 ;;  mask           16   44[COMRAM] unsigned short [8]
  8747 ;;  choosescreen   16   28[COMRAM] unsigned short [8]
  8748 ;;  game            1   60[COMRAM] _Bool 
  8749 ;; Return value:  Size  Location     Type
  8750 ;;                  1    wreg      _Bool 
  8751 ;; Registers used:
  8752 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  8753 ;; Tracked objects:
  8754 ;;		On entry : 0/0
  8755 ;;		On exit  : 0/0
  8756 ;;		Unchanged: 0/0
  8757 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8758 ;;      Params:         0       0       0       0       0       0       0
  8759 ;;      Locals:        38       0       0       0       0       0       0
  8760 ;;      Temps:          4       0       0       0       0       0       0
  8761 ;;      Totals:        42       0       0       0       0       0       0
  8762 ;;Total ram usage:       42 bytes
  8763 ;; Hardware stack levels used:    1
  8764 ;; Hardware stack levels required when called:    7
  8765 ;; This function calls:
  8766 ;;		_checkDown
  8767 ;;		_checkUp
  8768 ;;		_mergeObjects
  8769 ;;		_pauseMultiplexing
  8770 ;;		_resumeMultiplexing
  8771 ;;		_set_splashscreen
  8772 ;; This function is called by:
  8773 ;;		_main
  8774 ;; This function uses a non-reentrant model
  8775 ;;
  8776                           
  8777                           	psect	text62
  8778  000C44                     __ptext62:
  8779                           	opt callstack 0
  8780  000C44                     _choosescreen:
  8781                           	opt callstack 23
  8782                           
  8783                           ;screen.c: 48:     {;screen.c: 49:         uint16_t choosescreen[8]; {const uint16_t cho
      +                          osescreen1[] = {0x00FF,0x0081,0x0081,0x008D,0x0099,0x0081,0x0081,0x00FF,};; const uint16
      +                          _t choosescreen2[] = {0xFF00,0x8100,0xBD00,0x8500,0x8500,0xAD00,0x8100,0xFF00,};; {uint8
      +                          _t i; for(i=0;i<8;i++){choosescreen[i] = choosescreen1[i] | choosescreen2[i];}}};
  8784                           
  8785                           ;incstack = 0
  8786  000C44  0E00               	movlw	0
  8787  000C46  6E42               	movwf	choosescreen@i,c
  8788  000C48                     l5543:
  8789  000C48  5042               	movf	choosescreen@i,w,c
  8790  000C4A  0D02               	mullw	2
  8791  000C4C  0E1F               	movlw	low choosescreen@choosescreen2
  8792  000C4E  24F3               	addwf	prodl,w,c
  8793  000C50  6EF6               	movwf	tblptrl,c
  8794  000C52  0E7F               	movlw	high choosescreen@choosescreen2
  8795  000C54  20F4               	addwfc	prodh,w,c
  8796  000C56  6EF7               	movwf	tblptrh,c
  8797  000C58                     	if	0	;There are less than 3 active tblptr bytes
  8798  000C58                     	endif
  8799  000C58  0009               	tblrd		*+
  8800  000C5A  CFF5 F019          	movff	tablat,??_choosescreen
  8801  000C5E  0009               	tblrd		*+
  8802  000C60  CFF5 F01A          	movff	tablat,??_choosescreen+1
  8803  000C64  5042               	movf	choosescreen@i,w,c
  8804  000C66  0D02               	mullw	2
  8805  000C68  0E2F               	movlw	low choosescreen@choosescreen1
  8806  000C6A  24F3               	addwf	prodl,w,c
  8807  000C6C  6EF6               	movwf	tblptrl,c
  8808  000C6E  0E7F               	movlw	high choosescreen@choosescreen1
  8809  000C70  20F4               	addwfc	prodh,w,c
  8810  000C72  6EF7               	movwf	tblptrh,c
  8811  000C74                     	if	0	;There are less than 3 active tblptr bytes
  8812  000C74                     	endif
  8813  000C74  0009               	tblrd		*+
  8814  000C76  CFF5 F01B          	movff	tablat,??_choosescreen+2
  8815  000C7A  0009               	tblrd		*+
  8816  000C7C  CFF5 F01C          	movff	tablat,??_choosescreen+3
  8817  000C80  5019               	movf	??_choosescreen,w,c
  8818  000C82  121B               	iorwf	??_choosescreen+2,f,c
  8819  000C84  501A               	movf	??_choosescreen+1,w,c
  8820  000C86  121C               	iorwf	??_choosescreen+3,f,c
  8821  000C88  5042               	movf	choosescreen@i,w,c
  8822  000C8A  0D02               	mullw	2
  8823  000C8C  0E1D               	movlw	low choosescreen@choosescreen
  8824  000C8E  24F3               	addwf	prodl,w,c
  8825  000C90  6ED9               	movwf	fsr2l,c
  8826  000C92  0E00               	movlw	high choosescreen@choosescreen
  8827  000C94  20F4               	addwfc	prodh,w,c
  8828  000C96  6EDA               	movwf	fsr2h,c
  8829  000C98  C01B  FFDE         	movff	??_choosescreen+2,postinc2
  8830  000C9C  C01C  FFDD         	movff	??_choosescreen+3,postdec2
  8831  000CA0  2A42               	incf	choosescreen@i,f,c
  8832  000CA2  0E07               	movlw	7
  8833  000CA4  6442               	cpfsgt	choosescreen@i,c
  8834  000CA6  D7D0               	goto	l5543
  8835                           
  8836                           ;screen.c: 50:         set_splashscreen(choosescreen);
  8837  000CA8  0E1D               	movlw	low choosescreen@choosescreen
  8838  000CAA  6E17               	movwf	set_splashscreen@newData,c
  8839  000CAC  0E00               	movlw	high choosescreen@choosescreen
  8840  000CAE  6E18               	movwf	set_splashscreen@newData+1,c
  8841  000CB0  EC19  F012         	call	_set_splashscreen	;wreg free
  8842  000CB4                     l5551:
  8843                           
  8844                           ;screen.c: 53:     while(checkDown(0) || checkUp(0))
  8845  000CB4  0E00               	movlw	0
  8846  000CB6  EC3F  F012         	call	_checkDown
  8847  000CBA  0900               	iorlw	0
  8848  000CBC  A4D8               	btfss	status,2,c
  8849  000CBE  D7FA               	goto	l5551
  8850  000CC0  0E00               	movlw	0
  8851  000CC2  EC2C  F012         	call	_checkUp
  8852  000CC6  0900               	iorlw	0
  8853  000CC8  A4D8               	btfss	status,2,c
  8854  000CCA  D7F4               	goto	l5551
  8855  000CCC                     u5680:
  8856                           
  8857                           ;screen.c: 58:     while(!checkDown(0) && !checkUp(0))
  8858  000CCC  0E00               	movlw	0
  8859  000CCE  EC3F  F012         	call	_checkDown
  8860  000CD2  0900               	iorlw	0
  8861  000CD4  A4D8               	btfss	status,2,c
  8862  000CD6  D006               	goto	u5700
  8863  000CD8  0E00               	movlw	0
  8864  000CDA  EC2C  F012         	call	_checkUp
  8865  000CDE  0900               	iorlw	0
  8866  000CE0  B4D8               	btfsc	status,2,c
  8867  000CE2  D7F4               	goto	u5680
  8868  000CE4                     u5700:
  8869                           
  8870                           ;screen.c: 62:     _Bool game;;screen.c: 63:     {;screen.c: 64:         uint16_t mask[8
      +                          ];;screen.c: 65:         if(checkDown(0) == 1)
  8871  000CE4  0E00               	movlw	0
  8872  000CE6  EC3F  F012         	call	_checkDown
  8873  000CEA  06E8               	decf	wreg,f,c
  8874  000CEC  A4D8               	btfss	status,2,c
  8875  000CEE  D01D               	goto	l5575
  8876                           
  8877                           ;screen.c: 66:         {;screen.c: 67:             for(int i = 0; i < 8; i++)
  8878  000CF0  0E00               	movlw	0
  8879  000CF2  6E3F               	movwf	choosescreen@i_1068+1,c
  8880  000CF4  0E00               	movlw	0
  8881  000CF6  6E3E               	movwf	choosescreen@i_1068,c
  8882  000CF8                     l5567:
  8883                           
  8884                           ;screen.c: 68:             {;screen.c: 69:                 mask[i] = 0xFF00;
  8885  000CF8  90D8               	bcf	status,0,c
  8886  000CFA  343E               	rlcf	choosescreen@i_1068,w,c
  8887  000CFC  6ED9               	movwf	fsr2l,c
  8888  000CFE  343F               	rlcf	choosescreen@i_1068+1,w,c
  8889  000D00  6EDA               	movwf	fsr2h,c
  8890  000D02  0E2D               	movlw	low choosescreen@mask
  8891  000D04  26D9               	addwf	fsr2l,f,c
  8892  000D06  0E00               	movlw	high choosescreen@mask
  8893  000D08  22DA               	addwfc	fsr2h,f,c
  8894  000D0A  0E00               	movlw	0
  8895  000D0C  6EDE               	movwf	postinc2,c
  8896  000D0E  0EFF               	movlw	255
  8897  000D10  6EDD               	movwf	postdec2,c
  8898                           
  8899                           ;screen.c: 70:             }
  8900  000D12  4A3E               	infsnz	choosescreen@i_1068,f,c
  8901  000D14  2A3F               	incf	choosescreen@i_1068+1,f,c
  8902  000D16  BE3F               	btfsc	choosescreen@i_1068+1,7,c
  8903  000D18  D7EF               	goto	l5567
  8904  000D1A  503F               	movf	choosescreen@i_1068+1,w,c
  8905  000D1C  E104               	bnz	u5720
  8906  000D1E  0E08               	movlw	8
  8907  000D20  5C3E               	subwf	choosescreen@i_1068,w,c
  8908  000D22  A0D8               	btfss	status,0,c
  8909  000D24  D7E9               	goto	l5567
  8910  000D26                     u5720:
  8911                           
  8912                           ;screen.c: 71:             game = 0;
  8913  000D26  0E00               	movlw	0
  8914  000D28  D022               	goto	L6
  8915  000D2A                     l5575:
  8916                           
  8917                           ;screen.c: 74:         {;screen.c: 75:             if(checkUp(0) == 1)
  8918  000D2A  0E00               	movlw	0
  8919  000D2C  EC2C  F012         	call	_checkUp
  8920  000D30  06E8               	decf	wreg,f,c
  8921  000D32  A4D8               	btfss	status,2,c
  8922  000D34  D01D               	goto	l5591
  8923                           
  8924                           ;screen.c: 76:             {;screen.c: 77:                 for(int i = 0; i < 8; i++)
  8925  000D36  0E00               	movlw	0
  8926  000D38  6E41               	movwf	choosescreen@i_1069+1,c
  8927  000D3A  0E00               	movlw	0
  8928  000D3C  6E40               	movwf	choosescreen@i_1069,c
  8929  000D3E                     l5583:
  8930                           
  8931                           ;screen.c: 78:                 {;screen.c: 79:                     mask[i] = 0x00FF;
  8932  000D3E  90D8               	bcf	status,0,c
  8933  000D40  3440               	rlcf	choosescreen@i_1069,w,c
  8934  000D42  6ED9               	movwf	fsr2l,c
  8935  000D44  3441               	rlcf	choosescreen@i_1069+1,w,c
  8936  000D46  6EDA               	movwf	fsr2h,c
  8937  000D48  0E2D               	movlw	low choosescreen@mask
  8938  000D4A  26D9               	addwf	fsr2l,f,c
  8939  000D4C  0E00               	movlw	high choosescreen@mask
  8940  000D4E  22DA               	addwfc	fsr2h,f,c
  8941  000D50  0EFF               	movlw	255
  8942  000D52  6EDE               	movwf	postinc2,c
  8943  000D54  0E00               	movlw	0
  8944  000D56  6EDD               	movwf	postdec2,c
  8945                           
  8946                           ;screen.c: 80:                 }
  8947  000D58  4A40               	infsnz	choosescreen@i_1069,f,c
  8948  000D5A  2A41               	incf	choosescreen@i_1069+1,f,c
  8949  000D5C  BE41               	btfsc	choosescreen@i_1069+1,7,c
  8950  000D5E  D7EF               	goto	l5583
  8951  000D60  5041               	movf	choosescreen@i_1069+1,w,c
  8952  000D62  E104               	bnz	u5740
  8953  000D64  0E08               	movlw	8
  8954  000D66  5C40               	subwf	choosescreen@i_1069,w,c
  8955  000D68  A0D8               	btfss	status,0,c
  8956  000D6A  D7E9               	goto	l5583
  8957  000D6C                     u5740:
  8958                           
  8959                           ;screen.c: 81:                 game = 1;
  8960  000D6C  0E01               	movlw	1
  8961  000D6E                     L6:
  8962  000D6E  6E3D               	movwf	choosescreen@game,c
  8963  000D70                     l5591:
  8964                           
  8965                           ;screen.c: 84:         pauseMultiplexing();
  8966  000D70  ECF3  F012         	call	_pauseMultiplexing	;wreg free
  8967                           
  8968                           ;screen.c: 85:         mergeObjects(mask, ScreenData, INVERT);
  8969  000D74  0E2D               	movlw	low choosescreen@mask
  8970  000D76  6E0D               	movwf	mergeObjects@pSource,c
  8971  000D78  0E00               	movlw	high choosescreen@mask
  8972  000D7A  6E0E               	movwf	mergeObjects@pSource+1,c
  8973  000D7C  0EB8               	movlw	low _ScreenData
  8974  000D7E  6E0F               	movwf	mergeObjects@pTarget,c
  8975  000D80  0E00               	movlw	high _ScreenData
  8976  000D82  6E10               	movwf	mergeObjects@pTarget+1,c
  8977  000D84  0E02               	movlw	2
  8978  000D86  6E11               	movwf	mergeObjects@mode,c
  8979  000D88  ECBB  F009         	call	_mergeObjects	;wreg free
  8980                           
  8981                           ;screen.c: 86:         resumeMultiplexing();
  8982  000D8C  EC2E  F013         	call	_resumeMultiplexing	;wreg free
  8983  000D90                     l5597:
  8984                           
  8985                           ;screen.c: 90:     while(checkDown(0) || checkUp(0))
  8986  000D90  0E00               	movlw	0
  8987  000D92  EC3F  F012         	call	_checkDown
  8988  000D96  0900               	iorlw	0
  8989  000D98  A4D8               	btfss	status,2,c
  8990  000D9A  D7FA               	goto	l5597
  8991  000D9C  0E00               	movlw	0
  8992  000D9E  EC2C  F012         	call	_checkUp
  8993  000DA2  0900               	iorlw	0
  8994  000DA4  A4D8               	btfss	status,2,c
  8995  000DA6  D7F4               	goto	l5597
  8996                           
  8997                           ;screen.c: 94:     return game;
  8998  000DA8  503D               	movf	choosescreen@game,w,c
  8999  000DAA  0012               	return		;funcret
  9000  000DAC                     __end_of_choosescreen:
  9001                           	opt callstack 0
  9002                           
  9003 ;; *************** function _set_splashscreen *****************
  9004 ;; Defined at:
  9005 ;;		line 39 in file "screen.c"
  9006 ;; Parameters:    Size  Location     Type
  9007 ;;  newData         2   22[COMRAM] PTR const unsigned short
  9008 ;;		 -> choosescreen@choosescreen(16), snake_screen@SNAKE(16), TETRIS(16), 
  9009 ;; Auto vars:     Size  Location     Type
  9010 ;;		None
  9011 ;; Return value:  Size  Location     Type
  9012 ;;                  1    wreg      void 
  9013 ;; Registers used:
  9014 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  9015 ;; Tracked objects:
  9016 ;;		On entry : 0/0
  9017 ;;		On exit  : 0/0
  9018 ;;		Unchanged: 0/0
  9019 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9020 ;;      Params:         2       0       0       0       0       0       0
  9021 ;;      Locals:         0       0       0       0       0       0       0
  9022 ;;      Temps:          0       0       0       0       0       0       0
  9023 ;;      Totals:         2       0       0       0       0       0       0
  9024 ;;Total ram usage:        2 bytes
  9025 ;; Hardware stack levels used:    1
  9026 ;; Hardware stack levels required when called:    6
  9027 ;; This function calls:
  9028 ;;		_memcpyvol
  9029 ;;		_pauseMultiplexing
  9030 ;;		_resumeMultiplexing
  9031 ;; This function is called by:
  9032 ;;		_tetris_screen
  9033 ;;		_snake_screen
  9034 ;;		_choosescreen
  9035 ;; This function uses a non-reentrant model
  9036 ;;
  9037                           
  9038                           	psect	text63
  9039  002432                     __ptext63:
  9040                           	opt callstack 0
  9041  002432                     _set_splashscreen:
  9042                           	opt callstack 22
  9043                           
  9044                           ;screen.c: 39: void set_splashscreen(const uint16_t *newData);screen.c: 40: {;screen.c: 
      +                          41:     pauseMultiplexing();
  9045                           
  9046                           ;incstack = 0
  9047  002432  ECF3  F012         	call	_pauseMultiplexing	;wreg free
  9048                           
  9049                           ;screen.c: 42:     memcpyvol(ScreenData, newData, 16);
  9050  002436  0EB8               	movlw	low _ScreenData
  9051  002438  6E0D               	movwf	memcpyvol@dest,c
  9052  00243A  0E00               	movlw	high _ScreenData
  9053  00243C  6E0E               	movwf	memcpyvol@dest+1,c
  9054  00243E  C017  F00F         	movff	set_splashscreen@newData,memcpyvol@src
  9055  002442  C018  F010         	movff	set_splashscreen@newData+1,memcpyvol@src+1
  9056  002446  0E00               	movlw	0
  9057  002448  6E12               	movwf	memcpyvol@n+1,c
  9058  00244A  0E10               	movlw	16
  9059  00244C  6E11               	movwf	memcpyvol@n,c
  9060  00244E  ECD4  F00F         	call	_memcpyvol	;wreg free
  9061                           
  9062                           ;screen.c: 43:     resumeMultiplexing();
  9063  002452  EC2E  F013         	call	_resumeMultiplexing	;wreg free
  9064  002456  0012               	return		;funcret
  9065  002458                     __end_of_set_splashscreen:
  9066                           	opt callstack 0
  9067                           
  9068 ;; *************** function _resumeMultiplexing *****************
  9069 ;; Defined at:
  9070 ;;		line 27 in file "screen.c"
  9071 ;; Parameters:    Size  Location     Type
  9072 ;;		None
  9073 ;; Auto vars:     Size  Location     Type
  9074 ;;		None
  9075 ;; Return value:  Size  Location     Type
  9076 ;;                  1    wreg      void 
  9077 ;; Registers used:
  9078 ;;		wreg, status,2
  9079 ;; Tracked objects:
  9080 ;;		On entry : 0/0
  9081 ;;		On exit  : 0/0
  9082 ;;		Unchanged: 0/0
  9083 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9084 ;;      Params:         0       0       0       0       0       0       0
  9085 ;;      Locals:         0       0       0       0       0       0       0
  9086 ;;      Temps:          0       0       0       0       0       0       0
  9087 ;;      Totals:         0       0       0       0       0       0       0
  9088 ;;Total ram usage:        0 bytes
  9089 ;; Hardware stack levels used:    1
  9090 ;; Hardware stack levels required when called:    4
  9091 ;; This function calls:
  9092 ;;		Nothing
  9093 ;; This function is called by:
  9094 ;;		_tetris_button_left
  9095 ;;		_tetris_button_right
  9096 ;;		_show_score
  9097 ;;		_set_screen
  9098 ;;		_set_splashscreen
  9099 ;;		_choosescreen
  9100 ;; This function uses a non-reentrant model
  9101 ;;
  9102                           
  9103                           	psect	text64
  9104  00265C                     __ptext64:
  9105                           	opt callstack 0
  9106  00265C                     _resumeMultiplexing:
  9107                           	opt callstack 23
  9108                           
  9109                           ;screen.c: 29:     UpdateScreen = 1;
  9110                           
  9111                           ;incstack = 0
  9112  00265C  0E01               	movlw	1
  9113  00265E  6E5B               	movwf	_UpdateScreen,c	;volatile
  9114  002660  0012               	return		;funcret
  9115  002662                     __end_of_resumeMultiplexing:
  9116                           	opt callstack 0
  9117                           
  9118 ;; *************** function _pauseMultiplexing *****************
  9119 ;; Defined at:
  9120 ;;		line 18 in file "screen.c"
  9121 ;; Parameters:    Size  Location     Type
  9122 ;;		None
  9123 ;; Auto vars:     Size  Location     Type
  9124 ;;		None
  9125 ;; Return value:  Size  Location     Type
  9126 ;;                  1    wreg      void 
  9127 ;; Registers used:
  9128 ;;		wreg, status,2, cstack
  9129 ;; Tracked objects:
  9130 ;;		On entry : 0/0
  9131 ;;		On exit  : 0/0
  9132 ;;		Unchanged: 0/0
  9133 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9134 ;;      Params:         0       0       0       0       0       0       0
  9135 ;;      Locals:         0       0       0       0       0       0       0
  9136 ;;      Temps:          0       0       0       0       0       0       0
  9137 ;;      Totals:         0       0       0       0       0       0       0
  9138 ;;Total ram usage:        0 bytes
  9139 ;; Hardware stack levels used:    1
  9140 ;; Hardware stack levels required when called:    5
  9141 ;; This function calls:
  9142 ;;		_waitForInterrupt
  9143 ;; This function is called by:
  9144 ;;		_tetris_button_left
  9145 ;;		_tetris_button_right
  9146 ;;		_show_score
  9147 ;;		_set_screen
  9148 ;;		_set_splashscreen
  9149 ;;		_choosescreen
  9150 ;; This function uses a non-reentrant model
  9151 ;;
  9152                           
  9153                           	psect	text65
  9154  0025E6                     __ptext65:
  9155                           	opt callstack 0
  9156  0025E6                     _pauseMultiplexing:
  9157                           	opt callstack 22
  9158                           
  9159                           ;screen.c: 20:     if(UpdateScreen)
  9160                           
  9161                           ;incstack = 0
  9162  0025E6  505B               	movf	_UpdateScreen,w,c	;volatile
  9163  0025E8  B4D8               	btfsc	status,2,c
  9164  0025EA  0012               	return	
  9165                           
  9166                           ;screen.c: 21:     {;screen.c: 22:         waitForInterrupt();
  9167  0025EC  EC02  F013         	call	_waitForInterrupt	;wreg free
  9168                           
  9169                           ;screen.c: 23:         UpdateScreen = 0;
  9170  0025F0  0E00               	movlw	0
  9171  0025F2  6E5B               	movwf	_UpdateScreen,c	;volatile
  9172  0025F4  0012               	return		;funcret
  9173  0025F6                     __end_of_pauseMultiplexing:
  9174                           	opt callstack 0
  9175                           
  9176 ;; *************** function _waitForInterrupt *****************
  9177 ;; Defined at:
  9178 ;;		line 35 in file "interrupt.c"
  9179 ;; Parameters:    Size  Location     Type
  9180 ;;		None
  9181 ;; Auto vars:     Size  Location     Type
  9182 ;;		None
  9183 ;; Return value:  Size  Location     Type
  9184 ;;                  1    wreg      void 
  9185 ;; Registers used:
  9186 ;;		wreg, status,2
  9187 ;; Tracked objects:
  9188 ;;		On entry : 0/0
  9189 ;;		On exit  : 0/0
  9190 ;;		Unchanged: 0/0
  9191 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9192 ;;      Params:         0       0       0       0       0       0       0
  9193 ;;      Locals:         0       0       0       0       0       0       0
  9194 ;;      Temps:          0       0       0       0       0       0       0
  9195 ;;      Totals:         0       0       0       0       0       0       0
  9196 ;;Total ram usage:        0 bytes
  9197 ;; Hardware stack levels used:    1
  9198 ;; Hardware stack levels required when called:    4
  9199 ;; This function calls:
  9200 ;;		Nothing
  9201 ;; This function is called by:
  9202 ;;		_WriteEEByte
  9203 ;;		_pauseMultiplexing
  9204 ;; This function uses a non-reentrant model
  9205 ;;
  9206                           
  9207                           	psect	text66
  9208  002604                     __ptext66:
  9209                           	opt callstack 0
  9210  002604                     _waitForInterrupt:
  9211                           	opt callstack 23
  9212                           
  9213                           ;interrupt.c: 37:     InterruptComplete = 0;
  9214                           
  9215                           ;incstack = 0
  9216  002604  0E00               	movlw	0
  9217  002606  6E68               	movwf	_InterruptComplete,c	;volatile
  9218  002608                     l4465:
  9219  002608  5068               	movf	_InterruptComplete,w,c	;volatile
  9220  00260A  A4D8               	btfss	status,2,c
  9221  00260C  0012               	return	
  9222  00260E  D7FC               	goto	l4465
  9223  002610                     __end_of_waitForInterrupt:
  9224                           	opt callstack 0
  9225                           
  9226 ;; *************** function _memcpyvol *****************
  9227 ;; Defined at:
  9228 ;;		line 44 in file "shared_logic.c"
  9229 ;; Parameters:    Size  Location     Type
  9230 ;;  dest            2   12[COMRAM] PTR volatile void 
  9231 ;;		 -> tetris_main@tetris.graphic(16), removeLine@currentLine.graphic(16), ScreenData(16), tetris.currentblock.graphic(
      +16), 
  9232 ;;		 -> tetris_button_up@tmpObjectData(16), tetris_button_left@tmpObjectData(16), selectNextObject@NewBlock(2), 
  9233 ;;  src             2   14[COMRAM] PTR const void 
  9234 ;;		 -> tetris_main@tetris.graphic(16), choosescreen@choosescreen(16), show_score@Numberscreen(16), SnakeGraph@ObjectDat
      +a(16), 
  9235 ;;		 -> snake_screen@SNAKE(16), tetris_main@Screen_Data(16), tetris.currentblock.graphic(16), tetris.currentblock(19), 
  9236 ;;		 -> tetris_main@tetris(28), newRotation@tetrisblock(2), TETRIS(16), shapes.graphic(16), 
  9237 ;;		 -> shapes(133), 
  9238 ;;  n               2   16[COMRAM] unsigned int 
  9239 ;; Auto vars:     Size  Location     Type
  9240 ;;  s               2   20[COMRAM] PTR unsigned char 
  9241 ;;		 -> tetris_main@tetris.graphic(16), choosescreen@choosescreen(16), show_score@Numberscreen(16), SnakeGraph@ObjectDat
      +a(16), 
  9242 ;;		 -> snake_screen@SNAKE(16), tetris_main@Screen_Data(16), tetris.currentblock.graphic(16), tetris.currentblock(19), 
  9243 ;;		 -> tetris_main@tetris(28), newRotation@tetrisblock(2), TETRIS(16), shapes.graphic(16), 
  9244 ;;		 -> shapes(133), 
  9245 ;;  d               2   18[COMRAM] PTR unsigned char 
  9246 ;;		 -> tetris_main@tetris.graphic(16), removeLine@currentLine.graphic(16), ScreenData(16), tetris.currentblock.graphic(
      +16), 
  9247 ;;		 -> tetris_button_up@tmpObjectData(16), tetris_button_left@tmpObjectData(16), selectNextObject@NewBlock(2), 
  9248 ;; Return value:  Size  Location     Type
  9249 ;;                  2   12[COMRAM] PTR volatile void 
  9250 ;; Registers used:
  9251 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru
  9252 ;; Tracked objects:
  9253 ;;		On entry : 0/0
  9254 ;;		On exit  : 0/0
  9255 ;;		Unchanged: 0/0
  9256 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9257 ;;      Params:         6       0       0       0       0       0       0
  9258 ;;      Locals:         4       0       0       0       0       0       0
  9259 ;;      Temps:          0       0       0       0       0       0       0
  9260 ;;      Totals:        10       0       0       0       0       0       0
  9261 ;;Total ram usage:       10 bytes
  9262 ;; Hardware stack levels used:    1
  9263 ;; Hardware stack levels required when called:    4
  9264 ;; This function calls:
  9265 ;;		Nothing
  9266 ;; This function is called by:
  9267 ;;		_selectNextObject
  9268 ;;		_newRotation
  9269 ;;		_tetris_button_left
  9270 ;;		_set_screen
  9271 ;;		_set_splashscreen
  9272 ;; This function uses a non-reentrant model
  9273 ;;
  9274                           
  9275                           	psect	text67
  9276  001FA8                     __ptext67:
  9277                           	opt callstack 0
  9278  001FA8                     _memcpyvol:
  9279                           	opt callstack 23
  9280                           
  9281                           ;shared_logic.c: 44: volatile void *memcpyvol(volatile void *dest, const void *src, size
      +                          _t n);shared_logic.c: 45: {;shared_logic.c: 46:     char *d = (char*) dest, *s = (char*)
      +                           src;
  9282                           
  9283                           ;incstack = 0
  9284  001FA8  C00D  F013         	movff	memcpyvol@dest,memcpyvol@d
  9285  001FAC  C00E  F014         	movff	memcpyvol@dest+1,memcpyvol@d+1
  9286  001FB0  C00F  F015         	movff	memcpyvol@src,memcpyvol@s
  9287  001FB4  C010  F016         	movff	memcpyvol@src+1,memcpyvol@s+1
  9288                           
  9289                           ;shared_logic.c: 48:     while(n--)
  9290  001FB8  D019               	goto	l4475
  9291  001FBA                     l4469:
  9292                           
  9293                           ;shared_logic.c: 49:     {;shared_logic.c: 50:         *d++ = *s++;
  9294  001FBA  C015  FFF6         	movff	memcpyvol@s,tblptrl
  9295  001FBE  C016  FFF7         	movff	memcpyvol@s+1,tblptrh
  9296  001FC2  6AF8               	clrf	tblptru,c
  9297  001FC4  C013  FFD9         	movff	memcpyvol@d,fsr2l
  9298  001FC8  C014  FFDA         	movff	memcpyvol@d+1,fsr2h
  9299  001FCC  0E05               	movlw	(high __ramtop+-1)
  9300  001FCE  64F7               	cpfsgt	tblptrh,c
  9301  001FD0  D003               	bra	u4177
  9302  001FD2  0008               	tblrd		*
  9303  001FD4  50F5               	movf	tablat,w,c
  9304  001FD6  D005               	bra	u4170
  9305  001FD8                     u4177:
  9306  001FD8  CFF6 FFE9          	movff	tblptrl,fsr0l
  9307  001FDC  CFF7 FFEA          	movff	tblptrh,fsr0h
  9308  001FE0  50EF               	movf	indf0,w,c
  9309  001FE2                     u4170:
  9310  001FE2  6EDF               	movwf	indf2,c
  9311  001FE4  4A15               	infsnz	memcpyvol@s,f,c
  9312  001FE6  2A16               	incf	memcpyvol@s+1,f,c
  9313  001FE8  4A13               	infsnz	memcpyvol@d,f,c
  9314  001FEA  2A14               	incf	memcpyvol@d+1,f,c
  9315  001FEC                     l4475:
  9316                           
  9317                           ;shared_logic.c: 48:     while(n--)
  9318  001FEC  0611               	decf	memcpyvol@n,f,c
  9319  001FEE  A0D8               	btfss	status,0,c
  9320  001FF0  0612               	decf	memcpyvol@n+1,f,c
  9321  001FF2  2811               	incf	memcpyvol@n,w,c
  9322  001FF4  E1E2               	bnz	l4469
  9323  001FF6  2812               	incf	memcpyvol@n+1,w,c
  9324  001FF8  B4D8               	btfsc	status,2,c
  9325  001FFA  0012               	return	
  9326  001FFC  D7DE               	goto	l4469
  9327  001FFE                     __end_of_memcpyvol:
  9328                           	opt callstack 0
  9329                           
  9330 ;; *************** function _mergeObjects *****************
  9331 ;; Defined at:
  9332 ;;		line 130 in file "shared_logic.c"
  9333 ;; Parameters:    Size  Location     Type
  9334 ;;  pSource         2   12[COMRAM] PTR volatile unsigned sh
  9335 ;;		 -> tetris_main@tetris.graphic(16), choosescreen@mask(16), show_score@mask(16), show_score@tmpObjectData(16), 
  9336 ;;		 -> tetris.currentblock.graphic(16), tetris.currentblock(19), tetris_main@tetris(28), tetris_main@BackgroundData(16)
      +, 
  9337 ;;		 -> tetris_button_up@tmpObjectData(16), tetris_button_right@tmpObjectData(16), tetris_button_left@tmpObjectData(16),
      + moveObjectDown@tetrisblock(2), 
  9338 ;;  pTarget         2   14[COMRAM] PTR volatile unsigned sh
  9339 ;;		 -> tetris_main@tetris.graphic(16), removeLine@currentLine.graphic(16), ScreenData(16), show_score@Numberscreen(16),
      + 
  9340 ;;		 -> tetris_main@Screen_Data(16), tetris.currentblock.graphic(16), tetris_main@tetris(28), tetris_main@BackgroundData
      +(16), 
  9341 ;;		 -> tetris_button_up@tetrisblock(2), tetris_button_right@tmpObjectData(16), 
  9342 ;;  mode            1   16[COMRAM] enum E2557
  9343 ;; Auto vars:     Size  Location     Type
  9344 ;;  i               1   23[COMRAM] unsigned char 
  9345 ;; Return value:  Size  Location     Type
  9346 ;;                  1    wreg      void 
  9347 ;; Registers used:
  9348 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  9349 ;; Tracked objects:
  9350 ;;		On entry : 0/0
  9351 ;;		On exit  : 0/0
  9352 ;;		Unchanged: 0/0
  9353 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9354 ;;      Params:         5       0       0       0       0       0       0
  9355 ;;      Locals:         1       0       0       0       0       0       0
  9356 ;;      Temps:          6       0       0       0       0       0       0
  9357 ;;      Totals:        12       0       0       0       0       0       0
  9358 ;;Total ram usage:       12 bytes
  9359 ;; Hardware stack levels used:    1
  9360 ;; Hardware stack levels required when called:    4
  9361 ;; This function calls:
  9362 ;;		Nothing
  9363 ;; This function is called by:
  9364 ;;		_moveObjectDown
  9365 ;;		_tetris_button_left
  9366 ;;		_tetris_button_right
  9367 ;;		_tetris_button_up
  9368 ;;		_tetris_main
  9369 ;;		_show_score
  9370 ;;		_choosescreen
  9371 ;; This function uses a non-reentrant model
  9372 ;;
  9373                           
  9374                           	psect	text68
  9375  001376                     __ptext68:
  9376                           	opt callstack 0
  9377  001376                     _mergeObjects:
  9378                           	opt callstack 23
  9379                           
  9380                           ;shared_logic.c: 130: void mergeObjects(volatile uint16_t * pSource, volatile uint16_t *
      +                           pTarget, mode_t mode);shared_logic.c: 131: {;shared_logic.c: 132:     uint8_t i = 8;
  9381                           
  9382                           ;incstack = 0
  9383  001376  0E08               	movlw	8
  9384  001378  6E18               	movwf	mergeObjects@i,c
  9385                           
  9386                           ;shared_logic.c: 133:     switch(mode)
  9387  00137A  D06B               	goto	l4685
  9388  00137C                     l4671:
  9389                           
  9390                           ;shared_logic.c: 137:             {;shared_logic.c: 138:                 pTarget[i] = pS
      +                          ource[i];
  9391  00137C  5018               	movf	mergeObjects@i,w,c
  9392  00137E  0D02               	mullw	2
  9393  001380  CFF3 F012          	movff	prodl,??_mergeObjects
  9394  001384  CFF4 F013          	movff	prodh,??_mergeObjects+1
  9395  001388  5012               	movf	??_mergeObjects,w,c
  9396  00138A  240D               	addwf	mergeObjects@pSource,w,c
  9397  00138C  6ED9               	movwf	fsr2l,c
  9398  00138E  5013               	movf	??_mergeObjects+1,w,c
  9399  001390  200E               	addwfc	mergeObjects@pSource+1,w,c
  9400  001392  6EDA               	movwf	fsr2h,c
  9401  001394  5018               	movf	mergeObjects@i,w,c
  9402  001396  0D02               	mullw	2
  9403  001398  CFF3 F014          	movff	prodl,??_mergeObjects+2
  9404  00139C  CFF4 F015          	movff	prodh,??_mergeObjects+3
  9405  0013A0  5014               	movf	??_mergeObjects+2,w,c
  9406  0013A2  240F               	addwf	mergeObjects@pTarget,w,c
  9407  0013A4  6EE1               	movwf	fsr1l,c
  9408  0013A6  5015               	movf	??_mergeObjects+3,w,c
  9409  0013A8  2010               	addwfc	mergeObjects@pTarget+1,w,c
  9410  0013AA  6EE2               	movwf	fsr1h,c
  9411  0013AC  CFDE FFE6          	movff	postinc2,postinc1
  9412  0013B0  CFDD FFE5          	movff	postdec2,postdec1
  9413  0013B4                     l4673:
  9414                           
  9415                           ;shared_logic.c: 136:             while(i--)
  9416  0013B4  0618               	decf	mergeObjects@i,f,c
  9417  0013B6  2818               	incf	mergeObjects@i,w,c
  9418  0013B8  B4D8               	btfsc	status,2,c
  9419  0013BA  0012               	return	
  9420  0013BC  D7DF               	goto	l4671
  9421  0013BE                     l4675:
  9422                           
  9423                           ;shared_logic.c: 143:             {;shared_logic.c: 144:                 pTarget[i] |= p
      +                          Source[i];
  9424  0013BE  5018               	movf	mergeObjects@i,w,c
  9425  0013C0  0D02               	mullw	2
  9426  0013C2  CFF3 F012          	movff	prodl,??_mergeObjects
  9427  0013C6  CFF4 F013          	movff	prodh,??_mergeObjects+1
  9428  0013CA  5012               	movf	??_mergeObjects,w,c
  9429  0013CC  240D               	addwf	mergeObjects@pSource,w,c
  9430  0013CE  6ED9               	movwf	fsr2l,c
  9431  0013D0  5013               	movf	??_mergeObjects+1,w,c
  9432  0013D2  200E               	addwfc	mergeObjects@pSource+1,w,c
  9433  0013D4  6EDA               	movwf	fsr2h,c
  9434  0013D6  CFDE F014          	movff	postinc2,??_mergeObjects+2
  9435  0013DA  CFDD F015          	movff	postdec2,??_mergeObjects+3
  9436  0013DE  5018               	movf	mergeObjects@i,w,c
  9437  0013E0  0D02               	mullw	2
  9438  0013E2  CFF3 F016          	movff	prodl,??_mergeObjects+4
  9439  0013E6  CFF4 F017          	movff	prodh,??_mergeObjects+5
  9440  0013EA  5016               	movf	??_mergeObjects+4,w,c
  9441  0013EC  240F               	addwf	mergeObjects@pTarget,w,c
  9442  0013EE  6ED9               	movwf	fsr2l,c
  9443  0013F0  5017               	movf	??_mergeObjects+5,w,c
  9444  0013F2  2010               	addwfc	mergeObjects@pTarget+1,w,c
  9445  0013F4  6EDA               	movwf	fsr2h,c
  9446  0013F6  5014               	movf	??_mergeObjects+2,w,c
  9447  0013F8  12DE               	iorwf	postinc2,f,c
  9448  0013FA  5015               	movf	??_mergeObjects+3,w,c
  9449  0013FC  12DD               	iorwf	postdec2,f,c
  9450  0013FE                     l4677:
  9451                           
  9452                           ;shared_logic.c: 142:             while(i--)
  9453  0013FE  0618               	decf	mergeObjects@i,f,c
  9454  001400  2818               	incf	mergeObjects@i,w,c
  9455  001402  B4D8               	btfsc	status,2,c
  9456  001404  0012               	return	
  9457  001406  D7DB               	goto	l4675
  9458  001408                     l4679:
  9459                           
  9460                           ;shared_logic.c: 149:             {;shared_logic.c: 150:                 pTarget[i] ^= p
      +                          Source[i];
  9461  001408  5018               	movf	mergeObjects@i,w,c
  9462  00140A  0D02               	mullw	2
  9463  00140C  CFF3 F012          	movff	prodl,??_mergeObjects
  9464  001410  CFF4 F013          	movff	prodh,??_mergeObjects+1
  9465  001414  5012               	movf	??_mergeObjects,w,c
  9466  001416  240D               	addwf	mergeObjects@pSource,w,c
  9467  001418  6ED9               	movwf	fsr2l,c
  9468  00141A  5013               	movf	??_mergeObjects+1,w,c
  9469  00141C  200E               	addwfc	mergeObjects@pSource+1,w,c
  9470  00141E  6EDA               	movwf	fsr2h,c
  9471  001420  CFDE F014          	movff	postinc2,??_mergeObjects+2
  9472  001424  CFDD F015          	movff	postdec2,??_mergeObjects+3
  9473  001428  5018               	movf	mergeObjects@i,w,c
  9474  00142A  0D02               	mullw	2
  9475  00142C  CFF3 F016          	movff	prodl,??_mergeObjects+4
  9476  001430  CFF4 F017          	movff	prodh,??_mergeObjects+5
  9477  001434  5016               	movf	??_mergeObjects+4,w,c
  9478  001436  240F               	addwf	mergeObjects@pTarget,w,c
  9479  001438  6ED9               	movwf	fsr2l,c
  9480  00143A  5017               	movf	??_mergeObjects+5,w,c
  9481  00143C  2010               	addwfc	mergeObjects@pTarget+1,w,c
  9482  00143E  6EDA               	movwf	fsr2h,c
  9483  001440  5014               	movf	??_mergeObjects+2,w,c
  9484  001442  1ADE               	xorwf	postinc2,f,c
  9485  001444  5015               	movf	??_mergeObjects+3,w,c
  9486  001446  1ADD               	xorwf	postdec2,f,c
  9487  001448                     l4681:
  9488                           
  9489                           ;shared_logic.c: 148:             while(i--)
  9490  001448  0618               	decf	mergeObjects@i,f,c
  9491  00144A  2818               	incf	mergeObjects@i,w,c
  9492  00144C  B4D8               	btfsc	status,2,c
  9493  00144E  0012               	return	
  9494  001450  D7DB               	goto	l4679
  9495  001452                     l4685:
  9496  001452  5011               	movf	mergeObjects@mode,w,c
  9497  001454  6E12               	movwf	??_mergeObjects& (0+255),c
  9498  001456  6A13               	clrf	(??_mergeObjects+1)& (0+255),c
  9499                           
  9500                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  9501                           ; Switch size 1, requested type "simple"
  9502                           ; Number of cases is 1, Range of values is 0 to 0
  9503                           ; switch strategies available:
  9504                           ; Name         Instructions Cycles
  9505                           ; simple_byte            4     3 (average)
  9506                           ;	Chosen strategy is simple_byte
  9507  001458  5013               	movf	??_mergeObjects+1,w,c
  9508  00145A  0A00               	xorlw	0	; case 0
  9509  00145C  A4D8               	btfss	status,2,c
  9510  00145E  0012               	return	
  9511                           
  9512                           ; Switch size 1, requested type "simple"
  9513                           ; Number of cases is 3, Range of values is 0 to 2
  9514                           ; switch strategies available:
  9515                           ; Name         Instructions Cycles
  9516                           ; simple_byte           10     6 (average)
  9517                           ;	Chosen strategy is simple_byte
  9518  001460  5012               	movf	??_mergeObjects,w,c
  9519  001462  0A00               	xorlw	0	; case 0
  9520  001464  B4D8               	btfsc	status,2,c
  9521  001466  D7A6               	goto	l4673
  9522  001468  0A01               	xorlw	1	; case 1
  9523  00146A  B4D8               	btfsc	status,2,c
  9524  00146C  D7C8               	goto	l4677
  9525  00146E  0A03               	xorlw	3	; case 2
  9526  001470  A4D8               	btfss	status,2,c
  9527  001472  0012               	return	
  9528  001474  D7E9               	goto	l4681
  9529  001476                     __end_of_mergeObjects:
  9530                           	opt callstack 0
  9531                           
  9532 ;; *************** function _checkUp *****************
  9533 ;; Defined at:
  9534 ;;		line 68 in file "buttons.c"
  9535 ;; Parameters:    Size  Location     Type
  9536 ;;  reset           1    wreg     _Bool 
  9537 ;; Auto vars:     Size  Location     Type
  9538 ;;  reset           1   12[COMRAM] _Bool 
  9539 ;; Return value:  Size  Location     Type
  9540 ;;                  1    wreg      _Bool 
  9541 ;; Registers used:
  9542 ;;		wreg, status,2
  9543 ;; Tracked objects:
  9544 ;;		On entry : 0/0
  9545 ;;		On exit  : 0/0
  9546 ;;		Unchanged: 0/0
  9547 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9548 ;;      Params:         0       0       0       0       0       0       0
  9549 ;;      Locals:         1       0       0       0       0       0       0
  9550 ;;      Temps:          0       0       0       0       0       0       0
  9551 ;;      Totals:         1       0       0       0       0       0       0
  9552 ;;Total ram usage:        1 bytes
  9553 ;; Hardware stack levels used:    1
  9554 ;; Hardware stack levels required when called:    4
  9555 ;; This function calls:
  9556 ;;		Nothing
  9557 ;; This function is called by:
  9558 ;;		_tetris_buttons
  9559 ;;		_snake_buttons
  9560 ;;		_choosescreen
  9561 ;; This function uses a non-reentrant model
  9562 ;;
  9563                           
  9564                           	psect	text69
  9565  002458                     __ptext69:
  9566                           	opt callstack 0
  9567  002458                     _checkUp:
  9568                           	opt callstack 24
  9569                           
  9570                           ;incstack = 0
  9571                           ;checkUp@reset stored from wreg
  9572  002458  6E0D               	movwf	checkUp@reset,c
  9573                           
  9574                           ;buttons.c: 68: _Bool checkUp(_Bool reset);buttons.c: 69: {;buttons.c: 70:     if (Rotat
      +                          e_Debounced)
  9575  00245A  506E               	movf	_Rotate_Debounced,w,c	;volatile
  9576  00245C  B4D8               	btfsc	status,2,c
  9577  00245E  D00D               	goto	l5167
  9578                           
  9579                           ;buttons.c: 71:     {;buttons.c: 72:         Rotate_Delay = 500;
  9580  002460  0E01               	movlw	1
  9581  002462  6E61               	movwf	_Rotate_Delay+1,c	;volatile
  9582  002464  0EF4               	movlw	244
  9583  002466  6E60               	movwf	_Rotate_Delay,c	;volatile
  9584                           
  9585                           ;buttons.c: 73:         Rotate_Debounced = !reset;
  9586  002468  500D               	movf	checkUp@reset,w,c
  9587  00246A  A4D8               	btfss	status,2,c
  9588  00246C  D002               	goto	u5110
  9589  00246E  0E01               	movlw	1
  9590  002470  D001               	goto	u5120
  9591  002472                     u5110:
  9592  002472  0E00               	movlw	0
  9593  002474                     u5120:
  9594  002474  6E6E               	movwf	_Rotate_Debounced,c	;volatile
  9595                           
  9596                           ;buttons.c: 74:         return 1;
  9597  002476  0E01               	movlw	1
  9598  002478  0012               	return	
  9599  00247A                     l5167:
  9600  00247A  0E00               	movlw	0
  9601  00247C  0012               	return		;funcret
  9602  00247E                     __end_of_checkUp:
  9603                           	opt callstack 0
  9604                           
  9605 ;; *************** function _checkDown *****************
  9606 ;; Defined at:
  9607 ;;		line 78 in file "buttons.c"
  9608 ;; Parameters:    Size  Location     Type
  9609 ;;  reset           1    wreg     _Bool 
  9610 ;; Auto vars:     Size  Location     Type
  9611 ;;  reset           1   12[COMRAM] _Bool 
  9612 ;; Return value:  Size  Location     Type
  9613 ;;                  1    wreg      _Bool 
  9614 ;; Registers used:
  9615 ;;		wreg, status,2
  9616 ;; Tracked objects:
  9617 ;;		On entry : 0/0
  9618 ;;		On exit  : 0/0
  9619 ;;		Unchanged: 0/0
  9620 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9621 ;;      Params:         0       0       0       0       0       0       0
  9622 ;;      Locals:         1       0       0       0       0       0       0
  9623 ;;      Temps:          0       0       0       0       0       0       0
  9624 ;;      Totals:         1       0       0       0       0       0       0
  9625 ;;Total ram usage:        1 bytes
  9626 ;; Hardware stack levels used:    1
  9627 ;; Hardware stack levels required when called:    4
  9628 ;; This function calls:
  9629 ;;		Nothing
  9630 ;; This function is called by:
  9631 ;;		_tetris_buttons
  9632 ;;		_snake_buttons
  9633 ;;		_show_score
  9634 ;;		_choosescreen
  9635 ;; This function uses a non-reentrant model
  9636 ;;
  9637                           
  9638                           	psect	text70
  9639  00247E                     __ptext70:
  9640                           	opt callstack 0
  9641  00247E                     _checkDown:
  9642                           	opt callstack 24
  9643                           
  9644                           ;incstack = 0
  9645                           ;checkDown@reset stored from wreg
  9646  00247E  6E0D               	movwf	checkDown@reset,c
  9647                           
  9648                           ;buttons.c: 78: _Bool checkDown(_Bool reset);buttons.c: 79: {;buttons.c: 80:     if (Dow
      +                          n_Debounced)
  9649  002480  506B               	movf	_Down_Debounced,w,c	;volatile
  9650  002482  B4D8               	btfsc	status,2,c
  9651  002484  D00D               	goto	l5181
  9652                           
  9653                           ;buttons.c: 81:     {;buttons.c: 82:         Down_Delay = 500;
  9654  002486  0E01               	movlw	1
  9655  002488  6E5F               	movwf	_Down_Delay+1,c	;volatile
  9656  00248A  0EF4               	movlw	244
  9657  00248C  6E5E               	movwf	_Down_Delay,c	;volatile
  9658                           
  9659                           ;buttons.c: 83:         Down_Debounced = !reset;
  9660  00248E  500D               	movf	checkDown@reset,w,c
  9661  002490  A4D8               	btfss	status,2,c
  9662  002492  D002               	goto	u5140
  9663  002494  0E01               	movlw	1
  9664  002496  D001               	goto	u5150
  9665  002498                     u5140:
  9666  002498  0E00               	movlw	0
  9667  00249A                     u5150:
  9668  00249A  6E6B               	movwf	_Down_Debounced,c	;volatile
  9669                           
  9670                           ;buttons.c: 84:         return 1;
  9671  00249C  0E01               	movlw	1
  9672  00249E  0012               	return	
  9673  0024A0                     l5181:
  9674  0024A0  0E00               	movlw	0
  9675  0024A2  0012               	return		;funcret
  9676  0024A4                     __end_of_checkDown:
  9677                           	opt callstack 0
  9678                           
  9679 ;; *************** function _isr *****************
  9680 ;; Defined at:
  9681 ;;		line 35 in file "pictris.c"
  9682 ;; Parameters:    Size  Location     Type
  9683 ;;		None
  9684 ;; Auto vars:     Size  Location     Type
  9685 ;;		None
  9686 ;; Return value:  Size  Location     Type
  9687 ;;                  1    wreg      void 
  9688 ;; Registers used:
  9689 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  9690 ;; Tracked objects:
  9691 ;;		On entry : 0/0
  9692 ;;		On exit  : 0/0
  9693 ;;		Unchanged: 0/0
  9694 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9695 ;;      Params:         0       0       0       0       0       0       0
  9696 ;;      Locals:         0       0       0       0       0       0       0
  9697 ;;      Temps:          4       0       0       0       0       0       0
  9698 ;;      Totals:         4       0       0       0       0       0       0
  9699 ;;Total ram usage:        4 bytes
  9700 ;; Hardware stack levels used:    1
  9701 ;; Hardware stack levels required when called:    3
  9702 ;; This function calls:
  9703 ;;		_Interrupt
  9704 ;; This function is called by:
  9705 ;;		Interrupt level 2
  9706 ;; This function uses a non-reentrant model
  9707 ;;
  9708                           
  9709                           	psect	intcode
  9710  000008                     __pintcode:
  9711                           	opt callstack 0
  9712  000008                     _isr:
  9713                           	opt callstack 21
  9714                           
  9715                           ;incstack = 0
  9716  000008  826F               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
  9717  00000A  EDCC  F010         	call	int_func,f	;refresh shadow registers
  9718                           
  9719                           	psect	intcode_body
  9720  002198                     __pintcode_body:
  9721                           	opt callstack 21
  9722  002198                     int_func:
  9723                           	opt callstack 21
  9724  002198  0006               	pop		; remove dummy address from shadow register refresh
  9725  00219A  CFD9 F009          	movff	fsr2l,??_isr
  9726  00219E  CFDA F00A          	movff	fsr2h,??_isr+1
  9727  0021A2  CFF3 F00B          	movff	prodl,??_isr+2
  9728  0021A6  CFF4 F00C          	movff	prodh,??_isr+3
  9729                           
  9730                           ;pictris.c: 37:     if(INTCONbits.TMR0IF)
  9731  0021AA  A4F2               	btfss	4082,2,c	;volatile
  9732  0021AC  D008               	goto	i2l66
  9733                           
  9734                           ;pictris.c: 38:     {;pictris.c: 39:         INTCONbits.TMR0IF = 0;
  9735  0021AE  94F2               	bcf	4082,2,c	;volatile
  9736                           
  9737                           ;pictris.c: 40:         TMR0 = (~125);
  9738  0021B0  0EFF               	movlw	255
  9739  0021B2  6ED7               	movwf	4055,c	;volatile
  9740  0021B4  0E82               	movlw	130
  9741  0021B6  6ED6               	movwf	4054,c	;volatile
  9742                           
  9743                           ;pictris.c: 41:         Interrupt(game);
  9744  0021B8  505D               	movf	_game,w,c
  9745  0021BA  ECB5  F00C         	call	_Interrupt
  9746  0021BE                     i2l66:
  9747  0021BE  C00C  FFF4         	movff	??_isr+3,prodh
  9748  0021C2  C00B  FFF3         	movff	??_isr+2,prodl
  9749  0021C6  C00A  FFDA         	movff	??_isr+1,fsr2h
  9750  0021CA  C009  FFD9         	movff	??_isr,fsr2l
  9751  0021CE  926F               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
  9752  0021D0  0011               	retfie		f
  9753  0021D2                     __end_of_isr:
  9754                           	opt callstack 0
  9755                           
  9756 ;; *************** function _Interrupt *****************
  9757 ;; Defined at:
  9758 ;;		line 22 in file "interrupt.c"
  9759 ;; Parameters:    Size  Location     Type
  9760 ;;  game            1    wreg     _Bool 
  9761 ;; Auto vars:     Size  Location     Type
  9762 ;;  game            1    7[COMRAM] _Bool 
  9763 ;; Return value:  Size  Location     Type
  9764 ;;                  1    wreg      void 
  9765 ;; Registers used:
  9766 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  9767 ;; Tracked objects:
  9768 ;;		On entry : 0/0
  9769 ;;		On exit  : 0/0
  9770 ;;		Unchanged: 0/0
  9771 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9772 ;;      Params:         0       0       0       0       0       0       0
  9773 ;;      Locals:         1       0       0       0       0       0       0
  9774 ;;      Temps:          0       0       0       0       0       0       0
  9775 ;;      Totals:         1       0       0       0       0       0       0
  9776 ;;Total ram usage:        1 bytes
  9777 ;; Hardware stack levels used:    1
  9778 ;; Hardware stack levels required when called:    2
  9779 ;; This function calls:
  9780 ;;		___lwmod
  9781 ;;		_add_mS
  9782 ;;		_checkButtons
  9783 ;;		_screen_update
  9784 ;;		_snake_timer
  9785 ;;		_tetris_timer
  9786 ;;		i2_get_mS
  9787 ;;		i2_set_mS
  9788 ;; This function is called by:
  9789 ;;		_isr
  9790 ;; This function uses a non-reentrant model
  9791 ;;
  9792                           
  9793                           	psect	text72
  9794  00196A                     __ptext72:
  9795                           	opt callstack 0
  9796  00196A                     _Interrupt:
  9797                           	opt callstack 21
  9798                           
  9799                           ;incstack = 0
  9800                           ;Interrupt@game stored from wreg
  9801  00196A  6E08               	movwf	Interrupt@game,c
  9802                           
  9803                           ;interrupt.c: 22: void Interrupt(_Bool game);interrupt.c: 23: {;interrupt.c: 24:     Rem
      +                          ainingWaitTime--;
  9804  00196C  0666               	decf	_RemainingWaitTime,f,c	;volatile
  9805  00196E  A0D8               	btfss	status,0,c
  9806  001970  0667               	decf	_RemainingWaitTime+1,f,c	;volatile
  9807                           
  9808                           ;interrupt.c: 26:     add_mS(1);
  9809  001972  0E00               	movlw	0
  9810  001974  6E02               	movwf	add_mS@amount+1,c
  9811  001976  0E01               	movlw	1
  9812  001978  6E01               	movwf	add_mS@amount,c
  9813  00197A  ECFB  F012         	call	_add_mS	;wreg free
  9814                           
  9815                           ;interrupt.c: 27:     if(get_mS() >= 800){set_mS(0);}
  9816  00197E  EC1C  F013         	call	i2_get_mS	;wreg free
  9817  001982  0E20               	movlw	32
  9818  001984  5C01               	subwf	?i2_get_mS,w,c
  9819  001986  0E03               	movlw	3
  9820  001988  5802               	subwfb	?i2_get_mS+1,w,c
  9821  00198A  A0D8               	btfss	status,0,c
  9822  00198C  D006               	goto	i2l4173
  9823  00198E  0E00               	movlw	0
  9824  001990  6E02               	movwf	i2set_mS@amount+1,c
  9825  001992  0E00               	movlw	0
  9826  001994  6E01               	movwf	i2set_mS@amount,c
  9827  001996  EC17  F013         	call	i2_set_mS	;wreg free
  9828  00199A                     i2l4173:
  9829                           
  9830                           ;interrupt.c: 28:     if(game == 1 && get_mS() % 800 == 0){tetris_timer();}
  9831  00199A  0408               	decf	Interrupt@game,w,c
  9832  00199C  A4D8               	btfss	status,2,c
  9833  00199E  D011               	goto	i2l4179
  9834  0019A0  EC1C  F013         	call	i2_get_mS	;wreg free
  9835  0019A4  C001  F003         	movff	?i2_get_mS,___lwmod@dividend
  9836  0019A8  C002  F004         	movff	?i2_get_mS+1,___lwmod@dividend+1
  9837  0019AC  0E03               	movlw	3
  9838  0019AE  6E06               	movwf	___lwmod@divisor+1,c
  9839  0019B0  0E20               	movlw	32
  9840  0019B2  6E05               	movwf	___lwmod@divisor,c
  9841  0019B4  EC70  F010         	call	___lwmod	;wreg free
  9842  0019B8  5003               	movf	?___lwmod,w,c
  9843  0019BA  1004               	iorwf	?___lwmod+1,w,c
  9844  0019BC  B4D8               	btfsc	status,2,c
  9845  0019BE  EC21  F013         	call	_tetris_timer	;wreg free
  9846  0019C2                     i2l4179:
  9847                           
  9848                           ;interrupt.c: 29:     if(game != 1 && get_mS() % 200 == 0){snake_timer();}
  9849  0019C2  0408               	decf	Interrupt@game,w,c
  9850  0019C4  B4D8               	btfsc	status,2,c
  9851  0019C6  D011               	goto	i2l4185
  9852  0019C8  EC1C  F013         	call	i2_get_mS	;wreg free
  9853  0019CC  C001  F003         	movff	?i2_get_mS,___lwmod@dividend
  9854  0019D0  C002  F004         	movff	?i2_get_mS+1,___lwmod@dividend+1
  9855  0019D4  0E00               	movlw	0
  9856  0019D6  6E06               	movwf	___lwmod@divisor+1,c
  9857  0019D8  0EC8               	movlw	200
  9858  0019DA  6E05               	movwf	___lwmod@divisor,c
  9859  0019DC  EC70  F010         	call	___lwmod	;wreg free
  9860  0019E0  5003               	movf	?___lwmod,w,c
  9861  0019E2  1004               	iorwf	?___lwmod+1,w,c
  9862  0019E4  B4D8               	btfsc	status,2,c
  9863  0019E6  EC31  F013         	call	_snake_timer	;wreg free
  9864  0019EA                     i2l4185:
  9865                           
  9866                           ;interrupt.c: 30:     checkButtons();
  9867  0019EA  EC4C  F00E         	call	_checkButtons	;wreg free
  9868                           
  9869                           ;interrupt.c: 31:     screen_update();
  9870  0019EE  EC28  F010         	call	_screen_update	;wreg free
  9871                           
  9872                           ;interrupt.c: 32:     InterruptComplete = 1;
  9873  0019F2  0E01               	movlw	1
  9874  0019F4  6E68               	movwf	_InterruptComplete,c	;volatile
  9875  0019F6  0012               	return		;funcret
  9876  0019F8                     __end_of_Interrupt:
  9877                           	opt callstack 0
  9878                           
  9879 ;; *************** function i2_set_mS *****************
  9880 ;; Defined at:
  9881 ;;		line 16 in file "shared_logic.c"
  9882 ;; Parameters:    Size  Location     Type
  9883 ;;  amount          2    0[COMRAM] unsigned short 
  9884 ;; Auto vars:     Size  Location     Type
  9885 ;;		None
  9886 ;; Return value:  Size  Location     Type
  9887 ;;                  1    wreg      void 
  9888 ;; Registers used:
  9889 ;;		None
  9890 ;; Tracked objects:
  9891 ;;		On entry : 0/0
  9892 ;;		On exit  : 0/0
  9893 ;;		Unchanged: 0/0
  9894 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9895 ;;      Params:         2       0       0       0       0       0       0
  9896 ;;      Locals:         0       0       0       0       0       0       0
  9897 ;;      Temps:          0       0       0       0       0       0       0
  9898 ;;      Totals:         2       0       0       0       0       0       0
  9899 ;;Total ram usage:        2 bytes
  9900 ;; Hardware stack levels used:    1
  9901 ;; This function calls:
  9902 ;;		Nothing
  9903 ;; This function is called by:
  9904 ;;		_Interrupt
  9905 ;; This function uses a non-reentrant model
  9906 ;;
  9907                           
  9908                           	psect	text73
  9909  00262E                     __ptext73:
  9910                           	opt callstack 0
  9911  00262E                     i2_set_mS:
  9912                           	opt callstack 22
  9913                           
  9914                           ;shared_logic.c: 16: void set_mS(uint16_t amount);shared_logic.c: 17: {;shared_logic.c: 
      +                          18:     mS = amount;
  9915                           
  9916                           ;incstack = 0
  9917  00262E  C001  F057         	movff	i2set_mS@amount,_mS	;volatile
  9918  002632  C002  F058         	movff	i2set_mS@amount+1,_mS+1	;volatile
  9919  002636  0012               	return		;funcret
  9920  002638                     __end_ofi2_set_mS:
  9921                           	opt callstack 0
  9922                           
  9923 ;; *************** function i2_get_mS *****************
  9924 ;; Defined at:
  9925 ;;		line 27 in file "shared_logic.c"
  9926 ;; Parameters:    Size  Location     Type
  9927 ;;		None
  9928 ;; Auto vars:     Size  Location     Type
  9929 ;;		None
  9930 ;; Return value:  Size  Location     Type
  9931 ;;                  2    0[COMRAM] unsigned short 
  9932 ;; Registers used:
  9933 ;;		None
  9934 ;; Tracked objects:
  9935 ;;		On entry : 0/0
  9936 ;;		On exit  : 0/0
  9937 ;;		Unchanged: 0/0
  9938 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9939 ;;      Params:         2       0       0       0       0       0       0
  9940 ;;      Locals:         0       0       0       0       0       0       0
  9941 ;;      Temps:          0       0       0       0       0       0       0
  9942 ;;      Totals:         2       0       0       0       0       0       0
  9943 ;;Total ram usage:        2 bytes
  9944 ;; Hardware stack levels used:    1
  9945 ;; This function calls:
  9946 ;;		Nothing
  9947 ;; This function is called by:
  9948 ;;		_Interrupt
  9949 ;; This function uses a non-reentrant model
  9950 ;;
  9951                           
  9952                           	psect	text74
  9953  002638                     __ptext74:
  9954                           	opt callstack 0
  9955  002638                     i2_get_mS:
  9956                           	opt callstack 22
  9957                           
  9958                           ;shared_logic.c: 29:     return mS;
  9959                           
  9960                           ;incstack = 0
  9961  002638  C057  F001         	movff	_mS,?i2_get_mS	;volatile
  9962  00263C  C058  F002         	movff	_mS+1,?i2_get_mS+1	;volatile
  9963  002640  0012               	return		;funcret
  9964  002642                     __end_ofi2_get_mS:
  9965                           	opt callstack 0
  9966                           
  9967 ;; *************** function _tetris_timer *****************
  9968 ;; Defined at:
  9969 ;;		line 343 in file "tetris.c"
  9970 ;; Parameters:    Size  Location     Type
  9971 ;;		None
  9972 ;; Auto vars:     Size  Location     Type
  9973 ;;		None
  9974 ;; Return value:  Size  Location     Type
  9975 ;;                  1    wreg      void 
  9976 ;; Registers used:
  9977 ;;		wreg, status,2
  9978 ;; Tracked objects:
  9979 ;;		On entry : 0/0
  9980 ;;		On exit  : 0/0
  9981 ;;		Unchanged: 0/0
  9982 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9983 ;;      Params:         0       0       0       0       0       0       0
  9984 ;;      Locals:         0       0       0       0       0       0       0
  9985 ;;      Temps:          0       0       0       0       0       0       0
  9986 ;;      Totals:         0       0       0       0       0       0       0
  9987 ;;Total ram usage:        0 bytes
  9988 ;; Hardware stack levels used:    1
  9989 ;; This function calls:
  9990 ;;		Nothing
  9991 ;; This function is called by:
  9992 ;;		_Interrupt
  9993 ;; This function uses a non-reentrant model
  9994 ;;
  9995                           
  9996                           	psect	text75
  9997  002642                     __ptext75:
  9998                           	opt callstack 0
  9999  002642                     _tetris_timer:
 10000                           	opt callstack 22
 10001                           
 10002                           ;tetris.c: 345:     DropObject = 1;
 10003                           
 10004                           ;incstack = 0
 10005  002642  0E01               	movlw	1
 10006  002644  0100               	movlb	0	; () banked
 10007  002646  6FB7               	movwf	_DropObject& (0+255),b	;volatile
 10008                           
 10009                           ; BSR set to: 0
 10010  002648  0012               	return		;funcret
 10011  00264A                     __end_of_tetris_timer:
 10012                           	opt callstack 0
 10013                           
 10014 ;; *************** function _snake_timer *****************
 10015 ;; Defined at:
 10016 ;;		line 182 in file "snake.c"
 10017 ;; Parameters:    Size  Location     Type
 10018 ;;		None
 10019 ;; Auto vars:     Size  Location     Type
 10020 ;;		None
 10021 ;; Return value:  Size  Location     Type
 10022 ;;                  1    wreg      void 
 10023 ;; Registers used:
 10024 ;;		wreg, status,2
 10025 ;; Tracked objects:
 10026 ;;		On entry : 0/0
 10027 ;;		On exit  : 0/0
 10028 ;;		Unchanged: 0/0
 10029 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10030 ;;      Params:         0       0       0       0       0       0       0
 10031 ;;      Locals:         0       0       0       0       0       0       0
 10032 ;;      Temps:          0       0       0       0       0       0       0
 10033 ;;      Totals:         0       0       0       0       0       0       0
 10034 ;;Total ram usage:        0 bytes
 10035 ;; Hardware stack levels used:    1
 10036 ;; This function calls:
 10037 ;;		Nothing
 10038 ;; This function is called by:
 10039 ;;		_Interrupt
 10040 ;; This function uses a non-reentrant model
 10041 ;;
 10042                           
 10043                           	psect	text76
 10044  002662                     __ptext76:
 10045                           	opt callstack 0
 10046  002662                     _snake_timer:
 10047                           	opt callstack 22
 10048                           
 10049                           ;snake.c: 184:     moveSnake = 1;
 10050                           
 10051                           ; BSR set to: 0
 10052                           ;incstack = 0
 10053  002662  0E01               	movlw	1
 10054  002664  6E69               	movwf	_moveSnake,c	;volatile
 10055  002666  0012               	return		;funcret
 10056  002668                     __end_of_snake_timer:
 10057                           	opt callstack 0
 10058                           
 10059 ;; *************** function _screen_update *****************
 10060 ;; Defined at:
 10061 ;;		line 97 in file "screen.c"
 10062 ;; Parameters:    Size  Location     Type
 10063 ;;		None
 10064 ;; Auto vars:     Size  Location     Type
 10065 ;;  ymask           2    2[COMRAM] unsigned short 
 10066 ;;  xmask           1    4[COMRAM] unsigned char 
 10067 ;; Return value:  Size  Location     Type
 10068 ;;                  1    wreg      void 
 10069 ;; Registers used:
 10070 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 10071 ;; Tracked objects:
 10072 ;;		On entry : 0/0
 10073 ;;		On exit  : 0/0
 10074 ;;		Unchanged: 0/0
 10075 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10076 ;;      Params:         0       0       0       0       0       0       0
 10077 ;;      Locals:         3       0       0       0       0       0       0
 10078 ;;      Temps:          2       0       0       0       0       0       0
 10079 ;;      Totals:         5       0       0       0       0       0       0
 10080 ;;Total ram usage:        5 bytes
 10081 ;; Hardware stack levels used:    1
 10082 ;; This function calls:
 10083 ;;		Nothing
 10084 ;; This function is called by:
 10085 ;;		_Interrupt
 10086 ;; This function uses a non-reentrant model
 10087 ;;
 10088                           
 10089                           	psect	text77
 10090  002050                     __ptext77:
 10091                           	opt callstack 0
 10092  002050                     _screen_update:
 10093                           	opt callstack 22
 10094                           
 10095                           ;screen.c: 99:     if(UpdateScreen)
 10096                           
 10097                           ;incstack = 0
 10098  002050  505B               	movf	_UpdateScreen,w,c	;volatile
 10099  002052  B4D8               	btfsc	status,2,c
 10100  002054  0012               	return	
 10101                           
 10102                           ;screen.c: 100:     {;screen.c: 101:         static uint8_t CurrentX = 0;;screen.c: 103:
      +                                   uint8_t xmask = 1 << CurrentX;
 10103  002056  C06A  F001         	movff	screen_update@CurrentX,??_screen_update
 10104  00205A  0E01               	movlw	1
 10105  00205C  6E02               	movwf	(??_screen_update+1)& (0+255),c
 10106  00205E  2A01               	incf	??_screen_update,f,c
 10107  002060  D002               	goto	i2u382_44
 10108  002062                     i2u382_45:
 10109  002062  90D8               	bcf	status,0,c
 10110  002064  3602               	rlcf	??_screen_update+1,f,c
 10111  002066                     i2u382_44:
 10112  002066  2E01               	decfsz	??_screen_update,f,c
 10113  002068  D7FC               	goto	i2u382_45
 10114  00206A  5002               	movf	??_screen_update+1,w,c
 10115  00206C  6E05               	movwf	screen_update@xmask,c
 10116                           
 10117                           ;screen.c: 104:         uint16_t ymask = ScreenData[CurrentX];
 10118  00206E  506A               	movf	screen_update@CurrentX,w,c
 10119  002070  0D02               	mullw	2
 10120  002072  0EB8               	movlw	low _ScreenData
 10121  002074  24F3               	addwf	prodl,w,c
 10122  002076  6ED9               	movwf	fsr2l,c
 10123  002078  0E00               	movlw	high _ScreenData
 10124  00207A  20F4               	addwfc	prodh,w,c
 10125  00207C  6EDA               	movwf	fsr2h,c
 10126  00207E  CFDE F003          	movff	postinc2,screen_update@ymask
 10127  002082  CFDD F004          	movff	postdec2,screen_update@ymask+1
 10128                           
 10129                           ;screen.c: 105:         port_display = ~0;
 10130  002086  6882               	setf	3970,c	;volatile
 10131  002088  6883               	setf	3971,c	;volatile
 10132                           
 10133                           ;screen.c: 106:         PORTA = xmask;
 10134  00208A  C005  FF80         	movff	screen_update@xmask,3968	;volatile
 10135                           
 10136                           ;screen.c: 107:         port_display = ~ymask;
 10137  00208E  1C03               	comf	screen_update@ymask,w,c
 10138  002090  6E82               	movwf	3970,c	;volatile
 10139  002092  1C04               	comf	screen_update@ymask+1,w,c
 10140  002094  6E83               	movwf	3971,c	;volatile
 10141                           
 10142                           ;screen.c: 110:         CurrentX++;
 10143  002096  2A6A               	incf	screen_update@CurrentX,f,c
 10144                           
 10145                           ;screen.c: 111:         CurrentX &= 0x07;
 10146  002098  0E07               	movlw	7
 10147  00209A  166A               	andwf	screen_update@CurrentX,f,c
 10148  00209C  0012               	return		;funcret
 10149  00209E                     __end_of_screen_update:
 10150                           	opt callstack 0
 10151                           
 10152 ;; *************** function _checkButtons *****************
 10153 ;; Defined at:
 10154 ;;		line 105 in file "buttons.c"
 10155 ;; Parameters:    Size  Location     Type
 10156 ;;		None
 10157 ;; Auto vars:     Size  Location     Type
 10158 ;;		None
 10159 ;; Return value:  Size  Location     Type
 10160 ;;                  1    wreg      void 
 10161 ;; Registers used:
 10162 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 10163 ;; Tracked objects:
 10164 ;;		On entry : 0/0
 10165 ;;		On exit  : 0/0
 10166 ;;		Unchanged: 0/0
 10167 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10168 ;;      Params:         0       0       0       0       0       0       0
 10169 ;;      Locals:         0       0       0       0       0       0       0
 10170 ;;      Temps:          0       0       0       0       0       0       0
 10171 ;;      Totals:         0       0       0       0       0       0       0
 10172 ;;Total ram usage:        0 bytes
 10173 ;; Hardware stack levels used:    1
 10174 ;; Hardware stack levels required when called:    1
 10175 ;; This function calls:
 10176 ;;		_debounceButton
 10177 ;; This function is called by:
 10178 ;;		_Interrupt
 10179 ;; This function uses a non-reentrant model
 10180 ;;
 10181                           
 10182                           	psect	text78
 10183  001C98                     __ptext78:
 10184                           	opt callstack 0
 10185  001C98                     _checkButtons:
 10186                           	opt callstack 21
 10187                           
 10188                           ;buttons.c: 107:     if (mtxButtons)
 10189                           
 10190                           ;incstack = 0
 10191  001C98  505C               	movf	_mtxButtons,w,c	;volatile
 10192  001C9A  B4D8               	btfsc	status,2,c
 10193  001C9C  0012               	return	
 10194                           
 10195                           ;buttons.c: 108:     {;buttons.c: 109:         debounceButton(PORTBbits.RB0, &Left_Delay
      +                          , &Left_Debounced );
 10196  001C9E  0E64               	movlw	low _Left_Delay
 10197  001CA0  6E01               	movwf	debounceButton@delay,c
 10198  001CA2  0E00               	movlw	high _Left_Delay
 10199  001CA4  6E02               	movwf	debounceButton@delay+1,c
 10200  001CA6  0E6D               	movlw	low _Left_Debounced
 10201  001CA8  6E03               	movwf	debounceButton@debounced,c
 10202  001CAA  0E00               	movlw	high _Left_Debounced
 10203  001CAC  6E04               	movwf	debounceButton@debounced+1,c
 10204  001CAE  A081               	btfss	3969,0,c	;volatile
 10205  001CB0  D002               	goto	i2u377_40
 10206  001CB2  0E01               	movlw	1
 10207  001CB4  D001               	goto	i2u377_46
 10208  001CB6                     i2u377_40:
 10209  001CB6  0E00               	movlw	0
 10210  001CB8                     i2u377_46:
 10211  001CB8  EC38  F00F         	call	_debounceButton
 10212                           
 10213                           ;buttons.c: 110:         debounceButton(PORTBbits.RB1, &Right_Delay, &Right_Debounced );
 10214  001CBC  0E62               	movlw	low _Right_Delay
 10215  001CBE  6E01               	movwf	debounceButton@delay,c
 10216  001CC0  0E00               	movlw	high _Right_Delay
 10217  001CC2  6E02               	movwf	debounceButton@delay+1,c
 10218  001CC4  0E6C               	movlw	low _Right_Debounced
 10219  001CC6  6E03               	movwf	debounceButton@debounced,c
 10220  001CC8  0E00               	movlw	high _Right_Debounced
 10221  001CCA  6E04               	movwf	debounceButton@debounced+1,c
 10222  001CCC  A281               	btfss	3969,1,c	;volatile
 10223  001CCE  D002               	goto	i2u378_40
 10224  001CD0  0E01               	movlw	1
 10225  001CD2  D001               	goto	i2u378_46
 10226  001CD4                     i2u378_40:
 10227  001CD4  0E00               	movlw	0
 10228  001CD6                     i2u378_46:
 10229  001CD6  EC38  F00F         	call	_debounceButton
 10230                           
 10231                           ;buttons.c: 111:         debounceButton(PORTBbits.RB2, &Rotate_Delay, &Rotate_Debounced)
      +                          ;
 10232  001CDA  0E60               	movlw	low _Rotate_Delay
 10233  001CDC  6E01               	movwf	debounceButton@delay,c
 10234  001CDE  0E00               	movlw	high _Rotate_Delay
 10235  001CE0  6E02               	movwf	debounceButton@delay+1,c
 10236  001CE2  0E6E               	movlw	low _Rotate_Debounced
 10237  001CE4  6E03               	movwf	debounceButton@debounced,c
 10238  001CE6  0E00               	movlw	high _Rotate_Debounced
 10239  001CE8  6E04               	movwf	debounceButton@debounced+1,c
 10240  001CEA  A481               	btfss	3969,2,c	;volatile
 10241  001CEC  D002               	goto	i2u379_40
 10242  001CEE  0E01               	movlw	1
 10243  001CF0  D001               	goto	i2u379_46
 10244  001CF2                     i2u379_40:
 10245  001CF2  0E00               	movlw	0
 10246  001CF4                     i2u379_46:
 10247  001CF4  EC38  F00F         	call	_debounceButton
 10248                           
 10249                           ;buttons.c: 112:         debounceButton(PORTBbits.RB3, &Down_Delay, &Down_Debounced );
 10250  001CF8  0E5E               	movlw	low _Down_Delay
 10251  001CFA  6E01               	movwf	debounceButton@delay,c
 10252  001CFC  0E00               	movlw	high _Down_Delay
 10253  001CFE  6E02               	movwf	debounceButton@delay+1,c
 10254  001D00  0E6B               	movlw	low _Down_Debounced
 10255  001D02  6E03               	movwf	debounceButton@debounced,c
 10256  001D04  0E00               	movlw	high _Down_Debounced
 10257  001D06  6E04               	movwf	debounceButton@debounced+1,c
 10258  001D08  A681               	btfss	3969,3,c	;volatile
 10259  001D0A  D002               	goto	i2u380_40
 10260  001D0C  0E01               	movlw	1
 10261  001D0E  D001               	goto	i2u380_46
 10262  001D10                     i2u380_40:
 10263  001D10  0E00               	movlw	0
 10264  001D12                     i2u380_46:
 10265  001D12  EC38  F00F         	call	_debounceButton
 10266  001D16  0012               	return		;funcret
 10267  001D18                     __end_of_checkButtons:
 10268                           	opt callstack 0
 10269                           
 10270 ;; *************** function _debounceButton *****************
 10271 ;; Defined at:
 10272 ;;		line 90 in file "buttons.c"
 10273 ;; Parameters:    Size  Location     Type
 10274 ;;  button          1    wreg     volatile _Bool 
 10275 ;;  delay           2    0[COMRAM] PTR volatile short 
 10276 ;;		 -> Down_Delay(2), Rotate_Delay(2), Right_Delay(2), Left_Delay(2), 
 10277 ;;  debounced       2    2[COMRAM] PTR volatile _Bool 
 10278 ;;		 -> Down_Debounced(1), Rotate_Debounced(1), Right_Debounced(1), Left_Debounced(1), 
 10279 ;; Auto vars:     Size  Location     Type
 10280 ;;  button          1    6[COMRAM] volatile _Bool 
 10281 ;; Return value:  Size  Location     Type
 10282 ;;                  1    wreg      void 
 10283 ;; Registers used:
 10284 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 10285 ;; Tracked objects:
 10286 ;;		On entry : 0/0
 10287 ;;		On exit  : 0/0
 10288 ;;		Unchanged: 0/0
 10289 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10290 ;;      Params:         4       0       0       0       0       0       0
 10291 ;;      Locals:         1       0       0       0       0       0       0
 10292 ;;      Temps:          2       0       0       0       0       0       0
 10293 ;;      Totals:         7       0       0       0       0       0       0
 10294 ;;Total ram usage:        7 bytes
 10295 ;; Hardware stack levels used:    1
 10296 ;; This function calls:
 10297 ;;		Nothing
 10298 ;; This function is called by:
 10299 ;;		_checkButtons
 10300 ;; This function uses a non-reentrant model
 10301 ;;
 10302                           
 10303                           	psect	text79
 10304  001E70                     __ptext79:
 10305                           	opt callstack 0
 10306  001E70                     _debounceButton:
 10307                           	opt callstack 21
 10308                           
 10309                           ;incstack = 0
 10310                           ;debounceButton@button stored from wreg
 10311  001E70  6E07               	movwf	debounceButton@button,c	;volatile
 10312                           
 10313                           ;buttons.c: 90: void debounceButton(volatile _Bool button, volatile int16_t *delay, vola
      +                          tile _Bool *debounced);buttons.c: 91: {;buttons.c: 92:     if (button == 0)
 10314  001E72  5007               	movf	debounceButton@button,w,c	;volatile
 10315  001E74  A4D8               	btfss	status,2,c
 10316  001E76  D023               	goto	i2l3839
 10317                           
 10318                           ;buttons.c: 93:     {;buttons.c: 94:         if (*delay < 0){ *delay = 50; }
 10319  001E78  C001  FFD9         	movff	debounceButton@delay,fsr2l
 10320  001E7C  C002  FFDA         	movff	debounceButton@delay+1,fsr2h
 10321  001E80  0E01               	movlw	1
 10322  001E82  AEDB               	btfss	plusw2,7,c
 10323  001E84  D009               	goto	i2l3835
 10324  001E86  C001  FFD9         	movff	debounceButton@delay,fsr2l
 10325  001E8A  C002  FFDA         	movff	debounceButton@delay+1,fsr2h
 10326  001E8E  0E32               	movlw	50
 10327  001E90  6EDE               	movwf	postinc2,c
 10328  001E92  0E00               	movlw	0
 10329  001E94  6EDD               	movwf	postdec2,c
 10330  001E96  0012               	return	
 10331  001E98                     i2l3835:
 10332  001E98  C001  FFD9         	movff	debounceButton@delay,fsr2l
 10333  001E9C  C002  FFDA         	movff	debounceButton@delay+1,fsr2h
 10334  001EA0  06DE               	decf	postinc2,f,c
 10335  001EA2  0E00               	movlw	0
 10336  001EA4  5ADD               	subwfb	postdec2,f,c
 10337  001EA6  28DE               	incf	postinc2,w,c
 10338  001EA8  E118               	bnz	i2l652
 10339  001EAA  28DE               	incf	postinc2,w,c
 10340  001EAC  A4D8               	btfss	status,2,c
 10341  001EAE  0012               	return	
 10342  001EB0  C003  FFD9         	movff	debounceButton@debounced,fsr2l
 10343  001EB4  C004  FFDA         	movff	debounceButton@debounced+1,fsr2h
 10344  001EB8  0E01               	movlw	1
 10345  001EBA  6EDF               	movwf	indf2,c
 10346  001EBC  0012               	return	
 10347  001EBE                     i2l3839:
 10348                           
 10349                           ;buttons.c: 98:     {;buttons.c: 99:         *delay = -1;
 10350  001EBE  C001  FFD9         	movff	debounceButton@delay,fsr2l
 10351  001EC2  C002  FFDA         	movff	debounceButton@delay+1,fsr2h
 10352  001EC6  0EFF               	movlw	255
 10353  001EC8  6EDE               	movwf	postinc2,c
 10354  001ECA  0EFF               	movlw	255
 10355  001ECC  6EDD               	movwf	postdec2,c
 10356                           
 10357                           ;buttons.c: 100:         *debounced = 0;
 10358  001ECE  C003  FFD9         	movff	debounceButton@debounced,fsr2l
 10359  001ED2  C004  FFDA         	movff	debounceButton@debounced+1,fsr2h
 10360  001ED6  0E00               	movlw	0
 10361  001ED8  6EDF               	movwf	indf2,c
 10362  001EDA                     i2l652:
 10363  001EDA  0012               	return		;funcret
 10364  001EDC                     __end_of_debounceButton:
 10365                           	opt callstack 0
 10366                           
 10367 ;; *************** function _add_mS *****************
 10368 ;; Defined at:
 10369 ;;		line 21 in file "shared_logic.c"
 10370 ;; Parameters:    Size  Location     Type
 10371 ;;  amount          2    0[COMRAM] unsigned short 
 10372 ;; Auto vars:     Size  Location     Type
 10373 ;;		None
 10374 ;; Return value:  Size  Location     Type
 10375 ;;                  2    0[COMRAM] unsigned short 
 10376 ;; Registers used:
 10377 ;;		wreg, status,2, status,0
 10378 ;; Tracked objects:
 10379 ;;		On entry : 0/0
 10380 ;;		On exit  : 0/0
 10381 ;;		Unchanged: 0/0
 10382 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10383 ;;      Params:         2       0       0       0       0       0       0
 10384 ;;      Locals:         0       0       0       0       0       0       0
 10385 ;;      Temps:          0       0       0       0       0       0       0
 10386 ;;      Totals:         2       0       0       0       0       0       0
 10387 ;;Total ram usage:        2 bytes
 10388 ;; Hardware stack levels used:    1
 10389 ;; This function calls:
 10390 ;;		Nothing
 10391 ;; This function is called by:
 10392 ;;		_Interrupt
 10393 ;; This function uses a non-reentrant model
 10394 ;;
 10395                           
 10396                           	psect	text80
 10397  0025F6                     __ptext80:
 10398                           	opt callstack 0
 10399  0025F6                     _add_mS:
 10400                           	opt callstack 22
 10401                           
 10402                           ;shared_logic.c: 21: uint16_t add_mS(uint16_t amount);shared_logic.c: 22: {;shared_logic
      +                          .c: 23:     mS = mS + amount;
 10403                           
 10404                           ;incstack = 0
 10405  0025F6  5001               	movf	add_mS@amount,w,c
 10406  0025F8  2457               	addwf	_mS,w,c	;volatile
 10407  0025FA  6E57               	movwf	_mS,c	;volatile
 10408  0025FC  5002               	movf	add_mS@amount+1,w,c
 10409  0025FE  2058               	addwfc	_mS+1,w,c	;volatile
 10410  002600  6E58               	movwf	_mS+1,c	;volatile
 10411  002602  0012               	return		;funcret
 10412  002604                     __end_of_add_mS:
 10413                           	opt callstack 0
 10414                           
 10415 ;; *************** function ___lwmod *****************
 10416 ;; Defined at:
 10417 ;;		line 7 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\lwmod.c"
 10418 ;; Parameters:    Size  Location     Type
 10419 ;;  dividend        2    2[COMRAM] unsigned int 
 10420 ;;  divisor         2    4[COMRAM] unsigned int 
 10421 ;; Auto vars:     Size  Location     Type
 10422 ;;  counter         1    6[COMRAM] unsigned char 
 10423 ;; Return value:  Size  Location     Type
 10424 ;;                  2    2[COMRAM] unsigned int 
 10425 ;; Registers used:
 10426 ;;		wreg, status,2, status,0
 10427 ;; Tracked objects:
 10428 ;;		On entry : 0/0
 10429 ;;		On exit  : 0/0
 10430 ;;		Unchanged: 0/0
 10431 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10432 ;;      Params:         4       0       0       0       0       0       0
 10433 ;;      Locals:         1       0       0       0       0       0       0
 10434 ;;      Temps:          0       0       0       0       0       0       0
 10435 ;;      Totals:         5       0       0       0       0       0       0
 10436 ;;Total ram usage:        5 bytes
 10437 ;; Hardware stack levels used:    1
 10438 ;; This function calls:
 10439 ;;		Nothing
 10440 ;; This function is called by:
 10441 ;;		_Interrupt
 10442 ;; This function uses a non-reentrant model
 10443 ;;
 10444                           
 10445                           	psect	text81
 10446  0020E0                     __ptext81:
 10447                           	opt callstack 0
 10448  0020E0                     ___lwmod:
 10449                           	opt callstack 22
 10450                           
 10451                           ;incstack = 0
 10452  0020E0  5005               	movf	___lwmod@divisor,w,c
 10453  0020E2  1006               	iorwf	___lwmod@divisor+1,w,c
 10454  0020E4  B4D8               	btfsc	status,2,c
 10455  0020E6  D018               	goto	i2l1263
 10456  0020E8  0E01               	movlw	1
 10457  0020EA  6E07               	movwf	___lwmod@counter,c
 10458  0020EC  D004               	goto	i2l4151
 10459  0020EE                     i2l4149:
 10460  0020EE  90D8               	bcf	status,0,c
 10461  0020F0  3605               	rlcf	___lwmod@divisor,f,c
 10462  0020F2  3606               	rlcf	___lwmod@divisor+1,f,c
 10463  0020F4  2A07               	incf	___lwmod@counter,f,c
 10464  0020F6                     i2l4151:
 10465  0020F6  AE06               	btfss	___lwmod@divisor+1,7,c
 10466  0020F8  D7FA               	goto	i2l4149
 10467  0020FA                     i2u384_40:
 10468  0020FA  5005               	movf	___lwmod@divisor,w,c
 10469  0020FC  5C03               	subwf	___lwmod@dividend,w,c
 10470  0020FE  5006               	movf	___lwmod@divisor+1,w,c
 10471  002100  5804               	subwfb	___lwmod@dividend+1,w,c
 10472  002102  A0D8               	btfss	status,0,c
 10473  002104  D004               	goto	i2l4157
 10474  002106  5005               	movf	___lwmod@divisor,w,c
 10475  002108  5E03               	subwf	___lwmod@dividend,f,c
 10476  00210A  5006               	movf	___lwmod@divisor+1,w,c
 10477  00210C  5A04               	subwfb	___lwmod@dividend+1,f,c
 10478  00210E                     i2l4157:
 10479  00210E  90D8               	bcf	status,0,c
 10480  002110  3206               	rrcf	___lwmod@divisor+1,f,c
 10481  002112  3205               	rrcf	___lwmod@divisor,f,c
 10482  002114  2E07               	decfsz	___lwmod@counter,f,c
 10483  002116  D7F1               	goto	i2u384_40
 10484  002118                     i2l1263:
 10485  002118  C003  F003         	movff	___lwmod@dividend,?___lwmod
 10486  00211C  C004  F004         	movff	___lwmod@dividend+1,?___lwmod+1
 10487  002120  0012               	return		;funcret
 10488  002122                     __end_of___lwmod:
 10489                           	opt callstack 0
 10490                           
 10491                           	psect	rparam
 10492  0000                     
 10493                           	psect	temp
 10494  00006F                     btemp:
 10495                           	opt callstack 0
 10496  00006F                     	ds	1
 10497  0000                     int$flags	set	btemp
 10498  0000                     wtemp8	set	btemp+1
 10499  0000                     ttemp5	set	btemp+1
 10500  0000                     ttemp6	set	btemp+4
 10501  0000                     ttemp7	set	btemp+8
 10502                           tosu	equ	0xFFF
 10503                           tosh	equ	0xFFE
 10504                           tosl	equ	0xFFD
 10505                           stkptr	equ	0xFFC
 10506                           pclatu	equ	0xFFB
 10507                           pclath	equ	0xFFA
 10508                           pcl	equ	0xFF9
 10509                           tblptru	equ	0xFF8
 10510                           tblptrh	equ	0xFF7
 10511                           tblptrl	equ	0xFF6
 10512                           tablat	equ	0xFF5
 10513                           prodh	equ	0xFF4
 10514                           prodl	equ	0xFF3
 10515                           indf0	equ	0xFEF
 10516                           postinc0	equ	0xFEE
 10517                           postdec0	equ	0xFED
 10518                           preinc0	equ	0xFEC
 10519                           plusw0	equ	0xFEB
 10520                           fsr0h	equ	0xFEA
 10521                           fsr0l	equ	0xFE9
 10522                           wreg	equ	0xFE8
 10523                           indf1	equ	0xFE7
 10524                           postinc1	equ	0xFE6
 10525                           postdec1	equ	0xFE5
 10526                           preinc1	equ	0xFE4
 10527                           plusw1	equ	0xFE3
 10528                           fsr1h	equ	0xFE2
 10529                           fsr1l	equ	0xFE1
 10530                           bsr	equ	0xFE0
 10531                           indf2	equ	0xFDF
 10532                           postinc2	equ	0xFDE
 10533                           postdec2	equ	0xFDD
 10534                           preinc2	equ	0xFDC
 10535                           plusw2	equ	0xFDB
 10536                           fsr2h	equ	0xFDA
 10537                           fsr2l	equ	0xFD9
 10538                           status	equ	0xFD8


Data Sizes:
    Strings     0
    Constant    256
    Data        149
    BSS         26
    Persistent  15
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          126     86     110
    BANK0           128     55      88
    BANK1           256    256     256
    BANK2           256      0     133
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0

Pointer List with Targets:

    set_splashscreen@newData	PTR const unsigned short  size(2) Largest target is 16
		 -> choosescreen@choosescreen(COMRAM[16]), snake_screen@SNAKE(CODE[16]), TETRIS(CODE[16]), 

    set_screen@newData	PTR unsigned short  size(2) Largest target is 28
		 -> show_score@Numberscreen(BANK0[16]), SnakeGraph@ObjectData(COMRAM[16]), tetris_main@Screen_Data(BANK1[16]), tetris.currentblock(COMRAM[19]), 
		 -> tetris_main@tetris(BANK1[28]), 

    debounceButton@debounced	PTR volatile _Bool  size(2) Largest target is 1
		 -> Down_Debounced(COMRAM[1]), Rotate_Debounced(COMRAM[1]), Right_Debounced(COMRAM[1]), Left_Debounced(COMRAM[1]), 

    debounceButton@delay	PTR volatile short  size(2) Largest target is 2
		 -> Down_Delay(COMRAM[2]), Rotate_Delay(COMRAM[2]), Right_Delay(COMRAM[2]), Left_Delay(COMRAM[2]), 

    moveObject@pObject	PTR unsigned short  size(2) Largest target is 16
		 -> show_score@tmpObjectData(BANK0[16]), tetris_button_right@tmpObjectData(COMRAM[16]), tetris_button_left@tmpObjectData(COMRAM[16]), 

    getNumber@pTarget	PTR unsigned short  size(2) Largest target is 16
		 -> show_score@tmpObjectData(BANK0[16]), 

    removeLine@pObject	PTR volatile unsigned short  size(2) Largest target is 16
		 -> tetris_main@BackgroundData(BANK1[16]), 

    pixelCount@pSource	PTR volatile unsigned short  size(2) Largest target is 16
		 -> tetris_main@tetris.graphic(COMRAM[16]), removeLine@currentLine.graphic(COMRAM[16]), tetris.currentblock.graphic(COMRAM[16]), tetris_button_up@tetrisblock(COMRAM[2]), 
		 -> tetris_button_up@tmpObjectData(COMRAM[16]), 

    collisionDetect@pTarget	PTR volatile unsigned short  size(2) Largest target is 16
		 -> tetris_main@BackgroundData(BANK1[16]), 

    collisionDetect@pSource	PTR volatile unsigned short  size(2) Largest target is 16
		 -> tetris_main@tetris.graphic(COMRAM[16]), tetris.currentblock.graphic(COMRAM[16]), tetris_button_up@tmpObjectData(COMRAM[16]), tetris_button_right@tmpObjectData(COMRAM[16]), 
		 -> tetris_button_left@tmpObjectData(COMRAM[16]), moveObjectDown@tetrisblock(COMRAM[2]), 

    checkForRightWall@pObject	PTR volatile unsigned short  size(2) Largest target is 28
		 -> tetris_main@tetris.graphic(COMRAM[16]), tetris_main@tetris(BANK1[28]), 

    checkForLeftWall@pObject	PTR volatile unsigned short  size(2) Largest target is 28
		 -> tetris_main@tetris.graphic(COMRAM[16]), tetris_main@tetris(BANK1[28]), 

    mergeObjects@pSource	PTR volatile unsigned short  size(2) Largest target is 28
		 -> tetris_main@tetris.graphic(COMRAM[16]), choosescreen@mask(COMRAM[16]), show_score@mask(BANK0[16]), show_score@tmpObjectData(BANK0[16]), 
		 -> tetris.currentblock.graphic(COMRAM[16]), tetris.currentblock(COMRAM[19]), tetris_main@tetris(BANK1[28]), tetris_main@BackgroundData(BANK1[16]), 
		 -> tetris_button_up@tmpObjectData(COMRAM[16]), tetris_button_right@tmpObjectData(COMRAM[16]), tetris_button_left@tmpObjectData(COMRAM[16]), moveObjectDown@tetrisblock(COMRAM[2]), 

    mergeObjects@pTarget	PTR volatile unsigned short  size(2) Largest target is 28
		 -> tetris_main@tetris.graphic(COMRAM[16]), removeLine@currentLine.graphic(COMRAM[16]), ScreenData(BANK0[16]), show_score@Numberscreen(BANK0[16]), 
		 -> tetris_main@Screen_Data(BANK1[16]), tetris.currentblock.graphic(COMRAM[16]), tetris_main@tetris(BANK1[28]), tetris_main@BackgroundData(BANK1[16]), 
		 -> tetris_button_up@tetrisblock(COMRAM[2]), tetris_button_right@tmpObjectData(COMRAM[16]), 

    clearArray@pArray	PTR volatile unsigned short  size(2) Largest target is 19
		 -> show_score@Numberscreen(BANK0[16]), SnakeGraph@ObjectData(COMRAM[16]), tetris.currentblock.graphic(COMRAM[16]), tetris.currentblock(COMRAM[19]), 
		 -> tetris_main@BackgroundData(BANK1[16]), tetris_button_up@tmpObjectData(COMRAM[16]), 

    sp__itoa	PTR unsigned char  size(2) Largest target is 4
		 -> show_score@number(BANK0[4]), 

    itoa@str	PTR unsigned char  size(2) Largest target is 4
		 -> show_score@number(BANK0[4]), 

    reverse@str	PTR unsigned char  size(2) Largest target is 4
		 -> show_score@number(BANK0[4]), 

    swap@b	PTR unsigned char  size(2) Largest target is 4
		 -> show_score@number(BANK0[4]), 

    swap@a	PTR unsigned char  size(2) Largest target is 4
		 -> show_score@number(BANK0[4]), 

    memcpyvol@src	PTR const void  size(2) Largest target is 133
		 -> tetris_main@tetris.graphic(COMRAM[16]), choosescreen@choosescreen(COMRAM[16]), show_score@Numberscreen(BANK0[16]), SnakeGraph@ObjectData(COMRAM[16]), 
		 -> snake_screen@SNAKE(CODE[16]), tetris_main@Screen_Data(BANK1[16]), tetris.currentblock.graphic(COMRAM[16]), tetris.currentblock(COMRAM[19]), 
		 -> tetris_main@tetris(BANK1[28]), newRotation@tetrisblock(COMRAM[2]), TETRIS(CODE[16]), shapes.graphic(BANK2[16]), 
		 -> shapes(BANK2[133]), 

    memcpyvol@s	PTR unsigned char  size(2) Largest target is 133
		 -> tetris_main@tetris.graphic(COMRAM[16]), choosescreen@choosescreen(COMRAM[16]), show_score@Numberscreen(BANK0[16]), SnakeGraph@ObjectData(COMRAM[16]), 
		 -> snake_screen@SNAKE(CODE[16]), tetris_main@Screen_Data(BANK1[16]), tetris.currentblock.graphic(COMRAM[16]), tetris.currentblock(COMRAM[19]), 
		 -> tetris_main@tetris(BANK1[28]), newRotation@tetrisblock(COMRAM[2]), TETRIS(CODE[16]), shapes.graphic(BANK2[16]), 
		 -> shapes(BANK2[133]), 

    memcpyvol@dest	PTR volatile void  size(2) Largest target is 16
		 -> tetris_main@tetris.graphic(COMRAM[16]), removeLine@currentLine.graphic(COMRAM[16]), ScreenData(BANK0[16]), tetris.currentblock.graphic(COMRAM[16]), 
		 -> tetris_button_up@tmpObjectData(COMRAM[16]), tetris_button_left@tmpObjectData(COMRAM[16]), selectNextObject@NewBlock(COMRAM[2]), 

    memcpyvol@d	PTR unsigned char  size(2) Largest target is 16
		 -> tetris_main@tetris.graphic(COMRAM[16]), removeLine@currentLine.graphic(COMRAM[16]), ScreenData(BANK0[16]), tetris.currentblock.graphic(COMRAM[16]), 
		 -> tetris_button_up@tmpObjectData(COMRAM[16]), tetris_button_left@tmpObjectData(COMRAM[16]), selectNextObject@NewBlock(COMRAM[2]), 

    sp__memcpy	PTR void  size(2) Largest target is 16
		 -> show_score@tmpObjectData(BANK0[16]), 

    memcpy@src	PTR const void  size(2) Largest target is 160
		 -> Number(CODE[160]), 

    memcpy@s	PTR unsigned char  size(2) Largest target is 160
		 -> Number(CODE[160]), 

    memcpy@dest	PTR void  size(2) Largest target is 16
		 -> show_score@tmpObjectData(BANK0[16]), 

    memcpy@d	PTR unsigned char  size(2) Largest target is 16
		 -> show_score@tmpObjectData(BANK0[16]), 

    aibuttons@positions	PTR struct position size(2) Largest target is 256
		 -> snake_main@positions(BANK1[256]), 

    aibuttons@direction	PTR unsigned char  size(2) Largest target is 1
		 -> snake_main@direction(COMRAM[1]), 

    snake_buttons@previous_direction	PTR unsigned char  size(2) Largest target is 1
		 -> snake_main@previous_direction(COMRAM[1]), 

    snake_buttons@direction	PTR unsigned char  size(2) Largest target is 1
		 -> snake_main@direction(COMRAM[1]), 

    inistialize_snake@berry	PTR struct position size(2) Largest target is 2
		 -> snake_main@berry(COMRAM[2]), 

    inistialize_snake@snakeLength	PTR unsigned char  size(2) Largest target is 1
		 -> snake_main@snakeLength(COMRAM[1]), 

    inistialize_snake@positions	PTR struct position size(2) Largest target is 256
		 -> snake_main@positions(BANK1[256]), 

    MoveSnakes@EndOfGame	PTR _Bool  size(2) Largest target is 1
		 -> snake_main@EndOfGame(COMRAM[1]), 

    MoveSnakes@berry	PTR struct position size(2) Largest target is 2
		 -> snake_main@berry(COMRAM[2]), 

    MoveSnakes@snakeLength	PTR unsigned char  size(2) Largest target is 1
		 -> snake_main@snakeLength(COMRAM[1]), 

    MoveSnakes@direction	PTR unsigned char  size(2) Largest target is 1
		 -> snake_main@direction(COMRAM[1]), 

    MoveSnakes@previous_direction	PTR unsigned char  size(2) Largest target is 1
		 -> snake_main@previous_direction(COMRAM[1]), 

    MoveSnakes@positions	PTR struct position size(2) Largest target is 256
		 -> snake_main@positions(BANK1[256]), 

    SnakeGraph@berry	PTR struct position size(2) Largest target is 2
		 -> snake_main@berry(COMRAM[2]), 

    SnakeGraph@snakeLength	PTR unsigned char  size(2) Largest target is 1
		 -> snake_main@snakeLength(COMRAM[1]), 

    SnakeGraph@positions	PTR struct position size(2) Largest target is 256
		 -> snake_main@positions(BANK1[256]), 

    CreateBerry@snakeLength	PTR unsigned char  size(2) Largest target is 1
		 -> snake_main@snakeLength(COMRAM[1]), 

    CreateBerry@positions	PTR struct position size(2) Largest target is 256
		 -> snake_main@positions(BANK1[256]), 

    CreateBerry@berry	PTR struct position size(2) Largest target is 2
		 -> snake_main@berry(COMRAM[2]), 

    snake_button_down@direction	PTR unsigned char  size(2) Largest target is 1
		 -> snake_main@direction(COMRAM[1]), 

    snake_button_down@previous_direction	PTR unsigned char  size(2) Largest target is 1
		 -> snake_main@previous_direction(COMRAM[1]), 

    snake_button_right@direction	PTR unsigned char  size(2) Largest target is 1
		 -> snake_main@direction(COMRAM[1]), 

    snake_button_right@previous_direction	PTR unsigned char  size(2) Largest target is 1
		 -> snake_main@previous_direction(COMRAM[1]), 

    snake_button_up@direction	PTR unsigned char  size(2) Largest target is 1
		 -> snake_main@direction(COMRAM[1]), 

    snake_button_up@previous_direction	PTR unsigned char  size(2) Largest target is 1
		 -> snake_main@previous_direction(COMRAM[1]), 

    snake_button_left@direction	PTR unsigned char  size(2) Largest target is 1
		 -> snake_main@direction(COMRAM[1]), 

    snake_button_left@previous_direction	PTR unsigned char  size(2) Largest target is 1
		 -> snake_main@previous_direction(COMRAM[1]), 

    tetris_buttons@EndOfGame	PTR _Bool  size(2) Largest target is 1
		 -> tetris_main@EndOfGame(BANK1[1]), 

    tetris_buttons@rotation	PTR enum E2586 size(2) Largest target is 1
		 -> tetris_main@rotation(BANK1[1]), 

    tetris_buttons@BackgroundData	PTR unsigned short  size(2) Largest target is 16
		 -> tetris_main@BackgroundData(BANK1[16]), 

    tetris_buttons@tetris	PTR struct tetris size(2) Largest target is 28
		 -> tetris_main@tetris(BANK1[28]), 

    tetris_buttons@CheckForNewLines	PTR _Bool  size(2) Largest target is 1
		 -> tetris_main@CheckForNewLines(BANK1[1]), 

    tetris_button_down@EndOfGame	PTR _Bool  size(2) Largest target is 1
		 -> tetris_main@EndOfGame(BANK1[1]), 

    tetris_button_down@CheckForNewLines	PTR _Bool  size(2) Largest target is 1
		 -> tetris_main@CheckForNewLines(BANK1[1]), 

    tetris_button_down@BackgroundData	PTR unsigned short  size(2) Largest target is 16
		 -> tetris_main@BackgroundData(BANK1[16]), 

    tetris_button_down@tetris	PTR struct tetris size(2) Largest target is 28
		 -> tetris_main@tetris(BANK1[28]), 

    tetris_button_up@BackgroundData	PTR unsigned short  size(2) Largest target is 16
		 -> tetris_main@BackgroundData(BANK1[16]), 

    tetris_button_up@tetrisblock	PTR struct shape size(2) Largest target is 28
		 -> removeLine@currentLine(COMRAM[1]), tetris.currentblock(COMRAM[19]), tetris_main@tetris(BANK1[28]), 

    tetris_button_up@rotation	PTR enum E2586 size(2) Largest target is 1
		 -> tetris_main@rotation(BANK1[1]), 

    tetris_button_up@tetris	PTR struct tetris size(2) Largest target is 28
		 -> tetris_main@tetris(BANK1[28]), 

    tetris_button_right@BackgroundData	PTR unsigned short  size(2) Largest target is 16
		 -> tetris_main@BackgroundData(BANK1[16]), 

    tetris_button_right@tetrisblock	PTR struct shape size(2) Largest target is 28
		 -> tetris_main@tetris(BANK1[28]), 

    tetris_button_left@BackgroundData	PTR unsigned short  size(2) Largest target is 16
		 -> tetris_main@BackgroundData(BANK1[16]), 

    tetris_button_left@tetrisblock	PTR struct shape size(2) Largest target is 28
		 -> tetris_main@tetris(BANK1[28]), 

    checkForLines@pObject	PTR unsigned short  size(2) Largest target is 16
		 -> tetris_main@BackgroundData(BANK1[16]), 

    newRotation@rotation	PTR enum E2586 size(2) Largest target is 1
		 -> tetris_main@rotation(BANK1[1]), 

    newRotation@pTarget	PTR unsigned short  size(2) Largest target is 16
		 -> tetris_button_up@tmpObjectData(COMRAM[16]), 

    newRotation@tetris	PTR struct tetris size(2) Largest target is 28
		 -> tetris_main@tetris(BANK1[28]), 

    newRotation@tetrisblock	PTR struct shape size(2) Largest target is 28
		 -> tetris.currentblock(COMRAM[19]), tetris_main@tetris(BANK1[28]), 

    moveObjectDown@EndOfGame	PTR _Bool  size(2) Largest target is 1
		 -> tetris_main@EndOfGame(BANK1[1]), 

    moveObjectDown@CheckForNewLines	PTR _Bool  size(2) Largest target is 1
		 -> tetris_main@CheckForNewLines(BANK1[1]), 

    moveObjectDown@BackgroundData	PTR unsigned short  size(2) Largest target is 16
		 -> tetris_main@BackgroundData(BANK1[16]), 

    moveObjectDown@tetris	PTR struct tetris size(2) Largest target is 28
		 -> tetris_main@tetris(BANK1[28]), 

    moveObjectDown@tetrisblock	PTR struct shape size(2) Largest target is 28
		 -> tetris.currentblock(COMRAM[19]), tetris_main@tetris(BANK1[28]), 

    moveObjecttetris@tetrisblock	PTR struct shape size(2) Largest target is 28
		 -> tetris.currentblock(COMRAM[19]), tetris_main@tetris(BANK1[28]), 

    checkForBottom@pObject	PTR volatile unsigned short  size(2) Largest target is 2
		 -> tetris_main@tetris.graphic(COMRAM[16]), tetris.currentblock.graphic(COMRAM[16]), moveObjectDown@tetrisblock(COMRAM[2]), 

    sp__memcpyvol	PTR volatile void  size(2) Largest target is 16
		 -> tetris_main@tetris.graphic(COMRAM[16]), removeLine@currentLine.graphic(COMRAM[16]), ScreenData(BANK0[16]), tetris.currentblock.graphic(COMRAM[16]), 
		 -> tetris_button_up@tmpObjectData(COMRAM[16]), tetris_button_left@tmpObjectData(COMRAM[16]), selectNextObject@NewBlock(COMRAM[2]), 

    selectNextObject@NewBlock	PTR struct shape size(2) Largest target is 28
		 -> removeLine@currentLine(COMRAM[1]), tetris.currentblock(COMRAM[19]), tetris_main@tetris(BANK1[28]), 

    selectNextObject@s	PTR struct shape size(2) Largest target is 133
		 -> shapes(BANK2[133]), 

    selectNextObject@tetris	PTR struct tetris size(2) Largest target is 28
		 -> tetris_main@tetris(BANK1[28]), 


Critical Paths under _main in COMRAM

    _main->_snake_main
    _tetris_main->_tetris_buttons
    _tetris_screen->_set_splashscreen
    _tetris_buttons->_tetris_button_up
    _tetris_button_up->_newRotation
    _newRotation->_memcpyvol
    _tetris_button_right->_collisionDetect
    _tetris_button_left->_collisionDetect
    _tetris_button_down->_moveObjectDown
    _moveObjectDown->_selectNextObject
    _selectNextObject->_memcpyvol
    _checkForLines->_removeLine
    _snake_main->_MoveSnakes
    _writeHighScore->_WriteEEByte
    _snake_screen->_set_splashscreen
    _snake_buttons->_snake_button_left
    _snake_buttons->_snake_button_right
    _snake_buttons->_snake_button_up
    _show_score->_itoa
    _itoa->_reverse
    _reverse->_swap
    _getNumber->_memcpy
    _readHighScore->_WriteEEByte
    _inistialize_snake->_CreateBerry
    _MoveSnakes->_SnakeGraph
    _SnakeGraph->_set_screen
    _set_screen->_memcpyvol
    _CreateBerry->_genBerry
    _genBerry->_rnd_get_num
    _choosescreen->_mergeObjects
    _choosescreen->_set_splashscreen
    _set_splashscreen->_memcpyvol

Critical Paths under _isr in COMRAM

    _isr->_Interrupt
    _Interrupt->___lwmod
    _checkButtons->_debounceButton
    ___lwmod->i2_get_mS

Critical Paths under _main in BANK0

    _tetris_main->_show_score
    _snake_main->_show_score

Critical Paths under _isr in BANK0

    None.

Critical Paths under _main in BANK1

    _main->_snake_main

Critical Paths under _isr in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _isr in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _isr in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _isr in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _isr in BANK5

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0  118332
                       _choosescreen
                             _get_mS
                _initialise_hardware
                  _initialise_screen
                     _rnd_initialize
                             _set_mS
                         _snake_main
                       _start_button
                        _tetris_main
 ---------------------------------------------------------------------------------
 (1) _tetris_main                                         67    67      0   82905
                                              0 BANK1     67    67      0
                      _checkForLines
                         _clearArray
                       _mergeObjects
                     _moveObjectDown
                      _readHighScore
                   _selectNextObject
                         _set_screen
                         _show_score
                     _tetris_buttons
                      _tetris_screen
                     _writeHighScore
 ---------------------------------------------------------------------------------
 (2) _tetris_screen                                        0     0      0    2036
                   _set_splashscreen
                             _waitms
 ---------------------------------------------------------------------------------
 (2) _tetris_buttons                                      11     1     10   41014
                                             66 COMRAM    11     1     10
                          _checkDown
                          _checkLeft
                         _checkRight
                            _checkUp
                 _tetris_button_down
                 _tetris_button_left
                _tetris_button_right
                   _tetris_button_up
 ---------------------------------------------------------------------------------
 (3) _tetris_button_up                                    25    19      6   11302
                                             41 COMRAM    25    19      6
                         _clearArray
                    _collisionDetect
                       _mergeObjects
                        _newRotation
                         _pixelCount
 ---------------------------------------------------------------------------------
 (4) _pixelCount                                          12    10      2     378
                                             12 COMRAM    12    10      2
 ---------------------------------------------------------------------------------
 (4) _newRotation                                         19    13      6    4494
                                             22 COMRAM    19    13      6
                             ___wmul
                         _clearArray
                          _memcpyvol
 ---------------------------------------------------------------------------------
 (5) ___wmul                                               6     2      4     412
                                             12 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (3) _tetris_button_right                                 20    16      4    7268
                                             25 COMRAM    20    16      4
                  _checkForRightWall
                    _collisionDetect
                       _mergeObjects
                         _moveObject
                  _pauseMultiplexing
                 _resumeMultiplexing
 ---------------------------------------------------------------------------------
 (4) _checkForRightWall                                    4     2      2     121
                                             12 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (3) _tetris_button_left                                  20    16      4    8780
                                             25 COMRAM    20    16      4
                   _checkForLeftWall
                    _collisionDetect
                          _memcpyvol
                       _mergeObjects
                         _moveObject
                  _pauseMultiplexing
                 _resumeMultiplexing
 ---------------------------------------------------------------------------------
 (4) _checkForLeftWall                                     4     2      2     121
                                             12 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (3) _tetris_button_down                                   8     0      8   12641
                                             54 COMRAM     8     0      8
                     _moveObjectDown
 ---------------------------------------------------------------------------------
 (4) _moveObjectDown                                      11     3      8   12157
                                             43 COMRAM    11     3      8
                     _checkForBottom
                    _collisionDetect
                       _mergeObjects
                   _moveObjecttetris
                   _selectNextObject
                             _set_mS
 ---------------------------------------------------------------------------------
 (5) _selectNextObject                                    21    19      2    3952
                                             22 COMRAM    21    19      2
                            ___awmod
                          _memcpyvol
                        _rnd_get_num
                             _set_mS
 ---------------------------------------------------------------------------------
 (5) _set_mS                                               2     0      2     356
                                             12 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (5) _moveObjecttetris                                    12     8      4    1797
                                             12 COMRAM    12     8      4
 ---------------------------------------------------------------------------------
 (4) _collisionDetect                                     13     9      4    1058
                                             12 COMRAM    13     9      4
 ---------------------------------------------------------------------------------
 (5) _checkForBottom                                       7     5      2     220
                                             12 COMRAM     7     5      2
 ---------------------------------------------------------------------------------
 (2) _checkForLines                                       13    11      2    1195
                                             36 COMRAM    13    11      2
                         _removeLine
 ---------------------------------------------------------------------------------
 (3) _removeLine                                          24    21      3     740
                                             12 COMRAM    24    21      3
 ---------------------------------------------------------------------------------
 (1) _start_button                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _snake_main                                         264   264      0   29119
                                             78 COMRAM     8     8      0
                                              0 BANK1    256   256      0
                         _MoveSnakes
                          _aibuttons
                  _inistialize_snake
                      _readHighScore
                         _show_score
                      _snake_buttons
                       _snake_screen
                     _writeHighScore
 ---------------------------------------------------------------------------------
 (2) _writeHighScore                                       3     1      2     726
                                             14 COMRAM     3     1      2
                        _WriteEEByte
 ---------------------------------------------------------------------------------
 (2) _snake_screen                                         0     0      0    2098
                          _checkLeft
                         _checkRight
                   _set_splashscreen
                             _waitms
 ---------------------------------------------------------------------------------
 (3) _waitms                                               2     0      2     211
                                             12 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (2) _snake_buttons                                        4     0      4    1336
                                             17 COMRAM     4     0      4
                          _checkDown
                          _checkLeft
                         _checkRight
                            _checkUp
                  _snake_button_down
                  _snake_button_left
                 _snake_button_right
                    _snake_button_up
 ---------------------------------------------------------------------------------
 (3) _snake_button_up                                      5     1      4     196
                                             12 COMRAM     5     1      4
 ---------------------------------------------------------------------------------
 (3) _snake_button_right                                   5     1      4     196
                                             12 COMRAM     5     1      4
 ---------------------------------------------------------------------------------
 (3) _snake_button_left                                    5     1      4     196
                                             12 COMRAM     5     1      4
 ---------------------------------------------------------------------------------
 (3) _snake_button_down                                    4     0      4     196
                                             12 COMRAM     4     0      4
 ---------------------------------------------------------------------------------
 (3) _checkRight                                           1     1      0      31
                                             12 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (3) _checkLeft                                            1     1      0      31
                                             12 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _show_score                                          55    55      0   13430
                                              0 BANK0     55    55      0
                          _checkDown
                         _clearArray
                          _getNumber
                               _itoa
                       _mergeObjects
                         _moveObject
                       _pauseButtons
                  _pauseMultiplexing
                      _resumeButtons
                 _resumeMultiplexing
                         _set_screen
 ---------------------------------------------------------------------------------
 (3) _resumeButtons                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _pauseButtons                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (4) _moveObject                                          12     8      4    2089
                                             12 COMRAM    12     8      4
 ---------------------------------------------------------------------------------
 (3) _itoa                                                13     7      6    3288
                                             26 COMRAM    13     7      6
                            ___awdiv
                            ___awmod
                            _reverse
 ---------------------------------------------------------------------------------
 (4) _reverse                                              9     5      4     747
                                             17 COMRAM     9     5      4
                               _swap
 ---------------------------------------------------------------------------------
 (5) _swap                                                 5     1      4     338
                                             12 COMRAM     5     1      4
 ---------------------------------------------------------------------------------
 (6) ___awmod                                              6     2      4     793
                                             12 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (4) ___awdiv                                              8     4      4     625
                                             12 COMRAM     8     4      4
 ---------------------------------------------------------------------------------
 (3) _getNumber                                            3     1      2     596
                                             22 COMRAM     3     1      2
                             _memcpy
 ---------------------------------------------------------------------------------
 (4) _memcpy                                              10     4      6     444
                                             12 COMRAM    10     4      6
 ---------------------------------------------------------------------------------
 (2) _readHighScore                                        2     2      0     434
                                             14 COMRAM     2     2      0
                         _ReadEEByte
                        _WriteEEByte
 ---------------------------------------------------------------------------------
 (3) _WriteEEByte                                          2     1      1     242
                                             12 COMRAM     2     1      1
                   _waitForInterrupt
 ---------------------------------------------------------------------------------
 (3) _ReadEEByte                                           1     1      0      31
                                             12 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _inistialize_snake                                    9     3      6    1912
                                             34 COMRAM     9     3      6
                        _CreateBerry
 ---------------------------------------------------------------------------------
 (2) _aibuttons                                           10     6      4     482
                                             12 COMRAM    10     6      4
 ---------------------------------------------------------------------------------
 (2) _MoveSnakes                                          22    10     12    7755
                                             56 COMRAM    22    10     12
                        _CreateBerry
                         _SnakeGraph
 ---------------------------------------------------------------------------------
 (3) _SnakeGraph                                          32    26      6    4141
                                             24 COMRAM    32    26      6
                         _clearArray
                         _set_screen
 ---------------------------------------------------------------------------------
 (3) _set_screen                                           2     0      2    2005
                                             22 COMRAM     2     0      2
                          _memcpyvol
                  _pauseMultiplexing
                 _resumeMultiplexing
 ---------------------------------------------------------------------------------
 (5) _clearArray                                           4     0      4    1173
                                             12 COMRAM     4     0      4
 ---------------------------------------------------------------------------------
 (3) _CreateBerry                                         12     6      6    1264
                                             22 COMRAM    12     6      6
                           _genBerry
 ---------------------------------------------------------------------------------
 (4) _genBerry                                             2     2      0     368
                                             20 COMRAM     2     2      0
                            ___lbmod
                        _rnd_get_num
 ---------------------------------------------------------------------------------
 (6) _rnd_get_num                                          8     6      2      34
                                             12 COMRAM     8     6      2
 ---------------------------------------------------------------------------------
 (5) ___lbmod                                              4     3      1     235
                                             12 COMRAM     4     3      1
 ---------------------------------------------------------------------------------
 (1) _rnd_initialize                                       1     1      0      15
                                             12 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _initialise_screen                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _initialise_hardware                                  0     0      0       0
                    _initialise_TMR0
 ---------------------------------------------------------------------------------
 (2) _initialise_TMR0                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _get_mS                                               2     0      2       0
                                             12 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (1) _choosescreen                                        42    42      0    5937
                                             24 COMRAM    42    42      0
                          _checkDown
                            _checkUp
                       _mergeObjects
                  _pauseMultiplexing
                 _resumeMultiplexing
                   _set_splashscreen
 ---------------------------------------------------------------------------------
 (3) _set_splashscreen                                     2     0      2    1825
                                             22 COMRAM     2     0      2
                          _memcpyvol
                  _pauseMultiplexing
                 _resumeMultiplexing
 ---------------------------------------------------------------------------------
 (4) _resumeMultiplexing                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (4) _pauseMultiplexing                                    0     0      0       0
                   _waitForInterrupt
 ---------------------------------------------------------------------------------
 (4) _waitForInterrupt                                     0     0      0       0
 ---------------------------------------------------------------------------------
 (4) _memcpyvol                                           10     4      6    1524
                                             12 COMRAM    10     4      6
 ---------------------------------------------------------------------------------
 (4) _mergeObjects                                        12     7      5    3469
                                             12 COMRAM    12     7      5
 ---------------------------------------------------------------------------------
 (3) _checkUp                                              1     1      0      31
                                             12 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (3) _checkDown                                            1     1      0      31
                                             12 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (7) _isr                                                  4     4      0    1461
                                              8 COMRAM     4     4      0
                          _Interrupt
 ---------------------------------------------------------------------------------
 (8) _Interrupt                                            1     1      0    1461
                                              7 COMRAM     1     1      0
                            ___lwmod
                             _add_mS
                       _checkButtons
                      _screen_update
                        _snake_timer
                       _tetris_timer
                           i2_get_mS
                           i2_set_mS
 ---------------------------------------------------------------------------------
 (9) i2_set_mS                                             2     0      2      48
                                              0 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (9) i2_get_mS                                             2     0      2       0
                                              0 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (9) _tetris_timer                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (9) _snake_timer                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (9) _screen_update                                        5     5      0      46
                                              0 COMRAM     5     5      0
 ---------------------------------------------------------------------------------
 (9) _checkButtons                                         0     0      0     762
                     _debounceButton
 ---------------------------------------------------------------------------------
 (10) _debounceButton                                      7     3      4     762
                                              0 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (9) _add_mS                                               2     0      2      98
                                              0 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (9) ___lwmod                                              5     1      4     463
                                              2 COMRAM     5     1      4
                           i2_get_mS (ARG)
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 10
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _choosescreen
     _checkDown
     _checkUp
     _mergeObjects
     _pauseMultiplexing
       _waitForInterrupt
     _resumeMultiplexing
     _set_splashscreen
       _memcpyvol
       _pauseMultiplexing
         _waitForInterrupt
       _resumeMultiplexing
   _get_mS
   _initialise_hardware
     _initialise_TMR0
   _initialise_screen
   _rnd_initialize
   _set_mS
   _snake_main
     _MoveSnakes
       _CreateBerry
         _genBerry
           ___lbmod
           _rnd_get_num
       _SnakeGraph
         _clearArray
         _set_screen
           _memcpyvol
           _pauseMultiplexing
             _waitForInterrupt
           _resumeMultiplexing
     _aibuttons
     _inistialize_snake
       _CreateBerry
         _genBerry
           ___lbmod
           _rnd_get_num
     _readHighScore
       _ReadEEByte
       _WriteEEByte
         _waitForInterrupt
     _show_score
       _checkDown
       _clearArray
       _getNumber
         _memcpy
       _itoa
         ___awdiv
         ___awmod
         _reverse
           _swap
       _mergeObjects
       _moveObject
       _pauseButtons
       _pauseMultiplexing
         _waitForInterrupt
       _resumeButtons
       _resumeMultiplexing
       _set_screen
         _memcpyvol
         _pauseMultiplexing
           _waitForInterrupt
         _resumeMultiplexing
     _snake_buttons
       _checkDown
       _checkLeft
       _checkRight
       _checkUp
       _snake_button_down
       _snake_button_left
       _snake_button_right
       _snake_button_up
     _snake_screen
       _checkLeft
       _checkRight
       _set_splashscreen
         _memcpyvol
         _pauseMultiplexing
           _waitForInterrupt
         _resumeMultiplexing
       _waitms
     _writeHighScore
       _WriteEEByte
         _waitForInterrupt
   _start_button
   _tetris_main
     _checkForLines
       _removeLine
     _clearArray
     _mergeObjects
     _moveObjectDown
       _checkForBottom
       _collisionDetect
       _mergeObjects
       _moveObjecttetris
       _selectNextObject
         ___awmod
         _memcpyvol
         _rnd_get_num
         _set_mS
       _set_mS
     _readHighScore
       _ReadEEByte
       _WriteEEByte
         _waitForInterrupt
     _selectNextObject
       ___awmod
       _memcpyvol
       _rnd_get_num
       _set_mS
     _set_screen
       _memcpyvol
       _pauseMultiplexing
         _waitForInterrupt
       _resumeMultiplexing
     _show_score
       _checkDown
       _clearArray
       _getNumber
         _memcpy
       _itoa
         ___awdiv
         ___awmod
         _reverse
           _swap
       _mergeObjects
       _moveObject
       _pauseButtons
       _pauseMultiplexing
         _waitForInterrupt
       _resumeButtons
       _resumeMultiplexing
       _set_screen
         _memcpyvol
         _pauseMultiplexing
           _waitForInterrupt
         _resumeMultiplexing
     _tetris_buttons
       _checkDown
       _checkLeft
       _checkRight
       _checkUp
       _tetris_button_down
         _moveObjectDown
           _checkForBottom
           _collisionDetect
           _mergeObjects
           _moveObjecttetris
           _selectNextObject
             ___awmod
             _memcpyvol
             _rnd_get_num
             _set_mS
           _set_mS
       _tetris_button_left
         _checkForLeftWall
         _collisionDetect
         _memcpyvol
         _mergeObjects
         _moveObject
         _pauseMultiplexing
           _waitForInterrupt
         _resumeMultiplexing
       _tetris_button_right
         _checkForRightWall
         _collisionDetect
         _mergeObjects
         _moveObject
         _pauseMultiplexing
           _waitForInterrupt
         _resumeMultiplexing
       _tetris_button_up
         _clearArray
         _collisionDetect
         _mergeObjects
         _newRotation
           ___wmul
           _clearArray
           _memcpyvol
         _pixelCount
     _tetris_screen
       _set_splashscreen
         _memcpyvol
         _pauseMultiplexing
           _waitForInterrupt
         _resumeMultiplexing
       _waitms
     _writeHighScore
       _WriteEEByte
         _waitForInterrupt

 _isr (ROOT)
   _Interrupt
     ___lwmod
       i2_get_mS (ARG)
     _add_mS
     _checkButtons
       _debounceButton
     _screen_update
     _snake_timer
     _tetris_timer
     i2_get_mS
     i2_set_mS

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             5FF      0       0      17        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK5           100      0       0      16        0.0%
BANK5              100      0       0      14        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0      85       9       52.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100    100     100       7      100.0%
BITBANK0            80      0       0       4        0.0%
BANK0               80     37      58       5       68.8%
BITCOMRAM           7E      0       0       0        0.0%
COMRAM              7E     56      6E       1       87.3%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     24B      15        0.0%
DATA                 0      0     24B       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V2.05 build -831301201 
Symbol Table                                                                                   Sat Mar 09 00:47:58 2019

                __end_of_checkButtons 1D18                       WriteEEByte@data 000D  
               __size_of_start_button 0026                   ?_tetris_button_left 001A  
                 ?_tetris_button_down 0037                  __size_of_WriteEEByte 0030  
                ?_tetris_button_right 001A                      moveObject@cycles 0010  
                   moveObject@pObject 000D                                    l77 2162  
                        ___awdiv@sign 0012                                    _mS 0057  
                    CreateBerry@berry 001B                        ??_choosescreen 0019  
                 ___wmul@multiplicand 000F                           __CFG_BORV$3 000000  
                  WriteEEByte@address 000E                  debounceButton@button 0007  
                        __CFG_CP0$OFF 000000                          __CFG_CP1$OFF 000000  
                        __CFG_CP2$OFF 000000                          __CFG_CP3$OFF 000000  
                       newRotation@x1 0026                         newRotation@x2 0024  
                       newRotation@y1 0027                         newRotation@y2 0025  
                                 l108 2244                                   l109 2266  
                                 l281 0B7A                                   l541 2360  
                                 l374 034A                                   l397 1102  
                                 _GIE 007F97                          __CFG_CPB$OFF 000000  
                        __CFG_CPD$OFF 000000                                   _PSA 007EAB  
                                 _isr 0008                          ___awmod@sign 0012  
             __end_of_collisionDetect 1FA8                                   prod 000FF3  
                                 wreg 000FE8                        ?_tetris_screen 0001  
                ??_tetris_button_left 001E                  ??_tetris_button_down 003F  
             __size_of_moveObjectDown 00EE                          __CFG_LVP$OFF 000000  
                        __CFG_WDT$OFF 000000                                  l4105 10E4  
                                l4115 112E                                  l3253 231C  
                                l3245 2304                                  l4109 1102  
                                l5043 25BC                                  l5051 1170  
                                l5107 1966                                  l5221 0E70  
                                l5213 0E5C                                  l4501 1DE0  
                                l5061 1246                                  l5053 122E  
                                l5301 1A94                                  l5207 0DC6  
                                l5063 1266                                  l5047 1166  
                                l5225 0EE4                                  l4505 1DEA  
                                l5153 23E2                                  l5057 1238  
                                l5313 1B00                                  l4601 03D6  
                                l4521 07D2                                  l5251 12C2  
                                l5243 12A6                                  l5139 2408  
                                l4603 03DC                                  l5181 24A0  
                                l4509 1DF8                                  l5405 1022  
                                l4621 0434                                  l4525 07E0  
                                l5085 18D8                                  l5341 16B8  
                                l5167 247A                                  l5191 17D0  
                                l5431 0014                                  l4623 043A  
                                l4527 07E4                                  l4519 07A6  
                                l5335 168C                                  l4465 2608  
                                l5273 1350                                  l5257 12F2  
                                l5265 132E                                  l5425 223E  
                                l4641 04CA                                  l4609 03E0  
                                l4537 0844                                  l5329 165E  
                                l4475 1FEC                                  l4707 22A2  
                                l4571 21FE                                  l4643 04D0  
                                l4627 043E                                  l4619 042A  
                                l4811 076A                                  l5347 16EC  
                                l4469 1FBA                                  l5197 1830  
                                l4709 22BC                                  l5509 1A00  
                                l4493 1DC0                                  l4485 1DA6  
                                l5381 0FA0                                  l5533 1C76  
                                l5525 1C36                                  l4565 21D6  
                                l4661 055A                                  l4581 037A  
                                l4671 137C                                  l5551 0CB4  
                                l5543 0C48                                  l5199 1832  
                                l5439 0062                                  l5471 017E  
                                l5359 2370                                  l4495 1DC8  
                                l5391 0FCC                                  l5295 1A8C  
                                l4639 04C0                                  l4583 0380  
                                l4663 0564                                  l4743 14BC  
                                l4911 1E0C                                  l4681 1448  
                                l4673 13B4                                  l5473 0184  
                                l5449 00B0                                  l4489 1DB2  
                                l4833 093E                                  l4841 0966  
                                l4825 0934                                  l5369 0F34  
                                l5529 1C56                                  l4649 04D4  
                                l4761 1554                                  l4745 14CA  
                                l4913 1E12                                  l4675 13BE  
                                l5459 0110                                  l4851 097A  
                                l4843 0970                                  l4827 093A  
                                l5643 0BC0                                  l4677 13FE  
                                l4685 1452                                  l5477 025E  
                                l5469 014E                                  l4861 09AE  
                                l4845 0976                                  l4693 1F48  
                                l4589 0384                                  l4781 060C  
                                l4773 05C8                                  l4917 1E5C  
                                l5629 0B36                                  l5709 2192  
                                l4679 1408                                  l5583 0D3E  
                                l5591 0D70                                  l5567 0CF8  
                                l5575 0D2A                                  l5495 0348  
                                l5487 02DA                                  l4951 2014  
                                l4863 09B4                                  l4599 03CC  
                                l5489 02E0                                  l4945 20CE  
                                l4881 0A2A                                  l4793 0614  
                                l5657 0C26                                  l5649 0BDE  
                                l4939 20B0                                  l4867 09B8  
                                l4859 09A4                                  l5691 1610  
                                l4699 1F9C                                  l4787 0610  
                                ?_isr 0001                                  l5597 0D90  
                                l4981 1BD4                                  l4973 1BB6  
                                l4957 203A                                  l4877 0A1A  
                                l4991 1BF4                                  l4967 1BA6  
                                l4887 0A2E                                  l4879 0A24  
                                l5687 15D8                                  l5679 15A4  
                                l4799 06BC                                  l4897 0A94  
                                l4979 1BCC                                  l4995 1BFE  
                                l4899 0A9E                                  l4999 1C0C  
                                _DDRA 000F92                                  _DDRB 000F93  
                                _DDRC 000F94                                  _DDRD 000F95  
                                _T0CS 007EAD                                  u5010 179C  
                                u4220 1DCC                                  u5020 179E  
                                u5110 2472                                  u5120 2474  
                                _IPEN 007E87                                  u4170 1FE2  
                                u5050 2400                                  u4155 1D68  
                                u5140 2498                                  u5060 2402  
                                u5150 249A                                  u5080 23DA  
                                u4280 084A                                  u4177 1FD8  
                                u5410 0FB8                                  u5090 23DC  
                                u4290 0852                                  u5260 12EE  
                                u5420 0FD8                                  u4620 259A  
                                u4524 064A                                  u4525 0644  
                                u3680 1082                                  u4720 2516  
                                u5441 0FEE                                  u3690 10C4  
                                u5700 0CE4                                  u4830 1BD8  
                                u5294 1ACA                                  u5295 1AC4  
                                u5720 0D26                                  u4904 11B8  
                                u4760 1E64                                  u4744 1E48  
                                u5800 0B88                                  u4905 11B2  
                                u4745 1E42                                  u4914 11F2  
                                u4594 073C                                  u4915 11EC  
                                u4595 0736                                  u5740 0D6C  
                                u5680 0CCC                                  i2l66 21BE  
                                u4894 11A2                                  u5790 0B86  
                                u4895 119C                                  _TMR0 000FD6  
             show_score@tmpObjectData 00A0                       ?_checkForBottom 000D  
                        _start_button 239A                                  _game 005D  
                 __end_of_CreateBerry 184A                                  _main 215E  
                                _itoa 1270                                  fsr0h 000FEA  
                                fsr1h 000FE2                                  indf0 000FEF  
                                fsr2h 000FDA                                  fsr0l 000FE9  
                                indf1 000FE7                                  indf2 000FDF  
                                fsr1l 000FE1                                  fsr2l 000FD9  
                                _swap 2272                                  btemp 006F  
                    ??_writeHighScore 0011                   rnd_initialize@input 000D  
                                prodh 000FF4                                  prodl 000FF3  
                                start 000E                         __CFG_IESO$OFF 000000  
                     ?_tetris_buttons 0043                   moveObject@direction 000F  
                       __CFG_MCLRE$ON 000000                          ___param_bank 000000  
               ??_tetris_button_right 001E                   snake_main@direction 0055  
                   _inistialize_snake 19F8               writeHighScore@highscore 000F  
                               ??_isr 0009                    ?_inistialize_snake 0023  
      moveObjectDown@CheckForNewLines 0030         tetris_button_up@tmpObjectData 0031  
                               ?_main 0001                     ??_initialise_TMR0 000D  
                               ?_itoa 001B                       __end_of___awdiv 1C16  
                               _EEADR 000FA9                       __end_of___awmod 1E02  
                     __end_of___lbmod 2324                                 ?_swap 000D  
                     ___awdiv@divisor 000F                       __end_of___lwmod 2122  
                               i2l652 1EDA                       ___awdiv@counter 0011  
             debounceButton@debounced 0003                                 _PORTA 000F80  
                               _PORTB 000F81                                 _PORTC 000F82  
                               _PORTD 000F83             __size_of_set_splashscreen 0026  
                     __end_of_checkUp 247E                         __CFG_PWRT$OFF 000000  
                 ??_inistialize_snake 0029                         __CFG_WRT0$OFF 000000  
                       __CFG_WRT1$OFF 000000                         __CFG_WRT2$OFF 000000  
                       __CFG_WRT3$OFF 000000                        __CFG_EBTR0$OFF 000000  
                      __CFG_FCMEN$OFF 000000                        __CFG_EBTR1$OFF 000000  
                      __CFG_EBTR2$OFF 000000                        __CFG_EBTR3$OFF 000000  
 snake_button_left@previous_direction 000F          moveObjectDown@BackgroundData 002E  
                       __CFG_WRTB$OFF 000000                         __CFG_WRTC$OFF 000000  
                       __CFG_WRTD$OFF 000000                        __CFG_EBTRB$OFF 000000  
                               __lfsr 0059      tetris_button_left@BackgroundData 001C  
                        ?_newRotation 0017                       _snake_button_up 24A4  
                 SnakeGraph@positions 001B                                 itoa@i 0026  
                          _Left_Delay 0064                                 tablat 000FF5  
                     __end_of_reverse 2050                            _DropObject 00B7  
                          _Down_Delay 005E                                 plusw1 000FE3  
                               plusw2 000FDB                CreateBerry@snakeLength 0017  
                               swap@a 000D                                 swap@b 000F  
                               swap@t 0011                                 ttemp5 0070  
                               ttemp6 0073                                 ttemp7 0077  
                          _ReadEEByte 25D6                                 status 000FD8  
                    __end_ofi2_get_mS 2642                                 wtemp8 0070  
                    __end_ofi2_set_mS 2638                    aibuttons@direction 000D  
         tetris_main@CheckForNewLines 0126             __end_of_inistialize_snake 1A84  
                   moveObjecttetris@c 0017                     moveObjecttetris@i 0018  
              __size_of_readHighScore 0028                       __initialization 1EDC  
                  _resumeMultiplexing 265C                          __end_of_main 2198  
                        __end_of_itoa 1376                          __end_of_swap 22A0  
            __end_of_selectNextObject 0932                   snake_main@positions 0100  
        __size_of_initialise_hardware 003C                   ?_resumeMultiplexing 0001  
                              ??_main 0057                                ??_itoa 0021  
                              ??_swap 0011                         __activetblptr 000002  
                     ??_tetris_screen 0019             choosescreen@choosescreen1 7F2F  
           choosescreen@choosescreen2 7F1F              tetris_main@NumberOfLines 0124  
                    ?_collisionDetect 000D                         ?_mergeObjects 000D  
                         _CreateBerry 17A2                 selectNextObject@check 001D  
                              _EEDATA 000FA8                                _EECON2 000FA7  
                    ___awdiv@dividend 000D                        _debounceButton 1E70  
                              i2l1263 2118                                i2l4151 20F6  
                              i2l4157 210E                                i2l4149 20EE  
                              i2l4173 199A                                i2l4185 19EA  
                              i2l4179 19C2                                i2l3835 1E98  
                              i2l3839 1EBE                  ??_resumeMultiplexing 000D  
                          _ScreenData 00B8                  __end_of_choosescreen 0DAC  
                              _TMR0IE 007F95                                _TMR0ON 007EAF  
                              _TETRIS 7FEF                            _MoveSnakes 0012  
            __end_of_moveObjecttetris 058E                          ?_rnd_get_num 000D  
               __size_of_checkButtons 0080                  checkForLines@pObject 0025  
                    __end_of_genBerry 2586                            _SnakeGraph 0DAC  
               __end_of_screen_update 209E                        __CFG_XINST$OFF 000000  
                  aibuttons@positions 000F                                _Number 7F3F  
                  __size_of_Interrupt 008E                                _add_mS 25F6  
      tetris_buttons@CheckForNewLines 0047                     ?_checkForLeftWall 000D  
                              ___wmul 2374                             ??___awdiv 0011  
                      __CFG_STVREN$ON 000000                             ??___awmod 0011  
                           ??___lbmod 000E                                _get_mS 2624  
                           ??___lwmod 0007                          ?_snake_timer 0001  
       tetris_button_left@tetrisblock 001A                    ??_checkForLeftWall 000F  
                              _memcpy 209E                             ??_checkUp 000D  
                              clear_0 1F22                                clear_1 1F2E  
                    ___awdiv@quotient 0013                       ___awmod@divisor 000F  
                              _shapes 0200                                _set_mS 2610  
                              _waitms 25B4                       ___awmod@counter 0011  
             moveObjectDown@EndOfGame 0032                     ?_waitForInterrupt 0001  
             __size_of_rnd_initialize 000A                     tetris_main@tetris 0127  
                 MoveSnakes@EndOfGame 003B               __end_of_snake_button_up 24C2  
                  ??_waitForInterrupt 000D                        show_score@mask 0080  
                        __mediumconst 7EFE                         _readHighScore 234C  
                      ??_mergeObjects 0012                                preinc2 000FDC  
                      _moveObjectDown 1476                                tblptrh 000FF7  
                              tblptrl 000FF6                                tblptru 000FF8  
                           ??_reverse 0016                __end_of_debounceButton 1EDC  
                        _checkButtons 1C98                      getNumber@pTarget 0017  
      tetris_button_right@tetrisblock 001A                moveObjecttetris@cycles 0010  
             snake_main@LastHighScore 0050                       ___lbmod@divisor 000D  
                          __accesstop 0080               __end_of__initialization 1F34  
                   ?_tetris_button_up 002A                       ___lbmod@counter 000F  
                         ?_ReadEEByte 0001                       __CFG_PBADEN$OFF 000000  
                     snake_main@berry 0052                  writeHighScore@adress 0011  
                        ?_tetris_main 0001                         ___rparam_used 000001  
                  ??_tetris_button_up 0030            __size_of_inistialize_snake 008C  
                writeHighScore@scored 0010                          add_mS@amount 0001  
                   _pauseMultiplexing 25E6                        __pcstackCOMRAM 0001  
         __size_of_snake_button_right 001E                          __pidataBANK0 25C6  
                        __pidataBANK2 1B0C                    __size_of_checkLeft 0026  
                  __size_of_checkDown 0026                    ?_pauseMultiplexing 0001  
    tetris_button_down@BackgroundData 0039                         ?_pauseButtons 0001  
                  __size_of_aibuttons 0128              choosescreen@choosescreen 001D  
                 ??_pauseMultiplexing 000D                __end_of_moveObjectDown 1564  
                    _set_splashscreen 2432               set_splashscreen@newData 0017  
                           ?i2_get_mS 0001                        ?_readHighScore 0001  
                  __size_of_getNumber 0028                  CreateBerry@positions 0019  
                           ?i2_set_mS 0001                       ?_debounceButton 0001  
                  choosescreen@i_1068 003E                    choosescreen@i_1069 0040  
                   __end_of_Interrupt 19F8                      ??_checkForBottom 000F  
                moveObjectDown@result 0034                  moveObjectDown@tetris 002C  
               __end_of_snake_buttons 1C98                           MoveSnakes@i 004E  
                          _checkRight 23C0                    screen_update@xmask 0005  
                  screen_update@ymask 0003                            __pbssBANK0 00B7  
                    ??_tetris_buttons 004D                           ?_MoveSnakes 0039  
                __size_of_newRotation 01EE                            __pnvCOMRAM 0057  
           __end_of_pauseMultiplexing 25F6        tetris_button_up@BackgroundData 002C  
                  __size_of_memcpyvol 0056                         ??_WriteEEByte 000E  
                          _clearArray 22A0                           ?_SnakeGraph 0019  
                     _initialise_TMR0 24E0                 __end_of_resumeButtons 2650  
                             ?_add_mS 0001              selectNextObject@NewBlock 002A  
                             ?___wmul 000D                     newRotation@tetris 0017  
                             ?_get_mS 000D                        ??_pauseButtons 000D  
                   snake_screen@SNAKE 7FDF                               ?_memcpy 000D  
                         SnakeGraph@i 0037                           SnakeGraph@j 0036  
                             ?_set_mS 000D                               ?_waitms 000D  
                   _initialise_screen 2656                   __size_of_ReadEEByte 0010  
              selectNextObject@tetris 0017                       ?_moveObjectDown 002C  
        selectNextObject@rndSelection 0029             moveObjectDown@tetrisblock 0035  
                  ?_initialise_screen 0001                            ??i2_get_mS 0003  
          inistialize_snake@positions 0025                   newRotation@rotation 001B  
                    ?_snake_button_up 000D                             ?_genBerry 0001  
              __size_of_checkForLines 0088                            ??i2_set_mS 0003  
                         _Right_Delay 0062           __size_of_tetris_button_left 0092  
         __size_of_tetris_button_down 002C                 __size_of_choosescreen 0168  
                   __end_of_checkLeft 240C                     __end_of_checkDown 24A4  
                         moveObject@c 0017                           moveObject@i 0018  
                 ??_initialise_screen 000D                   MoveSnakes@direction 003D  
                 _initialise_hardware 2122                     __end_of_aibuttons 1160  
               SnakeGraph@snakeLength 0019           __end_of_tetris_button_right 196A  
            tetris_button_down@tetris 0037                        checkForLines@x 0030  
                      checkForLines@y 0031                 screen_update@CurrentX 006A  
                             __Hparam 0000                  __size_of_rnd_get_num 007A  
                   __end_of_getNumber 234C                               __Lparam 0000  
        snake_main@previous_direction 0054                        checkLeft@reset 000D  
                __end_of_mergeObjects 1476             __end_ofsnake_screen@SNAKE 7FEF  
                      checkDown@reset 000D       snake_buttons@previous_direction 0014  
                     __size_of_add_mS 000E                               ___awdiv 1B92  
                             ___awmod 1D92                               ___lbmod 22FA  
                     __size_of___wmul 0026                     removeLine@pObject 000D  
           __end_of_initialise_screen 265C                               ___lwmod 20E0  
                   ?_selectNextObject 0017                   __end_of_WriteEEByte 2272  
                     __size_of_get_mS 000A                           removeLine@x 0024  
                         removeLine@y 0022                               _checkUp 2458  
                             __pcinit 1EDC                  ?_initialise_hardware 0001  
                     __size_of_memcpy 0042                               __ramtop 0600  
                      _rnd_initialize 261A                     _RemainingWaitTime 0066  
                     __size_of_set_mS 000A                               __ptext0 215E  
                  ??_selectNextObject 0019                               __ptext1 0AC8  
                             __ptext2 2552                               __ptext3 162C  
                             __ptext4 16F0                               __ptext5 1E02  
                             __ptext6 058E                               __ptext7 2374  
                             __ptext8 18DC                               __ptext9 24FE  
                        _choosescreen 0C44                       __size_of_waitms 0012  
         moveObjecttetris@tetrisblock 000D                       ??_readHighScore 000F  
                           _T0CONbits 000FD5                  __size_of_snake_timer 0006  
                       ?_snake_screen 0001                   __size_of_MoveSnakes 0366  
                        __size_of_isr 21CA                     __end_of_memcpyvol 1FFE  
                    ___awmod@dividend 000D                           pixelCount@r 0016  
                         pixelCount@x 0017                           pixelCount@y 0018  
                          ??_genBerry 0015                   __size_of_SnakeGraph 014E  
                             _reverse 1FFE                          ?_CreateBerry 0017  
                     show_score@F2757 00C8                     _checkForRightWall 24FE  
                 mergeObjects@pTarget 000F                     _snake_button_left 251A  
                   _snake_button_down 2536                        __pintcode_body 2198  
                 mergeObjects@pSource 000D                           ?_checkRight 0001  
                end_of_initialization 1F34                    ?_checkForRightWall 000D  
                 MoveSnakes@positions 0041               __end_of_initialise_TMR0 24FE  
                        memcpyvol@src 000F                               memcpy@d 0013  
                             memcpy@n 0011                               memcpy@s 0015  
                  ?_snake_button_left 000D                    ?_snake_button_down 000D  
            snake_button_up@direction 000D                               itoa@bas 001F  
                             itoa@rem 0024                            _moveObject 0932  
                       __Lmediumconst 7EFE                               itoa@str 001D  
                             int_func 2198           tetris_button_down@EndOfGame 003D  
   __end_ofchoosescreen@choosescreen1 7F3F     __end_ofchoosescreen@choosescreen2 7F2F  
                   ?_moveObjecttetris 000D            __size_of_pauseMultiplexing 0010  
                         ?_clearArray 000D                   ??_checkForRightWall 000F  
                     show_score@score 00B0                            _removeLine 1160  
                   pixelCount@pSource 000D                         _checkForLines 1A84  
                  ??_moveObjecttetris 0011                            _pixelCount 1E02  
                 ??_snake_button_left 0011                   ??_snake_button_down 0011  
                __size_of_tetris_main 017C                            _mtxButtons 005C  
                tetris_buttons@tetris 0043                               waitms@t 000D  
                          _set_screen 240C                               postdec1 000FE5  
                             postdec2 000FDD                            _snake_main 1564  
                             postinc0 000FEE                               postinc1 000FE6  
                             postinc2 000FDE       tetris_button_left@tmpObjectData 001E  
            tetris_buttons@returnbool 004D                __end_of_rnd_initialize 2624  
               ??_initialise_hardware 000D               __size_of_writeHighScore 0016  
                           _PORTBbits 000F81                        ??_snake_screen 0019  
                          _show_score 0EFA              tetris_main@LastHighScore 0122  
           moveObjecttetris@direction 000F             __end_of_checkForRightWall 251A  
                    ___lbmod@dividend 000E     snake_button_up@previous_direction 000F  
              tetris_main@Screen_Data 0100                 __end_of_tetris_screen 256C  
           __end_of_snake_button_left 2536             __end_of_snake_button_down 2552  
           __size_of_checkForLeftWall 0018                 snake_main@snakeLength 0056  
        MoveSnakes@previous_direction 003F                   debounceButton@delay 0001  
            tetris_button_up@rotation 002E                  __end_of_pauseButtons 2656  
                         ___lbmod@rem 0010              __size_of_collisionDetect 0066  
         __size_of_resumeMultiplexing 0006             __size_of_waitForInterrupt 000C  
                       ?_tetris_timer 0001                          ??_ReadEEByte 000D  
             tetris_buttons@EndOfGame 0049                        __end_of_TETRIS 7FFF  
               CreateBerry@randomGood 0021              __end_of_set_splashscreen 2458  
                      ?_checkForLines 0025                           show_score@i 00B6  
                         _WriteEEByte 2242               show_score@currentNumber 00B1  
                      __end_of_Number 7FDF            __size_of_initialise_screen 0006  
                      __end_of_add_mS 2604                       ?_rnd_initialize 0001  
                      __end_of___wmul 239A             __size_of_tetris_button_up 00B2  
                 __size_of_checkRight 0026                snake_buttons@direction 0012  
                      __end_of_get_mS 262E                        __end_of_memcpy 20E0  
                    ??_debounceButton 0005                      mergeObjects@mode 0011  
                      __end_of_set_mS 261A                        __end_of_waitms 25C6  
                     SnakeGraph@i_758 0038                  tetris_main@EndOfGame 0125  
                  __end_of_ReadEEByte 25E6                   start_initialization 1EDC  
                 __size_of_clearArray 002E                       SnakeGraph@berry 001D  
              __size_of_screen_update 004E                           __end_of_isr 21D2  
                   __size_ofi2_get_mS 000A                     __size_ofi2_set_mS 000A  
                    choosescreen@game 003D                      choosescreen@mask 002D  
                      ??_tetris_timer 0001                             _Interrupt 196A  
                    ?_initialise_TMR0 0001      tetris_button_right@tmpObjectData 001E  
                       ?_start_button 0001                          ??_MoveSnakes 0045  
                         ?_moveObject 000D                  selectNextObject@fill 0024  
               __size_of_mergeObjects 0100                      __CFG_OSC$INTIO67 000000  
          __end_of_snake_button_right 24E0                          ??_SnakeGraph 001F  
                         ?_removeLine 000D                            memcpy@dest 000D  
                         ?_pixelCount 000D                       removeLine@x_907 0021  
  tetris_button_down@CheckForNewLines 003B                           ?_set_screen 0017  
                 checkForLines@pixels 002E                              ??_add_mS 0003  
                         ?_snake_main 0001                              ??___wmul 0011  
                            ??_get_mS 000F                      ??_moveObjectDown 0034  
                         __pdataBANK0 00C8                           __pdataBANK2 0200  
                          memcpyvol@d 0013                            memcpyvol@n 0011  
                          memcpyvol@s 0015                      __CFG_LPT1OSC$OFF 000000  
                            ??_memcpy 0013                          checkUp@reset 000D  
         tetris_button_up@tetrisblock 0041                       getNumber@pDigit 0019  
                            ??_set_mS 000F                              ??_waitms 000F  
              collisionDetect@pTarget 000F                           ?_show_score 0001  
              collisionDetect@pSource 000D                    __end_of_MoveSnakes 0378  
          __size_of_checkForRightWall 001C                           __pbssCOMRAM 0066  
                       __pcstackBANK0 0080                         __pcstackBANK1 0100  
          __size_of_snake_button_left 001C            __size_of_snake_button_down 001C  
                  __end_of_SnakeGraph 0EFA                          _mergeObjects 1376  
                   __size_of_genBerry 001A                         ??_newRotation 001D  
                __size_of_CreateBerry 00A8                        ??_start_button 000D  
                          ?_Interrupt 0001                       ??_checkForLines 0027  
                           _checkLeft 23E6                             _checkDown 247E  
                __end_of_snake_screen 2242                    newRotation@pTarget 0019  
                           _aibuttons 1038                     __CFG_CCP2MX$PORTC 000000  
                       _screen_update 2050                     ??_collisionDetect 0011  
                           __pintcode 0008  snake_button_right@previous_direction 000F  
                       __pmediumconst 7EFE                              ?___awdiv 000D  
                            ?___awmod 000D                              ?___lbmod 000D  
                           _getNumber 2324                              ?___lwmod 0003  
                      _writeHighScore 259E                __size_of_snake_buttons 0082  
                            ?_checkUp 0001                     set_screen@newData 0017  
                 __size_of_moveObject 0196            __end_of_tetris_button_left 18DC  
          __end_of_tetris_button_down 22FA                   __size_of_removeLine 0110  
               __size_of_pauseButtons 0006                              ?_reverse 0012  
                    _checkForLeftWall 2586               selectNextObject@counter 0026  
                 __size_of_pixelCount 006E                             _memcpyvol 1FA8  
           __size_of_selectNextObject 01B6                   __size_of_set_screen 0026  
              __size_of_resumeButtons 0006                          ??_checkRight 000D  
                 __size_of_snake_main 00C8                          genBerry@temp 0016  
                        genBerry@size 0015              __size_of_snake_button_up 001E  
                    _waitForInterrupt 2604                         ??_rnd_get_num 000F  
                      ___wmul@product 0011                            ?_checkLeft 0001  
                          ?_checkDown 0001                 MoveSnakes@snakeLength 0039  
                        ??_clearArray 0011                   __end_of_newRotation 077C  
                          reverse@end 0019               __size_of_checkForBottom 0038  
                 __size_of_show_score 013E                             _moveSnake 0069  
                          reverse@str 0012                            ?_aibuttons 000D  
                      ?_screen_update 0001                              i2u380_40 1D10  
                            i2u380_46 1D12                              i2u382_44 2066  
                            i2u382_45 2062                              i2u384_40 20FA  
   tetris_button_right@BackgroundData 001C                              i2u377_40 1CB6  
                            i2u377_46 1CB8                              i2u378_40 1CD4  
                            i2u378_46 1CD6                              i2u379_40 1CF2  
                            i2u379_46 1CF4          tetris_buttons@BackgroundData 0045  
              __end_of_writeHighScore 25B4                      __CFG_WDTPS$32768 000000  
             __size_of_tetris_buttons 00C4                  tetris_main@newScreen 0123  
        __size_of_tetris_button_right 008E                            ?_getNumber 0017  
                       ??_snake_timer 0001                      _tetris_button_up 16F0  
                        _pauseButtons 2650                  __end_of_tetris_timer 264A  
                  __end_of_checkRight 23E6                            _ADCON1bits 000FC1  
               removeLine@currentLine 0023             __size_of_moveObjecttetris 0216  
                   ___wmul@multiplier 000D          __end_ofSnakeGraph@SnakeYtext 7F1F  
                            i2_get_mS 2638                 __end_of_readHighScore 2374  
                            i2_set_mS 262E   snake_button_down@previous_direction 000F  
                  __end_of_clearArray 22CE                         ?_checkButtons 0001  
                   ReadEEByte@address 000D                            ?_memcpyvol 000D  
                         _INTCON2bits 000FF1                             copy_data0 1EF0  
                           copy_data1 1F10            snake_button_left@direction 000D  
         selectNextObject@counter_546 0025                         _snake_buttons 1C16  
                     checkForBottom@i 0013                           ??_Interrupt 0008  
                      itoa@isNegative 0023                          set_mS@amount 000D  
                       ??_tetris_main 004E                            _EECON1bits 000FA6  
                        ?_WriteEEByte 000D                     ?_set_splashscreen 0017  
                            __Hrparam 0000                      ??_rnd_initialize 000D  
         __end_of_initialise_hardware 215E                             memcpy@src 000F  
                            __Lrparam 0000                    __CFG_BOREN$SBORDIS 000000  
                     ?_writeHighScore 000F                   __end_of_rnd_get_num 1D92  
                      _Left_Debounced 006D                    ??_set_splashscreen 0019  
                    collisionDetect@i 0019                         _resumeButtons 264A  
                           itoa@value 001B                      __size_of___awdiv 0084  
            checkForRightWall@pObject 000D                      __size_of___awmod 0070  
                    __size_of___lbmod 002A                          CreateBerry@i 0022  
                    __size_of___lwmod 0042                  __end_of_start_button 23C0  
                    __size_of_checkUp 0026                         mergeObjects@i 0018  
                        rnd_get_num@b 0013                          removeLine@pY 000F  
                       reverse@length 0014                   __end_of_snake_timer 2668  
                            _genBerry 256C                        ??_checkButtons 0008  
                            __ptext10 184A                              __ptext11 2586  
                            __ptext20 1160                              __ptext12 22CE  
                            __ptext21 239A                              __ptext13 1476  
                            __ptext30 2536                              __ptext22 1564  
                            __ptext14 077C                              __ptext31 23C0  
                            __ptext23 259E                              __ptext15 2610  
                            __ptext40 1D92                              __ptext32 23E6  
                            __ptext24 220A                              __ptext16 0378  
                            __ptext41 1B92                              __ptext33 0EFA  
                            __ptext25 25B4                              __ptext17 1F42  
                            __ptext50 0DAC                              __ptext42 2324  
                            __ptext34 264A                              __ptext26 1C16  
                            __ptext18 21D2                              __ptext51 240C  
                            __ptext43 209E                              __ptext35 2650  
                            __ptext27 24A4                              __ptext19 1A84  
                            __ptext60 24E0                              __ptext52 22A0  
                            __ptext44 234C                              __ptext36 0932  
                            __ptext28 24C2                              __ptext61 2624  
                            __ptext53 17A2                              __ptext45 2242  
                            __ptext37 1270                              __ptext29 251A  
                            __ptext70 247E                              __ptext62 0C44  
                            __ptext54 256C                              __ptext46 25D6  
                            __ptext38 1FFE                              __ptext63 2432  
                            __ptext55 1D18                              __ptext47 19F8  
                            __ptext39 2272                              __ptext80 25F6  
                            __ptext72 196A                              __ptext64 265C  
                            __ptext56 22FA                              __ptext48 1038  
                            __ptext81 20E0                              __ptext73 262E  
                            __ptext65 25E6                              __ptext57 261A  
                            __ptext49 0012                              __ptext74 2638  
                            __ptext66 2604                              __ptext58 2656  
                            __ptext75 2642                              __ptext67 1FA8  
                            __ptext59 2122                              __ptext76 2662  
                            __ptext68 1376                              __ptext77 2050  
                            __ptext69 2458                              __ptext78 1C98  
                            __ptext79 1E70                      __size_of_reverse 0052  
                      ?_snake_buttons 0012            __end_of_resumeMultiplexing 2662  
                    _Rotate_Debounced 006E                 __size_of_snake_screen 0038  
          snake_button_down@direction 000D                           _newRotation 058E  
                            _itoa$878 0021                          ??_moveObject 0011  
                     _tetris_main$701 0120                         __size_of_main 003A  
                         ??_checkLeft 000D                           ??_checkDown 000D  
                       __size_of_itoa 0106                  SnakeGraph@ObjectData 0026  
                       __size_of_swap 002E                       ??_screen_update 0001  
                        ??_removeLine 0010                           ??_aibuttons 0011  
           tetris_main@BackgroundData 0110                          ??_pixelCount 000F  
                   ??_snake_button_up 0011                          ??_set_screen 0019  
                        ??_snake_main 004F                        ?_resumeButtons 0001  
                      _Down_Debounced 006B                __size_of_tetris_screen 001A  
                     _Right_Debounced 006C                              int$flags 006F  
                 __end_of_tetris_main 0C44                tetris_buttons@rotation 004B  
                         ??_getNumber 0019                tetris_button_up@tetris 002A  
              newRotation@tetrisblock 0028                    _snake_button_right 24C2  
                        ??_show_score 0028                         Interrupt@game 0008  
                        _snake_screen 220A                    __end_of_moveObject 0AC8  
                 tetris_main@rotation 0121                         memcpyvol@dest 000D  
                          _INTCONbits 000FF2                      clearArray@pArray 000D  
                 ?_snake_button_right 000D                    __end_of_removeLine 1270  
                        snake_main@ai 004F                           ??_memcpyvol 0013  
                  __end_of_pixelCount 1E70                      _selectNextObject 077C  
              inistialize_snake@berry 0027                  readHighScore@tmpbyte 0010  
                  __end_of_set_screen 2432            checkForLines@NumberOfLines 002F  
                     _collisionDetect 1F42                              intlevel2 0000  
                  __end_of_snake_main 162C                          _UpdateScreen 005B  
                        reverse@start 0017                   snake_main@EndOfGame 0051  
                    ___lwmod@dividend 0003                           _rnd_get_num 1D18  
                    show_score@number 00B2                        _checkForBottom 21D2  
         snake_button_right@direction 000D                  SnakeGraph@SnakeYtext 7EFF  
                        _Rotate_Delay 0060                            _OSCCONbits 000FD3  
                  __end_of_show_score 1038                    inistialize_snake@i 002B  
                ??_snake_button_right 0011              __end_of_checkForLeftWall 259E  
            __size_of_initialise_TMR0 001E                        _tetris_buttons 162C  
               __size_of_tetris_timer 0008                   readHighScore@adress 000F  
                     checkRight@reset 000D                           _snake_timer 2662  
                       choosescreen@i 0042                     selectNextObject@s 0027  
            __end_of_waitForInterrupt 2610                         ?_choosescreen 0001  
              show_score@Numberscreen 0090                      _moveObjecttetris 0378  
                     MoveSnakes@i_774 004D                       MoveSnakes@berry 0043  
                     ___lwmod@divisor 0005                       ___lwmod@counter 0007  
               checkForBottom@pObject 000D                       ??_snake_buttons 0016  
                       ??_CreateBerry 001D                         _tetris_screen 2552  
        inistialize_snake@snakeLength 0023                   _tetris_button_right 18DC  
             checkForLeftWall@pObject 000D                     _InterruptComplete 0068  
                      clearArray@size 000F               __size_of_debounceButton 006C  
                        _port_display 000F82              __end_of_tetris_button_up 17A2  
              __end_of_checkForBottom 220A                          _tetris_timer 2642  
                  _tetris_button_left 184A                    _tetris_button_down 22CE  
                         _tetris_main 0AC8                 __end_of_checkForLines 1B0C  
              __end_of_tetris_buttons 16F0                       ??_resumeButtons 000D  
                      i2set_mS@amount 0001  
