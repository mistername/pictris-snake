

Microchip MPLAB XC8 Assembler V2.05 build -831301201 
                                                                                               Sun Mar 03 00:06:37 2019

Microchip MPLAB XC8 C Compiler v2.05 (Free license) build 20181220022703 Og1 
     1                           	processor	18F4520
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	flic
     5                           	psect	idataBANK0,global,class=CODE,delta=1,noexec
     6                           	psect	idataBANK2,global,class=CODE,delta=1,noexec
     7                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     8                           	psect	nvCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     9                           	psect	nvBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    10                           	psect	cinit,global,reloc=2,class=CODE,delta=1
    11                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    12                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    13                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    14                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    15                           	psect	dataBANK2,global,class=BANK2,space=1,delta=1,lowdata,noexec
    16                           	psect	cstackBANK2,global,class=BANK2,space=1,delta=1,noexec
    17                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    18                           	psect	text0,global,reloc=2,class=CODE,delta=1
    19                           	psect	text1,global,reloc=2,class=CODE,delta=1
    20                           	psect	text2,global,reloc=2,class=CODE,delta=1
    21                           	psect	text3,global,reloc=2,class=CODE,delta=1
    22                           	psect	text4,global,reloc=2,class=CODE,delta=1
    23                           	psect	text5,global,reloc=2,class=CODE,delta=1
    24                           	psect	text6,global,reloc=2,class=CODE,delta=1
    25                           	psect	text7,global,reloc=2,class=CODE,delta=1
    26                           	psect	text8,global,reloc=2,class=CODE,delta=1
    27                           	psect	text9,global,reloc=2,class=CODE,delta=1
    28                           	psect	text10,global,reloc=2,class=CODE,delta=1,group=1
    29                           	psect	text11,global,reloc=2,class=CODE,delta=1
    30                           	psect	text12,global,reloc=2,class=CODE,delta=1
    31                           	psect	text13,global,reloc=2,class=CODE,delta=1
    32                           	psect	text14,global,reloc=2,class=CODE,delta=1
    33                           	psect	text15,global,reloc=2,class=CODE,delta=1
    34                           	psect	text16,global,reloc=2,class=CODE,delta=1
    35                           	psect	text17,global,reloc=2,class=CODE,delta=1
    36                           	psect	text18,global,reloc=2,class=CODE,delta=1
    37                           	psect	text19,global,reloc=2,class=CODE,delta=1
    38                           	psect	text20,global,reloc=2,class=CODE,delta=1
    39                           	psect	text21,global,reloc=2,class=CODE,delta=1
    40                           	psect	text22,global,reloc=2,class=CODE,delta=1
    41                           	psect	text23,global,reloc=2,class=CODE,delta=1
    42                           	psect	text24,global,reloc=2,class=CODE,delta=1
    43                           	psect	text25,global,reloc=2,class=CODE,delta=1
    44                           	psect	text26,global,reloc=2,class=CODE,delta=1
    45                           	psect	text27,global,reloc=2,class=CODE,delta=1
    46                           	psect	text28,global,reloc=2,class=CODE,delta=1
    47                           	psect	text29,global,reloc=2,class=CODE,delta=1
    48                           	psect	text30,global,reloc=2,class=CODE,delta=1
    49                           	psect	text31,global,reloc=2,class=CODE,delta=1
    50                           	psect	text32,global,reloc=2,class=CODE,delta=1
    51                           	psect	text33,global,reloc=2,class=CODE,delta=1
    52                           	psect	text34,global,reloc=2,class=CODE,delta=1
    53                           	psect	text35,global,reloc=2,class=CODE,delta=1
    54                           	psect	text36,global,reloc=2,class=CODE,delta=1
    55                           	psect	text37,global,reloc=2,class=CODE,delta=1
    56                           	psect	text38,global,reloc=2,class=CODE,delta=1
    57                           	psect	text39,global,reloc=2,class=CODE,delta=1
    58                           	psect	text40,global,reloc=2,class=CODE,delta=1
    59                           	psect	text41,global,reloc=2,class=CODE,delta=1
    60                           	psect	text42,global,reloc=2,class=CODE,delta=1,group=1
    61                           	psect	text43,global,reloc=2,class=CODE,delta=1,group=1
    62                           	psect	text44,global,reloc=2,class=CODE,delta=1
    63                           	psect	text45,global,reloc=2,class=CODE,delta=1
    64                           	psect	text46,global,reloc=2,class=CODE,delta=1
    65                           	psect	text47,global,reloc=2,class=CODE,delta=1
    66                           	psect	text48,global,reloc=2,class=CODE,delta=1
    67                           	psect	text49,global,reloc=2,class=CODE,delta=1
    68                           	psect	text50,global,reloc=2,class=CODE,delta=1
    69                           	psect	text51,global,reloc=2,class=CODE,delta=1
    70                           	psect	text52,global,reloc=2,class=CODE,delta=1
    71                           	psect	text53,global,reloc=2,class=CODE,delta=1
    72                           	psect	text54,global,reloc=2,class=CODE,delta=1
    73                           	psect	text55,global,reloc=2,class=CODE,delta=1
    74                           	psect	text56,global,reloc=2,class=CODE,delta=1,group=1
    75                           	psect	text57,global,reloc=2,class=CODE,delta=1
    76                           	psect	text58,global,reloc=2,class=CODE,delta=1
    77                           	psect	text59,global,reloc=2,class=CODE,delta=1
    78                           	psect	text60,global,reloc=2,class=CODE,delta=1
    79                           	psect	text61,global,reloc=2,class=CODE,delta=1
    80                           	psect	text62,global,reloc=2,class=CODE,delta=1
    81                           	psect	text63,global,reloc=2,class=CODE,delta=1
    82                           	psect	text64,global,reloc=2,class=CODE,delta=1
    83                           	psect	text65,global,reloc=2,class=CODE,delta=1
    84                           	psect	text66,global,reloc=2,class=CODE,delta=1
    85                           	psect	text67,global,reloc=2,class=CODE,delta=1
    86                           	psect	text68,global,reloc=2,class=CODE,delta=1
    87                           	psect	text69,global,reloc=2,class=CODE,delta=1
    88                           	psect	text70,global,reloc=2,class=CODE,delta=1
    89                           	psect	text71,global,reloc=2,class=CODE,delta=1
    90                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    91                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    92                           	psect	text73,global,reloc=2,class=CODE,delta=1
    93                           	psect	text74,global,reloc=2,class=CODE,delta=1
    94                           	psect	text75,global,reloc=2,class=CODE,delta=1
    95                           	psect	text76,global,reloc=2,class=CODE,delta=1
    96                           	psect	text77,global,reloc=2,class=CODE,delta=1
    97                           	psect	text78,global,reloc=2,class=CODE,delta=1
    98                           	psect	text79,global,reloc=2,class=CODE,delta=1
    99                           	psect	text80,global,reloc=2,class=CODE,delta=1
   100                           	psect	text81,global,reloc=2,class=CODE,delta=1
   101                           	psect	text82,global,reloc=2,class=CODE,delta=1,group=1
   102                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
   103                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
   104                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
   105  0000                     
   106                           ; Version 2.05
   107                           ; Generated 20/12/2018 GMT
   108                           ; 
   109                           ; Copyright Â© 2018, Microchip Technology Inc. and its subsidiaries ("Microchip")
   110                           ; All rights reserved.
   111                           ; 
   112                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
   113                           ; 
   114                           ; Redistribution and use in source and binary forms, with or without modification, are
   115                           ; permitted provided that the following conditions are met:
   116                           ; 
   117                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
   118                           ;        conditions and the following disclaimer.
   119                           ; 
   120                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
   121                           ;        of conditions and the following disclaimer in the documentation and/or other
   122                           ;        materials provided with the distribution.
   123                           ; 
   124                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
   125                           ;        software without specific prior written permission.
   126                           ; 
   127                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   128                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   129                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   130                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   131                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   132                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   133                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   134                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   135                           ; 
   136                           ; 
   137                           ; Code-generator required, PIC18F4520 Definitions
   138                           ; 
   139                           ; SFR Addresses
   140  0000                     
   141                           	psect	idataBANK0
   142  002396                     __pidataBANK0:
   143                           	opt callstack 0
   144                           
   145                           ;initializer for show_score@F2762
   146  002396  FFFF               	dw	65535
   147  002398  FFFF               	dw	65535
   148  00239A  FFFF               	dw	65535
   149  00239C  FFFF               	dw	65535
   150  00239E  FFFF               	dw	65535
   151  0023A0  FFFF               	dw	65535
   152  0023A2  FFFF               	dw	65535
   153  0023A4  FFFF               	dw	65535
   154                           
   155                           	psect	idataBANK2
   156  0015B8                     __pidataBANK2:
   157                           	opt callstack 0
   158                           
   159                           ;initializer for _shapes
   160  0015B8  0000               	dw	0
   161  0015BA  0000               	dw	0
   162  0015BC  0000               	dw	0
   163  0015BE  0001               	dw	1
   164  0015C0  0003               	dw	3
   165  0015C2  0001               	dw	1
   166  0015C4  0000               	dw	0
   167  0015C6  0000               	dw	0
   168  0015C8  04                 	db	4
   169  0015C9  00                 	db	0
   170  0015CA  00                 	db	0
   171  0015CB  0000               	dw	0
   172  0015CD  0000               	dw	0
   173  0015CF  0001               	dw	1
   174  0015D1  0001               	dw	1
   175  0015D3  0001               	dw	1
   176  0015D5  0001               	dw	1
   177  0015D7  0000               	dw	0
   178  0015D9  0000               	dw	0
   179  0015DB  04                 	db	4
   180  0015DC  00                 	db	0
   181  0015DD  01                 	db	1
   182  0015DE  0000               	dw	0
   183  0015E0  0000               	dw	0
   184  0015E2  0000               	dw	0
   185  0015E4  0003               	dw	3
   186  0015E6  0001               	dw	1
   187  0015E8  0001               	dw	1
   188  0015EA  0000               	dw	0
   189  0015EC  0000               	dw	0
   190  0015EE  04                 	db	4
   191  0015EF  00                 	db	0
   192  0015F0  00                 	db	0
   193  0015F1  0000               	dw	0
   194  0015F3  0000               	dw	0
   195  0015F5  0000               	dw	0
   196  0015F7  0001               	dw	1
   197  0015F9  0001               	dw	1
   198  0015FB  0003               	dw	3
   199  0015FD  0000               	dw	0
   200  0015FF  0000               	dw	0
   201  001601  04                 	db	4
   202  001602  00                 	db	0
   203  001603  00                 	db	0
   204  001604  0000               	dw	0
   205  001606  0000               	dw	0
   206  001608  0000               	dw	0
   207  00160A  0003               	dw	3
   208  00160C  0003               	dw	3
   209  00160E  0000               	dw	0
   210  001610  0000               	dw	0
   211  001612  0000               	dw	0
   212  001614  03                 	db	3
   213  001615  01                 	db	1
   214  001616  02                 	db	2
   215  001617  0000               	dw	0
   216  001619  0000               	dw	0
   217  00161B  0000               	dw	0
   218  00161D  0002               	dw	2
   219  00161F  0003               	dw	3
   220  001621  0001               	dw	1
   221  001623  0000               	dw	0
   222  001625  0000               	dw	0
   223  001627  04                 	db	4
   224  001628  01                 	db	1
   225  001629  01                 	db	1
   226  00162A  0000               	dw	0
   227  00162C  0000               	dw	0
   228  00162E  0000               	dw	0
   229  001630  0001               	dw	1
   230  001632  0003               	dw	3
   231  001634  0002               	dw	2
   232  001636  0000               	dw	0
   233  001638  0000               	dw	0
   234  00163A  04                 	db	4
   235  00163B  01                 	db	1
   236  00163C  01                 	db	1
   237                           
   238                           	psect	smallconst
   239  000600                     __psmallconst:
   240                           	opt callstack 0
   241  000600  00                 	db	0
   242  000601                     _SnakeYtext:
   243                           	opt callstack 0
   244  000601  0001               	dw	1
   245  000603  0002               	dw	2
   246  000605  0004               	dw	4
   247  000607  0008               	dw	8
   248  000609  0010               	dw	16
   249  00060B  0020               	dw	32
   250  00060D  0040               	dw	64
   251  00060F  0080               	dw	128
   252  000611  0100               	dw	256
   253  000613  0200               	dw	512
   254  000615  0400               	dw	1024
   255  000617  0800               	dw	2048
   256  000619  1000               	dw	4096
   257  00061B  2000               	dw	8192
   258  00061D  4000               	dw	16384
   259  00061F  8000               	dw	32768
   260  000621                     __end_of_SnakeYtext:
   261                           	opt callstack 0
   262  000621                     _Number:
   263                           	opt callstack 0
   264  000621  001E               	dw	30
   265  000623  0012               	dw	18
   266  000625  0012               	dw	18
   267  000627  0012               	dw	18
   268  000629  001E               	dw	30
   269  00062B  0000               	dw	0
   270  00062D  0000               	dw	0
   271  00062F  0000               	dw	0
   272  000631  0004               	dw	4
   273  000633  000C               	dw	12
   274  000635  0004               	dw	4
   275  000637  0004               	dw	4
   276  000639  001E               	dw	30
   277  00063B  0000               	dw	0
   278  00063D  0000               	dw	0
   279  00063F  0000               	dw	0
   280  000641  001E               	dw	30
   281  000643  0002               	dw	2
   282  000645  001E               	dw	30
   283  000647  0010               	dw	16
   284  000649  001E               	dw	30
   285  00064B  0000               	dw	0
   286  00064D  0000               	dw	0
   287  00064F  0000               	dw	0
   288  000651  001E               	dw	30
   289  000653  0002               	dw	2
   290  000655  000E               	dw	14
   291  000657  0002               	dw	2
   292  000659  001E               	dw	30
   293  00065B  0000               	dw	0
   294  00065D  0000               	dw	0
   295  00065F  0000               	dw	0
   296  000661  0012               	dw	18
   297  000663  0012               	dw	18
   298  000665  001E               	dw	30
   299  000667  0002               	dw	2
   300  000669  0002               	dw	2
   301  00066B  0000               	dw	0
   302  00066D  0000               	dw	0
   303  00066F  0000               	dw	0
   304  000671  001E               	dw	30
   305  000673  0010               	dw	16
   306  000675  001E               	dw	30
   307  000677  0002               	dw	2
   308  000679  001E               	dw	30
   309  00067B  0000               	dw	0
   310  00067D  0000               	dw	0
   311  00067F  0000               	dw	0
   312  000681  001E               	dw	30
   313  000683  0010               	dw	16
   314  000685  001E               	dw	30
   315  000687  0012               	dw	18
   316  000689  001E               	dw	30
   317  00068B  0000               	dw	0
   318  00068D  0000               	dw	0
   319  00068F  0000               	dw	0
   320  000691  001E               	dw	30
   321  000693  0002               	dw	2
   322  000695  0004               	dw	4
   323  000697  0008               	dw	8
   324  000699  0010               	dw	16
   325  00069B  0000               	dw	0
   326  00069D  0000               	dw	0
   327  00069F  0000               	dw	0
   328  0006A1  001E               	dw	30
   329  0006A3  0012               	dw	18
   330  0006A5  001E               	dw	30
   331  0006A7  0012               	dw	18
   332  0006A9  001E               	dw	30
   333  0006AB  0000               	dw	0
   334  0006AD  0000               	dw	0
   335  0006AF  0000               	dw	0
   336  0006B1  001E               	dw	30
   337  0006B3  0012               	dw	18
   338  0006B5  001E               	dw	30
   339  0006B7  0002               	dw	2
   340  0006B9  0002               	dw	2
   341  0006BB  0000               	dw	0
   342  0006BD  0000               	dw	0
   343  0006BF  0000               	dw	0
   344  0006C1                     __end_of_Number:
   345                           	opt callstack 0
   346  0006C1                     _choose_screen:
   347                           	opt callstack 0
   348  0006C1  FFFF               	dw	65535
   349  0006C3  8181               	dw	33153
   350  0006C5  BD81               	dw	48513
   351  0006C7  858D               	dw	34189
   352  0006C9  8599               	dw	34201
   353  0006CB  AD81               	dw	44417
   354  0006CD  8181               	dw	33153
   355  0006CF  FFFF               	dw	65535
   356  0006D1                     __end_of_choose_screen:
   357                           	opt callstack 0
   358  0006D1                     _SNAKE:
   359                           	opt callstack 0
   360  0006D1  FB97               	dw	64407
   361  0006D3  A955               	dw	43349
   362  0006D5  AB9D               	dw	43933
   363  0006D7  0000               	dw	0
   364  0006D9  03DF               	dw	991
   365  0006DB  B881               	dw	47233
   366  0006DD  035F               	dw	863
   367  0006DF  0000               	dw	0
   368  0006E1                     __end_of_SNAKE:
   369                           	opt callstack 0
   370  0006E1                     _TETRIS:
   371                           	opt callstack 0
   372  0006E1  8841               	dw	34881
   373  0006E3  FBDF               	dw	64479
   374  0006E5  8841               	dw	34881
   375  0006E7  0000               	dw	0
   376  0006E9  9BDF               	dw	39903
   377  0006EB  A955               	dw	43349
   378  0006ED  CA91               	dw	51857
   379  0006EF  0000               	dw	0
   380  0006F1                     __end_of_TETRIS:
   381                           	opt callstack 0
   382  0006F1  00                 	db	0	; dummy byte at the end
   383  0000                     
   384                           	psect	nvCOMRAM
   385  00004C                     __pnvCOMRAM:
   386                           	opt callstack 0
   387  00004C                     _mS:
   388                           	opt callstack 0
   389  00004C                     	ds	2
   390  00004E                     __lfsr:
   391                           	opt callstack 0
   392  00004E                     	ds	2
   393                           
   394                           	psect	nvBANK0
   395  0000EC                     __pnvBANK0:
   396                           	opt callstack 0
   397  0000EC                     _UpdateScreen:
   398                           	opt callstack 0
   399  0000EC                     	ds	1
   400  0000ED                     _mtxButtons:
   401                           	opt callstack 0
   402  0000ED                     	ds	1
   403  0000EE                     _tetris:
   404                           	opt callstack 0
   405  0000EE                     	ds	1
   406  0000EF                     _Down_Delay:
   407                           	opt callstack 0
   408  0000EF                     	ds	2
   409  0000F1                     _Rotate_Delay:
   410                           	opt callstack 0
   411  0000F1                     	ds	2
   412  0000F3                     _Right_Delay:
   413                           	opt callstack 0
   414  0000F3                     	ds	2
   415  0000F5                     _Left_Delay:
   416                           	opt callstack 0
   417  0000F5                     	ds	2
   418  0000                     _port_display	set	3970
   419  0000                     _TMR0	set	4054
   420  0000                     _PORTBbits	set	3969
   421  0000                     _EECON2	set	4007
   422  0000                     _EEDATA	set	4008
   423  0000                     _EECON1bits	set	4006
   424  0000                     _EEADR	set	4009
   425  0000                     _PORTD	set	3971
   426  0000                     _DDRD	set	3989
   427  0000                     _PORTC	set	3970
   428  0000                     _DDRC	set	3988
   429  0000                     _INTCON2bits	set	4081
   430  0000                     _PORTB	set	3969
   431  0000                     _DDRB	set	3987
   432  0000                     _PORTA	set	3968
   433  0000                     _DDRA	set	3986
   434  0000                     _ADCON1bits	set	4033
   435  0000                     _OSCCONbits	set	4051
   436  0000                     _T0CONbits	set	4053
   437  0000                     _INTCONbits	set	4082
   438  0000                     _GIE	set	32663
   439  0000                     _IPEN	set	32391
   440  0000                     _TMR0IE	set	32661
   441  0000                     _TMR0ON	set	32431
   442  0000                     _T0CS	set	32429
   443  0000                     _PSA	set	32427
   444                           
   445                           ; #config settings
   446  0000                     
   447                           	psect	cinit
   448  00194A                     __pcinit:
   449                           	opt callstack 0
   450  00194A                     start_initialization:
   451                           	opt callstack 0
   452  00194A                     __initialization:
   453                           	opt callstack 0
   454                           
   455                           ; Initialize objects allocated to BANK2 (133 bytes)
   456                           ; load TBLPTR registers with __pidataBANK2
   457  00194A  0EB8               	movlw	low __pidataBANK2
   458  00194C  6EF6               	movwf	tblptrl,c
   459  00194E  0E15               	movlw	high __pidataBANK2
   460  001950  6EF7               	movwf	tblptrh,c
   461  001952  0E00               	movlw	low (__pidataBANK2 shr (0+16))
   462  001954  6EF8               	movwf	tblptru,c
   463  001956  EE02  F000         	lfsr	0,__pdataBANK2
   464  00195A  EE10 F085          	lfsr	1,133
   465  00195E                     copy_data0:
   466  00195E  0009               	tblrd		*+
   467  001960  CFF5 FFEE          	movff	tablat,postinc0
   468  001964  50E5               	movf	postdec1,w,c
   469  001966  50E1               	movf	fsr1l,w,c
   470  001968  E1FA               	bnz	copy_data0
   471                           
   472                           ; Initialize objects allocated to BANK0 (16 bytes)
   473                           ; load TBLPTR registers with __pidataBANK0
   474  00196A  0E96               	movlw	low __pidataBANK0
   475  00196C  6EF6               	movwf	tblptrl,c
   476  00196E  0E23               	movlw	high __pidataBANK0
   477  001970  6EF7               	movwf	tblptrh,c
   478  001972  0E00               	movlw	low (__pidataBANK0 shr (0+16))
   479  001974  6EF8               	movwf	tblptru,c
   480  001976  EE00  F0DC         	lfsr	0,__pdataBANK0
   481  00197A  EE10 F010          	lfsr	1,16
   482  00197E                     copy_data1:
   483  00197E  0009               	tblrd		*+
   484  001980  CFF5 FFEE          	movff	tablat,postinc0
   485  001984  50E5               	movf	postdec1,w,c
   486  001986  50E1               	movf	fsr1l,w,c
   487  001988  E1FA               	bnz	copy_data1
   488                           
   489                           ; Clear objects allocated to BANK1 (256 bytes)
   490  00198A  EE01  F000         	lfsr	0,__pbssBANK1
   491  00198E  EE11 F000          	lfsr	1,256
   492  001992                     clear_0:
   493  001992  6AEE               	clrf	postinc0,c
   494  001994  50E5               	movf	postdec1,w,c
   495  001996  50E1               	movf	fsr1l,w,c
   496  001998  E1FC               	bnz	clear_0
   497  00199A  50E2               	movf	fsr1h,w,c
   498  00199C  E1FA               	bnz	clear_0
   499                           
   500                           ; Clear objects allocated to BANK0 (92 bytes)
   501  00199E  EE00  F080         	lfsr	0,__pbssBANK0
   502  0019A2  0E5C               	movlw	92
   503  0019A4                     clear_1:
   504  0019A4  6AEE               	clrf	postinc0,c
   505  0019A6  06E8               	decf	wreg,f,c
   506  0019A8  E1FD               	bnz	clear_1
   507                           
   508                           ; Clear objects allocated to COMRAM (24 bytes)
   509  0019AA  EE00  F034         	lfsr	0,__pbssCOMRAM
   510  0019AE  0E18               	movlw	24
   511  0019B0                     clear_2:
   512  0019B0  6AEE               	clrf	postinc0,c
   513  0019B2  06E8               	decf	wreg,f,c
   514  0019B4  E1FD               	bnz	clear_2
   515  0019B6                     end_of_initialization:
   516                           	opt callstack 0
   517  0019B6                     __end_of__initialization:
   518                           	opt callstack 0
   519  0019B6  9050               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   520  0019B8  9250               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   521  0019BA  0E00               	movlw	low (__Lmediumconst shr (0+16))
   522  0019BC  6EF8               	movwf	tblptru,c
   523  0019BE  0100               	movlb	0
   524  0019C0  EFA3  F010         	goto	_main	;jump to C main() function
   525                           
   526                           	psect	bssCOMRAM
   527  000034                     __pbssCOMRAM:
   528                           	opt callstack 0
   529  000034                     _InterruptComplete:
   530                           	opt callstack 0
   531  000034                     	ds	1
   532  000035                     _previous_direction:
   533                           	opt callstack 0
   534  000035                     	ds	1
   535  000036                     _berryY:
   536                           	opt callstack 0
   537  000036                     	ds	1
   538  000037                     _berryX:
   539                           	opt callstack 0
   540  000037                     	ds	1
   541  000038                     _snakeLength:
   542                           	opt callstack 0
   543  000038                     	ds	1
   544  000039                     _moveSnake:
   545                           	opt callstack 0
   546  000039                     	ds	1
   547  00003A                     _direction:
   548                           	opt callstack 0
   549  00003A                     	ds	1
   550  00003B                     _game:
   551                           	opt callstack 0
   552  00003B                     	ds	1
   553  00003C                     _OriginY:
   554                           	opt callstack 0
   555  00003C                     	ds	1
   556  00003D                     _OriginX:
   557                           	opt callstack 0
   558  00003D                     	ds	1
   559  00003E                     _EndOfGame:
   560                           	opt callstack 0
   561  00003E                     	ds	1
   562  00003F                     _DropObject:
   563                           	opt callstack 0
   564  00003F                     	ds	1
   565  000040                     _countblocks:
   566                           	opt callstack 0
   567  000040                     	ds	1
   568  000041                     _CheckForNewLines:
   569                           	opt callstack 0
   570  000041                     	ds	1
   571  000042                     _IsRotated:
   572                           	opt callstack 0
   573  000042                     	ds	1
   574  000043                     _NumberOfLines:
   575                           	opt callstack 0
   576  000043                     	ds	1
   577  000044                     _LimitedRotation:
   578                           	opt callstack 0
   579  000044                     	ds	1
   580  000045                     _lower_8bits:
   581                           	opt callstack 0
   582  000045                     	ds	1
   583  000046                     _LastHighScore:
   584                           	opt callstack 0
   585  000046                     	ds	1
   586  000047                     screen_update@CurrentX:
   587                           	opt callstack 0
   588  000047                     	ds	1
   589  000048                     _Down_Debounced:
   590                           	opt callstack 0
   591  000048                     	ds	1
   592  000049                     _Right_Debounced:
   593                           	opt callstack 0
   594  000049                     	ds	1
   595  00004A                     _Left_Debounced:
   596                           	opt callstack 0
   597  00004A                     	ds	1
   598  00004B                     _Rotate_Debounced:
   599                           	opt callstack 0
   600  00004B                     	ds	1
   601                           
   602                           	psect	bssBANK0
   603  000080                     __pbssBANK0:
   604                           	opt callstack 0
   605  000080                     _randomobjects:
   606                           	opt callstack 0
   607  000080                     	ds	8
   608  000088                     _time:
   609                           	opt callstack 0
   610  000088                     	ds	2
   611  00008A                     _counter:
   612                           	opt callstack 0
   613  00008A                     	ds	1
   614  00008B                     _upper_8bits:
   615                           	opt callstack 0
   616  00008B                     	ds	1
   617  00008C                     _ScreenData:
   618                           	opt callstack 0
   619  00008C                     	ds	16
   620  00009C                     _tmpObjectData:
   621                           	opt callstack 0
   622  00009C                     	ds	16
   623  0000AC                     _Screen_Data:
   624                           	opt callstack 0
   625  0000AC                     	ds	16
   626  0000BC                     _BackgroundData:
   627                           	opt callstack 0
   628  0000BC                     	ds	16
   629  0000CC                     _ObjectData:
   630                           	opt callstack 0
   631  0000CC                     	ds	16
   632                           
   633                           	psect	dataBANK0
   634  0000DC                     __pdataBANK0:
   635                           	opt callstack 0
   636  0000DC                     show_score@F2762:
   637                           	opt callstack 0
   638  0000DC                     	ds	16
   639                           
   640                           	psect	bssBANK1
   641  000100                     __pbssBANK1:
   642                           	opt callstack 0
   643  000100                     _positions:
   644                           	opt callstack 0
   645  000100                     	ds	256
   646                           
   647                           	psect	dataBANK2
   648  000200                     __pdataBANK2:
   649                           	opt callstack 0
   650  000200                     _shapes:
   651                           	opt callstack 0
   652  000200                     	ds	133
   653                           
   654                           	psect	cstackBANK2
   655  000285                     __pcstackBANK2:
   656                           	opt callstack 0
   657  000285                     show_score@mask:
   658                           	opt callstack 0
   659                           
   660                           ; 16 bytes @ 0x0
   661  000285                     	ds	16
   662  000295                     show_score@Numberscreen:
   663                           	opt callstack 0
   664                           
   665                           ; 16 bytes @ 0x10
   666  000295                     	ds	16
   667  0002A5                     show_score@tmpObjectData:
   668                           	opt callstack 0
   669                           
   670                           ; 16 bytes @ 0x20
   671  0002A5                     	ds	16
   672  0002B5                     show_score@score:
   673                           	opt callstack 0
   674                           
   675                           ; 1 bytes @ 0x30
   676  0002B5                     	ds	1
   677  0002B6                     show_score@currentNumber:
   678                           	opt callstack 0
   679                           
   680                           ; 1 bytes @ 0x31
   681  0002B6                     	ds	1
   682  0002B7                     show_score@number:
   683                           	opt callstack 0
   684                           
   685                           ; 4 bytes @ 0x32
   686  0002B7                     	ds	4
   687  0002BB                     show_score@i:
   688                           	opt callstack 0
   689                           
   690                           ; 1 bytes @ 0x36
   691  0002BB                     	ds	1
   692                           
   693                           	psect	cstackCOMRAM
   694  000001                     __pcstackCOMRAM:
   695                           	opt callstack 0
   696  000001                     ??_screen_update:
   697  000001                     ?i2_get_mS:
   698                           	opt callstack 0
   699  000001                     add_mS@amount:
   700                           	opt callstack 0
   701  000001                     debounceButton@delay:
   702                           	opt callstack 0
   703  000001                     i2set_mS@amount:
   704                           	opt callstack 0
   705                           
   706                           ; 2 bytes @ 0x0
   707  000001                     	ds	2
   708  000003                     ?___lwmod:
   709                           	opt callstack 0
   710  000003                     debounceButton@debounced:
   711                           	opt callstack 0
   712  000003                     screen_update@ymask:
   713                           	opt callstack 0
   714  000003                     ___lwmod@dividend:
   715                           	opt callstack 0
   716                           
   717                           ; 2 bytes @ 0x2
   718  000003                     	ds	2
   719  000005                     screen_update@xmask:
   720                           	opt callstack 0
   721  000005                     ___lwmod@divisor:
   722                           	opt callstack 0
   723                           
   724                           ; 2 bytes @ 0x4
   725  000005                     	ds	2
   726  000007                     debounceButton@button:
   727                           	opt callstack 0
   728  000007                     ___lwmod@counter:
   729                           	opt callstack 0
   730                           
   731                           ; 1 bytes @ 0x6
   732  000007                     	ds	1
   733  000008                     ??_isr:
   734  000008                     
   735                           ; 1 bytes @ 0x7
   736  000008                     	ds	4
   737  00000C                     ??_rnd_get_num:
   738  00000C                     ?_get_mS:
   739                           	opt callstack 0
   740  00000C                     ?___wmul:
   741                           	opt callstack 0
   742  00000C                     ?___awdiv:
   743                           	opt callstack 0
   744  00000C                     ?___awmod:
   745                           	opt callstack 0
   746  00000C                     rnd_initialize@input:
   747                           	opt callstack 0
   748  00000C                     ReadEEByte@address:
   749                           	opt callstack 0
   750  00000C                     WriteEEByte@data:
   751                           	opt callstack 0
   752  00000C                     checkLeft@reset:
   753                           	opt callstack 0
   754  00000C                     checkRight@reset:
   755                           	opt callstack 0
   756  00000C                     checkUp@reset:
   757                           	opt callstack 0
   758  00000C                     checkDown@reset:
   759                           	opt callstack 0
   760  00000C                     ___lbmod@divisor:
   761                           	opt callstack 0
   762  00000C                     moveObject@pObject:
   763                           	opt callstack 0
   764  00000C                     checkForBottom@pObject:
   765                           	opt callstack 0
   766  00000C                     set_mS@amount:
   767                           	opt callstack 0
   768  00000C                     memcpy@dest:
   769                           	opt callstack 0
   770  00000C                     memcpyvol@dest:
   771                           	opt callstack 0
   772  00000C                     swap@a:
   773                           	opt callstack 0
   774  00000C                     clearArray@pArray:
   775                           	opt callstack 0
   776  00000C                     mergeObjects@pSource:
   777                           	opt callstack 0
   778  00000C                     checkForLeftWall@pObject:
   779                           	opt callstack 0
   780  00000C                     checkForRightWall@pObject:
   781                           	opt callstack 0
   782  00000C                     collisionDetect@pSource:
   783                           	opt callstack 0
   784  00000C                     pixelCount@pSource:
   785                           	opt callstack 0
   786  00000C                     removeLine@pObject:
   787                           	opt callstack 0
   788  00000C                     waitms@t:
   789                           	opt callstack 0
   790  00000C                     ___wmul@multiplier:
   791                           	opt callstack 0
   792  00000C                     ___awdiv@dividend:
   793                           	opt callstack 0
   794  00000C                     ___awmod@dividend:
   795                           	opt callstack 0
   796                           
   797                           ; 2 bytes @ 0xB
   798  00000C                     	ds	1
   799  00000D                     WriteEEByte@address:
   800                           	opt callstack 0
   801  00000D                     ___lbmod@dividend:
   802                           	opt callstack 0
   803                           
   804                           ; 1 bytes @ 0xC
   805  00000D                     	ds	1
   806  00000E                     ??_checkForBottom:
   807  00000E                     ??_pixelCount:
   808  00000E                     moveObject@direction:
   809                           	opt callstack 0
   810  00000E                     removeLine@pY:
   811                           	opt callstack 0
   812  00000E                     readHighScore@adress:
   813                           	opt callstack 0
   814  00000E                     writeHighScore@highscore:
   815                           	opt callstack 0
   816  00000E                     ___lbmod@counter:
   817                           	opt callstack 0
   818  00000E                     memcpy@src:
   819                           	opt callstack 0
   820  00000E                     memcpyvol@src:
   821                           	opt callstack 0
   822  00000E                     swap@b:
   823                           	opt callstack 0
   824  00000E                     clearArray@size:
   825                           	opt callstack 0
   826  00000E                     mergeObjects@pTarget:
   827                           	opt callstack 0
   828  00000E                     collisionDetect@pTarget:
   829                           	opt callstack 0
   830  00000E                     ___wmul@multiplicand:
   831                           	opt callstack 0
   832  00000E                     ___awdiv@divisor:
   833                           	opt callstack 0
   834  00000E                     ___awmod@divisor:
   835                           	opt callstack 0
   836                           
   837                           ; 2 bytes @ 0xD
   838  00000E                     	ds	1
   839  00000F                     ??_removeLine:
   840  00000F                     moveObject@cycles:
   841                           	opt callstack 0
   842  00000F                     readHighScore@tmpbyte:
   843                           	opt callstack 0
   844  00000F                     writeHighScore@scored:
   845                           	opt callstack 0
   846  00000F                     ___lbmod@rem:
   847                           	opt callstack 0
   848                           
   849                           ; 1 bytes @ 0xE
   850  00000F                     	ds	1
   851  000010                     ??_moveObject:
   852  000010                     ??_collisionDetect:
   853  000010                     ??_clearArray:
   854  000010                     swap@t:
   855                           	opt callstack 0
   856  000010                     mergeObjects@mode:
   857                           	opt callstack 0
   858  000010                     writeHighScore@adress:
   859                           	opt callstack 0
   860  000010                     ___awdiv@counter:
   861                           	opt callstack 0
   862  000010                     ___awmod@counter:
   863                           	opt callstack 0
   864  000010                     rnd_get_num@b:
   865                           	opt callstack 0
   866  000010                     memcpy@n:
   867                           	opt callstack 0
   868  000010                     memcpyvol@n:
   869                           	opt callstack 0
   870  000010                     ___wmul@product:
   871                           	opt callstack 0
   872                           
   873                           ; 2 bytes @ 0xF
   874  000010                     	ds	1
   875  000011                     ??_mergeObjects:
   876  000011                     ___awdiv@sign:
   877                           	opt callstack 0
   878  000011                     ___awmod@sign:
   879                           	opt callstack 0
   880  000011                     reverse@str:
   881                           	opt callstack 0
   882                           
   883                           ; 2 bytes @ 0x10
   884  000011                     	ds	1
   885  000012                     checkForBottom@i:
   886                           	opt callstack 0
   887  000012                     genBerry@size:
   888                           	opt callstack 0
   889  000012                     clearArray@i:
   890                           	opt callstack 0
   891  000012                     memcpy@d:
   892                           	opt callstack 0
   893  000012                     memcpyvol@d:
   894                           	opt callstack 0
   895  000012                     ___awdiv@quotient:
   896                           	opt callstack 0
   897                           
   898                           ; 2 bytes @ 0x11
   899  000012                     	ds	1
   900  000013                     genBerry@temp:
   901                           	opt callstack 0
   902  000013                     reverse@length:
   903                           	opt callstack 0
   904  000013                     set_screen@newData:
   905                           	opt callstack 0
   906  000013                     set_splashscreen@newData:
   907                           	opt callstack 0
   908                           
   909                           ; 2 bytes @ 0x12
   910  000013                     	ds	1
   911  000014                     memcpy@s:
   912                           	opt callstack 0
   913  000014                     memcpyvol@s:
   914                           	opt callstack 0
   915                           
   916                           ; 2 bytes @ 0x13
   917  000014                     	ds	1
   918  000015                     ??_set_splashscreen:
   919  000015                     ??_reverse:
   920  000015                     CreateBerry@randomGood:
   921                           	opt callstack 0
   922  000015                     pixelCount@r:
   923                           	opt callstack 0
   924  000015                     set_screen@i:
   925                           	opt callstack 0
   926                           
   927                           ; 2 bytes @ 0x14
   928  000015                     	ds	1
   929  000016                     moveObject@c:
   930                           	opt callstack 0
   931  000016                     CreateBerry@i:
   932                           	opt callstack 0
   933  000016                     pixelCount@x:
   934                           	opt callstack 0
   935  000016                     newRotation@pSource:
   936                           	opt callstack 0
   937  000016                     selectNextObject@pTarget:
   938                           	opt callstack 0
   939  000016                     reverse@start:
   940                           	opt callstack 0
   941  000016                     getNumber@pTarget:
   942                           	opt callstack 0
   943                           
   944                           ; 2 bytes @ 0x15
   945  000016                     	ds	1
   946  000017                     ??_SnakeGraph:
   947  000017                     moveObject@i:
   948                           	opt callstack 0
   949  000017                     inistialize_snake@i:
   950                           	opt callstack 0
   951  000017                     mergeObjects@i:
   952                           	opt callstack 0
   953  000017                     pixelCount@y:
   954                           	opt callstack 0
   955                           
   956                           ; 1 bytes @ 0x16
   957  000017                     	ds	1
   958  000018                     ??_selectNextObject:
   959  000018                     collisionDetect@i:
   960                           	opt callstack 0
   961  000018                     getNumber@pDigit:
   962                           	opt callstack 0
   963  000018                     newRotation@pTarget:
   964                           	opt callstack 0
   965  000018                     reverse@end:
   966                           	opt callstack 0
   967                           
   968                           ; 2 bytes @ 0x17
   969  000018                     	ds	1
   970  000019                     set_splashscreen@i:
   971                           	opt callstack 0
   972  000019                     selectNextObject@check:
   973                           	opt callstack 0
   974                           
   975                           ; 7 bytes @ 0x18
   976  000019                     	ds	1
   977  00001A                     newRotation@rotation:
   978                           	opt callstack 0
   979  00001A                     itoa@value:
   980                           	opt callstack 0
   981                           
   982                           ; 2 bytes @ 0x19
   983  00001A                     	ds	1
   984  00001B                     ??_newRotation:
   985  00001B                     choosescreen@mask:
   986                           	opt callstack 0
   987                           
   988                           ; 16 bytes @ 0x1A
   989  00001B                     	ds	1
   990  00001C                     SnakeGraph@j:
   991                           	opt callstack 0
   992  00001C                     itoa@str:
   993                           	opt callstack 0
   994                           
   995                           ; 2 bytes @ 0x1B
   996  00001C                     	ds	1
   997  00001D                     SnakeGraph@i:
   998                           	opt callstack 0
   999                           
  1000                           ; 1 bytes @ 0x1C
  1001  00001D                     	ds	1
  1002  00001E                     ??_MoveSnakes:
  1003  00001E                     itoa@bas:
  1004                           	opt callstack 0
  1005                           
  1006                           ; 2 bytes @ 0x1D
  1007  00001E                     	ds	2
  1008  000020                     selectNextObject@fill:
  1009                           	opt callstack 0
  1010  000020                     removeLine@currentLine:
  1011                           	opt callstack 0
  1012  000020                     _itoa$762:
  1013                           	opt callstack 0
  1014                           
  1015                           ; 2 bytes @ 0x1F
  1016  000020                     	ds	1
  1017  000021                     removeLine@y:
  1018                           	opt callstack 0
  1019  000021                     selectNextObject@s:
  1020                           	opt callstack 0
  1021                           
  1022                           ; 2 bytes @ 0x20
  1023  000021                     	ds	1
  1024  000022                     newRotation@x2:
  1025                           	opt callstack 0
  1026  000022                     MoveSnakes@i:
  1027                           	opt callstack 0
  1028  000022                     itoa@isNegative:
  1029                           	opt callstack 0
  1030  000022                     removeLine@x:
  1031                           	opt callstack 0
  1032                           
  1033                           ; 1 bytes @ 0x21
  1034  000022                     	ds	1
  1035  000023                     newRotation@y2:
  1036                           	opt callstack 0
  1037  000023                     selectNextObject@rndSelection:
  1038                           	opt callstack 0
  1039  000023                     checkForLines@pObject:
  1040                           	opt callstack 0
  1041  000023                     itoa@rem:
  1042                           	opt callstack 0
  1043                           
  1044                           ; 2 bytes @ 0x22
  1045  000023                     	ds	1
  1046  000024                     newRotation@x1:
  1047                           	opt callstack 0
  1048  000024                     selectNextObject@counter:
  1049                           	opt callstack 0
  1050                           
  1051                           ; 1 bytes @ 0x23
  1052  000024                     	ds	1
  1053  000025                     ??_checkForLines:
  1054  000025                     newRotation@y1:
  1055                           	opt callstack 0
  1056  000025                     moveObjectDown@pObject:
  1057                           	opt callstack 0
  1058  000025                     itoa@i:
  1059                           	opt callstack 0
  1060                           
  1061                           ; 2 bytes @ 0x24
  1062  000025                     	ds	1
  1063  000026                     ??_tetris_button_up:
  1064                           
  1065                           ; 1 bytes @ 0x25
  1066  000026                     	ds	1
  1067  000027                     moveObjectDown@result:
  1068                           	opt callstack 0
  1069  000027                     snake_main@LastHighScore:
  1070                           	opt callstack 0
  1071                           
  1072                           ; 1 bytes @ 0x26
  1073  000027                     	ds	1
  1074  000028                     tetris_buttons@returnbool:
  1075                           	opt callstack 0
  1076                           
  1077                           ; 1 bytes @ 0x27
  1078  000028                     	ds	3
  1079  00002B                     choosescreen@tetris:
  1080                           	opt callstack 0
  1081                           
  1082                           ; 1 bytes @ 0x2A
  1083  00002B                     	ds	1
  1084  00002C                     checkForLines@pixels:
  1085                           	opt callstack 0
  1086  00002C                     choosescreen@i:
  1087                           	opt callstack 0
  1088                           
  1089                           ; 2 bytes @ 0x2B
  1090  00002C                     	ds	1
  1091  00002D                     checkForLines@x:
  1092                           	opt callstack 0
  1093                           
  1094                           ; 1 bytes @ 0x2C
  1095  00002D                     	ds	1
  1096  00002E                     checkForLines@y:
  1097                           	opt callstack 0
  1098                           
  1099                           ; 1 bytes @ 0x2D
  1100  00002E                     	ds	1
  1101  00002F                     _tetris_main$627:
  1102                           	opt callstack 0
  1103                           
  1104                           ; 1 bytes @ 0x2E
  1105  00002F                     	ds	3
  1106  000032                     tetris_main@LastHighScore:
  1107                           	opt callstack 0
  1108                           
  1109                           ; 1 bytes @ 0x31
  1110  000032                     	ds	1
  1111  000033                     tetris_main@newScreen:
  1112                           	opt callstack 0
  1113                           
  1114                           ; 1 bytes @ 0x32
  1115  000033                     	ds	1
  1116  000034                     
  1117                           ; 1 bytes @ 0x33
  1118 ;;
  1119 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  1120 ;;
  1121 ;; *************** function _main *****************
  1122 ;; Defined at:
  1123 ;;		line 126 in file "pictris.c"
  1124 ;; Parameters:    Size  Location     Type
  1125 ;;		None
  1126 ;; Auto vars:     Size  Location     Type
  1127 ;;		None
  1128 ;; Return value:  Size  Location     Type
  1129 ;;                  1    wreg      void 
  1130 ;; Registers used:
  1131 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1132 ;; Tracked objects:
  1133 ;;		On entry : 0/0
  1134 ;;		On exit  : 0/0
  1135 ;;		Unchanged: 0/0
  1136 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1137 ;;      Params:         0       0       0       0       0       0       0
  1138 ;;      Locals:         0       0       0       0       0       0       0
  1139 ;;      Temps:          0       0       0       0       0       0       0
  1140 ;;      Totals:         0       0       0       0       0       0       0
  1141 ;;Total ram usage:        0 bytes
  1142 ;; Hardware stack levels required when called:   11
  1143 ;; This function calls:
  1144 ;;		_choosescreen
  1145 ;;		_get_mS
  1146 ;;		_initialise_globals
  1147 ;;		_initialise_hardware
  1148 ;;		_initialise_screen
  1149 ;;		_mainGameLoop
  1150 ;;		_rnd_initialize
  1151 ;;		_start_button
  1152 ;; This function is called by:
  1153 ;;		Startup code after reset
  1154 ;; This function uses a non-reentrant model
  1155 ;;
  1156                           
  1157                           	psect	text0
  1158  002146                     __ptext0:
  1159                           	opt callstack 0
  1160  002146                     _main:
  1161                           	opt callstack 20
  1162                           
  1163                           ;pictris.c: 129:     initialise_hardware();
  1164                           
  1165                           ;incstack = 0
  1166  002146  ECD5  F00F         	call	_initialise_hardware	;wreg free
  1167                           
  1168                           ;pictris.c: 130:     initialise_globals();
  1169  00214A  ECE9  F011         	call	_initialise_globals	;wreg free
  1170                           
  1171                           ;pictris.c: 131:     start_button();
  1172  00214E  EC78  F010         	call	_start_button	;wreg free
  1173                           
  1174                           ;pictris.c: 132:     initialise_screen();
  1175  002152  EC38  F012         	call	_initialise_screen	;wreg free
  1176                           
  1177                           ;pictris.c: 136:     tetris = choosescreen();
  1178  002156  ECF5  F008         	call	_choosescreen	;wreg free
  1179  00215A  0100               	movlb	0	; () banked
  1180  00215C  6FEE               	movwf	_tetris& (0+255),b	;volatile
  1181                           
  1182                           ; BSR set to: 0
  1183                           ;pictris.c: 139:     rnd_initialize(get_mS());
  1184  00215E  EC21  F012         	call	_get_mS	;wreg free
  1185  002162  500C               	movf	?_get_mS,w,c
  1186  002164  EC17  F012         	call	_rnd_initialize
  1187  002168                     l95:
  1188                           
  1189                           ;pictris.c: 143:         mainGameLoop();
  1190  002168  EC42  F011         	call	_mainGameLoop	;wreg free
  1191  00216C  D7FD               	goto	l95
  1192  00216E                     __end_of_main:
  1193                           	opt callstack 0
  1194                           
  1195 ;; *************** function _start_button *****************
  1196 ;; Defined at:
  1197 ;;		line 14 in file "buttons.c"
  1198 ;; Parameters:    Size  Location     Type
  1199 ;;		None
  1200 ;; Auto vars:     Size  Location     Type
  1201 ;;		None
  1202 ;; Return value:  Size  Location     Type
  1203 ;;                  1    wreg      void 
  1204 ;; Registers used:
  1205 ;;		wreg, status,2
  1206 ;; Tracked objects:
  1207 ;;		On entry : 0/0
  1208 ;;		On exit  : 0/0
  1209 ;;		Unchanged: 0/0
  1210 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1211 ;;      Params:         0       0       0       0       0       0       0
  1212 ;;      Locals:         0       0       0       0       0       0       0
  1213 ;;      Temps:          0       0       0       0       0       0       0
  1214 ;;      Totals:         0       0       0       0       0       0       0
  1215 ;;Total ram usage:        0 bytes
  1216 ;; Hardware stack levels used:    1
  1217 ;; Hardware stack levels required when called:    4
  1218 ;; This function calls:
  1219 ;;		Nothing
  1220 ;; This function is called by:
  1221 ;;		_main
  1222 ;; This function uses a non-reentrant model
  1223 ;;
  1224                           
  1225                           	psect	text1
  1226  0020F0                     __ptext1:
  1227                           	opt callstack 0
  1228  0020F0                     _start_button:
  1229                           	opt callstack 26
  1230                           
  1231                           ;buttons.c: 16:     Left_Delay = -1;
  1232                           
  1233                           ;incstack = 0
  1234  0020F0  0100               	movlb	0	; () banked
  1235  0020F2  69F5               	setf	_Left_Delay& (0+255),b	;volatile
  1236  0020F4  69F6               	setf	(_Left_Delay+1)& (0+255),b	;volatile
  1237                           
  1238                           ; BSR set to: 0
  1239                           ;buttons.c: 17:     Left_Debounced = 0;
  1240  0020F6  0E00               	movlw	0
  1241  0020F8  6E4A               	movwf	_Left_Debounced,c	;volatile
  1242                           
  1243                           ; BSR set to: 0
  1244                           ;buttons.c: 20:     Right_Delay = -1;
  1245  0020FA  69F3               	setf	_Right_Delay& (0+255),b	;volatile
  1246  0020FC  69F4               	setf	(_Right_Delay+1)& (0+255),b	;volatile
  1247                           
  1248                           ;buttons.c: 21:     Right_Debounced = 0;
  1249  0020FE  0E00               	movlw	0
  1250  002100  6E49               	movwf	_Right_Debounced,c	;volatile
  1251                           
  1252                           ; BSR set to: 0
  1253                           ;buttons.c: 24:     Rotate_Delay = -1;
  1254  002102  69F1               	setf	_Rotate_Delay& (0+255),b	;volatile
  1255  002104  69F2               	setf	(_Rotate_Delay+1)& (0+255),b	;volatile
  1256                           
  1257                           ;buttons.c: 25:     Rotate_Debounced = 0;
  1258  002106  0E00               	movlw	0
  1259  002108  6E4B               	movwf	_Rotate_Debounced,c	;volatile
  1260                           
  1261                           ;buttons.c: 29:     Down_Delay = 500;
  1262  00210A  0E01               	movlw	1
  1263  00210C  6FF0               	movwf	(_Down_Delay+1)& (0+255),b	;volatile
  1264  00210E  0EF4               	movlw	244
  1265  002110  6FEF               	movwf	_Down_Delay& (0+255),b	;volatile
  1266                           
  1267                           ;buttons.c: 30:     Down_Debounced = 0;
  1268  002112  0E00               	movlw	0
  1269  002114  6E48               	movwf	_Down_Debounced,c	;volatile
  1270                           
  1271                           ;buttons.c: 31:     mtxButtons = 1;
  1272  002116  0E01               	movlw	1
  1273  002118  6FED               	movwf	_mtxButtons& (0+255),b	;volatile
  1274                           
  1275                           ; BSR set to: 0
  1276  00211A  0012               	return		;funcret
  1277  00211C                     __end_of_start_button:
  1278                           	opt callstack 0
  1279                           
  1280 ;; *************** function _rnd_initialize *****************
  1281 ;; Defined at:
  1282 ;;		line 34 in file "randgen.c"
  1283 ;; Parameters:    Size  Location     Type
  1284 ;;  input           1    wreg     unsigned char 
  1285 ;; Auto vars:     Size  Location     Type
  1286 ;;  input           1   11[COMRAM] unsigned char 
  1287 ;; Return value:  Size  Location     Type
  1288 ;;                  1    wreg      void 
  1289 ;; Registers used:
  1290 ;;		wreg
  1291 ;; Tracked objects:
  1292 ;;		On entry : 0/0
  1293 ;;		On exit  : 0/0
  1294 ;;		Unchanged: 0/0
  1295 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1296 ;;      Params:         0       0       0       0       0       0       0
  1297 ;;      Locals:         1       0       0       0       0       0       0
  1298 ;;      Temps:          0       0       0       0       0       0       0
  1299 ;;      Totals:         1       0       0       0       0       0       0
  1300 ;;Total ram usage:        1 bytes
  1301 ;; Hardware stack levels used:    1
  1302 ;; Hardware stack levels required when called:    4
  1303 ;; This function calls:
  1304 ;;		Nothing
  1305 ;; This function is called by:
  1306 ;;		_main
  1307 ;; This function uses a non-reentrant model
  1308 ;;
  1309                           
  1310                           	psect	text2
  1311  00242E                     __ptext2:
  1312                           	opt callstack 0
  1313  00242E                     _rnd_initialize:
  1314                           	opt callstack 26
  1315                           
  1316                           ; BSR set to: 0
  1317                           ;incstack = 0
  1318                           ;rnd_initialize@input stored from wreg
  1319  00242E  6E0C               	movwf	rnd_initialize@input,c
  1320                           
  1321                           ;randgen.c: 34: void rnd_initialize(uint8_t input);randgen.c: 35: {;randgen.c: 39:     _
      +                          lfsr = input;
  1322  002430  C00C  F04E         	movff	rnd_initialize@input,__lfsr
  1323  002434  6A4F               	clrf	__lfsr+1,c
  1324  002436  0012               	return		;funcret
  1325  002438                     __end_of_rnd_initialize:
  1326                           	opt callstack 0
  1327                           
  1328 ;; *************** function _mainGameLoop *****************
  1329 ;; Defined at:
  1330 ;;		line 111 in file "pictris.c"
  1331 ;; Parameters:    Size  Location     Type
  1332 ;;		None
  1333 ;; Auto vars:     Size  Location     Type
  1334 ;;		None
  1335 ;; Return value:  Size  Location     Type
  1336 ;;                  1    wreg      void 
  1337 ;; Registers used:
  1338 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1339 ;; Tracked objects:
  1340 ;;		On entry : 0/0
  1341 ;;		On exit  : 0/0
  1342 ;;		Unchanged: 0/0
  1343 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1344 ;;      Params:         0       0       0       0       0       0       0
  1345 ;;      Locals:         0       0       0       0       0       0       0
  1346 ;;      Temps:          0       0       0       0       0       0       0
  1347 ;;      Totals:         0       0       0       0       0       0       0
  1348 ;;Total ram usage:        0 bytes
  1349 ;; Hardware stack levels used:    1
  1350 ;; Hardware stack levels required when called:   10
  1351 ;; This function calls:
  1352 ;;		_initialise_globals
  1353 ;;		_pauseMultiplexing
  1354 ;;		_resumeMultiplexing
  1355 ;;		_snake_main
  1356 ;;		_tetris_main
  1357 ;; This function is called by:
  1358 ;;		_main
  1359 ;; This function uses a non-reentrant model
  1360 ;;
  1361                           
  1362                           	psect	text3
  1363  002284                     __ptext3:
  1364                           	opt callstack 0
  1365  002284                     _mainGameLoop:
  1366                           	opt callstack 20
  1367                           
  1368                           ;pictris.c: 114:     pauseMultiplexing();
  1369                           
  1370                           ;incstack = 0
  1371  002284  ECC1  F011         	call	_pauseMultiplexing	;wreg free
  1372                           
  1373                           ;pictris.c: 115:     initialise_globals();
  1374  002288  ECE9  F011         	call	_initialise_globals	;wreg free
  1375                           
  1376                           ;pictris.c: 116:     resumeMultiplexing();
  1377  00228C  EC3C  F012         	call	_resumeMultiplexing	;wreg free
  1378                           
  1379                           ;pictris.c: 117:     if (tetris){
  1380  002290  0100               	movlb	0	; () banked
  1381  002292  51EE               	movf	_tetris& (0+255),w,b	;volatile
  1382  002294  B4D8               	btfsc	status,2,c
  1383  002296  D003               	goto	l5274
  1384                           
  1385                           ; BSR set to: 0
  1386                           ;pictris.c: 118:        tetris_main();
  1387  002298  EC77  F009         	call	_tetris_main	;wreg free
  1388                           
  1389                           ;pictris.c: 119:     }
  1390  00229C  0012               	return	
  1391  00229E                     l5274:
  1392                           
  1393                           ; BSR set to: 0
  1394                           ;pictris.c: 121:        snake_main();
  1395  00229E  EC31  F00F         	call	_snake_main	;wreg free
  1396  0022A2  0012               	return		;funcret
  1397  0022A4                     __end_of_mainGameLoop:
  1398                           	opt callstack 0
  1399                           
  1400 ;; *************** function _tetris_main *****************
  1401 ;; Defined at:
  1402 ;;		line 371 in file "tetris.c"
  1403 ;; Parameters:    Size  Location     Type
  1404 ;;		None
  1405 ;; Auto vars:     Size  Location     Type
  1406 ;;  newScreen       1   50[COMRAM] _Bool 
  1407 ;;  LastHighScor    1   49[COMRAM] unsigned char 
  1408 ;; Return value:  Size  Location     Type
  1409 ;;                  1    wreg      void 
  1410 ;; Registers used:
  1411 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1412 ;; Tracked objects:
  1413 ;;		On entry : 0/0
  1414 ;;		On exit  : 0/0
  1415 ;;		Unchanged: 0/0
  1416 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1417 ;;      Params:         0       0       0       0       0       0       0
  1418 ;;      Locals:         5       0       0       0       0       0       0
  1419 ;;      Temps:          0       0       0       0       0       0       0
  1420 ;;      Totals:         5       0       0       0       0       0       0
  1421 ;;Total ram usage:        5 bytes
  1422 ;; Hardware stack levels used:    1
  1423 ;; Hardware stack levels required when called:    9
  1424 ;; This function calls:
  1425 ;;		_checkForLines
  1426 ;;		_initialise_tetris
  1427 ;;		_mergeObjects
  1428 ;;		_moveObjectDown
  1429 ;;		_readHighScore
  1430 ;;		_selectNextObject
  1431 ;;		_set_screen
  1432 ;;		_show_score
  1433 ;;		_tetris_buttons
  1434 ;;		_tetris_screen
  1435 ;;		_writeHighScore
  1436 ;; This function is called by:
  1437 ;;		_mainGameLoop
  1438 ;; This function uses a non-reentrant model
  1439 ;;
  1440                           
  1441                           	psect	text4
  1442  0012EE                     __ptext4:
  1443                           	opt callstack 0
  1444  0012EE                     _tetris_main:
  1445                           	opt callstack 20
  1446                           
  1447                           ;tetris.c: 372:     initialise_tetris();
  1448                           
  1449                           ;incstack = 0
  1450  0012EE  EC24  F00E         	call	_initialise_tetris	;wreg free
  1451                           
  1452                           ;tetris.c: 373:     tetris_screen();
  1453  0012F2  EC6F  F011         	call	_tetris_screen	;wreg free
  1454                           
  1455                           ;tetris.c: 374:     uint8_t LastHighScore = readHighScore(0);
  1456  0012F6  0E00               	movlw	0
  1457  0012F8  ECF3  F010         	call	_readHighScore
  1458  0012FC  6E32               	movwf	tetris_main@LastHighScore,c
  1459                           
  1460                           ;tetris.c: 375:     show_score(LastHighScore);
  1461  0012FE  5032               	movf	tetris_main@LastHighScore,w,c
  1462  001300  EC0C  F005         	call	_show_score
  1463                           
  1464                           ;tetris.c: 376:     selectNextObject(ObjectData);
  1465  001304  0ECC               	movlw	low _ObjectData
  1466  001306  6E16               	movwf	selectNextObject@pTarget,c
  1467  001308  0E00               	movlw	high _ObjectData
  1468  00130A  6E17               	movwf	selectNextObject@pTarget+1,c
  1469  00130C  EC4D  F006         	call	_selectNextObject	;wreg free
  1470                           
  1471                           ;tetris.c: 377:     set_screen(ObjectData);
  1472  001310  0ECC               	movlw	low _ObjectData
  1473  001312  6E13               	movwf	set_screen@newData,c
  1474  001314  0E00               	movlw	high _ObjectData
  1475  001316  6E14               	movwf	set_screen@newData+1,c
  1476  001318  ECBF  F00D         	call	_set_screen	;wreg free
  1477  00131C                     l5204:
  1478                           
  1479                           ;tetris.c: 379:         _Bool newScreen;;tetris.c: 380:         newScreen = tetris_butto
      +                          ns() || newScreen;
  1480  00131C  0E01               	movlw	1
  1481  00131E  6E2F               	movwf	_tetris_main$627,c
  1482  001320  ECB2  F00E         	call	_tetris_buttons	;wreg free
  1483  001324  0900               	iorlw	0
  1484  001326  A4D8               	btfss	status,2,c
  1485  001328  D005               	goto	l340
  1486  00132A  5033               	movf	tetris_main@newScreen,w,c
  1487  00132C  A4D8               	btfss	status,2,c
  1488  00132E  D002               	goto	l340
  1489  001330  0E00               	movlw	0
  1490  001332  6E2F               	movwf	_tetris_main$627,c
  1491  001334                     l340:
  1492  001334  502F               	movf	_tetris_main$627,w,c
  1493  001336  B4D8               	btfsc	status,2,c
  1494  001338  D002               	goto	u4910
  1495  00133A  0E01               	movlw	1
  1496  00133C  D001               	goto	u4920
  1497  00133E                     u4910:
  1498  00133E  0E00               	movlw	0
  1499  001340                     u4920:
  1500  001340  6E33               	movwf	tetris_main@newScreen,c
  1501                           
  1502                           ;tetris.c: 381:         if (DropObject)
  1503  001342  503F               	movf	_DropObject,w,c	;volatile
  1504  001344  B4D8               	btfsc	status,2,c
  1505  001346  D00A               	goto	l341
  1506                           
  1507                           ;tetris.c: 382:         {;tetris.c: 383:             DropObject = 0;
  1508  001348  0E00               	movlw	0
  1509  00134A  6E3F               	movwf	_DropObject,c	;volatile
  1510                           
  1511                           ;tetris.c: 384:             moveObjectDown(ObjectData);
  1512  00134C  0ECC               	movlw	low _ObjectData
  1513  00134E  6E25               	movwf	moveObjectDown@pObject,c
  1514  001350  0E00               	movlw	high _ObjectData
  1515  001352  6E26               	movwf	moveObjectDown@pObject+1,c
  1516  001354  ECEA  F009         	call	_moveObjectDown	;wreg free
  1517  001358  0E01               	movlw	1
  1518  00135A  6E33               	movwf	tetris_main@newScreen,c
  1519  00135C                     l341:
  1520                           
  1521                           ;tetris.c: 387:         if (CheckForNewLines)
  1522  00135C  5041               	movf	_CheckForNewLines,w,c
  1523  00135E  B4D8               	btfsc	status,2,c
  1524  001360  D008               	goto	l344
  1525                           
  1526                           ;tetris.c: 388:         {;tetris.c: 389:             checkForLines(BackgroundData);
  1527  001362  0EBC               	movlw	low _BackgroundData
  1528  001364  6E23               	movwf	checkForLines@pObject,c
  1529  001366  0E00               	movlw	high _BackgroundData
  1530  001368  6E24               	movwf	checkForLines@pObject+1,c
  1531  00136A  ECA3  F00B         	call	_checkForLines	;wreg free
  1532  00136E  0E01               	movlw	1
  1533  001370  6E33               	movwf	tetris_main@newScreen,c
  1534  001372                     l344:
  1535                           
  1536                           ;tetris.c: 392:         if (newScreen)
  1537  001372  5033               	movf	tetris_main@newScreen,w,c
  1538  001374  B4D8               	btfsc	status,2,c
  1539  001376  D020               	goto	l5238
  1540                           
  1541                           ;tetris.c: 393:         {;tetris.c: 394:             mergeObjects(BackgroundData, Screen
      +                          _Data, OVERRIDE);
  1542  001378  0EBC               	movlw	low _BackgroundData
  1543  00137A  6E0C               	movwf	mergeObjects@pSource,c
  1544  00137C  0E00               	movlw	high _BackgroundData
  1545  00137E  6E0D               	movwf	mergeObjects@pSource+1,c
  1546  001380  0EAC               	movlw	low _Screen_Data
  1547  001382  6E0E               	movwf	mergeObjects@pTarget,c
  1548  001384  0E00               	movlw	high _Screen_Data
  1549  001386  6E0F               	movwf	mergeObjects@pTarget+1,c
  1550  001388  0E00               	movlw	0
  1551  00138A  6E10               	movwf	mergeObjects@mode,c
  1552  00138C  ECEE  F007         	call	_mergeObjects	;wreg free
  1553                           
  1554                           ;tetris.c: 395:             mergeObjects(ObjectData, Screen_Data, MERGE);
  1555  001390  0ECC               	movlw	low _ObjectData
  1556  001392  6E0C               	movwf	mergeObjects@pSource,c
  1557  001394  0E00               	movlw	high _ObjectData
  1558  001396  6E0D               	movwf	mergeObjects@pSource+1,c
  1559  001398  0EAC               	movlw	low _Screen_Data
  1560  00139A  6E0E               	movwf	mergeObjects@pTarget,c
  1561  00139C  0E00               	movlw	high _Screen_Data
  1562  00139E  6E0F               	movwf	mergeObjects@pTarget+1,c
  1563  0013A0  0E01               	movlw	1
  1564  0013A2  6E10               	movwf	mergeObjects@mode,c
  1565  0013A4  ECEE  F007         	call	_mergeObjects	;wreg free
  1566                           
  1567                           ;tetris.c: 396:             set_screen(Screen_Data);
  1568  0013A8  0EAC               	movlw	low _Screen_Data
  1569  0013AA  6E13               	movwf	set_screen@newData,c
  1570  0013AC  0E00               	movlw	high _Screen_Data
  1571  0013AE  6E14               	movwf	set_screen@newData+1,c
  1572  0013B0  ECBF  F00D         	call	_set_screen	;wreg free
  1573                           
  1574                           ;tetris.c: 397:             newScreen = 0;
  1575  0013B4  0E00               	movlw	0
  1576  0013B6  6E33               	movwf	tetris_main@newScreen,c
  1577  0013B8                     l5238:
  1578                           
  1579                           ;tetris.c: 399:     } while (!EndOfGame);
  1580  0013B8  503E               	movf	_EndOfGame,w,c	;volatile
  1581  0013BA  B4D8               	btfsc	status,2,c
  1582  0013BC  D7AF               	goto	l5204
  1583                           
  1584                           ;tetris.c: 400:     writeHighScore(0, LastHighScore, NumberOfLines);
  1585  0013BE  C032  F00E         	movff	tetris_main@LastHighScore,writeHighScore@highscore
  1586  0013C2  C043  F00F         	movff	_NumberOfLines,writeHighScore@scored
  1587  0013C6  0E00               	movlw	0
  1588  0013C8  ECAC  F011         	call	_writeHighScore
  1589                           
  1590                           ;tetris.c: 401:     show_score(NumberOfLines);
  1591  0013CC  5043               	movf	_NumberOfLines,w,c
  1592  0013CE  EC0C  F005         	call	_show_score
  1593  0013D2  0012               	return		;funcret
  1594  0013D4                     __end_of_tetris_main:
  1595                           	opt callstack 0
  1596                           
  1597 ;; *************** function _tetris_screen *****************
  1598 ;; Defined at:
  1599 ;;		line 48 in file "tetris.c"
  1600 ;; Parameters:    Size  Location     Type
  1601 ;;		None
  1602 ;; Auto vars:     Size  Location     Type
  1603 ;;		None
  1604 ;; Return value:  Size  Location     Type
  1605 ;;                  1    wreg      void 
  1606 ;; Registers used:
  1607 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1608 ;; Tracked objects:
  1609 ;;		On entry : 0/0
  1610 ;;		On exit  : 0/0
  1611 ;;		Unchanged: 0/0
  1612 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1613 ;;      Params:         0       0       0       0       0       0       0
  1614 ;;      Locals:         0       0       0       0       0       0       0
  1615 ;;      Temps:          0       0       0       0       0       0       0
  1616 ;;      Totals:         0       0       0       0       0       0       0
  1617 ;;Total ram usage:        0 bytes
  1618 ;; Hardware stack levels used:    1
  1619 ;; Hardware stack levels required when called:    7
  1620 ;; This function calls:
  1621 ;;		_set_splashscreen
  1622 ;;		_waitms
  1623 ;; This function is called by:
  1624 ;;		_tetris_main
  1625 ;; This function uses a non-reentrant model
  1626 ;;
  1627                           
  1628                           	psect	text5
  1629  0022DE                     __ptext5:
  1630                           	opt callstack 0
  1631  0022DE                     _tetris_screen:
  1632                           	opt callstack 21
  1633                           
  1634                           ;tetris.c: 50:     set_splashscreen(TETRIS);
  1635                           
  1636                           ;incstack = 0
  1637  0022DE  0EE1               	movlw	low _TETRIS
  1638  0022E0  6E13               	movwf	set_splashscreen@newData,c
  1639  0022E2  0E06               	movlw	high _TETRIS
  1640  0022E4  6E14               	movwf	set_splashscreen@newData+1,c
  1641  0022E6  EC66  F00C         	call	_set_splashscreen	;wreg free
  1642                           
  1643                           ;tetris.c: 51:     waitms(3500);
  1644  0022EA  0E0D               	movlw	13
  1645  0022EC  6E0D               	movwf	waitms@t+1,c
  1646  0022EE  0EAC               	movlw	172
  1647  0022F0  6E0C               	movwf	waitms@t,c
  1648  0022F2  ECB7  F011         	call	_waitms	;wreg free
  1649  0022F6  0012               	return		;funcret
  1650  0022F8                     __end_of_tetris_screen:
  1651                           	opt callstack 0
  1652                           
  1653 ;; *************** function _tetris_buttons *****************
  1654 ;; Defined at:
  1655 ;;		line 361 in file "tetris.c"
  1656 ;; Parameters:    Size  Location     Type
  1657 ;;		None
  1658 ;; Auto vars:     Size  Location     Type
  1659 ;;  returnbool      1   39[COMRAM] _Bool 
  1660 ;; Return value:  Size  Location     Type
  1661 ;;                  1    wreg      _Bool 
  1662 ;; Registers used:
  1663 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1664 ;; Tracked objects:
  1665 ;;		On entry : 0/0
  1666 ;;		On exit  : 0/0
  1667 ;;		Unchanged: 0/0
  1668 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1669 ;;      Params:         0       0       0       0       0       0       0
  1670 ;;      Locals:         1       0       0       0       0       0       0
  1671 ;;      Temps:          0       0       0       0       0       0       0
  1672 ;;      Totals:         1       0       0       0       0       0       0
  1673 ;;Total ram usage:        1 bytes
  1674 ;; Hardware stack levels used:    1
  1675 ;; Hardware stack levels required when called:    8
  1676 ;; This function calls:
  1677 ;;		_checkDown
  1678 ;;		_checkLeft
  1679 ;;		_checkRight
  1680 ;;		_checkUp
  1681 ;;		_tetris_button_down
  1682 ;;		_tetris_button_left
  1683 ;;		_tetris_button_right
  1684 ;;		_tetris_button_up
  1685 ;; This function is called by:
  1686 ;;		_tetris_main
  1687 ;; This function uses a non-reentrant model
  1688 ;;
  1689                           
  1690                           	psect	text6
  1691  001D64                     __ptext6:
  1692                           	opt callstack 0
  1693  001D64                     _tetris_buttons:
  1694                           	opt callstack 20
  1695                           
  1696                           ;tetris.c: 363:     _Bool returnbool = 0;
  1697                           
  1698                           ;incstack = 0
  1699  001D64  0E00               	movlw	0
  1700  001D66  6E28               	movwf	tetris_buttons@returnbool,c
  1701                           
  1702                           ;tetris.c: 364:     if(checkLeft(1)){ tetris_button_left(); returnbool = 1; }
  1703  001D68  0E01               	movlw	1
  1704  001D6A  ECCB  F010         	call	_checkLeft
  1705  001D6E  0900               	iorlw	0
  1706  001D70  B4D8               	btfsc	status,2,c
  1707  001D72  D004               	goto	l5010
  1708  001D74  EC98  F00A         	call	_tetris_button_left	;wreg free
  1709  001D78  0E01               	movlw	1
  1710  001D7A  6E28               	movwf	tetris_buttons@returnbool,c
  1711  001D7C                     l5010:
  1712                           
  1713                           ;tetris.c: 365:     if(checkRight(1)){ tetris_button_right(); returnbool = 1; }
  1714  001D7C  0E01               	movlw	1
  1715  001D7E  ECB7  F010         	call	_checkRight
  1716  001D82  0900               	iorlw	0
  1717  001D84  B4D8               	btfsc	status,2,c
  1718  001D86  D004               	goto	l5016
  1719  001D88  EC1F  F00B         	call	_tetris_button_right	;wreg free
  1720  001D8C  0E01               	movlw	1
  1721  001D8E  6E28               	movwf	tetris_buttons@returnbool,c
  1722  001D90                     l5016:
  1723                           
  1724                           ;tetris.c: 366:     if(checkUp(1)){ tetris_button_up(); returnbool = 1; }
  1725  001D90  0E01               	movlw	1
  1726  001D92  EC07  F011         	call	_checkUp
  1727  001D96  0900               	iorlw	0
  1728  001D98  B4D8               	btfsc	status,2,c
  1729  001D9A  D004               	goto	l5022
  1730  001D9C  EC54  F00A         	call	_tetris_button_up	;wreg free
  1731  001DA0  0E01               	movlw	1
  1732  001DA2  6E28               	movwf	tetris_buttons@returnbool,c
  1733  001DA4                     l5022:
  1734                           
  1735                           ;tetris.c: 367:     if(checkDown(1)){ tetris_button_down(); returnbool = 1; }
  1736  001DA4  0E01               	movlw	1
  1737  001DA6  EC1B  F011         	call	_checkDown
  1738  001DAA  0900               	iorlw	0
  1739  001DAC  B4D8               	btfsc	status,2,c
  1740  001DAE  D004               	goto	l5028
  1741  001DB0  ECA1  F011         	call	_tetris_button_down	;wreg free
  1742  001DB4  0E01               	movlw	1
  1743  001DB6  6E28               	movwf	tetris_buttons@returnbool,c
  1744  001DB8                     l5028:
  1745                           
  1746                           ;tetris.c: 368:     return returnbool;
  1747  001DB8  5028               	movf	tetris_buttons@returnbool,w,c
  1748  001DBA  0012               	return		;funcret
  1749  001DBC                     __end_of_tetris_buttons:
  1750                           	opt callstack 0
  1751                           
  1752 ;; *************** function _tetris_button_up *****************
  1753 ;; Defined at:
  1754 ;;		line 307 in file "tetris.c"
  1755 ;; Parameters:    Size  Location     Type
  1756 ;;		None
  1757 ;; Auto vars:     Size  Location     Type
  1758 ;;		None
  1759 ;; Return value:  Size  Location     Type
  1760 ;;                  1    wreg      _Bool 
  1761 ;; Registers used:
  1762 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1763 ;; Tracked objects:
  1764 ;;		On entry : 0/0
  1765 ;;		On exit  : 0/0
  1766 ;;		Unchanged: 0/0
  1767 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1768 ;;      Params:         0       0       0       0       0       0       0
  1769 ;;      Locals:         0       0       0       0       0       0       0
  1770 ;;      Temps:          1       0       0       0       0       0       0
  1771 ;;      Totals:         1       0       0       0       0       0       0
  1772 ;;Total ram usage:        1 bytes
  1773 ;; Hardware stack levels used:    1
  1774 ;; Hardware stack levels required when called:    6
  1775 ;; This function calls:
  1776 ;;		_collisionDetect
  1777 ;;		_mergeObjects
  1778 ;;		_newRotation
  1779 ;;		_pauseMultiplexing
  1780 ;;		_pixelCount
  1781 ;;		_resumeMultiplexing
  1782 ;; This function is called by:
  1783 ;;		_tetris_buttons
  1784 ;; This function uses a non-reentrant model
  1785 ;;
  1786                           
  1787                           	psect	text7
  1788  0014A8                     __ptext7:
  1789                           	opt callstack 0
  1790  0014A8                     _tetris_button_up:
  1791                           	opt callstack 21
  1792                           
  1793                           ;tetris.c: 308:     if (game)
  1794                           
  1795                           ;incstack = 0
  1796  0014A8  503B               	movf	_game,w,c	;volatile
  1797  0014AA  B4D8               	btfsc	status,2,c
  1798  0014AC  0012               	return	
  1799                           
  1800                           ;tetris.c: 309:     {;tetris.c: 310:         newRotation(ObjectData, tmpObjectData, CW);
  1801  0014AE  0ECC               	movlw	low _ObjectData
  1802  0014B0  6E16               	movwf	newRotation@pSource,c
  1803  0014B2  0E00               	movlw	high _ObjectData
  1804  0014B4  6E17               	movwf	newRotation@pSource+1,c
  1805  0014B6  0E9C               	movlw	low _tmpObjectData
  1806  0014B8  6E18               	movwf	newRotation@pTarget,c
  1807  0014BA  0E00               	movlw	high _tmpObjectData
  1808  0014BC  6E19               	movwf	newRotation@pTarget+1,c
  1809  0014BE  0E01               	movlw	1
  1810  0014C0  6E1A               	movwf	newRotation@rotation,c
  1811  0014C2  ECB5  F005         	call	_newRotation	;wreg free
  1812                           
  1813                           ;tetris.c: 312:         if (pixelCount(ObjectData) == pixelCount(tmpObjectData))
  1814  0014C6  0ECC               	movlw	low _ObjectData
  1815  0014C8  6E0C               	movwf	pixelCount@pSource,c
  1816  0014CA  0E00               	movlw	high _ObjectData
  1817  0014CC  6E0D               	movwf	pixelCount@pSource+1,c
  1818  0014CE  EC8A  F00D         	call	_pixelCount	;wreg free
  1819  0014D2  6E26               	movwf	??_tetris_button_up& (0+255),c
  1820  0014D4  0E9C               	movlw	low _tmpObjectData
  1821  0014D6  6E0C               	movwf	pixelCount@pSource,c
  1822  0014D8  0E00               	movlw	high _tmpObjectData
  1823  0014DA  6E0D               	movwf	pixelCount@pSource+1,c
  1824  0014DC  EC8A  F00D         	call	_pixelCount	;wreg free
  1825  0014E0  1826               	xorwf	??_tetris_button_up,w,c
  1826  0014E2  A4D8               	btfss	status,2,c
  1827  0014E4  0012               	return	
  1828                           
  1829                           ;tetris.c: 313:         {;tetris.c: 315:             if (!collisionDetect(tmpObjectData,
      +                           BackgroundData))
  1830  0014E6  0E9C               	movlw	low _tmpObjectData
  1831  0014E8  6E0C               	movwf	collisionDetect@pSource,c
  1832  0014EA  0E00               	movlw	high _tmpObjectData
  1833  0014EC  6E0D               	movwf	collisionDetect@pSource+1,c
  1834  0014EE  0EBC               	movlw	low _BackgroundData
  1835  0014F0  6E0E               	movwf	collisionDetect@pTarget,c
  1836  0014F2  0E00               	movlw	high _BackgroundData
  1837  0014F4  6E0F               	movwf	collisionDetect@pTarget+1,c
  1838  0014F6  ECF2  F00D         	call	_collisionDetect	;wreg free
  1839  0014FA  0900               	iorlw	0
  1840  0014FC  A4D8               	btfss	status,2,c
  1841  0014FE  0012               	return	
  1842                           
  1843                           ;tetris.c: 316:             {;tetris.c: 319:                 pauseMultiplexing();
  1844  001500  ECC1  F011         	call	_pauseMultiplexing	;wreg free
  1845                           
  1846                           ;tetris.c: 321:                 mergeObjects(tmpObjectData, ObjectData, OVERRIDE);
  1847  001504  0E9C               	movlw	low _tmpObjectData
  1848  001506  6E0C               	movwf	mergeObjects@pSource,c
  1849  001508  0E00               	movlw	high _tmpObjectData
  1850  00150A  6E0D               	movwf	mergeObjects@pSource+1,c
  1851  00150C  0ECC               	movlw	low _ObjectData
  1852  00150E  6E0E               	movwf	mergeObjects@pTarget,c
  1853  001510  0E00               	movlw	high _ObjectData
  1854  001512  6E0F               	movwf	mergeObjects@pTarget+1,c
  1855  001514  0E00               	movlw	0
  1856  001516  6E10               	movwf	mergeObjects@mode,c
  1857  001518  ECEE  F007         	call	_mergeObjects	;wreg free
  1858                           
  1859                           ;tetris.c: 322:                 resumeMultiplexing();
  1860  00151C  EC3C  F012         	call	_resumeMultiplexing	;wreg free
  1861                           
  1862                           ;tetris.c: 323:                 IsRotated = !IsRotated;
  1863  001520  5042               	movf	_IsRotated,w,c
  1864  001522  A4D8               	btfss	status,2,c
  1865  001524  D002               	goto	u4440
  1866  001526  0E01               	movlw	1
  1867  001528  D001               	goto	u4450
  1868  00152A                     u4440:
  1869  00152A  0E00               	movlw	0
  1870  00152C                     u4450:
  1871  00152C  6E42               	movwf	_IsRotated,c
  1872  00152E  0012               	return	
  1873  001530                     __end_of_tetris_button_up:
  1874                           	opt callstack 0
  1875                           
  1876 ;; *************** function _pixelCount *****************
  1877 ;; Defined at:
  1878 ;;		line 166 in file "shared_logic.c"
  1879 ;; Parameters:    Size  Location     Type
  1880 ;;  pSource         2   11[COMRAM] PTR volatile unsigned sh
  1881 ;;		 -> tmpObjectData(16), ObjectData(16), 
  1882 ;; Auto vars:     Size  Location     Type
  1883 ;;  y               1   22[COMRAM] unsigned char 
  1884 ;;  x               1   21[COMRAM] unsigned char 
  1885 ;;  r               1   20[COMRAM] unsigned char 
  1886 ;; Return value:  Size  Location     Type
  1887 ;;                  1    wreg      unsigned char 
  1888 ;; Registers used:
  1889 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  1890 ;; Tracked objects:
  1891 ;;		On entry : 0/0
  1892 ;;		On exit  : 0/0
  1893 ;;		Unchanged: 0/0
  1894 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1895 ;;      Params:         2       0       0       0       0       0       0
  1896 ;;      Locals:         3       0       0       0       0       0       0
  1897 ;;      Temps:          7       0       0       0       0       0       0
  1898 ;;      Totals:        12       0       0       0       0       0       0
  1899 ;;Total ram usage:       12 bytes
  1900 ;; Hardware stack levels used:    1
  1901 ;; Hardware stack levels required when called:    4
  1902 ;; This function calls:
  1903 ;;		Nothing
  1904 ;; This function is called by:
  1905 ;;		_tetris_button_up
  1906 ;; This function uses a non-reentrant model
  1907 ;;
  1908                           
  1909                           	psect	text8
  1910  001B14                     __ptext8:
  1911                           	opt callstack 0
  1912  001B14                     _pixelCount:
  1913                           	opt callstack 22
  1914                           
  1915                           ;shared_logic.c: 166: uint8_t pixelCount(volatile uint16_t * pSource);shared_logic.c: 16
      +                          7: {;shared_logic.c: 168:     uint8_t r = 0, x, y;
  1916                           
  1917                           ;incstack = 0
  1918  001B14  0E00               	movlw	0
  1919  001B16  6E15               	movwf	pixelCount@r,c
  1920                           
  1921                           ;shared_logic.c: 170:     for (x = 0; x < 8; x++)
  1922  001B18  0E00               	movlw	0
  1923  001B1A  6E16               	movwf	pixelCount@x,c
  1924  001B1C                     l3346:
  1925                           
  1926                           ;shared_logic.c: 171:         for (y = 0; y < 16; y++)
  1927  001B1C  0E00               	movlw	0
  1928  001B1E  6E17               	movwf	pixelCount@y,c
  1929  001B20                     l3352:
  1930                           
  1931                           ;shared_logic.c: 172:             if (pSource[x] & (1<<y))
  1932  001B20  5016               	movf	pixelCount@x,w,c
  1933  001B22  0D02               	mullw	2
  1934  001B24  CFF3 F00E          	movff	prodl,??_pixelCount
  1935  001B28  CFF4 F00F          	movff	prodh,??_pixelCount+1
  1936  001B2C  500E               	movf	??_pixelCount,w,c
  1937  001B2E  240C               	addwf	pixelCount@pSource,w,c
  1938  001B30  6ED9               	movwf	fsr2l,c
  1939  001B32  500F               	movf	??_pixelCount+1,w,c
  1940  001B34  200D               	addwfc	pixelCount@pSource+1,w,c
  1941  001B36  6EDA               	movwf	fsr2h,c
  1942  001B38  CFDE F010          	movff	postinc2,??_pixelCount+2
  1943  001B3C  CFDD F011          	movff	postdec2,??_pixelCount+3
  1944  001B40  C017  F012         	movff	pixelCount@y,??_pixelCount+4
  1945  001B44  0E01               	movlw	1
  1946  001B46  6E13               	movwf	(??_pixelCount+5)& (0+255),c
  1947  001B48  0E00               	movlw	0
  1948  001B4A  6E14               	movwf	(??_pixelCount+6)& (0+255),c
  1949  001B4C  2A12               	incf	??_pixelCount+4,f,c
  1950  001B4E  D003               	goto	u2434
  1951  001B50                     u2435:
  1952  001B50  90D8               	bcf	status,0,c
  1953  001B52  3613               	rlcf	??_pixelCount+5,f,c
  1954  001B54  3614               	rlcf	??_pixelCount+6,f,c
  1955  001B56                     u2434:
  1956  001B56  2E12               	decfsz	??_pixelCount+4,f,c
  1957  001B58  D7FB               	goto	u2435
  1958  001B5A  5010               	movf	??_pixelCount+2,w,c
  1959  001B5C  1613               	andwf	??_pixelCount+5,f,c
  1960  001B5E  5011               	movf	??_pixelCount+3,w,c
  1961  001B60  1614               	andwf	??_pixelCount+6,f,c
  1962  001B62  5013               	movf	??_pixelCount+5,w,c
  1963  001B64  1014               	iorwf	??_pixelCount+6,w,c
  1964  001B66  A4D8               	btfss	status,2,c
  1965                           
  1966                           ;shared_logic.c: 173:                 r++;
  1967  001B68  2A15               	incf	pixelCount@r,f,c
  1968  001B6A  2A17               	incf	pixelCount@y,f,c
  1969  001B6C  0E0F               	movlw	15
  1970  001B6E  6417               	cpfsgt	pixelCount@y,c
  1971  001B70  D7D7               	goto	l3352
  1972  001B72  2A16               	incf	pixelCount@x,f,c
  1973  001B74  0E07               	movlw	7
  1974  001B76  6416               	cpfsgt	pixelCount@x,c
  1975  001B78  D7D1               	goto	l3346
  1976                           
  1977                           ;shared_logic.c: 174:     return r;
  1978  001B7A  5015               	movf	pixelCount@r,w,c
  1979  001B7C  0012               	return		;funcret
  1980  001B7E                     __end_of_pixelCount:
  1981                           	opt callstack 0
  1982                           
  1983 ;; *************** function _newRotation *****************
  1984 ;; Defined at:
  1985 ;;		line 155 in file "tetris.c"
  1986 ;; Parameters:    Size  Location     Type
  1987 ;;  pSource         2   21[COMRAM] PTR volatile unsigned sh
  1988 ;;		 -> ObjectData(16), 
  1989 ;;  pTarget         2   23[COMRAM] PTR unsigned short 
  1990 ;;		 -> tmpObjectData(16), 
  1991 ;;  rotation        1   25[COMRAM] enum E2586
  1992 ;; Auto vars:     Size  Location     Type
  1993 ;;  y1              1   36[COMRAM] unsigned char 
  1994 ;;  x1              1   35[COMRAM] unsigned char 
  1995 ;;  y2              1   34[COMRAM] char 
  1996 ;;  x2              1   33[COMRAM] char 
  1997 ;; Return value:  Size  Location     Type
  1998 ;;                  1    wreg      void 
  1999 ;; Registers used:
  2000 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2001 ;; Tracked objects:
  2002 ;;		On entry : 0/0
  2003 ;;		On exit  : 0/0
  2004 ;;		Unchanged: 0/0
  2005 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2006 ;;      Params:         5       0       0       0       0       0       0
  2007 ;;      Locals:         4       0       0       0       0       0       0
  2008 ;;      Temps:          7       0       0       0       0       0       0
  2009 ;;      Totals:        16       0       0       0       0       0       0
  2010 ;;Total ram usage:       16 bytes
  2011 ;; Hardware stack levels used:    1
  2012 ;; Hardware stack levels required when called:    5
  2013 ;; This function calls:
  2014 ;;		___wmul
  2015 ;;		_clearArray
  2016 ;;		_memcpyvol
  2017 ;; This function is called by:
  2018 ;;		_tetris_button_up
  2019 ;; This function uses a non-reentrant model
  2020 ;;
  2021                           
  2022                           	psect	text9
  2023  000B6A                     __ptext9:
  2024                           	opt callstack 0
  2025  000B6A                     _newRotation:
  2026                           	opt callstack 21
  2027                           
  2028                           ;tetris.c: 155: void newRotation(volatile uint16_t * pSource, uint16_t * pTarget, rotati
      +                          on_t rotation);tetris.c: 156: {;tetris.c: 157:     int8_t x2, y2;;tetris.c: 158:     uin
      +                          t8_t x1, y1;;tetris.c: 161:     if (LimitedRotation == 2)
  2029                           
  2030                           ;incstack = 0
  2031  000B6A  0E02               	movlw	2
  2032  000B6C  1844               	xorwf	_LimitedRotation,w,c
  2033  000B6E  A4D8               	btfss	status,2,c
  2034  000B70  D00F               	goto	l4666
  2035                           
  2036                           ;tetris.c: 162:         memcpyvol(pTarget, pSource, 16);
  2037  000B72  C018  F00C         	movff	newRotation@pTarget,memcpyvol@dest
  2038  000B76  C019  F00D         	movff	newRotation@pTarget+1,memcpyvol@dest+1
  2039  000B7A  C016  F00E         	movff	newRotation@pSource,memcpyvol@src
  2040  000B7E  C017  F00F         	movff	newRotation@pSource+1,memcpyvol@src+1
  2041  000B82  0E00               	movlw	0
  2042  000B84  6E11               	movwf	memcpyvol@n+1,c
  2043  000B86  0E10               	movlw	16
  2044  000B88  6E10               	movwf	memcpyvol@n,c
  2045  000B8A  EC97  F00F         	call	_memcpyvol	;wreg free
  2046  000B8E  0012               	return	
  2047  000B90                     l4666:
  2048                           
  2049                           ;tetris.c: 164:     {;tetris.c: 166:         clearArray(pTarget, 8);
  2050  000B90  C018  F00C         	movff	newRotation@pTarget,clearArray@pArray
  2051  000B94  C019  F00D         	movff	newRotation@pTarget+1,clearArray@pArray+1
  2052  000B98  0E00               	movlw	0
  2053  000B9A  6E0F               	movwf	clearArray@size+1,c
  2054  000B9C  0E08               	movlw	8
  2055  000B9E  6E0E               	movwf	clearArray@size,c
  2056  000BA0  ECF3  F00F         	call	_clearArray	;wreg free
  2057                           
  2058                           ;tetris.c: 171:         if (LimitedRotation == 1 && IsRotated)
  2059  000BA4  0444               	decf	_LimitedRotation,w,c
  2060  000BA6  A4D8               	btfss	status,2,c
  2061  000BA8  D005               	goto	l261
  2062  000BAA  5042               	movf	_IsRotated,w,c
  2063  000BAC  B4D8               	btfsc	status,2,c
  2064  000BAE  D002               	goto	l261
  2065                           
  2066                           ;tetris.c: 172:             rotation = CCW;
  2067  000BB0  0E00               	movlw	0
  2068  000BB2  6E1A               	movwf	newRotation@rotation,c
  2069  000BB4                     l261:
  2070                           
  2071                           ;tetris.c: 174:         for (x1 = 0; x1 < 8; x1++)
  2072  000BB4  0E00               	movlw	0
  2073  000BB6  6E24               	movwf	newRotation@x1,c
  2074  000BB8                     l4678:
  2075                           
  2076                           ;tetris.c: 175:             for (y1 = 0; y1 < 16; y1++)
  2077  000BB8  0E00               	movlw	0
  2078  000BBA  6E25               	movwf	newRotation@y1,c
  2079  000BBC                     l4684:
  2080                           
  2081                           ;tetris.c: 176:             {;tetris.c: 177:                 if (pSource[x1] & (1<<y1))
  2082  000BBC  5024               	movf	newRotation@x1,w,c
  2083  000BBE  0D02               	mullw	2
  2084  000BC0  CFF3 F01B          	movff	prodl,??_newRotation
  2085  000BC4  CFF4 F01C          	movff	prodh,??_newRotation+1
  2086  000BC8  501B               	movf	??_newRotation,w,c
  2087  000BCA  2416               	addwf	newRotation@pSource,w,c
  2088  000BCC  6ED9               	movwf	fsr2l,c
  2089  000BCE  501C               	movf	??_newRotation+1,w,c
  2090  000BD0  2017               	addwfc	newRotation@pSource+1,w,c
  2091  000BD2  6EDA               	movwf	fsr2h,c
  2092  000BD4  CFDE F01D          	movff	postinc2,??_newRotation+2
  2093  000BD8  CFDD F01E          	movff	postdec2,??_newRotation+3
  2094  000BDC  C025  F01F         	movff	newRotation@y1,??_newRotation+4
  2095  000BE0  0E01               	movlw	1
  2096  000BE2  6E20               	movwf	(??_newRotation+5)& (0+255),c
  2097  000BE4  0E00               	movlw	0
  2098  000BE6  6E21               	movwf	(??_newRotation+6)& (0+255),c
  2099  000BE8  2A1F               	incf	??_newRotation+4,f,c
  2100  000BEA  D003               	goto	u4134
  2101  000BEC                     u4135:
  2102  000BEC  90D8               	bcf	status,0,c
  2103  000BEE  3620               	rlcf	??_newRotation+5,f,c
  2104  000BF0  3621               	rlcf	??_newRotation+6,f,c
  2105  000BF2                     u4134:
  2106  000BF2  2E1F               	decfsz	??_newRotation+4,f,c
  2107  000BF4  D7FB               	goto	u4135
  2108  000BF6  501D               	movf	??_newRotation+2,w,c
  2109  000BF8  1620               	andwf	??_newRotation+5,f,c
  2110  000BFA  501E               	movf	??_newRotation+3,w,c
  2111  000BFC  1621               	andwf	??_newRotation+6,f,c
  2112  000BFE  5020               	movf	??_newRotation+5,w,c
  2113  000C00  1021               	iorwf	??_newRotation+6,w,c
  2114  000C02  B4D8               	btfsc	status,2,c
  2115  000C04  D041               	goto	l4700
  2116                           
  2117                           ;tetris.c: 178:                 {;tetris.c: 179:                     if (rotation == CW)
  2118  000C06  041A               	decf	newRotation@rotation,w,c
  2119  000C08  A4D8               	btfss	status,2,c
  2120  000C0A  D007               	goto	l4690
  2121                           
  2122                           ;tetris.c: 180:                     {;tetris.c: 181:                         x2 = Origin
      +                          X + OriginY - y1;
  2123  000C0C  5025               	movf	newRotation@y1,w,c
  2124  000C0E  5C3D               	subwf	_OriginX,w,c
  2125  000C10  243C               	addwf	_OriginY,w,c
  2126  000C12  6E22               	movwf	newRotation@x2,c
  2127                           
  2128                           ;tetris.c: 182:                         y2 = x1 + OriginY - OriginX;
  2129  000C14  503D               	movf	_OriginX,w,c
  2130  000C16  5C24               	subwf	newRotation@x1,w,c
  2131  000C18  D006               	goto	L1
  2132  000C1A                     l4690:
  2133                           
  2134                           ;tetris.c: 185:                     {;tetris.c: 186:                         x2 = y1 + O
      +                          riginX - OriginY;
  2135  000C1A  503C               	movf	_OriginY,w,c
  2136  000C1C  5C25               	subwf	newRotation@y1,w,c
  2137  000C1E  243D               	addwf	_OriginX,w,c
  2138  000C20  6E22               	movwf	newRotation@x2,c
  2139                           
  2140                           ;tetris.c: 187:                         y2 = OriginX + OriginY - x1;
  2141  000C22  5024               	movf	newRotation@x1,w,c
  2142  000C24  5C3D               	subwf	_OriginX,w,c
  2143  000C26                     L1:
  2144  000C26  243C               	addwf	_OriginY,w,c
  2145  000C28  6E23               	movwf	newRotation@y2,c
  2146                           
  2147                           ;tetris.c: 189:                     if (x2 >= 0 && x2 < 8 &&
  2148                           
  2149                           ;tetris.c: 188:                     }
  2150  000C2A  BE22               	btfsc	newRotation@x2,7,c
  2151  000C2C  D02D               	goto	l4700
  2152  000C2E  5022               	movf	newRotation@x2,w,c
  2153  000C30  0A80               	xorlw	128
  2154  000C32  0F78               	addlw	-136
  2155  000C34  A0D8               	btfss	status,0,c
  2156  000C36  BE23               	btfsc	newRotation@y2,7,c
  2157  000C38  D027               	goto	l4700
  2158  000C3A  5023               	movf	newRotation@y2,w,c
  2159  000C3C  0A80               	xorlw	128
  2160  000C3E  0F70               	addlw	-144
  2161  000C40  B0D8               	btfsc	status,0,c
  2162  000C42  D022               	goto	l4700
  2163                           
  2164                           ;tetris.c: 191:                         pTarget[x2] |= (1<<y2);
  2165  000C44  C023  F01B         	movff	newRotation@y2,??_newRotation
  2166  000C48  0E01               	movlw	1
  2167  000C4A  6E1C               	movwf	(??_newRotation+1)& (0+255),c
  2168  000C4C  0E00               	movlw	0
  2169  000C4E  6E1D               	movwf	(??_newRotation+2)& (0+255),c
  2170  000C50  2A1B               	incf	??_newRotation,f,c
  2171  000C52  D003               	goto	u4204
  2172  000C54                     u4205:
  2173  000C54  90D8               	bcf	status,0,c
  2174  000C56  361C               	rlcf	??_newRotation+1,f,c
  2175  000C58  361D               	rlcf	??_newRotation+2,f,c
  2176  000C5A                     u4204:
  2177  000C5A  2E1B               	decfsz	??_newRotation,f,c
  2178  000C5C  D7FB               	goto	u4205
  2179  000C5E  5022               	movf	newRotation@x2,w,c
  2180  000C60  6E0C               	movwf	___wmul@multiplier,c
  2181  000C62  6A0D               	clrf	___wmul@multiplier+1,c
  2182  000C64  BE0C               	btfsc	___wmul@multiplier,7,c
  2183  000C66  060D               	decf	___wmul@multiplier+1,f,c
  2184  000C68  0E00               	movlw	0
  2185  000C6A  6E0F               	movwf	___wmul@multiplicand+1,c
  2186  000C6C  0E02               	movlw	2
  2187  000C6E  6E0E               	movwf	___wmul@multiplicand,c
  2188  000C70  EC2F  F011         	call	___wmul	;wreg free
  2189  000C74  500C               	movf	?___wmul,w,c
  2190  000C76  2418               	addwf	newRotation@pTarget,w,c
  2191  000C78  6ED9               	movwf	fsr2l,c
  2192  000C7A  500D               	movf	?___wmul+1,w,c
  2193  000C7C  2019               	addwfc	newRotation@pTarget+1,w,c
  2194  000C7E  6EDA               	movwf	fsr2h,c
  2195  000C80  501C               	movf	??_newRotation+1,w,c
  2196  000C82  12DE               	iorwf	postinc2,f,c
  2197  000C84  501D               	movf	??_newRotation+2,w,c
  2198  000C86  12DD               	iorwf	postdec2,f,c
  2199  000C88                     l4700:
  2200                           
  2201                           ;tetris.c: 193:             }
  2202  000C88  2A25               	incf	newRotation@y1,f,c
  2203  000C8A  0E0F               	movlw	15
  2204  000C8C  6425               	cpfsgt	newRotation@y1,c
  2205  000C8E  D796               	goto	l4684
  2206  000C90  2A24               	incf	newRotation@x1,f,c
  2207  000C92  0E07               	movlw	7
  2208  000C94  6424               	cpfsgt	newRotation@x1,c
  2209  000C96  D790               	goto	l4678
  2210  000C98  0012               	return	
  2211  000C9A                     __end_of_newRotation:
  2212                           	opt callstack 0
  2213                           
  2214 ;; *************** function ___wmul *****************
  2215 ;; Defined at:
  2216 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\Umul16.c"
  2217 ;; Parameters:    Size  Location     Type
  2218 ;;  multiplier      2   11[COMRAM] unsigned int 
  2219 ;;  multiplicand    2   13[COMRAM] unsigned int 
  2220 ;; Auto vars:     Size  Location     Type
  2221 ;;  product         2   15[COMRAM] unsigned int 
  2222 ;; Return value:  Size  Location     Type
  2223 ;;                  2   11[COMRAM] unsigned int 
  2224 ;; Registers used:
  2225 ;;		wreg, status,2, status,0, prodl, prodh
  2226 ;; Tracked objects:
  2227 ;;		On entry : 0/0
  2228 ;;		On exit  : 0/0
  2229 ;;		Unchanged: 0/0
  2230 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2231 ;;      Params:         4       0       0       0       0       0       0
  2232 ;;      Locals:         2       0       0       0       0       0       0
  2233 ;;      Temps:          0       0       0       0       0       0       0
  2234 ;;      Totals:         6       0       0       0       0       0       0
  2235 ;;Total ram usage:        6 bytes
  2236 ;; Hardware stack levels used:    1
  2237 ;; Hardware stack levels required when called:    4
  2238 ;; This function calls:
  2239 ;;		Nothing
  2240 ;; This function is called by:
  2241 ;;		_newRotation
  2242 ;; This function uses a non-reentrant model
  2243 ;;
  2244                           
  2245                           	psect	text10
  2246  00225E                     __ptext10:
  2247                           	opt callstack 0
  2248  00225E                     ___wmul:
  2249                           	opt callstack 21
  2250                           
  2251                           ;incstack = 0
  2252  00225E  500C               	movf	___wmul@multiplier,w,c
  2253  002260  020E               	mulwf	___wmul@multiplicand,c
  2254  002262  CFF3 F010          	movff	prodl,___wmul@product
  2255  002266  CFF4 F011          	movff	prodh,___wmul@product+1
  2256  00226A  500C               	movf	___wmul@multiplier,w,c
  2257  00226C  020F               	mulwf	___wmul@multiplicand+1,c
  2258  00226E  50F3               	movf	prodl,w,c
  2259  002270  2611               	addwf	___wmul@product+1,f,c
  2260  002272  500D               	movf	___wmul@multiplier+1,w,c
  2261  002274  020E               	mulwf	___wmul@multiplicand,c
  2262  002276  50F3               	movf	prodl,w,c
  2263  002278  2611               	addwf	___wmul@product+1,f,c
  2264  00227A  C010  F00C         	movff	___wmul@product,?___wmul
  2265  00227E  C011  F00D         	movff	___wmul@product+1,?___wmul+1
  2266  002282  0012               	return		;funcret
  2267  002284                     __end_of___wmul:
  2268                           	opt callstack 0
  2269                           
  2270 ;; *************** function _tetris_button_right *****************
  2271 ;; Defined at:
  2272 ;;		line 287 in file "tetris.c"
  2273 ;; Parameters:    Size  Location     Type
  2274 ;;		None
  2275 ;; Auto vars:     Size  Location     Type
  2276 ;;		None
  2277 ;; Return value:  Size  Location     Type
  2278 ;;                  1    wreg      _Bool 
  2279 ;; Registers used:
  2280 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2281 ;; Tracked objects:
  2282 ;;		On entry : 0/0
  2283 ;;		On exit  : 0/0
  2284 ;;		Unchanged: 0/0
  2285 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2286 ;;      Params:         0       0       0       0       0       0       0
  2287 ;;      Locals:         0       0       0       0       0       0       0
  2288 ;;      Temps:          0       0       0       0       0       0       0
  2289 ;;      Totals:         0       0       0       0       0       0       0
  2290 ;;Total ram usage:        0 bytes
  2291 ;; Hardware stack levels used:    1
  2292 ;; Hardware stack levels required when called:    6
  2293 ;; This function calls:
  2294 ;;		_checkForRightWall
  2295 ;;		_collisionDetect
  2296 ;;		_mergeObjects
  2297 ;;		_moveObject
  2298 ;;		_pauseMultiplexing
  2299 ;;		_resumeMultiplexing
  2300 ;; This function is called by:
  2301 ;;		_tetris_buttons
  2302 ;; This function uses a non-reentrant model
  2303 ;;
  2304                           
  2305                           	psect	text11
  2306  00163E                     __ptext11:
  2307                           	opt callstack 0
  2308  00163E                     _tetris_button_right:
  2309                           	opt callstack 21
  2310                           
  2311                           ;tetris.c: 288:     if (game)
  2312                           
  2313                           ;incstack = 0
  2314  00163E  503B               	movf	_game,w,c	;volatile
  2315  001640  B4D8               	btfsc	status,2,c
  2316  001642  0012               	return	
  2317                           
  2318                           ;tetris.c: 289:     {;tetris.c: 290:         if (!checkForRightWall(ObjectData))
  2319  001644  0ECC               	movlw	low _ObjectData
  2320  001646  6E0C               	movwf	checkForRightWall@pObject,c
  2321  001648  0E00               	movlw	high _ObjectData
  2322  00164A  6E0D               	movwf	checkForRightWall@pObject+1,c
  2323  00164C  EC61  F011         	call	_checkForRightWall	;wreg free
  2324  001650  0900               	iorlw	0
  2325  001652  A4D8               	btfss	status,2,c
  2326  001654  0012               	return	
  2327                           
  2328                           ;tetris.c: 291:         {;tetris.c: 292:             mergeObjects(ObjectData, tmpObjectD
      +                          ata, OVERRIDE);
  2329  001656  0ECC               	movlw	low _ObjectData
  2330  001658  6E0C               	movwf	mergeObjects@pSource,c
  2331  00165A  0E00               	movlw	high _ObjectData
  2332  00165C  6E0D               	movwf	mergeObjects@pSource+1,c
  2333  00165E  0E9C               	movlw	low _tmpObjectData
  2334  001660  6E0E               	movwf	mergeObjects@pTarget,c
  2335  001662  0E00               	movlw	high _tmpObjectData
  2336  001664  6E0F               	movwf	mergeObjects@pTarget+1,c
  2337  001666  0E00               	movlw	0
  2338  001668  6E10               	movwf	mergeObjects@mode,c
  2339  00166A  ECEE  F007         	call	_mergeObjects	;wreg free
  2340                           
  2341                           ;tetris.c: 293:             moveObject(tmpObjectData, RIGHT, 1);
  2342  00166E  0E9C               	movlw	low _tmpObjectData
  2343  001670  6E0C               	movwf	moveObject@pObject,c
  2344  001672  0E00               	movlw	high _tmpObjectData
  2345  001674  6E0D               	movwf	moveObject@pObject+1,c
  2346  001676  0E03               	movlw	3
  2347  001678  6E0E               	movwf	moveObject@direction,c
  2348  00167A  0E01               	movlw	1
  2349  00167C  6E0F               	movwf	moveObject@cycles,c
  2350  00167E  EC79  F003         	call	_moveObject	;wreg free
  2351                           
  2352                           ;tetris.c: 295:             if (!collisionDetect(tmpObjectData, BackgroundData))
  2353  001682  0E9C               	movlw	low _tmpObjectData
  2354  001684  6E0C               	movwf	collisionDetect@pSource,c
  2355  001686  0E00               	movlw	high _tmpObjectData
  2356  001688  6E0D               	movwf	collisionDetect@pSource+1,c
  2357  00168A  0EBC               	movlw	low _BackgroundData
  2358  00168C  6E0E               	movwf	collisionDetect@pTarget,c
  2359  00168E  0E00               	movlw	high _BackgroundData
  2360  001690  6E0F               	movwf	collisionDetect@pTarget+1,c
  2361  001692  ECF2  F00D         	call	_collisionDetect	;wreg free
  2362  001696  0900               	iorlw	0
  2363  001698  A4D8               	btfss	status,2,c
  2364  00169A  0012               	return	
  2365                           
  2366                           ;tetris.c: 296:             {;tetris.c: 297:                 pauseMultiplexing();
  2367  00169C  ECC1  F011         	call	_pauseMultiplexing	;wreg free
  2368                           
  2369                           ;tetris.c: 298:                 mergeObjects(tmpObjectData, ObjectData, OVERRIDE);
  2370  0016A0  0E9C               	movlw	low _tmpObjectData
  2371  0016A2  6E0C               	movwf	mergeObjects@pSource,c
  2372  0016A4  0E00               	movlw	high _tmpObjectData
  2373  0016A6  6E0D               	movwf	mergeObjects@pSource+1,c
  2374  0016A8  0ECC               	movlw	low _ObjectData
  2375  0016AA  6E0E               	movwf	mergeObjects@pTarget,c
  2376  0016AC  0E00               	movlw	high _ObjectData
  2377  0016AE  6E0F               	movwf	mergeObjects@pTarget+1,c
  2378  0016B0  0E00               	movlw	0
  2379  0016B2  6E10               	movwf	mergeObjects@mode,c
  2380  0016B4  ECEE  F007         	call	_mergeObjects	;wreg free
  2381                           
  2382                           ;tetris.c: 299:                 resumeMultiplexing();
  2383  0016B8  EC3C  F012         	call	_resumeMultiplexing	;wreg free
  2384                           
  2385                           ;tetris.c: 300:                 CheckForNewLines = 1;
  2386  0016BC  0E01               	movlw	1
  2387  0016BE  6E41               	movwf	_CheckForNewLines,c
  2388  0016C0  0012               	return	
  2389  0016C2                     __end_of_tetris_button_right:
  2390                           	opt callstack 0
  2391                           
  2392 ;; *************** function _checkForRightWall *****************
  2393 ;; Defined at:
  2394 ;;		line 149 in file "shared_logic.c"
  2395 ;; Parameters:    Size  Location     Type
  2396 ;;  pObject         2   11[COMRAM] PTR volatile unsigned sh
  2397 ;;		 -> ObjectData(16), 
  2398 ;; Auto vars:     Size  Location     Type
  2399 ;;		None
  2400 ;; Return value:  Size  Location     Type
  2401 ;;                  1    wreg      _Bool 
  2402 ;; Registers used:
  2403 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  2404 ;; Tracked objects:
  2405 ;;		On entry : 0/0
  2406 ;;		On exit  : 0/0
  2407 ;;		Unchanged: 0/0
  2408 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2409 ;;      Params:         2       0       0       0       0       0       0
  2410 ;;      Locals:         0       0       0       0       0       0       0
  2411 ;;      Temps:          2       0       0       0       0       0       0
  2412 ;;      Totals:         4       0       0       0       0       0       0
  2413 ;;Total ram usage:        4 bytes
  2414 ;; Hardware stack levels used:    1
  2415 ;; Hardware stack levels required when called:    4
  2416 ;; This function calls:
  2417 ;;		Nothing
  2418 ;; This function is called by:
  2419 ;;		_tetris_button_right
  2420 ;; This function uses a non-reentrant model
  2421 ;;
  2422                           
  2423                           	psect	text12
  2424  0022C2                     __ptext12:
  2425                           	opt callstack 0
  2426  0022C2                     _checkForRightWall:
  2427                           	opt callstack 22
  2428                           
  2429                           ;shared_logic.c: 149: _Bool checkForRightWall(volatile uint16_t * pObject);shared_logic.
      +                          c: 150: {;shared_logic.c: 151:     return pObject[7] != 0;
  2430                           
  2431                           ;incstack = 0
  2432  0022C2  EE20 F00E          	lfsr	2,14
  2433  0022C6  500C               	movf	checkForRightWall@pObject,w,c
  2434  0022C8  26D9               	addwf	fsr2l,f,c
  2435  0022CA  500D               	movf	checkForRightWall@pObject+1,w,c
  2436  0022CC  22DA               	addwfc	fsr2h,f,c
  2437  0022CE  50DE               	movf	postinc2,w,c
  2438  0022D0  10DE               	iorwf	postinc2,w,c
  2439  0022D2  B4D8               	btfsc	status,2,c
  2440  0022D4  D002               	goto	u2410
  2441  0022D6  0E01               	movlw	1
  2442  0022D8  0012               	return	
  2443  0022DA                     u2410:
  2444  0022DA  0E00               	movlw	0
  2445  0022DC  0012               	return		;funcret
  2446  0022DE                     __end_of_checkForRightWall:
  2447                           	opt callstack 0
  2448                           
  2449 ;; *************** function _tetris_button_left *****************
  2450 ;; Defined at:
  2451 ;;		line 260 in file "tetris.c"
  2452 ;; Parameters:    Size  Location     Type
  2453 ;;		None
  2454 ;; Auto vars:     Size  Location     Type
  2455 ;;		None
  2456 ;; Return value:  Size  Location     Type
  2457 ;;                  1    wreg      _Bool 
  2458 ;; Registers used:
  2459 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2460 ;; Tracked objects:
  2461 ;;		On entry : 0/0
  2462 ;;		On exit  : 0/0
  2463 ;;		Unchanged: 0/0
  2464 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2465 ;;      Params:         0       0       0       0       0       0       0
  2466 ;;      Locals:         0       0       0       0       0       0       0
  2467 ;;      Temps:          0       0       0       0       0       0       0
  2468 ;;      Totals:         0       0       0       0       0       0       0
  2469 ;;Total ram usage:        0 bytes
  2470 ;; Hardware stack levels used:    1
  2471 ;; Hardware stack levels required when called:    6
  2472 ;; This function calls:
  2473 ;;		_checkForLeftWall
  2474 ;;		_collisionDetect
  2475 ;;		_memcpyvol
  2476 ;;		_mergeObjects
  2477 ;;		_moveObject
  2478 ;;		_pauseMultiplexing
  2479 ;;		_resumeMultiplexing
  2480 ;; This function is called by:
  2481 ;;		_tetris_buttons
  2482 ;; This function uses a non-reentrant model
  2483 ;;
  2484                           
  2485                           	psect	text13
  2486  001530                     __ptext13:
  2487                           	opt callstack 0
  2488  001530                     _tetris_button_left:
  2489                           	opt callstack 21
  2490                           
  2491                           ;tetris.c: 261:     if (game)
  2492                           
  2493                           ;incstack = 0
  2494  001530  503B               	movf	_game,w,c	;volatile
  2495  001532  B4D8               	btfsc	status,2,c
  2496  001534  0012               	return	
  2497                           
  2498                           ;tetris.c: 262:     {;tetris.c: 263:         if (!checkForLeftWall(ObjectData))
  2499  001536  0ECC               	movlw	low _ObjectData
  2500  001538  6E0C               	movwf	checkForLeftWall@pObject,c
  2501  00153A  0E00               	movlw	high _ObjectData
  2502  00153C  6E0D               	movwf	checkForLeftWall@pObject+1,c
  2503  00153E  EC89  F011         	call	_checkForLeftWall	;wreg free
  2504  001542  0900               	iorlw	0
  2505  001544  A4D8               	btfss	status,2,c
  2506  001546  0012               	return	
  2507                           
  2508                           ;tetris.c: 264:         {;tetris.c: 267:             memcpyvol(tmpObjectData, ObjectData
      +                          , 16);
  2509  001548  0E9C               	movlw	low _tmpObjectData
  2510  00154A  6E0C               	movwf	memcpyvol@dest,c
  2511  00154C  0E00               	movlw	high _tmpObjectData
  2512  00154E  6E0D               	movwf	memcpyvol@dest+1,c
  2513  001550  0ECC               	movlw	low _ObjectData
  2514  001552  6E0E               	movwf	memcpyvol@src,c
  2515  001554  0E00               	movlw	high _ObjectData
  2516  001556  6E0F               	movwf	memcpyvol@src+1,c
  2517  001558  0E00               	movlw	0
  2518  00155A  6E11               	movwf	memcpyvol@n+1,c
  2519  00155C  0E10               	movlw	16
  2520  00155E  6E10               	movwf	memcpyvol@n,c
  2521  001560  EC97  F00F         	call	_memcpyvol	;wreg free
  2522                           
  2523                           ;tetris.c: 269:             moveObject(tmpObjectData, LEFT, 1);
  2524  001564  0E9C               	movlw	low _tmpObjectData
  2525  001566  6E0C               	movwf	moveObject@pObject,c
  2526  001568  0E00               	movlw	high _tmpObjectData
  2527  00156A  6E0D               	movwf	moveObject@pObject+1,c
  2528  00156C  0E02               	movlw	2
  2529  00156E  6E0E               	movwf	moveObject@direction,c
  2530  001570  0E01               	movlw	1
  2531  001572  6E0F               	movwf	moveObject@cycles,c
  2532  001574  EC79  F003         	call	_moveObject	;wreg free
  2533                           
  2534                           ;tetris.c: 271:             if (!collisionDetect(tmpObjectData, BackgroundData))
  2535  001578  0E9C               	movlw	low _tmpObjectData
  2536  00157A  6E0C               	movwf	collisionDetect@pSource,c
  2537  00157C  0E00               	movlw	high _tmpObjectData
  2538  00157E  6E0D               	movwf	collisionDetect@pSource+1,c
  2539  001580  0EBC               	movlw	low _BackgroundData
  2540  001582  6E0E               	movwf	collisionDetect@pTarget,c
  2541  001584  0E00               	movlw	high _BackgroundData
  2542  001586  6E0F               	movwf	collisionDetect@pTarget+1,c
  2543  001588  ECF2  F00D         	call	_collisionDetect	;wreg free
  2544  00158C  0900               	iorlw	0
  2545  00158E  A4D8               	btfss	status,2,c
  2546  001590  0012               	return	
  2547                           
  2548                           ;tetris.c: 272:             {;tetris.c: 274:                 pauseMultiplexing();
  2549  001592  ECC1  F011         	call	_pauseMultiplexing	;wreg free
  2550                           
  2551                           ;tetris.c: 276:                 mergeObjects(tmpObjectData, ObjectData, OVERRIDE);
  2552  001596  0E9C               	movlw	low _tmpObjectData
  2553  001598  6E0C               	movwf	mergeObjects@pSource,c
  2554  00159A  0E00               	movlw	high _tmpObjectData
  2555  00159C  6E0D               	movwf	mergeObjects@pSource+1,c
  2556  00159E  0ECC               	movlw	low _ObjectData
  2557  0015A0  6E0E               	movwf	mergeObjects@pTarget,c
  2558  0015A2  0E00               	movlw	high _ObjectData
  2559  0015A4  6E0F               	movwf	mergeObjects@pTarget+1,c
  2560  0015A6  0E00               	movlw	0
  2561  0015A8  6E10               	movwf	mergeObjects@mode,c
  2562  0015AA  ECEE  F007         	call	_mergeObjects	;wreg free
  2563                           
  2564                           ;tetris.c: 278:                 resumeMultiplexing();
  2565  0015AE  EC3C  F012         	call	_resumeMultiplexing	;wreg free
  2566                           
  2567                           ;tetris.c: 280:                 CheckForNewLines = 1;
  2568  0015B2  0E01               	movlw	1
  2569  0015B4  6E41               	movwf	_CheckForNewLines,c
  2570  0015B6  0012               	return	
  2571  0015B8                     __end_of_tetris_button_left:
  2572                           	opt callstack 0
  2573                           
  2574 ;; *************** function _checkForLeftWall *****************
  2575 ;; Defined at:
  2576 ;;		line 141 in file "shared_logic.c"
  2577 ;; Parameters:    Size  Location     Type
  2578 ;;  pObject         2   11[COMRAM] PTR volatile unsigned sh
  2579 ;;		 -> ObjectData(16), 
  2580 ;; Auto vars:     Size  Location     Type
  2581 ;;		None
  2582 ;; Return value:  Size  Location     Type
  2583 ;;                  1    wreg      _Bool 
  2584 ;; Registers used:
  2585 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  2586 ;; Tracked objects:
  2587 ;;		On entry : 0/0
  2588 ;;		On exit  : 0/0
  2589 ;;		Unchanged: 0/0
  2590 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2591 ;;      Params:         2       0       0       0       0       0       0
  2592 ;;      Locals:         0       0       0       0       0       0       0
  2593 ;;      Temps:          2       0       0       0       0       0       0
  2594 ;;      Totals:         4       0       0       0       0       0       0
  2595 ;;Total ram usage:        4 bytes
  2596 ;; Hardware stack levels used:    1
  2597 ;; Hardware stack levels required when called:    4
  2598 ;; This function calls:
  2599 ;;		Nothing
  2600 ;; This function is called by:
  2601 ;;		_tetris_button_left
  2602 ;; This function uses a non-reentrant model
  2603 ;;
  2604                           
  2605                           	psect	text14
  2606  002312                     __ptext14:
  2607                           	opt callstack 0
  2608  002312                     _checkForLeftWall:
  2609                           	opt callstack 22
  2610                           
  2611                           ;shared_logic.c: 141: _Bool checkForLeftWall(volatile uint16_t * pObject);shared_logic.c
      +                          : 142: {;shared_logic.c: 143:     return pObject[0] != 0;
  2612                           
  2613                           ;incstack = 0
  2614  002312  C00C  FFD9         	movff	checkForLeftWall@pObject,fsr2l
  2615  002316  C00D  FFDA         	movff	checkForLeftWall@pObject+1,fsr2h
  2616  00231A  50DE               	movf	postinc2,w,c
  2617  00231C  10DE               	iorwf	postinc2,w,c
  2618  00231E  B4D8               	btfsc	status,2,c
  2619  002320  D002               	goto	u2390
  2620  002322  0E01               	movlw	1
  2621  002324  0012               	return	
  2622  002326                     u2390:
  2623  002326  0E00               	movlw	0
  2624  002328  0012               	return		;funcret
  2625  00232A                     __end_of_checkForLeftWall:
  2626                           	opt callstack 0
  2627                           
  2628 ;; *************** function _tetris_button_down *****************
  2629 ;; Defined at:
  2630 ;;		line 330 in file "tetris.c"
  2631 ;; Parameters:    Size  Location     Type
  2632 ;;		None
  2633 ;; Auto vars:     Size  Location     Type
  2634 ;;		None
  2635 ;; Return value:  Size  Location     Type
  2636 ;;                  1    wreg      _Bool 
  2637 ;; Registers used:
  2638 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2639 ;; Tracked objects:
  2640 ;;		On entry : 0/0
  2641 ;;		On exit  : 0/0
  2642 ;;		Unchanged: 0/0
  2643 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2644 ;;      Params:         0       0       0       0       0       0       0
  2645 ;;      Locals:         0       0       0       0       0       0       0
  2646 ;;      Temps:          0       0       0       0       0       0       0
  2647 ;;      Totals:         0       0       0       0       0       0       0
  2648 ;;Total ram usage:        0 bytes
  2649 ;; Hardware stack levels used:    1
  2650 ;; Hardware stack levels required when called:    7
  2651 ;; This function calls:
  2652 ;;		_moveObjectDown
  2653 ;; This function is called by:
  2654 ;;		_tetris_buttons
  2655 ;; This function uses a non-reentrant model
  2656 ;;
  2657                           
  2658                           	psect	text15
  2659  002342                     __ptext15:
  2660                           	opt callstack 0
  2661  002342                     _tetris_button_down:
  2662                           	opt callstack 20
  2663                           
  2664                           ;tetris.c: 331:     if (game)
  2665                           
  2666                           ;incstack = 0
  2667  002342  503B               	movf	_game,w,c	;volatile
  2668  002344  B4D8               	btfsc	status,2,c
  2669  002346  0012               	return	
  2670                           
  2671                           ;tetris.c: 333:     while (moveObjectDown(ObjectData))
  2672  002348  0ECC               	movlw	low _ObjectData
  2673  00234A  6E25               	movwf	moveObjectDown@pObject,c
  2674  00234C  0E00               	movlw	high _ObjectData
  2675  00234E  6E26               	movwf	moveObjectDown@pObject+1,c
  2676  002350  ECEA  F009         	call	_moveObjectDown	;wreg free
  2677  002354  0900               	iorlw	0
  2678  002356  D7F6               	goto	L6
  2679  002358                     __end_of_tetris_button_down:
  2680                           	opt callstack 0
  2681                           
  2682 ;; *************** function _moveObjectDown *****************
  2683 ;; Defined at:
  2684 ;;		line 54 in file "tetris.c"
  2685 ;; Parameters:    Size  Location     Type
  2686 ;;  pObject         2   36[COMRAM] PTR volatile unsigned sh
  2687 ;;		 -> ObjectData(16), 
  2688 ;; Auto vars:     Size  Location     Type
  2689 ;;  result          1   38[COMRAM] _Bool 
  2690 ;; Return value:  Size  Location     Type
  2691 ;;                  1    wreg      _Bool 
  2692 ;; Registers used:
  2693 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2694 ;; Tracked objects:
  2695 ;;		On entry : 0/0
  2696 ;;		On exit  : 0/0
  2697 ;;		Unchanged: 0/0
  2698 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2699 ;;      Params:         2       0       0       0       0       0       0
  2700 ;;      Locals:         1       0       0       0       0       0       0
  2701 ;;      Temps:          0       0       0       0       0       0       0
  2702 ;;      Totals:         3       0       0       0       0       0       0
  2703 ;;Total ram usage:        3 bytes
  2704 ;; Hardware stack levels used:    1
  2705 ;; Hardware stack levels required when called:    6
  2706 ;; This function calls:
  2707 ;;		_checkForBottom
  2708 ;;		_collisionDetect
  2709 ;;		_mergeObjects
  2710 ;;		_moveObject
  2711 ;;		_selectNextObject
  2712 ;;		_set_mS
  2713 ;; This function is called by:
  2714 ;;		_tetris_button_down
  2715 ;;		_tetris_main
  2716 ;; This function uses a non-reentrant model
  2717 ;;
  2718                           
  2719                           	psect	text16
  2720  0013D4                     __ptext16:
  2721                           	opt callstack 0
  2722  0013D4                     _moveObjectDown:
  2723                           	opt callstack 20
  2724                           
  2725                           ;tetris.c: 54: _Bool moveObjectDown(volatile uint16_t * pObject);tetris.c: 55: {;tetris.
      +                          c: 56:     _Bool result = 1;
  2726                           
  2727                           ;incstack = 0
  2728  0013D4  0E01               	movlw	1
  2729  0013D6  6E27               	movwf	moveObjectDown@result,c
  2730                           
  2731                           ;tetris.c: 59:     if (checkForBottom(pObject))
  2732  0013D8  C025  F00C         	movff	moveObjectDown@pObject,checkForBottom@pObject
  2733  0013DC  C026  F00D         	movff	moveObjectDown@pObject+1,checkForBottom@pObject+1
  2734  0013E0  EC11  F010         	call	_checkForBottom	;wreg free
  2735  0013E4  0900               	iorlw	0
  2736  0013E6  B4D8               	btfsc	status,2,c
  2737  0013E8  D015               	goto	l4640
  2738                           
  2739                           ;tetris.c: 60:     {;tetris.c: 62:         result = 0;
  2740  0013EA  0E00               	movlw	0
  2741  0013EC  6E27               	movwf	moveObjectDown@result,c
  2742                           
  2743                           ;tetris.c: 64:         mergeObjects(pObject, BackgroundData, MERGE);
  2744  0013EE  C025  F00C         	movff	moveObjectDown@pObject,mergeObjects@pSource
  2745  0013F2  C026  F00D         	movff	moveObjectDown@pObject+1,mergeObjects@pSource+1
  2746  0013F6  0EBC               	movlw	low _BackgroundData
  2747  0013F8  6E0E               	movwf	mergeObjects@pTarget,c
  2748  0013FA  0E00               	movlw	high _BackgroundData
  2749  0013FC  6E0F               	movwf	mergeObjects@pTarget+1,c
  2750  0013FE  0E01               	movlw	1
  2751  001400  6E10               	movwf	mergeObjects@mode,c
  2752  001402  ECEE  F007         	call	_mergeObjects	;wreg free
  2753                           
  2754                           ;tetris.c: 66:         selectNextObject(pObject);
  2755  001406  C025  F016         	movff	moveObjectDown@pObject,selectNextObject@pTarget
  2756  00140A  C026  F017         	movff	moveObjectDown@pObject+1,selectNextObject@pTarget+1
  2757  00140E  EC4D  F006         	call	_selectNextObject	;wreg free
  2758  001412  D040               	goto	l4654
  2759  001414                     l4640:
  2760                           
  2761                           ;tetris.c: 71:     {;tetris.c: 73:         moveObject(pObject, DOWN, 1);
  2762  001414  C025  F00C         	movff	moveObjectDown@pObject,moveObject@pObject
  2763  001418  C026  F00D         	movff	moveObjectDown@pObject+1,moveObject@pObject+1
  2764  00141C  0E00               	movlw	0
  2765  00141E  6E0E               	movwf	moveObject@direction,c
  2766  001420  0E01               	movlw	1
  2767  001422  6E0F               	movwf	moveObject@cycles,c
  2768  001424  EC79  F003         	call	_moveObject	;wreg free
  2769                           
  2770                           ;tetris.c: 75:         if (collisionDetect(pObject, BackgroundData))
  2771  001428  C025  F00C         	movff	moveObjectDown@pObject,collisionDetect@pSource
  2772  00142C  C026  F00D         	movff	moveObjectDown@pObject+1,collisionDetect@pSource+1
  2773  001430  0EBC               	movlw	low _BackgroundData
  2774  001432  6E0E               	movwf	collisionDetect@pTarget,c
  2775  001434  0E00               	movlw	high _BackgroundData
  2776  001436  6E0F               	movwf	collisionDetect@pTarget+1,c
  2777  001438  ECF2  F00D         	call	_collisionDetect	;wreg free
  2778  00143C  0900               	iorlw	0
  2779  00143E  B4D8               	btfsc	status,2,c
  2780  001440  D02B               	goto	l4656
  2781                           
  2782                           ;tetris.c: 76:         {;tetris.c: 79:             result = 0;
  2783  001442  0E00               	movlw	0
  2784  001444  6E27               	movwf	moveObjectDown@result,c
  2785                           
  2786                           ;tetris.c: 81:             moveObject(pObject, UP, 1);
  2787  001446  C025  F00C         	movff	moveObjectDown@pObject,moveObject@pObject
  2788  00144A  C026  F00D         	movff	moveObjectDown@pObject+1,moveObject@pObject+1
  2789  00144E  0E01               	movlw	1
  2790  001450  6E0E               	movwf	moveObject@direction,c
  2791  001452  0E01               	movlw	1
  2792  001454  6E0F               	movwf	moveObject@cycles,c
  2793  001456  EC79  F003         	call	_moveObject	;wreg free
  2794                           
  2795                           ;tetris.c: 83:             mergeObjects(pObject, BackgroundData, MERGE);
  2796  00145A  C025  F00C         	movff	moveObjectDown@pObject,mergeObjects@pSource
  2797  00145E  C026  F00D         	movff	moveObjectDown@pObject+1,mergeObjects@pSource+1
  2798  001462  0EBC               	movlw	low _BackgroundData
  2799  001464  6E0E               	movwf	mergeObjects@pTarget,c
  2800  001466  0E00               	movlw	high _BackgroundData
  2801  001468  6E0F               	movwf	mergeObjects@pTarget+1,c
  2802  00146A  0E01               	movlw	1
  2803  00146C  6E10               	movwf	mergeObjects@mode,c
  2804  00146E  ECEE  F007         	call	_mergeObjects	;wreg free
  2805                           
  2806                           ;tetris.c: 85:             selectNextObject(pObject);
  2807  001472  C025  F016         	movff	moveObjectDown@pObject,selectNextObject@pTarget
  2808  001476  C026  F017         	movff	moveObjectDown@pObject+1,selectNextObject@pTarget+1
  2809  00147A  EC4D  F006         	call	_selectNextObject	;wreg free
  2810                           
  2811                           ;tetris.c: 88:             EndOfGame = collisionDetect(pObject, BackgroundData);
  2812  00147E  C025  F00C         	movff	moveObjectDown@pObject,collisionDetect@pSource
  2813  001482  C026  F00D         	movff	moveObjectDown@pObject+1,collisionDetect@pSource+1
  2814  001486  0EBC               	movlw	low _BackgroundData
  2815  001488  6E0E               	movwf	collisionDetect@pTarget,c
  2816  00148A  0E00               	movlw	high _BackgroundData
  2817  00148C  6E0F               	movwf	collisionDetect@pTarget+1,c
  2818  00148E  ECF2  F00D         	call	_collisionDetect	;wreg free
  2819  001492  6E3E               	movwf	_EndOfGame,c	;volatile
  2820  001494                     l4654:
  2821                           
  2822                           ;tetris.c: 90:             CheckForNewLines = 1;
  2823  001494  0E01               	movlw	1
  2824  001496  6E41               	movwf	_CheckForNewLines,c
  2825  001498                     l4656:
  2826                           
  2827                           ;tetris.c: 93:     set_mS(0);
  2828  001498  0E00               	movlw	0
  2829  00149A  6E0D               	movwf	set_mS@amount+1,c
  2830  00149C  0E00               	movlw	0
  2831  00149E  6E0C               	movwf	set_mS@amount,c
  2832  0014A0  EC1C  F012         	call	_set_mS	;wreg free
  2833                           
  2834                           ;tetris.c: 95:     return result;
  2835  0014A4  5027               	movf	moveObjectDown@result,w,c
  2836  0014A6  0012               	return		;funcret
  2837  0014A8                     __end_of_moveObjectDown:
  2838                           	opt callstack 0
  2839                           
  2840 ;; *************** function _selectNextObject *****************
  2841 ;; Defined at:
  2842 ;;		line 197 in file "tetris.c"
  2843 ;; Parameters:    Size  Location     Type
  2844 ;;  pTarget         2   21[COMRAM] PTR volatile unsigned sh
  2845 ;;		 -> ObjectData(16), 
  2846 ;; Auto vars:     Size  Location     Type
  2847 ;;  fill            1   31[COMRAM] _Bool 
  2848 ;;  check           7   24[COMRAM] _Bool [7]
  2849 ;;  s               2   32[COMRAM] PTR struct shape
  2850 ;;		 -> shapes(133), 
  2851 ;;  counter         1   35[COMRAM] unsigned char 
  2852 ;;  rndSelection    1   34[COMRAM] unsigned char 
  2853 ;;  selection       1    0        unsigned char 
  2854 ;; Return value:  Size  Location     Type
  2855 ;;                  1    wreg      void 
  2856 ;; Registers used:
  2857 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2858 ;; Tracked objects:
  2859 ;;		On entry : 0/0
  2860 ;;		On exit  : 0/0
  2861 ;;		Unchanged: 0/0
  2862 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2863 ;;      Params:         2       0       0       0       0       0       0
  2864 ;;      Locals:        12       0       0       0       0       0       0
  2865 ;;      Temps:          1       0       0       0       0       0       0
  2866 ;;      Totals:        15       0       0       0       0       0       0
  2867 ;;Total ram usage:       15 bytes
  2868 ;; Hardware stack levels used:    1
  2869 ;; Hardware stack levels required when called:    5
  2870 ;; This function calls:
  2871 ;;		___awmod
  2872 ;;		_memcpyvol
  2873 ;;		_rnd_get_num
  2874 ;;		_set_mS
  2875 ;; This function is called by:
  2876 ;;		_moveObjectDown
  2877 ;;		_tetris_main
  2878 ;; This function uses a non-reentrant model
  2879 ;;
  2880                           
  2881                           	psect	text17
  2882  000C9A                     __ptext17:
  2883                           	opt callstack 0
  2884  000C9A                     _selectNextObject:
  2885                           	opt callstack 20
  2886                           
  2887                           ;tetris.c: 197: void selectNextObject(volatile uint16_t *pTarget);tetris.c: 198: {;tetri
      +                          s.c: 199:     uint8_t rndSelection, counter, selection;;tetris.c: 200:     struct shape 
      +                          * s;;tetris.c: 201:     _Bool check[7];;tetris.c: 202:     if(countblocks == 7){
  2888                           
  2889                           ;incstack = 0
  2890  000C9A  0E07               	movlw	7
  2891  000C9C  1840               	xorwf	_countblocks,w,c
  2892  000C9E  A4D8               	btfss	status,2,c
  2893  000CA0  D04C               	goto	u3980
  2894                           
  2895                           ;tetris.c: 203:         countblocks = 0;
  2896  000CA2  0E00               	movlw	0
  2897  000CA4  6E40               	movwf	_countblocks,c
  2898                           
  2899                           ;tetris.c: 205:         for(counter=0; counter<7;counter++){
  2900  000CA6  0E00               	movlw	0
  2901  000CA8  6E24               	movwf	selectNextObject@counter,c
  2902  000CAA                     l4484:
  2903                           
  2904                           ;tetris.c: 206:             randomobjects[counter] = 255;
  2905  000CAA  0E80               	movlw	low _randomobjects
  2906  000CAC  2424               	addwf	selectNextObject@counter,w,c
  2907  000CAE  6ED9               	movwf	fsr2l,c
  2908  000CB0  6ADA               	clrf	fsr2h,c
  2909  000CB2  0E00               	movlw	high _randomobjects
  2910  000CB4  22DA               	addwfc	fsr2h,f,c
  2911  000CB6  0EFF               	movlw	255
  2912  000CB8  6EDF               	movwf	indf2,c
  2913                           
  2914                           ;tetris.c: 207:             check[counter] = 0;
  2915  000CBA  0E19               	movlw	low selectNextObject@check
  2916  000CBC  2424               	addwf	selectNextObject@counter,w,c
  2917  000CBE  6ED9               	movwf	fsr2l,c
  2918  000CC0  6ADA               	clrf	fsr2h,c
  2919  000CC2  0E00               	movlw	high selectNextObject@check
  2920  000CC4  22DA               	addwfc	fsr2h,f,c
  2921  000CC6  0E00               	movlw	0
  2922  000CC8  6EDF               	movwf	indf2,c
  2923                           
  2924                           ;tetris.c: 208:         }
  2925  000CCA  2A24               	incf	selectNextObject@counter,f,c
  2926  000CCC  0E06               	movlw	6
  2927  000CCE  6424               	cpfsgt	selectNextObject@counter,c
  2928  000CD0  D7EC               	goto	l4484
  2929                           
  2930                           ;tetris.c: 209:         for(counter=0; counter<7;counter++){
  2931  000CD2  0E00               	movlw	0
  2932  000CD4  6E24               	movwf	selectNextObject@counter,c
  2933  000CD6                     l4496:
  2934                           
  2935                           ;tetris.c: 210:             _Bool fill = 0;
  2936  000CD6  0E00               	movlw	0
  2937  000CD8  6E20               	movwf	selectNextObject@fill,c
  2938  000CDA                     l4498:
  2939                           
  2940                           ;tetris.c: 212:                 rndSelection = rnd_get_num();
  2941  000CDA  ECE2  F00C         	call	_rnd_get_num	;wreg free
  2942  000CDE  6E23               	movwf	selectNextObject@rndSelection,c
  2943                           
  2944                           ;tetris.c: 213:                 rndSelection = rndSelection % 7;
  2945  000CE0  C023  F00C         	movff	selectNextObject@rndSelection,___awmod@dividend
  2946  000CE4  6A0D               	clrf	___awmod@dividend+1,c
  2947  000CE6  0E00               	movlw	0
  2948  000CE8  6E0F               	movwf	___awmod@divisor+1,c
  2949  000CEA  0E07               	movlw	7
  2950  000CEC  6E0E               	movwf	___awmod@divisor,c
  2951  000CEE  EC1C  F00D         	call	___awmod	;wreg free
  2952  000CF2  500C               	movf	?___awmod,w,c
  2953  000CF4  6E23               	movwf	selectNextObject@rndSelection,c
  2954                           
  2955                           ;tetris.c: 214:                 if (check[rndSelection] == 0) {
  2956  000CF6  0E19               	movlw	low selectNextObject@check
  2957  000CF8  2423               	addwf	selectNextObject@rndSelection,w,c
  2958  000CFA  6ED9               	movwf	fsr2l,c
  2959  000CFC  6ADA               	clrf	fsr2h,c
  2960  000CFE  0E00               	movlw	high selectNextObject@check
  2961  000D00  22DA               	addwfc	fsr2h,f,c
  2962  000D02  50DF               	movf	indf2,w,c
  2963  000D04  A4D8               	btfss	status,2,c
  2964  000D06  D012               	goto	l4508
  2965                           
  2966                           ;tetris.c: 215:                     randomobjects[counter] = rndSelection;
  2967  000D08  0E80               	movlw	low _randomobjects
  2968  000D0A  2424               	addwf	selectNextObject@counter,w,c
  2969  000D0C  6ED9               	movwf	fsr2l,c
  2970  000D0E  6ADA               	clrf	fsr2h,c
  2971  000D10  0E00               	movlw	high _randomobjects
  2972  000D12  22DA               	addwfc	fsr2h,f,c
  2973  000D14  C023  FFDF         	movff	selectNextObject@rndSelection,indf2
  2974                           
  2975                           ;tetris.c: 216:                     check[rndSelection] = 1;
  2976  000D18  0E19               	movlw	low selectNextObject@check
  2977  000D1A  2423               	addwf	selectNextObject@rndSelection,w,c
  2978  000D1C  6ED9               	movwf	fsr2l,c
  2979  000D1E  6ADA               	clrf	fsr2h,c
  2980  000D20  0E00               	movlw	high selectNextObject@check
  2981  000D22  22DA               	addwfc	fsr2h,f,c
  2982  000D24  0E01               	movlw	1
  2983  000D26  6EDF               	movwf	indf2,c
  2984                           
  2985                           ;tetris.c: 217:                     fill = 1;
  2986  000D28  0E01               	movlw	1
  2987  000D2A  6E20               	movwf	selectNextObject@fill,c
  2988  000D2C                     l4508:
  2989                           
  2990                           ;tetris.c: 219:             } while (!fill);
  2991  000D2C  5020               	movf	selectNextObject@fill,w,c
  2992  000D2E  B4D8               	btfsc	status,2,c
  2993  000D30  D7D4               	goto	l4498
  2994                           
  2995                           ;tetris.c: 220:         }
  2996  000D32  2A24               	incf	selectNextObject@counter,f,c
  2997  000D34  0E06               	movlw	6
  2998  000D36  6424               	cpfsgt	selectNextObject@counter,c
  2999  000D38  D7CE               	goto	l4496
  3000  000D3A                     u3980:
  3001                           
  3002                           ;tetris.c: 222:     s = &shapes[randomobjects[countblocks]];
  3003  000D3A  0E80               	movlw	low _randomobjects
  3004  000D3C  2440               	addwf	_countblocks,w,c
  3005  000D3E  6ED9               	movwf	fsr2l,c
  3006  000D40  6ADA               	clrf	fsr2h,c
  3007  000D42  0E00               	movlw	high _randomobjects
  3008  000D44  22DA               	addwfc	fsr2h,f,c
  3009  000D46  50DF               	movf	indf2,w,c
  3010  000D48  6E18               	movwf	??_selectNextObject& (0+255),c
  3011  000D4A  5018               	movf	??_selectNextObject,w,c
  3012  000D4C  0D13               	mullw	19
  3013  000D4E  0E00               	movlw	low _shapes
  3014  000D50  24F3               	addwf	prodl,w,c
  3015  000D52  6E21               	movwf	selectNextObject@s,c
  3016  000D54  0E02               	movlw	high _shapes
  3017  000D56  20F4               	addwfc	prodh,w,c
  3018  000D58  6E22               	movwf	selectNextObject@s+1,c
  3019                           
  3020                           ;tetris.c: 223:     countblocks++;
  3021  000D5A  2A40               	incf	_countblocks,f,c
  3022                           
  3023                           ;tetris.c: 225:     memcpyvol(pTarget, s->graphic, 16);
  3024  000D5C  C016  F00C         	movff	selectNextObject@pTarget,memcpyvol@dest
  3025  000D60  C017  F00D         	movff	selectNextObject@pTarget+1,memcpyvol@dest+1
  3026  000D64  C021  F00E         	movff	selectNextObject@s,memcpyvol@src
  3027  000D68  C022  F00F         	movff	selectNextObject@s+1,memcpyvol@src+1
  3028  000D6C  0E00               	movlw	0
  3029  000D6E  6E11               	movwf	memcpyvol@n+1,c
  3030  000D70  0E10               	movlw	16
  3031  000D72  6E10               	movwf	memcpyvol@n,c
  3032  000D74  EC97  F00F         	call	_memcpyvol	;wreg free
  3033                           
  3034                           ;tetris.c: 226:     OriginX = s->x;
  3035  000D78  EE20 F010          	lfsr	2,16
  3036  000D7C  5021               	movf	selectNextObject@s,w,c
  3037  000D7E  26D9               	addwf	fsr2l,f,c
  3038  000D80  5022               	movf	selectNextObject@s+1,w,c
  3039  000D82  22DA               	addwfc	fsr2h,f,c
  3040  000D84  50DF               	movf	indf2,w,c
  3041  000D86  6E3D               	movwf	_OriginX,c
  3042                           
  3043                           ;tetris.c: 227:     OriginY = s->y;
  3044  000D88  EE20 F011          	lfsr	2,17
  3045  000D8C  5021               	movf	selectNextObject@s,w,c
  3046  000D8E  26D9               	addwf	fsr2l,f,c
  3047  000D90  5022               	movf	selectNextObject@s+1,w,c
  3048  000D92  22DA               	addwfc	fsr2h,f,c
  3049  000D94  50DF               	movf	indf2,w,c
  3050  000D96  6E3C               	movwf	_OriginY,c
  3051                           
  3052                           ;tetris.c: 228:     IsRotated = 0;
  3053  000D98  0E00               	movlw	0
  3054  000D9A  6E42               	movwf	_IsRotated,c
  3055                           
  3056                           ;tetris.c: 229:     LimitedRotation = s->limitedRotation;
  3057  000D9C  EE20 F012          	lfsr	2,18
  3058  000DA0  5021               	movf	selectNextObject@s,w,c
  3059  000DA2  26D9               	addwf	fsr2l,f,c
  3060  000DA4  5022               	movf	selectNextObject@s+1,w,c
  3061  000DA6  22DA               	addwfc	fsr2h,f,c
  3062  000DA8  50DF               	movf	indf2,w,c
  3063  000DAA  6E44               	movwf	_LimitedRotation,c
  3064                           
  3065                           ;tetris.c: 230:     set_mS(0);
  3066  000DAC  0E00               	movlw	0
  3067  000DAE  6E0D               	movwf	set_mS@amount+1,c
  3068  000DB0  0E00               	movlw	0
  3069  000DB2  6E0C               	movwf	set_mS@amount,c
  3070  000DB4  EC1C  F012         	call	_set_mS	;wreg free
  3071  000DB8  0012               	return		;funcret
  3072  000DBA                     __end_of_selectNextObject:
  3073                           	opt callstack 0
  3074                           
  3075 ;; *************** function _memcpyvol *****************
  3076 ;; Defined at:
  3077 ;;		line 36 in file "shared_logic.c"
  3078 ;; Parameters:    Size  Location     Type
  3079 ;;  dest            2   11[COMRAM] PTR volatile void 
  3080 ;;		 -> tmpObjectData(16), ObjectData(16), 
  3081 ;;  src             2   13[COMRAM] PTR  void 
  3082 ;;		 -> ObjectData(16), shapes.graphic(16), shapes(133), 
  3083 ;;  n               2   15[COMRAM] unsigned int 
  3084 ;; Auto vars:     Size  Location     Type
  3085 ;;  s               2   19[COMRAM] PTR unsigned char 
  3086 ;;		 -> ObjectData(16), shapes.graphic(16), shapes(133), 
  3087 ;;  d               2   17[COMRAM] PTR unsigned char 
  3088 ;;		 -> tmpObjectData(16), ObjectData(16), 
  3089 ;; Return value:  Size  Location     Type
  3090 ;;                  2   11[COMRAM] PTR volatile void 
  3091 ;; Registers used:
  3092 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0
  3093 ;; Tracked objects:
  3094 ;;		On entry : 0/0
  3095 ;;		On exit  : 0/0
  3096 ;;		Unchanged: 0/0
  3097 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3098 ;;      Params:         6       0       0       0       0       0       0
  3099 ;;      Locals:         4       0       0       0       0       0       0
  3100 ;;      Temps:          0       0       0       0       0       0       0
  3101 ;;      Totals:        10       0       0       0       0       0       0
  3102 ;;Total ram usage:       10 bytes
  3103 ;; Hardware stack levels used:    1
  3104 ;; Hardware stack levels required when called:    4
  3105 ;; This function calls:
  3106 ;;		Nothing
  3107 ;; This function is called by:
  3108 ;;		_newRotation
  3109 ;;		_selectNextObject
  3110 ;;		_tetris_button_left
  3111 ;; This function uses a non-reentrant model
  3112 ;;
  3113                           
  3114                           	psect	text18
  3115  001F2E                     __ptext18:
  3116                           	opt callstack 0
  3117  001F2E                     _memcpyvol:
  3118                           	opt callstack 21
  3119                           
  3120                           ;shared_logic.c: 36: volatile void *memcpyvol(volatile void *dest, volatile const void *
      +                          src, size_t n);shared_logic.c: 37: {;shared_logic.c: 38:     char *d = (char*)dest, *s =
      +                           (char*)src;
  3121                           
  3122                           ;incstack = 0
  3123  001F2E  C00C  F012         	movff	memcpyvol@dest,memcpyvol@d
  3124  001F32  C00D  F013         	movff	memcpyvol@dest+1,memcpyvol@d+1
  3125  001F36  C00E  F014         	movff	memcpyvol@src,memcpyvol@s
  3126  001F3A  C00F  F015         	movff	memcpyvol@src+1,memcpyvol@s+1
  3127                           
  3128                           ;shared_logic.c: 40:     while(n--)
  3129  001F3E  D00E               	goto	l2946
  3130  001F40                     l2940:
  3131                           
  3132                           ;shared_logic.c: 41:         *d++ = *s++;
  3133  001F40  C014  FFD9         	movff	memcpyvol@s,fsr2l
  3134  001F44  C015  FFDA         	movff	memcpyvol@s+1,fsr2h
  3135  001F48  C012  FFE1         	movff	memcpyvol@d,fsr1l
  3136  001F4C  C013  FFE2         	movff	memcpyvol@d+1,fsr1h
  3137  001F50  CFDF FFE7          	movff	indf2,indf1
  3138  001F54  4A14               	infsnz	memcpyvol@s,f,c
  3139  001F56  2A15               	incf	memcpyvol@s+1,f,c
  3140  001F58  4A12               	infsnz	memcpyvol@d,f,c
  3141  001F5A  2A13               	incf	memcpyvol@d+1,f,c
  3142  001F5C                     l2946:
  3143                           
  3144                           ;shared_logic.c: 40:     while(n--)
  3145  001F5C  0610               	decf	memcpyvol@n,f,c
  3146  001F5E  A0D8               	btfss	status,0,c
  3147  001F60  0611               	decf	memcpyvol@n+1,f,c
  3148  001F62  2810               	incf	memcpyvol@n,w,c
  3149  001F64  E1ED               	bnz	l2940
  3150  001F66  2811               	incf	memcpyvol@n+1,w,c
  3151  001F68  B4D8               	btfsc	status,2,c
  3152  001F6A  0012               	return	
  3153  001F6C  D7E9               	goto	l2940
  3154  001F6E                     __end_of_memcpyvol:
  3155                           	opt callstack 0
  3156                           
  3157 ;; *************** function _collisionDetect *****************
  3158 ;; Defined at:
  3159 ;;		line 156 in file "shared_logic.c"
  3160 ;; Parameters:    Size  Location     Type
  3161 ;;  pSource         2   11[COMRAM] PTR volatile unsigned sh
  3162 ;;		 -> tmpObjectData(16), ObjectData(16), 
  3163 ;;  pTarget         2   13[COMRAM] PTR volatile unsigned sh
  3164 ;;		 -> BackgroundData(16), 
  3165 ;; Auto vars:     Size  Location     Type
  3166 ;;  i               1   23[COMRAM] unsigned char 
  3167 ;; Return value:  Size  Location     Type
  3168 ;;                  1    wreg      _Bool 
  3169 ;; Registers used:
  3170 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  3171 ;; Tracked objects:
  3172 ;;		On entry : 0/0
  3173 ;;		On exit  : 0/0
  3174 ;;		Unchanged: 0/0
  3175 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3176 ;;      Params:         4       0       0       0       0       0       0
  3177 ;;      Locals:         1       0       0       0       0       0       0
  3178 ;;      Temps:          8       0       0       0       0       0       0
  3179 ;;      Totals:        13       0       0       0       0       0       0
  3180 ;;Total ram usage:       13 bytes
  3181 ;; Hardware stack levels used:    1
  3182 ;; Hardware stack levels required when called:    4
  3183 ;; This function calls:
  3184 ;;		Nothing
  3185 ;; This function is called by:
  3186 ;;		_moveObjectDown
  3187 ;;		_tetris_button_left
  3188 ;;		_tetris_button_right
  3189 ;;		_tetris_button_up
  3190 ;; This function uses a non-reentrant model
  3191 ;;
  3192                           
  3193                           	psect	text19
  3194  001BE4                     __ptext19:
  3195                           	opt callstack 0
  3196  001BE4                     _collisionDetect:
  3197                           	opt callstack 22
  3198                           
  3199                           ;shared_logic.c: 156: _Bool collisionDetect(volatile uint16_t * pSource, volatile uint16
      +                          _t * pTarget);shared_logic.c: 157: {;shared_logic.c: 158:     for (uint8_t i = 0; i < 8;
      +                           i++)
  3200                           
  3201                           ;incstack = 0
  3202  001BE4  0E00               	movlw	0
  3203  001BE6  6E18               	movwf	collisionDetect@i,c
  3204  001BE8                     l3204:
  3205                           
  3206                           ;shared_logic.c: 159:         if (pSource[i] & pTarget[i])
  3207  001BE8  5018               	movf	collisionDetect@i,w,c
  3208  001BEA  0D02               	mullw	2
  3209  001BEC  CFF3 F010          	movff	prodl,??_collisionDetect
  3210  001BF0  CFF4 F011          	movff	prodh,??_collisionDetect+1
  3211  001BF4  5010               	movf	??_collisionDetect,w,c
  3212  001BF6  240E               	addwf	collisionDetect@pTarget,w,c
  3213  001BF8  6ED9               	movwf	fsr2l,c
  3214  001BFA  5011               	movf	??_collisionDetect+1,w,c
  3215  001BFC  200F               	addwfc	collisionDetect@pTarget+1,w,c
  3216  001BFE  6EDA               	movwf	fsr2h,c
  3217  001C00  CFDE F012          	movff	postinc2,??_collisionDetect+2
  3218  001C04  CFDD F013          	movff	postdec2,??_collisionDetect+3
  3219  001C08  5018               	movf	collisionDetect@i,w,c
  3220  001C0A  0D02               	mullw	2
  3221  001C0C  CFF3 F014          	movff	prodl,??_collisionDetect+4
  3222  001C10  CFF4 F015          	movff	prodh,??_collisionDetect+5
  3223  001C14  5014               	movf	??_collisionDetect+4,w,c
  3224  001C16  240C               	addwf	collisionDetect@pSource,w,c
  3225  001C18  6ED9               	movwf	fsr2l,c
  3226  001C1A  5015               	movf	??_collisionDetect+5,w,c
  3227  001C1C  200D               	addwfc	collisionDetect@pSource+1,w,c
  3228  001C1E  6EDA               	movwf	fsr2h,c
  3229  001C20  CFDE F016          	movff	postinc2,??_collisionDetect+6
  3230  001C24  CFDD F017          	movff	postdec2,??_collisionDetect+7
  3231  001C28  5012               	movf	??_collisionDetect+2,w,c
  3232  001C2A  1616               	andwf	??_collisionDetect+6,f,c
  3233  001C2C  5013               	movf	??_collisionDetect+3,w,c
  3234  001C2E  1617               	andwf	??_collisionDetect+7,f,c
  3235  001C30  5016               	movf	??_collisionDetect+6,w,c
  3236  001C32  1017               	iorwf	??_collisionDetect+7,w,c
  3237  001C34  B4D8               	btfsc	status,2,c
  3238  001C36  D002               	goto	l3210
  3239                           
  3240                           ;shared_logic.c: 160:             return 1;
  3241  001C38  0E01               	movlw	1
  3242  001C3A  0012               	return	
  3243  001C3C                     l3210:
  3244  001C3C  2A18               	incf	collisionDetect@i,f,c
  3245  001C3E  0E07               	movlw	7
  3246  001C40  6418               	cpfsgt	collisionDetect@i,c
  3247  001C42  D7D2               	goto	l3204
  3248                           
  3249                           ;shared_logic.c: 161:     return 0;
  3250  001C44  0E00               	movlw	0
  3251  001C46  0012               	return		;funcret
  3252  001C48                     __end_of_collisionDetect:
  3253                           	opt callstack 0
  3254                           
  3255 ;; *************** function _checkForBottom *****************
  3256 ;; Defined at:
  3257 ;;		line 233 in file "tetris.c"
  3258 ;; Parameters:    Size  Location     Type
  3259 ;;  pObject         2   11[COMRAM] PTR volatile unsigned sh
  3260 ;;		 -> ObjectData(16), 
  3261 ;; Auto vars:     Size  Location     Type
  3262 ;;  i               1   17[COMRAM] unsigned char 
  3263 ;; Return value:  Size  Location     Type
  3264 ;;                  1    wreg      _Bool 
  3265 ;; Registers used:
  3266 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  3267 ;; Tracked objects:
  3268 ;;		On entry : 0/0
  3269 ;;		On exit  : 0/0
  3270 ;;		Unchanged: 0/0
  3271 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3272 ;;      Params:         2       0       0       0       0       0       0
  3273 ;;      Locals:         1       0       0       0       0       0       0
  3274 ;;      Temps:          4       0       0       0       0       0       0
  3275 ;;      Totals:         7       0       0       0       0       0       0
  3276 ;;Total ram usage:        7 bytes
  3277 ;; Hardware stack levels used:    1
  3278 ;; Hardware stack levels required when called:    4
  3279 ;; This function calls:
  3280 ;;		Nothing
  3281 ;; This function is called by:
  3282 ;;		_moveObjectDown
  3283 ;; This function uses a non-reentrant model
  3284 ;;
  3285                           
  3286                           	psect	text20
  3287  002022                     __ptext20:
  3288                           	opt callstack 0
  3289  002022                     _checkForBottom:
  3290                           	opt callstack 21
  3291                           
  3292                           ;tetris.c: 233: _Bool checkForBottom(volatile uint16_t * pObject);tetris.c: 234: {;tetri
      +                          s.c: 235:     for (uint8_t i = 0; i < 8; i++)
  3293                           
  3294                           ;incstack = 0
  3295  002022  0E00               	movlw	0
  3296  002024  6E12               	movwf	checkForBottom@i,c
  3297  002026                     l2998:
  3298                           
  3299                           ;tetris.c: 236:         if (pObject[i] & (1<<15))
  3300  002026  5012               	movf	checkForBottom@i,w,c
  3301  002028  0D02               	mullw	2
  3302  00202A  CFF3 F00E          	movff	prodl,??_checkForBottom
  3303  00202E  CFF4 F00F          	movff	prodh,??_checkForBottom+1
  3304  002032  500E               	movf	??_checkForBottom,w,c
  3305  002034  240C               	addwf	checkForBottom@pObject,w,c
  3306  002036  6ED9               	movwf	fsr2l,c
  3307  002038  500F               	movf	??_checkForBottom+1,w,c
  3308  00203A  200D               	addwfc	checkForBottom@pObject+1,w,c
  3309  00203C  6EDA               	movwf	fsr2h,c
  3310  00203E  CFDE F010          	movff	postinc2,??_checkForBottom+2
  3311  002042  CFDD F011          	movff	postdec2,??_checkForBottom+3
  3312  002046  AE11               	btfss	??_checkForBottom+3,7,c
  3313  002048  D002               	goto	l3004
  3314                           
  3315                           ;tetris.c: 237:             return 1;
  3316  00204A  0E01               	movlw	1
  3317  00204C  0012               	return	
  3318  00204E                     l3004:
  3319  00204E  2A12               	incf	checkForBottom@i,f,c
  3320  002050  0E07               	movlw	7
  3321  002052  6412               	cpfsgt	checkForBottom@i,c
  3322  002054  D7E8               	goto	l2998
  3323                           
  3324                           ;tetris.c: 238:     return 0;
  3325  002056  0E00               	movlw	0
  3326  002058  0012               	return		;funcret
  3327  00205A                     __end_of_checkForBottom:
  3328                           	opt callstack 0
  3329                           
  3330 ;; *************** function _initialise_tetris *****************
  3331 ;; Defined at:
  3332 ;;		line 345 in file "tetris.c"
  3333 ;; Parameters:    Size  Location     Type
  3334 ;;		None
  3335 ;; Auto vars:     Size  Location     Type
  3336 ;;		None
  3337 ;; Return value:  Size  Location     Type
  3338 ;;                  1    wreg      void 
  3339 ;; Registers used:
  3340 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3341 ;; Tracked objects:
  3342 ;;		On entry : 0/0
  3343 ;;		On exit  : 0/0
  3344 ;;		Unchanged: 0/0
  3345 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3346 ;;      Params:         0       0       0       0       0       0       0
  3347 ;;      Locals:         0       0       0       0       0       0       0
  3348 ;;      Temps:          0       0       0       0       0       0       0
  3349 ;;      Totals:         0       0       0       0       0       0       0
  3350 ;;Total ram usage:        0 bytes
  3351 ;; Hardware stack levels used:    1
  3352 ;; Hardware stack levels required when called:    5
  3353 ;; This function calls:
  3354 ;;		_clearArray
  3355 ;; This function is called by:
  3356 ;;		_tetris_main
  3357 ;; This function uses a non-reentrant model
  3358 ;;
  3359                           
  3360                           	psect	text21
  3361  001C48                     __ptext21:
  3362                           	opt callstack 0
  3363  001C48                     _initialise_tetris:
  3364                           	opt callstack 23
  3365                           
  3366                           ;tetris.c: 346:     OriginX = 0;
  3367                           
  3368                           ;incstack = 0
  3369  001C48  0E00               	movlw	0
  3370  001C4A  6E3D               	movwf	_OriginX,c
  3371                           
  3372                           ;tetris.c: 347:     OriginY = 0;
  3373  001C4C  0E00               	movlw	0
  3374  001C4E  6E3C               	movwf	_OriginY,c
  3375                           
  3376                           ;tetris.c: 349:     NumberOfLines = 0;
  3377  001C50  0E00               	movlw	0
  3378  001C52  6E43               	movwf	_NumberOfLines,c
  3379                           
  3380                           ;tetris.c: 351:     DropObject = 0;
  3381  001C54  0E00               	movlw	0
  3382  001C56  6E3F               	movwf	_DropObject,c	;volatile
  3383                           
  3384                           ;tetris.c: 352:     CheckForNewLines = 0;
  3385  001C58  0E00               	movlw	0
  3386  001C5A  6E41               	movwf	_CheckForNewLines,c
  3387                           
  3388                           ;tetris.c: 353:     randomobjects[7] = 255;
  3389  001C5C  0100               	movlb	0	; () banked
  3390  001C5E  6987               	setf	(_randomobjects+7)& (0+255),b
  3391                           
  3392                           ;tetris.c: 354:     countblocks = 7;
  3393  001C60  0E07               	movlw	7
  3394  001C62  6E40               	movwf	_countblocks,c
  3395                           
  3396                           ;tetris.c: 355:     game = 1;
  3397  001C64  0E01               	movlw	1
  3398  001C66  6E3B               	movwf	_game,c	;volatile
  3399                           
  3400                           ;tetris.c: 356:     EndOfGame = 0;
  3401  001C68  0E00               	movlw	0
  3402  001C6A  6E3E               	movwf	_EndOfGame,c	;volatile
  3403                           
  3404                           ; BSR set to: 0
  3405                           ;tetris.c: 357:     clearArray(ObjectData, 8);
  3406  001C6C  0ECC               	movlw	low _ObjectData
  3407  001C6E  6E0C               	movwf	clearArray@pArray,c
  3408  001C70  0E00               	movlw	high _ObjectData
  3409  001C72  6E0D               	movwf	clearArray@pArray+1,c
  3410  001C74  0E00               	movlw	0
  3411  001C76  6E0F               	movwf	clearArray@size+1,c
  3412  001C78  0E08               	movlw	8
  3413  001C7A  6E0E               	movwf	clearArray@size,c
  3414  001C7C  ECF3  F00F         	call	_clearArray	;wreg free
  3415                           
  3416                           ;tetris.c: 358:     clearArray(BackgroundData, 8);
  3417  001C80  0EBC               	movlw	low _BackgroundData
  3418  001C82  6E0C               	movwf	clearArray@pArray,c
  3419  001C84  0E00               	movlw	high _BackgroundData
  3420  001C86  6E0D               	movwf	clearArray@pArray+1,c
  3421  001C88  0E00               	movlw	0
  3422  001C8A  6E0F               	movwf	clearArray@size+1,c
  3423  001C8C  0E08               	movlw	8
  3424  001C8E  6E0E               	movwf	clearArray@size,c
  3425  001C90  ECF3  F00F         	call	_clearArray	;wreg free
  3426                           
  3427                           ;tetris.c: 359:     clearArray(Screen_Data, 8);
  3428  001C94  0EAC               	movlw	low _Screen_Data
  3429  001C96  6E0C               	movwf	clearArray@pArray,c
  3430  001C98  0E00               	movlw	high _Screen_Data
  3431  001C9A  6E0D               	movwf	clearArray@pArray+1,c
  3432  001C9C  0E00               	movlw	0
  3433  001C9E  6E0F               	movwf	clearArray@size+1,c
  3434  001CA0  0E08               	movlw	8
  3435  001CA2  6E0E               	movwf	clearArray@size,c
  3436  001CA4  ECF3  F00F         	call	_clearArray	;wreg free
  3437  001CA8  0012               	return		;funcret
  3438  001CAA                     __end_of_initialise_tetris:
  3439                           	opt callstack 0
  3440                           
  3441 ;; *************** function _checkForLines *****************
  3442 ;; Defined at:
  3443 ;;		line 242 in file "tetris.c"
  3444 ;; Parameters:    Size  Location     Type
  3445 ;;  pObject         2   34[COMRAM] PTR volatile unsigned sh
  3446 ;;		 -> BackgroundData(16), 
  3447 ;; Auto vars:     Size  Location     Type
  3448 ;;  y               1   45[COMRAM] unsigned char 
  3449 ;;  x               1   44[COMRAM] unsigned char 
  3450 ;;  pixels          1   43[COMRAM] unsigned char 
  3451 ;; Return value:  Size  Location     Type
  3452 ;;                  1    wreg      void 
  3453 ;; Registers used:
  3454 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3455 ;; Tracked objects:
  3456 ;;		On entry : 0/0
  3457 ;;		On exit  : 0/0
  3458 ;;		Unchanged: 0/0
  3459 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3460 ;;      Params:         2       0       0       0       0       0       0
  3461 ;;      Locals:         3       0       0       0       0       0       0
  3462 ;;      Temps:          7       0       0       0       0       0       0
  3463 ;;      Totals:        12       0       0       0       0       0       0
  3464 ;;Total ram usage:       12 bytes
  3465 ;; Hardware stack levels used:    1
  3466 ;; Hardware stack levels required when called:    5
  3467 ;; This function calls:
  3468 ;;		_removeLine
  3469 ;; This function is called by:
  3470 ;;		_tetris_main
  3471 ;; This function uses a non-reentrant model
  3472 ;;
  3473                           
  3474                           	psect	text22
  3475  001746                     __ptext22:
  3476                           	opt callstack 0
  3477  001746                     _checkForLines:
  3478                           	opt callstack 23
  3479                           
  3480                           ;tetris.c: 242: void checkForLines(volatile uint16_t * pObject);tetris.c: 243: {;tetris.
      +                          c: 244:     uint8_t x, y, pixels;;tetris.c: 246:     for (y = 0; y < 16; y++)
  3481                           
  3482                           ;incstack = 0
  3483  001746  0E00               	movlw	0
  3484  001748  6E2E               	movwf	checkForLines@y,c
  3485  00174A                     l3786:
  3486                           
  3487                           ;tetris.c: 247:     {;tetris.c: 248:         pixels = 0;
  3488  00174A  0E00               	movlw	0
  3489  00174C  6E2C               	movwf	checkForLines@pixels,c
  3490                           
  3491                           ;tetris.c: 249:         for (x = 0; x < 8; x++)
  3492  00174E  0E00               	movlw	0
  3493  001750  6E2D               	movwf	checkForLines@x,c
  3494  001752                     l3792:
  3495                           
  3496                           ;tetris.c: 250:             if (pObject[x] & (1<<y))
  3497  001752  502D               	movf	checkForLines@x,w,c
  3498  001754  0D02               	mullw	2
  3499  001756  CFF3 F025          	movff	prodl,??_checkForLines
  3500  00175A  CFF4 F026          	movff	prodh,??_checkForLines+1
  3501  00175E  5025               	movf	??_checkForLines,w,c
  3502  001760  2423               	addwf	checkForLines@pObject,w,c
  3503  001762  6ED9               	movwf	fsr2l,c
  3504  001764  5026               	movf	??_checkForLines+1,w,c
  3505  001766  2024               	addwfc	checkForLines@pObject+1,w,c
  3506  001768  6EDA               	movwf	fsr2h,c
  3507  00176A  CFDE F027          	movff	postinc2,??_checkForLines+2
  3508  00176E  CFDD F028          	movff	postdec2,??_checkForLines+3
  3509  001772  C02E  F029         	movff	checkForLines@y,??_checkForLines+4
  3510  001776  0E01               	movlw	1
  3511  001778  6E2A               	movwf	(??_checkForLines+5)& (0+255),c
  3512  00177A  0E00               	movlw	0
  3513  00177C  6E2B               	movwf	(??_checkForLines+6)& (0+255),c
  3514  00177E  2A29               	incf	??_checkForLines+4,f,c
  3515  001780  D003               	goto	u3084
  3516  001782                     u3085:
  3517  001782  90D8               	bcf	status,0,c
  3518  001784  362A               	rlcf	??_checkForLines+5,f,c
  3519  001786  362B               	rlcf	??_checkForLines+6,f,c
  3520  001788                     u3084:
  3521  001788  2E29               	decfsz	??_checkForLines+4,f,c
  3522  00178A  D7FB               	goto	u3085
  3523  00178C  5027               	movf	??_checkForLines+2,w,c
  3524  00178E  162A               	andwf	??_checkForLines+5,f,c
  3525  001790  5028               	movf	??_checkForLines+3,w,c
  3526  001792  162B               	andwf	??_checkForLines+6,f,c
  3527  001794  502A               	movf	??_checkForLines+5,w,c
  3528  001796  102B               	iorwf	??_checkForLines+6,w,c
  3529  001798  A4D8               	btfss	status,2,c
  3530                           
  3531                           ;tetris.c: 251:                 pixels++;
  3532  00179A  2A2C               	incf	checkForLines@pixels,f,c
  3533  00179C  2A2D               	incf	checkForLines@x,f,c
  3534  00179E  0E07               	movlw	7
  3535  0017A0  642D               	cpfsgt	checkForLines@x,c
  3536  0017A2  D7D7               	goto	l3792
  3537                           
  3538                           ;tetris.c: 252:         if (pixels == 8)
  3539  0017A4  0E08               	movlw	8
  3540  0017A6  182C               	xorwf	checkForLines@pixels,w,c
  3541  0017A8  A4D8               	btfss	status,2,c
  3542  0017AA  D009               	goto	l3804
  3543                           
  3544                           ;tetris.c: 253:         {;tetris.c: 254:             removeLine(pObject, y);
  3545  0017AC  C023  F00C         	movff	checkForLines@pObject,removeLine@pObject
  3546  0017B0  C024  F00D         	movff	checkForLines@pObject+1,removeLine@pObject+1
  3547  0017B4  C02E  F00E         	movff	checkForLines@y,removeLine@pY
  3548  0017B8  EC68  F007         	call	_removeLine	;wreg free
  3549                           
  3550                           ;tetris.c: 255:             NumberOfLines++;
  3551  0017BC  2A43               	incf	_NumberOfLines,f,c
  3552  0017BE                     l3804:
  3553                           
  3554                           ;tetris.c: 257:     }
  3555  0017BE  2A2E               	incf	checkForLines@y,f,c
  3556  0017C0  0E0F               	movlw	15
  3557  0017C2  642E               	cpfsgt	checkForLines@y,c
  3558  0017C4  D7C2               	goto	l3786
  3559  0017C6  0012               	return	
  3560  0017C8                     __end_of_checkForLines:
  3561                           	opt callstack 0
  3562                           
  3563 ;; *************** function _removeLine *****************
  3564 ;; Defined at:
  3565 ;;		line 178 in file "shared_logic.c"
  3566 ;; Parameters:    Size  Location     Type
  3567 ;;  pObject         2   11[COMRAM] PTR volatile unsigned sh
  3568 ;;		 -> BackgroundData(16), 
  3569 ;;  pY              1   13[COMRAM] unsigned char 
  3570 ;; Auto vars:     Size  Location     Type
  3571 ;;  x               1   33[COMRAM] unsigned char 
  3572 ;;  y               1   32[COMRAM] unsigned char 
  3573 ;;  currentLine     1   31[COMRAM] unsigned char 
  3574 ;; Return value:  Size  Location     Type
  3575 ;;                  1    wreg      void 
  3576 ;; Registers used:
  3577 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  3578 ;; Tracked objects:
  3579 ;;		On entry : 0/0
  3580 ;;		On exit  : 0/0
  3581 ;;		Unchanged: 0/0
  3582 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3583 ;;      Params:         3       0       0       0       0       0       0
  3584 ;;      Locals:         3       0       0       0       0       0       0
  3585 ;;      Temps:         17       0       0       0       0       0       0
  3586 ;;      Totals:        23       0       0       0       0       0       0
  3587 ;;Total ram usage:       23 bytes
  3588 ;; Hardware stack levels used:    1
  3589 ;; Hardware stack levels required when called:    4
  3590 ;; This function calls:
  3591 ;;		Nothing
  3592 ;; This function is called by:
  3593 ;;		_checkForLines
  3594 ;; This function uses a non-reentrant model
  3595 ;;
  3596                           
  3597                           	psect	text23
  3598  000ED0                     __ptext23:
  3599                           	opt callstack 0
  3600  000ED0                     _removeLine:
  3601                           	opt callstack 23
  3602                           
  3603                           ;shared_logic.c: 178: void removeLine(volatile uint16_t * pObject, uint8_t pY);shared_lo
      +                          gic.c: 179: {;shared_logic.c: 180:     uint8_t x, y, currentLine;;shared_logic.c: 183:  
      +                             for (y = pY-1; y < pY; y--)
  3604                           
  3605                           ;incstack = 0
  3606  000ED0  040E               	decf	removeLine@pY,w,c
  3607  000ED2  6E21               	movwf	removeLine@y,c
  3608  000ED4  D068               	goto	l3528
  3609  000ED6                     l3512:
  3610                           
  3611                           ;shared_logic.c: 184:     {;shared_logic.c: 185:         currentLine = y + 1;
  3612  000ED6  2821               	incf	removeLine@y,w,c
  3613  000ED8  6E20               	movwf	removeLine@currentLine,c
  3614                           
  3615                           ;shared_logic.c: 186:         for (x = 0; x < 8; x++)
  3616  000EDA  0E00               	movlw	0
  3617  000EDC  6E22               	movwf	removeLine@x,c
  3618  000EDE                     l3520:
  3619                           
  3620                           ;shared_logic.c: 187:             pObject[x] = (pObject[x] & ~(1<<currentLine)) | ((((pO
      +                          bject[x] >> y) & 1)&1)<<currentLine);
  3621  000EDE  C020  F00F         	movff	removeLine@currentLine,??_removeLine
  3622  000EE2  C021  F010         	movff	removeLine@y,??_removeLine+1
  3623  000EE6  5022               	movf	removeLine@x,w,c
  3624  000EE8  0D02               	mullw	2
  3625  000EEA  CFF3 F011          	movff	prodl,??_removeLine+2
  3626  000EEE  CFF4 F012          	movff	prodh,??_removeLine+3
  3627  000EF2  5011               	movf	??_removeLine+2,w,c
  3628  000EF4  240C               	addwf	removeLine@pObject,w,c
  3629  000EF6  6ED9               	movwf	fsr2l,c
  3630  000EF8  5012               	movf	??_removeLine+3,w,c
  3631  000EFA  200D               	addwfc	removeLine@pObject+1,w,c
  3632  000EFC  6EDA               	movwf	fsr2h,c
  3633  000EFE  CFDE F013          	movff	postinc2,??_removeLine+4
  3634  000F02  CFDD F014          	movff	postdec2,??_removeLine+5
  3635  000F06  2A10               	incf	??_removeLine+1,f,c
  3636  000F08  D003               	goto	u2604
  3637  000F0A                     u2605:
  3638  000F0A  90D8               	bcf	status,0,c
  3639  000F0C  3214               	rrcf	??_removeLine+5,f,c
  3640  000F0E  3213               	rrcf	??_removeLine+4,f,c
  3641  000F10                     u2604:
  3642  000F10  2E10               	decfsz	??_removeLine+1,f,c
  3643  000F12  D7FB               	goto	u2605
  3644  000F14  0E01               	movlw	1
  3645  000F16  1613               	andwf	??_removeLine+4,f,c
  3646  000F18  0E00               	movlw	0
  3647  000F1A  1614               	andwf	??_removeLine+5,f,c
  3648  000F1C  2A0F               	incf	??_removeLine,f,c
  3649  000F1E  D003               	goto	u2614
  3650  000F20                     u2615:
  3651  000F20  90D8               	bcf	status,0,c
  3652  000F22  3613               	rlcf	??_removeLine+4,f,c
  3653  000F24  3614               	rlcf	??_removeLine+5,f,c
  3654  000F26                     u2614:
  3655  000F26  2E0F               	decfsz	??_removeLine,f,c
  3656  000F28  D7FB               	goto	u2615
  3657  000F2A  5022               	movf	removeLine@x,w,c
  3658  000F2C  0D02               	mullw	2
  3659  000F2E  CFF3 F015          	movff	prodl,??_removeLine+6
  3660  000F32  CFF4 F016          	movff	prodh,??_removeLine+7
  3661  000F36  5015               	movf	??_removeLine+6,w,c
  3662  000F38  240C               	addwf	removeLine@pObject,w,c
  3663  000F3A  6ED9               	movwf	fsr2l,c
  3664  000F3C  5016               	movf	??_removeLine+7,w,c
  3665  000F3E  200D               	addwfc	removeLine@pObject+1,w,c
  3666  000F40  6EDA               	movwf	fsr2h,c
  3667  000F42  CFDE F017          	movff	postinc2,??_removeLine+8
  3668  000F46  CFDD F018          	movff	postdec2,??_removeLine+9
  3669  000F4A  C020  F019         	movff	removeLine@currentLine,??_removeLine+10
  3670  000F4E  0E01               	movlw	1
  3671  000F50  6E1A               	movwf	(??_removeLine+11)& (0+255),c
  3672  000F52  0E00               	movlw	0
  3673  000F54  6E1B               	movwf	(??_removeLine+12)& (0+255),c
  3674  000F56  2A19               	incf	??_removeLine+10,f,c
  3675  000F58  D003               	goto	u2624
  3676  000F5A                     u2625:
  3677  000F5A  90D8               	bcf	status,0,c
  3678  000F5C  361A               	rlcf	??_removeLine+11,f,c
  3679  000F5E  361B               	rlcf	??_removeLine+12,f,c
  3680  000F60                     u2624:
  3681  000F60  2E19               	decfsz	??_removeLine+10,f,c
  3682  000F62  D7FB               	goto	u2625
  3683  000F64  1C1A               	comf	??_removeLine+11,w,c
  3684  000F66  6E1C               	movwf	(??_removeLine+13)& (0+255),c
  3685  000F68  1C1B               	comf	??_removeLine+12,w,c
  3686  000F6A  6E1D               	movwf	(??_removeLine+14)& (0+255),c
  3687  000F6C  5017               	movf	??_removeLine+8,w,c
  3688  000F6E  161C               	andwf	??_removeLine+13,f,c
  3689  000F70  5018               	movf	??_removeLine+9,w,c
  3690  000F72  161D               	andwf	??_removeLine+14,f,c
  3691  000F74  5013               	movf	??_removeLine+4,w,c
  3692  000F76  121C               	iorwf	??_removeLine+13,f,c
  3693  000F78  5014               	movf	??_removeLine+5,w,c
  3694  000F7A  121D               	iorwf	??_removeLine+14,f,c
  3695  000F7C  5022               	movf	removeLine@x,w,c
  3696  000F7E  0D02               	mullw	2
  3697  000F80  CFF3 F01E          	movff	prodl,??_removeLine+15
  3698  000F84  CFF4 F01F          	movff	prodh,??_removeLine+16
  3699  000F88  501E               	movf	??_removeLine+15,w,c
  3700  000F8A  240C               	addwf	removeLine@pObject,w,c
  3701  000F8C  6ED9               	movwf	fsr2l,c
  3702  000F8E  501F               	movf	??_removeLine+16,w,c
  3703  000F90  200D               	addwfc	removeLine@pObject+1,w,c
  3704  000F92  6EDA               	movwf	fsr2h,c
  3705  000F94  C01C  FFDE         	movff	??_removeLine+13,postinc2
  3706  000F98  C01D  FFDD         	movff	??_removeLine+14,postdec2
  3707  000F9C  2A22               	incf	removeLine@x,f,c
  3708  000F9E  0E07               	movlw	7
  3709  000FA0  6422               	cpfsgt	removeLine@x,c
  3710  000FA2  D79D               	goto	l3520
  3711                           
  3712                           ;shared_logic.c: 189:     }
  3713  000FA4  0621               	decf	removeLine@y,f,c
  3714  000FA6                     l3528:
  3715  000FA6  500E               	movf	removeLine@pY,w,c
  3716  000FA8  5C21               	subwf	removeLine@y,w,c
  3717  000FAA  A0D8               	btfss	status,0,c
  3718  000FAC  D794               	goto	l3512
  3719                           
  3720                           ;shared_logic.c: 191:     for (x = 0; x < 8; x++)
  3721  000FAE  0E00               	movlw	0
  3722  000FB0  6E22               	movwf	removeLine@x,c
  3723  000FB2                     l3536:
  3724                           
  3725                           ;shared_logic.c: 192:         pObject[x] &= ~(1<<0);
  3726  000FB2  5022               	movf	removeLine@x,w,c
  3727  000FB4  0D02               	mullw	2
  3728  000FB6  CFF3 F00F          	movff	prodl,??_removeLine
  3729  000FBA  CFF4 F010          	movff	prodh,??_removeLine+1
  3730  000FBE  500F               	movf	??_removeLine,w,c
  3731  000FC0  240C               	addwf	removeLine@pObject,w,c
  3732  000FC2  6ED9               	movwf	fsr2l,c
  3733  000FC4  5010               	movf	??_removeLine+1,w,c
  3734  000FC6  200D               	addwfc	removeLine@pObject+1,w,c
  3735  000FC8  6EDA               	movwf	fsr2h,c
  3736  000FCA  0EFE               	movlw	254
  3737  000FCC  16DE               	andwf	postinc2,f,c
  3738  000FCE  0EFF               	movlw	255
  3739  000FD0  16DD               	andwf	postdec2,f,c
  3740  000FD2  2A22               	incf	removeLine@x,f,c
  3741  000FD4  0E07               	movlw	7
  3742  000FD6  6422               	cpfsgt	removeLine@x,c
  3743  000FD8  D7EC               	goto	l3536
  3744  000FDA  0012               	return	
  3745  000FDC                     __end_of_removeLine:
  3746                           	opt callstack 0
  3747                           
  3748 ;; *************** function _snake_main *****************
  3749 ;; Defined at:
  3750 ;;		line 181 in file "snake.c"
  3751 ;; Parameters:    Size  Location     Type
  3752 ;;		None
  3753 ;; Auto vars:     Size  Location     Type
  3754 ;;  LastHighScor    1   38[COMRAM] unsigned char 
  3755 ;; Return value:  Size  Location     Type
  3756 ;;                  1    wreg      void 
  3757 ;; Registers used:
  3758 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3759 ;; Tracked objects:
  3760 ;;		On entry : 0/0
  3761 ;;		On exit  : 0/0
  3762 ;;		Unchanged: 0/0
  3763 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3764 ;;      Params:         0       0       0       0       0       0       0
  3765 ;;      Locals:         1       0       0       0       0       0       0
  3766 ;;      Temps:          0       0       0       0       0       0       0
  3767 ;;      Totals:         1       0       0       0       0       0       0
  3768 ;;Total ram usage:        1 bytes
  3769 ;; Hardware stack levels used:    1
  3770 ;; Hardware stack levels required when called:    9
  3771 ;; This function calls:
  3772 ;;		_MoveSnakes
  3773 ;;		_inistialize_snake
  3774 ;;		_readHighScore
  3775 ;;		_show_score
  3776 ;;		_snake_buttons
  3777 ;;		_snake_screen
  3778 ;;		_writeHighScore
  3779 ;; This function is called by:
  3780 ;;		_mainGameLoop
  3781 ;; This function uses a non-reentrant model
  3782 ;;
  3783                           
  3784                           	psect	text24
  3785  001E62                     __ptext24:
  3786                           	opt callstack 0
  3787  001E62                     _snake_main:
  3788                           	opt callstack 20
  3789                           
  3790                           ;snake.c: 182:     inistialize_snake();
  3791                           
  3792                           ;incstack = 0
  3793  001E62  EC85  F00E         	call	_inistialize_snake	;wreg free
  3794                           
  3795                           ;snake.c: 183:     snake_screen();
  3796  001E66  EC7C  F011         	call	_snake_screen	;wreg free
  3797                           
  3798                           ;snake.c: 184:     uint8_t LastHighScore = readHighScore(1);
  3799  001E6A  0E01               	movlw	1
  3800  001E6C  ECF3  F010         	call	_readHighScore
  3801  001E70  6E27               	movwf	snake_main@LastHighScore,c
  3802                           
  3803                           ;snake.c: 185:     show_score(LastHighScore);
  3804  001E72  5027               	movf	snake_main@LastHighScore,w,c
  3805  001E74  EC0C  F005         	call	_show_score
  3806                           
  3807                           ;snake.c: 186:     EndOfGame = 0;
  3808  001E78  0E00               	movlw	0
  3809  001E7A  6E3E               	movwf	_EndOfGame,c	;volatile
  3810  001E7C                     l5254:
  3811                           
  3812                           ;snake.c: 188:         snake_buttons();
  3813  001E7C  ECB7  F00F         	call	_snake_buttons	;wreg free
  3814                           
  3815                           ;snake.c: 189:         if (moveSnake == 1)
  3816  001E80  0439               	decf	_moveSnake,w,c	;volatile
  3817  001E82  A4D8               	btfss	status,2,c
  3818  001E84  D004               	goto	l5262
  3819                           
  3820                           ;snake.c: 190:         {;snake.c: 191:             moveSnake = 0;
  3821  001E86  0E00               	movlw	0
  3822  001E88  6E39               	movwf	_moveSnake,c	;volatile
  3823                           
  3824                           ;snake.c: 192:             MoveSnakes();
  3825  001E8A  EC48  F004         	call	_MoveSnakes	;wreg free
  3826  001E8E                     l5262:
  3827                           
  3828                           ;snake.c: 194:     } while(!EndOfGame);
  3829  001E8E  503E               	movf	_EndOfGame,w,c	;volatile
  3830  001E90  B4D8               	btfsc	status,2,c
  3831  001E92  D7F4               	goto	l5254
  3832                           
  3833                           ;snake.c: 195:     writeHighScore(1, LastHighScore, snakeLength);
  3834  001E94  C027  F00E         	movff	snake_main@LastHighScore,writeHighScore@highscore
  3835  001E98  C038  F00F         	movff	_snakeLength,writeHighScore@scored
  3836  001E9C  0E01               	movlw	1
  3837  001E9E  ECAC  F011         	call	_writeHighScore
  3838                           
  3839                           ;snake.c: 196:     show_score(snakeLength);
  3840  001EA2  5038               	movf	_snakeLength,w,c
  3841  001EA4  EC0C  F005         	call	_show_score
  3842  001EA8  0012               	return		;funcret
  3843  001EAA                     __end_of_snake_main:
  3844                           	opt callstack 0
  3845                           
  3846 ;; *************** function _writeHighScore *****************
  3847 ;; Defined at:
  3848 ;;		line 214 in file "shared_logic.c"
  3849 ;; Parameters:    Size  Location     Type
  3850 ;;  adress          1    wreg     unsigned char 
  3851 ;;  highscore       1   13[COMRAM] unsigned char 
  3852 ;;  scored          1   14[COMRAM] unsigned char 
  3853 ;; Auto vars:     Size  Location     Type
  3854 ;;  adress          1   15[COMRAM] unsigned char 
  3855 ;; Return value:  Size  Location     Type
  3856 ;;                  1    wreg      void 
  3857 ;; Registers used:
  3858 ;;		wreg, status,2, status,0, cstack
  3859 ;; Tracked objects:
  3860 ;;		On entry : 0/0
  3861 ;;		On exit  : 0/0
  3862 ;;		Unchanged: 0/0
  3863 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3864 ;;      Params:         2       0       0       0       0       0       0
  3865 ;;      Locals:         1       0       0       0       0       0       0
  3866 ;;      Temps:          0       0       0       0       0       0       0
  3867 ;;      Totals:         3       0       0       0       0       0       0
  3868 ;;Total ram usage:        3 bytes
  3869 ;; Hardware stack levels used:    1
  3870 ;; Hardware stack levels required when called:    6
  3871 ;; This function calls:
  3872 ;;		_WriteEEByte
  3873 ;; This function is called by:
  3874 ;;		_tetris_main
  3875 ;;		_snake_main
  3876 ;; This function uses a non-reentrant model
  3877 ;;
  3878                           
  3879                           	psect	text25
  3880  002358                     __ptext25:
  3881                           	opt callstack 0
  3882  002358                     _writeHighScore:
  3883                           	opt callstack 22
  3884                           
  3885                           ;incstack = 0
  3886                           ;writeHighScore@adress stored from wreg
  3887  002358  6E10               	movwf	writeHighScore@adress,c
  3888                           
  3889                           ;shared_logic.c: 214: void writeHighScore(uint8_t adress, uint8_t highscore, uint8_t sco
      +                          red);shared_logic.c: 215: {;shared_logic.c: 216:     if (scored > highscore){
  3890  00235A  500F               	movf	writeHighScore@scored,w,c
  3891  00235C  5C0E               	subwf	writeHighScore@highscore,w,c
  3892  00235E  B0D8               	btfsc	status,0,c
  3893  002360  0012               	return	
  3894                           
  3895                           ;shared_logic.c: 217:         WriteEEByte(adress,scored);
  3896  002362  C00F  F00C         	movff	writeHighScore@scored,WriteEEByte@data
  3897  002366  5010               	movf	writeHighScore@adress,w,c
  3898  002368  EC49  F010         	call	_WriteEEByte
  3899  00236C  0012               	return		;funcret
  3900  00236E                     __end_of_writeHighScore:
  3901                           	opt callstack 0
  3902                           
  3903 ;; *************** function _snake_screen *****************
  3904 ;; Defined at:
  3905 ;;		line 29 in file "snake.c"
  3906 ;; Parameters:    Size  Location     Type
  3907 ;;		None
  3908 ;; Auto vars:     Size  Location     Type
  3909 ;;		None
  3910 ;; Return value:  Size  Location     Type
  3911 ;;                  1    wreg      void 
  3912 ;; Registers used:
  3913 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3914 ;; Tracked objects:
  3915 ;;		On entry : 0/0
  3916 ;;		On exit  : 0/0
  3917 ;;		Unchanged: 0/0
  3918 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3919 ;;      Params:         0       0       0       0       0       0       0
  3920 ;;      Locals:         0       0       0       0       0       0       0
  3921 ;;      Temps:          0       0       0       0       0       0       0
  3922 ;;      Totals:         0       0       0       0       0       0       0
  3923 ;;Total ram usage:        0 bytes
  3924 ;; Hardware stack levels used:    1
  3925 ;; Hardware stack levels required when called:    7
  3926 ;; This function calls:
  3927 ;;		_set_splashscreen
  3928 ;;		_waitms
  3929 ;; This function is called by:
  3930 ;;		_snake_main
  3931 ;; This function uses a non-reentrant model
  3932 ;;
  3933                           
  3934                           	psect	text26
  3935  0022F8                     __ptext26:
  3936                           	opt callstack 0
  3937  0022F8                     _snake_screen:
  3938                           	opt callstack 21
  3939                           
  3940                           ;snake.c: 30:     set_splashscreen(SNAKE);
  3941                           
  3942                           ;incstack = 0
  3943  0022F8  0ED1               	movlw	low _SNAKE
  3944  0022FA  6E13               	movwf	set_splashscreen@newData,c
  3945  0022FC  0E06               	movlw	high _SNAKE
  3946  0022FE  6E14               	movwf	set_splashscreen@newData+1,c
  3947  002300  EC66  F00C         	call	_set_splashscreen	;wreg free
  3948                           
  3949                           ;snake.c: 31:     waitms(3500);
  3950  002304  0E0D               	movlw	13
  3951  002306  6E0D               	movwf	waitms@t+1,c
  3952  002308  0EAC               	movlw	172
  3953  00230A  6E0C               	movwf	waitms@t,c
  3954  00230C  ECB7  F011         	call	_waitms	;wreg free
  3955  002310  0012               	return		;funcret
  3956  002312                     __end_of_snake_screen:
  3957                           	opt callstack 0
  3958                           
  3959 ;; *************** function _waitms *****************
  3960 ;; Defined at:
  3961 ;;		line 19 in file "interrupt.c"
  3962 ;; Parameters:    Size  Location     Type
  3963 ;;  t               2   11[COMRAM] unsigned int 
  3964 ;; Auto vars:     Size  Location     Type
  3965 ;;		None
  3966 ;; Return value:  Size  Location     Type
  3967 ;;                  1    wreg      void 
  3968 ;; Registers used:
  3969 ;;		wreg, status,2, status,0
  3970 ;; Tracked objects:
  3971 ;;		On entry : 0/0
  3972 ;;		On exit  : 0/0
  3973 ;;		Unchanged: 0/0
  3974 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3975 ;;      Params:         2       0       0       0       0       0       0
  3976 ;;      Locals:         0       0       0       0       0       0       0
  3977 ;;      Temps:          0       0       0       0       0       0       0
  3978 ;;      Totals:         2       0       0       0       0       0       0
  3979 ;;Total ram usage:        2 bytes
  3980 ;; Hardware stack levels used:    1
  3981 ;; Hardware stack levels required when called:    4
  3982 ;; This function calls:
  3983 ;;		Nothing
  3984 ;; This function is called by:
  3985 ;;		_tetris_screen
  3986 ;;		_snake_screen
  3987 ;; This function uses a non-reentrant model
  3988 ;;
  3989                           
  3990                           	psect	text27
  3991  00236E                     __ptext27:
  3992                           	opt callstack 0
  3993  00236E                     _waitms:
  3994                           	opt callstack 23
  3995                           
  3996                           ;interrupt.c: 19: void waitms(unsigned t);interrupt.c: 20: {;interrupt.c: 21:     time =
      +                           t;
  3997                           
  3998                           ;incstack = 0
  3999  00236E  C00C  F088         	movff	waitms@t,_time	;volatile
  4000  002372  C00D  F089         	movff	waitms@t+1,_time+1	;volatile
  4001  002376                     l3508:
  4002                           
  4003                           ;interrupt.c: 22:     while(time)
  4004  002376  0100               	movlb	0	; () banked
  4005  002378  5188               	movf	_time& (0+255),w,b	;volatile
  4006  00237A  1189               	iorwf	(_time+1)& (0+255),w,b	;volatile
  4007  00237C  B4D8               	btfsc	status,2,c
  4008  00237E  0012               	return	
  4009  002380  D7FA               	goto	l3508
  4010  002382                     __end_of_waitms:
  4011                           	opt callstack 0
  4012                           
  4013 ;; *************** function _snake_buttons *****************
  4014 ;; Defined at:
  4015 ;;		line 173 in file "snake.c"
  4016 ;; Parameters:    Size  Location     Type
  4017 ;;		None
  4018 ;; Auto vars:     Size  Location     Type
  4019 ;;		None
  4020 ;; Return value:  Size  Location     Type
  4021 ;;                  1    wreg      void 
  4022 ;; Registers used:
  4023 ;;		wreg, status,2, status,0, cstack
  4024 ;; Tracked objects:
  4025 ;;		On entry : 0/0
  4026 ;;		On exit  : 0/0
  4027 ;;		Unchanged: 0/0
  4028 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4029 ;;      Params:         0       0       0       0       0       0       0
  4030 ;;      Locals:         0       0       0       0       0       0       0
  4031 ;;      Temps:          0       0       0       0       0       0       0
  4032 ;;      Totals:         0       0       0       0       0       0       0
  4033 ;;Total ram usage:        0 bytes
  4034 ;; Hardware stack levels used:    1
  4035 ;; Hardware stack levels required when called:    5
  4036 ;; This function calls:
  4037 ;;		_checkDown
  4038 ;;		_checkLeft
  4039 ;;		_checkRight
  4040 ;;		_checkUp
  4041 ;;		_snake_button_down
  4042 ;;		_snake_button_left
  4043 ;;		_snake_button_right
  4044 ;;		_snake_button_up
  4045 ;; This function is called by:
  4046 ;;		_snake_main
  4047 ;; This function uses a non-reentrant model
  4048 ;;
  4049                           
  4050                           	psect	text28
  4051  001F6E                     __ptext28:
  4052                           	opt callstack 0
  4053  001F6E                     _snake_buttons:
  4054                           	opt callstack 23
  4055                           
  4056                           ;snake.c: 175:     if(checkLeft(1)){ snake_button_left(); }
  4057                           
  4058                           ; BSR set to: 0
  4059                           ;incstack = 0
  4060  001F6E  0E01               	movlw	1
  4061  001F70  ECCB  F010         	call	_checkLeft
  4062  001F74  0900               	iorlw	0
  4063  001F76  A4D8               	btfss	status,2,c
  4064  001F78  EC05  F012         	call	_snake_button_left	;wreg free
  4065                           
  4066                           ;snake.c: 176:     if(checkRight(1)){ snake_button_right(); }
  4067  001F7C  0E01               	movlw	1
  4068  001F7E  ECB7  F010         	call	_checkRight
  4069  001F82  0900               	iorlw	0
  4070  001F84  A4D8               	btfss	status,2,c
  4071  001F86  ECE2  F011         	call	_snake_button_right	;wreg free
  4072                           
  4073                           ;snake.c: 177:     if(checkUp(1)){ snake_button_up(); }
  4074  001F8A  0E01               	movlw	1
  4075  001F8C  EC07  F011         	call	_checkUp
  4076  001F90  0900               	iorlw	0
  4077  001F92  A4D8               	btfss	status,2,c
  4078  001F94  ECDB  F011         	call	_snake_button_up	;wreg free
  4079                           
  4080                           ;snake.c: 178:     if(checkDown(1)){ snake_button_down(); }
  4081  001F98  0E01               	movlw	1
  4082  001F9A  EC1B  F011         	call	_checkDown
  4083  001F9E  0900               	iorlw	0
  4084  001FA0  B4D8               	btfsc	status,2,c
  4085  001FA2  0012               	return	
  4086  001FA4  EC0B  F012         	call	_snake_button_down	;wreg free
  4087  001FA8  0012               	return		;funcret
  4088  001FAA                     __end_of_snake_buttons:
  4089                           	opt callstack 0
  4090                           
  4091 ;; *************** function _snake_button_up *****************
  4092 ;; Defined at:
  4093 ;;		line 53 in file "snake.c"
  4094 ;; Parameters:    Size  Location     Type
  4095 ;;		None
  4096 ;; Auto vars:     Size  Location     Type
  4097 ;;		None
  4098 ;; Return value:  Size  Location     Type
  4099 ;;                  1    wreg      void 
  4100 ;; Registers used:
  4101 ;;		wreg, status,2, status,0
  4102 ;; Tracked objects:
  4103 ;;		On entry : 0/0
  4104 ;;		On exit  : 0/0
  4105 ;;		Unchanged: 0/0
  4106 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4107 ;;      Params:         0       0       0       0       0       0       0
  4108 ;;      Locals:         0       0       0       0       0       0       0
  4109 ;;      Temps:          0       0       0       0       0       0       0
  4110 ;;      Totals:         0       0       0       0       0       0       0
  4111 ;;Total ram usage:        0 bytes
  4112 ;; Hardware stack levels used:    1
  4113 ;; Hardware stack levels required when called:    4
  4114 ;; This function calls:
  4115 ;;		Nothing
  4116 ;; This function is called by:
  4117 ;;		_snake_buttons
  4118 ;; This function uses a non-reentrant model
  4119 ;;
  4120                           
  4121                           	psect	text29
  4122  0023B6                     __ptext29:
  4123                           	opt callstack 0
  4124  0023B6                     _snake_button_up:
  4125                           	opt callstack 23
  4126                           
  4127                           ;incstack = 0
  4128  0023B6  0E02               	movlw	2
  4129  0023B8  1835               	xorwf	_previous_direction,w,c
  4130  0023BA  B4D8               	btfsc	status,2,c
  4131  0023BC  0012               	return	
  4132  0023BE  0E00               	movlw	0
  4133  0023C0  6E3A               	movwf	_direction,c
  4134  0023C2  0012               	return		;funcret
  4135  0023C4                     __end_of_snake_button_up:
  4136                           	opt callstack 0
  4137                           
  4138 ;; *************** function _snake_button_right *****************
  4139 ;; Defined at:
  4140 ;;		line 54 in file "snake.c"
  4141 ;; Parameters:    Size  Location     Type
  4142 ;;		None
  4143 ;; Auto vars:     Size  Location     Type
  4144 ;;		None
  4145 ;; Return value:  Size  Location     Type
  4146 ;;                  1    wreg      void 
  4147 ;; Registers used:
  4148 ;;		wreg, status,2, status,0
  4149 ;; Tracked objects:
  4150 ;;		On entry : 0/0
  4151 ;;		On exit  : 0/0
  4152 ;;		Unchanged: 0/0
  4153 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4154 ;;      Params:         0       0       0       0       0       0       0
  4155 ;;      Locals:         0       0       0       0       0       0       0
  4156 ;;      Temps:          0       0       0       0       0       0       0
  4157 ;;      Totals:         0       0       0       0       0       0       0
  4158 ;;Total ram usage:        0 bytes
  4159 ;; Hardware stack levels used:    1
  4160 ;; Hardware stack levels required when called:    4
  4161 ;; This function calls:
  4162 ;;		Nothing
  4163 ;; This function is called by:
  4164 ;;		_snake_buttons
  4165 ;; This function uses a non-reentrant model
  4166 ;;
  4167                           
  4168                           	psect	text30
  4169  0023C4                     __ptext30:
  4170                           	opt callstack 0
  4171  0023C4                     _snake_button_right:
  4172                           	opt callstack 23
  4173                           
  4174                           ;incstack = 0
  4175  0023C4  0E03               	movlw	3
  4176  0023C6  1835               	xorwf	_previous_direction,w,c
  4177  0023C8  B4D8               	btfsc	status,2,c
  4178  0023CA  0012               	return	
  4179  0023CC  0E01               	movlw	1
  4180  0023CE  6E3A               	movwf	_direction,c
  4181  0023D0  0012               	return		;funcret
  4182  0023D2                     __end_of_snake_button_right:
  4183                           	opt callstack 0
  4184                           
  4185 ;; *************** function _snake_button_left *****************
  4186 ;; Defined at:
  4187 ;;		line 52 in file "snake.c"
  4188 ;; Parameters:    Size  Location     Type
  4189 ;;		None
  4190 ;; Auto vars:     Size  Location     Type
  4191 ;;		None
  4192 ;; Return value:  Size  Location     Type
  4193 ;;                  1    wreg      void 
  4194 ;; Registers used:
  4195 ;;		wreg, status,2, status,0
  4196 ;; Tracked objects:
  4197 ;;		On entry : 0/0
  4198 ;;		On exit  : 0/0
  4199 ;;		Unchanged: 0/0
  4200 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4201 ;;      Params:         0       0       0       0       0       0       0
  4202 ;;      Locals:         0       0       0       0       0       0       0
  4203 ;;      Temps:          0       0       0       0       0       0       0
  4204 ;;      Totals:         0       0       0       0       0       0       0
  4205 ;;Total ram usage:        0 bytes
  4206 ;; Hardware stack levels used:    1
  4207 ;; Hardware stack levels required when called:    4
  4208 ;; This function calls:
  4209 ;;		Nothing
  4210 ;; This function is called by:
  4211 ;;		_snake_buttons
  4212 ;; This function uses a non-reentrant model
  4213 ;;
  4214                           
  4215                           	psect	text31
  4216  00240A                     __ptext31:
  4217                           	opt callstack 0
  4218  00240A                     _snake_button_left:
  4219                           	opt callstack 23
  4220                           
  4221                           ;incstack = 0
  4222  00240A  0435               	decf	_previous_direction,w,c
  4223  00240C  B4D8               	btfsc	status,2,c
  4224  00240E  0012               	return	
  4225  002410  0E03               	movlw	3
  4226  002412  6E3A               	movwf	_direction,c
  4227  002414  0012               	return		;funcret
  4228  002416                     __end_of_snake_button_left:
  4229                           	opt callstack 0
  4230                           
  4231 ;; *************** function _snake_button_down *****************
  4232 ;; Defined at:
  4233 ;;		line 55 in file "snake.c"
  4234 ;; Parameters:    Size  Location     Type
  4235 ;;		None
  4236 ;; Auto vars:     Size  Location     Type
  4237 ;;		None
  4238 ;; Return value:  Size  Location     Type
  4239 ;;                  1    wreg      void 
  4240 ;; Registers used:
  4241 ;;		wreg, status,2
  4242 ;; Tracked objects:
  4243 ;;		On entry : 0/0
  4244 ;;		On exit  : 0/0
  4245 ;;		Unchanged: 0/0
  4246 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4247 ;;      Params:         0       0       0       0       0       0       0
  4248 ;;      Locals:         0       0       0       0       0       0       0
  4249 ;;      Temps:          0       0       0       0       0       0       0
  4250 ;;      Totals:         0       0       0       0       0       0       0
  4251 ;;Total ram usage:        0 bytes
  4252 ;; Hardware stack levels used:    1
  4253 ;; Hardware stack levels required when called:    4
  4254 ;; This function calls:
  4255 ;;		Nothing
  4256 ;; This function is called by:
  4257 ;;		_snake_buttons
  4258 ;; This function uses a non-reentrant model
  4259 ;;
  4260                           
  4261                           	psect	text32
  4262  002416                     __ptext32:
  4263                           	opt callstack 0
  4264  002416                     _snake_button_down:
  4265                           	opt callstack 23
  4266                           
  4267                           ;incstack = 0
  4268  002416  5035               	movf	_previous_direction,w,c
  4269  002418  B4D8               	btfsc	status,2,c
  4270  00241A  0012               	return	
  4271  00241C  0E02               	movlw	2
  4272  00241E  6E3A               	movwf	_direction,c
  4273  002420  0012               	return		;funcret
  4274  002422                     __end_of_snake_button_down:
  4275                           	opt callstack 0
  4276                           
  4277 ;; *************** function _checkRight *****************
  4278 ;; Defined at:
  4279 ;;		line 62 in file "buttons.c"
  4280 ;; Parameters:    Size  Location     Type
  4281 ;;  reset           1    wreg     _Bool 
  4282 ;; Auto vars:     Size  Location     Type
  4283 ;;  reset           1   11[COMRAM] _Bool 
  4284 ;; Return value:  Size  Location     Type
  4285 ;;                  1    wreg      _Bool 
  4286 ;; Registers used:
  4287 ;;		wreg, status,2
  4288 ;; Tracked objects:
  4289 ;;		On entry : 0/0
  4290 ;;		On exit  : 0/0
  4291 ;;		Unchanged: 0/0
  4292 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4293 ;;      Params:         0       0       0       0       0       0       0
  4294 ;;      Locals:         1       0       0       0       0       0       0
  4295 ;;      Temps:          0       0       0       0       0       0       0
  4296 ;;      Totals:         1       0       0       0       0       0       0
  4297 ;;Total ram usage:        1 bytes
  4298 ;; Hardware stack levels used:    1
  4299 ;; Hardware stack levels required when called:    4
  4300 ;; This function calls:
  4301 ;;		Nothing
  4302 ;; This function is called by:
  4303 ;;		_tetris_buttons
  4304 ;;		_snake_buttons
  4305 ;; This function uses a non-reentrant model
  4306 ;;
  4307                           
  4308                           	psect	text33
  4309  00216E                     __ptext33:
  4310                           	opt callstack 0
  4311  00216E                     _checkRight:
  4312                           	opt callstack 23
  4313                           
  4314                           ;incstack = 0
  4315                           ;checkRight@reset stored from wreg
  4316  00216E  6E0C               	movwf	checkRight@reset,c
  4317                           
  4318                           ;buttons.c: 63:     if (Right_Debounced)
  4319  002170  5049               	movf	_Right_Debounced,w,c	;volatile
  4320  002172  B4D8               	btfsc	status,2,c
  4321  002174  D00E               	goto	l3628
  4322                           
  4323                           ;buttons.c: 64:     {;buttons.c: 65:         Right_Delay = 500;
  4324  002176  0E01               	movlw	1
  4325  002178  0100               	movlb	0	; () banked
  4326  00217A  6FF4               	movwf	(_Right_Delay+1)& (0+255),b	;volatile
  4327  00217C  0EF4               	movlw	244
  4328  00217E  6FF3               	movwf	_Right_Delay& (0+255),b	;volatile
  4329                           
  4330                           ;buttons.c: 66:         Right_Debounced = !reset;
  4331  002180  500C               	movf	checkRight@reset,w,c
  4332  002182  A4D8               	btfss	status,2,c
  4333  002184  D002               	goto	u2830
  4334  002186  0E01               	movlw	1
  4335  002188  D001               	goto	u2840
  4336  00218A                     u2830:
  4337  00218A  0E00               	movlw	0
  4338  00218C                     u2840:
  4339  00218C  6E49               	movwf	_Right_Debounced,c	;volatile
  4340                           
  4341                           ; BSR set to: 0
  4342                           ;buttons.c: 67:         return 1;
  4343  00218E  0E01               	movlw	1
  4344  002190  0012               	return	
  4345  002192                     l3628:
  4346  002192  0E00               	movlw	0
  4347  002194  0012               	return		;funcret
  4348  002196                     __end_of_checkRight:
  4349                           	opt callstack 0
  4350                           
  4351 ;; *************** function _checkLeft *****************
  4352 ;; Defined at:
  4353 ;;		line 53 in file "buttons.c"
  4354 ;; Parameters:    Size  Location     Type
  4355 ;;  reset           1    wreg     _Bool 
  4356 ;; Auto vars:     Size  Location     Type
  4357 ;;  reset           1   11[COMRAM] _Bool 
  4358 ;; Return value:  Size  Location     Type
  4359 ;;                  1    wreg      _Bool 
  4360 ;; Registers used:
  4361 ;;		wreg, status,2
  4362 ;; Tracked objects:
  4363 ;;		On entry : 0/0
  4364 ;;		On exit  : 0/0
  4365 ;;		Unchanged: 0/0
  4366 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4367 ;;      Params:         0       0       0       0       0       0       0
  4368 ;;      Locals:         1       0       0       0       0       0       0
  4369 ;;      Temps:          0       0       0       0       0       0       0
  4370 ;;      Totals:         1       0       0       0       0       0       0
  4371 ;;Total ram usage:        1 bytes
  4372 ;; Hardware stack levels used:    1
  4373 ;; Hardware stack levels required when called:    4
  4374 ;; This function calls:
  4375 ;;		Nothing
  4376 ;; This function is called by:
  4377 ;;		_tetris_buttons
  4378 ;;		_snake_buttons
  4379 ;; This function uses a non-reentrant model
  4380 ;;
  4381                           
  4382                           	psect	text34
  4383  002196                     __ptext34:
  4384                           	opt callstack 0
  4385  002196                     _checkLeft:
  4386                           	opt callstack 23
  4387                           
  4388                           ;incstack = 0
  4389                           ;checkLeft@reset stored from wreg
  4390  002196  6E0C               	movwf	checkLeft@reset,c
  4391                           
  4392                           ;buttons.c: 54:     if (Left_Debounced)
  4393  002198  504A               	movf	_Left_Debounced,w,c	;volatile
  4394  00219A  B4D8               	btfsc	status,2,c
  4395  00219C  D00E               	goto	l3614
  4396                           
  4397                           ;buttons.c: 55:     {;buttons.c: 56:         Left_Delay = 500;
  4398  00219E  0E01               	movlw	1
  4399  0021A0  0100               	movlb	0	; () banked
  4400  0021A2  6FF6               	movwf	(_Left_Delay+1)& (0+255),b	;volatile
  4401  0021A4  0EF4               	movlw	244
  4402  0021A6  6FF5               	movwf	_Left_Delay& (0+255),b	;volatile
  4403                           
  4404                           ;buttons.c: 57:         Left_Debounced = !reset;
  4405  0021A8  500C               	movf	checkLeft@reset,w,c
  4406  0021AA  A4D8               	btfss	status,2,c
  4407  0021AC  D002               	goto	u2800
  4408  0021AE  0E01               	movlw	1
  4409  0021B0  D001               	goto	u2810
  4410  0021B2                     u2800:
  4411  0021B2  0E00               	movlw	0
  4412  0021B4                     u2810:
  4413  0021B4  6E4A               	movwf	_Left_Debounced,c	;volatile
  4414                           
  4415                           ; BSR set to: 0
  4416                           ;buttons.c: 58:         return 1;
  4417  0021B6  0E01               	movlw	1
  4418  0021B8  0012               	return	
  4419  0021BA                     l3614:
  4420  0021BA  0E00               	movlw	0
  4421  0021BC  0012               	return		;funcret
  4422  0021BE                     __end_of_checkLeft:
  4423                           	opt callstack 0
  4424                           
  4425 ;; *************** function _show_score *****************
  4426 ;; Defined at:
  4427 ;;		line 221 in file "shared_logic.c"
  4428 ;; Parameters:    Size  Location     Type
  4429 ;;  score           1    wreg     unsigned char 
  4430 ;; Auto vars:     Size  Location     Type
  4431 ;;  score           1   48[BANK2 ] unsigned char 
  4432 ;;  tmpObjectDat   16   32[BANK2 ] unsigned short [8]
  4433 ;;  Numberscreen   16   16[BANK2 ] unsigned short [8]
  4434 ;;  mask           16    0[BANK2 ] unsigned short [8]
  4435 ;;  number          4   50[BANK2 ] unsigned char [4]
  4436 ;;  i               1   54[BANK2 ] unsigned char 
  4437 ;;  currentNumbe    1   49[BANK2 ] unsigned char 
  4438 ;; Return value:  Size  Location     Type
  4439 ;;                  1    wreg      void 
  4440 ;; Registers used:
  4441 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4442 ;; Tracked objects:
  4443 ;;		On entry : 0/0
  4444 ;;		On exit  : 0/0
  4445 ;;		Unchanged: 0/0
  4446 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4447 ;;      Params:         0       0       0       0       0       0       0
  4448 ;;      Locals:         0       0       0      55       0       0       0
  4449 ;;      Temps:          0       0       0       0       0       0       0
  4450 ;;      Totals:         0       0       0      55       0       0       0
  4451 ;;Total ram usage:       55 bytes
  4452 ;; Hardware stack levels used:    1
  4453 ;; Hardware stack levels required when called:    7
  4454 ;; This function calls:
  4455 ;;		_checkDown
  4456 ;;		_clearArray
  4457 ;;		_getNumber
  4458 ;;		_itoa
  4459 ;;		_mergeObjects
  4460 ;;		_moveObject
  4461 ;;		_pauseButtons
  4462 ;;		_pauseMultiplexing
  4463 ;;		_resumeButtons
  4464 ;;		_resumeMultiplexing
  4465 ;;		_set_screen
  4466 ;; This function is called by:
  4467 ;;		_tetris_main
  4468 ;;		_snake_main
  4469 ;; This function uses a non-reentrant model
  4470 ;;
  4471                           
  4472                           	psect	text35
  4473  000A18                     __ptext35:
  4474                           	opt callstack 0
  4475  000A18                     _show_score:
  4476                           	opt callstack 21
  4477                           
  4478                           ;incstack = 0
  4479                           ;show_score@score stored from wreg
  4480  000A18  0102               	movlb	2	; () banked
  4481  000A1A  6FB5               	movwf	show_score@score& (0+255),b
  4482                           
  4483                           ;shared_logic.c: 221: void show_score(uint8_t score);shared_logic.c: 222: {;shared_logic
      +                          .c: 223:     uint16_t tmpObjectData[8];;shared_logic.c: 224:     uint16_t Numberscreen[8
      +                          ];;shared_logic.c: 225:     uint8_t i, currentNumber;;shared_logic.c: 226:     char numb
      +                          er[4];;shared_logic.c: 228:     clearArray(tmpObjectData, 8);
  4484  000A1C  0EA5               	movlw	low show_score@tmpObjectData
  4485  000A1E  6E0C               	movwf	clearArray@pArray,c
  4486  000A20  0E02               	movlw	high show_score@tmpObjectData
  4487  000A22  6E0D               	movwf	clearArray@pArray+1,c
  4488  000A24  0E00               	movlw	0
  4489  000A26  6E0F               	movwf	clearArray@size+1,c
  4490  000A28  0E08               	movlw	8
  4491  000A2A  6E0E               	movwf	clearArray@size,c
  4492  000A2C  ECF3  F00F         	call	_clearArray	;wreg free
  4493                           
  4494                           ;shared_logic.c: 229:     clearArray(Numberscreen, 8);
  4495  000A30  0E95               	movlw	low show_score@Numberscreen
  4496  000A32  6E0C               	movwf	clearArray@pArray,c
  4497  000A34  0E02               	movlw	high show_score@Numberscreen
  4498  000A36  6E0D               	movwf	clearArray@pArray+1,c
  4499  000A38  0E00               	movlw	0
  4500  000A3A  6E0F               	movwf	clearArray@size+1,c
  4501  000A3C  0E08               	movlw	8
  4502  000A3E  6E0E               	movwf	clearArray@size,c
  4503  000A40  ECF3  F00F         	call	_clearArray	;wreg free
  4504                           
  4505                           ;shared_logic.c: 231:     itoa(score, number, 10);
  4506  000A44  C2B5  F01A         	movff	show_score@score,itoa@value
  4507  000A48  6A1B               	clrf	itoa@value+1,c
  4508  000A4A  0EB7               	movlw	low show_score@number
  4509  000A4C  6E1C               	movwf	itoa@str,c
  4510  000A4E  0E02               	movlw	high show_score@number
  4511  000A50  6E1D               	movwf	itoa@str+1,c
  4512  000A52  0E00               	movlw	0
  4513  000A54  6E1F               	movwf	itoa@bas+1,c
  4514  000A56  0E0A               	movlw	10
  4515  000A58  6E1E               	movwf	itoa@bas,c
  4516  000A5A  EC72  F008         	call	_itoa	;wreg free
  4517                           
  4518                           ;shared_logic.c: 232:     for (i = 0; i < 3 && number[i]; i++)
  4519  000A5E  0E00               	movlw	0
  4520  000A60  0102               	movlb	2	; () banked
  4521  000A62  6FBB               	movwf	show_score@i& (0+255),b
  4522  000A64  D036               	goto	l5062
  4523  000A66                     l5050:
  4524                           
  4525                           ; BSR set to: 2
  4526                           ;shared_logic.c: 233:     {;shared_logic.c: 234:         currentNumber = number[i] - '0'
      +                          ;
  4527  000A66  0EB7               	movlw	low show_score@number
  4528  000A68  25BB               	addwf	show_score@i& (0+255),w,b
  4529  000A6A  6ED9               	movwf	fsr2l,c
  4530  000A6C  6ADA               	clrf	fsr2h,c
  4531  000A6E  0E02               	movlw	high show_score@number
  4532  000A70  22DA               	addwfc	fsr2h,f,c
  4533  000A72  50DF               	movf	indf2,w,c
  4534  000A74  0FD0               	addlw	208
  4535  000A76  6FB6               	movwf	show_score@currentNumber& (0+255),b
  4536                           
  4537                           ; BSR set to: 2
  4538                           ;shared_logic.c: 235:         getNumber(currentNumber, tmpObjectData);
  4539  000A78  0EA5               	movlw	low show_score@tmpObjectData
  4540  000A7A  6E16               	movwf	getNumber@pTarget,c
  4541  000A7C  0E02               	movlw	high show_score@tmpObjectData
  4542  000A7E  6E17               	movwf	getNumber@pTarget+1,c
  4543  000A80  51B6               	movf	show_score@currentNumber& (0+255),w,b
  4544  000A82  ECDF  F010         	call	_getNumber
  4545                           
  4546                           ;shared_logic.c: 236:         moveObject(tmpObjectData, DOWN, (2-i) * 5);
  4547  000A86  0EA5               	movlw	low show_score@tmpObjectData
  4548  000A88  6E0C               	movwf	moveObject@pObject,c
  4549  000A8A  0E02               	movlw	high show_score@tmpObjectData
  4550  000A8C  6E0D               	movwf	moveObject@pObject+1,c
  4551  000A8E  0E00               	movlw	0
  4552  000A90  6E0E               	movwf	moveObject@direction,c
  4553  000A92  0102               	movlb	2	; () banked
  4554  000A94  51BB               	movf	show_score@i& (0+255),w,b
  4555  000A96  0802               	sublw	2
  4556  000A98  0D05               	mullw	5
  4557  000A9A  CFF3 F00F          	movff	prodl,moveObject@cycles
  4558  000A9E  EC79  F003         	call	_moveObject	;wreg free
  4559                           
  4560                           ;shared_logic.c: 237:         moveObject(tmpObjectData, RIGHT, i);
  4561  000AA2  0EA5               	movlw	low show_score@tmpObjectData
  4562  000AA4  6E0C               	movwf	moveObject@pObject,c
  4563  000AA6  0E02               	movlw	high show_score@tmpObjectData
  4564  000AA8  6E0D               	movwf	moveObject@pObject+1,c
  4565  000AAA  0E03               	movlw	3
  4566  000AAC  6E0E               	movwf	moveObject@direction,c
  4567  000AAE  C2BB  F00F         	movff	show_score@i,moveObject@cycles
  4568  000AB2  EC79  F003         	call	_moveObject	;wreg free
  4569                           
  4570                           ;shared_logic.c: 238:         mergeObjects(tmpObjectData, Numberscreen, MERGE);
  4571  000AB6  0EA5               	movlw	low show_score@tmpObjectData
  4572  000AB8  6E0C               	movwf	mergeObjects@pSource,c
  4573  000ABA  0E02               	movlw	high show_score@tmpObjectData
  4574  000ABC  6E0D               	movwf	mergeObjects@pSource+1,c
  4575  000ABE  0E95               	movlw	low show_score@Numberscreen
  4576  000AC0  6E0E               	movwf	mergeObjects@pTarget,c
  4577  000AC2  0E02               	movlw	high show_score@Numberscreen
  4578  000AC4  6E0F               	movwf	mergeObjects@pTarget+1,c
  4579  000AC6  0E01               	movlw	1
  4580  000AC8  6E10               	movwf	mergeObjects@mode,c
  4581  000ACA  ECEE  F007         	call	_mergeObjects	;wreg free
  4582                           
  4583                           ;shared_logic.c: 239:     }
  4584  000ACE  0102               	movlb	2	; () banked
  4585  000AD0  2BBB               	incf	show_score@i& (0+255),f,b
  4586  000AD2                     l5062:
  4587                           
  4588                           ; BSR set to: 2
  4589  000AD2  0E03               	movlw	3
  4590  000AD4  61BB               	cpfslt	show_score@i& (0+255),b
  4591  000AD6  D009               	goto	u4670
  4592                           
  4593                           ; BSR set to: 2
  4594  000AD8  0EB7               	movlw	low show_score@number
  4595  000ADA  25BB               	addwf	show_score@i& (0+255),w,b
  4596  000ADC  6ED9               	movwf	fsr2l,c
  4597  000ADE  6ADA               	clrf	fsr2h,c
  4598  000AE0  0E02               	movlw	high show_score@number
  4599  000AE2  22DA               	addwfc	fsr2h,f,c
  4600  000AE4  50DF               	movf	indf2,w,c
  4601  000AE6  A4D8               	btfss	status,2,c
  4602  000AE8  D7BE               	goto	l5050
  4603  000AEA                     u4670:
  4604                           
  4605                           ; BSR set to: 2
  4606                           ;shared_logic.c: 240:     pauseMultiplexing();
  4607  000AEA  ECC1  F011         	call	_pauseMultiplexing	;wreg free
  4608                           
  4609                           ;shared_logic.c: 241:     set_screen(Numberscreen);
  4610  000AEE  0E95               	movlw	low show_score@Numberscreen
  4611  000AF0  6E13               	movwf	set_screen@newData,c
  4612  000AF2  0E02               	movlw	high show_score@Numberscreen
  4613  000AF4  6E14               	movwf	set_screen@newData+1,c
  4614  000AF6  ECBF  F00D         	call	_set_screen	;wreg free
  4615                           
  4616                           ;shared_logic.c: 242:     resumeMultiplexing();
  4617  000AFA  EC3C  F012         	call	_resumeMultiplexing	;wreg free
  4618  000AFE                     l5072:
  4619                           
  4620                           ;shared_logic.c: 244:      while (checkDown(0))
  4621  000AFE  0E00               	movlw	0
  4622  000B00  EC1B  F011         	call	_checkDown
  4623  000B04  0900               	iorlw	0
  4624  000B06  A4D8               	btfss	status,2,c
  4625  000B08  D7FA               	goto	l5072
  4626  000B0A                     u4680:
  4627                           
  4628                           ;shared_logic.c: 247:     while (!checkDown(0))
  4629  000B0A  0E00               	movlw	0
  4630  000B0C  EC1B  F011         	call	_checkDown
  4631  000B10  0900               	iorlw	0
  4632  000B12  B4D8               	btfsc	status,2,c
  4633  000B14  D7FA               	goto	u4680
  4634                           
  4635                           ;shared_logic.c: 250:     uint16_t mask[] = {0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xf
      +                          fff, 0xffff, 0xffff};
  4636  000B16  EE20  F0DC         	lfsr	2,show_score@F2762
  4637  000B1A  EE12  F085         	lfsr	1,show_score@mask
  4638  000B1E  0E0F               	movlw	15
  4639  000B20                     u4701:
  4640  000B20  CFDB FFE3          	movff	plusw2,plusw1
  4641  000B24  06E8               	decf	wreg,f,c
  4642  000B26  E2FC               	bc	u4701
  4643                           
  4644                           ;shared_logic.c: 251:     mergeObjects(mask, Numberscreen, INVERT);
  4645  000B28  0E85               	movlw	low show_score@mask
  4646  000B2A  6E0C               	movwf	mergeObjects@pSource,c
  4647  000B2C  0E02               	movlw	high show_score@mask
  4648  000B2E  6E0D               	movwf	mergeObjects@pSource+1,c
  4649  000B30  0E95               	movlw	low show_score@Numberscreen
  4650  000B32  6E0E               	movwf	mergeObjects@pTarget,c
  4651  000B34  0E02               	movlw	high show_score@Numberscreen
  4652  000B36  6E0F               	movwf	mergeObjects@pTarget+1,c
  4653  000B38  0E02               	movlw	2
  4654  000B3A  6E10               	movwf	mergeObjects@mode,c
  4655  000B3C  ECEE  F007         	call	_mergeObjects	;wreg free
  4656                           
  4657                           ;shared_logic.c: 253:     pauseMultiplexing();
  4658  000B40  ECC1  F011         	call	_pauseMultiplexing	;wreg free
  4659                           
  4660                           ;shared_logic.c: 254:     set_screen(Numberscreen);
  4661  000B44  0E95               	movlw	low show_score@Numberscreen
  4662  000B46  6E13               	movwf	set_screen@newData,c
  4663  000B48  0E02               	movlw	high show_score@Numberscreen
  4664  000B4A  6E14               	movwf	set_screen@newData+1,c
  4665  000B4C  ECBF  F00D         	call	_set_screen	;wreg free
  4666                           
  4667                           ;shared_logic.c: 255:     resumeMultiplexing();
  4668  000B50  EC3C  F012         	call	_resumeMultiplexing	;wreg free
  4669  000B54                     l5086:
  4670                           
  4671                           ;shared_logic.c: 257:     while (checkDown(0))
  4672  000B54  0E00               	movlw	0
  4673  000B56  EC1B  F011         	call	_checkDown
  4674  000B5A  0900               	iorlw	0
  4675  000B5C  A4D8               	btfss	status,2,c
  4676  000B5E  D7FA               	goto	l5086
  4677                           
  4678                           ;shared_logic.c: 259:     pauseButtons();
  4679  000B60  EC34  F012         	call	_pauseButtons	;wreg free
  4680                           
  4681                           ;shared_logic.c: 261:     resumeButtons();
  4682  000B64  EC30  F012         	call	_resumeButtons	;wreg free
  4683  000B68  0012               	return		;funcret
  4684  000B6A                     __end_of_show_score:
  4685                           	opt callstack 0
  4686                           
  4687 ;; *************** function _resumeButtons *****************
  4688 ;; Defined at:
  4689 ;;		line 48 in file "buttons.c"
  4690 ;; Parameters:    Size  Location     Type
  4691 ;;		None
  4692 ;; Auto vars:     Size  Location     Type
  4693 ;;		None
  4694 ;; Return value:  Size  Location     Type
  4695 ;;                  1    wreg      void 
  4696 ;; Registers used:
  4697 ;;		wreg, status,2
  4698 ;; Tracked objects:
  4699 ;;		On entry : 0/0
  4700 ;;		On exit  : 0/0
  4701 ;;		Unchanged: 0/0
  4702 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4703 ;;      Params:         0       0       0       0       0       0       0
  4704 ;;      Locals:         0       0       0       0       0       0       0
  4705 ;;      Temps:          0       0       0       0       0       0       0
  4706 ;;      Totals:         0       0       0       0       0       0       0
  4707 ;;Total ram usage:        0 bytes
  4708 ;; Hardware stack levels used:    1
  4709 ;; Hardware stack levels required when called:    4
  4710 ;; This function calls:
  4711 ;;		Nothing
  4712 ;; This function is called by:
  4713 ;;		_show_score
  4714 ;; This function uses a non-reentrant model
  4715 ;;
  4716                           
  4717                           	psect	text36
  4718  002460                     __ptext36:
  4719                           	opt callstack 0
  4720  002460                     _resumeButtons:
  4721                           	opt callstack 23
  4722                           
  4723                           ;buttons.c: 50:     mtxButtons = 1;
  4724                           
  4725                           ;incstack = 0
  4726  002460  0E01               	movlw	1
  4727  002462  0100               	movlb	0	; () banked
  4728  002464  6FED               	movwf	_mtxButtons& (0+255),b	;volatile
  4729                           
  4730                           ; BSR set to: 0
  4731  002466  0012               	return		;funcret
  4732  002468                     __end_of_resumeButtons:
  4733                           	opt callstack 0
  4734                           
  4735 ;; *************** function _pauseButtons *****************
  4736 ;; Defined at:
  4737 ;;		line 43 in file "buttons.c"
  4738 ;; Parameters:    Size  Location     Type
  4739 ;;		None
  4740 ;; Auto vars:     Size  Location     Type
  4741 ;;		None
  4742 ;; Return value:  Size  Location     Type
  4743 ;;                  1    wreg      void 
  4744 ;; Registers used:
  4745 ;;		wreg, status,2
  4746 ;; Tracked objects:
  4747 ;;		On entry : 0/0
  4748 ;;		On exit  : 0/0
  4749 ;;		Unchanged: 0/0
  4750 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4751 ;;      Params:         0       0       0       0       0       0       0
  4752 ;;      Locals:         0       0       0       0       0       0       0
  4753 ;;      Temps:          0       0       0       0       0       0       0
  4754 ;;      Totals:         0       0       0       0       0       0       0
  4755 ;;Total ram usage:        0 bytes
  4756 ;; Hardware stack levels used:    1
  4757 ;; Hardware stack levels required when called:    4
  4758 ;; This function calls:
  4759 ;;		Nothing
  4760 ;; This function is called by:
  4761 ;;		_show_score
  4762 ;; This function uses a non-reentrant model
  4763 ;;
  4764                           
  4765                           	psect	text37
  4766  002468                     __ptext37:
  4767                           	opt callstack 0
  4768  002468                     _pauseButtons:
  4769                           	opt callstack 23
  4770                           
  4771                           ;buttons.c: 45:     mtxButtons = 0;
  4772                           
  4773                           ; BSR set to: 0
  4774                           ;incstack = 0
  4775  002468  0E00               	movlw	0
  4776  00246A  0100               	movlb	0	; () banked
  4777  00246C  6FED               	movwf	_mtxButtons& (0+255),b	;volatile
  4778                           
  4779                           ; BSR set to: 0
  4780  00246E  0012               	return		;funcret
  4781  002470                     __end_of_pauseButtons:
  4782                           	opt callstack 0
  4783                           
  4784 ;; *************** function _moveObject *****************
  4785 ;; Defined at:
  4786 ;;		line 100 in file "tetris.c"
  4787 ;; Parameters:    Size  Location     Type
  4788 ;;  pObject         2   11[COMRAM] PTR volatile unsigned sh
  4789 ;;		 -> show_score@tmpObjectData(16), tmpObjectData(16), ObjectData(16), 
  4790 ;;  direction       1   13[COMRAM] enum E2580
  4791 ;;  cycles          1   14[COMRAM] unsigned char 
  4792 ;; Auto vars:     Size  Location     Type
  4793 ;;  i               1   22[COMRAM] unsigned char 
  4794 ;;  c               1   21[COMRAM] unsigned char 
  4795 ;; Return value:  Size  Location     Type
  4796 ;;                  1    wreg      void 
  4797 ;; Registers used:
  4798 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  4799 ;; Tracked objects:
  4800 ;;		On entry : 0/0
  4801 ;;		On exit  : 0/0
  4802 ;;		Unchanged: 0/0
  4803 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4804 ;;      Params:         4       0       0       0       0       0       0
  4805 ;;      Locals:         2       0       0       0       0       0       0
  4806 ;;      Temps:          6       0       0       0       0       0       0
  4807 ;;      Totals:        12       0       0       0       0       0       0
  4808 ;;Total ram usage:       12 bytes
  4809 ;; Hardware stack levels used:    1
  4810 ;; Hardware stack levels required when called:    4
  4811 ;; This function calls:
  4812 ;;		Nothing
  4813 ;; This function is called by:
  4814 ;;		_moveObjectDown
  4815 ;;		_tetris_button_left
  4816 ;;		_tetris_button_right
  4817 ;;		_show_score
  4818 ;; This function uses a non-reentrant model
  4819 ;;
  4820                           
  4821                           	psect	text38
  4822  0006F2                     __ptext38:
  4823                           	opt callstack 0
  4824  0006F2                     _moveObject:
  4825                           	opt callstack 22
  4826                           
  4827                           ;tetris.c: 100: void moveObject(volatile uint16_t * pObject, direction_t direction, uint
      +                          8_t cycles);tetris.c: 101: {;tetris.c: 102:     uint8_t i, c;;tetris.c: 104:     switch 
      +                          (direction)
  4828                           
  4829                           ; BSR set to: 0
  4830                           ;incstack = 0
  4831  0006F2  D0B9               	goto	l4610
  4832  0006F4                     l4532:
  4833                           
  4834                           ;tetris.c: 107:         for (c = 0; c < cycles; c++)
  4835  0006F4  0E00               	movlw	0
  4836  0006F6  6E16               	movwf	moveObject@c,c
  4837  0006F8  D017               	goto	l4548
  4838  0006FA                     l4534:
  4839                           
  4840                           ;tetris.c: 108:         {;tetris.c: 109:             for (i = 0; i < 8; i++)
  4841  0006FA  0E00               	movlw	0
  4842  0006FC  6E17               	movwf	moveObject@i,c
  4843  0006FE                     l4540:
  4844                           
  4845                           ;tetris.c: 110:                 pObject[i] <<= 1;
  4846  0006FE  5017               	movf	moveObject@i,w,c
  4847  000700  0D02               	mullw	2
  4848  000702  CFF3 F010          	movff	prodl,??_moveObject
  4849  000706  CFF4 F011          	movff	prodh,??_moveObject+1
  4850  00070A  5010               	movf	??_moveObject,w,c
  4851  00070C  240C               	addwf	moveObject@pObject,w,c
  4852  00070E  6ED9               	movwf	fsr2l,c
  4853  000710  5011               	movf	??_moveObject+1,w,c
  4854  000712  200D               	addwfc	moveObject@pObject+1,w,c
  4855  000714  6EDA               	movwf	fsr2h,c
  4856  000716  90D8               	bcf	status,0,c
  4857  000718  36DE               	rlcf	postinc2,f,c
  4858  00071A  36DD               	rlcf	postdec2,f,c
  4859  00071C  2A17               	incf	moveObject@i,f,c
  4860  00071E  0E07               	movlw	7
  4861  000720  6417               	cpfsgt	moveObject@i,c
  4862  000722  D7ED               	goto	l4540
  4863                           
  4864                           ;tetris.c: 111:             OriginY++;
  4865  000724  2A3C               	incf	_OriginY,f,c
  4866                           
  4867                           ;tetris.c: 112:         }
  4868  000726  2A16               	incf	moveObject@c,f,c
  4869  000728                     l4548:
  4870  000728  500F               	movf	moveObject@cycles,w,c
  4871  00072A  5C16               	subwf	moveObject@c,w,c
  4872  00072C  B0D8               	btfsc	status,0,c
  4873  00072E  0012               	return	
  4874  000730  D7E4               	goto	l4534
  4875  000732                     l4550:
  4876                           
  4877                           ;tetris.c: 115:         for (c = 0; c < cycles; c++)
  4878  000732  0E00               	movlw	0
  4879  000734  6E16               	movwf	moveObject@c,c
  4880  000736  D018               	goto	l4566
  4881  000738                     l4552:
  4882                           
  4883                           ;tetris.c: 116:         {;tetris.c: 117:             for (i = 0; i < 8; i++)
  4884  000738  0E00               	movlw	0
  4885  00073A  6E17               	movwf	moveObject@i,c
  4886  00073C                     l4558:
  4887                           
  4888                           ;tetris.c: 118:                 pObject[i] >>= 1;
  4889  00073C  5017               	movf	moveObject@i,w,c
  4890  00073E  0D02               	mullw	2
  4891  000740  CFF3 F010          	movff	prodl,??_moveObject
  4892  000744  CFF4 F011          	movff	prodh,??_moveObject+1
  4893  000748  5010               	movf	??_moveObject,w,c
  4894  00074A  240C               	addwf	moveObject@pObject,w,c
  4895  00074C  6ED9               	movwf	fsr2l,c
  4896  00074E  5011               	movf	??_moveObject+1,w,c
  4897  000750  200D               	addwfc	moveObject@pObject+1,w,c
  4898  000752  6EDA               	movwf	fsr2h,c
  4899  000754  90D8               	bcf	status,0,c
  4900  000756  32DC               	rrcf	preinc2,f,c
  4901  000758  50DD               	movf	postdec2,w,c
  4902  00075A  32DF               	rrcf	indf2,f,c
  4903  00075C  2A17               	incf	moveObject@i,f,c
  4904  00075E  0E07               	movlw	7
  4905  000760  6417               	cpfsgt	moveObject@i,c
  4906  000762  D7EC               	goto	l4558
  4907                           
  4908                           ;tetris.c: 119:             OriginY--;
  4909  000764  063C               	decf	_OriginY,f,c
  4910                           
  4911                           ;tetris.c: 120:         }
  4912  000766  2A16               	incf	moveObject@c,f,c
  4913  000768                     l4566:
  4914  000768  500F               	movf	moveObject@cycles,w,c
  4915  00076A  5C16               	subwf	moveObject@c,w,c
  4916  00076C  B0D8               	btfsc	status,0,c
  4917  00076E  0012               	return	
  4918  000770  D7E3               	goto	l4552
  4919  000772                     l4568:
  4920                           
  4921                           ;tetris.c: 123:         for (c = 0; c < cycles; c++)
  4922  000772  0E00               	movlw	0
  4923  000774  6E16               	movwf	moveObject@c,c
  4924  000776  D034               	goto	l4586
  4925  000778                     l4570:
  4926                           
  4927                           ;tetris.c: 124:         {;tetris.c: 125:             for (i = 7; i > 0; i--)
  4928  000778  0E07               	movlw	7
  4929  00077A  6E17               	movwf	moveObject@i,c
  4930  00077C                     l4574:
  4931                           
  4932                           ;tetris.c: 126:                 pObject[i] = pObject[i-1];
  4933  00077C  5017               	movf	moveObject@i,w,c
  4934  00077E  6E10               	movwf	??_moveObject& (0+255),c
  4935  000780  6A11               	clrf	(??_moveObject+1)& (0+255),c
  4936  000782  90D8               	bcf	status,0,c
  4937  000784  3610               	rlcf	??_moveObject,f,c
  4938  000786  3611               	rlcf	??_moveObject+1,f,c
  4939  000788  C00C  F012         	movff	moveObject@pObject,??_moveObject+2
  4940  00078C  C00D  F013         	movff	moveObject@pObject+1,??_moveObject+3
  4941  000790  5010               	movf	??_moveObject,w,c
  4942  000792  2612               	addwf	??_moveObject+2,f,c
  4943  000794  5011               	movf	??_moveObject+1,w,c
  4944  000796  2213               	addwfc	??_moveObject+3,f,c
  4945  000798  0EFE               	movlw	254
  4946  00079A  2412               	addwf	??_moveObject+2,w,c
  4947  00079C  6ED9               	movwf	fsr2l,c
  4948  00079E  0EFF               	movlw	255
  4949  0007A0  2013               	addwfc	??_moveObject+3,w,c
  4950  0007A2  6EDA               	movwf	fsr2h,c
  4951  0007A4  5017               	movf	moveObject@i,w,c
  4952  0007A6  0D02               	mullw	2
  4953  0007A8  CFF3 F014          	movff	prodl,??_moveObject+4
  4954  0007AC  CFF4 F015          	movff	prodh,??_moveObject+5
  4955  0007B0  5014               	movf	??_moveObject+4,w,c
  4956  0007B2  240C               	addwf	moveObject@pObject,w,c
  4957  0007B4  6EE1               	movwf	fsr1l,c
  4958  0007B6  5015               	movf	??_moveObject+5,w,c
  4959  0007B8  200D               	addwfc	moveObject@pObject+1,w,c
  4960  0007BA  6EE2               	movwf	fsr1h,c
  4961  0007BC  CFDE FFE6          	movff	postinc2,postinc1
  4962  0007C0  CFDD FFE5          	movff	postdec2,postdec1
  4963  0007C4  0617               	decf	moveObject@i,f,c
  4964  0007C6  5017               	movf	moveObject@i,w,c
  4965  0007C8  A4D8               	btfss	status,2,c
  4966  0007CA  D7D8               	goto	l4574
  4967                           
  4968                           ;tetris.c: 127:             pObject[0] = 0;
  4969  0007CC  C00C  FFD9         	movff	moveObject@pObject,fsr2l
  4970  0007D0  C00D  FFDA         	movff	moveObject@pObject+1,fsr2h
  4971  0007D4  0E00               	movlw	0
  4972  0007D6  6EDE               	movwf	postinc2,c
  4973  0007D8  0E00               	movlw	0
  4974  0007DA  6EDD               	movwf	postdec2,c
  4975                           
  4976                           ;tetris.c: 128:             OriginX++;
  4977  0007DC  2A3D               	incf	_OriginX,f,c
  4978                           
  4979                           ;tetris.c: 129:         }
  4980  0007DE  2A16               	incf	moveObject@c,f,c
  4981  0007E0                     l4586:
  4982  0007E0  500F               	movf	moveObject@cycles,w,c
  4983  0007E2  5C16               	subwf	moveObject@c,w,c
  4984  0007E4  B0D8               	btfsc	status,0,c
  4985  0007E6  0012               	return	
  4986  0007E8  D7C7               	goto	l4570
  4987  0007EA                     l4588:
  4988                           
  4989                           ;tetris.c: 132:         for (c = 0; c < cycles; c++)
  4990  0007EA  0E00               	movlw	0
  4991  0007EC  6E16               	movwf	moveObject@c,c
  4992  0007EE  D036               	goto	l4608
  4993  0007F0                     l4590:
  4994                           
  4995                           ;tetris.c: 133:         {;tetris.c: 134:             for (i = 0; i < 7; i++)
  4996  0007F0  0E00               	movlw	0
  4997  0007F2  6E17               	movwf	moveObject@i,c
  4998  0007F4                     l4596:
  4999                           
  5000                           ;tetris.c: 135:                 pObject[i] = pObject[i+1];
  5001  0007F4  5017               	movf	moveObject@i,w,c
  5002  0007F6  6E10               	movwf	??_moveObject& (0+255),c
  5003  0007F8  6A11               	clrf	(??_moveObject+1)& (0+255),c
  5004  0007FA  90D8               	bcf	status,0,c
  5005  0007FC  3610               	rlcf	??_moveObject,f,c
  5006  0007FE  3611               	rlcf	??_moveObject+1,f,c
  5007  000800  C00C  F012         	movff	moveObject@pObject,??_moveObject+2
  5008  000804  C00D  F013         	movff	moveObject@pObject+1,??_moveObject+3
  5009  000808  5010               	movf	??_moveObject,w,c
  5010  00080A  2612               	addwf	??_moveObject+2,f,c
  5011  00080C  5011               	movf	??_moveObject+1,w,c
  5012  00080E  2213               	addwfc	??_moveObject+3,f,c
  5013  000810  0E02               	movlw	2
  5014  000812  2412               	addwf	??_moveObject+2,w,c
  5015  000814  6ED9               	movwf	fsr2l,c
  5016  000816  0E00               	movlw	0
  5017  000818  2013               	addwfc	??_moveObject+3,w,c
  5018  00081A  6EDA               	movwf	fsr2h,c
  5019  00081C  5017               	movf	moveObject@i,w,c
  5020  00081E  0D02               	mullw	2
  5021  000820  CFF3 F014          	movff	prodl,??_moveObject+4
  5022  000824  CFF4 F015          	movff	prodh,??_moveObject+5
  5023  000828  5014               	movf	??_moveObject+4,w,c
  5024  00082A  240C               	addwf	moveObject@pObject,w,c
  5025  00082C  6EE1               	movwf	fsr1l,c
  5026  00082E  5015               	movf	??_moveObject+5,w,c
  5027  000830  200D               	addwfc	moveObject@pObject+1,w,c
  5028  000832  6EE2               	movwf	fsr1h,c
  5029  000834  CFDE FFE6          	movff	postinc2,postinc1
  5030  000838  CFDD FFE5          	movff	postdec2,postdec1
  5031  00083C  2A17               	incf	moveObject@i,f,c
  5032  00083E  0E06               	movlw	6
  5033  000840  6417               	cpfsgt	moveObject@i,c
  5034  000842  D7D8               	goto	l4596
  5035                           
  5036                           ;tetris.c: 136:             pObject[7] = 0;
  5037  000844  EE20 F00E          	lfsr	2,14
  5038  000848  500C               	movf	moveObject@pObject,w,c
  5039  00084A  26D9               	addwf	fsr2l,f,c
  5040  00084C  500D               	movf	moveObject@pObject+1,w,c
  5041  00084E  22DA               	addwfc	fsr2h,f,c
  5042  000850  0E00               	movlw	0
  5043  000852  6EDE               	movwf	postinc2,c
  5044  000854  0E00               	movlw	0
  5045  000856  6EDD               	movwf	postdec2,c
  5046                           
  5047                           ;tetris.c: 137:             OriginX--;
  5048  000858  063D               	decf	_OriginX,f,c
  5049                           
  5050                           ;tetris.c: 138:         }
  5051  00085A  2A16               	incf	moveObject@c,f,c
  5052  00085C                     l4608:
  5053  00085C  500F               	movf	moveObject@cycles,w,c
  5054  00085E  5C16               	subwf	moveObject@c,w,c
  5055  000860  B0D8               	btfsc	status,0,c
  5056  000862  0012               	return	
  5057  000864  D7C5               	goto	l4590
  5058  000866                     l4610:
  5059  000866  500E               	movf	moveObject@direction,w,c
  5060  000868  6E10               	movwf	??_moveObject& (0+255),c
  5061  00086A  6A11               	clrf	(??_moveObject+1)& (0+255),c
  5062                           
  5063                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  5064                           ; Switch size 1, requested type "simple"
  5065                           ; Number of cases is 1, Range of values is 0 to 0
  5066                           ; switch strategies available:
  5067                           ; Name         Instructions Cycles
  5068                           ; simple_byte            4     3 (average)
  5069                           ;	Chosen strategy is simple_byte
  5070  00086C  5011               	movf	??_moveObject+1,w,c
  5071  00086E  0A00               	xorlw	0	; case 0
  5072  000870  A4D8               	btfss	status,2,c
  5073  000872  0012               	return	
  5074                           
  5075                           ; Switch size 1, requested type "simple"
  5076                           ; Number of cases is 4, Range of values is 0 to 3
  5077                           ; switch strategies available:
  5078                           ; Name         Instructions Cycles
  5079                           ; simple_byte           13     7 (average)
  5080                           ;	Chosen strategy is simple_byte
  5081  000874  5010               	movf	??_moveObject,w,c
  5082  000876  0A00               	xorlw	0	; case 0
  5083  000878  B4D8               	btfsc	status,2,c
  5084  00087A  D73C               	goto	l4532
  5085  00087C  0A01               	xorlw	1	; case 1
  5086  00087E  B4D8               	btfsc	status,2,c
  5087  000880  D758               	goto	l4550
  5088  000882  0A03               	xorlw	3	; case 2
  5089  000884  B4D8               	btfsc	status,2,c
  5090  000886  D7B1               	goto	l4588
  5091  000888  0A01               	xorlw	1	; case 3
  5092  00088A  A4D8               	btfss	status,2,c
  5093  00088C  0012               	return	
  5094  00088E  D771               	goto	l4568
  5095  000890                     __end_of_moveObject:
  5096                           	opt callstack 0
  5097                           
  5098 ;; *************** function _itoa *****************
  5099 ;; Defined at:
  5100 ;;		line 68 in file "shared_logic.c"
  5101 ;; Parameters:    Size  Location     Type
  5102 ;;  value           2   25[COMRAM] int 
  5103 ;;  str             2   27[COMRAM] PTR unsigned char 
  5104 ;;		 -> show_score@number(4), 
  5105 ;;  bas             2   29[COMRAM] int 
  5106 ;; Auto vars:     Size  Location     Type
  5107 ;;  rem             2   34[COMRAM] int 
  5108 ;;  i               2   36[COMRAM] int 
  5109 ;;  isNegative      1   33[COMRAM] _Bool 
  5110 ;; Return value:  Size  Location     Type
  5111 ;;                  2   25[COMRAM] PTR unsigned char 
  5112 ;; Registers used:
  5113 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  5114 ;; Tracked objects:
  5115 ;;		On entry : 0/0
  5116 ;;		On exit  : 0/0
  5117 ;;		Unchanged: 0/0
  5118 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5119 ;;      Params:         6       0       0       0       0       0       0
  5120 ;;      Locals:         7       0       0       0       0       0       0
  5121 ;;      Temps:          0       0       0       0       0       0       0
  5122 ;;      Totals:        13       0       0       0       0       0       0
  5123 ;;Total ram usage:       13 bytes
  5124 ;; Hardware stack levels used:    1
  5125 ;; Hardware stack levels required when called:    6
  5126 ;; This function calls:
  5127 ;;		___awdiv
  5128 ;;		___awmod
  5129 ;;		_reverse
  5130 ;; This function is called by:
  5131 ;;		_show_score
  5132 ;; This function uses a non-reentrant model
  5133 ;;
  5134                           
  5135                           	psect	text39
  5136  0010E4                     __ptext39:
  5137                           	opt callstack 0
  5138  0010E4                     _itoa:
  5139                           	opt callstack 21
  5140                           
  5141                           ;shared_logic.c: 68: char * itoa(int value, char * str, int bas);shared_logic.c: 69: {;s
      +                          hared_logic.c: 70:     int i = 0;
  5142                           
  5143                           ;incstack = 0
  5144  0010E4  0E00               	movlw	0
  5145  0010E6  6E26               	movwf	itoa@i+1,c
  5146  0010E8  0E00               	movlw	0
  5147  0010EA  6E25               	movwf	itoa@i,c
  5148                           
  5149                           ;shared_logic.c: 71:     _Bool isNegative = 0;
  5150  0010EC  0E00               	movlw	0
  5151  0010EE  6E22               	movwf	itoa@isNegative,c
  5152                           
  5153                           ;shared_logic.c: 74:     if (value == 0)
  5154  0010F0  501A               	movf	itoa@value,w,c
  5155  0010F2  101B               	iorwf	itoa@value+1,w,c
  5156  0010F4  A4D8               	btfss	status,2,c
  5157  0010F6  D011               	goto	l4946
  5158                           
  5159                           ;shared_logic.c: 75:     {;shared_logic.c: 76:         str[i++] = '0';
  5160  0010F8  C01C  FFD9         	movff	itoa@str,fsr2l
  5161  0010FC  C01D  FFDA         	movff	itoa@str+1,fsr2h
  5162  001100  0E30               	movlw	48
  5163  001102  6EDF               	movwf	indf2,c
  5164  001104  4A25               	infsnz	itoa@i,f,c
  5165  001106  2A26               	incf	itoa@i+1,f,c
  5166                           
  5167                           ;shared_logic.c: 77:         str[i] = '\0';
  5168  001108  5025               	movf	itoa@i,w,c
  5169  00110A  241C               	addwf	itoa@str,w,c
  5170  00110C  6ED9               	movwf	fsr2l,c
  5171  00110E  5026               	movf	itoa@i+1,w,c
  5172  001110  201D               	addwfc	itoa@str+1,w,c
  5173  001112  6EDA               	movwf	fsr2h,c
  5174  001114  0E00               	movlw	0
  5175  001116  6EDF               	movwf	indf2,c
  5176  001118  0012               	return	
  5177  00111A                     l4946:
  5178                           
  5179                           ;shared_logic.c: 83:     if (value < 0 && bas == 10)
  5180  00111A  AE1B               	btfss	itoa@value+1,7,c
  5181  00111C  D042               	goto	l4968
  5182  00111E  0E0A               	movlw	10
  5183  001120  181E               	xorwf	itoa@bas,w,c
  5184  001122  101F               	iorwf	itoa@bas+1,w,c
  5185  001124  A4D8               	btfss	status,2,c
  5186  001126  D03D               	goto	l4968
  5187                           
  5188                           ;shared_logic.c: 84:     {;shared_logic.c: 85:         isNegative = 1;
  5189  001128  0E01               	movlw	1
  5190  00112A  6E22               	movwf	itoa@isNegative,c
  5191                           
  5192                           ;shared_logic.c: 86:         value = -value;
  5193  00112C  6C1A               	negf	itoa@value,c
  5194  00112E  1E1B               	comf	itoa@value+1,f,c
  5195  001130  B0D8               	btfsc	status,0,c
  5196  001132  2A1B               	incf	itoa@value+1,f,c
  5197  001134  D036               	goto	l4968
  5198  001136                     l4954:
  5199                           
  5200                           ;shared_logic.c: 91:     {;shared_logic.c: 92:         int rem = value % bas;
  5201  001136  C01A  F00C         	movff	itoa@value,___awmod@dividend
  5202  00113A  C01B  F00D         	movff	itoa@value+1,___awmod@dividend+1
  5203  00113E  C01E  F00E         	movff	itoa@bas,___awmod@divisor
  5204  001142  C01F  F00F         	movff	itoa@bas+1,___awmod@divisor+1
  5205  001146  EC1C  F00D         	call	___awmod	;wreg free
  5206  00114A  C00C  F023         	movff	?___awmod,itoa@rem
  5207  00114E  C00D  F024         	movff	?___awmod+1,itoa@rem+1
  5208                           
  5209                           ;shared_logic.c: 93:         str[i++] = (rem > 9)? (rem-10) + 'a' : rem + '0';
  5210  001152  BE24               	btfsc	itoa@rem+1,7,c
  5211  001154  D006               	goto	u4570
  5212  001156  5024               	movf	itoa@rem+1,w,c
  5213  001158  E106               	bnz	l4960
  5214  00115A  0E0A               	movlw	10
  5215  00115C  5C23               	subwf	itoa@rem,w,c
  5216  00115E  B0D8               	btfsc	status,0,c
  5217  001160  D002               	goto	l4960
  5218  001162                     u4570:
  5219  001162  0E30               	movlw	48
  5220  001164  D001               	goto	L2
  5221  001166                     l4960:
  5222  001166  0E57               	movlw	87
  5223  001168                     L2:
  5224  001168  2423               	addwf	itoa@rem,w,c
  5225  00116A  6E20               	movwf	_itoa$762,c
  5226  00116C  0E00               	movlw	0
  5227  00116E  2024               	addwfc	itoa@rem+1,w,c
  5228  001170  6E21               	movwf	_itoa$762+1,c
  5229  001172  5025               	movf	itoa@i,w,c
  5230  001174  241C               	addwf	itoa@str,w,c
  5231  001176  6ED9               	movwf	fsr2l,c
  5232  001178  5026               	movf	itoa@i+1,w,c
  5233  00117A  201D               	addwfc	itoa@str+1,w,c
  5234  00117C  6EDA               	movwf	fsr2h,c
  5235  00117E  C020  FFDF         	movff	_itoa$762,indf2
  5236  001182  4A25               	infsnz	itoa@i,f,c
  5237  001184  2A26               	incf	itoa@i+1,f,c
  5238                           
  5239                           ;shared_logic.c: 94:         value = value/bas;
  5240  001186  C01A  F00C         	movff	itoa@value,___awdiv@dividend
  5241  00118A  C01B  F00D         	movff	itoa@value+1,___awdiv@dividend+1
  5242  00118E  C01E  F00E         	movff	itoa@bas,___awdiv@divisor
  5243  001192  C01F  F00F         	movff	itoa@bas+1,___awdiv@divisor+1
  5244  001196  EC61  F00B         	call	___awdiv	;wreg free
  5245  00119A  C00C  F01A         	movff	?___awdiv,itoa@value
  5246  00119E  C00D  F01B         	movff	?___awdiv+1,itoa@value+1
  5247  0011A2                     l4968:
  5248                           
  5249                           ;shared_logic.c: 90:     while (value != 0)
  5250  0011A2  501A               	movf	itoa@value,w,c
  5251  0011A4  101B               	iorwf	itoa@value+1,w,c
  5252  0011A6  A4D8               	btfss	status,2,c
  5253  0011A8  D7C6               	goto	l4954
  5254                           
  5255                           ;shared_logic.c: 98:     if (isNegative)
  5256  0011AA  5022               	movf	itoa@isNegative,w,c
  5257  0011AC  B4D8               	btfsc	status,2,c
  5258  0011AE  D00A               	goto	l4976
  5259                           
  5260                           ;shared_logic.c: 99:         str[i++] = '-';
  5261  0011B0  5025               	movf	itoa@i,w,c
  5262  0011B2  241C               	addwf	itoa@str,w,c
  5263  0011B4  6ED9               	movwf	fsr2l,c
  5264  0011B6  5026               	movf	itoa@i+1,w,c
  5265  0011B8  201D               	addwfc	itoa@str+1,w,c
  5266  0011BA  6EDA               	movwf	fsr2h,c
  5267  0011BC  0E2D               	movlw	45
  5268  0011BE  6EDF               	movwf	indf2,c
  5269  0011C0  4A25               	infsnz	itoa@i,f,c
  5270  0011C2  2A26               	incf	itoa@i+1,f,c
  5271  0011C4                     l4976:
  5272                           
  5273                           ;shared_logic.c: 101:     str[i] = '\0';
  5274  0011C4  5025               	movf	itoa@i,w,c
  5275  0011C6  241C               	addwf	itoa@str,w,c
  5276  0011C8  6ED9               	movwf	fsr2l,c
  5277  0011CA  5026               	movf	itoa@i+1,w,c
  5278  0011CC  201D               	addwfc	itoa@str+1,w,c
  5279  0011CE  6EDA               	movwf	fsr2h,c
  5280  0011D0  0E00               	movlw	0
  5281  0011D2  6EDF               	movwf	indf2,c
  5282                           
  5283                           ;shared_logic.c: 104:     reverse(str, i);
  5284  0011D4  C01C  F011         	movff	itoa@str,reverse@str
  5285  0011D8  C01D  F012         	movff	itoa@str+1,reverse@str+1
  5286  0011DC  C025  F013         	movff	itoa@i,reverse@length
  5287  0011E0  C026  F014         	movff	itoa@i+1,reverse@length+1
  5288  0011E4  EC08  F00F         	call	_reverse	;wreg free
  5289  0011E8  0012               	return		;funcret
  5290  0011EA                     __end_of_itoa:
  5291                           	opt callstack 0
  5292                           
  5293 ;; *************** function _reverse *****************
  5294 ;; Defined at:
  5295 ;;		line 56 in file "shared_logic.c"
  5296 ;; Parameters:    Size  Location     Type
  5297 ;;  str             2   16[COMRAM] PTR unsigned char 
  5298 ;;		 -> show_score@number(4), 
  5299 ;;  length          2   18[COMRAM] int 
  5300 ;; Auto vars:     Size  Location     Type
  5301 ;;  end             2   23[COMRAM] int 
  5302 ;;  start           2   21[COMRAM] int 
  5303 ;; Return value:  Size  Location     Type
  5304 ;;                  1    wreg      void 
  5305 ;; Registers used:
  5306 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  5307 ;; Tracked objects:
  5308 ;;		On entry : 0/0
  5309 ;;		On exit  : 0/0
  5310 ;;		Unchanged: 0/0
  5311 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5312 ;;      Params:         4       0       0       0       0       0       0
  5313 ;;      Locals:         4       0       0       0       0       0       0
  5314 ;;      Temps:          1       0       0       0       0       0       0
  5315 ;;      Totals:         9       0       0       0       0       0       0
  5316 ;;Total ram usage:        9 bytes
  5317 ;; Hardware stack levels used:    1
  5318 ;; Hardware stack levels required when called:    5
  5319 ;; This function calls:
  5320 ;;		_swap
  5321 ;; This function is called by:
  5322 ;;		_itoa
  5323 ;; This function uses a non-reentrant model
  5324 ;;
  5325                           
  5326                           	psect	text40
  5327  001E10                     __ptext40:
  5328                           	opt callstack 0
  5329  001E10                     _reverse:
  5330                           	opt callstack 21
  5331                           
  5332                           ;shared_logic.c: 56: void reverse(char str[], int length);shared_logic.c: 57: {;shared_l
      +                          ogic.c: 58:     int start = 0;
  5333                           
  5334                           ;incstack = 0
  5335  001E10  0E00               	movlw	0
  5336  001E12  6E17               	movwf	reverse@start+1,c
  5337  001E14  0E00               	movlw	0
  5338  001E16  6E16               	movwf	reverse@start,c
  5339                           
  5340                           ;shared_logic.c: 59:     int end = length -1;
  5341  001E18  0EFF               	movlw	255
  5342  001E1A  2413               	addwf	reverse@length,w,c
  5343  001E1C  6E18               	movwf	reverse@end,c
  5344  001E1E  0EFF               	movlw	255
  5345  001E20  2014               	addwfc	reverse@length+1,w,c
  5346  001E22  6E19               	movwf	reverse@end+1,c
  5347                           
  5348                           ;shared_logic.c: 60:     while (start < end)
  5349  001E24  D013               	goto	l4746
  5350  001E26                     l4740:
  5351                           
  5352                           ;shared_logic.c: 61:     {;shared_logic.c: 62:         swap(str+start, str+end);
  5353  001E26  5016               	movf	reverse@start,w,c
  5354  001E28  2411               	addwf	reverse@str,w,c
  5355  001E2A  6E0C               	movwf	swap@a,c
  5356  001E2C  5017               	movf	reverse@start+1,w,c
  5357  001E2E  2012               	addwfc	reverse@str+1,w,c
  5358  001E30  6E0D               	movwf	swap@a+1,c
  5359  001E32  5018               	movf	reverse@end,w,c
  5360  001E34  2411               	addwf	reverse@str,w,c
  5361  001E36  6E0E               	movwf	swap@b,c
  5362  001E38  5019               	movf	reverse@end+1,w,c
  5363  001E3A  2012               	addwfc	reverse@str+1,w,c
  5364  001E3C  6E0F               	movwf	swap@b+1,c
  5365  001E3E  EC61  F010         	call	_swap	;wreg free
  5366                           
  5367                           ;shared_logic.c: 63:         start++;
  5368  001E42  4A16               	infsnz	reverse@start,f,c
  5369  001E44  2A17               	incf	reverse@start+1,f,c
  5370                           
  5371                           ;shared_logic.c: 64:         end--;
  5372  001E46  0618               	decf	reverse@end,f,c
  5373  001E48  A0D8               	btfss	status,0,c
  5374  001E4A  0619               	decf	reverse@end+1,f,c
  5375  001E4C                     l4746:
  5376                           
  5377                           ;shared_logic.c: 60:     while (start < end)
  5378  001E4C  5018               	movf	reverse@end,w,c
  5379  001E4E  5C16               	subwf	reverse@start,w,c
  5380  001E50  5017               	movf	reverse@start+1,w,c
  5381  001E52  0A80               	xorlw	128
  5382  001E54  6E15               	movwf	??_reverse& (0+255),c
  5383  001E56  5019               	movf	reverse@end+1,w,c
  5384  001E58  0A80               	xorlw	128
  5385  001E5A  5815               	subwfb	??_reverse& (0+255),w,c
  5386  001E5C  B0D8               	btfsc	status,0,c
  5387  001E5E  0012               	return	
  5388  001E60  D7E2               	goto	l4740
  5389  001E62                     __end_of_reverse:
  5390                           	opt callstack 0
  5391                           
  5392 ;; *************** function _swap *****************
  5393 ;; Defined at:
  5394 ;;		line 48 in file "shared_logic.c"
  5395 ;; Parameters:    Size  Location     Type
  5396 ;;  a               2   11[COMRAM] PTR unsigned char 
  5397 ;;		 -> show_score@number(4), 
  5398 ;;  b               2   13[COMRAM] PTR unsigned char 
  5399 ;;		 -> show_score@number(4), 
  5400 ;; Auto vars:     Size  Location     Type
  5401 ;;  t               1   15[COMRAM] unsigned char 
  5402 ;; Return value:  Size  Location     Type
  5403 ;;                  1    wreg      void 
  5404 ;; Registers used:
  5405 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2
  5406 ;; Tracked objects:
  5407 ;;		On entry : 0/0
  5408 ;;		On exit  : 0/0
  5409 ;;		Unchanged: 0/0
  5410 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5411 ;;      Params:         4       0       0       0       0       0       0
  5412 ;;      Locals:         1       0       0       0       0       0       0
  5413 ;;      Temps:          0       0       0       0       0       0       0
  5414 ;;      Totals:         5       0       0       0       0       0       0
  5415 ;;Total ram usage:        5 bytes
  5416 ;; Hardware stack levels used:    1
  5417 ;; Hardware stack levels required when called:    4
  5418 ;; This function calls:
  5419 ;;		Nothing
  5420 ;; This function is called by:
  5421 ;;		_reverse
  5422 ;; This function uses a non-reentrant model
  5423 ;;
  5424                           
  5425                           	psect	text41
  5426  0020C2                     __ptext41:
  5427                           	opt callstack 0
  5428  0020C2                     _swap:
  5429                           	opt callstack 21
  5430                           
  5431                           ;shared_logic.c: 48: void swap(char* a, char* b);shared_logic.c: 49: {;shared_logic.c: 5
      +                          0:     char t = *a;
  5432                           
  5433                           ;incstack = 0
  5434  0020C2  C00C  FFD9         	movff	swap@a,fsr2l
  5435  0020C6  C00D  FFDA         	movff	swap@a+1,fsr2h
  5436  0020CA  50DF               	movf	indf2,w,c
  5437  0020CC  6E10               	movwf	swap@t,c
  5438                           
  5439                           ;shared_logic.c: 51:     *a = *b;
  5440  0020CE  C00E  FFD9         	movff	swap@b,fsr2l
  5441  0020D2  C00F  FFDA         	movff	swap@b+1,fsr2h
  5442  0020D6  C00C  FFE1         	movff	swap@a,fsr1l
  5443  0020DA  C00D  FFE2         	movff	swap@a+1,fsr1h
  5444  0020DE  CFDF FFE7          	movff	indf2,indf1
  5445                           
  5446                           ;shared_logic.c: 52:     *b = t;
  5447  0020E2  C00E  FFD9         	movff	swap@b,fsr2l
  5448  0020E6  C00F  FFDA         	movff	swap@b+1,fsr2h
  5449  0020EA  C010  FFDF         	movff	swap@t,indf2
  5450  0020EE  0012               	return		;funcret
  5451  0020F0                     __end_of_swap:
  5452                           	opt callstack 0
  5453                           
  5454 ;; *************** function ___awmod *****************
  5455 ;; Defined at:
  5456 ;;		line 7 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\awmod.c"
  5457 ;; Parameters:    Size  Location     Type
  5458 ;;  dividend        2   11[COMRAM] int 
  5459 ;;  divisor         2   13[COMRAM] int 
  5460 ;; Auto vars:     Size  Location     Type
  5461 ;;  sign            1   16[COMRAM] unsigned char 
  5462 ;;  counter         1   15[COMRAM] unsigned char 
  5463 ;; Return value:  Size  Location     Type
  5464 ;;                  2   11[COMRAM] int 
  5465 ;; Registers used:
  5466 ;;		wreg, status,2, status,0
  5467 ;; Tracked objects:
  5468 ;;		On entry : 0/0
  5469 ;;		On exit  : 0/0
  5470 ;;		Unchanged: 0/0
  5471 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5472 ;;      Params:         4       0       0       0       0       0       0
  5473 ;;      Locals:         2       0       0       0       0       0       0
  5474 ;;      Temps:          0       0       0       0       0       0       0
  5475 ;;      Totals:         6       0       0       0       0       0       0
  5476 ;;Total ram usage:        6 bytes
  5477 ;; Hardware stack levels used:    1
  5478 ;; Hardware stack levels required when called:    4
  5479 ;; This function calls:
  5480 ;;		Nothing
  5481 ;; This function is called by:
  5482 ;;		_selectNextObject
  5483 ;;		_itoa
  5484 ;; This function uses a non-reentrant model
  5485 ;;
  5486                           
  5487                           	psect	text42
  5488  001A38                     __ptext42:
  5489                           	opt callstack 0
  5490  001A38                     ___awmod:
  5491                           	opt callstack 20
  5492                           
  5493                           ;incstack = 0
  5494  001A38  0E00               	movlw	0
  5495  001A3A  6E11               	movwf	___awmod@sign,c
  5496  001A3C  AE0D               	btfss	___awmod@dividend+1,7,c
  5497  001A3E  D006               	goto	l4394
  5498  001A40  6C0C               	negf	___awmod@dividend,c
  5499  001A42  1E0D               	comf	___awmod@dividend+1,f,c
  5500  001A44  B0D8               	btfsc	status,0,c
  5501  001A46  2A0D               	incf	___awmod@dividend+1,f,c
  5502  001A48  0E01               	movlw	1
  5503  001A4A  6E11               	movwf	___awmod@sign,c
  5504  001A4C                     l4394:
  5505  001A4C  AE0F               	btfss	___awmod@divisor+1,7,c
  5506  001A4E  D004               	goto	l4398
  5507  001A50  6C0E               	negf	___awmod@divisor,c
  5508  001A52  1E0F               	comf	___awmod@divisor+1,f,c
  5509  001A54  B0D8               	btfsc	status,0,c
  5510  001A56  2A0F               	incf	___awmod@divisor+1,f,c
  5511  001A58                     l4398:
  5512  001A58  500E               	movf	___awmod@divisor,w,c
  5513  001A5A  100F               	iorwf	___awmod@divisor+1,w,c
  5514  001A5C  B4D8               	btfsc	status,2,c
  5515  001A5E  D018               	goto	l4414
  5516  001A60  0E01               	movlw	1
  5517  001A62  6E10               	movwf	___awmod@counter,c
  5518  001A64  D004               	goto	l4404
  5519  001A66                     l4402:
  5520  001A66  90D8               	bcf	status,0,c
  5521  001A68  360E               	rlcf	___awmod@divisor,f,c
  5522  001A6A  360F               	rlcf	___awmod@divisor+1,f,c
  5523  001A6C  2A10               	incf	___awmod@counter,f,c
  5524  001A6E                     l4404:
  5525  001A6E  AE0F               	btfss	___awmod@divisor+1,7,c
  5526  001A70  D7FA               	goto	l4402
  5527  001A72                     u3870:
  5528  001A72  500E               	movf	___awmod@divisor,w,c
  5529  001A74  5C0C               	subwf	___awmod@dividend,w,c
  5530  001A76  500F               	movf	___awmod@divisor+1,w,c
  5531  001A78  580D               	subwfb	___awmod@dividend+1,w,c
  5532  001A7A  A0D8               	btfss	status,0,c
  5533  001A7C  D004               	goto	l4410
  5534  001A7E  500E               	movf	___awmod@divisor,w,c
  5535  001A80  5E0C               	subwf	___awmod@dividend,f,c
  5536  001A82  500F               	movf	___awmod@divisor+1,w,c
  5537  001A84  5A0D               	subwfb	___awmod@dividend+1,f,c
  5538  001A86                     l4410:
  5539  001A86  90D8               	bcf	status,0,c
  5540  001A88  320F               	rrcf	___awmod@divisor+1,f,c
  5541  001A8A  320E               	rrcf	___awmod@divisor,f,c
  5542  001A8C  2E10               	decfsz	___awmod@counter,f,c
  5543  001A8E  D7F1               	goto	u3870
  5544  001A90                     l4414:
  5545  001A90  5011               	movf	___awmod@sign,w,c
  5546  001A92  B4D8               	btfsc	status,2,c
  5547  001A94  D004               	goto	l4418
  5548  001A96  6C0C               	negf	___awmod@dividend,c
  5549  001A98  1E0D               	comf	___awmod@dividend+1,f,c
  5550  001A9A  B0D8               	btfsc	status,0,c
  5551  001A9C  2A0D               	incf	___awmod@dividend+1,f,c
  5552  001A9E                     l4418:
  5553  001A9E  C00C  F00C         	movff	___awmod@dividend,?___awmod
  5554  001AA2  C00D  F00D         	movff	___awmod@dividend+1,?___awmod+1
  5555  001AA6  0012               	return		;funcret
  5556  001AA8                     __end_of___awmod:
  5557                           	opt callstack 0
  5558                           
  5559 ;; *************** function ___awdiv *****************
  5560 ;; Defined at:
  5561 ;;		line 7 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\awdiv.c"
  5562 ;; Parameters:    Size  Location     Type
  5563 ;;  dividend        2   11[COMRAM] int 
  5564 ;;  divisor         2   13[COMRAM] int 
  5565 ;; Auto vars:     Size  Location     Type
  5566 ;;  quotient        2   17[COMRAM] int 
  5567 ;;  sign            1   16[COMRAM] unsigned char 
  5568 ;;  counter         1   15[COMRAM] unsigned char 
  5569 ;; Return value:  Size  Location     Type
  5570 ;;                  2   11[COMRAM] int 
  5571 ;; Registers used:
  5572 ;;		wreg, status,2, status,0
  5573 ;; Tracked objects:
  5574 ;;		On entry : 0/0
  5575 ;;		On exit  : 0/0
  5576 ;;		Unchanged: 0/0
  5577 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5578 ;;      Params:         4       0       0       0       0       0       0
  5579 ;;      Locals:         4       0       0       0       0       0       0
  5580 ;;      Temps:          0       0       0       0       0       0       0
  5581 ;;      Totals:         8       0       0       0       0       0       0
  5582 ;;Total ram usage:        8 bytes
  5583 ;; Hardware stack levels used:    1
  5584 ;; Hardware stack levels required when called:    4
  5585 ;; This function calls:
  5586 ;;		Nothing
  5587 ;; This function is called by:
  5588 ;;		_itoa
  5589 ;; This function uses a non-reentrant model
  5590 ;;
  5591                           
  5592                           	psect	text43
  5593  0016C2                     __ptext43:
  5594                           	opt callstack 0
  5595  0016C2                     ___awdiv:
  5596                           	opt callstack 22
  5597                           
  5598                           ;incstack = 0
  5599  0016C2  0E00               	movlw	0
  5600  0016C4  6E11               	movwf	___awdiv@sign,c
  5601  0016C6  AE0F               	btfss	___awdiv@divisor+1,7,c
  5602  0016C8  D006               	goto	l4756
  5603  0016CA  6C0E               	negf	___awdiv@divisor,c
  5604  0016CC  1E0F               	comf	___awdiv@divisor+1,f,c
  5605  0016CE  B0D8               	btfsc	status,0,c
  5606  0016D0  2A0F               	incf	___awdiv@divisor+1,f,c
  5607  0016D2  0E01               	movlw	1
  5608  0016D4  6E11               	movwf	___awdiv@sign,c
  5609  0016D6                     l4756:
  5610  0016D6  AE0D               	btfss	___awdiv@dividend+1,7,c
  5611  0016D8  D006               	goto	l4762
  5612  0016DA  6C0C               	negf	___awdiv@dividend,c
  5613  0016DC  1E0D               	comf	___awdiv@dividend+1,f,c
  5614  0016DE  B0D8               	btfsc	status,0,c
  5615  0016E0  2A0D               	incf	___awdiv@dividend+1,f,c
  5616  0016E2  0E01               	movlw	1
  5617  0016E4  1A11               	xorwf	___awdiv@sign,f,c
  5618  0016E6                     l4762:
  5619  0016E6  0E00               	movlw	0
  5620  0016E8  6E13               	movwf	___awdiv@quotient+1,c
  5621  0016EA  0E00               	movlw	0
  5622  0016EC  6E12               	movwf	___awdiv@quotient,c
  5623  0016EE  500E               	movf	___awdiv@divisor,w,c
  5624  0016F0  100F               	iorwf	___awdiv@divisor+1,w,c
  5625  0016F2  B4D8               	btfsc	status,2,c
  5626  0016F4  D01C               	goto	l4784
  5627  0016F6  0E01               	movlw	1
  5628  0016F8  6E10               	movwf	___awdiv@counter,c
  5629  0016FA  D004               	goto	l4770
  5630  0016FC                     l4768:
  5631  0016FC  90D8               	bcf	status,0,c
  5632  0016FE  360E               	rlcf	___awdiv@divisor,f,c
  5633  001700  360F               	rlcf	___awdiv@divisor+1,f,c
  5634  001702  2A10               	incf	___awdiv@counter,f,c
  5635  001704                     l4770:
  5636  001704  AE0F               	btfss	___awdiv@divisor+1,7,c
  5637  001706  D7FA               	goto	l4768
  5638  001708                     u4290:
  5639  001708  90D8               	bcf	status,0,c
  5640  00170A  3612               	rlcf	___awdiv@quotient,f,c
  5641  00170C  3613               	rlcf	___awdiv@quotient+1,f,c
  5642  00170E  500E               	movf	___awdiv@divisor,w,c
  5643  001710  5C0C               	subwf	___awdiv@dividend,w,c
  5644  001712  500F               	movf	___awdiv@divisor+1,w,c
  5645  001714  580D               	subwfb	___awdiv@dividend+1,w,c
  5646  001716  A0D8               	btfss	status,0,c
  5647  001718  D005               	goto	l4780
  5648  00171A  500E               	movf	___awdiv@divisor,w,c
  5649  00171C  5E0C               	subwf	___awdiv@dividend,f,c
  5650  00171E  500F               	movf	___awdiv@divisor+1,w,c
  5651  001720  5A0D               	subwfb	___awdiv@dividend+1,f,c
  5652  001722  8012               	bsf	___awdiv@quotient,0,c
  5653  001724                     l4780:
  5654  001724  90D8               	bcf	status,0,c
  5655  001726  320F               	rrcf	___awdiv@divisor+1,f,c
  5656  001728  320E               	rrcf	___awdiv@divisor,f,c
  5657  00172A  2E10               	decfsz	___awdiv@counter,f,c
  5658  00172C  D7ED               	goto	u4290
  5659  00172E                     l4784:
  5660  00172E  5011               	movf	___awdiv@sign,w,c
  5661  001730  B4D8               	btfsc	status,2,c
  5662  001732  D004               	goto	l4788
  5663  001734  6C12               	negf	___awdiv@quotient,c
  5664  001736  1E13               	comf	___awdiv@quotient+1,f,c
  5665  001738  B0D8               	btfsc	status,0,c
  5666  00173A  2A13               	incf	___awdiv@quotient+1,f,c
  5667  00173C                     l4788:
  5668  00173C  C012  F00C         	movff	___awdiv@quotient,?___awdiv
  5669  001740  C013  F00D         	movff	___awdiv@quotient+1,?___awdiv+1
  5670  001744  0012               	return		;funcret
  5671  001746                     __end_of___awdiv:
  5672                           	opt callstack 0
  5673                           
  5674 ;; *************** function _getNumber *****************
  5675 ;; Defined at:
  5676 ;;		line 196 in file "shared_logic.c"
  5677 ;; Parameters:    Size  Location     Type
  5678 ;;  pDigit          1    wreg     unsigned char 
  5679 ;;  pTarget         2   21[COMRAM] PTR unsigned short 
  5680 ;;		 -> show_score@tmpObjectData(16), 
  5681 ;; Auto vars:     Size  Location     Type
  5682 ;;  pDigit          1   23[COMRAM] unsigned char 
  5683 ;; Return value:  Size  Location     Type
  5684 ;;                  1    wreg      void 
  5685 ;; Registers used:
  5686 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5687 ;; Tracked objects:
  5688 ;;		On entry : 0/0
  5689 ;;		On exit  : 0/0
  5690 ;;		Unchanged: 0/0
  5691 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5692 ;;      Params:         2       0       0       0       0       0       0
  5693 ;;      Locals:         1       0       0       0       0       0       0
  5694 ;;      Temps:          0       0       0       0       0       0       0
  5695 ;;      Totals:         3       0       0       0       0       0       0
  5696 ;;Total ram usage:        3 bytes
  5697 ;; Hardware stack levels used:    1
  5698 ;; Hardware stack levels required when called:    5
  5699 ;; This function calls:
  5700 ;;		_memcpy
  5701 ;; This function is called by:
  5702 ;;		_show_score
  5703 ;; This function uses a non-reentrant model
  5704 ;;
  5705                           
  5706                           	psect	text44
  5707  0021BE                     __ptext44:
  5708                           	opt callstack 0
  5709  0021BE                     _getNumber:
  5710                           	opt callstack 22
  5711                           
  5712                           ;incstack = 0
  5713                           ;getNumber@pDigit stored from wreg
  5714  0021BE  6E18               	movwf	getNumber@pDigit,c
  5715                           
  5716                           ;shared_logic.c: 196: void getNumber(uint8_t pDigit, uint16_t * pTarget);shared_logic.c:
      +                           197: {;shared_logic.c: 198:     memcpy(pTarget, Number[pDigit], 16);
  5717  0021C0  C016  F00C         	movff	getNumber@pTarget,memcpy@dest
  5718  0021C4  C017  F00D         	movff	getNumber@pTarget+1,memcpy@dest+1
  5719  0021C8  5018               	movf	getNumber@pDigit,w,c
  5720  0021CA  0D10               	mullw	16
  5721  0021CC  0E21               	movlw	low _Number
  5722  0021CE  24F3               	addwf	prodl,w,c
  5723  0021D0  6E0E               	movwf	memcpy@src,c
  5724  0021D2  0E06               	movlw	high _Number
  5725  0021D4  20F4               	addwfc	prodh,w,c
  5726  0021D6  6E0F               	movwf	memcpy@src+1,c
  5727  0021D8  0E00               	movlw	0
  5728  0021DA  6E11               	movwf	memcpy@n+1,c
  5729  0021DC  0E10               	movlw	16
  5730  0021DE  6E10               	movwf	memcpy@n,c
  5731  0021E0  EC55  F00F         	call	_memcpy	;wreg free
  5732  0021E4  0012               	return		;funcret
  5733  0021E6                     __end_of_getNumber:
  5734                           	opt callstack 0
  5735                           
  5736 ;; *************** function _memcpy *****************
  5737 ;; Defined at:
  5738 ;;		line 26 in file "shared_logic.c"
  5739 ;; Parameters:    Size  Location     Type
  5740 ;;  dest            2   11[COMRAM] PTR void 
  5741 ;;		 -> show_score@tmpObjectData(16), 
  5742 ;;  src             2   13[COMRAM] PTR const void 
  5743 ;;		 -> Number(160), 
  5744 ;;  n               2   15[COMRAM] unsigned int 
  5745 ;; Auto vars:     Size  Location     Type
  5746 ;;  s               2   19[COMRAM] PTR unsigned char 
  5747 ;;		 -> Number(160), 
  5748 ;;  d               2   17[COMRAM] PTR unsigned char 
  5749 ;;		 -> show_score@tmpObjectData(16), 
  5750 ;; Return value:  Size  Location     Type
  5751 ;;                  2   11[COMRAM] PTR void 
  5752 ;; Registers used:
  5753 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru
  5754 ;; Tracked objects:
  5755 ;;		On entry : 0/0
  5756 ;;		On exit  : 0/0
  5757 ;;		Unchanged: 0/0
  5758 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5759 ;;      Params:         6       0       0       0       0       0       0
  5760 ;;      Locals:         4       0       0       0       0       0       0
  5761 ;;      Temps:          0       0       0       0       0       0       0
  5762 ;;      Totals:        10       0       0       0       0       0       0
  5763 ;;Total ram usage:       10 bytes
  5764 ;; Hardware stack levels used:    1
  5765 ;; Hardware stack levels required when called:    4
  5766 ;; This function calls:
  5767 ;;		Nothing
  5768 ;; This function is called by:
  5769 ;;		_getNumber
  5770 ;; This function uses a non-reentrant model
  5771 ;;
  5772                           
  5773                           	psect	text45
  5774  001EAA                     __ptext45:
  5775                           	opt callstack 0
  5776  001EAA                     _memcpy:
  5777                           	opt callstack 22
  5778                           
  5779                           ;shared_logic.c: 26: void *memcpy(void *dest, const void *src, size_t n);shared_logic.c:
      +                           27: {;shared_logic.c: 28:     char *d = (char*)dest, *s = (char*)src;
  5780                           
  5781                           ;incstack = 0
  5782  001EAA  C00C  F012         	movff	memcpy@dest,memcpy@d
  5783  001EAE  C00D  F013         	movff	memcpy@dest+1,memcpy@d+1
  5784  001EB2  C00E  F014         	movff	memcpy@src,memcpy@s
  5785  001EB6  C00F  F015         	movff	memcpy@src+1,memcpy@s+1
  5786                           
  5787                           ;shared_logic.c: 30:     while(n--)
  5788  001EBA  D00F               	goto	l4734
  5789  001EBC                     l4728:
  5790                           
  5791                           ;shared_logic.c: 31:         *d++ = *s++;
  5792  001EBC  C014  FFF6         	movff	memcpy@s,tblptrl
  5793  001EC0  C015  FFF7         	movff	memcpy@s+1,tblptrh
  5794  001EC4                     	if	0	;tblptru may be non-zero
  5795  001EC4                     	endif
  5796  001EC4                     	if	0	;tblptru may be non-zero
  5797  001EC4                     	endif
  5798  001EC4  C012  FFD9         	movff	memcpy@d,fsr2l
  5799  001EC8  C013  FFDA         	movff	memcpy@d+1,fsr2h
  5800  001ECC  0008               	tblrd		*
  5801  001ECE  CFF5 FFDF          	movff	tablat,indf2
  5802  001ED2  4A14               	infsnz	memcpy@s,f,c
  5803  001ED4  2A15               	incf	memcpy@s+1,f,c
  5804  001ED6  4A12               	infsnz	memcpy@d,f,c
  5805  001ED8  2A13               	incf	memcpy@d+1,f,c
  5806  001EDA                     l4734:
  5807                           
  5808                           ;shared_logic.c: 30:     while(n--)
  5809  001EDA  0610               	decf	memcpy@n,f,c
  5810  001EDC  A0D8               	btfss	status,0,c
  5811  001EDE  0611               	decf	memcpy@n+1,f,c
  5812  001EE0  2810               	incf	memcpy@n,w,c
  5813  001EE2  E1EC               	bnz	l4728
  5814  001EE4  2811               	incf	memcpy@n+1,w,c
  5815  001EE6  B4D8               	btfsc	status,2,c
  5816  001EE8  0012               	return	
  5817  001EEA  D7E8               	goto	l4728
  5818  001EEC                     __end_of_memcpy:
  5819                           	opt callstack 0
  5820                           
  5821 ;; *************** function _readHighScore *****************
  5822 ;; Defined at:
  5823 ;;		line 201 in file "shared_logic.c"
  5824 ;; Parameters:    Size  Location     Type
  5825 ;;  adress          1    wreg     unsigned char 
  5826 ;; Auto vars:     Size  Location     Type
  5827 ;;  adress          1   13[COMRAM] unsigned char 
  5828 ;;  tmpbyte         1   14[COMRAM] unsigned char 
  5829 ;; Return value:  Size  Location     Type
  5830 ;;                  1    wreg      unsigned char 
  5831 ;; Registers used:
  5832 ;;		wreg, status,2, status,0, cstack
  5833 ;; Tracked objects:
  5834 ;;		On entry : 0/0
  5835 ;;		On exit  : 0/0
  5836 ;;		Unchanged: 0/0
  5837 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5838 ;;      Params:         0       0       0       0       0       0       0
  5839 ;;      Locals:         2       0       0       0       0       0       0
  5840 ;;      Temps:          0       0       0       0       0       0       0
  5841 ;;      Totals:         2       0       0       0       0       0       0
  5842 ;;Total ram usage:        2 bytes
  5843 ;; Hardware stack levels used:    1
  5844 ;; Hardware stack levels required when called:    6
  5845 ;; This function calls:
  5846 ;;		_ReadEEByte
  5847 ;;		_WriteEEByte
  5848 ;; This function is called by:
  5849 ;;		_tetris_main
  5850 ;;		_snake_main
  5851 ;; This function uses a non-reentrant model
  5852 ;;
  5853                           
  5854                           	psect	text46
  5855  0021E6                     __ptext46:
  5856                           	opt callstack 0
  5857  0021E6                     _readHighScore:
  5858                           	opt callstack 22
  5859                           
  5860                           ;incstack = 0
  5861                           ;readHighScore@adress stored from wreg
  5862  0021E6  6E0E               	movwf	readHighScore@adress,c
  5863                           
  5864                           ;shared_logic.c: 201: uint8_t readHighScore(uint8_t adress);shared_logic.c: 202: {;share
      +                          d_logic.c: 203:     uint8_t tmpbyte;;shared_logic.c: 204:     tmpbyte = ReadEEByte(adres
      +                          s);
  5865  0021E8  500E               	movf	readHighScore@adress,w,c
  5866  0021EA  ECD3  F011         	call	_ReadEEByte
  5867  0021EE  6E0F               	movwf	readHighScore@tmpbyte,c
  5868                           
  5869                           ;shared_logic.c: 205:     if (tmpbyte == 255) {
  5870  0021F0  280F               	incf	readHighScore@tmpbyte,w,c
  5871  0021F2  A4D8               	btfss	status,2,c
  5872  0021F4  D002               	goto	l605
  5873                           
  5874                           ;shared_logic.c: 206:         tmpbyte = 0;
  5875  0021F6  0E00               	movlw	0
  5876  0021F8  6E0F               	movwf	readHighScore@tmpbyte,c
  5877  0021FA                     l605:
  5878                           
  5879                           ;shared_logic.c: 208:     if (tmpbyte == 0){
  5880  0021FA  500F               	movf	readHighScore@tmpbyte,w,c
  5881  0021FC  A4D8               	btfss	status,2,c
  5882  0021FE  D005               	goto	l5040
  5883                           
  5884                           ;shared_logic.c: 209:        WriteEEByte(adress,0);
  5885  002200  0E00               	movlw	0
  5886  002202  6E0C               	movwf	WriteEEByte@data,c
  5887  002204  500E               	movf	readHighScore@adress,w,c
  5888  002206  EC49  F010         	call	_WriteEEByte
  5889  00220A                     l5040:
  5890                           
  5891                           ;shared_logic.c: 211:     return tmpbyte;
  5892  00220A  500F               	movf	readHighScore@tmpbyte,w,c
  5893  00220C  0012               	return		;funcret
  5894  00220E                     __end_of_readHighScore:
  5895                           	opt callstack 0
  5896                           
  5897 ;; *************** function _WriteEEByte *****************
  5898 ;; Defined at:
  5899 ;;		line 14 in file "EEPROM.c"
  5900 ;; Parameters:    Size  Location     Type
  5901 ;;  address         1    wreg     unsigned char 
  5902 ;;  data            1   11[COMRAM] unsigned char 
  5903 ;; Auto vars:     Size  Location     Type
  5904 ;;  address         1   12[COMRAM] unsigned char 
  5905 ;; Return value:  Size  Location     Type
  5906 ;;                  1    wreg      void 
  5907 ;; Registers used:
  5908 ;;		wreg, status,2, cstack
  5909 ;; Tracked objects:
  5910 ;;		On entry : 0/0
  5911 ;;		On exit  : 0/0
  5912 ;;		Unchanged: 0/0
  5913 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5914 ;;      Params:         1       0       0       0       0       0       0
  5915 ;;      Locals:         1       0       0       0       0       0       0
  5916 ;;      Temps:          0       0       0       0       0       0       0
  5917 ;;      Totals:         2       0       0       0       0       0       0
  5918 ;;Total ram usage:        2 bytes
  5919 ;; Hardware stack levels used:    1
  5920 ;; Hardware stack levels required when called:    5
  5921 ;; This function calls:
  5922 ;;		_waitForInterrupt
  5923 ;; This function is called by:
  5924 ;;		_readHighScore
  5925 ;;		_writeHighScore
  5926 ;; This function uses a non-reentrant model
  5927 ;;
  5928                           
  5929                           	psect	text47
  5930  002092                     __ptext47:
  5931                           	opt callstack 0
  5932  002092                     _WriteEEByte:
  5933                           	opt callstack 22
  5934                           
  5935                           ;incstack = 0
  5936                           ;WriteEEByte@address stored from wreg
  5937  002092  6E0D               	movwf	WriteEEByte@address,c
  5938  002094                     l129:
  5939                           
  5940                           ;EEPROM.c: 17:     EECON1bits.WRERR = 0;
  5941  002094  96A6               	bcf	4006,3,c	;volsfr
  5942                           
  5943                           ;EEPROM.c: 18: EECON1bits.WREN=1;
  5944  002096  84A6               	bsf	4006,2,c	;volsfr
  5945                           
  5946                           ;EEPROM.c: 19: EEADR=address;
  5947  002098  C00D  FFA9         	movff	WriteEEByte@address,4009	;volatile
  5948                           
  5949                           ;EEPROM.c: 20: EEDATA=data;
  5950  00209C  C00C  FFA8         	movff	WriteEEByte@data,4008	;volatile
  5951                           
  5952                           ;EEPROM.c: 21: EECON1bits.EEPGD=0;
  5953  0020A0  9EA6               	bcf	4006,7,c	;volsfr
  5954                           
  5955                           ;EEPROM.c: 22: EECON1bits.CFGS=0;
  5956  0020A2  9CA6               	bcf	4006,6,c	;volsfr
  5957                           
  5958                           ;EEPROM.c: 23: waitForInterrupt();
  5959  0020A4  EC11  F012         	call	_waitForInterrupt	;wreg free
  5960                           
  5961                           ;EEPROM.c: 24: INTCONbits.GIE=0;
  5962  0020A8  9EF2               	bcf	4082,7,c	;volatile
  5963                           
  5964                           ;EEPROM.c: 26: EECON2=0x55;
  5965  0020AA  0E55               	movlw	85
  5966  0020AC  6EA7               	movwf	4007,c	;volsfr
  5967                           
  5968                           ;EEPROM.c: 27: EECON2=0xAA;
  5969  0020AE  0EAA               	movlw	170
  5970  0020B0  6EA7               	movwf	4007,c	;volsfr
  5971                           
  5972                           ;EEPROM.c: 28: EECON1bits.WR=1;
  5973  0020B2  82A6               	bsf	4006,1,c	;volsfr
  5974                           
  5975                           ;EEPROM.c: 30: INTCONbits.GIE=1;
  5976  0020B4  8EF2               	bsf	4082,7,c	;volatile
  5977  0020B6                     l130:
  5978  0020B6  B2A6               	btfsc	4006,1,c	;volsfr
  5979  0020B8  D7FE               	goto	l130
  5980                           
  5981                           ;EEPROM.c: 32: } while (EECON1bits.WRERR == 1);
  5982  0020BA  B6A6               	btfsc	4006,3,c	;volsfr
  5983  0020BC  D7EB               	goto	l129
  5984                           
  5985                           ;EEPROM.c: 33: EECON1bits.WREN=0;
  5986  0020BE  94A6               	bcf	4006,2,c	;volsfr
  5987  0020C0  0012               	return		;funcret
  5988  0020C2                     __end_of_WriteEEByte:
  5989                           	opt callstack 0
  5990                           
  5991 ;; *************** function _ReadEEByte *****************
  5992 ;; Defined at:
  5993 ;;		line 4 in file "EEPROM.c"
  5994 ;; Parameters:    Size  Location     Type
  5995 ;;  address         1    wreg     unsigned char 
  5996 ;; Auto vars:     Size  Location     Type
  5997 ;;  address         1   11[COMRAM] unsigned char 
  5998 ;; Return value:  Size  Location     Type
  5999 ;;                  1    wreg      unsigned char 
  6000 ;; Registers used:
  6001 ;;		wreg, status,2
  6002 ;; Tracked objects:
  6003 ;;		On entry : 0/0
  6004 ;;		On exit  : 0/0
  6005 ;;		Unchanged: 0/0
  6006 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6007 ;;      Params:         0       0       0       0       0       0       0
  6008 ;;      Locals:         1       0       0       0       0       0       0
  6009 ;;      Temps:          0       0       0       0       0       0       0
  6010 ;;      Totals:         1       0       0       0       0       0       0
  6011 ;;Total ram usage:        1 bytes
  6012 ;; Hardware stack levels used:    1
  6013 ;; Hardware stack levels required when called:    4
  6014 ;; This function calls:
  6015 ;;		Nothing
  6016 ;; This function is called by:
  6017 ;;		_readHighScore
  6018 ;; This function uses a non-reentrant model
  6019 ;;
  6020                           
  6021                           	psect	text48
  6022  0023A6                     __ptext48:
  6023                           	opt callstack 0
  6024  0023A6                     _ReadEEByte:
  6025                           	opt callstack 23
  6026                           
  6027                           ;incstack = 0
  6028                           ;ReadEEByte@address stored from wreg
  6029  0023A6  6E0C               	movwf	ReadEEByte@address,c
  6030                           
  6031                           ;EEPROM.c: 4: uint8_t ReadEEByte(uint8_t address);EEPROM.c: 5: {;EEPROM.c: 6: EEADR=addr
      +                          ess;
  6032  0023A8  C00C  FFA9         	movff	ReadEEByte@address,4009	;volatile
  6033                           
  6034                           ;EEPROM.c: 7: EECON1bits.EEPGD=0;
  6035  0023AC  9EA6               	bcf	4006,7,c	;volsfr
  6036                           
  6037                           ;EEPROM.c: 8: EECON1bits.CFGS=0;
  6038  0023AE  9CA6               	bcf	4006,6,c	;volsfr
  6039                           
  6040                           ;EEPROM.c: 9: EECON1bits.RD=1;
  6041  0023B0  80A6               	bsf	4006,0,c	;volsfr
  6042                           
  6043                           ;EEPROM.c: 10: return EEDATA;
  6044  0023B2  50A8               	movf	4008,w,c	;volatile
  6045  0023B4  0012               	return		;funcret
  6046  0023B6                     __end_of_ReadEEByte:
  6047                           	opt callstack 0
  6048                           
  6049 ;; *************** function _inistialize_snake *****************
  6050 ;; Defined at:
  6051 ;;		line 157 in file "snake.c"
  6052 ;; Parameters:    Size  Location     Type
  6053 ;;		None
  6054 ;; Auto vars:     Size  Location     Type
  6055 ;;  i               1   22[COMRAM] unsigned char 
  6056 ;; Return value:  Size  Location     Type
  6057 ;;                  1    wreg      void 
  6058 ;; Registers used:
  6059 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6060 ;; Tracked objects:
  6061 ;;		On entry : 0/0
  6062 ;;		On exit  : 0/0
  6063 ;;		Unchanged: 0/0
  6064 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6065 ;;      Params:         0       0       0       0       0       0       0
  6066 ;;      Locals:         1       0       0       0       0       0       0
  6067 ;;      Temps:          0       0       0       0       0       0       0
  6068 ;;      Totals:         1       0       0       0       0       0       0
  6069 ;;Total ram usage:        1 bytes
  6070 ;; Hardware stack levels used:    1
  6071 ;; Hardware stack levels required when called:    7
  6072 ;; This function calls:
  6073 ;;		_CreateBerry
  6074 ;; This function is called by:
  6075 ;;		_snake_main
  6076 ;; This function uses a non-reentrant model
  6077 ;;
  6078                           
  6079                           	psect	text49
  6080  001D0A                     __ptext49:
  6081                           	opt callstack 0
  6082  001D0A                     _inistialize_snake:
  6083                           	opt callstack 21
  6084                           
  6085                           ;snake.c: 158:     moveSnake = 0;
  6086                           
  6087                           ;incstack = 0
  6088  001D0A  0E00               	movlw	0
  6089  001D0C  6E39               	movwf	_moveSnake,c	;volatile
  6090                           
  6091                           ;snake.c: 159:     snakeLength = 3;
  6092  001D0E  0E03               	movlw	3
  6093  001D10  6E38               	movwf	_snakeLength,c
  6094                           
  6095                           ;snake.c: 160:     previous_direction = 3;
  6096  001D12  0E03               	movlw	3
  6097  001D14  6E35               	movwf	_previous_direction,c
  6098                           
  6099                           ;snake.c: 161:     uint8_t i;;snake.c: 162:     for (i=0;i<4;i++){
  6100  001D16  0E00               	movlw	0
  6101  001D18  6E17               	movwf	inistialize_snake@i,c
  6102  001D1A                     l3998:
  6103                           
  6104                           ;snake.c: 163:         positions[i].y = 3;
  6105  001D1A  5017               	movf	inistialize_snake@i,w,c
  6106  001D1C  0D02               	mullw	2
  6107  001D1E  0E01               	movlw	low (_positions+1)
  6108  001D20  24F3               	addwf	prodl,w,c
  6109  001D22  6ED9               	movwf	fsr2l,c
  6110  001D24  0E01               	movlw	high (_positions+1)
  6111  001D26  20F4               	addwfc	prodh,w,c
  6112  001D28  6EDA               	movwf	fsr2h,c
  6113  001D2A  0E03               	movlw	3
  6114  001D2C  6EDF               	movwf	indf2,c
  6115                           
  6116                           ;snake.c: 164:         positions[i].x = 4-i;
  6117  001D2E  5017               	movf	inistialize_snake@i,w,c
  6118  001D30  0D02               	mullw	2
  6119  001D32  0E00               	movlw	low _positions
  6120  001D34  24F3               	addwf	prodl,w,c
  6121  001D36  6ED9               	movwf	fsr2l,c
  6122  001D38  0E01               	movlw	high _positions
  6123  001D3A  20F4               	addwfc	prodh,w,c
  6124  001D3C  6EDA               	movwf	fsr2h,c
  6125  001D3E  5017               	movf	inistialize_snake@i,w,c
  6126  001D40  0804               	sublw	4
  6127  001D42  6EDF               	movwf	indf2,c
  6128                           
  6129                           ;snake.c: 165:     }
  6130  001D44  2A17               	incf	inistialize_snake@i,f,c
  6131  001D46  0E03               	movlw	3
  6132  001D48  6417               	cpfsgt	inistialize_snake@i,c
  6133  001D4A  D7E7               	goto	l3998
  6134                           
  6135                           ;snake.c: 166:     positions[0].y = 3;
  6136  001D4C  0E03               	movlw	3
  6137  001D4E  0101               	movlb	1	; () banked
  6138  001D50  6F01               	movwf	(_positions+1)& (0+255),b
  6139                           
  6140                           ;snake.c: 167:     positions[0].x = 3;
  6141  001D52  0E03               	movlw	3
  6142  001D54  6F00               	movwf	_positions& (0+255),b
  6143                           
  6144                           ;snake.c: 168:     direction = 1;
  6145  001D56  0E01               	movlw	1
  6146  001D58  6E3A               	movwf	_direction,c
  6147                           
  6148                           ; BSR set to: 1
  6149                           ;snake.c: 169:     CreateBerry();
  6150  001D5A  EC55  F00E         	call	_CreateBerry	;wreg free
  6151                           
  6152                           ;snake.c: 170:     game = 1;
  6153  001D5E  0E01               	movlw	1
  6154  001D60  6E3B               	movwf	_game,c	;volatile
  6155  001D62  0012               	return		;funcret
  6156  001D64                     __end_of_inistialize_snake:
  6157                           	opt callstack 0
  6158                           
  6159 ;; *************** function _MoveSnakes *****************
  6160 ;; Defined at:
  6161 ;;		line 101 in file "snake.c"
  6162 ;; Parameters:    Size  Location     Type
  6163 ;;		None
  6164 ;; Auto vars:     Size  Location     Type
  6165 ;;  i               1   33[COMRAM] unsigned char 
  6166 ;; Return value:  Size  Location     Type
  6167 ;;                  1    wreg      void 
  6168 ;; Registers used:
  6169 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6170 ;; Tracked objects:
  6171 ;;		On entry : 0/0
  6172 ;;		On exit  : 0/0
  6173 ;;		Unchanged: 0/0
  6174 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6175 ;;      Params:         0       0       0       0       0       0       0
  6176 ;;      Locals:         1       0       0       0       0       0       0
  6177 ;;      Temps:          4       0       0       0       0       0       0
  6178 ;;      Totals:         5       0       0       0       0       0       0
  6179 ;;Total ram usage:        5 bytes
  6180 ;; Hardware stack levels used:    1
  6181 ;; Hardware stack levels required when called:    8
  6182 ;; This function calls:
  6183 ;;		_CreateBerry
  6184 ;;		_SnakeGraph
  6185 ;; This function is called by:
  6186 ;;		_snake_main
  6187 ;; This function uses a non-reentrant model
  6188 ;;
  6189                           
  6190                           	psect	text50
  6191  000890                     __ptext50:
  6192                           	opt callstack 0
  6193  000890                     _MoveSnakes:
  6194                           	opt callstack 20
  6195                           
  6196                           ;snake.c: 103:     uint8_t i;;snake.c: 104:     switch (direction){
  6197                           
  6198                           ;incstack = 0
  6199  000890  D030               	goto	l5138
  6200  000892                     l5100:
  6201                           
  6202                           ;snake.c: 106:             positions[0].y = positions[0].y - 1;
  6203  000892  0101               	movlb	1	; () banked
  6204  000894  0501               	decf	(_positions+1)& (0+255),w,b
  6205  000896  6F01               	movwf	(_positions+1)& (0+255),b
  6206                           
  6207                           ; BSR set to: 1
  6208                           ;snake.c: 107:             previous_direction = 0;
  6209  000898  0E00               	movlw	0
  6210  00089A  6E35               	movwf	_previous_direction,c
  6211                           
  6212                           ; BSR set to: 1
  6213                           ;snake.c: 108:             if (positions[0].y >= 200){
  6214  00089C  0EC7               	movlw	199
  6215  00089E  6501               	cpfsgt	(_positions+1)& (0+255),b
  6216  0008A0  D03C               	goto	l5140
  6217                           
  6218                           ; BSR set to: 1
  6219                           ;snake.c: 109:                 positions[0].y = 15;
  6220  0008A2  0E0F               	movlw	15
  6221  0008A4  D019               	goto	L3
  6222  0008A6                     l5108:
  6223                           
  6224                           ;snake.c: 113:             positions[0].x = positions[0].x + 1;
  6225  0008A6  0101               	movlb	1	; () banked
  6226  0008A8  2900               	incf	_positions& (0+255),w,b
  6227  0008AA  6F00               	movwf	_positions& (0+255),b
  6228                           
  6229                           ; BSR set to: 1
  6230                           ;snake.c: 114:             previous_direction = 1;
  6231  0008AC  0E01               	movlw	1
  6232  0008AE  6E35               	movwf	_previous_direction,c
  6233                           
  6234                           ; BSR set to: 1
  6235                           ;snake.c: 115:             if (positions[0].x > 7 & positions[0].x < 200){
  6236  0008B0  0E07               	movlw	7
  6237  0008B2  6500               	cpfsgt	_positions& (0+255),b
  6238  0008B4  D032               	goto	l5140
  6239                           
  6240                           ; BSR set to: 1
  6241  0008B6  0EC8               	movlw	200
  6242  0008B8  6100               	cpfslt	_positions& (0+255),b
  6243  0008BA  D02F               	goto	l5140
  6244                           
  6245                           ; BSR set to: 1
  6246                           ;snake.c: 116:                 positions[0].x = 0;
  6247  0008BC  0E00               	movlw	0
  6248  0008BE  D017               	goto	L4
  6249  0008C0                     l5118:
  6250                           
  6251                           ;snake.c: 120:             positions[0].y = positions[0].y + 1;
  6252  0008C0  0101               	movlb	1	; () banked
  6253  0008C2  2901               	incf	(_positions+1)& (0+255),w,b
  6254  0008C4  6F01               	movwf	(_positions+1)& (0+255),b
  6255                           
  6256                           ; BSR set to: 1
  6257                           ;snake.c: 121:             previous_direction = 2;
  6258  0008C6  0E02               	movlw	2
  6259  0008C8  6E35               	movwf	_previous_direction,c
  6260                           
  6261                           ; BSR set to: 1
  6262                           ;snake.c: 122:             if (positions[0].y > 15 & positions[0].y < 200) {
  6263  0008CA  0E0F               	movlw	15
  6264  0008CC  6501               	cpfsgt	(_positions+1)& (0+255),b
  6265  0008CE  D025               	goto	l5140
  6266                           
  6267                           ; BSR set to: 1
  6268  0008D0  0EC8               	movlw	200
  6269  0008D2  6101               	cpfslt	(_positions+1)& (0+255),b
  6270  0008D4  D022               	goto	l5140
  6271                           
  6272                           ; BSR set to: 1
  6273                           ;snake.c: 123:                 positions[0].y = 0;
  6274  0008D6  0E00               	movlw	0
  6275  0008D8                     L3:
  6276  0008D8  6F01               	movwf	(_positions+1)& (0+255),b
  6277  0008DA  D01F               	goto	l5140
  6278  0008DC                     l5128:
  6279                           
  6280                           ;snake.c: 127:             positions[0].x = positions[0].x - 1;
  6281  0008DC  0101               	movlb	1	; () banked
  6282  0008DE  0500               	decf	_positions& (0+255),w,b
  6283  0008E0  6F00               	movwf	_positions& (0+255),b
  6284                           
  6285                           ; BSR set to: 1
  6286                           ;snake.c: 128:             previous_direction = 3;
  6287  0008E2  0E03               	movlw	3
  6288  0008E4  6E35               	movwf	_previous_direction,c
  6289                           
  6290                           ; BSR set to: 1
  6291                           ;snake.c: 129:             if (positions[0].x >= 200){
  6292  0008E6  0EC7               	movlw	199
  6293  0008E8  6500               	cpfsgt	_positions& (0+255),b
  6294  0008EA  D017               	goto	l5140
  6295                           
  6296                           ; BSR set to: 1
  6297                           ;snake.c: 130:                 positions[0].x = 7;
  6298  0008EC  0E07               	movlw	7
  6299  0008EE                     L4:
  6300  0008EE  6F00               	movwf	_positions& (0+255),b
  6301  0008F0  D014               	goto	l5140
  6302  0008F2                     l5138:
  6303  0008F2  503A               	movf	_direction,w,c
  6304  0008F4  6E1E               	movwf	??_MoveSnakes& (0+255),c
  6305  0008F6  6A1F               	clrf	(??_MoveSnakes+1)& (0+255),c
  6306                           
  6307                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  6308                           ; Switch size 1, requested type "simple"
  6309                           ; Number of cases is 1, Range of values is 0 to 0
  6310                           ; switch strategies available:
  6311                           ; Name         Instructions Cycles
  6312                           ; simple_byte            4     3 (average)
  6313                           ;	Chosen strategy is simple_byte
  6314  0008F8  501F               	movf	??_MoveSnakes+1,w,c
  6315  0008FA  0A00               	xorlw	0	; case 0
  6316  0008FC  A4D8               	btfss	status,2,c
  6317  0008FE  D00D               	goto	l5140
  6318                           
  6319                           ; Switch size 1, requested type "simple"
  6320                           ; Number of cases is 4, Range of values is 0 to 3
  6321                           ; switch strategies available:
  6322                           ; Name         Instructions Cycles
  6323                           ; simple_byte           13     7 (average)
  6324                           ;	Chosen strategy is simple_byte
  6325  000900  501E               	movf	??_MoveSnakes,w,c
  6326  000902  0A00               	xorlw	0	; case 0
  6327  000904  B4D8               	btfsc	status,2,c
  6328  000906  D7C5               	goto	l5100
  6329  000908  0A01               	xorlw	1	; case 1
  6330  00090A  B4D8               	btfsc	status,2,c
  6331  00090C  D7CC               	goto	l5108
  6332  00090E  0A03               	xorlw	3	; case 2
  6333  000910  B4D8               	btfsc	status,2,c
  6334  000912  D7D6               	goto	l5118
  6335  000914  0A01               	xorlw	1	; case 3
  6336  000916  B4D8               	btfsc	status,2,c
  6337  000918  D7E1               	goto	l5128
  6338  00091A                     l5140:
  6339                           
  6340                           ;snake.c: 134:     for (i=0;i<=snakeLength;i++){
  6341  00091A  0E00               	movlw	0
  6342  00091C  6E22               	movwf	MoveSnakes@i,c
  6343  00091E  D045               	goto	l5146
  6344  000920                     l5142:
  6345                           
  6346                           ;snake.c: 135:         positions[(snakeLength - i)+1].y = positions[snakeLength-i].y;
  6347  000920  5022               	movf	MoveSnakes@i,w,c
  6348  000922  C038  F01E         	movff	_snakeLength,??_MoveSnakes
  6349  000926  6A1F               	clrf	(??_MoveSnakes+1)& (0+255),c
  6350  000928  5E1E               	subwf	??_MoveSnakes,f,c
  6351  00092A  0E00               	movlw	0
  6352  00092C  5A1F               	subwfb	??_MoveSnakes+1,f,c
  6353  00092E  90D8               	bcf	status,0,c
  6354  000930  361E               	rlcf	??_MoveSnakes,f,c
  6355  000932  361F               	rlcf	??_MoveSnakes+1,f,c
  6356  000934  0E01               	movlw	low (_positions+1)
  6357  000936  241E               	addwf	??_MoveSnakes,w,c
  6358  000938  6ED9               	movwf	fsr2l,c
  6359  00093A  0E01               	movlw	high (_positions+1)
  6360  00093C  201F               	addwfc	??_MoveSnakes+1,w,c
  6361  00093E  6EDA               	movwf	fsr2h,c
  6362  000940  5022               	movf	MoveSnakes@i,w,c
  6363  000942  C038  F020         	movff	_snakeLength,??_MoveSnakes+2
  6364  000946  6A21               	clrf	(??_MoveSnakes+3)& (0+255),c
  6365  000948  5E20               	subwf	??_MoveSnakes+2,f,c
  6366  00094A  0E00               	movlw	0
  6367  00094C  5A21               	subwfb	??_MoveSnakes+3,f,c
  6368  00094E  90D8               	bcf	status,0,c
  6369  000950  3620               	rlcf	??_MoveSnakes+2,f,c
  6370  000952  3621               	rlcf	??_MoveSnakes+3,f,c
  6371  000954  0E03               	movlw	low (_positions+3)
  6372  000956  2420               	addwf	??_MoveSnakes+2,w,c
  6373  000958  6EE1               	movwf	fsr1l,c
  6374  00095A  0E01               	movlw	high (_positions+3)
  6375  00095C  2021               	addwfc	??_MoveSnakes+3,w,c
  6376  00095E  6EE2               	movwf	fsr1h,c
  6377  000960  CFDF FFE7          	movff	indf2,indf1
  6378                           
  6379                           ;snake.c: 136:         positions[(snakeLength - i)+1].x = positions[snakeLength-i].x;
  6380  000964  5022               	movf	MoveSnakes@i,w,c
  6381  000966  C038  F01E         	movff	_snakeLength,??_MoveSnakes
  6382  00096A  6A1F               	clrf	(??_MoveSnakes+1)& (0+255),c
  6383  00096C  5E1E               	subwf	??_MoveSnakes,f,c
  6384  00096E  0E00               	movlw	0
  6385  000970  5A1F               	subwfb	??_MoveSnakes+1,f,c
  6386  000972  90D8               	bcf	status,0,c
  6387  000974  361E               	rlcf	??_MoveSnakes,f,c
  6388  000976  361F               	rlcf	??_MoveSnakes+1,f,c
  6389  000978  0E00               	movlw	low _positions
  6390  00097A  241E               	addwf	??_MoveSnakes,w,c
  6391  00097C  6ED9               	movwf	fsr2l,c
  6392  00097E  0E01               	movlw	high _positions
  6393  000980  201F               	addwfc	??_MoveSnakes+1,w,c
  6394  000982  6EDA               	movwf	fsr2h,c
  6395  000984  5022               	movf	MoveSnakes@i,w,c
  6396  000986  C038  F020         	movff	_snakeLength,??_MoveSnakes+2
  6397  00098A  6A21               	clrf	(??_MoveSnakes+3)& (0+255),c
  6398  00098C  5E20               	subwf	??_MoveSnakes+2,f,c
  6399  00098E  0E00               	movlw	0
  6400  000990  5A21               	subwfb	??_MoveSnakes+3,f,c
  6401  000992  90D8               	bcf	status,0,c
  6402  000994  3620               	rlcf	??_MoveSnakes+2,f,c
  6403  000996  3621               	rlcf	??_MoveSnakes+3,f,c
  6404  000998  0E02               	movlw	low (_positions+2)
  6405  00099A  2420               	addwf	??_MoveSnakes+2,w,c
  6406  00099C  6EE1               	movwf	fsr1l,c
  6407  00099E  0E01               	movlw	high (_positions+2)
  6408  0009A0  2021               	addwfc	??_MoveSnakes+3,w,c
  6409  0009A2  6EE2               	movwf	fsr1h,c
  6410  0009A4  CFDF FFE7          	movff	indf2,indf1
  6411                           
  6412                           ;snake.c: 137:     }
  6413  0009A8  2A22               	incf	MoveSnakes@i,f,c
  6414  0009AA                     l5146:
  6415  0009AA  5022               	movf	MoveSnakes@i,w,c
  6416  0009AC  5C38               	subwf	_snakeLength,w,c
  6417  0009AE  B0D8               	btfsc	status,0,c
  6418  0009B0  D7B7               	goto	l5142
  6419                           
  6420                           ;snake.c: 138:     if (positions[0].y == berryY && positions[0].x == berryX){
  6421  0009B2  5036               	movf	_berryY,w,c
  6422  0009B4  0101               	movlb	1	; () banked
  6423  0009B6  1901               	xorwf	(_positions+1)& (0+255),w,b
  6424  0009B8  A4D8               	btfss	status,2,c
  6425  0009BA  D008               	goto	l5156
  6426                           
  6427                           ; BSR set to: 1
  6428  0009BC  5037               	movf	_berryX,w,c
  6429  0009BE  1900               	xorwf	_positions& (0+255),w,b
  6430  0009C0  A4D8               	btfss	status,2,c
  6431  0009C2  D004               	goto	l5156
  6432                           
  6433                           ; BSR set to: 1
  6434                           ;snake.c: 139:         snakeLength = snakeLength + 1;
  6435  0009C4  2838               	incf	_snakeLength,w,c
  6436  0009C6  6E38               	movwf	_snakeLength,c
  6437                           
  6438                           ; BSR set to: 1
  6439                           ;snake.c: 140:         CreateBerry();
  6440  0009C8  EC55  F00E         	call	_CreateBerry	;wreg free
  6441  0009CC                     l5156:
  6442                           
  6443                           ;snake.c: 142:     for (i=4;i<=snakeLength;i++){
  6444  0009CC  0E04               	movlw	4
  6445  0009CE  6E22               	movwf	MoveSnakes@i,c
  6446  0009D0  D01C               	goto	l5166
  6447  0009D2                     l5158:
  6448                           
  6449                           ;snake.c: 143:         if (positions[0].y == positions[i].y && positions[0].x == positio
      +                          ns[i].x){
  6450  0009D2  5022               	movf	MoveSnakes@i,w,c
  6451  0009D4  0D02               	mullw	2
  6452  0009D6  0E01               	movlw	low (_positions+1)
  6453  0009D8  24F3               	addwf	prodl,w,c
  6454  0009DA  6ED9               	movwf	fsr2l,c
  6455  0009DC  0E01               	movlw	high (_positions+1)
  6456  0009DE  20F4               	addwfc	prodh,w,c
  6457  0009E0  6EDA               	movwf	fsr2h,c
  6458  0009E2  50DE               	movf	postinc2,w,c
  6459  0009E4  0101               	movlb	1	; () banked
  6460  0009E6  1901               	xorwf	(_positions+1)& (0+255),w,b
  6461  0009E8  A4D8               	btfss	status,2,c
  6462  0009EA  D00E               	goto	l5164
  6463                           
  6464                           ; BSR set to: 1
  6465  0009EC  5022               	movf	MoveSnakes@i,w,c
  6466  0009EE  0D02               	mullw	2
  6467  0009F0  0E00               	movlw	low _positions
  6468  0009F2  24F3               	addwf	prodl,w,c
  6469  0009F4  6ED9               	movwf	fsr2l,c
  6470  0009F6  0E01               	movlw	high _positions
  6471  0009F8  20F4               	addwfc	prodh,w,c
  6472  0009FA  6EDA               	movwf	fsr2h,c
  6473  0009FC  5100               	movf	_positions& (0+255),w,b
  6474  0009FE  18DE               	xorwf	postinc2,w,c
  6475  000A00  A4D8               	btfss	status,2,c
  6476  000A02  D002               	goto	l5164
  6477                           
  6478                           ; BSR set to: 1
  6479                           ;snake.c: 144:             EndOfGame = 1;
  6480  000A04  0E01               	movlw	1
  6481  000A06  6E3E               	movwf	_EndOfGame,c	;volatile
  6482  000A08                     l5164:
  6483                           
  6484                           ; BSR set to: 1
  6485                           ;snake.c: 146:     };
  6486  000A08  2A22               	incf	MoveSnakes@i,f,c
  6487  000A0A                     l5166:
  6488  000A0A  5022               	movf	MoveSnakes@i,w,c
  6489  000A0C  5C38               	subwf	_snakeLength,w,c
  6490  000A0E  B0D8               	btfsc	status,0,c
  6491  000A10  D7E0               	goto	l5158
  6492                           
  6493                           ;snake.c: 147:     SnakeGraph();
  6494  000A12  ECDD  F006         	call	_SnakeGraph	;wreg free
  6495  000A16  0012               	return		;funcret
  6496  000A18                     __end_of_MoveSnakes:
  6497                           	opt callstack 0
  6498                           
  6499 ;; *************** function _SnakeGraph *****************
  6500 ;; Defined at:
  6501 ;;		line 84 in file "snake.c"
  6502 ;; Parameters:    Size  Location     Type
  6503 ;;		None
  6504 ;; Auto vars:     Size  Location     Type
  6505 ;;  i               1   28[COMRAM] unsigned char 
  6506 ;;  j               1   27[COMRAM] unsigned char 
  6507 ;; Return value:  Size  Location     Type
  6508 ;;                  1    wreg      void 
  6509 ;; Registers used:
  6510 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6511 ;; Tracked objects:
  6512 ;;		On entry : 0/0
  6513 ;;		On exit  : 0/0
  6514 ;;		Unchanged: 0/0
  6515 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6516 ;;      Params:         0       0       0       0       0       0       0
  6517 ;;      Locals:         2       0       0       0       0       0       0
  6518 ;;      Temps:          5       0       0       0       0       0       0
  6519 ;;      Totals:         7       0       0       0       0       0       0
  6520 ;;Total ram usage:        7 bytes
  6521 ;; Hardware stack levels used:    1
  6522 ;; Hardware stack levels required when called:    7
  6523 ;; This function calls:
  6524 ;;		_clearArray
  6525 ;;		_set_screen
  6526 ;; This function is called by:
  6527 ;;		_MoveSnakes
  6528 ;; This function uses a non-reentrant model
  6529 ;;
  6530                           
  6531                           	psect	text51
  6532  000DBA                     __ptext51:
  6533                           	opt callstack 0
  6534  000DBA                     _SnakeGraph:
  6535                           	opt callstack 20
  6536                           
  6537                           ;snake.c: 86:     uint8_t i;;snake.c: 87:     uint8_t j;;snake.c: 88:     clearArray(Obj
      +                          ectData, 8);
  6538                           
  6539                           ;incstack = 0
  6540  000DBA  0ECC               	movlw	low _ObjectData
  6541  000DBC  6E0C               	movwf	clearArray@pArray,c
  6542  000DBE  0E00               	movlw	high _ObjectData
  6543  000DC0  6E0D               	movwf	clearArray@pArray+1,c
  6544  000DC2  0E00               	movlw	0
  6545  000DC4  6E0F               	movwf	clearArray@size+1,c
  6546  000DC6  0E08               	movlw	8
  6547  000DC8  6E0E               	movwf	clearArray@size,c
  6548  000DCA  ECF3  F00F         	call	_clearArray	;wreg free
  6549                           
  6550                           ;snake.c: 89:     for(i=0;i<=snakeLength;i++){
  6551  000DCE  0E00               	movlw	0
  6552  000DD0  6E1D               	movwf	SnakeGraph@i,c
  6553  000DD2  D03F               	goto	l4916
  6554  000DD4                     l4910:
  6555                           
  6556                           ;snake.c: 90:         j = positions[i].x;
  6557  000DD4  501D               	movf	SnakeGraph@i,w,c
  6558  000DD6  0D02               	mullw	2
  6559  000DD8  0E00               	movlw	low _positions
  6560  000DDA  24F3               	addwf	prodl,w,c
  6561  000DDC  6ED9               	movwf	fsr2l,c
  6562  000DDE  0E01               	movlw	high _positions
  6563  000DE0  20F4               	addwfc	prodh,w,c
  6564  000DE2  6EDA               	movwf	fsr2h,c
  6565  000DE4  50DF               	movf	indf2,w,c
  6566  000DE6  6E1C               	movwf	SnakeGraph@j,c
  6567                           
  6568                           ;snake.c: 91:         ObjectData[j] = (SnakeYtext[positions[i].y] | ObjectData[j]);
  6569  000DE8  501C               	movf	SnakeGraph@j,w,c
  6570  000DEA  0D02               	mullw	2
  6571  000DEC  0ECC               	movlw	low _ObjectData
  6572  000DEE  24F3               	addwf	prodl,w,c
  6573  000DF0  6ED9               	movwf	fsr2l,c
  6574  000DF2  0E00               	movlw	high _ObjectData
  6575  000DF4  20F4               	addwfc	prodh,w,c
  6576  000DF6  6EDA               	movwf	fsr2h,c
  6577  000DF8  CFDE F017          	movff	postinc2,??_SnakeGraph
  6578  000DFC  CFDD F018          	movff	postdec2,??_SnakeGraph+1
  6579  000E00  501D               	movf	SnakeGraph@i,w,c
  6580  000E02  0D02               	mullw	2
  6581  000E04  0E01               	movlw	low (_positions+1)
  6582  000E06  24F3               	addwf	prodl,w,c
  6583  000E08  6ED9               	movwf	fsr2l,c
  6584  000E0A  0E01               	movlw	high (_positions+1)
  6585  000E0C  20F4               	addwfc	prodh,w,c
  6586  000E0E  6EDA               	movwf	fsr2h,c
  6587  000E10  50DF               	movf	indf2,w,c
  6588  000E12  6E19               	movwf	(??_SnakeGraph+2)& (0+255),c
  6589  000E14  5019               	movf	??_SnakeGraph+2,w,c
  6590  000E16  0D02               	mullw	2
  6591  000E18  0E01               	movlw	low _SnakeYtext
  6592  000E1A  24F3               	addwf	prodl,w,c
  6593  000E1C  6EF6               	movwf	tblptrl,c
  6594  000E1E  0E06               	movlw	high _SnakeYtext
  6595  000E20  20F4               	addwfc	prodh,w,c
  6596  000E22  6EF7               	movwf	tblptrh,c
  6597  000E24                     	if	0	;There are less than 3 active tblptr bytes
  6598  000E24                     	endif
  6599  000E24  0009               	tblrd		*+
  6600  000E26  CFF5 F01A          	movff	tablat,??_SnakeGraph+3
  6601  000E2A  0009               	tblrd		*+
  6602  000E2C  CFF5 F01B          	movff	tablat,??_SnakeGraph+4
  6603  000E30  5017               	movf	??_SnakeGraph,w,c
  6604  000E32  121A               	iorwf	??_SnakeGraph+3,f,c
  6605  000E34  5018               	movf	??_SnakeGraph+1,w,c
  6606  000E36  121B               	iorwf	??_SnakeGraph+4,f,c
  6607  000E38  501C               	movf	SnakeGraph@j,w,c
  6608  000E3A  0D02               	mullw	2
  6609  000E3C  0ECC               	movlw	low _ObjectData
  6610  000E3E  24F3               	addwf	prodl,w,c
  6611  000E40  6ED9               	movwf	fsr2l,c
  6612  000E42  0E00               	movlw	high _ObjectData
  6613  000E44  20F4               	addwfc	prodh,w,c
  6614  000E46  6EDA               	movwf	fsr2h,c
  6615  000E48  C01A  FFDE         	movff	??_SnakeGraph+3,postinc2
  6616  000E4C  C01B  FFDD         	movff	??_SnakeGraph+4,postdec2
  6617                           
  6618                           ;snake.c: 92:     }
  6619  000E50  2A1D               	incf	SnakeGraph@i,f,c
  6620  000E52                     l4916:
  6621  000E52  501D               	movf	SnakeGraph@i,w,c
  6622  000E54  5C38               	subwf	_snakeLength,w,c
  6623  000E56  B0D8               	btfsc	status,0,c
  6624  000E58  D7BD               	goto	l4910
  6625                           
  6626                           ;snake.c: 93:     for(i=0;i<8;i++){
  6627  000E5A  0E00               	movlw	0
  6628  000E5C  6E1D               	movwf	SnakeGraph@i,c
  6629  000E5E                     l4924:
  6630                           
  6631                           ;snake.c: 94:         if (berryX == i){
  6632  000E5E  501D               	movf	SnakeGraph@i,w,c
  6633  000E60  1837               	xorwf	_berryX,w,c
  6634  000E62  A4D8               	btfss	status,2,c
  6635  000E64  D02A               	goto	l4928
  6636                           
  6637                           ;snake.c: 95:             ObjectData[i] = SnakeYtext[berryY] | ObjectData[i];
  6638  000E66  501D               	movf	SnakeGraph@i,w,c
  6639  000E68  0D02               	mullw	2
  6640  000E6A  0ECC               	movlw	low _ObjectData
  6641  000E6C  24F3               	addwf	prodl,w,c
  6642  000E6E  6ED9               	movwf	fsr2l,c
  6643  000E70  0E00               	movlw	high _ObjectData
  6644  000E72  20F4               	addwfc	prodh,w,c
  6645  000E74  6EDA               	movwf	fsr2h,c
  6646  000E76  CFDE F017          	movff	postinc2,??_SnakeGraph
  6647  000E7A  CFDD F018          	movff	postdec2,??_SnakeGraph+1
  6648  000E7E  5036               	movf	_berryY,w,c
  6649  000E80  0D02               	mullw	2
  6650  000E82  0E01               	movlw	low _SnakeYtext
  6651  000E84  24F3               	addwf	prodl,w,c
  6652  000E86  6EF6               	movwf	tblptrl,c
  6653  000E88  0E06               	movlw	high _SnakeYtext
  6654  000E8A  20F4               	addwfc	prodh,w,c
  6655  000E8C  6EF7               	movwf	tblptrh,c
  6656  000E8E                     	if	0	;There are less than 3 active tblptr bytes
  6657  000E8E                     	endif
  6658  000E8E  0009               	tblrd		*+
  6659  000E90  CFF5 F019          	movff	tablat,??_SnakeGraph+2
  6660  000E94  0009               	tblrd		*+
  6661  000E96  CFF5 F01A          	movff	tablat,??_SnakeGraph+3
  6662  000E9A  5017               	movf	??_SnakeGraph,w,c
  6663  000E9C  1219               	iorwf	??_SnakeGraph+2,f,c
  6664  000E9E  5018               	movf	??_SnakeGraph+1,w,c
  6665  000EA0  121A               	iorwf	??_SnakeGraph+3,f,c
  6666  000EA2  501D               	movf	SnakeGraph@i,w,c
  6667  000EA4  0D02               	mullw	2
  6668  000EA6  0ECC               	movlw	low _ObjectData
  6669  000EA8  24F3               	addwf	prodl,w,c
  6670  000EAA  6ED9               	movwf	fsr2l,c
  6671  000EAC  0E00               	movlw	high _ObjectData
  6672  000EAE  20F4               	addwfc	prodh,w,c
  6673  000EB0  6EDA               	movwf	fsr2h,c
  6674  000EB2  C019  FFDE         	movff	??_SnakeGraph+2,postinc2
  6675  000EB6  C01A  FFDD         	movff	??_SnakeGraph+3,postdec2
  6676  000EBA                     l4928:
  6677                           
  6678                           ;snake.c: 97:     }
  6679  000EBA  2A1D               	incf	SnakeGraph@i,f,c
  6680  000EBC  0E07               	movlw	7
  6681  000EBE  641D               	cpfsgt	SnakeGraph@i,c
  6682  000EC0  D7CE               	goto	l4924
  6683                           
  6684                           ;snake.c: 98:     set_screen(ObjectData);
  6685  000EC2  0ECC               	movlw	low _ObjectData
  6686  000EC4  6E13               	movwf	set_screen@newData,c
  6687  000EC6  0E00               	movlw	high _ObjectData
  6688  000EC8  6E14               	movwf	set_screen@newData+1,c
  6689  000ECA  ECBF  F00D         	call	_set_screen	;wreg free
  6690  000ECE  0012               	return		;funcret
  6691  000ED0                     __end_of_SnakeGraph:
  6692                           	opt callstack 0
  6693                           
  6694 ;; *************** function _set_screen *****************
  6695 ;; Defined at:
  6696 ;;		line 48 in file "screen.c"
  6697 ;; Parameters:    Size  Location     Type
  6698 ;;  newData         2   18[COMRAM] PTR volatile unsigned sh
  6699 ;;		 -> show_score@Numberscreen(16), Screen_Data(16), ObjectData(16), 
  6700 ;; Auto vars:     Size  Location     Type
  6701 ;;  i               2   20[COMRAM] int 
  6702 ;; Return value:  Size  Location     Type
  6703 ;;                  1    wreg      void 
  6704 ;; Registers used:
  6705 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6706 ;; Tracked objects:
  6707 ;;		On entry : 0/0
  6708 ;;		On exit  : 0/0
  6709 ;;		Unchanged: 0/0
  6710 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6711 ;;      Params:         2       0       0       0       0       0       0
  6712 ;;      Locals:         2       0       0       0       0       0       0
  6713 ;;      Temps:          0       0       0       0       0       0       0
  6714 ;;      Totals:         4       0       0       0       0       0       0
  6715 ;;Total ram usage:        4 bytes
  6716 ;; Hardware stack levels used:    1
  6717 ;; Hardware stack levels required when called:    6
  6718 ;; This function calls:
  6719 ;;		_clearArray
  6720 ;;		_pauseMultiplexing
  6721 ;;		_resumeMultiplexing
  6722 ;; This function is called by:
  6723 ;;		_tetris_main
  6724 ;;		_SnakeGraph
  6725 ;;		_show_score
  6726 ;; This function uses a non-reentrant model
  6727 ;;
  6728                           
  6729                           	psect	text52
  6730  001B7E                     __ptext52:
  6731                           	opt callstack 0
  6732  001B7E                     _set_screen:
  6733                           	opt callstack 21
  6734                           
  6735                           ;screen.c: 48: void set_screen(volatile uint16_t *newData);screen.c: 49: {;screen.c: 50:
      +                               pauseMultiplexing();
  6736                           
  6737                           ;incstack = 0
  6738  001B7E  ECC1  F011         	call	_pauseMultiplexing	;wreg free
  6739                           
  6740                           ;screen.c: 51:     clearArray(ScreenData, 8);
  6741  001B82  0E8C               	movlw	low _ScreenData
  6742  001B84  6E0C               	movwf	clearArray@pArray,c
  6743  001B86  0E00               	movlw	high _ScreenData
  6744  001B88  6E0D               	movwf	clearArray@pArray+1,c
  6745  001B8A  0E00               	movlw	0
  6746  001B8C  6E0F               	movwf	clearArray@size+1,c
  6747  001B8E  0E08               	movlw	8
  6748  001B90  6E0E               	movwf	clearArray@size,c
  6749  001B92  ECF3  F00F         	call	_clearArray	;wreg free
  6750                           
  6751                           ;screen.c: 52:     int i;;screen.c: 53:     for(i=0;i<8;i++){
  6752  001B96  0E00               	movlw	0
  6753  001B98  6E16               	movwf	set_screen@i+1,c
  6754  001B9A  0E00               	movlw	0
  6755  001B9C  6E15               	movwf	set_screen@i,c
  6756  001B9E                     l4718:
  6757                           
  6758                           ;screen.c: 54:         ScreenData[i] = newData[i];
  6759  001B9E  90D8               	bcf	status,0,c
  6760  001BA0  3415               	rlcf	set_screen@i,w,c
  6761  001BA2  6ED9               	movwf	fsr2l,c
  6762  001BA4  3416               	rlcf	set_screen@i+1,w,c
  6763  001BA6  6EDA               	movwf	fsr2h,c
  6764  001BA8  5013               	movf	set_screen@newData,w,c
  6765  001BAA  26D9               	addwf	fsr2l,f,c
  6766  001BAC  5014               	movf	set_screen@newData+1,w,c
  6767  001BAE  22DA               	addwfc	fsr2h,f,c
  6768  001BB0  90D8               	bcf	status,0,c
  6769  001BB2  3415               	rlcf	set_screen@i,w,c
  6770  001BB4  6EE1               	movwf	fsr1l,c
  6771  001BB6  3416               	rlcf	set_screen@i+1,w,c
  6772  001BB8  6EE2               	movwf	fsr1h,c
  6773  001BBA  0E8C               	movlw	low _ScreenData
  6774  001BBC  26E1               	addwf	fsr1l,f,c
  6775  001BBE  0E00               	movlw	high _ScreenData
  6776  001BC0  22E2               	addwfc	fsr1h,f,c
  6777  001BC2  CFDE FFE6          	movff	postinc2,postinc1
  6778  001BC6  CFDD FFE5          	movff	postdec2,postdec1
  6779                           
  6780                           ;screen.c: 55:     }
  6781  001BCA  4A15               	infsnz	set_screen@i,f,c
  6782  001BCC  2A16               	incf	set_screen@i+1,f,c
  6783  001BCE  BE16               	btfsc	set_screen@i+1,7,c
  6784  001BD0  D7E6               	goto	l4718
  6785  001BD2  5016               	movf	set_screen@i+1,w,c
  6786  001BD4  E104               	bnz	u4230
  6787  001BD6  0E08               	movlw	8
  6788  001BD8  5C15               	subwf	set_screen@i,w,c
  6789  001BDA  A0D8               	btfss	status,0,c
  6790  001BDC  D7E0               	goto	l4718
  6791  001BDE                     u4230:
  6792                           
  6793                           ;screen.c: 56:     resumeMultiplexing();
  6794  001BDE  EC3C  F012         	call	_resumeMultiplexing	;wreg free
  6795  001BE2  0012               	return		;funcret
  6796  001BE4                     __end_of_set_screen:
  6797                           	opt callstack 0
  6798                           
  6799 ;; *************** function _CreateBerry *****************
  6800 ;; Defined at:
  6801 ;;		line 64 in file "snake.c"
  6802 ;; Parameters:    Size  Location     Type
  6803 ;;		None
  6804 ;; Auto vars:     Size  Location     Type
  6805 ;;  i               1   21[COMRAM] unsigned char 
  6806 ;;  randomGood      1   20[COMRAM] _Bool 
  6807 ;; Return value:  Size  Location     Type
  6808 ;;                  1    wreg      void 
  6809 ;; Registers used:
  6810 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6811 ;; Tracked objects:
  6812 ;;		On entry : 0/0
  6813 ;;		On exit  : 0/0
  6814 ;;		Unchanged: 0/0
  6815 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6816 ;;      Params:         0       0       0       0       0       0       0
  6817 ;;      Locals:         2       0       0       0       0       0       0
  6818 ;;      Temps:          1       0       0       0       0       0       0
  6819 ;;      Totals:         3       0       0       0       0       0       0
  6820 ;;Total ram usage:        3 bytes
  6821 ;; Hardware stack levels used:    1
  6822 ;; Hardware stack levels required when called:    6
  6823 ;; This function calls:
  6824 ;;		_genBerry
  6825 ;; This function is called by:
  6826 ;;		_MoveSnakes
  6827 ;;		_inistialize_snake
  6828 ;; This function uses a non-reentrant model
  6829 ;;
  6830                           
  6831                           	psect	text53
  6832  001CAA                     __ptext53:
  6833                           	opt callstack 0
  6834  001CAA                     _CreateBerry:
  6835                           	opt callstack 21
  6836                           
  6837                           ;snake.c: 70:     {;snake.c: 71:         randomGood = 0;
  6838                           
  6839                           ;snake.c: 69:     do
  6840                           
  6841                           ;incstack = 0
  6842  001CAA  0E00               	movlw	0
  6843  001CAC  6E15               	movwf	CreateBerry@randomGood,c
  6844                           
  6845                           ;snake.c: 72:         berryX = genBerry(8);
  6846  001CAE  0E08               	movlw	8
  6847  001CB0  EC95  F011         	call	_genBerry
  6848  001CB4  6E37               	movwf	_berryX,c
  6849                           
  6850                           ;snake.c: 73:         berryY = genBerry(16);
  6851  001CB6  0E10               	movlw	16
  6852  001CB8  EC95  F011         	call	_genBerry
  6853  001CBC  6E36               	movwf	_berryY,c
  6854                           
  6855                           ;snake.c: 74:         for(i=0;i<snakeLength;i++)
  6856  001CBE  0E00               	movlw	0
  6857  001CC0  6E16               	movwf	CreateBerry@i,c
  6858  001CC2  D01B               	goto	l3690
  6859  001CC4                     l3682:
  6860                           
  6861                           ;snake.c: 75:         {;snake.c: 76:             if (berryX == positions[i].x && berryY 
      +                          == positions[i].y)
  6862  001CC4  5016               	movf	CreateBerry@i,w,c
  6863  001CC6  0D02               	mullw	2
  6864  001CC8  0E00               	movlw	low _positions
  6865  001CCA  24F3               	addwf	prodl,w,c
  6866  001CCC  6ED9               	movwf	fsr2l,c
  6867  001CCE  0E01               	movlw	high _positions
  6868  001CD0  20F4               	addwfc	prodh,w,c
  6869  001CD2  6EDA               	movwf	fsr2h,c
  6870  001CD4  5037               	movf	_berryX,w,c
  6871  001CD6  18DE               	xorwf	postinc2,w,c
  6872  001CD8  A4D8               	btfss	status,2,c
  6873  001CDA  D00E               	goto	l3688
  6874  001CDC  5016               	movf	CreateBerry@i,w,c
  6875  001CDE  0D02               	mullw	2
  6876  001CE0  0E01               	movlw	low (_positions+1)
  6877  001CE2  24F3               	addwf	prodl,w,c
  6878  001CE4  6ED9               	movwf	fsr2l,c
  6879  001CE6  0E01               	movlw	high (_positions+1)
  6880  001CE8  20F4               	addwfc	prodh,w,c
  6881  001CEA  6EDA               	movwf	fsr2h,c
  6882  001CEC  5036               	movf	_berryY,w,c
  6883  001CEE  18DE               	xorwf	postinc2,w,c
  6884  001CF0  A4D8               	btfss	status,2,c
  6885  001CF2  D002               	goto	l3688
  6886                           
  6887                           ;snake.c: 77:             {;snake.c: 78:                 randomGood = 1;
  6888  001CF4  0E01               	movlw	1
  6889  001CF6  6E15               	movwf	CreateBerry@randomGood,c
  6890  001CF8                     l3688:
  6891                           
  6892                           ;snake.c: 80:         }
  6893  001CF8  2A16               	incf	CreateBerry@i,f,c
  6894  001CFA                     l3690:
  6895  001CFA  5038               	movf	_snakeLength,w,c
  6896  001CFC  5C16               	subwf	CreateBerry@i,w,c
  6897  001CFE  A0D8               	btfss	status,0,c
  6898  001D00  D7E1               	goto	l3682
  6899                           
  6900                           ;snake.c: 81:     } while (randomGood == 1);
  6901  001D02  0415               	decf	CreateBerry@randomGood,w,c
  6902  001D04  A4D8               	btfss	status,2,c
  6903  001D06  0012               	return	
  6904  001D08  D7D0               	goto	_CreateBerry
  6905  001D0A                     __end_of_CreateBerry:
  6906                           	opt callstack 0
  6907                           
  6908 ;; *************** function _genBerry *****************
  6909 ;; Defined at:
  6910 ;;		line 57 in file "snake.c"
  6911 ;; Parameters:    Size  Location     Type
  6912 ;;  size            1    wreg     unsigned char 
  6913 ;; Auto vars:     Size  Location     Type
  6914 ;;  size            1   17[COMRAM] unsigned char 
  6915 ;;  temp            1   18[COMRAM] unsigned char 
  6916 ;; Return value:  Size  Location     Type
  6917 ;;                  1    wreg      unsigned char 
  6918 ;; Registers used:
  6919 ;;		wreg, status,2, status,0, cstack
  6920 ;; Tracked objects:
  6921 ;;		On entry : 0/0
  6922 ;;		On exit  : 0/0
  6923 ;;		Unchanged: 0/0
  6924 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6925 ;;      Params:         0       0       0       0       0       0       0
  6926 ;;      Locals:         2       0       0       0       0       0       0
  6927 ;;      Temps:          0       0       0       0       0       0       0
  6928 ;;      Totals:         2       0       0       0       0       0       0
  6929 ;;Total ram usage:        2 bytes
  6930 ;; Hardware stack levels used:    1
  6931 ;; Hardware stack levels required when called:    5
  6932 ;; This function calls:
  6933 ;;		___lbmod
  6934 ;;		_rnd_get_num
  6935 ;; This function is called by:
  6936 ;;		_CreateBerry
  6937 ;; This function uses a non-reentrant model
  6938 ;;
  6939                           
  6940                           	psect	text54
  6941  00232A                     __ptext54:
  6942                           	opt callstack 0
  6943  00232A                     _genBerry:
  6944                           	opt callstack 21
  6945                           
  6946                           ;incstack = 0
  6947                           ;genBerry@size stored from wreg
  6948  00232A  6E12               	movwf	genBerry@size,c
  6949                           
  6950                           ;snake.c: 57: uint8_t genBerry(uint8_t size);snake.c: 58: {;snake.c: 59:     uint8_t tem
      +                          p;;snake.c: 60:     temp = rnd_get_num();
  6951  00232C  ECE2  F00C         	call	_rnd_get_num	;wreg free
  6952  002330  6E13               	movwf	genBerry@temp,c
  6953                           
  6954                           ;snake.c: 61:     temp = temp % size;
  6955  002332  C012  F00C         	movff	genBerry@size,___lbmod@divisor
  6956  002336  5013               	movf	genBerry@temp,w,c
  6957  002338  EC8E  F010         	call	___lbmod
  6958  00233C  6E13               	movwf	genBerry@temp,c
  6959                           
  6960                           ;snake.c: 62:     return temp;
  6961  00233E  5013               	movf	genBerry@temp,w,c
  6962  002340  0012               	return		;funcret
  6963  002342                     __end_of_genBerry:
  6964                           	opt callstack 0
  6965                           
  6966 ;; *************** function _rnd_get_num *****************
  6967 ;; Defined at:
  6968 ;;		line 18 in file "randgen.c"
  6969 ;; Parameters:    Size  Location     Type
  6970 ;;		None
  6971 ;; Auto vars:     Size  Location     Type
  6972 ;;  b               2   15[COMRAM] unsigned int 
  6973 ;; Return value:  Size  Location     Type
  6974 ;;                  1    wreg      unsigned char 
  6975 ;; Registers used:
  6976 ;;		wreg, status,2, status,0
  6977 ;; Tracked objects:
  6978 ;;		On entry : 0/0
  6979 ;;		On exit  : 0/0
  6980 ;;		Unchanged: 0/0
  6981 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6982 ;;      Params:         0       0       0       0       0       0       0
  6983 ;;      Locals:         2       0       0       0       0       0       0
  6984 ;;      Temps:          4       0       0       0       0       0       0
  6985 ;;      Totals:         6       0       0       0       0       0       0
  6986 ;;Total ram usage:        6 bytes
  6987 ;; Hardware stack levels used:    1
  6988 ;; Hardware stack levels required when called:    4
  6989 ;; This function calls:
  6990 ;;		Nothing
  6991 ;; This function is called by:
  6992 ;;		_selectNextObject
  6993 ;;		_genBerry
  6994 ;; This function uses a non-reentrant model
  6995 ;;
  6996                           
  6997                           	psect	text55
  6998  0019C4                     __ptext55:
  6999                           	opt callstack 0
  7000  0019C4                     _rnd_get_num:
  7001                           	opt callstack 20
  7002                           
  7003                           ;randgen.c: 21:     unsigned b = ((_lfsr >> 0) ^ (_lfsr >> 1) ^ (_lfsr >> 3) ^ (_lfsr >>
      +                           12) ) & 1;
  7004                           
  7005                           ;incstack = 0
  7006  0019C4  C04E  F00C         	movff	__lfsr,??_rnd_get_num
  7007  0019C8  C04F  F00D         	movff	__lfsr+1,??_rnd_get_num+1
  7008  0019CC  90D8               	bcf	status,0,c
  7009  0019CE  320D               	rrcf	??_rnd_get_num+1,f,c
  7010  0019D0  320C               	rrcf	??_rnd_get_num,f,c
  7011  0019D2  90D8               	bcf	status,0,c
  7012  0019D4  320D               	rrcf	??_rnd_get_num+1,f,c
  7013  0019D6  320C               	rrcf	??_rnd_get_num,f,c
  7014  0019D8  90D8               	bcf	status,0,c
  7015  0019DA  320D               	rrcf	??_rnd_get_num+1,f,c
  7016  0019DC  320C               	rrcf	??_rnd_get_num,f,c
  7017  0019DE  90D8               	bcf	status,0,c
  7018  0019E0  304F               	rrcf	__lfsr+1,w,c
  7019  0019E2  6E0F               	movwf	(??_rnd_get_num+3)& (0+255),c
  7020  0019E4  304E               	rrcf	__lfsr,w,c
  7021  0019E6  6E0E               	movwf	(??_rnd_get_num+2)& (0+255),c
  7022  0019E8  500C               	movf	??_rnd_get_num,w,c
  7023  0019EA  1A0E               	xorwf	??_rnd_get_num+2,f,c
  7024  0019EC  500D               	movf	??_rnd_get_num+1,w,c
  7025  0019EE  1A0F               	xorwf	??_rnd_get_num+3,f,c
  7026  0019F0  384F               	swapf	__lfsr+1,w,c
  7027  0019F2  0B0F               	andlw	15
  7028  0019F4  1A0E               	xorwf	??_rnd_get_num+2,f,c
  7029  0019F6  0E00               	movlw	0
  7030  0019F8  1A0F               	xorwf	??_rnd_get_num+3,f,c
  7031  0019FA  504E               	movf	__lfsr,w,c
  7032  0019FC  1A0E               	xorwf	??_rnd_get_num+2,f,c
  7033  0019FE  504F               	movf	__lfsr+1,w,c
  7034  001A00  1A0F               	xorwf	??_rnd_get_num+3,f,c
  7035  001A02  0E01               	movlw	1
  7036  001A04  140E               	andwf	??_rnd_get_num+2,w,c
  7037  001A06  6E10               	movwf	rnd_get_num@b,c
  7038  001A08  6A11               	clrf	rnd_get_num@b+1,c
  7039                           
  7040                           ;randgen.c: 22:     _lfsr = (_lfsr >> 1) | (b << 15);
  7041  001A0A  C010  F00C         	movff	rnd_get_num@b,??_rnd_get_num
  7042  001A0E  C011  F00D         	movff	rnd_get_num@b+1,??_rnd_get_num+1
  7043  001A12  0E0F               	movlw	15
  7044  001A14                     u1925:
  7045  001A14  90D8               	bcf	status,0,c
  7046  001A16  360C               	rlcf	??_rnd_get_num,f,c
  7047  001A18  360D               	rlcf	??_rnd_get_num+1,f,c
  7048  001A1A  2EE8               	decfsz	wreg,f,c
  7049  001A1C  D7FB               	goto	u1925
  7050  001A1E  90D8               	bcf	status,0,c
  7051  001A20  304F               	rrcf	__lfsr+1,w,c
  7052  001A22  6E0F               	movwf	(??_rnd_get_num+3)& (0+255),c
  7053  001A24  304E               	rrcf	__lfsr,w,c
  7054  001A26  6E0E               	movwf	(??_rnd_get_num+2)& (0+255),c
  7055  001A28  500C               	movf	??_rnd_get_num,w,c
  7056  001A2A  100E               	iorwf	??_rnd_get_num+2,w,c
  7057  001A2C  6E4E               	movwf	__lfsr,c
  7058  001A2E  500D               	movf	??_rnd_get_num+1,w,c
  7059  001A30  100F               	iorwf	??_rnd_get_num+3,w,c
  7060  001A32  6E4F               	movwf	__lfsr+1,c
  7061                           
  7062                           ;randgen.c: 30:     return _lfsr;
  7063  001A34  504E               	movf	__lfsr,w,c
  7064  001A36  0012               	return		;funcret
  7065  001A38                     __end_of_rnd_get_num:
  7066                           	opt callstack 0
  7067                           
  7068 ;; *************** function ___lbmod *****************
  7069 ;; Defined at:
  7070 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\lbmod.c"
  7071 ;; Parameters:    Size  Location     Type
  7072 ;;  dividend        1    wreg     unsigned char 
  7073 ;;  divisor         1   11[COMRAM] unsigned char 
  7074 ;; Auto vars:     Size  Location     Type
  7075 ;;  dividend        1   12[COMRAM] unsigned char 
  7076 ;;  rem             1   14[COMRAM] unsigned char 
  7077 ;;  counter         1   13[COMRAM] unsigned char 
  7078 ;; Return value:  Size  Location     Type
  7079 ;;                  1    wreg      unsigned char 
  7080 ;; Registers used:
  7081 ;;		wreg, status,2, status,0
  7082 ;; Tracked objects:
  7083 ;;		On entry : 0/0
  7084 ;;		On exit  : 0/0
  7085 ;;		Unchanged: 0/0
  7086 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7087 ;;      Params:         1       0       0       0       0       0       0
  7088 ;;      Locals:         3       0       0       0       0       0       0
  7089 ;;      Temps:          0       0       0       0       0       0       0
  7090 ;;      Totals:         4       0       0       0       0       0       0
  7091 ;;Total ram usage:        4 bytes
  7092 ;; Hardware stack levels used:    1
  7093 ;; Hardware stack levels required when called:    4
  7094 ;; This function calls:
  7095 ;;		Nothing
  7096 ;; This function is called by:
  7097 ;;		_genBerry
  7098 ;; This function uses a non-reentrant model
  7099 ;;
  7100                           
  7101                           	psect	text56
  7102  00211C                     __ptext56:
  7103                           	opt callstack 0
  7104  00211C                     ___lbmod:
  7105                           	opt callstack 21
  7106                           
  7107                           ;incstack = 0
  7108                           ;___lbmod@dividend stored from wreg
  7109  00211C  6E0D               	movwf	___lbmod@dividend,c
  7110  00211E  0E08               	movlw	8
  7111  002120  6E0E               	movwf	___lbmod@counter,c
  7112  002122  0E00               	movlw	0
  7113  002124  6E0F               	movwf	___lbmod@rem,c
  7114  002126                     l3240:
  7115  002126  90D8               	bcf	status,0,c
  7116  002128  340D               	rlcf	___lbmod@dividend,w,c
  7117  00212A  340F               	rlcf	___lbmod@rem,w,c
  7118  00212C  6E0F               	movwf	___lbmod@rem,c
  7119  00212E  90D8               	bcf	status,0,c
  7120  002130  360D               	rlcf	___lbmod@dividend,f,c
  7121  002132  500C               	movf	___lbmod@divisor,w,c
  7122  002134  5C0F               	subwf	___lbmod@rem,w,c
  7123  002136  A0D8               	btfss	status,0,c
  7124  002138  D002               	goto	l3248
  7125  00213A  500C               	movf	___lbmod@divisor,w,c
  7126  00213C  5E0F               	subwf	___lbmod@rem,f,c
  7127  00213E                     l3248:
  7128  00213E  2E0E               	decfsz	___lbmod@counter,f,c
  7129  002140  D7F2               	goto	l3240
  7130  002142  500F               	movf	___lbmod@rem,w,c
  7131  002144  0012               	return		;funcret
  7132  002146                     __end_of___lbmod:
  7133                           	opt callstack 0
  7134                           
  7135 ;; *************** function _initialise_globals *****************
  7136 ;; Defined at:
  7137 ;;		line 105 in file "pictris.c"
  7138 ;; Parameters:    Size  Location     Type
  7139 ;;		None
  7140 ;; Auto vars:     Size  Location     Type
  7141 ;;		None
  7142 ;; Return value:  Size  Location     Type
  7143 ;;                  1    wreg      void 
  7144 ;; Registers used:
  7145 ;;		wreg, status,2, cstack
  7146 ;; Tracked objects:
  7147 ;;		On entry : 0/0
  7148 ;;		On exit  : 0/0
  7149 ;;		Unchanged: 0/0
  7150 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7151 ;;      Params:         0       0       0       0       0       0       0
  7152 ;;      Locals:         0       0       0       0       0       0       0
  7153 ;;      Temps:          0       0       0       0       0       0       0
  7154 ;;      Totals:         0       0       0       0       0       0       0
  7155 ;;Total ram usage:        0 bytes
  7156 ;; Hardware stack levels used:    1
  7157 ;; Hardware stack levels required when called:    5
  7158 ;; This function calls:
  7159 ;;		_set_mS
  7160 ;; This function is called by:
  7161 ;;		_mainGameLoop
  7162 ;;		_main
  7163 ;; This function uses a non-reentrant model
  7164 ;;
  7165                           
  7166                           	psect	text57
  7167  0023D2                     __ptext57:
  7168                           	opt callstack 0
  7169  0023D2                     _initialise_globals:
  7170                           	opt callstack 24
  7171                           
  7172                           ;pictris.c: 107:     set_mS(0);
  7173                           
  7174                           ;incstack = 0
  7175  0023D2  0E00               	movlw	0
  7176  0023D4  6E0D               	movwf	set_mS@amount+1,c
  7177  0023D6  0E00               	movlw	0
  7178  0023D8  6E0C               	movwf	set_mS@amount,c
  7179  0023DA  EC1C  F012         	call	_set_mS	;wreg free
  7180  0023DE  0012               	return		;funcret
  7181  0023E0                     __end_of_initialise_globals:
  7182                           	opt callstack 0
  7183                           
  7184 ;; *************** function _set_mS *****************
  7185 ;; Defined at:
  7186 ;;		line 15 in file "shared_logic.c"
  7187 ;; Parameters:    Size  Location     Type
  7188 ;;  amount          2   11[COMRAM] unsigned short 
  7189 ;; Auto vars:     Size  Location     Type
  7190 ;;		None
  7191 ;; Return value:  Size  Location     Type
  7192 ;;                  1    wreg      void 
  7193 ;; Registers used:
  7194 ;;		None
  7195 ;; Tracked objects:
  7196 ;;		On entry : 0/0
  7197 ;;		On exit  : 0/0
  7198 ;;		Unchanged: 0/0
  7199 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7200 ;;      Params:         2       0       0       0       0       0       0
  7201 ;;      Locals:         0       0       0       0       0       0       0
  7202 ;;      Temps:          0       0       0       0       0       0       0
  7203 ;;      Totals:         2       0       0       0       0       0       0
  7204 ;;Total ram usage:        2 bytes
  7205 ;; Hardware stack levels used:    1
  7206 ;; Hardware stack levels required when called:    4
  7207 ;; This function calls:
  7208 ;;		Nothing
  7209 ;; This function is called by:
  7210 ;;		_initialise_globals
  7211 ;;		_moveObjectDown
  7212 ;;		_selectNextObject
  7213 ;; This function uses a non-reentrant model
  7214 ;;
  7215                           
  7216                           	psect	text58
  7217  002438                     __ptext58:
  7218                           	opt callstack 0
  7219  002438                     _set_mS:
  7220                           	opt callstack 21
  7221                           
  7222                           ;shared_logic.c: 16:     mS = amount;
  7223                           
  7224                           ;incstack = 0
  7225  002438  C00C  F04C         	movff	set_mS@amount,_mS	;volatile
  7226  00243C  C00D  F04D         	movff	set_mS@amount+1,_mS+1	;volatile
  7227  002440  0012               	return		;funcret
  7228  002442                     __end_of_set_mS:
  7229                           	opt callstack 0
  7230                           
  7231 ;; *************** function _initialise_screen *****************
  7232 ;; Defined at:
  7233 ;;		line 27 in file "screen.c"
  7234 ;; Parameters:    Size  Location     Type
  7235 ;;		None
  7236 ;; Auto vars:     Size  Location     Type
  7237 ;;		None
  7238 ;; Return value:  Size  Location     Type
  7239 ;;                  1    wreg      void 
  7240 ;; Registers used:
  7241 ;;		wreg, status,2
  7242 ;; Tracked objects:
  7243 ;;		On entry : 0/0
  7244 ;;		On exit  : 0/0
  7245 ;;		Unchanged: 0/0
  7246 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7247 ;;      Params:         0       0       0       0       0       0       0
  7248 ;;      Locals:         0       0       0       0       0       0       0
  7249 ;;      Temps:          0       0       0       0       0       0       0
  7250 ;;      Totals:         0       0       0       0       0       0       0
  7251 ;;Total ram usage:        0 bytes
  7252 ;; Hardware stack levels used:    1
  7253 ;; Hardware stack levels required when called:    4
  7254 ;; This function calls:
  7255 ;;		Nothing
  7256 ;; This function is called by:
  7257 ;;		_main
  7258 ;; This function uses a non-reentrant model
  7259 ;;
  7260                           
  7261                           	psect	text59
  7262  002470                     __ptext59:
  7263                           	opt callstack 0
  7264  002470                     _initialise_screen:
  7265                           	opt callstack 26
  7266                           
  7267                           ;screen.c: 28:     UpdateScreen = 1;
  7268                           
  7269                           ;incstack = 0
  7270  002470  0E01               	movlw	1
  7271  002472  0100               	movlb	0	; () banked
  7272  002474  6FEC               	movwf	_UpdateScreen& (0+255),b	;volatile
  7273                           
  7274                           ; BSR set to: 0
  7275  002476  0012               	return		;funcret
  7276  002478                     __end_of_initialise_screen:
  7277                           	opt callstack 0
  7278                           
  7279 ;; *************** function _initialise_hardware *****************
  7280 ;; Defined at:
  7281 ;;		line 82 in file "pictris.c"
  7282 ;; Parameters:    Size  Location     Type
  7283 ;;		None
  7284 ;; Auto vars:     Size  Location     Type
  7285 ;;		None
  7286 ;; Return value:  Size  Location     Type
  7287 ;;                  1    wreg      void 
  7288 ;; Registers used:
  7289 ;;		wreg, status,2, cstack
  7290 ;; Tracked objects:
  7291 ;;		On entry : 0/0
  7292 ;;		On exit  : 0/0
  7293 ;;		Unchanged: 0/0
  7294 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7295 ;;      Params:         0       0       0       0       0       0       0
  7296 ;;      Locals:         0       0       0       0       0       0       0
  7297 ;;      Temps:          0       0       0       0       0       0       0
  7298 ;;      Totals:         0       0       0       0       0       0       0
  7299 ;;Total ram usage:        0 bytes
  7300 ;; Hardware stack levels used:    1
  7301 ;; Hardware stack levels required when called:    5
  7302 ;; This function calls:
  7303 ;;		_initialise_TMR0
  7304 ;; This function is called by:
  7305 ;;		_main
  7306 ;; This function uses a non-reentrant model
  7307 ;;
  7308                           
  7309                           	psect	text60
  7310  001FAA                     __ptext60:
  7311                           	opt callstack 0
  7312  001FAA                     _initialise_hardware:
  7313                           	opt callstack 25
  7314                           
  7315                           ;pictris.c: 85:     OSCCONbits.IDLEN = 0;
  7316                           
  7317                           ; BSR set to: 0
  7318                           ;incstack = 0
  7319  001FAA  9ED3               	bcf	4051,7,c	;volatile
  7320                           
  7321                           ;pictris.c: 86:     OSCCONbits.IRCF = 0x7;
  7322  001FAC  0E70               	movlw	112
  7323  001FAE  12D3               	iorwf	4051,f,c	;volatile
  7324                           
  7325                           ;pictris.c: 87:     OSCCONbits.SCS = 0x2;
  7326  001FB0  50D3               	movf	4051,w,c	;volatile
  7327  001FB2  0BFC               	andlw	-4
  7328  001FB4  0902               	iorlw	2
  7329  001FB6  6ED3               	movwf	4051,c	;volatile
  7330                           
  7331                           ;pictris.c: 90:     ADCON1bits.PCFG = 0x0F;
  7332  001FB8  0E0F               	movlw	15
  7333  001FBA  12C1               	iorwf	4033,f,c	;volatile
  7334                           
  7335                           ;pictris.c: 93:     DDRA = 0x00; PORTA = 0x00;
  7336  001FBC  0E00               	movlw	0
  7337  001FBE  6E92               	movwf	3986,c	;volatile
  7338  001FC0  0E00               	movlw	0
  7339  001FC2  6E80               	movwf	3968,c	;volatile
  7340                           
  7341                           ;pictris.c: 94:     DDRB = 0xFF; PORTB = 0x00; INTCON2bits.RBPU = 0;
  7342  001FC4  6893               	setf	3987,c	;volatile
  7343  001FC6  0E00               	movlw	0
  7344  001FC8  6E81               	movwf	3969,c	;volatile
  7345  001FCA  9EF1               	bcf	4081,7,c	;volatile
  7346                           
  7347                           ;pictris.c: 95:     DDRC = 0x00; PORTC = 0x00;
  7348  001FCC  0E00               	movlw	0
  7349  001FCE  6E94               	movwf	3988,c	;volatile
  7350  001FD0  0E00               	movlw	0
  7351  001FD2  6E82               	movwf	3970,c	;volatile
  7352                           
  7353                           ;pictris.c: 96:     DDRD = 0x00; PORTD = 0x00;
  7354  001FD4  0E00               	movlw	0
  7355  001FD6  6E95               	movwf	3989,c	;volatile
  7356  001FD8  0E00               	movlw	0
  7357  001FDA  6E83               	movwf	3971,c	;volatile
  7358                           
  7359                           ;pictris.c: 98:     initialise_TMR0();
  7360  001FDC  EC52  F011         	call	_initialise_TMR0	;wreg free
  7361                           
  7362                           ;pictris.c: 100:     IPEN = 0;
  7363  001FE0  9ED0               	bcf	4048,7,c	;volatile
  7364                           
  7365                           ;pictris.c: 101:     GIE = 1;
  7366  001FE2  8EF2               	bsf	4082,7,c	;volatile
  7367  001FE4  0012               	return		;funcret
  7368  001FE6                     __end_of_initialise_hardware:
  7369                           	opt callstack 0
  7370                           
  7371 ;; *************** function _initialise_TMR0 *****************
  7372 ;; Defined at:
  7373 ;;		line 70 in file "pictris.c"
  7374 ;; Parameters:    Size  Location     Type
  7375 ;;		None
  7376 ;; Auto vars:     Size  Location     Type
  7377 ;;		None
  7378 ;; Return value:  Size  Location     Type
  7379 ;;                  1    wreg      void 
  7380 ;; Registers used:
  7381 ;;		wreg, status,2
  7382 ;; Tracked objects:
  7383 ;;		On entry : 0/0
  7384 ;;		On exit  : 0/0
  7385 ;;		Unchanged: 0/0
  7386 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7387 ;;      Params:         0       0       0       0       0       0       0
  7388 ;;      Locals:         0       0       0       0       0       0       0
  7389 ;;      Temps:          0       0       0       0       0       0       0
  7390 ;;      Totals:         0       0       0       0       0       0       0
  7391 ;;Total ram usage:        0 bytes
  7392 ;; Hardware stack levels used:    1
  7393 ;; Hardware stack levels required when called:    4
  7394 ;; This function calls:
  7395 ;;		Nothing
  7396 ;; This function is called by:
  7397 ;;		_initialise_hardware
  7398 ;; This function uses a non-reentrant model
  7399 ;;
  7400                           
  7401                           	psect	text61
  7402  0022A4                     __ptext61:
  7403                           	opt callstack 0
  7404  0022A4                     _initialise_TMR0:
  7405                           	opt callstack 25
  7406                           
  7407                           ;pictris.c: 72:     T0CONbits.T0PS = 0x3;
  7408                           
  7409                           ;incstack = 0
  7410  0022A4  50D5               	movf	4053,w,c	;volatile
  7411  0022A6  0BF8               	andlw	-8
  7412  0022A8  0903               	iorlw	3
  7413  0022AA  6ED5               	movwf	4053,c	;volatile
  7414                           
  7415                           ;pictris.c: 73:     PSA = 0;
  7416  0022AC  96D5               	bcf	4053,3,c	;volatile
  7417                           
  7418                           ;pictris.c: 74:     T0CS = 0;
  7419  0022AE  9AD5               	bcf	4053,5,c	;volatile
  7420                           
  7421                           ;pictris.c: 75:     TMR0ON = 1;
  7422  0022B0  8ED5               	bsf	4053,7,c	;volatile
  7423                           
  7424                           ;pictris.c: 76:     TMR0 = (~125);
  7425  0022B2  0EFF               	movlw	255
  7426  0022B4  6ED7               	movwf	4055,c	;volatile
  7427  0022B6  0E82               	movlw	130
  7428  0022B8  6ED6               	movwf	4054,c	;volatile
  7429                           
  7430                           ;pictris.c: 77:     INTCONbits.TMR0IF = 0;
  7431  0022BA  94F2               	bcf	4082,2,c	;volatile
  7432                           
  7433                           ;pictris.c: 78:     TMR0IE = 1;
  7434  0022BC  8AF2               	bsf	4082,5,c	;volatile
  7435                           
  7436                           ;pictris.c: 79:     TMR0ON = 1;
  7437  0022BE  8ED5               	bsf	4053,7,c	;volatile
  7438  0022C0  0012               	return		;funcret
  7439  0022C2                     __end_of_initialise_TMR0:
  7440                           	opt callstack 0
  7441                           
  7442 ;; *************** function _get_mS *****************
  7443 ;; Defined at:
  7444 ;;		line 23 in file "shared_logic.c"
  7445 ;; Parameters:    Size  Location     Type
  7446 ;;		None
  7447 ;; Auto vars:     Size  Location     Type
  7448 ;;		None
  7449 ;; Return value:  Size  Location     Type
  7450 ;;                  2   11[COMRAM] unsigned short 
  7451 ;; Registers used:
  7452 ;;		None
  7453 ;; Tracked objects:
  7454 ;;		On entry : 0/0
  7455 ;;		On exit  : 0/0
  7456 ;;		Unchanged: 0/0
  7457 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7458 ;;      Params:         2       0       0       0       0       0       0
  7459 ;;      Locals:         0       0       0       0       0       0       0
  7460 ;;      Temps:          0       0       0       0       0       0       0
  7461 ;;      Totals:         2       0       0       0       0       0       0
  7462 ;;Total ram usage:        2 bytes
  7463 ;; Hardware stack levels used:    1
  7464 ;; Hardware stack levels required when called:    4
  7465 ;; This function calls:
  7466 ;;		Nothing
  7467 ;; This function is called by:
  7468 ;;		_main
  7469 ;; This function uses a non-reentrant model
  7470 ;;
  7471                           
  7472                           	psect	text62
  7473  002442                     __ptext62:
  7474                           	opt callstack 0
  7475  002442                     _get_mS:
  7476                           	opt callstack 26
  7477                           
  7478                           ;shared_logic.c: 24:     return mS;
  7479                           
  7480                           ;incstack = 0
  7481  002442  C04C  F00C         	movff	_mS,?_get_mS	;volatile
  7482  002446  C04D  F00D         	movff	_mS+1,?_get_mS+1	;volatile
  7483  00244A  0012               	return		;funcret
  7484  00244C                     __end_of_get_mS:
  7485                           	opt callstack 0
  7486                           
  7487 ;; *************** function _choosescreen *****************
  7488 ;; Defined at:
  7489 ;;		line 70 in file "screen.c"
  7490 ;; Parameters:    Size  Location     Type
  7491 ;;		None
  7492 ;; Auto vars:     Size  Location     Type
  7493 ;;  mask           16   26[COMRAM] unsigned short [8]
  7494 ;;  i               2   43[COMRAM] int 
  7495 ;;  tetris          1   42[COMRAM] _Bool 
  7496 ;; Return value:  Size  Location     Type
  7497 ;;                  1    wreg      _Bool 
  7498 ;; Registers used:
  7499 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7500 ;; Tracked objects:
  7501 ;;		On entry : 0/0
  7502 ;;		On exit  : 0/0
  7503 ;;		Unchanged: 0/0
  7504 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7505 ;;      Params:         0       0       0       0       0       0       0
  7506 ;;      Locals:        19       0       0       0       0       0       0
  7507 ;;      Temps:          0       0       0       0       0       0       0
  7508 ;;      Totals:        19       0       0       0       0       0       0
  7509 ;;Total ram usage:       19 bytes
  7510 ;; Hardware stack levels used:    1
  7511 ;; Hardware stack levels required when called:    7
  7512 ;; This function calls:
  7513 ;;		_checkDown
  7514 ;;		_checkUp
  7515 ;;		_mergeObjects
  7516 ;;		_pauseMultiplexing
  7517 ;;		_resumeMultiplexing
  7518 ;;		_set_splashscreen
  7519 ;; This function is called by:
  7520 ;;		_main
  7521 ;; This function uses a non-reentrant model
  7522 ;;
  7523                           
  7524                           	psect	text63
  7525  0011EA                     __ptext63:
  7526                           	opt callstack 0
  7527  0011EA                     _choosescreen:
  7528                           	opt callstack 23
  7529                           
  7530                           ;screen.c: 72:     _Bool tetris;;screen.c: 73:     int i;;screen.c: 74:     set_splashsc
      +                          reen(choose_screen);
  7531                           
  7532                           ;incstack = 0
  7533  0011EA  0EC1               	movlw	low _choose_screen
  7534  0011EC  6E13               	movwf	set_splashscreen@newData,c
  7535  0011EE  0E06               	movlw	high _choose_screen
  7536  0011F0  6E14               	movwf	set_splashscreen@newData+1,c
  7537  0011F2  EC66  F00C         	call	_set_splashscreen	;wreg free
  7538  0011F6                     l5278:
  7539                           
  7540                           ;screen.c: 76:      while (checkDown(0) || checkUp(0))
  7541  0011F6  0E00               	movlw	0
  7542  0011F8  EC1B  F011         	call	_checkDown
  7543  0011FC  0900               	iorlw	0
  7544  0011FE  A4D8               	btfss	status,2,c
  7545  001200  D7FA               	goto	l5278
  7546  001202  0E00               	movlw	0
  7547  001204  EC07  F011         	call	_checkUp
  7548  001208  0900               	iorlw	0
  7549  00120A  A4D8               	btfss	status,2,c
  7550  00120C  D7F4               	goto	l5278
  7551  00120E                     u5010:
  7552                           
  7553                           ;screen.c: 80:     while (!checkDown(0) && !checkUp(0))
  7554  00120E  0E00               	movlw	0
  7555  001210  EC1B  F011         	call	_checkDown
  7556  001214  0900               	iorlw	0
  7557  001216  A4D8               	btfss	status,2,c
  7558  001218  D006               	goto	u5030
  7559  00121A  0E00               	movlw	0
  7560  00121C  EC07  F011         	call	_checkUp
  7561  001220  0900               	iorlw	0
  7562  001222  B4D8               	btfsc	status,2,c
  7563  001224  D7F4               	goto	u5010
  7564  001226                     u5030:
  7565                           
  7566                           ;screen.c: 82:     uint16_t mask[8];;screen.c: 83:     if(checkDown(0) == 1) { for (i=0;
      +                          i<8;i++){ mask[i] = 0xFF00; } tetris = 0;}
  7567  001226  0E00               	movlw	0
  7568  001228  EC1B  F011         	call	_checkDown
  7569  00122C  06E8               	decf	wreg,f,c
  7570  00122E  A4D8               	btfss	status,2,c
  7571  001230  D01D               	goto	l5302
  7572  001232  0E00               	movlw	0
  7573  001234  6E2D               	movwf	choosescreen@i+1,c
  7574  001236  0E00               	movlw	0
  7575  001238  6E2C               	movwf	choosescreen@i,c
  7576  00123A                     l5294:
  7577  00123A  90D8               	bcf	status,0,c
  7578  00123C  342C               	rlcf	choosescreen@i,w,c
  7579  00123E  6ED9               	movwf	fsr2l,c
  7580  001240  342D               	rlcf	choosescreen@i+1,w,c
  7581  001242  6EDA               	movwf	fsr2h,c
  7582  001244  0E1B               	movlw	low choosescreen@mask
  7583  001246  26D9               	addwf	fsr2l,f,c
  7584  001248  0E00               	movlw	high choosescreen@mask
  7585  00124A  22DA               	addwfc	fsr2h,f,c
  7586  00124C  0E00               	movlw	0
  7587  00124E  6EDE               	movwf	postinc2,c
  7588  001250  0EFF               	movlw	255
  7589  001252  6EDD               	movwf	postdec2,c
  7590  001254  4A2C               	infsnz	choosescreen@i,f,c
  7591  001256  2A2D               	incf	choosescreen@i+1,f,c
  7592  001258  BE2D               	btfsc	choosescreen@i+1,7,c
  7593  00125A  D7EF               	goto	l5294
  7594  00125C  502D               	movf	choosescreen@i+1,w,c
  7595  00125E  E104               	bnz	u5050
  7596  001260  0E08               	movlw	8
  7597  001262  5C2C               	subwf	choosescreen@i,w,c
  7598  001264  A0D8               	btfss	status,0,c
  7599  001266  D7E9               	goto	l5294
  7600  001268                     u5050:
  7601  001268  0E00               	movlw	0
  7602  00126A  D022               	goto	L5
  7603  00126C                     l5302:
  7604  00126C  0E00               	movlw	0
  7605  00126E  EC07  F011         	call	_checkUp
  7606  001272  06E8               	decf	wreg,f,c
  7607  001274  A4D8               	btfss	status,2,c
  7608  001276  D01D               	goto	l5318
  7609  001278  0E00               	movlw	0
  7610  00127A  6E2D               	movwf	choosescreen@i+1,c
  7611  00127C  0E00               	movlw	0
  7612  00127E  6E2C               	movwf	choosescreen@i,c
  7613  001280                     l5310:
  7614  001280  90D8               	bcf	status,0,c
  7615  001282  342C               	rlcf	choosescreen@i,w,c
  7616  001284  6ED9               	movwf	fsr2l,c
  7617  001286  342D               	rlcf	choosescreen@i+1,w,c
  7618  001288  6EDA               	movwf	fsr2h,c
  7619  00128A  0E1B               	movlw	low choosescreen@mask
  7620  00128C  26D9               	addwf	fsr2l,f,c
  7621  00128E  0E00               	movlw	high choosescreen@mask
  7622  001290  22DA               	addwfc	fsr2h,f,c
  7623  001292  0EFF               	movlw	255
  7624  001294  6EDE               	movwf	postinc2,c
  7625  001296  0E00               	movlw	0
  7626  001298  6EDD               	movwf	postdec2,c
  7627  00129A  4A2C               	infsnz	choosescreen@i,f,c
  7628  00129C  2A2D               	incf	choosescreen@i+1,f,c
  7629  00129E  BE2D               	btfsc	choosescreen@i+1,7,c
  7630  0012A0  D7EF               	goto	l5310
  7631  0012A2  502D               	movf	choosescreen@i+1,w,c
  7632  0012A4  E104               	bnz	u5070
  7633  0012A6  0E08               	movlw	8
  7634  0012A8  5C2C               	subwf	choosescreen@i,w,c
  7635  0012AA  A0D8               	btfss	status,0,c
  7636  0012AC  D7E9               	goto	l5310
  7637  0012AE                     u5070:
  7638  0012AE  0E01               	movlw	1
  7639  0012B0                     L5:
  7640  0012B0  6E2B               	movwf	choosescreen@tetris,c
  7641  0012B2                     l5318:
  7642                           
  7643                           ;screen.c: 86:     pauseMultiplexing();
  7644  0012B2  ECC1  F011         	call	_pauseMultiplexing	;wreg free
  7645                           
  7646                           ;screen.c: 87:     mergeObjects(mask, ScreenData, INVERT);
  7647  0012B6  0E1B               	movlw	low choosescreen@mask
  7648  0012B8  6E0C               	movwf	mergeObjects@pSource,c
  7649  0012BA  0E00               	movlw	high choosescreen@mask
  7650  0012BC  6E0D               	movwf	mergeObjects@pSource+1,c
  7651  0012BE  0E8C               	movlw	low _ScreenData
  7652  0012C0  6E0E               	movwf	mergeObjects@pTarget,c
  7653  0012C2  0E00               	movlw	high _ScreenData
  7654  0012C4  6E0F               	movwf	mergeObjects@pTarget+1,c
  7655  0012C6  0E02               	movlw	2
  7656  0012C8  6E10               	movwf	mergeObjects@mode,c
  7657  0012CA  ECEE  F007         	call	_mergeObjects	;wreg free
  7658                           
  7659                           ;screen.c: 88:     resumeMultiplexing();
  7660  0012CE  EC3C  F012         	call	_resumeMultiplexing	;wreg free
  7661  0012D2                     l5324:
  7662                           
  7663                           ;screen.c: 91:     while (checkDown(0) || checkUp(0))
  7664  0012D2  0E00               	movlw	0
  7665  0012D4  EC1B  F011         	call	_checkDown
  7666  0012D8  0900               	iorlw	0
  7667  0012DA  A4D8               	btfss	status,2,c
  7668  0012DC  D7FA               	goto	l5324
  7669  0012DE  0E00               	movlw	0
  7670  0012E0  EC07  F011         	call	_checkUp
  7671  0012E4  0900               	iorlw	0
  7672  0012E6  A4D8               	btfss	status,2,c
  7673  0012E8  D7F4               	goto	l5324
  7674                           
  7675                           ;screen.c: 93:     return tetris;
  7676  0012EA  502B               	movf	choosescreen@tetris,w,c
  7677  0012EC  0012               	return		;funcret
  7678  0012EE                     __end_of_choosescreen:
  7679                           	opt callstack 0
  7680                           
  7681 ;; *************** function _set_splashscreen *****************
  7682 ;; Defined at:
  7683 ;;		line 59 in file "screen.c"
  7684 ;; Parameters:    Size  Location     Type
  7685 ;;  newData         2   18[COMRAM] PTR const unsigned short
  7686 ;;		 -> choose_screen(16), SNAKE(16), TETRIS(16), 
  7687 ;; Auto vars:     Size  Location     Type
  7688 ;;  i               2   24[COMRAM] int 
  7689 ;; Return value:  Size  Location     Type
  7690 ;;                  1    wreg      void 
  7691 ;; Registers used:
  7692 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7693 ;; Tracked objects:
  7694 ;;		On entry : 0/0
  7695 ;;		On exit  : 0/0
  7696 ;;		Unchanged: 0/0
  7697 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7698 ;;      Params:         2       0       0       0       0       0       0
  7699 ;;      Locals:         2       0       0       0       0       0       0
  7700 ;;      Temps:          4       0       0       0       0       0       0
  7701 ;;      Totals:         8       0       0       0       0       0       0
  7702 ;;Total ram usage:        8 bytes
  7703 ;; Hardware stack levels used:    1
  7704 ;; Hardware stack levels required when called:    6
  7705 ;; This function calls:
  7706 ;;		_clearArray
  7707 ;;		_pauseMultiplexing
  7708 ;;		_resumeMultiplexing
  7709 ;; This function is called by:
  7710 ;;		_tetris_screen
  7711 ;;		_snake_screen
  7712 ;;		_choosescreen
  7713 ;; This function uses a non-reentrant model
  7714 ;;
  7715                           
  7716                           	psect	text64
  7717  0018CC                     __ptext64:
  7718                           	opt callstack 0
  7719  0018CC                     _set_splashscreen:
  7720                           	opt callstack 21
  7721                           
  7722                           ;screen.c: 59: void set_splashscreen(const uint16_t *newData);screen.c: 60: {;screen.c: 
      +                          61:     pauseMultiplexing();
  7723                           
  7724                           ;incstack = 0
  7725  0018CC  ECC1  F011         	call	_pauseMultiplexing	;wreg free
  7726                           
  7727                           ;screen.c: 62:     clearArray(ScreenData, 8);
  7728  0018D0  0E8C               	movlw	low _ScreenData
  7729  0018D2  6E0C               	movwf	clearArray@pArray,c
  7730  0018D4  0E00               	movlw	high _ScreenData
  7731  0018D6  6E0D               	movwf	clearArray@pArray+1,c
  7732  0018D8  0E00               	movlw	0
  7733  0018DA  6E0F               	movwf	clearArray@size+1,c
  7734  0018DC  0E08               	movlw	8
  7735  0018DE  6E0E               	movwf	clearArray@size,c
  7736  0018E0  ECF3  F00F         	call	_clearArray	;wreg free
  7737                           
  7738                           ;screen.c: 63:     int i;;screen.c: 64:     for(i=0;i<8;i++){
  7739  0018E4  0E00               	movlw	0
  7740  0018E6  6E1A               	movwf	set_splashscreen@i+1,c
  7741  0018E8  0E00               	movlw	0
  7742  0018EA  6E19               	movwf	set_splashscreen@i,c
  7743  0018EC                     l4822:
  7744                           
  7745                           ;screen.c: 65:         ScreenData[i] = newData[i];
  7746  0018EC  C019  F015         	movff	set_splashscreen@i,??_set_splashscreen
  7747  0018F0  C01A  F016         	movff	set_splashscreen@i+1,??_set_splashscreen+1
  7748  0018F4  90D8               	bcf	status,0,c
  7749  0018F6  3615               	rlcf	??_set_splashscreen,f,c
  7750  0018F8  3616               	rlcf	??_set_splashscreen+1,f,c
  7751  0018FA  C013  F017         	movff	set_splashscreen@newData,??_set_splashscreen+2
  7752  0018FE  C014  F018         	movff	set_splashscreen@newData+1,??_set_splashscreen+3
  7753  001902  5015               	movf	??_set_splashscreen,w,c
  7754  001904  2617               	addwf	??_set_splashscreen+2,f,c
  7755  001906  5016               	movf	??_set_splashscreen+1,w,c
  7756  001908  2218               	addwfc	??_set_splashscreen+3,f,c
  7757  00190A  C017  FFF6         	movff	??_set_splashscreen+2,tblptrl
  7758  00190E  C018  FFF7         	movff	??_set_splashscreen+3,tblptrh
  7759  001912                     	if	0	;tblptru may be non-zero
  7760  001912                     	endif
  7761  001912                     	if	0	;tblptru may be non-zero
  7762  001912                     	endif
  7763  001912  90D8               	bcf	status,0,c
  7764  001914  3419               	rlcf	set_splashscreen@i,w,c
  7765  001916  6ED9               	movwf	fsr2l,c
  7766  001918  341A               	rlcf	set_splashscreen@i+1,w,c
  7767  00191A  6EDA               	movwf	fsr2h,c
  7768  00191C  0E8C               	movlw	low _ScreenData
  7769  00191E  26D9               	addwf	fsr2l,f,c
  7770  001920  0E00               	movlw	high _ScreenData
  7771  001922  22DA               	addwfc	fsr2h,f,c
  7772  001924  0009               	tblrd		*+
  7773  001926  CFF5 FFDE          	movff	tablat,postinc2
  7774  00192A  0008               	tblrd		*
  7775  00192C  CFF5 FFDD          	movff	tablat,postdec2
  7776                           
  7777                           ;screen.c: 66:     }
  7778  001930  4A19               	infsnz	set_splashscreen@i,f,c
  7779  001932  2A1A               	incf	set_splashscreen@i+1,f,c
  7780  001934  BE1A               	btfsc	set_splashscreen@i+1,7,c
  7781  001936  D7DA               	goto	l4822
  7782  001938  501A               	movf	set_splashscreen@i+1,w,c
  7783  00193A  E104               	bnz	u4340
  7784  00193C  0E08               	movlw	8
  7785  00193E  5C19               	subwf	set_splashscreen@i,w,c
  7786  001940  A0D8               	btfss	status,0,c
  7787  001942  D7D4               	goto	l4822
  7788  001944                     u4340:
  7789                           
  7790                           ;screen.c: 67:     resumeMultiplexing();
  7791  001944  EC3C  F012         	call	_resumeMultiplexing	;wreg free
  7792  001948  0012               	return		;funcret
  7793  00194A                     __end_of_set_splashscreen:
  7794                           	opt callstack 0
  7795                           
  7796 ;; *************** function _resumeMultiplexing *****************
  7797 ;; Defined at:
  7798 ;;		line 43 in file "screen.c"
  7799 ;; Parameters:    Size  Location     Type
  7800 ;;		None
  7801 ;; Auto vars:     Size  Location     Type
  7802 ;;		None
  7803 ;; Return value:  Size  Location     Type
  7804 ;;                  1    wreg      void 
  7805 ;; Registers used:
  7806 ;;		wreg, status,2
  7807 ;; Tracked objects:
  7808 ;;		On entry : 0/0
  7809 ;;		On exit  : 0/0
  7810 ;;		Unchanged: 0/0
  7811 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7812 ;;      Params:         0       0       0       0       0       0       0
  7813 ;;      Locals:         0       0       0       0       0       0       0
  7814 ;;      Temps:          0       0       0       0       0       0       0
  7815 ;;      Totals:         0       0       0       0       0       0       0
  7816 ;;Total ram usage:        0 bytes
  7817 ;; Hardware stack levels used:    1
  7818 ;; Hardware stack levels required when called:    4
  7819 ;; This function calls:
  7820 ;;		Nothing
  7821 ;; This function is called by:
  7822 ;;		_mainGameLoop
  7823 ;;		_tetris_button_left
  7824 ;;		_tetris_button_right
  7825 ;;		_tetris_button_up
  7826 ;;		_show_score
  7827 ;;		_set_screen
  7828 ;;		_set_splashscreen
  7829 ;;		_choosescreen
  7830 ;; This function uses a non-reentrant model
  7831 ;;
  7832                           
  7833                           	psect	text65
  7834  002478                     __ptext65:
  7835                           	opt callstack 0
  7836  002478                     _resumeMultiplexing:
  7837                           	opt callstack 22
  7838                           
  7839                           ;screen.c: 45:     UpdateScreen = 1;
  7840                           
  7841                           ;incstack = 0
  7842  002478  0E01               	movlw	1
  7843  00247A  0100               	movlb	0	; () banked
  7844  00247C  6FEC               	movwf	_UpdateScreen& (0+255),b	;volatile
  7845                           
  7846                           ; BSR set to: 0
  7847  00247E  0012               	return		;funcret
  7848  002480                     __end_of_resumeMultiplexing:
  7849                           	opt callstack 0
  7850                           
  7851 ;; *************** function _pauseMultiplexing *****************
  7852 ;; Defined at:
  7853 ;;		line 33 in file "screen.c"
  7854 ;; Parameters:    Size  Location     Type
  7855 ;;		None
  7856 ;; Auto vars:     Size  Location     Type
  7857 ;;		None
  7858 ;; Return value:  Size  Location     Type
  7859 ;;                  1    wreg      void 
  7860 ;; Registers used:
  7861 ;;		wreg, status,2, cstack
  7862 ;; Tracked objects:
  7863 ;;		On entry : 0/0
  7864 ;;		On exit  : 0/0
  7865 ;;		Unchanged: 0/0
  7866 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7867 ;;      Params:         0       0       0       0       0       0       0
  7868 ;;      Locals:         0       0       0       0       0       0       0
  7869 ;;      Temps:          0       0       0       0       0       0       0
  7870 ;;      Totals:         0       0       0       0       0       0       0
  7871 ;;Total ram usage:        0 bytes
  7872 ;; Hardware stack levels used:    1
  7873 ;; Hardware stack levels required when called:    5
  7874 ;; This function calls:
  7875 ;;		_waitForInterrupt
  7876 ;; This function is called by:
  7877 ;;		_mainGameLoop
  7878 ;;		_tetris_button_left
  7879 ;;		_tetris_button_right
  7880 ;;		_tetris_button_up
  7881 ;;		_show_score
  7882 ;;		_set_screen
  7883 ;;		_set_splashscreen
  7884 ;;		_choosescreen
  7885 ;; This function uses a non-reentrant model
  7886 ;;
  7887                           
  7888                           	psect	text66
  7889  002382                     __ptext66:
  7890                           	opt callstack 0
  7891  002382                     _pauseMultiplexing:
  7892                           	opt callstack 21
  7893                           
  7894                           ;screen.c: 35:     if (UpdateScreen)
  7895                           
  7896                           ; BSR set to: 0
  7897                           ;incstack = 0
  7898  002382  0100               	movlb	0	; () banked
  7899  002384  51EC               	movf	_UpdateScreen& (0+255),w,b	;volatile
  7900  002386  B4D8               	btfsc	status,2,c
  7901  002388  0012               	return	
  7902                           
  7903                           ; BSR set to: 0
  7904                           ;screen.c: 36:     {;screen.c: 37:         waitForInterrupt();
  7905  00238A  EC11  F012         	call	_waitForInterrupt	;wreg free
  7906                           
  7907                           ;screen.c: 38:         UpdateScreen = 0;
  7908  00238E  0E00               	movlw	0
  7909  002390  0100               	movlb	0	; () banked
  7910  002392  6FEC               	movwf	_UpdateScreen& (0+255),b	;volatile
  7911                           
  7912                           ; BSR set to: 0
  7913  002394  0012               	return		;funcret
  7914  002396                     __end_of_pauseMultiplexing:
  7915                           	opt callstack 0
  7916                           
  7917 ;; *************** function _waitForInterrupt *****************
  7918 ;; Defined at:
  7919 ;;		line 45 in file "interrupt.c"
  7920 ;; Parameters:    Size  Location     Type
  7921 ;;		None
  7922 ;; Auto vars:     Size  Location     Type
  7923 ;;		None
  7924 ;; Return value:  Size  Location     Type
  7925 ;;                  1    wreg      void 
  7926 ;; Registers used:
  7927 ;;		wreg, status,2
  7928 ;; Tracked objects:
  7929 ;;		On entry : 0/0
  7930 ;;		On exit  : 0/0
  7931 ;;		Unchanged: 0/0
  7932 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7933 ;;      Params:         0       0       0       0       0       0       0
  7934 ;;      Locals:         0       0       0       0       0       0       0
  7935 ;;      Temps:          0       0       0       0       0       0       0
  7936 ;;      Totals:         0       0       0       0       0       0       0
  7937 ;;Total ram usage:        0 bytes
  7938 ;; Hardware stack levels used:    1
  7939 ;; Hardware stack levels required when called:    4
  7940 ;; This function calls:
  7941 ;;		Nothing
  7942 ;; This function is called by:
  7943 ;;		_WriteEEByte
  7944 ;;		_pauseMultiplexing
  7945 ;; This function uses a non-reentrant model
  7946 ;;
  7947                           
  7948                           	psect	text67
  7949  002422                     __ptext67:
  7950                           	opt callstack 0
  7951  002422                     _waitForInterrupt:
  7952                           	opt callstack 22
  7953                           
  7954                           ;interrupt.c: 47:     InterruptComplete = 0;
  7955                           
  7956                           ; BSR set to: 0
  7957                           ;incstack = 0
  7958  002422  0E00               	movlw	0
  7959  002424  6E34               	movwf	_InterruptComplete,c	;volatile
  7960  002426                     l4384:
  7961                           
  7962                           ;interrupt.c: 48:     while (!InterruptComplete)
  7963  002426  5034               	movf	_InterruptComplete,w,c	;volatile
  7964  002428  A4D8               	btfss	status,2,c
  7965  00242A  0012               	return	
  7966  00242C  D7FC               	goto	l4384
  7967  00242E                     __end_of_waitForInterrupt:
  7968                           	opt callstack 0
  7969                           
  7970 ;; *************** function _clearArray *****************
  7971 ;; Defined at:
  7972 ;;		line 110 in file "shared_logic.c"
  7973 ;; Parameters:    Size  Location     Type
  7974 ;;  pArray          2   11[COMRAM] PTR volatile unsigned sh
  7975 ;;		 -> ScreenData(16), show_score@Numberscreen(16), show_score@tmpObjectData(16), Screen_Data(16), 
  7976 ;;		 -> tmpObjectData(16), ObjectData(16), BackgroundData(16), 
  7977 ;;  size            2   13[COMRAM] unsigned int 
  7978 ;; Auto vars:     Size  Location     Type
  7979 ;;  i               1   17[COMRAM] unsigned char 
  7980 ;; Return value:  Size  Location     Type
  7981 ;;                  1    wreg      void 
  7982 ;; Registers used:
  7983 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  7984 ;; Tracked objects:
  7985 ;;		On entry : 0/0
  7986 ;;		On exit  : 0/0
  7987 ;;		Unchanged: 0/0
  7988 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7989 ;;      Params:         4       0       0       0       0       0       0
  7990 ;;      Locals:         1       0       0       0       0       0       0
  7991 ;;      Temps:          2       0       0       0       0       0       0
  7992 ;;      Totals:         7       0       0       0       0       0       0
  7993 ;;Total ram usage:        7 bytes
  7994 ;; Hardware stack levels used:    1
  7995 ;; Hardware stack levels required when called:    4
  7996 ;; This function calls:
  7997 ;;		Nothing
  7998 ;; This function is called by:
  7999 ;;		_newRotation
  8000 ;;		_initialise_tetris
  8001 ;;		_SnakeGraph
  8002 ;;		_show_score
  8003 ;;		_set_screen
  8004 ;;		_set_splashscreen
  8005 ;; This function uses a non-reentrant model
  8006 ;;
  8007                           
  8008                           	psect	text68
  8009  001FE6                     __ptext68:
  8010                           	opt callstack 0
  8011  001FE6                     _clearArray:
  8012                           	opt callstack 22
  8013                           
  8014                           ;shared_logic.c: 110: void clearArray(volatile uint16_t *pArray, size_t size);shared_log
      +                          ic.c: 111: {;shared_logic.c: 112:     uint8_t i;;shared_logic.c: 113:     for (i = 0; i 
      +                          < size; i++)
  8015                           
  8016                           ;incstack = 0
  8017  001FE6  0E00               	movlw	0
  8018  001FE8  6E12               	movwf	clearArray@i,c
  8019  001FEA  D011               	goto	l4622
  8020  001FEC                     l4618:
  8021                           
  8022                           ;shared_logic.c: 114:         pArray[i] = 0;
  8023  001FEC  5012               	movf	clearArray@i,w,c
  8024  001FEE  0D02               	mullw	2
  8025  001FF0  CFF3 F010          	movff	prodl,??_clearArray
  8026  001FF4  CFF4 F011          	movff	prodh,??_clearArray+1
  8027  001FF8  5010               	movf	??_clearArray,w,c
  8028  001FFA  240C               	addwf	clearArray@pArray,w,c
  8029  001FFC  6ED9               	movwf	fsr2l,c
  8030  001FFE  5011               	movf	??_clearArray+1,w,c
  8031  002000  200D               	addwfc	clearArray@pArray+1,w,c
  8032  002002  6EDA               	movwf	fsr2h,c
  8033  002004  0E00               	movlw	0
  8034  002006  6EDE               	movwf	postinc2,c
  8035  002008  0E00               	movlw	0
  8036  00200A  6EDD               	movwf	postdec2,c
  8037  00200C  2A12               	incf	clearArray@i,f,c
  8038  00200E                     l4622:
  8039  00200E  5012               	movf	clearArray@i,w,c
  8040  002010  6E10               	movwf	??_clearArray& (0+255),c
  8041  002012  6A11               	clrf	(??_clearArray+1)& (0+255),c
  8042  002014  500E               	movf	clearArray@size,w,c
  8043  002016  5C10               	subwf	??_clearArray,w,c
  8044  002018  500F               	movf	clearArray@size+1,w,c
  8045  00201A  5811               	subwfb	??_clearArray+1,w,c
  8046  00201C  B0D8               	btfsc	status,0,c
  8047  00201E  0012               	return	
  8048  002020  D7E5               	goto	l4618
  8049  002022                     __end_of_clearArray:
  8050                           	opt callstack 0
  8051                           
  8052 ;; *************** function _mergeObjects *****************
  8053 ;; Defined at:
  8054 ;;		line 117 in file "shared_logic.c"
  8055 ;; Parameters:    Size  Location     Type
  8056 ;;  pSource         2   11[COMRAM] PTR volatile unsigned sh
  8057 ;;		 -> choosescreen@mask(16), show_score@mask(16), show_score@tmpObjectData(16), tmpObjectData(16), 
  8058 ;;		 -> ObjectData(16), BackgroundData(16), 
  8059 ;;  pTarget         2   13[COMRAM] PTR volatile unsigned sh
  8060 ;;		 -> ScreenData(16), show_score@Numberscreen(16), Screen_Data(16), tmpObjectData(16), 
  8061 ;;		 -> ObjectData(16), BackgroundData(16), 
  8062 ;;  mode            1   15[COMRAM] enum E2557
  8063 ;; Auto vars:     Size  Location     Type
  8064 ;;  i               1   22[COMRAM] unsigned char 
  8065 ;; Return value:  Size  Location     Type
  8066 ;;                  1    wreg      void 
  8067 ;; Registers used:
  8068 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  8069 ;; Tracked objects:
  8070 ;;		On entry : 0/0
  8071 ;;		On exit  : 0/0
  8072 ;;		Unchanged: 0/0
  8073 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8074 ;;      Params:         5       0       0       0       0       0       0
  8075 ;;      Locals:         1       0       0       0       0       0       0
  8076 ;;      Temps:          6       0       0       0       0       0       0
  8077 ;;      Totals:        12       0       0       0       0       0       0
  8078 ;;Total ram usage:       12 bytes
  8079 ;; Hardware stack levels used:    1
  8080 ;; Hardware stack levels required when called:    4
  8081 ;; This function calls:
  8082 ;;		Nothing
  8083 ;; This function is called by:
  8084 ;;		_moveObjectDown
  8085 ;;		_tetris_button_left
  8086 ;;		_tetris_button_right
  8087 ;;		_tetris_button_up
  8088 ;;		_tetris_main
  8089 ;;		_show_score
  8090 ;;		_choosescreen
  8091 ;; This function uses a non-reentrant model
  8092 ;;
  8093                           
  8094                           	psect	text69
  8095  000FDC                     __ptext69:
  8096                           	opt callstack 0
  8097  000FDC                     _mergeObjects:
  8098                           	opt callstack 22
  8099                           
  8100                           ;shared_logic.c: 117: void mergeObjects(volatile uint16_t * pSource, volatile uint16_t *
      +                           pTarget, mode_t mode);shared_logic.c: 118: {;shared_logic.c: 119:     uint8_t i;;shared
      +                          _logic.c: 121:     switch (mode)
  8101                           
  8102                           ;incstack = 0
  8103  000FDC  D071               	goto	l4470
  8104  000FDE                     l4432:
  8105                           
  8106                           ;shared_logic.c: 124:         for (i = 0; i < 8; i++)
  8107  000FDE  0E00               	movlw	0
  8108  000FE0  6E17               	movwf	mergeObjects@i,c
  8109  000FE2                     l4438:
  8110                           
  8111                           ;shared_logic.c: 125:             pTarget[i] = pSource[i];
  8112  000FE2  5017               	movf	mergeObjects@i,w,c
  8113  000FE4  0D02               	mullw	2
  8114  000FE6  CFF3 F011          	movff	prodl,??_mergeObjects
  8115  000FEA  CFF4 F012          	movff	prodh,??_mergeObjects+1
  8116  000FEE  5011               	movf	??_mergeObjects,w,c
  8117  000FF0  240C               	addwf	mergeObjects@pSource,w,c
  8118  000FF2  6ED9               	movwf	fsr2l,c
  8119  000FF4  5012               	movf	??_mergeObjects+1,w,c
  8120  000FF6  200D               	addwfc	mergeObjects@pSource+1,w,c
  8121  000FF8  6EDA               	movwf	fsr2h,c
  8122  000FFA  5017               	movf	mergeObjects@i,w,c
  8123  000FFC  0D02               	mullw	2
  8124  000FFE  CFF3 F013          	movff	prodl,??_mergeObjects+2
  8125  001002  CFF4 F014          	movff	prodh,??_mergeObjects+3
  8126  001006  5013               	movf	??_mergeObjects+2,w,c
  8127  001008  240E               	addwf	mergeObjects@pTarget,w,c
  8128  00100A  6EE1               	movwf	fsr1l,c
  8129  00100C  5014               	movf	??_mergeObjects+3,w,c
  8130  00100E  200F               	addwfc	mergeObjects@pTarget+1,w,c
  8131  001010  6EE2               	movwf	fsr1h,c
  8132  001012  CFDE FFE6          	movff	postinc2,postinc1
  8133  001016  CFDD FFE5          	movff	postdec2,postdec1
  8134  00101A  2A17               	incf	mergeObjects@i,f,c
  8135  00101C  0E07               	movlw	7
  8136  00101E  6417               	cpfsgt	mergeObjects@i,c
  8137  001020  D7E0               	goto	l4438
  8138  001022  0012               	return	
  8139  001024                     l4444:
  8140                           
  8141                           ;shared_logic.c: 128:         for (i = 0; i < 8; i++)
  8142  001024  0E00               	movlw	0
  8143  001026  6E17               	movwf	mergeObjects@i,c
  8144  001028                     l4450:
  8145                           
  8146                           ;shared_logic.c: 129:             pTarget[i] |= pSource[i];
  8147  001028  5017               	movf	mergeObjects@i,w,c
  8148  00102A  0D02               	mullw	2
  8149  00102C  CFF3 F011          	movff	prodl,??_mergeObjects
  8150  001030  CFF4 F012          	movff	prodh,??_mergeObjects+1
  8151  001034  5011               	movf	??_mergeObjects,w,c
  8152  001036  240C               	addwf	mergeObjects@pSource,w,c
  8153  001038  6ED9               	movwf	fsr2l,c
  8154  00103A  5012               	movf	??_mergeObjects+1,w,c
  8155  00103C  200D               	addwfc	mergeObjects@pSource+1,w,c
  8156  00103E  6EDA               	movwf	fsr2h,c
  8157  001040  CFDE F013          	movff	postinc2,??_mergeObjects+2
  8158  001044  CFDD F014          	movff	postdec2,??_mergeObjects+3
  8159  001048  5017               	movf	mergeObjects@i,w,c
  8160  00104A  0D02               	mullw	2
  8161  00104C  CFF3 F015          	movff	prodl,??_mergeObjects+4
  8162  001050  CFF4 F016          	movff	prodh,??_mergeObjects+5
  8163  001054  5015               	movf	??_mergeObjects+4,w,c
  8164  001056  240E               	addwf	mergeObjects@pTarget,w,c
  8165  001058  6ED9               	movwf	fsr2l,c
  8166  00105A  5016               	movf	??_mergeObjects+5,w,c
  8167  00105C  200F               	addwfc	mergeObjects@pTarget+1,w,c
  8168  00105E  6EDA               	movwf	fsr2h,c
  8169  001060  5013               	movf	??_mergeObjects+2,w,c
  8170  001062  12DE               	iorwf	postinc2,f,c
  8171  001064  5014               	movf	??_mergeObjects+3,w,c
  8172  001066  12DD               	iorwf	postdec2,f,c
  8173  001068  2A17               	incf	mergeObjects@i,f,c
  8174  00106A  0E07               	movlw	7
  8175  00106C  6417               	cpfsgt	mergeObjects@i,c
  8176  00106E  D7DC               	goto	l4450
  8177  001070  0012               	return	
  8178  001072                     l4456:
  8179                           
  8180                           ;shared_logic.c: 132:         for (i = 0; i < 8; i++)
  8181  001072  0E00               	movlw	0
  8182  001074  6E17               	movwf	mergeObjects@i,c
  8183  001076                     l4462:
  8184                           
  8185                           ;shared_logic.c: 133:             pTarget[i] ^= pSource[i];
  8186  001076  5017               	movf	mergeObjects@i,w,c
  8187  001078  0D02               	mullw	2
  8188  00107A  CFF3 F011          	movff	prodl,??_mergeObjects
  8189  00107E  CFF4 F012          	movff	prodh,??_mergeObjects+1
  8190  001082  5011               	movf	??_mergeObjects,w,c
  8191  001084  240C               	addwf	mergeObjects@pSource,w,c
  8192  001086  6ED9               	movwf	fsr2l,c
  8193  001088  5012               	movf	??_mergeObjects+1,w,c
  8194  00108A  200D               	addwfc	mergeObjects@pSource+1,w,c
  8195  00108C  6EDA               	movwf	fsr2h,c
  8196  00108E  CFDE F013          	movff	postinc2,??_mergeObjects+2
  8197  001092  CFDD F014          	movff	postdec2,??_mergeObjects+3
  8198  001096  5017               	movf	mergeObjects@i,w,c
  8199  001098  0D02               	mullw	2
  8200  00109A  CFF3 F015          	movff	prodl,??_mergeObjects+4
  8201  00109E  CFF4 F016          	movff	prodh,??_mergeObjects+5
  8202  0010A2  5015               	movf	??_mergeObjects+4,w,c
  8203  0010A4  240E               	addwf	mergeObjects@pTarget,w,c
  8204  0010A6  6ED9               	movwf	fsr2l,c
  8205  0010A8  5016               	movf	??_mergeObjects+5,w,c
  8206  0010AA  200F               	addwfc	mergeObjects@pTarget+1,w,c
  8207  0010AC  6EDA               	movwf	fsr2h,c
  8208  0010AE  5013               	movf	??_mergeObjects+2,w,c
  8209  0010B0  1ADE               	xorwf	postinc2,f,c
  8210  0010B2  5014               	movf	??_mergeObjects+3,w,c
  8211  0010B4  1ADD               	xorwf	postdec2,f,c
  8212  0010B6  2A17               	incf	mergeObjects@i,f,c
  8213  0010B8  0E07               	movlw	7
  8214  0010BA  6417               	cpfsgt	mergeObjects@i,c
  8215  0010BC  D7DC               	goto	l4462
  8216  0010BE  0012               	return	
  8217  0010C0                     l4470:
  8218  0010C0  5010               	movf	mergeObjects@mode,w,c
  8219  0010C2  6E11               	movwf	??_mergeObjects& (0+255),c
  8220  0010C4  6A12               	clrf	(??_mergeObjects+1)& (0+255),c
  8221                           
  8222                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  8223                           ; Switch size 1, requested type "simple"
  8224                           ; Number of cases is 1, Range of values is 0 to 0
  8225                           ; switch strategies available:
  8226                           ; Name         Instructions Cycles
  8227                           ; simple_byte            4     3 (average)
  8228                           ;	Chosen strategy is simple_byte
  8229  0010C6  5012               	movf	??_mergeObjects+1,w,c
  8230  0010C8  0A00               	xorlw	0	; case 0
  8231  0010CA  A4D8               	btfss	status,2,c
  8232  0010CC  0012               	return	
  8233                           
  8234                           ; Switch size 1, requested type "simple"
  8235                           ; Number of cases is 3, Range of values is 0 to 2
  8236                           ; switch strategies available:
  8237                           ; Name         Instructions Cycles
  8238                           ; simple_byte           10     6 (average)
  8239                           ;	Chosen strategy is simple_byte
  8240  0010CE  5011               	movf	??_mergeObjects,w,c
  8241  0010D0  0A00               	xorlw	0	; case 0
  8242  0010D2  B4D8               	btfsc	status,2,c
  8243  0010D4  D784               	goto	l4432
  8244  0010D6  0A01               	xorlw	1	; case 1
  8245  0010D8  B4D8               	btfsc	status,2,c
  8246  0010DA  D7A4               	goto	l4444
  8247  0010DC  0A03               	xorlw	3	; case 2
  8248  0010DE  A4D8               	btfss	status,2,c
  8249  0010E0  0012               	return	
  8250  0010E2  D7C7               	goto	l4456
  8251  0010E4                     __end_of_mergeObjects:
  8252                           	opt callstack 0
  8253                           
  8254 ;; *************** function _checkUp *****************
  8255 ;; Defined at:
  8256 ;;		line 71 in file "buttons.c"
  8257 ;; Parameters:    Size  Location     Type
  8258 ;;  reset           1    wreg     _Bool 
  8259 ;; Auto vars:     Size  Location     Type
  8260 ;;  reset           1   11[COMRAM] _Bool 
  8261 ;; Return value:  Size  Location     Type
  8262 ;;                  1    wreg      _Bool 
  8263 ;; Registers used:
  8264 ;;		wreg, status,2
  8265 ;; Tracked objects:
  8266 ;;		On entry : 0/0
  8267 ;;		On exit  : 0/0
  8268 ;;		Unchanged: 0/0
  8269 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8270 ;;      Params:         0       0       0       0       0       0       0
  8271 ;;      Locals:         1       0       0       0       0       0       0
  8272 ;;      Temps:          0       0       0       0       0       0       0
  8273 ;;      Totals:         1       0       0       0       0       0       0
  8274 ;;Total ram usage:        1 bytes
  8275 ;; Hardware stack levels used:    1
  8276 ;; Hardware stack levels required when called:    4
  8277 ;; This function calls:
  8278 ;;		Nothing
  8279 ;; This function is called by:
  8280 ;;		_tetris_buttons
  8281 ;;		_snake_buttons
  8282 ;;		_choosescreen
  8283 ;; This function uses a non-reentrant model
  8284 ;;
  8285                           
  8286                           	psect	text70
  8287  00220E                     __ptext70:
  8288                           	opt callstack 0
  8289  00220E                     _checkUp:
  8290                           	opt callstack 23
  8291                           
  8292                           ;incstack = 0
  8293                           ;checkUp@reset stored from wreg
  8294  00220E  6E0C               	movwf	checkUp@reset,c
  8295                           
  8296                           ;buttons.c: 72:     if (Rotate_Debounced)
  8297  002210  504B               	movf	_Rotate_Debounced,w,c	;volatile
  8298  002212  B4D8               	btfsc	status,2,c
  8299  002214  D00E               	goto	l3642
  8300                           
  8301                           ;buttons.c: 73:     {;buttons.c: 74:         Rotate_Delay = 500;
  8302  002216  0E01               	movlw	1
  8303  002218  0100               	movlb	0	; () banked
  8304  00221A  6FF2               	movwf	(_Rotate_Delay+1)& (0+255),b	;volatile
  8305  00221C  0EF4               	movlw	244
  8306  00221E  6FF1               	movwf	_Rotate_Delay& (0+255),b	;volatile
  8307                           
  8308                           ;buttons.c: 75:         Rotate_Debounced = !reset;
  8309  002220  500C               	movf	checkUp@reset,w,c
  8310  002222  A4D8               	btfss	status,2,c
  8311  002224  D002               	goto	u2860
  8312  002226  0E01               	movlw	1
  8313  002228  D001               	goto	u2870
  8314  00222A                     u2860:
  8315  00222A  0E00               	movlw	0
  8316  00222C                     u2870:
  8317  00222C  6E4B               	movwf	_Rotate_Debounced,c	;volatile
  8318                           
  8319                           ; BSR set to: 0
  8320                           ;buttons.c: 76:         return 1;
  8321  00222E  0E01               	movlw	1
  8322  002230  0012               	return	
  8323  002232                     l3642:
  8324  002232  0E00               	movlw	0
  8325  002234  0012               	return		;funcret
  8326  002236                     __end_of_checkUp:
  8327                           	opt callstack 0
  8328                           
  8329 ;; *************** function _checkDown *****************
  8330 ;; Defined at:
  8331 ;;		line 80 in file "buttons.c"
  8332 ;; Parameters:    Size  Location     Type
  8333 ;;  reset           1    wreg     _Bool 
  8334 ;; Auto vars:     Size  Location     Type
  8335 ;;  reset           1   11[COMRAM] _Bool 
  8336 ;; Return value:  Size  Location     Type
  8337 ;;                  1    wreg      _Bool 
  8338 ;; Registers used:
  8339 ;;		wreg, status,2
  8340 ;; Tracked objects:
  8341 ;;		On entry : 0/0
  8342 ;;		On exit  : 0/0
  8343 ;;		Unchanged: 0/0
  8344 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8345 ;;      Params:         0       0       0       0       0       0       0
  8346 ;;      Locals:         1       0       0       0       0       0       0
  8347 ;;      Temps:          0       0       0       0       0       0       0
  8348 ;;      Totals:         1       0       0       0       0       0       0
  8349 ;;Total ram usage:        1 bytes
  8350 ;; Hardware stack levels used:    1
  8351 ;; Hardware stack levels required when called:    4
  8352 ;; This function calls:
  8353 ;;		Nothing
  8354 ;; This function is called by:
  8355 ;;		_tetris_buttons
  8356 ;;		_snake_buttons
  8357 ;;		_show_score
  8358 ;;		_choosescreen
  8359 ;; This function uses a non-reentrant model
  8360 ;;
  8361                           
  8362                           	psect	text71
  8363  002236                     __ptext71:
  8364                           	opt callstack 0
  8365  002236                     _checkDown:
  8366                           	opt callstack 23
  8367                           
  8368                           ;incstack = 0
  8369                           ;checkDown@reset stored from wreg
  8370  002236  6E0C               	movwf	checkDown@reset,c
  8371                           
  8372                           ;buttons.c: 81:     if (Down_Debounced)
  8373  002238  5048               	movf	_Down_Debounced,w,c	;volatile
  8374  00223A  B4D8               	btfsc	status,2,c
  8375  00223C  D00E               	goto	l4902
  8376                           
  8377                           ;buttons.c: 82:     {;buttons.c: 83:         Down_Delay = 500;
  8378  00223E  0E01               	movlw	1
  8379  002240  0100               	movlb	0	; () banked
  8380  002242  6FF0               	movwf	(_Down_Delay+1)& (0+255),b	;volatile
  8381  002244  0EF4               	movlw	244
  8382  002246  6FEF               	movwf	_Down_Delay& (0+255),b	;volatile
  8383                           
  8384                           ;buttons.c: 84:         Down_Debounced = !reset;
  8385  002248  500C               	movf	checkDown@reset,w,c
  8386  00224A  A4D8               	btfss	status,2,c
  8387  00224C  D002               	goto	u4490
  8388  00224E  0E01               	movlw	1
  8389  002250  D001               	goto	u4500
  8390  002252                     u4490:
  8391  002252  0E00               	movlw	0
  8392  002254                     u4500:
  8393  002254  6E48               	movwf	_Down_Debounced,c	;volatile
  8394                           
  8395                           ; BSR set to: 0
  8396                           ;buttons.c: 85:         return 1;
  8397  002256  0E01               	movlw	1
  8398  002258  0012               	return	
  8399  00225A                     l4902:
  8400  00225A  0E00               	movlw	0
  8401  00225C  0012               	return		;funcret
  8402  00225E                     __end_of_checkDown:
  8403                           	opt callstack 0
  8404                           
  8405 ;; *************** function _isr *****************
  8406 ;; Defined at:
  8407 ;;		line 59 in file "pictris.c"
  8408 ;; Parameters:    Size  Location     Type
  8409 ;;		None
  8410 ;; Auto vars:     Size  Location     Type
  8411 ;;		None
  8412 ;; Return value:  Size  Location     Type
  8413 ;;                  1    wreg      void 
  8414 ;; Registers used:
  8415 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  8416 ;; Tracked objects:
  8417 ;;		On entry : 0/0
  8418 ;;		On exit  : 0/0
  8419 ;;		Unchanged: 0/0
  8420 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8421 ;;      Params:         0       0       0       0       0       0       0
  8422 ;;      Locals:         0       0       0       0       0       0       0
  8423 ;;      Temps:          4       0       0       0       0       0       0
  8424 ;;      Totals:         4       0       0       0       0       0       0
  8425 ;;Total ram usage:        4 bytes
  8426 ;; Hardware stack levels used:    1
  8427 ;; Hardware stack levels required when called:    3
  8428 ;; This function calls:
  8429 ;;		_Interrupt
  8430 ;; This function is called by:
  8431 ;;		Interrupt level 2
  8432 ;; This function uses a non-reentrant model
  8433 ;;
  8434                           
  8435                           	psect	intcode
  8436  000008                     __pintcode:
  8437                           	opt callstack 0
  8438  000008                     _isr:
  8439                           	opt callstack 20
  8440                           
  8441                           ;incstack = 0
  8442  000008  8250               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
  8443  00000A  ED2D  F010         	call	int_func,f	;refresh shadow registers
  8444                           
  8445                           	psect	intcode_body
  8446  00205A                     __pintcode_body:
  8447                           	opt callstack 20
  8448  00205A                     int_func:
  8449                           	opt callstack 20
  8450  00205A  0006               	pop		; remove dummy address from shadow register refresh
  8451  00205C  CFD9 F008          	movff	fsr2l,??_isr
  8452  002060  CFDA F009          	movff	fsr2h,??_isr+1
  8453  002064  CFF3 F00A          	movff	prodl,??_isr+2
  8454  002068  CFF4 F00B          	movff	prodh,??_isr+3
  8455                           
  8456                           ;pictris.c: 61:     if (INTCONbits.TMR0IF)
  8457  00206C  A4F2               	btfss	4082,2,c	;volatile
  8458  00206E  D007               	goto	i2l76
  8459                           
  8460                           ;pictris.c: 62:     {;pictris.c: 63:         INTCONbits.TMR0IF = 0;
  8461  002070  94F2               	bcf	4082,2,c	;volatile
  8462                           
  8463                           ;pictris.c: 64:         TMR0 = (~125);
  8464  002072  0EFF               	movlw	255
  8465  002074  6ED7               	movwf	4055,c	;volatile
  8466  002076  0E82               	movlw	130
  8467  002078  6ED6               	movwf	4054,c	;volatile
  8468                           
  8469                           ;pictris.c: 65:         Interrupt();
  8470  00207A  ECE4  F00B         	call	_Interrupt	;wreg free
  8471  00207E                     i2l76:
  8472  00207E  C00B  FFF4         	movff	??_isr+3,prodh
  8473  002082  C00A  FFF3         	movff	??_isr+2,prodl
  8474  002086  C009  FFDA         	movff	??_isr+1,fsr2h
  8475  00208A  C008  FFD9         	movff	??_isr,fsr2l
  8476  00208E  9250               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
  8477  002090  0011               	retfie		f
  8478  002092                     __end_of_isr:
  8479                           	opt callstack 0
  8480                           
  8481 ;; *************** function _Interrupt *****************
  8482 ;; Defined at:
  8483 ;;		line 27 in file "interrupt.c"
  8484 ;; Parameters:    Size  Location     Type
  8485 ;;		None
  8486 ;; Auto vars:     Size  Location     Type
  8487 ;;		None
  8488 ;; Return value:  Size  Location     Type
  8489 ;;                  1    wreg      void 
  8490 ;; Registers used:
  8491 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  8492 ;; Tracked objects:
  8493 ;;		On entry : 0/0
  8494 ;;		On exit  : 0/0
  8495 ;;		Unchanged: 0/0
  8496 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8497 ;;      Params:         0       0       0       0       0       0       0
  8498 ;;      Locals:         0       0       0       0       0       0       0
  8499 ;;      Temps:          0       0       0       0       0       0       0
  8500 ;;      Totals:         0       0       0       0       0       0       0
  8501 ;;Total ram usage:        0 bytes
  8502 ;; Hardware stack levels used:    1
  8503 ;; Hardware stack levels required when called:    2
  8504 ;; This function calls:
  8505 ;;		___lwmod
  8506 ;;		_add_mS
  8507 ;;		_checkButtons
  8508 ;;		_screen_update
  8509 ;;		_snake_timer
  8510 ;;		_tetris_timer
  8511 ;;		i2_get_mS
  8512 ;;		i2_set_mS
  8513 ;; This function is called by:
  8514 ;;		_isr
  8515 ;; This function uses a non-reentrant model
  8516 ;;
  8517                           
  8518                           	psect	text73
  8519  0017C8                     __ptext73:
  8520                           	opt callstack 0
  8521  0017C8                     _Interrupt:
  8522                           	opt callstack 20
  8523                           
  8524                           ;interrupt.c: 29:         time--;
  8525                           
  8526                           ;incstack = 0
  8527  0017C8  0100               	movlb	0	; () banked
  8528  0017CA  0788               	decf	_time& (0+255),f,b	;volatile
  8529  0017CC  A0D8               	btfss	status,0,c
  8530  0017CE  0789               	decf	(_time+1)& (0+255),f,b	;volatile
  8531                           
  8532                           ; BSR set to: 0
  8533                           ;interrupt.c: 31:         add_mS(1);
  8534  0017D0  0E00               	movlw	0
  8535  0017D2  6E02               	movwf	add_mS@amount+1,c
  8536  0017D4  0E01               	movlw	1
  8537  0017D6  6E01               	movwf	add_mS@amount,c
  8538  0017D8  ECFE  F011         	call	_add_mS	;wreg free
  8539                           
  8540                           ;interrupt.c: 32:         if (get_mS() >= 1600)
  8541  0017DC  EC2B  F012         	call	i2_get_mS	;wreg free
  8542  0017E0  0E40               	movlw	64
  8543  0017E2  5C01               	subwf	?i2_get_mS,w,c
  8544  0017E4  0E06               	movlw	6
  8545  0017E6  5802               	subwfb	?i2_get_mS+1,w,c
  8546  0017E8  A0D8               	btfss	status,0,c
  8547  0017EA  D006               	goto	i2l4192
  8548                           
  8549                           ;interrupt.c: 33:         {;interrupt.c: 34:             set_mS(0);
  8550  0017EC  0E00               	movlw	0
  8551  0017EE  6E02               	movwf	i2set_mS@amount+1,c
  8552  0017F0  0E00               	movlw	0
  8553  0017F2  6E01               	movwf	i2set_mS@amount,c
  8554  0017F4  EC26  F012         	call	i2_set_mS	;wreg free
  8555  0017F8                     i2l4192:
  8556                           
  8557                           ;interrupt.c: 36:         if (get_mS() % 800 == 0 && tetris_timer())
  8558  0017F8  EC2B  F012         	call	i2_get_mS	;wreg free
  8559  0017FC  C001  F003         	movff	?i2_get_mS,___lwmod@dividend
  8560  001800  C002  F004         	movff	?i2_get_mS+1,___lwmod@dividend+1
  8561  001804  0E03               	movlw	3
  8562  001806  6E06               	movwf	___lwmod@divisor+1,c
  8563  001808  0E20               	movlw	32
  8564  00180A  6E05               	movwf	___lwmod@divisor,c
  8565  00180C  EC76  F00F         	call	___lwmod	;wreg free
  8566  001810  5003               	movf	?___lwmod,w,c
  8567  001812  1004               	iorwf	?___lwmod+1,w,c
  8568  001814  B4D8               	btfsc	status,2,c
  8569  001816  ECF0  F011         	call	_tetris_timer	;wreg free
  8570                           
  8571                           ;interrupt.c: 38:         if(get_mS() % 200 == 0 && snake_timer())
  8572  00181A  EC2B  F012         	call	i2_get_mS	;wreg free
  8573  00181E  C001  F003         	movff	?i2_get_mS,___lwmod@dividend
  8574  001822  C002  F004         	movff	?i2_get_mS+1,___lwmod@dividend+1
  8575  001826  0E00               	movlw	0
  8576  001828  6E06               	movwf	___lwmod@divisor+1,c
  8577  00182A  0EC8               	movlw	200
  8578  00182C  6E05               	movwf	___lwmod@divisor,c
  8579  00182E  EC76  F00F         	call	___lwmod	;wreg free
  8580  001832  5003               	movf	?___lwmod,w,c
  8581  001834  1004               	iorwf	?___lwmod+1,w,c
  8582  001836  B4D8               	btfsc	status,2,c
  8583  001838  ECF7  F011         	call	_snake_timer	;wreg free
  8584                           
  8585                           ;interrupt.c: 40:         checkButtons();
  8586  00183C  EC25  F00C         	call	_checkButtons	;wreg free
  8587                           
  8588                           ;interrupt.c: 41:         screen_update();
  8589  001840  ECDE  F00E         	call	_screen_update	;wreg free
  8590                           
  8591                           ;interrupt.c: 42:         InterruptComplete = 1;
  8592  001844  0E01               	movlw	1
  8593  001846  6E34               	movwf	_InterruptComplete,c	;volatile
  8594  001848  0012               	return		;funcret
  8595  00184A                     __end_of_Interrupt:
  8596                           	opt callstack 0
  8597                           
  8598 ;; *************** function i2_set_mS *****************
  8599 ;; Defined at:
  8600 ;;		line 15 in file "shared_logic.c"
  8601 ;; Parameters:    Size  Location     Type
  8602 ;;  amount          2    0[COMRAM] unsigned short 
  8603 ;; Auto vars:     Size  Location     Type
  8604 ;;		None
  8605 ;; Return value:  Size  Location     Type
  8606 ;;                  1    wreg      void 
  8607 ;; Registers used:
  8608 ;;		None
  8609 ;; Tracked objects:
  8610 ;;		On entry : 0/0
  8611 ;;		On exit  : 0/0
  8612 ;;		Unchanged: 0/0
  8613 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8614 ;;      Params:         2       0       0       0       0       0       0
  8615 ;;      Locals:         0       0       0       0       0       0       0
  8616 ;;      Temps:          0       0       0       0       0       0       0
  8617 ;;      Totals:         2       0       0       0       0       0       0
  8618 ;;Total ram usage:        2 bytes
  8619 ;; Hardware stack levels used:    1
  8620 ;; This function calls:
  8621 ;;		Nothing
  8622 ;; This function is called by:
  8623 ;;		_Interrupt
  8624 ;; This function uses a non-reentrant model
  8625 ;;
  8626                           
  8627                           	psect	text74
  8628  00244C                     __ptext74:
  8629                           	opt callstack 0
  8630  00244C                     i2_set_mS:
  8631                           	opt callstack 21
  8632                           
  8633                           ;shared_logic.c: 16:     mS = amount;
  8634                           
  8635                           ;incstack = 0
  8636  00244C  C001  F04C         	movff	i2set_mS@amount,_mS	;volatile
  8637  002450  C002  F04D         	movff	i2set_mS@amount+1,_mS+1	;volatile
  8638  002454  0012               	return		;funcret
  8639  002456                     __end_ofi2_set_mS:
  8640                           	opt callstack 0
  8641                           
  8642 ;; *************** function i2_get_mS *****************
  8643 ;; Defined at:
  8644 ;;		line 23 in file "shared_logic.c"
  8645 ;; Parameters:    Size  Location     Type
  8646 ;;		None
  8647 ;; Auto vars:     Size  Location     Type
  8648 ;;		None
  8649 ;; Return value:  Size  Location     Type
  8650 ;;                  2    0[COMRAM] unsigned short 
  8651 ;; Registers used:
  8652 ;;		None
  8653 ;; Tracked objects:
  8654 ;;		On entry : 0/0
  8655 ;;		On exit  : 0/0
  8656 ;;		Unchanged: 0/0
  8657 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8658 ;;      Params:         2       0       0       0       0       0       0
  8659 ;;      Locals:         0       0       0       0       0       0       0
  8660 ;;      Temps:          0       0       0       0       0       0       0
  8661 ;;      Totals:         2       0       0       0       0       0       0
  8662 ;;Total ram usage:        2 bytes
  8663 ;; Hardware stack levels used:    1
  8664 ;; This function calls:
  8665 ;;		Nothing
  8666 ;; This function is called by:
  8667 ;;		_Interrupt
  8668 ;; This function uses a non-reentrant model
  8669 ;;
  8670                           
  8671                           	psect	text75
  8672  002456                     __ptext75:
  8673                           	opt callstack 0
  8674  002456                     i2_get_mS:
  8675                           	opt callstack 21
  8676                           
  8677                           ;shared_logic.c: 24:     return mS;
  8678                           
  8679                           ;incstack = 0
  8680  002456  C04C  F001         	movff	_mS,?i2_get_mS	;volatile
  8681  00245A  C04D  F002         	movff	_mS+1,?i2_get_mS+1	;volatile
  8682  00245E  0012               	return		;funcret
  8683  002460                     __end_ofi2_get_mS:
  8684                           	opt callstack 0
  8685                           
  8686 ;; *************** function _tetris_timer *****************
  8687 ;; Defined at:
  8688 ;;		line 338 in file "tetris.c"
  8689 ;; Parameters:    Size  Location     Type
  8690 ;;		None
  8691 ;; Auto vars:     Size  Location     Type
  8692 ;;		None
  8693 ;; Return value:  Size  Location     Type
  8694 ;;                  1    wreg      _Bool 
  8695 ;; Registers used:
  8696 ;;		wreg, status,2
  8697 ;; Tracked objects:
  8698 ;;		On entry : 0/0
  8699 ;;		On exit  : 0/0
  8700 ;;		Unchanged: 0/0
  8701 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8702 ;;      Params:         0       0       0       0       0       0       0
  8703 ;;      Locals:         0       0       0       0       0       0       0
  8704 ;;      Temps:          0       0       0       0       0       0       0
  8705 ;;      Totals:         0       0       0       0       0       0       0
  8706 ;;Total ram usage:        0 bytes
  8707 ;; Hardware stack levels used:    1
  8708 ;; This function calls:
  8709 ;;		Nothing
  8710 ;; This function is called by:
  8711 ;;		_Interrupt
  8712 ;; This function uses a non-reentrant model
  8713 ;;
  8714                           
  8715                           	psect	text76
  8716  0023E0                     __ptext76:
  8717                           	opt callstack 0
  8718  0023E0                     _tetris_timer:
  8719                           	opt callstack 21
  8720                           
  8721                           ;tetris.c: 339:     if (game) {
  8722                           
  8723                           ;incstack = 0
  8724  0023E0  503B               	movf	_game,w,c	;volatile
  8725  0023E2  B4D8               	btfsc	status,2,c
  8726  0023E4  D002               	goto	i2l324
  8727                           
  8728                           ;tetris.c: 340:     DropObject = 1;
  8729  0023E6  0E01               	movlw	1
  8730  0023E8  6E3F               	movwf	_DropObject,c	;volatile
  8731  0023EA                     i2l324:
  8732                           
  8733                           ;tetris.c: 342:     return game;
  8734  0023EA  503B               	movf	_game,w,c	;volatile
  8735  0023EC  0012               	return		;funcret
  8736  0023EE                     __end_of_tetris_timer:
  8737                           	opt callstack 0
  8738                           
  8739 ;; *************** function _snake_timer *****************
  8740 ;; Defined at:
  8741 ;;		line 150 in file "snake.c"
  8742 ;; Parameters:    Size  Location     Type
  8743 ;;		None
  8744 ;; Auto vars:     Size  Location     Type
  8745 ;;		None
  8746 ;; Return value:  Size  Location     Type
  8747 ;;                  1    wreg      _Bool 
  8748 ;; Registers used:
  8749 ;;		wreg, status,2
  8750 ;; Tracked objects:
  8751 ;;		On entry : 0/0
  8752 ;;		On exit  : 0/0
  8753 ;;		Unchanged: 0/0
  8754 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8755 ;;      Params:         0       0       0       0       0       0       0
  8756 ;;      Locals:         0       0       0       0       0       0       0
  8757 ;;      Temps:          0       0       0       0       0       0       0
  8758 ;;      Totals:         0       0       0       0       0       0       0
  8759 ;;Total ram usage:        0 bytes
  8760 ;; Hardware stack levels used:    1
  8761 ;; This function calls:
  8762 ;;		Nothing
  8763 ;; This function is called by:
  8764 ;;		_Interrupt
  8765 ;; This function uses a non-reentrant model
  8766 ;;
  8767                           
  8768                           	psect	text77
  8769  0023EE                     __ptext77:
  8770                           	opt callstack 0
  8771  0023EE                     _snake_timer:
  8772                           	opt callstack 21
  8773                           
  8774                           ;snake.c: 151:     if (game){
  8775                           
  8776                           ;incstack = 0
  8777  0023EE  503B               	movf	_game,w,c	;volatile
  8778  0023F0  B4D8               	btfsc	status,2,c
  8779  0023F2  D002               	goto	i2l465
  8780                           
  8781                           ;snake.c: 152:     moveSnake = 1;
  8782  0023F4  0E01               	movlw	1
  8783  0023F6  6E39               	movwf	_moveSnake,c	;volatile
  8784  0023F8                     i2l465:
  8785                           
  8786                           ;snake.c: 154:     return game;
  8787  0023F8  503B               	movf	_game,w,c	;volatile
  8788  0023FA  0012               	return		;funcret
  8789  0023FC                     __end_of_snake_timer:
  8790                           	opt callstack 0
  8791                           
  8792 ;; *************** function _screen_update *****************
  8793 ;; Defined at:
  8794 ;;		line 98 in file "screen.c"
  8795 ;; Parameters:    Size  Location     Type
  8796 ;;		None
  8797 ;; Auto vars:     Size  Location     Type
  8798 ;;  ymask           2    2[COMRAM] unsigned short 
  8799 ;;  xmask           1    4[COMRAM] unsigned char 
  8800 ;; Return value:  Size  Location     Type
  8801 ;;                  1    wreg      void 
  8802 ;; Registers used:
  8803 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  8804 ;; Tracked objects:
  8805 ;;		On entry : 0/0
  8806 ;;		On exit  : 0/0
  8807 ;;		Unchanged: 0/0
  8808 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8809 ;;      Params:         0       0       0       0       0       0       0
  8810 ;;      Locals:         3       0       0       0       0       0       0
  8811 ;;      Temps:          2       0       0       0       0       0       0
  8812 ;;      Totals:         5       0       0       0       0       0       0
  8813 ;;Total ram usage:        5 bytes
  8814 ;; Hardware stack levels used:    1
  8815 ;; This function calls:
  8816 ;;		Nothing
  8817 ;; This function is called by:
  8818 ;;		_Interrupt
  8819 ;; This function uses a non-reentrant model
  8820 ;;
  8821                           
  8822                           	psect	text78
  8823  001DBC                     __ptext78:
  8824                           	opt callstack 0
  8825  001DBC                     _screen_update:
  8826                           	opt callstack 21
  8827                           
  8828                           ;screen.c: 100:     if (UpdateScreen)
  8829                           
  8830                           ;incstack = 0
  8831  001DBC  0100               	movlb	0	; () banked
  8832  001DBE  51EC               	movf	_UpdateScreen& (0+255),w,b	;volatile
  8833  001DC0  B4D8               	btfsc	status,2,c
  8834  001DC2  0012               	return	
  8835                           
  8836                           ; BSR set to: 0
  8837                           ;screen.c: 101:         {;screen.c: 102:             static uint8_t CurrentX = 0;;screen
      +                          .c: 104:             uint8_t xmask = 1 << CurrentX;
  8838  001DC4  C047  F001         	movff	screen_update@CurrentX,??_screen_update
  8839  001DC8  0E01               	movlw	1
  8840  001DCA  6E02               	movwf	(??_screen_update+1)& (0+255),c
  8841  001DCC  2A01               	incf	??_screen_update,f,c
  8842  001DCE  D002               	goto	i2u364_44
  8843  001DD0                     i2u364_45:
  8844  001DD0  90D8               	bcf	status,0,c
  8845  001DD2  3602               	rlcf	??_screen_update+1,f,c
  8846  001DD4                     i2u364_44:
  8847  001DD4  2E01               	decfsz	??_screen_update,f,c
  8848  001DD6  D7FC               	goto	i2u364_45
  8849  001DD8  5002               	movf	??_screen_update+1,w,c
  8850  001DDA  6E05               	movwf	screen_update@xmask,c
  8851                           
  8852                           ;screen.c: 105:             uint16_t ymask = ScreenData[CurrentX];
  8853  001DDC  5047               	movf	screen_update@CurrentX,w,c
  8854  001DDE  0D02               	mullw	2
  8855  001DE0  0E8C               	movlw	low _ScreenData
  8856  001DE2  24F3               	addwf	prodl,w,c
  8857  001DE4  6ED9               	movwf	fsr2l,c
  8858  001DE6  0E00               	movlw	high _ScreenData
  8859  001DE8  20F4               	addwfc	prodh,w,c
  8860  001DEA  6EDA               	movwf	fsr2h,c
  8861  001DEC  CFDE F003          	movff	postinc2,screen_update@ymask
  8862  001DF0  CFDD F004          	movff	postdec2,screen_update@ymask+1
  8863                           
  8864                           ;screen.c: 107:             port_display = 0;
  8865  001DF4  0E00               	movlw	0
  8866  001DF6  6E83               	movwf	3971,c	;volatile
  8867  001DF8  0E00               	movlw	0
  8868  001DFA  6E82               	movwf	3970,c	;volatile
  8869                           
  8870                           ;screen.c: 109:             PORTA = xmask;
  8871  001DFC  C005  FF80         	movff	screen_update@xmask,3968	;volatile
  8872                           
  8873                           ;screen.c: 111:             port_display = ~ymask;
  8874  001E00  1C03               	comf	screen_update@ymask,w,c
  8875  001E02  6E82               	movwf	3970,c	;volatile
  8876  001E04  1C04               	comf	screen_update@ymask+1,w,c
  8877  001E06  6E83               	movwf	3971,c	;volatile
  8878                           
  8879                           ;screen.c: 114:             CurrentX++;
  8880  001E08  2A47               	incf	screen_update@CurrentX,f,c
  8881                           
  8882                           ;screen.c: 115:             CurrentX &= 0x07;
  8883  001E0A  0E07               	movlw	7
  8884  001E0C  1647               	andwf	screen_update@CurrentX,f,c
  8885  001E0E  0012               	return		;funcret
  8886  001E10                     __end_of_screen_update:
  8887                           	opt callstack 0
  8888                           
  8889 ;; *************** function _checkButtons *****************
  8890 ;; Defined at:
  8891 ;;		line 108 in file "buttons.c"
  8892 ;; Parameters:    Size  Location     Type
  8893 ;;		None
  8894 ;; Auto vars:     Size  Location     Type
  8895 ;;		None
  8896 ;; Return value:  Size  Location     Type
  8897 ;;                  1    wreg      void 
  8898 ;; Registers used:
  8899 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  8900 ;; Tracked objects:
  8901 ;;		On entry : 0/0
  8902 ;;		On exit  : 0/0
  8903 ;;		Unchanged: 0/0
  8904 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8905 ;;      Params:         0       0       0       0       0       0       0
  8906 ;;      Locals:         0       0       0       0       0       0       0
  8907 ;;      Temps:          0       0       0       0       0       0       0
  8908 ;;      Totals:         0       0       0       0       0       0       0
  8909 ;;Total ram usage:        0 bytes
  8910 ;; Hardware stack levels used:    1
  8911 ;; Hardware stack levels required when called:    1
  8912 ;; This function calls:
  8913 ;;		_debounceButton
  8914 ;; This function is called by:
  8915 ;;		_Interrupt
  8916 ;; This function uses a non-reentrant model
  8917 ;;
  8918                           
  8919                           	psect	text79
  8920  00184A                     __ptext79:
  8921                           	opt callstack 0
  8922  00184A                     _checkButtons:
  8923                           	opt callstack 20
  8924                           
  8925                           ;buttons.c: 110:     if (mtxButtons)
  8926                           
  8927                           ;incstack = 0
  8928  00184A  0100               	movlb	0	; () banked
  8929  00184C  51ED               	movf	_mtxButtons& (0+255),w,b	;volatile
  8930  00184E  B4D8               	btfsc	status,2,c
  8931  001850  0012               	return	
  8932                           
  8933                           ; BSR set to: 0
  8934                           ;buttons.c: 111:     {;buttons.c: 112:         debounceButton(PORTBbits.RB0, &Left_Delay
      +                          , &Left_Debounced );
  8935  001852  0EF5               	movlw	low _Left_Delay
  8936  001854  6E01               	movwf	debounceButton@delay,c
  8937  001856  0E00               	movlw	high _Left_Delay
  8938  001858  6E02               	movwf	debounceButton@delay+1,c
  8939  00185A  0E4A               	movlw	low _Left_Debounced
  8940  00185C  6E03               	movwf	debounceButton@debounced,c
  8941  00185E  0E00               	movlw	high _Left_Debounced
  8942  001860  6E04               	movwf	debounceButton@debounced+1,c
  8943  001862  A081               	btfss	3969,0,c	;volatile
  8944  001864  D002               	goto	i2u359_40
  8945  001866  0E01               	movlw	1
  8946  001868  D001               	goto	i2u359_46
  8947  00186A                     i2u359_40:
  8948  00186A  0E00               	movlw	0
  8949  00186C                     i2u359_46:
  8950  00186C  EC54  F00D         	call	_debounceButton
  8951                           
  8952                           ;buttons.c: 113:         debounceButton(PORTBbits.RB1, &Right_Delay, &Right_Debounced );
  8953  001870  0EF3               	movlw	low _Right_Delay
  8954  001872  6E01               	movwf	debounceButton@delay,c
  8955  001874  0E00               	movlw	high _Right_Delay
  8956  001876  6E02               	movwf	debounceButton@delay+1,c
  8957  001878  0E49               	movlw	low _Right_Debounced
  8958  00187A  6E03               	movwf	debounceButton@debounced,c
  8959  00187C  0E00               	movlw	high _Right_Debounced
  8960  00187E  6E04               	movwf	debounceButton@debounced+1,c
  8961  001880  A281               	btfss	3969,1,c	;volatile
  8962  001882  D002               	goto	i2u360_40
  8963  001884  0E01               	movlw	1
  8964  001886  D001               	goto	i2u360_46
  8965  001888                     i2u360_40:
  8966  001888  0E00               	movlw	0
  8967  00188A                     i2u360_46:
  8968  00188A  EC54  F00D         	call	_debounceButton
  8969                           
  8970                           ;buttons.c: 114:         debounceButton(PORTBbits.RB2, &Rotate_Delay, &Rotate_Debounced)
      +                          ;
  8971  00188E  0EF1               	movlw	low _Rotate_Delay
  8972  001890  6E01               	movwf	debounceButton@delay,c
  8973  001892  0E00               	movlw	high _Rotate_Delay
  8974  001894  6E02               	movwf	debounceButton@delay+1,c
  8975  001896  0E4B               	movlw	low _Rotate_Debounced
  8976  001898  6E03               	movwf	debounceButton@debounced,c
  8977  00189A  0E00               	movlw	high _Rotate_Debounced
  8978  00189C  6E04               	movwf	debounceButton@debounced+1,c
  8979  00189E  A481               	btfss	3969,2,c	;volatile
  8980  0018A0  D002               	goto	i2u361_40
  8981  0018A2  0E01               	movlw	1
  8982  0018A4  D001               	goto	i2u361_46
  8983  0018A6                     i2u361_40:
  8984  0018A6  0E00               	movlw	0
  8985  0018A8                     i2u361_46:
  8986  0018A8  EC54  F00D         	call	_debounceButton
  8987                           
  8988                           ;buttons.c: 115:         debounceButton(PORTBbits.RB3, &Down_Delay, &Down_Debounced );
  8989  0018AC  0EEF               	movlw	low _Down_Delay
  8990  0018AE  6E01               	movwf	debounceButton@delay,c
  8991  0018B0  0E00               	movlw	high _Down_Delay
  8992  0018B2  6E02               	movwf	debounceButton@delay+1,c
  8993  0018B4  0E48               	movlw	low _Down_Debounced
  8994  0018B6  6E03               	movwf	debounceButton@debounced,c
  8995  0018B8  0E00               	movlw	high _Down_Debounced
  8996  0018BA  6E04               	movwf	debounceButton@debounced+1,c
  8997  0018BC  A681               	btfss	3969,3,c	;volatile
  8998  0018BE  D002               	goto	i2u362_40
  8999  0018C0  0E01               	movlw	1
  9000  0018C2  D001               	goto	i2u362_46
  9001  0018C4                     i2u362_40:
  9002  0018C4  0E00               	movlw	0
  9003  0018C6                     i2u362_46:
  9004  0018C6  EC54  F00D         	call	_debounceButton
  9005  0018CA  0012               	return		;funcret
  9006  0018CC                     __end_of_checkButtons:
  9007                           	opt callstack 0
  9008                           
  9009 ;; *************** function _debounceButton *****************
  9010 ;; Defined at:
  9011 ;;		line 91 in file "buttons.c"
  9012 ;; Parameters:    Size  Location     Type
  9013 ;;  button          1    wreg     volatile _Bool 
  9014 ;;  delay           2    0[COMRAM] PTR volatile short 
  9015 ;;		 -> Down_Delay(2), Rotate_Delay(2), Right_Delay(2), Left_Delay(2), 
  9016 ;;  debounced       2    2[COMRAM] PTR volatile _Bool 
  9017 ;;		 -> Down_Debounced(1), Rotate_Debounced(1), Right_Debounced(1), Left_Debounced(1), 
  9018 ;; Auto vars:     Size  Location     Type
  9019 ;;  button          1    6[COMRAM] volatile _Bool 
  9020 ;; Return value:  Size  Location     Type
  9021 ;;                  1    wreg      void 
  9022 ;; Registers used:
  9023 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  9024 ;; Tracked objects:
  9025 ;;		On entry : 0/0
  9026 ;;		On exit  : 0/0
  9027 ;;		Unchanged: 0/0
  9028 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9029 ;;      Params:         4       0       0       0       0       0       0
  9030 ;;      Locals:         1       0       0       0       0       0       0
  9031 ;;      Temps:          2       0       0       0       0       0       0
  9032 ;;      Totals:         7       0       0       0       0       0       0
  9033 ;;Total ram usage:        7 bytes
  9034 ;; Hardware stack levels used:    1
  9035 ;; This function calls:
  9036 ;;		Nothing
  9037 ;; This function is called by:
  9038 ;;		_checkButtons
  9039 ;; This function uses a non-reentrant model
  9040 ;;
  9041                           
  9042                           	psect	text80
  9043  001AA8                     __ptext80:
  9044                           	opt callstack 0
  9045  001AA8                     _debounceButton:
  9046                           	opt callstack 20
  9047                           
  9048                           ;incstack = 0
  9049                           ;debounceButton@button stored from wreg
  9050  001AA8  6E07               	movwf	debounceButton@button,c	;volatile
  9051                           
  9052                           ;buttons.c: 91: void debounceButton(volatile _Bool button, volatile int16_t *delay, vola
      +                          tile _Bool *debounced);buttons.c: 92: {;buttons.c: 93:     if (button == 0)
  9053  001AAA  5007               	movf	debounceButton@button,w,c	;volatile
  9054  001AAC  A4D8               	btfss	status,2,c
  9055  001AAE  D023               	goto	i2l4036
  9056                           
  9057                           ;buttons.c: 94:     {;buttons.c: 95:         if (*delay < 0)
  9058  001AB0  C001  FFD9         	movff	debounceButton@delay,fsr2l
  9059  001AB4  C002  FFDA         	movff	debounceButton@delay+1,fsr2h
  9060  001AB8  0E01               	movlw	1
  9061  001ABA  AEDB               	btfss	plusw2,7,c
  9062  001ABC  D009               	goto	i2l4032
  9063                           
  9064                           ;buttons.c: 96:             *delay = 50;
  9065  001ABE  C001  FFD9         	movff	debounceButton@delay,fsr2l
  9066  001AC2  C002  FFDA         	movff	debounceButton@delay+1,fsr2h
  9067  001AC6  0E32               	movlw	50
  9068  001AC8  6EDE               	movwf	postinc2,c
  9069  001ACA  0E00               	movlw	0
  9070  001ACC  6EDD               	movwf	postdec2,c
  9071  001ACE  0012               	return	
  9072  001AD0                     i2l4032:
  9073  001AD0  C001  FFD9         	movff	debounceButton@delay,fsr2l
  9074  001AD4  C002  FFDA         	movff	debounceButton@delay+1,fsr2h
  9075  001AD8  06DE               	decf	postinc2,f,c
  9076  001ADA  0E00               	movlw	0
  9077  001ADC  5ADD               	subwfb	postdec2,f,c
  9078  001ADE  28DE               	incf	postinc2,w,c
  9079  001AE0  E118               	bnz	i2l687
  9080  001AE2  28DE               	incf	postinc2,w,c
  9081  001AE4  A4D8               	btfss	status,2,c
  9082  001AE6  0012               	return	
  9083                           
  9084                           ;buttons.c: 98:             *debounced = 1;
  9085  001AE8  C003  FFD9         	movff	debounceButton@debounced,fsr2l
  9086  001AEC  C004  FFDA         	movff	debounceButton@debounced+1,fsr2h
  9087  001AF0  0E01               	movlw	1
  9088  001AF2  6EDF               	movwf	indf2,c
  9089  001AF4  0012               	return	
  9090  001AF6                     i2l4036:
  9091                           
  9092                           ;buttons.c: 101:     {;buttons.c: 102:         *delay = -1;
  9093  001AF6  C001  FFD9         	movff	debounceButton@delay,fsr2l
  9094  001AFA  C002  FFDA         	movff	debounceButton@delay+1,fsr2h
  9095  001AFE  0EFF               	movlw	255
  9096  001B00  6EDE               	movwf	postinc2,c
  9097  001B02  0EFF               	movlw	255
  9098  001B04  6EDD               	movwf	postdec2,c
  9099                           
  9100                           ;buttons.c: 103:         *debounced = 0;
  9101  001B06  C003  FFD9         	movff	debounceButton@debounced,fsr2l
  9102  001B0A  C004  FFDA         	movff	debounceButton@debounced+1,fsr2h
  9103  001B0E  0E00               	movlw	0
  9104  001B10  6EDF               	movwf	indf2,c
  9105  001B12                     i2l687:
  9106  001B12  0012               	return		;funcret
  9107  001B14                     __end_of_debounceButton:
  9108                           	opt callstack 0
  9109                           
  9110 ;; *************** function _add_mS *****************
  9111 ;; Defined at:
  9112 ;;		line 19 in file "shared_logic.c"
  9113 ;; Parameters:    Size  Location     Type
  9114 ;;  amount          2    0[COMRAM] unsigned short 
  9115 ;; Auto vars:     Size  Location     Type
  9116 ;;		None
  9117 ;; Return value:  Size  Location     Type
  9118 ;;                  1    wreg      void 
  9119 ;; Registers used:
  9120 ;;		wreg, status,2, status,0
  9121 ;; Tracked objects:
  9122 ;;		On entry : 0/0
  9123 ;;		On exit  : 0/0
  9124 ;;		Unchanged: 0/0
  9125 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9126 ;;      Params:         2       0       0       0       0       0       0
  9127 ;;      Locals:         0       0       0       0       0       0       0
  9128 ;;      Temps:          0       0       0       0       0       0       0
  9129 ;;      Totals:         2       0       0       0       0       0       0
  9130 ;;Total ram usage:        2 bytes
  9131 ;; Hardware stack levels used:    1
  9132 ;; This function calls:
  9133 ;;		Nothing
  9134 ;; This function is called by:
  9135 ;;		_Interrupt
  9136 ;; This function uses a non-reentrant model
  9137 ;;
  9138                           
  9139                           	psect	text81
  9140  0023FC                     __ptext81:
  9141                           	opt callstack 0
  9142  0023FC                     _add_mS:
  9143                           	opt callstack 21
  9144                           
  9145                           ;shared_logic.c: 20:     mS = mS + amount;
  9146                           
  9147                           ;incstack = 0
  9148  0023FC  5001               	movf	add_mS@amount,w,c
  9149  0023FE  244C               	addwf	_mS,w,c	;volatile
  9150  002400  6E4C               	movwf	_mS,c	;volatile
  9151  002402  5002               	movf	add_mS@amount+1,w,c
  9152  002404  204D               	addwfc	_mS+1,w,c	;volatile
  9153  002406  6E4D               	movwf	_mS+1,c	;volatile
  9154  002408  0012               	return		;funcret
  9155  00240A                     __end_of_add_mS:
  9156                           	opt callstack 0
  9157                           
  9158 ;; *************** function ___lwmod *****************
  9159 ;; Defined at:
  9160 ;;		line 7 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\lwmod.c"
  9161 ;; Parameters:    Size  Location     Type
  9162 ;;  dividend        2    2[COMRAM] unsigned int 
  9163 ;;  divisor         2    4[COMRAM] unsigned int 
  9164 ;; Auto vars:     Size  Location     Type
  9165 ;;  counter         1    6[COMRAM] unsigned char 
  9166 ;; Return value:  Size  Location     Type
  9167 ;;                  2    2[COMRAM] unsigned int 
  9168 ;; Registers used:
  9169 ;;		wreg, status,2, status,0
  9170 ;; Tracked objects:
  9171 ;;		On entry : 0/0
  9172 ;;		On exit  : 0/0
  9173 ;;		Unchanged: 0/0
  9174 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9175 ;;      Params:         4       0       0       0       0       0       0
  9176 ;;      Locals:         1       0       0       0       0       0       0
  9177 ;;      Temps:          0       0       0       0       0       0       0
  9178 ;;      Totals:         5       0       0       0       0       0       0
  9179 ;;Total ram usage:        5 bytes
  9180 ;; Hardware stack levels used:    1
  9181 ;; This function calls:
  9182 ;;		Nothing
  9183 ;; This function is called by:
  9184 ;;		_Interrupt
  9185 ;; This function uses a non-reentrant model
  9186 ;;
  9187                           
  9188                           	psect	text82
  9189  001EEC                     __ptext82:
  9190                           	opt callstack 0
  9191  001EEC                     ___lwmod:
  9192                           	opt callstack 21
  9193                           
  9194                           ;incstack = 0
  9195  001EEC  5005               	movf	___lwmod@divisor,w,c
  9196  001EEE  1006               	iorwf	___lwmod@divisor+1,w,c
  9197  001EF0  B4D8               	btfsc	status,2,c
  9198  001EF2  D018               	goto	i2l1298
  9199  001EF4  0E01               	movlw	1
  9200  001EF6  6E07               	movwf	___lwmod@counter,c
  9201  001EF8  D004               	goto	i2l4170
  9202  001EFA                     i2l4168:
  9203  001EFA  90D8               	bcf	status,0,c
  9204  001EFC  3605               	rlcf	___lwmod@divisor,f,c
  9205  001EFE  3606               	rlcf	___lwmod@divisor+1,f,c
  9206  001F00  2A07               	incf	___lwmod@counter,f,c
  9207  001F02                     i2l4170:
  9208  001F02  AE06               	btfss	___lwmod@divisor+1,7,c
  9209  001F04  D7FA               	goto	i2l4168
  9210  001F06                     i2u366_40:
  9211  001F06  5005               	movf	___lwmod@divisor,w,c
  9212  001F08  5C03               	subwf	___lwmod@dividend,w,c
  9213  001F0A  5006               	movf	___lwmod@divisor+1,w,c
  9214  001F0C  5804               	subwfb	___lwmod@dividend+1,w,c
  9215  001F0E  A0D8               	btfss	status,0,c
  9216  001F10  D004               	goto	i2l4176
  9217  001F12  5005               	movf	___lwmod@divisor,w,c
  9218  001F14  5E03               	subwf	___lwmod@dividend,f,c
  9219  001F16  5006               	movf	___lwmod@divisor+1,w,c
  9220  001F18  5A04               	subwfb	___lwmod@dividend+1,f,c
  9221  001F1A                     i2l4176:
  9222  001F1A  90D8               	bcf	status,0,c
  9223  001F1C  3206               	rrcf	___lwmod@divisor+1,f,c
  9224  001F1E  3205               	rrcf	___lwmod@divisor,f,c
  9225  001F20  2E07               	decfsz	___lwmod@counter,f,c
  9226  001F22  D7F1               	goto	i2u366_40
  9227  001F24                     i2l1298:
  9228  001F24  C003  F003         	movff	___lwmod@dividend,?___lwmod
  9229  001F28  C004  F004         	movff	___lwmod@dividend+1,?___lwmod+1
  9230  001F2C  0012               	return		;funcret
  9231  001F2E                     __end_of___lwmod:
  9232                           	opt callstack 0
  9233                           
  9234                           	psect	rparam
  9235  0000                     
  9236                           	psect	temp
  9237  000050                     btemp:
  9238                           	opt callstack 0
  9239  000050                     	ds	1
  9240  0000                     int$flags	set	btemp
  9241  0000                     wtemp8	set	btemp+1
  9242  0000                     ttemp5	set	btemp+1
  9243  0000                     ttemp6	set	btemp+4
  9244  0000                     ttemp7	set	btemp+8
  9245                           tosu	equ	0xFFF
  9246                           tosh	equ	0xFFE
  9247                           tosl	equ	0xFFD
  9248                           stkptr	equ	0xFFC
  9249                           pclatu	equ	0xFFB
  9250                           pclath	equ	0xFFA
  9251                           pcl	equ	0xFF9
  9252                           tblptru	equ	0xFF8
  9253                           tblptrh	equ	0xFF7
  9254                           tblptrl	equ	0xFF6
  9255                           tablat	equ	0xFF5
  9256                           prodh	equ	0xFF4
  9257                           prodl	equ	0xFF3
  9258                           indf0	equ	0xFEF
  9259                           postinc0	equ	0xFEE
  9260                           postdec0	equ	0xFED
  9261                           preinc0	equ	0xFEC
  9262                           plusw0	equ	0xFEB
  9263                           fsr0h	equ	0xFEA
  9264                           fsr0l	equ	0xFE9
  9265                           wreg	equ	0xFE8
  9266                           indf1	equ	0xFE7
  9267                           postinc1	equ	0xFE6
  9268                           postdec1	equ	0xFE5
  9269                           preinc1	equ	0xFE4
  9270                           plusw1	equ	0xFE3
  9271                           fsr1h	equ	0xFE2
  9272                           fsr1l	equ	0xFE1
  9273                           bsr	equ	0xFE0
  9274                           indf2	equ	0xFDF
  9275                           postinc2	equ	0xFDE
  9276                           postdec2	equ	0xFDD
  9277                           preinc2	equ	0xFDC
  9278                           plusw2	equ	0xFDB
  9279                           fsr2h	equ	0xFDA
  9280                           fsr2l	equ	0xFD9
  9281                           status	equ	0xFD8


Data Sizes:
    Strings     0
    Constant    240
    Data        149
    BSS         372
    Persistent  15
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          126     51      79
    BANK0           128      0     119
    BANK1           256      0     256
    BANK2           256     55     188
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0

Pointer List with Targets:

    set_splashscreen@newData	PTR const unsigned short  size(2) Largest target is 16
		 -> choose_screen(CODE[16]), SNAKE(CODE[16]), TETRIS(CODE[16]), 

    set_screen@newData	PTR volatile unsigned short  size(2) Largest target is 16
		 -> show_score@Numberscreen(BANK2[16]), Screen_Data(BANK0[16]), ObjectData(BANK0[16]), 

    debounceButton@debounced	PTR volatile _Bool  size(2) Largest target is 1
		 -> Down_Debounced(COMRAM[1]), Rotate_Debounced(COMRAM[1]), Right_Debounced(COMRAM[1]), Left_Debounced(COMRAM[1]), 

    debounceButton@delay	PTR volatile short  size(2) Largest target is 2
		 -> Down_Delay(BANK0[2]), Rotate_Delay(BANK0[2]), Right_Delay(BANK0[2]), Left_Delay(BANK0[2]), 

    getNumber@pTarget	PTR unsigned short  size(2) Largest target is 16
		 -> show_score@tmpObjectData(BANK2[16]), 

    removeLine@pObject	PTR volatile unsigned short  size(2) Largest target is 16
		 -> BackgroundData(BANK0[16]), 

    pixelCount@pSource	PTR volatile unsigned short  size(2) Largest target is 16
		 -> tmpObjectData(BANK0[16]), ObjectData(BANK0[16]), 

    collisionDetect@pTarget	PTR volatile unsigned short  size(2) Largest target is 16
		 -> BackgroundData(BANK0[16]), 

    collisionDetect@pSource	PTR volatile unsigned short  size(2) Largest target is 16
		 -> tmpObjectData(BANK0[16]), ObjectData(BANK0[16]), 

    checkForRightWall@pObject	PTR volatile unsigned short  size(2) Largest target is 16
		 -> ObjectData(BANK0[16]), 

    checkForLeftWall@pObject	PTR volatile unsigned short  size(2) Largest target is 16
		 -> ObjectData(BANK0[16]), 

    mergeObjects@pSource	PTR volatile unsigned short  size(2) Largest target is 16
		 -> choosescreen@mask(COMRAM[16]), show_score@mask(BANK2[16]), show_score@tmpObjectData(BANK2[16]), tmpObjectData(BANK0[16]), 
		 -> ObjectData(BANK0[16]), BackgroundData(BANK0[16]), 

    mergeObjects@pTarget	PTR volatile unsigned short  size(2) Largest target is 16
		 -> ScreenData(BANK0[16]), show_score@Numberscreen(BANK2[16]), Screen_Data(BANK0[16]), tmpObjectData(BANK0[16]), 
		 -> ObjectData(BANK0[16]), BackgroundData(BANK0[16]), 

    clearArray@pArray	PTR volatile unsigned short  size(2) Largest target is 16
		 -> ScreenData(BANK0[16]), show_score@Numberscreen(BANK2[16]), show_score@tmpObjectData(BANK2[16]), Screen_Data(BANK0[16]), 
		 -> tmpObjectData(BANK0[16]), ObjectData(BANK0[16]), BackgroundData(BANK0[16]), 

    sp__itoa	PTR unsigned char  size(2) Largest target is 4
		 -> show_score@number(BANK2[4]), 

    itoa@str	PTR unsigned char  size(2) Largest target is 4
		 -> show_score@number(BANK2[4]), 

    reverse@str	PTR unsigned char  size(2) Largest target is 4
		 -> show_score@number(BANK2[4]), 

    swap@b	PTR unsigned char  size(2) Largest target is 4
		 -> show_score@number(BANK2[4]), 

    swap@a	PTR unsigned char  size(2) Largest target is 4
		 -> show_score@number(BANK2[4]), 

    memcpyvol@src	PTR  void  size(2) Largest target is 133
		 -> ObjectData(BANK0[16]), shapes.graphic(BANK2[16]), shapes(BANK2[133]), 

    memcpyvol@s	PTR unsigned char  size(2) Largest target is 133
		 -> ObjectData(BANK0[16]), shapes.graphic(BANK2[16]), shapes(BANK2[133]), 

    memcpyvol@dest	PTR volatile void  size(2) Largest target is 16
		 -> tmpObjectData(BANK0[16]), ObjectData(BANK0[16]), 

    memcpyvol@d	PTR unsigned char  size(2) Largest target is 16
		 -> tmpObjectData(BANK0[16]), ObjectData(BANK0[16]), 

    sp__memcpy	PTR void  size(2) Largest target is 16
		 -> show_score@tmpObjectData(BANK2[16]), 

    memcpy@src	PTR const void  size(2) Largest target is 160
		 -> Number(CODE[160]), 

    memcpy@s	PTR unsigned char  size(2) Largest target is 160
		 -> Number(CODE[160]), 

    memcpy@dest	PTR void  size(2) Largest target is 16
		 -> show_score@tmpObjectData(BANK2[16]), 

    memcpy@d	PTR unsigned char  size(2) Largest target is 16
		 -> show_score@tmpObjectData(BANK2[16]), 

    checkForLines@pObject	PTR volatile unsigned short  size(2) Largest target is 16
		 -> BackgroundData(BANK0[16]), 

    checkForBottom@pObject	PTR volatile unsigned short  size(2) Largest target is 16
		 -> ObjectData(BANK0[16]), 

    selectNextObject@pTarget	PTR volatile unsigned short  size(2) Largest target is 16
		 -> ObjectData(BANK0[16]), 

    selectNextObject@s	PTR struct shape size(2) Largest target is 133
		 -> shapes(BANK2[133]), 

    sp__memcpyvol	PTR volatile void  size(2) Largest target is 16
		 -> tmpObjectData(BANK0[16]), ObjectData(BANK0[16]), 

    newRotation@pSource	PTR volatile unsigned short  size(2) Largest target is 16
		 -> ObjectData(BANK0[16]), 

    newRotation@pTarget	PTR unsigned short  size(2) Largest target is 16
		 -> tmpObjectData(BANK0[16]), 

    moveObject@pObject	PTR volatile unsigned short  size(2) Largest target is 16
		 -> show_score@tmpObjectData(BANK2[16]), tmpObjectData(BANK0[16]), ObjectData(BANK0[16]), 

    moveObjectDown@pObject	PTR volatile unsigned short  size(2) Largest target is 16
		 -> ObjectData(BANK0[16]), 


Critical Paths under _main in COMRAM

    _mainGameLoop->_tetris_main
    _tetris_main->_checkForLines
    _tetris_screen->_set_splashscreen
    _tetris_button_up->_newRotation
    _newRotation->_memcpyvol
    _tetris_button_right->_collisionDetect
    _tetris_button_left->_collisionDetect
    _tetris_button_down->_moveObjectDown
    _moveObjectDown->_selectNextObject
    _selectNextObject->_memcpyvol
    _initialise_tetris->_clearArray
    _checkForLines->_removeLine
    _writeHighScore->_WriteEEByte
    _snake_screen->_set_splashscreen
    _snake_buttons->_checkDown
    _snake_buttons->_checkLeft
    _snake_buttons->_checkRight
    _snake_buttons->_checkUp
    _show_score->_itoa
    _itoa->_reverse
    _reverse->_swap
    _getNumber->_memcpy
    _readHighScore->_WriteEEByte
    _inistialize_snake->_CreateBerry
    _MoveSnakes->_SnakeGraph
    _SnakeGraph->_set_screen
    _set_screen->_clearArray
    _CreateBerry->_genBerry
    _genBerry->_rnd_get_num
    _initialise_globals->_set_mS
    _choosescreen->_set_splashscreen
    _set_splashscreen->_clearArray

Critical Paths under _isr in COMRAM

    _Interrupt->___lwmod
    _checkButtons->_debounceButton
    ___lwmod->i2_get_mS

Critical Paths under _main in BANK0

    None.

Critical Paths under _isr in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _isr in BANK1

    None.

Critical Paths under _main in BANK2

    _tetris_main->_show_score
    _snake_main->_show_score

Critical Paths under _isr in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _isr in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _isr in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _isr in BANK5

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0  107255
                       _choosescreen
                             _get_mS
                 _initialise_globals
                _initialise_hardware
                  _initialise_screen
                       _mainGameLoop
                     _rnd_initialize
                       _start_button
 ---------------------------------------------------------------------------------
 (1) _start_button                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _rnd_initialize                                       1     1      0      22
                                             11 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _mainGameLoop                                         0     0      0  100773
                 _initialise_globals
                  _pauseMultiplexing
                 _resumeMultiplexing
                         _snake_main
                        _tetris_main
 ---------------------------------------------------------------------------------
 (2) _tetris_main                                          5     5      0   76111
                                             46 COMRAM     5     5      0
                      _checkForLines
                  _initialise_tetris
                       _mergeObjects
                     _moveObjectDown
                      _readHighScore
                   _selectNextObject
                         _set_screen
                         _show_score
                     _tetris_buttons
                      _tetris_screen
                     _writeHighScore
 ---------------------------------------------------------------------------------
 (3) _tetris_screen                                        0     0      0    2355
                   _set_splashscreen
                             _waitms
 ---------------------------------------------------------------------------------
 (3) _tetris_buttons                                       1     1      0   34909
                                             39 COMRAM     1     1      0
                          _checkDown
                          _checkLeft
                         _checkRight
                            _checkUp
                 _tetris_button_down
                 _tetris_button_left
                _tetris_button_right
                   _tetris_button_up
 ---------------------------------------------------------------------------------
 (4) _tetris_button_up                                     1     1      0    8649
                                             37 COMRAM     1     1      0
                    _collisionDetect
                       _mergeObjects
                        _newRotation
                  _pauseMultiplexing
                         _pixelCount
                 _resumeMultiplexing
 ---------------------------------------------------------------------------------
 (5) _pixelCount                                          12    10      2     334
                                             11 COMRAM    12    10      2
 ---------------------------------------------------------------------------------
 (5) _newRotation                                         16    11      5    3844
                                             21 COMRAM    16    11      5
                             ___wmul
                         _clearArray
                          _memcpyvol
 ---------------------------------------------------------------------------------
 (6) ___wmul                                               6     2      4     311
                                             11 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (4) _tetris_button_right                                  0     0      0    7198
                  _checkForRightWall
                    _collisionDetect
                       _mergeObjects
                         _moveObject
                  _pauseMultiplexing
                 _resumeMultiplexing
 ---------------------------------------------------------------------------------
 (5) _checkForRightWall                                    4     2      2      98
                                             11 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (4) _tetris_button_left                                   0     0      0    8002
                   _checkForLeftWall
                    _collisionDetect
                          _memcpyvol
                       _mergeObjects
                         _moveObject
                  _pauseMultiplexing
                 _resumeMultiplexing
 ---------------------------------------------------------------------------------
 (5) _checkForLeftWall                                     4     2      2      98
                                             11 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (4) _tetris_button_down                                   0     0      0   10917
                     _moveObjectDown
 ---------------------------------------------------------------------------------
 (5) _moveObjectDown                                       3     1      2   10917
                                             36 COMRAM     3     1      2
                     _checkForBottom
                    _collisionDetect
                       _mergeObjects
                         _moveObject
                   _selectNextObject
                             _set_mS
 ---------------------------------------------------------------------------------
 (6) _selectNextObject                                    16    14      2    2852
                                             21 COMRAM    15    13      2
                            ___awmod
                          _memcpyvol
                        _rnd_get_num
                             _set_mS
 ---------------------------------------------------------------------------------
 (6) _memcpyvol                                           10     4      6     804
                                             11 COMRAM    10     4      6
 ---------------------------------------------------------------------------------
 (5) _collisionDetect                                     13     9      4     894
                                             11 COMRAM    13     9      4
 ---------------------------------------------------------------------------------
 (6) _checkForBottom                                       7     5      2     166
                                             11 COMRAM     7     5      2
 ---------------------------------------------------------------------------------
 (3) _initialise_tetris                                    0     0      0    1750
                         _clearArray
 ---------------------------------------------------------------------------------
 (3) _checkForLines                                       12    10      2     879
                                             34 COMRAM    12    10      2
                         _removeLine
 ---------------------------------------------------------------------------------
 (4) _removeLine                                          23    20      3     577
                                             11 COMRAM    23    20      3
 ---------------------------------------------------------------------------------
 (2) _snake_main                                           1     1      0   24362
                                             38 COMRAM     1     1      0
                         _MoveSnakes
                  _inistialize_snake
                      _readHighScore
                         _show_score
                      _snake_buttons
                       _snake_screen
                     _writeHighScore
 ---------------------------------------------------------------------------------
 (3) _writeHighScore                                       3     1      2     726
                                             13 COMRAM     3     1      2
                        _WriteEEByte
 ---------------------------------------------------------------------------------
 (3) _snake_screen                                         0     0      0    2355
                   _set_splashscreen
                             _waitms
 ---------------------------------------------------------------------------------
 (4) _waitms                                               2     0      2     174
                                             11 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (3) _snake_buttons                                        0     0      0      97
                          _checkDown
                          _checkLeft
                         _checkRight
                            _checkUp
                  _snake_button_down
                  _snake_button_left
                 _snake_button_right
                    _snake_button_up
 ---------------------------------------------------------------------------------
 (4) _snake_button_up                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (4) _snake_button_right                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (4) _snake_button_left                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (4) _snake_button_down                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (4) _checkRight                                           1     1      0      22
                                             11 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (4) _checkLeft                                            1     1      0      22
                                             11 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (3) _show_score                                          55    55      0   15048
                                              0 BANK2     55    55      0
                          _checkDown
                         _clearArray
                          _getNumber
                               _itoa
                       _mergeObjects
                         _moveObject
                       _pauseButtons
                  _pauseMultiplexing
                      _resumeButtons
                 _resumeMultiplexing
                         _set_screen
 ---------------------------------------------------------------------------------
 (4) _resumeButtons                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (4) _pauseButtons                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (5) _moveObject                                          12     8      4    2629
                                             11 COMRAM    12     8      4
 ---------------------------------------------------------------------------------
 (4) _itoa                                                13     7      6    3288
                                             25 COMRAM    13     7      6
                            ___awdiv
                            ___awmod
                            _reverse
 ---------------------------------------------------------------------------------
 (5) _reverse                                              9     5      4     747
                                             16 COMRAM     9     5      4
                               _swap
 ---------------------------------------------------------------------------------
 (6) _swap                                                 5     1      4     338
                                             11 COMRAM     5     1      4
 ---------------------------------------------------------------------------------
 (7) ___awmod                                              6     2      4     793
                                             11 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (5) ___awdiv                                              8     4      4     625
                                             11 COMRAM     8     4      4
 ---------------------------------------------------------------------------------
 (4) _getNumber                                            3     1      2     596
                                             21 COMRAM     3     1      2
                             _memcpy
 ---------------------------------------------------------------------------------
 (5) _memcpy                                              10     4      6     444
                                             11 COMRAM    10     4      6
 ---------------------------------------------------------------------------------
 (3) _readHighScore                                        2     2      0     425
                                             13 COMRAM     2     2      0
                         _ReadEEByte
                        _WriteEEByte
 ---------------------------------------------------------------------------------
 (4) _WriteEEByte                                          2     1      1     242
                                             11 COMRAM     2     1      1
                   _waitForInterrupt
 ---------------------------------------------------------------------------------
 (4) _ReadEEByte                                           1     1      0      22
                                             11 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (3) _inistialize_snake                                    1     1      0     531
                                             22 COMRAM     1     1      0
                        _CreateBerry
 ---------------------------------------------------------------------------------
 (3) _MoveSnakes                                           5     5      0    5115
                                             29 COMRAM     5     5      0
                        _CreateBerry
                         _SnakeGraph
 ---------------------------------------------------------------------------------
 (4) _SnakeGraph                                           7     7      0    4436
                                             22 COMRAM     7     7      0
                         _clearArray
                         _set_screen
 ---------------------------------------------------------------------------------
 (4) _set_screen                                           4     2      2    2361
                                             18 COMRAM     4     2      2
                         _clearArray
                  _pauseMultiplexing
                 _resumeMultiplexing
 ---------------------------------------------------------------------------------
 (4) _CreateBerry                                          3     3      0     419
                                             19 COMRAM     3     3      0
                           _genBerry
 ---------------------------------------------------------------------------------
 (5) _genBerry                                             2     2      0     326
                                             17 COMRAM     2     2      0
                            ___lbmod
                        _rnd_get_num
 ---------------------------------------------------------------------------------
 (7) _rnd_get_num                                          6     6      0      23
                                             11 COMRAM     6     6      0
 ---------------------------------------------------------------------------------
 (6) ___lbmod                                              4     3      1     235
                                             11 COMRAM     4     3      1
 ---------------------------------------------------------------------------------
 (2) _initialise_globals                                   0     0      0     300
                             _set_mS
 ---------------------------------------------------------------------------------
 (6) _set_mS                                               2     0      2     300
                                             11 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (1) _initialise_screen                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _initialise_hardware                                  0     0      0       0
                    _initialise_TMR0
 ---------------------------------------------------------------------------------
 (2) _initialise_TMR0                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _get_mS                                               2     0      2       0
                                             11 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (1) _choosescreen                                        19    19      0    6160
                                             26 COMRAM    19    19      0
                          _checkDown
                            _checkUp
                       _mergeObjects
                  _pauseMultiplexing
                 _resumeMultiplexing
                   _set_splashscreen
 ---------------------------------------------------------------------------------
 (4) _set_splashscreen                                     8     6      2    2181
                                             18 COMRAM     8     6      2
                         _clearArray
                  _pauseMultiplexing
                 _resumeMultiplexing
 ---------------------------------------------------------------------------------
 (5) _resumeMultiplexing                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (5) _pauseMultiplexing                                    0     0      0       0
                   _waitForInterrupt
 ---------------------------------------------------------------------------------
 (5) _waitForInterrupt                                     0     0      0       0
 ---------------------------------------------------------------------------------
 (5) _clearArray                                           7     3      4    1750
                                             11 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (5) _mergeObjects                                        12     7      5    3577
                                             11 COMRAM    12     7      5
 ---------------------------------------------------------------------------------
 (4) _checkUp                                              1     1      0      22
                                             11 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (4) _checkDown                                            1     1      0      31
                                             11 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 7
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (8) _isr                                                  4     4      0    1417
                                              7 COMRAM     4     4      0
                          _Interrupt
 ---------------------------------------------------------------------------------
 (9) _Interrupt                                            0     0      0    1417
                            ___lwmod
                             _add_mS
                       _checkButtons
                      _screen_update
                        _snake_timer
                       _tetris_timer
                           i2_get_mS
                           i2_set_mS
 ---------------------------------------------------------------------------------
 (10) i2_set_mS                                            2     0      2      48
                                              0 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (10) i2_get_mS                                            2     0      2       0
                                              0 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (10) _tetris_timer                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (10) _snake_timer                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (10) _screen_update                                       5     5      0      46
                                              0 COMRAM     5     5      0
 ---------------------------------------------------------------------------------
 (10) _checkButtons                                        0     0      0     762
                     _debounceButton
 ---------------------------------------------------------------------------------
 (11) _debounceButton                                      7     3      4     762
                                              0 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (10) _add_mS                                              2     0      2      98
                                              0 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (10) ___lwmod                                             5     1      4     463
                                              2 COMRAM     5     1      4
                           i2_get_mS (ARG)
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 11
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _choosescreen
     _checkDown
     _checkUp
     _mergeObjects
     _pauseMultiplexing
       _waitForInterrupt
     _resumeMultiplexing
     _set_splashscreen
       _clearArray
       _pauseMultiplexing
         _waitForInterrupt
       _resumeMultiplexing
   _get_mS
   _initialise_globals
     _set_mS
   _initialise_hardware
     _initialise_TMR0
   _initialise_screen
   _mainGameLoop
     _initialise_globals
       _set_mS
     _pauseMultiplexing
       _waitForInterrupt
     _resumeMultiplexing
     _snake_main
       _MoveSnakes
         _CreateBerry
           _genBerry
             ___lbmod
             _rnd_get_num
         _SnakeGraph
           _clearArray
           _set_screen
             _clearArray
             _pauseMultiplexing
               _waitForInterrupt
             _resumeMultiplexing
       _inistialize_snake
         _CreateBerry
           _genBerry
             ___lbmod
             _rnd_get_num
       _readHighScore
         _ReadEEByte
         _WriteEEByte
           _waitForInterrupt
       _show_score
         _checkDown
         _clearArray
         _getNumber
           _memcpy
         _itoa
           ___awdiv
           ___awmod
           _reverse
             _swap
         _mergeObjects
         _moveObject
         _pauseButtons
         _pauseMultiplexing
           _waitForInterrupt
         _resumeButtons
         _resumeMultiplexing
         _set_screen
           _clearArray
           _pauseMultiplexing
             _waitForInterrupt
           _resumeMultiplexing
       _snake_buttons
         _checkDown
         _checkLeft
         _checkRight
         _checkUp
         _snake_button_down
         _snake_button_left
         _snake_button_right
         _snake_button_up
       _snake_screen
         _set_splashscreen
           _clearArray
           _pauseMultiplexing
             _waitForInterrupt
           _resumeMultiplexing
         _waitms
       _writeHighScore
         _WriteEEByte
           _waitForInterrupt
     _tetris_main
       _checkForLines
         _removeLine
       _initialise_tetris
         _clearArray
       _mergeObjects
       _moveObjectDown
         _checkForBottom
         _collisionDetect
         _mergeObjects
         _moveObject
         _selectNextObject
           ___awmod
           _memcpyvol
           _rnd_get_num
           _set_mS
         _set_mS
       _readHighScore
         _ReadEEByte
         _WriteEEByte
           _waitForInterrupt
       _selectNextObject
         ___awmod
         _memcpyvol
         _rnd_get_num
         _set_mS
       _set_screen
         _clearArray
         _pauseMultiplexing
           _waitForInterrupt
         _resumeMultiplexing
       _show_score
         _checkDown
         _clearArray
         _getNumber
           _memcpy
         _itoa
           ___awdiv
           ___awmod
           _reverse
             _swap
         _mergeObjects
         _moveObject
         _pauseButtons
         _pauseMultiplexing
           _waitForInterrupt
         _resumeButtons
         _resumeMultiplexing
         _set_screen
           _clearArray
           _pauseMultiplexing
             _waitForInterrupt
           _resumeMultiplexing
       _tetris_buttons
         _checkDown
         _checkLeft
         _checkRight
         _checkUp
         _tetris_button_down
           _moveObjectDown
             _checkForBottom
             _collisionDetect
             _mergeObjects
             _moveObject
             _selectNextObject
               ___awmod
               _memcpyvol
               _rnd_get_num
               _set_mS
             _set_mS
         _tetris_button_left
           _checkForLeftWall
           _collisionDetect
           _memcpyvol
           _mergeObjects
           _moveObject
           _pauseMultiplexing
             _waitForInterrupt
           _resumeMultiplexing
         _tetris_button_right
           _checkForRightWall
           _collisionDetect
           _mergeObjects
           _moveObject
           _pauseMultiplexing
             _waitForInterrupt
           _resumeMultiplexing
         _tetris_button_up
           _collisionDetect
           _mergeObjects
           _newRotation
             ___wmul
             _clearArray
             _memcpyvol
           _pauseMultiplexing
             _waitForInterrupt
           _pixelCount
           _resumeMultiplexing
       _tetris_screen
         _set_splashscreen
           _clearArray
           _pauseMultiplexing
             _waitForInterrupt
           _resumeMultiplexing
         _waitms
       _writeHighScore
         _WriteEEByte
           _waitForInterrupt
   _rnd_initialize
   _start_button

 _isr (ROOT)
   _Interrupt
     ___lwmod
       i2_get_mS (ARG)
     _add_mS
     _checkButtons
       _debounceButton
     _screen_update
     _snake_timer
     _tetris_timer
     i2_get_mS
     i2_set_mS

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             5FF      0       0      17        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK5           100      0       0      16        0.0%
BANK5              100      0       0      14        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100     37      BC       9       73.4%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0     100       7      100.0%
BITBANK0            80      0       0       4        0.0%
BANK0               80      0      77       5       93.0%
BITCOMRAM           7E      0       0       0        0.0%
COMRAM              7E     33      4F       1       62.7%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     282      15        0.0%
DATA                 0      0     282       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V2.05 build -831301201 
Symbol Table                                                                                   Sun Mar 03 00:06:37 2019

        __end_of_checkButtons 18CC               WriteEEByte@data 000C         __size_of_start_button 002C  
         ?_tetris_button_left 0001           ?_tetris_button_down 0001          __size_of_WriteEEByte 0030  
        ?_tetris_button_right 0001              moveObject@cycles 000F             moveObject@pObject 000C  
                          l95 2168                 ?_mainGameLoop 0001                  ___awdiv@sign 0011  
                          _mS 004C                ??_choosescreen 001B           ___wmul@multiplicand 000E  
                 __CFG_BORV$3 000000            WriteEEByte@address 000D          debounceButton@button 0007  
                __CFG_CP0$OFF 000000                  __CFG_CP1$OFF 000000                  __CFG_CP2$OFF 000000  
                __CFG_CP3$OFF 000000                 newRotation@x1 0024                 newRotation@x2 0022  
               newRotation@y1 0025                 newRotation@y2 0023                           l130 20B6  
                         l129 2094                           l340 1334                           l261 0BB4  
                         l341 135C                           l344 1372                           l605 21FA  
                         _GIE 007F97                  __CFG_CPB$OFF 000000                  __CFG_CPD$OFF 000000  
                         _PSA 007EAB                           _isr 0008                  ___awmod@sign 0011  
     __end_of_collisionDetect 1C48                           prod 000FF3                           wreg 000FE8  
              ?_tetris_screen 0001          ??_tetris_button_left 0019          ??_tetris_button_down 0028  
     __size_of_moveObjectDown 00D4                  __CFG_LVP$OFF 000000                  __CFG_WDT$OFF 000000  
                        l3004 204E                          l3210 1C3C                          l3204 1BE8  
                        l3240 2126                          l5010 1D7C                          l5100 0892  
                        l5022 1DA4                          l3248 213E                          l5040 220A  
                        l3520 0EDE                          l3512 0ED6                          l3352 1B20  
                        l5016 1D90                          l4410 1A86                          l4402 1A66  
                        l5050 0A66                          l3346 1B1C                          l5108 08A6  
                        l5140 091A                          l4404 1A6E                          l3508 2376  
                        l5028 1DB8                          l5204 131C                          l5310 1280  
                        l5302 126C                          l5142 0920                          l5118 08C0  
                        l4414 1A90                          l5062 0AD2                          l3614 21BA  
                        l4432 0FDE                          l5128 08DC                          l5072 0AFE  
                        l3536 0FB2                          l3528 0FA6                          l3642 2232  
                        l4450 1028                          l5146 09AA                          l5138 08F2  
                        l4418 1A9E                          l4610 0866                          l4444 1024  
                        l5324 12D2                          l5164 0A08                          l5156 09CC  
                        l4540 06FE                          l4532 06F4                          l3628 2192  
                        l3804 17BE                          l2940 1F40                          l4508 0D2C  
                        l4700 0C88                          l4462 1076                          l4438 0FE2  
                        l4470 10C0                          l4622 200E                          l5318 12B2  
                        l5158 09D2                          l5166 0A0A                          l4550 0732  
                        l4534 06FA                          l5086 0B54                          l5262 1E8E  
                        l5254 1E7C                          l5238 13B8                          l4456 1072  
                        l4384 2426                          l4608 085C                          l4552 0738  
                        l4640 1414                          l4618 1FEC                          l3682 1CC4  
                        l3690 1CFA                          l4394 1A4C                          l4570 0778  
                        l2946 1F5C                          l5274 229E                          l4740 1E26  
                        l4548 0728                          l4484 0CAA                          l4902 225A  
                        l4822 18EC                          l5294 123A                          l5278 11F6  
                        l4718 1B9E                          l4910 0DD4                          l4734 1EDA  
                        l4398 1A58                          l4590 07F0                          l4574 077C  
                        l4558 073C                          l4566 0768                          l4654 1494  
                        l3688 1CF8                          l4728 1EBC                          l4568 0772  
                        l3792 1752                          l4496 0CD6                          l4656 1498  
                        l4770 1704                          l4762 16E6                          l4746 1E4C  
                        l4586 07E0                          l3786 174A                          l4498 0CDA  
                        l4690 0C1A                          l4666 0B90                          l4924 0E5E  
                        l4916 0E52                          l4780 1724                          l4756 16D6  
                        l4596 07F4                          l4588 07EA                          l4684 0BBC  
                        l2998 2026                          l4678 0BB8                          l4928 0EBA  
                        l4768 16FC                          l4784 172E                          l4960 1166  
                        l4954 1136                          l4946 111A                          l4788 173C  
                        ?_isr 0001                          l3998 1D1A                          l4976 11C4  
                        l4968 11A2                          _DDRA 000F92                          _DDRB 000F93  
                        _DDRC 000F94                          _DDRD 000F95                          _T0CS 007EAD  
                        u2410 22DA                          u5010 120E                          u2434 1B56  
                        u2435 1B50                          u2604 0F10                          u3084 1788  
                        u4204 0C5A                          u2605 0F0A                          u3085 1782  
                        u4205 0C54                          u5030 1226                          u4230 1BDE  
                        u2614 0F26                          u2390 2326                          u4134 0BF2  
                        u2615 0F20                          u4135 0BEC                          u2800 21B2  
                        u2624 0F60                          _IPEN 007E87                          u2625 0F5A  
                        u5050 1268                          u2810 21B4                          u4500 2254  
                        u4340 1944                   _upper_8bits 008B                          u1925 1A14  
                        u5070 12AE                          u2830 218A                          u2840 218C  
                        u4440 152A                          u4290 1708                          u4450 152C  
                        u2860 222A                          u4701 0B20                          u2870 222C  
                        u4490 2252                          u4570 1162                          u3870 1A72  
                        u4670 0AEA                          u4910 133E                          u4680 0B0A  
                        u4920 1340                          u3980 0D3A                          i2l76 207E  
                        _TMR0 000FD6       show_score@tmpObjectData 02A5               ?_checkForBottom 000C  
                _start_button 20F0                          _game 003B           __end_of_CreateBerry 1D0A  
                        _main 2146                          _itoa 10E4                          _time 0088  
                        fsr1h 000FE2                          fsr2h 000FDA                          indf1 000FE7  
                        indf2 000FDF                          fsr1l 000FE1                          fsr2l 000FD9  
                        _swap 20C2                          btemp 0050              ??_writeHighScore 0010  
         rnd_initialize@input 000C                          prodh 000FF4                          prodl 000FF3  
                        start 000E                 __CFG_IESO$OFF 000000               ?_tetris_buttons 0001  
         moveObject@direction 000E                 __CFG_MCLRE$ON 000000                  ___param_bank 000000  
       ??_tetris_button_right 0019             _inistialize_snake 1D0A       writeHighScore@highscore 000E  
              ??_mainGameLoop 0034                         ??_isr 0008   __size_of_initialise_globals 000E  
          ?_inistialize_snake 0001                         ?_main 0001             ??_initialise_TMR0 000C  
                       ?_itoa 001A               __end_of___awdiv 1746                         _EEADR 000FA9  
             __end_of___awmod 1AA8               __end_of___lbmod 2146                         ?_swap 000C  
             ___awdiv@divisor 000E               __end_of___lwmod 1F2E                         i2l324 23EA  
                       i2l465 23F8                         i2l687 1B12               ___awdiv@counter 0010  
     debounceButton@debounced 0003                         _SNAKE 06D1                         _PORTA 000F80  
                       _PORTB 000F81                         _PORTC 000F82                         _PORTD 000F83  
   __size_of_set_splashscreen 007E               __end_of_checkUp 2236                 __CFG_PWRT$OFF 000000  
         ??_inistialize_snake 0017                 __CFG_WRT0$OFF 000000                 __CFG_WRT1$OFF 000000  
               __CFG_WRT2$OFF 000000                 __CFG_WRT3$OFF 000000                __CFG_EBTR0$OFF 000000  
              __CFG_FCMEN$OFF 000000                __CFG_EBTR1$OFF 000000                __CFG_EBTR2$OFF 000000  
              __CFG_EBTR3$OFF 000000                 __CFG_WRTB$OFF 000000                 __CFG_WRTC$OFF 000000  
               __CFG_WRTD$OFF 000000                __CFG_EBTRB$OFF 000000                         __lfsr 004E  
                ?_newRotation 0016               _snake_button_up 23B6                         itoa@i 0025  
                  _Left_Delay 00F5                         tablat 000FF5               __end_of_reverse 1E62  
                  _DropObject 003F                    _Down_Delay 00EF                         plusw1 000FE3  
                       plusw2 000FDB                         swap@a 000C                         swap@b 000E  
                       swap@t 0010                         ttemp5 0051                         ttemp6 0054  
                       ttemp7 0058                    _ReadEEByte 23A6                         status 000FD8  
            __end_ofi2_get_mS 2460                         wtemp8 0051              __end_ofi2_set_mS 2456  
                  _ObjectData 00CC     __end_of_inistialize_snake 1D64        __size_of_readHighScore 0028  
             __initialization 194A            _resumeMultiplexing 2478                  __end_of_main 216E  
                __end_of_itoa 11EA                  __end_of_swap 20F0      __end_of_selectNextObject 0DBA  
__size_of_initialise_hardware 003C           ?_resumeMultiplexing 0001                        ??_main 0034  
                      ??_itoa 0020                        ??_swap 0010                 __activetblptr 000002  
             ??_tetris_screen 001B              ?_collisionDetect 000C                 ?_mergeObjects 000C  
                 _CreateBerry 1CAA         selectNextObject@check 0019                        _EEDATA 000FA8  
                      _EECON2 000FA7              ___awdiv@dividend 000C                _debounceButton 1AA8  
                      i2l4032 1AD0                        i2l1298 1F24                        i2l4036 1AF6  
                      i2l4170 1F02                        i2l4176 1F1A                        i2l4168 1EFA  
                      i2l4192 17F8          ??_resumeMultiplexing 000C                    _ScreenData 008C  
        __end_of_choosescreen 12EE                        _TMR0IE 007F95                        _TMR0ON 007EAF  
                      _TETRIS 06E1                    _MoveSnakes 0890                  ?_rnd_get_num 0001  
       __size_of_checkButtons 0082          checkForLines@pObject 0023              __end_of_genBerry 2342  
                  _SnakeGraph 0DBA         __end_of_screen_update 1E10                __CFG_XINST$OFF 000000  
                      _Number 0621            __size_of_Interrupt 0082                    _SnakeYtext 0601  
                      _add_mS 23FC             ?_checkForLeftWall 000C                        ___wmul 225E  
                   ??___awdiv 0010                __CFG_STVREN$ON 000000                     ??___awmod 0010  
                   ??___lbmod 000D                        _berryX 0037                        _berryY 0036  
                      _get_mS 2442                     ??___lwmod 0007                  ?_snake_timer 0001  
          ??_checkForLeftWall 000E                        _memcpy 1EAA                     ??_checkUp 000C  
                      clear_0 1992                        clear_1 19A4                        clear_2 19B0  
            ___awdiv@quotient 0012               ___awmod@divisor 000E                        _shapes 0200  
                      _set_mS 2438                        _waitms 236E               ___awmod@counter 0010  
                      _tetris 00EE                _BackgroundData 00BC             ?_waitForInterrupt 0001  
     __size_of_rnd_initialize 000A       __end_of_snake_button_up 23C4            ??_waitForInterrupt 000C  
              show_score@mask 0285                  __mediumconst 0000                 _readHighScore 21E6  
              ??_mergeObjects 0011                        preinc2 000FDC                _moveObjectDown 13D4  
                      tblptrh 000FF7                        tblptrl 000FF6                        tblptru 000FF8  
                   ??_reverse 0015        __end_of_debounceButton 1B14                  _checkButtons 184A  
            getNumber@pTarget 0016       snake_main@LastHighScore 0027          __end_of_mainGameLoop 22A4  
             ___lbmod@divisor 000C                    __accesstop 0080       __end_of__initialization 19B6  
           ?_tetris_button_up 0001               ___lbmod@counter 000E                   ?_ReadEEByte 0001  
             __CFG_PBADEN$OFF 000000          writeHighScore@adress 0010                  ?_tetris_main 0001  
               ___rparam_used 000001            ??_tetris_button_up 0026                 __end_of_SNAKE 06E1  
  __size_of_inistialize_snake 005A          writeHighScore@scored 000F                  add_mS@amount 0001  
           _pauseMultiplexing 2382                __pcstackCOMRAM 0001   __size_of_snake_button_right 000E  
                __pidataBANK0 2396                  __pidataBANK2 15B8            __size_of_checkLeft 0028  
          __size_of_checkDown 0028            ?_pauseMultiplexing 0001                 ?_pauseButtons 0001  
         ??_pauseMultiplexing 000C        __end_of_moveObjectDown 14A8              _set_splashscreen 18CC  
     set_splashscreen@newData 0013                     ?i2_get_mS 0001                ?_readHighScore 0001  
          __size_of_getNumber 0028                     ?i2_set_mS 0001               ?_debounceButton 0001  
           __end_of_Interrupt 184A              ??_checkForBottom 000E          moveObjectDown@result 0027  
       __end_of_snake_buttons 1FAA                   MoveSnakes@i 0022                    _checkRight 216E  
          screen_update@xmask 0005            screen_update@ymask 0003                    __pbssBANK0 0080  
                  __pbssBANK1 0100              ??_tetris_buttons 0028                   ?_MoveSnakes 0001  
        __size_of_newRotation 0130                    __pnvCOMRAM 004C     __end_of_pauseMultiplexing 2396  
          choosescreen@tetris 002B            __size_of_memcpyvol 0040                 ??_WriteEEByte 000D  
                  _clearArray 1FE6                   ?_SnakeGraph 0001               _initialise_TMR0 22A4  
       __end_of_resumeButtons 2468                       ?_add_mS 0001                       ?___wmul 000C  
                     ?_get_mS 000C                ??_pauseButtons 000C                       ?_memcpy 000C  
                 SnakeGraph@i 001D                   SnakeGraph@j 001C                       ?_set_mS 000C  
                     ?_waitms 000C             _initialise_screen 2470         __end_of_choose_screen 06D1  
           _initialise_tetris 1C48           __size_of_ReadEEByte 0010               ?_moveObjectDown 0025  
selectNextObject@rndSelection 0023            ?_initialise_screen 0001                    ??i2_get_mS 0003  
          ?_initialise_tetris 0001           newRotation@rotation 001A              ?_snake_button_up 0001  
                   ?_genBerry 0001        __size_of_checkForLines 0082                    ??i2_set_mS 0003  
                 _Right_Delay 00F3                   _Screen_Data 00AC   __size_of_tetris_button_left 0088  
 __size_of_tetris_button_down 0016         __size_of_choosescreen 0104              _CheckForNewLines 0041  
           __end_of_checkLeft 21BE             __end_of_checkDown 225E                   moveObject@c 0016  
                 moveObject@i 0017           ??_initialise_screen 000C           ??_initialise_tetris 0013  
         _initialise_hardware 1FAA   __end_of_tetris_button_right 16C2                checkForLines@x 002D  
              checkForLines@y 002E         screen_update@CurrentX 0047                       __Hparam 0000  
        __size_of_rnd_get_num 0074             __end_of_getNumber 21E6                       __Lparam 0000  
              checkLeft@reset 000C                       _OriginX 003D                       _OriginY 003C  
  __end_of_initialise_globals 23E0          __end_of_mergeObjects 10E4                checkDown@reset 000C  
             __size_of_add_mS 000E                       ___awdiv 16C2                       ___awmod 1A38  
                     ___lbmod 211C               __size_of___wmul 0026             removeLine@pObject 000C  
   __end_of_initialise_screen 2478                       ___lwmod 1EEC             ?_selectNextObject 0016  
                __psmallconst 0600           __end_of_WriteEEByte 20C2               __size_of_get_mS 000A  
   __end_of_initialise_tetris 1CAA                   removeLine@x 0022                   removeLine@y 0021  
                     _checkUp 220E                       __pcinit 194A          ?_initialise_hardware 0001  
             __size_of_memcpy 0042                       __ramtop 0600                _rnd_initialize 242E  
             __size_of_set_mS 000A                       __ptext0 2146            ??_selectNextObject 0018  
                     __ptext1 20F0                       __ptext2 242E                       __ptext3 2284  
                     __ptext4 12EE                       __ptext5 22DE                       __ptext6 1D64  
                     __ptext7 14A8                       __ptext8 1B14                       __ptext9 0B6A  
                _choosescreen 11EA               __size_of_waitms 0014               ??_readHighScore 000E  
                   _T0CONbits 000FD5          __size_of_snake_timer 000E                 ?_snake_screen 0001  
         __size_of_MoveSnakes 0188                       _counter 008A                  __size_of_isr 208A  
           __end_of_memcpyvol 1F6E              ___awmod@dividend 000C                   pixelCount@r 0015  
                 pixelCount@x 0016                   pixelCount@y 0017                    ??_genBerry 0012  
       __size_of_mainGameLoop 0020           __size_of_SnakeGraph 0116                       _reverse 1E10  
                ?_CreateBerry 0001               show_score@F2762 00DC             _checkForRightWall 22C2  
         mergeObjects@pTarget 000E             _snake_button_left 240A             _snake_button_down 2416  
              __pintcode_body 205A           mergeObjects@pSource 000C                   ?_checkRight 0001  
        end_of_initialization 19B6            ?_checkForRightWall 000C       __end_of_initialise_TMR0 22C2  
                memcpyvol@src 000E                   set_screen@i 0015                       memcpy@d 0012  
                     memcpy@n 0010                       memcpy@s 0014            ?_snake_button_left 0001  
          ?_snake_button_down 0001                       itoa@bas 001E                       itoa@rem 0023  
                  _moveObject 06F2                 __Lmediumconst 0000                       itoa@str 001C  
                     int_func 205A    __size_of_pauseMultiplexing 0014                   ?_clearArray 000C  
         ??_checkForRightWall 000E               show_score@score 02B5                    _removeLine 0ED0  
           pixelCount@pSource 000C                 _checkForLines 1746                    _pixelCount 1B14  
         ??_snake_button_left 000C           ??_snake_button_down 000C          __size_of_tetris_main 00E6  
                  _mtxButtons 00ED                       waitms@t 000C                    _set_screen 1B7E  
                     postdec1 000FE5                       postdec2 000FDD                    _snake_main 1E62  
                     postinc0 000FEE                       postinc1 000FE6                       postinc2 000FDE  
    tetris_buttons@returnbool 0028        __end_of_rnd_initialize 2438         ??_initialise_hardware 000C  
     __size_of_writeHighScore 0016                  _mainGameLoop 2284                     _PORTBbits 000F81  
              ??_snake_screen 001B             set_splashscreen@i 0019                    _show_score 0A18  
    tetris_main@LastHighScore 0032     __end_of_checkForRightWall 22DE              ___lbmod@dividend 000D  
       __end_of_tetris_screen 22F8     __end_of_snake_button_left 2416     __end_of_snake_button_down 2422  
               _randomobjects 0080     __size_of_checkForLeftWall 0018           debounceButton@delay 0001  
        __end_of_pauseButtons 2470                   ___lbmod@rem 000F      __size_of_collisionDetect 0064  
 __size_of_resumeMultiplexing 0008     __size_of_waitForInterrupt 000C                 ?_tetris_timer 0001  
                ??_ReadEEByte 000C                __end_of_TETRIS 06F1         CreateBerry@randomGood 0015  
                   _EndOfGame 003E      __end_of_set_splashscreen 194A                ?_checkForLines 0023  
                 show_score@i 02BB                   _WriteEEByte 2092       show_score@currentNumber 02B6  
              __end_of_Number 06C1    __size_of_initialise_screen 0008                __end_of_add_mS 240A  
             ?_rnd_initialize 0001    __size_of_initialise_tetris 0062                __end_of___wmul 2284  
   __size_of_tetris_button_up 0088           __size_of_checkRight 0028                __end_of_get_mS 244C  
              __end_of_memcpy 1EEC              ??_debounceButton 0005              mergeObjects@mode 0010  
              __end_of_set_mS 2442                __end_of_waitms 2382                     _IsRotated 0042  
          __end_of_ReadEEByte 23B6           start_initialization 194A           __size_of_clearArray 003C  
      __size_of_screen_update 0054                   __end_of_isr 2092             __size_ofi2_get_mS 000A  
           __size_ofi2_set_mS 000A              choosescreen@mask 001B                ??_tetris_timer 0001  
                   _Interrupt 17C8              ?_initialise_TMR0 0001                 ?_start_button 0001  
                ??_MoveSnakes 001E                   ?_moveObject 000C          selectNextObject@fill 0020  
       __size_of_mergeObjects 0108         moveObjectDown@pObject 0025              __CFG_OSC$INTIO67 000000  
  __end_of_snake_button_right 23D2                  ??_SnakeGraph 0017                   ?_removeLine 000C  
                  memcpy@dest 000C                   ?_pixelCount 000C                   ?_set_screen 0013  
         checkForLines@pixels 002C                      ??_add_mS 0003                   ?_snake_main 0001  
                    ??___wmul 0010                      ??_get_mS 000E              ??_moveObjectDown 0027  
                 __pdataBANK0 00DC                   __pdataBANK2 0200                    memcpyvol@d 0012  
                  memcpyvol@n 0010                    memcpyvol@s 0014              __CFG_LPT1OSC$OFF 000000  
                    ??_memcpy 0012                  checkUp@reset 000C               getNumber@pDigit 0018  
                    ??_set_mS 000E                      ??_waitms 000E        collisionDetect@pTarget 000E  
                 ?_show_score 0001        collisionDetect@pSource 000C            __end_of_MoveSnakes 0A18  
  __size_of_checkForRightWall 001C                   __pbssCOMRAM 0034                 __pcstackBANK2 0285  
  __size_of_snake_button_left 000C    __size_of_snake_button_down 000C                 _NumberOfLines 0043  
          __end_of_SnakeGraph 0ED0                  _mergeObjects 0FDC             __size_of_genBerry 0018  
               ??_newRotation 001B            __end_of_SnakeYtext 0621          __size_of_CreateBerry 0060  
              ??_start_button 000C                    ?_Interrupt 0001               ??_checkForLines 0025  
                   _checkLeft 2196                     _checkDown 2236          __end_of_snake_screen 2312  
                   __pnvBANK0 00EC            newRotation@pTarget 0018            newRotation@pSource 0016  
           __CFG_CCP2MX$PORTC 000000                 _screen_update 1DBC             ??_collisionDetect 0010  
                   __pintcode 0008                      ?___awdiv 000C                      ?___awmod 000C  
                    ?___lbmod 000C                     _getNumber 21BE                      ?___lwmod 0003  
              _writeHighScore 2358                     _direction 003A        __size_of_snake_buttons 003C  
                    ?_checkUp 0001             set_screen@newData 0013           __size_of_moveObject 019E  
                 __smallconst 0600    __end_of_tetris_button_left 15B8    __end_of_tetris_button_down 2358  
          _initialise_globals 23D2       selectNextObject@pTarget 0016           __size_of_removeLine 010C  
       __size_of_pauseButtons 0008                      ?_reverse 0011              _checkForLeftWall 2312  
     selectNextObject@counter 0024           __size_of_pixelCount 006A                     _memcpyvol 1F2E  
   __size_of_selectNextObject 0120           __size_of_set_screen 0066        __size_of_resumeButtons 0008  
                ??_checkRight 000C           __size_of_snake_main 0048           ?_initialise_globals 0001  
                genBerry@temp 0013                  genBerry@size 0012      __size_of_snake_button_up 000E  
            _waitForInterrupt 2422                 ??_rnd_get_num 000C                ___wmul@product 0010  
                  ?_checkLeft 0001                    ?_checkDown 0001                  ??_clearArray 0010  
         __end_of_newRotation 0C9A                    reverse@end 0018       __size_of_checkForBottom 0038  
         __size_of_show_score 0152                     _moveSnake 0039                    reverse@str 0011  
              ?_screen_update 0001                      i2u360_40 1888                      i2u360_46 188A  
                    i2u361_40 18A6                      i2u361_46 18A8                      i2u362_40 18C4  
                    i2u362_46 18C6                      i2u364_44 1DD4                      i2u364_45 1DD0  
                    i2u366_40 1F06                      i2u359_40 186A                      i2u359_46 186C  
      __end_of_writeHighScore 236E              __CFG_WDTPS$32768 000000       __size_of_tetris_buttons 0058  
        tetris_main@newScreen 0033  __size_of_tetris_button_right 0084          ??_initialise_globals 000E  
                  ?_getNumber 0016                 ??_snake_timer 0001              _tetris_button_up 14A8  
                _pauseButtons 2468                     _positions 0100          __end_of_tetris_timer 23EE  
          __end_of_checkRight 2196                    _ADCON1bits 000FC1         removeLine@currentLine 0020  
           ___wmul@multiplier 000C                      i2_get_mS 2456         __end_of_readHighScore 220E  
                    i2_set_mS 244C            __end_of_clearArray 2022                 ?_checkButtons 0001  
           ReadEEByte@address 000C                    ?_memcpyvol 000C                   _INTCON2bits 000FF1  
                   copy_data0 195E                     copy_data1 197E                 _snake_buttons 1F6E  
             checkForBottom@i 0012                   ??_Interrupt 0008                itoa@isNegative 0022  
                set_mS@amount 000C                 ??_tetris_main 002F                   _countblocks 0040  
                  _EECON1bits 000FA6                  ?_WriteEEByte 000C             ?_set_splashscreen 0013  
                    __Hrparam 0000              ??_rnd_initialize 000C   __end_of_initialise_hardware 1FE6  
                   memcpy@src 000E                      __Lrparam 0000            __CFG_BOREN$SBORDIS 000000  
             ?_writeHighScore 000E           __end_of_rnd_get_num 1A38                _Left_Debounced 004A  
          ??_set_splashscreen 0015              collisionDetect@i 0018                 _resumeButtons 2460  
                   itoa@value 001A              __size_of___awdiv 0084      checkForRightWall@pObject 000C  
            __size_of___awmod 0070              __size_of___lbmod 002A                  CreateBerry@i 0016  
            __size_of___lwmod 0042          __end_of_start_button 211C              __size_of_checkUp 0028  
               mergeObjects@i 0017                  rnd_get_num@b 0010                 _choose_screen 06C1  
                removeLine@pY 000E                 _tmpObjectData 009C                 reverse@length 0013  
         __end_of_snake_timer 23FC                      _genBerry 232A                ??_checkButtons 0008  
                    __ptext10 225E                      __ptext11 163E                      __ptext20 2022  
                    __ptext12 22C2                      __ptext21 1C48                      __ptext13 1530  
                    __ptext30 23C4                      __ptext22 1746                      __ptext14 2312  
                    __ptext31 240A                      __ptext23 0ED0                      __ptext15 2342  
                    __ptext40 1E10                      __ptext32 2416                      __ptext24 1E62  
                    __ptext16 13D4                      __ptext41 20C2                      __ptext33 216E  
                    __ptext25 2358                      __ptext17 0C9A                      __ptext50 0890  
                    __ptext42 1A38                      __ptext34 2196                      __ptext26 22F8  
                    __ptext18 1F2E                      __ptext51 0DBA                      __ptext43 16C2  
                    __ptext35 0A18                      __ptext27 236E                      __ptext19 1BE4  
                    __ptext60 1FAA                      __ptext52 1B7E                      __ptext44 21BE  
                    __ptext36 2460                      __ptext28 1F6E                      __ptext61 22A4  
                    __ptext53 1CAA                      __ptext45 1EAA                      __ptext37 2468  
                    __ptext29 23B6                      __ptext70 220E                      __ptext62 2442  
                    __ptext54 232A                      __ptext46 21E6                      __ptext38 06F2  
                    __ptext71 2236                      __ptext63 11EA                      __ptext55 19C4  
                    __ptext47 2092                      __ptext39 10E4                      __ptext80 1AA8  
                    __ptext64 18CC                      __ptext56 211C                      __ptext48 23A6  
                    __ptext81 23FC                      __ptext73 17C8                      __ptext65 2478  
                    __ptext57 23D2                      __ptext49 1D0A                      __ptext82 1EEC  
                    __ptext74 244C                      __ptext66 2382                      __ptext58 2438  
                    __ptext75 2456                      __ptext67 2422                      __ptext59 2470  
                    __ptext76 23E0                      __ptext68 1FE6                      __ptext77 23EE  
                    __ptext69 0FDC                      __ptext78 1DBC                      __ptext79 184A  
            __size_of_reverse 0052                ?_snake_buttons 0001    __end_of_resumeMultiplexing 2480  
            _Rotate_Debounced 004B         __size_of_snake_screen 001A                      _itoa$762 0020  
                 _newRotation 0B6A            _previous_direction 0035               _LimitedRotation 0044  
                ??_moveObject 0010               _tetris_main$627 002F                 __size_of_main 0028  
                 ??_checkLeft 000C                   ??_checkDown 000C                 __size_of_itoa 0106  
               __size_of_swap 002E               ??_screen_update 0001                  ??_removeLine 000F  
                ??_pixelCount 000E             ??_snake_button_up 000C                  ??_set_screen 0015  
                ??_snake_main 0027                ?_resumeButtons 0001                _Down_Debounced 0048  
                 clearArray@i 0012        __size_of_tetris_screen 001A               _Right_Debounced 0049  
                    int$flags 0050           __end_of_tetris_main 13D4                   ??_getNumber 0018  
          _snake_button_right 23C4                  ??_show_score 0027                  _snake_screen 22F8  
          __end_of_moveObject 0890                 memcpyvol@dest 000C                    _INTCONbits 000FF2  
            clearArray@pArray 000C           ?_snake_button_right 0001            __end_of_removeLine 0FDC  
                 ??_memcpyvol 0012            __end_of_pixelCount 1B7E              _selectNextObject 0C9A  
        readHighScore@tmpbyte 000F            __end_of_set_screen 1BE4               _collisionDetect 1BE4  
                    intlevel2 0000            __end_of_snake_main 1EAA                  _UpdateScreen 00EC  
                 _lower_8bits 0045                  reverse@start 0016              ___lwmod@dividend 0003  
                 _rnd_get_num 19C4              show_score@number 02B7                _checkForBottom 2022  
                _Rotate_Delay 00F1                    _OSCCONbits 000FD3            __end_of_show_score 0B6A  
          inistialize_snake@i 0017                   _snakeLength 0038          ??_snake_button_right 000C  
    __end_of_checkForLeftWall 232A      __size_of_initialise_TMR0 001E                _tetris_buttons 1D64  
       __size_of_tetris_timer 000E           readHighScore@adress 000E               checkRight@reset 000C  
                 _snake_timer 23EE                 choosescreen@i 002C             selectNextObject@s 0021  
    __end_of_waitForInterrupt 242E                 ?_choosescreen 0001        show_score@Numberscreen 0295  
             ___lwmod@divisor 0005               ___lwmod@counter 0007                 _LastHighScore 0046  
       checkForBottom@pObject 000C               ??_snake_buttons 000D                 ??_CreateBerry 0014  
               _tetris_screen 22DE           _tetris_button_right 163E       checkForLeftWall@pObject 000C  
           _InterruptComplete 0034                clearArray@size 000E       __size_of_debounceButton 006C  
                _port_display 000F82      __end_of_tetris_button_up 1530        __end_of_checkForBottom 205A  
                _tetris_timer 23E0            _tetris_button_left 1530            _tetris_button_down 2342  
                 _tetris_main 12EE         __end_of_checkForLines 17C8        __end_of_tetris_buttons 1DBC  
             ??_resumeButtons 000C                i2set_mS@amount 0001  
