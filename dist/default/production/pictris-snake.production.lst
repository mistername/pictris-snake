

Microchip Technology PIC18 LITE Macro Assembler V2.00 build -1524193055 
                                                                                               Tue Jan 29 15:44:54 2019

Microchip Technology Omniscient Code Generator v2.00 (Free mode) build 20180527130849
     1                           	processor	18F4520
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	idataBANK0,global,class=CODE,delta=1,noexec
     7                           	psect	idataBANK2,global,class=CODE,delta=1,noexec
     8                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     9                           	psect	cinit,global,reloc=2,class=CODE,delta=1
    10                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    11                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    12                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    13                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    14                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    15                           	psect	dataBANK2,global,class=BANK2,space=1,delta=1,lowdata,noexec
    16                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    17                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    18                           	psect	text0,global,reloc=2,class=CODE,delta=1
    19                           	psect	text1,global,reloc=2,class=CODE,delta=1
    20                           	psect	text2,global,reloc=2,class=CODE,delta=1
    21                           	psect	text3,global,reloc=2,class=CODE,delta=1
    22                           	psect	text4,global,reloc=2,class=CODE,delta=1
    23                           	psect	text5,global,reloc=2,class=CODE,delta=1
    24                           	psect	text6,global,reloc=2,class=CODE,delta=1
    25                           	psect	text7,global,reloc=2,class=CODE,delta=1
    26                           	psect	text8,global,reloc=2,class=CODE,delta=1
    27                           	psect	text9,global,reloc=2,class=CODE,delta=1
    28                           	psect	text10,global,reloc=2,class=CODE,delta=1
    29                           	psect	text11,global,reloc=2,class=CODE,delta=1
    30                           	psect	text12,global,reloc=2,class=CODE,delta=1
    31                           	psect	text13,global,reloc=2,class=CODE,delta=1,group=1
    32                           	psect	text14,global,reloc=2,class=CODE,delta=1
    33                           	psect	text15,global,reloc=2,class=CODE,delta=1
    34                           	psect	text16,global,reloc=2,class=CODE,delta=1
    35                           	psect	text17,global,reloc=2,class=CODE,delta=1
    36                           	psect	text18,global,reloc=2,class=CODE,delta=1
    37                           	psect	text19,global,reloc=2,class=CODE,delta=1
    38                           	psect	text20,global,reloc=2,class=CODE,delta=1
    39                           	psect	text21,global,reloc=2,class=CODE,delta=1
    40                           	psect	text22,global,reloc=2,class=CODE,delta=1
    41                           	psect	text23,global,reloc=2,class=CODE,delta=1
    42                           	psect	text24,global,reloc=2,class=CODE,delta=1,group=1
    43                           	psect	text25,global,reloc=2,class=CODE,delta=1,group=1
    44                           	psect	text26,global,reloc=2,class=CODE,delta=1
    45                           	psect	text27,global,reloc=2,class=CODE,delta=1
    46                           	psect	text28,global,reloc=2,class=CODE,delta=1
    47                           	psect	text29,global,reloc=2,class=CODE,delta=1
    48                           	psect	text30,global,reloc=2,class=CODE,delta=1
    49                           	psect	text31,global,reloc=2,class=CODE,delta=1
    50                           	psect	text32,global,reloc=2,class=CODE,delta=1
    51                           	psect	text33,global,reloc=2,class=CODE,delta=1
    52                           	psect	text34,global,reloc=2,class=CODE,delta=1
    53                           	psect	text35,global,reloc=2,class=CODE,delta=1
    54                           	psect	text36,global,reloc=2,class=CODE,delta=1,group=1
    55                           	psect	text37,global,reloc=2,class=CODE,delta=1
    56                           	psect	text38,global,reloc=2,class=CODE,delta=1
    57                           	psect	text39,global,reloc=2,class=CODE,delta=1
    58                           	psect	text40,global,reloc=2,class=CODE,delta=1
    59                           	psect	text41,global,reloc=2,class=CODE,delta=1
    60                           	psect	text42,global,reloc=2,class=CODE,delta=1
    61                           	psect	text43,global,reloc=2,class=CODE,delta=1
    62                           	psect	text44,global,reloc=2,class=CODE,delta=1
    63                           	psect	text45,global,reloc=2,class=CODE,delta=1
    64                           	psect	text46,global,reloc=2,class=CODE,delta=1
    65                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    66                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    67                           	psect	text48,global,reloc=2,class=CODE,delta=1
    68                           	psect	text49,global,reloc=2,class=CODE,delta=1,group=1
    69                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    70                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    71                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    72  0000                     
    73                           ; Version 2.00
    74                           ; Generated 27/05/2018 GMT
    75                           ; 
    76                           ; Copyright Â© 2018, Microchip Technology Inc. and its subsidiaries ("Microchip")
    77                           ; All rights reserved.
    78                           ; 
    79                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    80                           ; 
    81                           ; Redistribution and use in source and binary forms, with or without modification, are
    82                           ; permitted provided that the following conditions are met:
    83                           ; 
    84                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    85                           ;        conditions and the following disclaimer.
    86                           ; 
    87                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    88                           ;        of conditions and the following disclaimer in the documentation and/or other
    89                           ;        materials provided with the distribution.
    90                           ; 
    91                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    92                           ;        software without specific prior written permission.
    93                           ; 
    94                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    95                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    96                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    97                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    98                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    99                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   100                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   101                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   102                           ; 
   103                           ; 
   104                           ; Code-generator required, PIC18F4520 Definitions
   105                           ; 
   106                           ; SFR Addresses
   107  0000                     
   108                           	psect	idataCOMRAM
   109  0021BA                     __pidataCOMRAM:
   110                           	opt stack 0
   111                           
   112                           ;initializer for __lfsr
   113  0021BA  FF                 	db	255
   114                           
   115                           	psect	idataBANK0
   116  002164                     __pidataBANK0:
   117                           	opt stack 0
   118                           
   119                           ;initializer for show_score@F2907
   120  002164  FFFF               	dw	65535
   121  002166  FFFF               	dw	65535
   122  002168  FFFF               	dw	65535
   123  00216A  FFFF               	dw	65535
   124  00216C  FFFF               	dw	65535
   125  00216E  FFFF               	dw	65535
   126  002170  FFFF               	dw	65535
   127  002172  FFFF               	dw	65535
   128                           
   129                           	psect	idataBANK2
   130  00193A                     __pidataBANK2:
   131                           	opt stack 0
   132                           
   133                           ;initializer for _shapes
   134  00193A  0000               	dw	0
   135  00193C  0000               	dw	0
   136  00193E  0000               	dw	0
   137  001940  0001               	dw	1
   138  001942  0003               	dw	3
   139  001944  0001               	dw	1
   140  001946  0000               	dw	0
   141  001948  0000               	dw	0
   142  00194A  04                 	db	4
   143  00194B  00                 	db	0
   144  00194C  00                 	db	0
   145  00194D  0000               	dw	0
   146  00194F  0000               	dw	0
   147  001951  0001               	dw	1
   148  001953  0001               	dw	1
   149  001955  0001               	dw	1
   150  001957  0001               	dw	1
   151  001959  0000               	dw	0
   152  00195B  0000               	dw	0
   153  00195D  04                 	db	4
   154  00195E  00                 	db	0
   155  00195F  01                 	db	1
   156  001960  0000               	dw	0
   157  001962  0000               	dw	0
   158  001964  0000               	dw	0
   159  001966  0003               	dw	3
   160  001968  0001               	dw	1
   161  00196A  0001               	dw	1
   162  00196C  0000               	dw	0
   163  00196E  0000               	dw	0
   164  001970  04                 	db	4
   165  001971  00                 	db	0
   166  001972  00                 	db	0
   167  001973  0000               	dw	0
   168  001975  0000               	dw	0
   169  001977  0000               	dw	0
   170  001979  0001               	dw	1
   171  00197B  0001               	dw	1
   172  00197D  0003               	dw	3
   173  00197F  0000               	dw	0
   174  001981  0000               	dw	0
   175  001983  04                 	db	4
   176  001984  00                 	db	0
   177  001985  00                 	db	0
   178  001986  0000               	dw	0
   179  001988  0000               	dw	0
   180  00198A  0000               	dw	0
   181  00198C  0003               	dw	3
   182  00198E  0003               	dw	3
   183  001990  0000               	dw	0
   184  001992  0000               	dw	0
   185  001994  0000               	dw	0
   186  001996  03                 	db	3
   187  001997  01                 	db	1
   188  001998  02                 	db	2
   189  001999  0000               	dw	0
   190  00199B  0000               	dw	0
   191  00199D  0000               	dw	0
   192  00199F  0002               	dw	2
   193  0019A1  0003               	dw	3
   194  0019A3  0001               	dw	1
   195  0019A5  0000               	dw	0
   196  0019A7  0000               	dw	0
   197  0019A9  04                 	db	4
   198  0019AA  01                 	db	1
   199  0019AB  01                 	db	1
   200  0019AC  0000               	dw	0
   201  0019AE  0000               	dw	0
   202  0019B0  0000               	dw	0
   203  0019B2  0001               	dw	1
   204  0019B4  0003               	dw	3
   205  0019B6  0002               	dw	2
   206  0019B8  0000               	dw	0
   207  0019BA  0000               	dw	0
   208  0019BC  04                 	db	4
   209  0019BD  01                 	db	1
   210  0019BE  01                 	db	1
   211                           
   212                           	psect	smallconst
   213  000600                     __psmallconst:
   214                           	opt stack 0
   215  000600  00                 	db	0
   216  000601                     _SnakeYtext:
   217                           	opt stack 0
   218  000601  0001               	dw	1
   219  000603  0002               	dw	2
   220  000605  0004               	dw	4
   221  000607  0008               	dw	8
   222  000609  0010               	dw	16
   223  00060B  0020               	dw	32
   224  00060D  0040               	dw	64
   225  00060F  0080               	dw	128
   226  000611  0100               	dw	256
   227  000613  0200               	dw	512
   228  000615  0400               	dw	1024
   229  000617  0800               	dw	2048
   230  000619  1000               	dw	4096
   231  00061B  2000               	dw	8192
   232  00061D  4000               	dw	16384
   233  00061F  8000               	dw	32768
   234  000621                     __end_of_SnakeYtext:
   235                           	opt stack 0
   236  000621                     _choose_screen:
   237                           	opt stack 0
   238  000621  FFFF               	dw	65535
   239  000623  8181               	dw	33153
   240  000625  BD81               	dw	48513
   241  000627  858D               	dw	34189
   242  000629  8599               	dw	34201
   243  00062B  AD81               	dw	44417
   244  00062D  8181               	dw	33153
   245  00062F  FFFF               	dw	65535
   246  000631                     __end_of_choose_screen:
   247                           	opt stack 0
   248  000631                     _Number:
   249                           	opt stack 0
   250  000631  001E               	dw	30
   251  000633  0012               	dw	18
   252  000635  0012               	dw	18
   253  000637  0012               	dw	18
   254  000639  001E               	dw	30
   255  00063B  0000               	dw	0
   256  00063D  0000               	dw	0
   257  00063F  0000               	dw	0
   258  000641  0004               	dw	4
   259  000643  000C               	dw	12
   260  000645  0004               	dw	4
   261  000647  0004               	dw	4
   262  000649  001E               	dw	30
   263  00064B  0000               	dw	0
   264  00064D  0000               	dw	0
   265  00064F  0000               	dw	0
   266  000651  001E               	dw	30
   267  000653  0002               	dw	2
   268  000655  001E               	dw	30
   269  000657  0010               	dw	16
   270  000659  001E               	dw	30
   271  00065B  0000               	dw	0
   272  00065D  0000               	dw	0
   273  00065F  0000               	dw	0
   274  000661  001E               	dw	30
   275  000663  0002               	dw	2
   276  000665  000E               	dw	14
   277  000667  0002               	dw	2
   278  000669  001E               	dw	30
   279  00066B  0000               	dw	0
   280  00066D  0000               	dw	0
   281  00066F  0000               	dw	0
   282  000671  0012               	dw	18
   283  000673  0012               	dw	18
   284  000675  001E               	dw	30
   285  000677  0002               	dw	2
   286  000679  0002               	dw	2
   287  00067B  0000               	dw	0
   288  00067D  0000               	dw	0
   289  00067F  0000               	dw	0
   290  000681  001E               	dw	30
   291  000683  0010               	dw	16
   292  000685  001E               	dw	30
   293  000687  0002               	dw	2
   294  000689  001E               	dw	30
   295  00068B  0000               	dw	0
   296  00068D  0000               	dw	0
   297  00068F  0000               	dw	0
   298  000691  001E               	dw	30
   299  000693  0010               	dw	16
   300  000695  001E               	dw	30
   301  000697  0012               	dw	18
   302  000699  001E               	dw	30
   303  00069B  0000               	dw	0
   304  00069D  0000               	dw	0
   305  00069F  0000               	dw	0
   306  0006A1  001E               	dw	30
   307  0006A3  0002               	dw	2
   308  0006A5  0004               	dw	4
   309  0006A7  0008               	dw	8
   310  0006A9  0010               	dw	16
   311  0006AB  0000               	dw	0
   312  0006AD  0000               	dw	0
   313  0006AF  0000               	dw	0
   314  0006B1  001E               	dw	30
   315  0006B3  0012               	dw	18
   316  0006B5  001E               	dw	30
   317  0006B7  0012               	dw	18
   318  0006B9  001E               	dw	30
   319  0006BB  0000               	dw	0
   320  0006BD  0000               	dw	0
   321  0006BF  0000               	dw	0
   322  0006C1  001E               	dw	30
   323  0006C3  0012               	dw	18
   324  0006C5  001E               	dw	30
   325  0006C7  0002               	dw	2
   326  0006C9  0002               	dw	2
   327  0006CB  0000               	dw	0
   328  0006CD  0000               	dw	0
   329  0006CF  0000               	dw	0
   330  0006D1                     __end_of_Number:
   331                           	opt stack 0
   332  0006D1                     _SNAKE:
   333                           	opt stack 0
   334  0006D1  FB97               	dw	64407
   335  0006D3  A955               	dw	43349
   336  0006D5  AB9D               	dw	43933
   337  0006D7  0000               	dw	0
   338  0006D9  03DF               	dw	991
   339  0006DB  B881               	dw	47233
   340  0006DD  035F               	dw	863
   341  0006DF  0000               	dw	0
   342  0006E1                     __end_of_SNAKE:
   343                           	opt stack 0
   344  0006E1                     _TETRIS:
   345                           	opt stack 0
   346  0006E1  8841               	dw	34881
   347  0006E3  FBDF               	dw	64479
   348  0006E5  8841               	dw	34881
   349  0006E7  0000               	dw	0
   350  0006E9  9BDF               	dw	39903
   351  0006EB  A955               	dw	43349
   352  0006ED  CA91               	dw	51857
   353  0006EF  0000               	dw	0
   354  0006F1                     __end_of_TETRIS:
   355                           	opt stack 0
   356  0000                     _port_display	set	3970
   357  0000                     _TMR0	set	4054
   358  0000                     _EECON2	set	4007
   359  0000                     _EEDATA	set	4008
   360  0000                     _EECON1bits	set	4006
   361  0000                     _EEADR	set	4009
   362  0000                     _PORTD	set	3971
   363  0000                     _DDRD	set	3989
   364  0000                     _PORTC	set	3970
   365  0000                     _DDRC	set	3988
   366  0000                     _INTCON2bits	set	4081
   367  0000                     _PORTB	set	3969
   368  0000                     _DDRB	set	3987
   369  0000                     _DDRA	set	3986
   370  0000                     _ADCON1bits	set	4033
   371  0000                     _OSCCONbits	set	4051
   372  0000                     _T0CONbits	set	4053
   373  0000                     _PORTA	set	3968
   374  0000                     _PORTBbits	set	3969
   375  0000                     _INTCONbits	set	4082
   376  0000                     _GIE	set	32663
   377  0000                     _IPEN	set	32391
   378  0000                     _TMR0IE	set	32661
   379  0000                     _TMR0ON	set	32431
   380  0000                     _T0CS	set	32429
   381  0000                     _PSA	set	32427
   382                           
   383                           ; #config settings
   384  0006F1  00                 	db	0	; dummy byte at the end
   385  0000                     
   386                           	psect	cinit
   387  0019C0                     __pcinit:
   388                           	opt stack 0
   389  0019C0                     start_initialization:
   390                           	opt stack 0
   391  0019C0                     __initialization:
   392                           	opt stack 0
   393                           
   394                           ; Initialize objects allocated to BANK2 (133 bytes)
   395                           ; load TBLPTR registers with __pidataBANK2
   396  0019C0  0E3A               	movlw	low __pidataBANK2
   397  0019C2  6EF6               	movwf	tblptrl,c
   398  0019C4  0E19               	movlw	high __pidataBANK2
   399  0019C6  6EF7               	movwf	tblptrh,c
   400  0019C8  0E00               	movlw	low (__pidataBANK2 shr (0+16))
   401  0019CA  6EF8               	movwf	tblptru,c
   402  0019CC  EE02  F000         	lfsr	0,__pdataBANK2
   403  0019D0  EE10 F085          	lfsr	1,133
   404  0019D4                     copy_data0:
   405  0019D4  0009               	tblrd		*+
   406  0019D6  CFF5 FFEE          	movff	tablat,postinc0
   407  0019DA  50E5               	movf	postdec1,w,c
   408  0019DC  50E1               	movf	fsr1l,w,c
   409  0019DE  E1FA               	bnz	copy_data0
   410                           
   411                           ; Initialize objects allocated to BANK0 (16 bytes)
   412                           ; load TBLPTR registers with __pidataBANK0
   413  0019E0  0E64               	movlw	low __pidataBANK0
   414  0019E2  6EF6               	movwf	tblptrl,c
   415  0019E4  0E21               	movlw	high __pidataBANK0
   416  0019E6  6EF7               	movwf	tblptrh,c
   417  0019E8  0E00               	movlw	low (__pidataBANK0 shr (0+16))
   418  0019EA  6EF8               	movwf	tblptru,c
   419  0019EC  EE00  F0B7         	lfsr	0,__pdataBANK0
   420  0019F0  EE10 F010          	lfsr	1,16
   421  0019F4                     copy_data1:
   422  0019F4  0009               	tblrd		*+
   423  0019F6  CFF5 FFEE          	movff	tablat,postinc0
   424  0019FA  50E5               	movf	postdec1,w,c
   425  0019FC  50E1               	movf	fsr1l,w,c
   426  0019FE  E1FA               	bnz	copy_data1
   427                           
   428                           ; Initialize objects allocated to COMRAM (1 bytes)
   429                           ; load TBLPTR registers with __pidataCOMRAM
   430  001A00  0EBA               	movlw	low __pidataCOMRAM
   431  001A02  6EF6               	movwf	tblptrl,c
   432  001A04  0E21               	movlw	high __pidataCOMRAM
   433  001A06  6EF7               	movwf	tblptrh,c
   434  001A08  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   435  001A0A  6EF8               	movwf	tblptru,c
   436  001A0C  0009               	tblrd		*+	;fetch initializer
   437  001A0E  CFF5 F062          	movff	tablat,__pdataCOMRAM
   438                           
   439                           ; Clear objects allocated to BANK1 (200 bytes)
   440  001A12  EE01  F000         	lfsr	0,__pbssBANK1
   441  001A16  0EC8               	movlw	200
   442  001A18                     clear_0:
   443  001A18  6AEE               	clrf	postinc0,c
   444  001A1A  06E8               	decf	wreg,f,c
   445  001A1C  E1FD               	bnz	clear_0
   446                           
   447                           ; Clear objects allocated to BANK0 (32 bytes)
   448  001A1E  EE00  F080         	lfsr	0,__pbssBANK0
   449  001A22  0E20               	movlw	32
   450  001A24                     clear_1:
   451  001A24  6AEE               	clrf	postinc0,c
   452  001A26  06E8               	decf	wreg,f,c
   453  001A28  E1FD               	bnz	clear_1
   454                           
   455                           ; Clear objects allocated to COMRAM (52 bytes)
   456  001A2A  EE00  F001         	lfsr	0,__pbssCOMRAM
   457  001A2E  0E34               	movlw	52
   458  001A30                     clear_2:
   459  001A30  6AEE               	clrf	postinc0,c
   460  001A32  06E8               	decf	wreg,f,c
   461  001A34  E1FD               	bnz	clear_2
   462  001A36                     end_of_initialization:
   463                           	opt stack 0
   464  001A36                     __end_of__initialization:
   465                           	opt stack 0
   466  001A36  9063               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   467  001A38  9263               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   468  001A3A  0E00               	movlw	low (__Lmediumconst shr (0+16))
   469  001A3C  6EF8               	movwf	tblptru,c
   470  001A3E  0100               	movlb	0
   471  001A40  EF0F  F010         	goto	_main	;jump to C main() function
   472                           tblptru	equ	0xFF8
   473                           tblptrh	equ	0xFF7
   474                           tblptrl	equ	0xFF6
   475                           tablat	equ	0xFF5
   476                           postinc0	equ	0xFEE
   477                           wreg	equ	0xFE8
   478                           postdec1	equ	0xFE5
   479                           fsr1l	equ	0xFE1
   480                           
   481                           	psect	bssCOMRAM
   482  000001                     __pbssCOMRAM:
   483                           	opt stack 0
   484  000001                     _time:
   485                           	opt stack 0
   486  000001                     	ds	2
   487  000003                     _mS:
   488                           	opt stack 0
   489  000003                     	ds	2
   490  000005                     _InterruptComplete:
   491                           	opt stack 0
   492  000005                     	ds	1
   493  000006                     _UpdateScreen:
   494                           	opt stack 0
   495  000006                     	ds	1
   496  000007                     _tetris:
   497                           	opt stack 0
   498  000007                     	ds	1
   499  000008                     _previous_direction:
   500                           	opt stack 0
   501  000008                     	ds	1
   502  000009                     _berryY:
   503                           	opt stack 0
   504  000009                     	ds	1
   505  00000A                     _berryX:
   506                           	opt stack 0
   507  00000A                     	ds	1
   508  00000B                     _snakeLength:
   509                           	opt stack 0
   510  00000B                     	ds	1
   511  00000C                     _moveSnake:
   512                           	opt stack 0
   513  00000C                     	ds	1
   514  00000D                     _direction:
   515                           	opt stack 0
   516  00000D                     	ds	1
   517  00000E                     _OriginY:
   518                           	opt stack 0
   519  00000E                     	ds	1
   520  00000F                     _OriginX:
   521                           	opt stack 0
   522  00000F                     	ds	1
   523  000010                     _DropObject:
   524                           	opt stack 0
   525  000010                     	ds	1
   526  000011                     _CheckForNewLines:
   527                           	opt stack 0
   528  000011                     	ds	1
   529  000012                     _EndOfGame:
   530                           	opt stack 0
   531  000012                     	ds	1
   532  000013                     _IsRotated:
   533                           	opt stack 0
   534  000013                     	ds	1
   535  000014                     _LastHighScore:
   536                           	opt stack 0
   537  000014                     	ds	1
   538  000015                     _NumberOfLines:
   539                           	opt stack 0
   540  000015                     	ds	1
   541  000016                     _LimitedRotation:
   542                           	opt stack 0
   543  000016                     	ds	1
   544  000017                     _mtxButtons:
   545                           	opt stack 0
   546  000017                     	ds	1
   547  000018                     _ObjectData:
   548                           	opt stack 0
   549  000018                     	ds	16
   550  000028                     _Down_Delay:
   551                           	opt stack 0
   552  000028                     	ds	2
   553  00002A                     _Rotate_Delay:
   554                           	opt stack 0
   555  00002A                     	ds	2
   556  00002C                     _Right_Delay:
   557                           	opt stack 0
   558  00002C                     	ds	2
   559  00002E                     _Left_Delay:
   560                           	opt stack 0
   561  00002E                     	ds	2
   562  000030                     isr@CurrentX:
   563                           	opt stack 0
   564  000030                     	ds	1
   565  000031                     _Down_Debounced:
   566                           	opt stack 0
   567  000031                     	ds	1
   568  000032                     _Rotate_Debounced:
   569                           	opt stack 0
   570  000032                     	ds	1
   571  000033                     _Right_Debounced:
   572                           	opt stack 0
   573  000033                     	ds	1
   574  000034                     _Left_Debounced:
   575                           	opt stack 0
   576  000034                     	ds	1
   577                           tblptru	equ	0xFF8
   578                           tblptrh	equ	0xFF7
   579                           tblptrl	equ	0xFF6
   580                           tablat	equ	0xFF5
   581                           postinc0	equ	0xFEE
   582                           wreg	equ	0xFE8
   583                           postdec1	equ	0xFE5
   584                           fsr1l	equ	0xFE1
   585                           
   586                           	psect	dataCOMRAM
   587  000062                     __pdataCOMRAM:
   588                           	opt stack 0
   589  000062                     __lfsr:
   590                           	opt stack 0
   591  000062                     	ds	1
   592                           tblptru	equ	0xFF8
   593                           tblptrh	equ	0xFF7
   594                           tblptrl	equ	0xFF6
   595                           tablat	equ	0xFF5
   596                           postinc0	equ	0xFEE
   597                           wreg	equ	0xFE8
   598                           postdec1	equ	0xFE5
   599                           fsr1l	equ	0xFE1
   600                           
   601                           	psect	bssBANK0
   602  000080                     __pbssBANK0:
   603                           	opt stack 0
   604  000080                     _tmpObjectData:
   605                           	opt stack 0
   606  000080                     	ds	16
   607  000090                     _BackgroundData:
   608                           	opt stack 0
   609  000090                     	ds	16
   610                           tblptru	equ	0xFF8
   611                           tblptrh	equ	0xFF7
   612                           tblptrl	equ	0xFF6
   613                           tablat	equ	0xFF5
   614                           postinc0	equ	0xFEE
   615                           wreg	equ	0xFE8
   616                           postdec1	equ	0xFE5
   617                           fsr1l	equ	0xFE1
   618                           
   619                           	psect	dataBANK0
   620  0000B7                     __pdataBANK0:
   621                           	opt stack 0
   622  0000B7                     show_score@F2907:
   623                           	opt stack 0
   624  0000B7                     	ds	16
   625                           tblptru	equ	0xFF8
   626                           tblptrh	equ	0xFF7
   627                           tblptrl	equ	0xFF6
   628                           tablat	equ	0xFF5
   629                           postinc0	equ	0xFEE
   630                           wreg	equ	0xFE8
   631                           postdec1	equ	0xFE5
   632                           fsr1l	equ	0xFE1
   633                           
   634                           	psect	bssBANK1
   635  000100                     __pbssBANK1:
   636                           	opt stack 0
   637  000100                     _positions:
   638                           	opt stack 0
   639  000100                     	ds	200
   640                           tblptru	equ	0xFF8
   641                           tblptrh	equ	0xFF7
   642                           tblptrl	equ	0xFF6
   643                           tablat	equ	0xFF5
   644                           postinc0	equ	0xFEE
   645                           wreg	equ	0xFE8
   646                           postdec1	equ	0xFE5
   647                           fsr1l	equ	0xFE1
   648                           
   649                           	psect	dataBANK2
   650  000200                     __pdataBANK2:
   651                           	opt stack 0
   652  000200                     _shapes:
   653                           	opt stack 0
   654  000200                     	ds	133
   655                           tblptru	equ	0xFF8
   656                           tblptrh	equ	0xFF7
   657                           tblptrl	equ	0xFF6
   658                           tablat	equ	0xFF5
   659                           postinc0	equ	0xFEE
   660                           wreg	equ	0xFE8
   661                           postdec1	equ	0xFE5
   662                           fsr1l	equ	0xFE1
   663                           
   664                           	psect	cstackBANK0
   665  0000A0                     __pcstackBANK0:
   666                           	opt stack 0
   667  0000A0                     show_score@mask:
   668                           	opt stack 0
   669                           
   670                           ; 16 bytes @ 0x0
   671  0000A0                     	ds	16
   672  0000B0                     show_score@score:
   673                           	opt stack 0
   674                           
   675                           ; 1 bytes @ 0x10
   676  0000B0                     	ds	1
   677  0000B1                     show_score@currentNumber:
   678                           	opt stack 0
   679                           
   680                           ; 1 bytes @ 0x11
   681  0000B1                     	ds	1
   682  0000B2                     show_score@number:
   683                           	opt stack 0
   684                           
   685                           ; 4 bytes @ 0x12
   686  0000B2                     	ds	4
   687  0000B6                     show_score@i:
   688                           	opt stack 0
   689                           
   690                           ; 1 bytes @ 0x16
   691  0000B6                     	ds	1
   692                           tblptru	equ	0xFF8
   693                           tblptrh	equ	0xFF7
   694                           tblptrl	equ	0xFF6
   695                           tablat	equ	0xFF5
   696                           postinc0	equ	0xFEE
   697                           wreg	equ	0xFE8
   698                           postdec1	equ	0xFE5
   699                           fsr1l	equ	0xFE1
   700                           
   701                           	psect	cstackCOMRAM
   702  000035                     __pcstackCOMRAM:
   703                           	opt stack 0
   704  000035                     ?___lwmod:
   705                           	opt stack 0
   706  000035                     debounceButton@delay:
   707                           	opt stack 0
   708  000035                     ___lwmod@dividend:
   709                           	opt stack 0
   710                           
   711                           ; 2 bytes @ 0x0
   712  000035                     	ds	2
   713  000037                     debounceButton@debounced:
   714                           	opt stack 0
   715  000037                     ___lwmod@divisor:
   716                           	opt stack 0
   717                           
   718                           ; 2 bytes @ 0x2
   719  000037                     	ds	2
   720  000039                     ___lwmod@counter:
   721                           	opt stack 0
   722                           
   723                           ; 1 bytes @ 0x4
   724  000039                     	ds	2
   725  00003B                     debounceButton@button:
   726                           	opt stack 0
   727                           
   728                           ; 1 bytes @ 0x6
   729  00003B                     	ds	1
   730  00003C                     ??_isr:
   731                           
   732                           ; 1 bytes @ 0x7
   733  00003C                     	ds	8
   734  000044                     isr@ymask:
   735                           	opt stack 0
   736                           
   737                           ; 2 bytes @ 0xF
   738  000044                     	ds	2
   739  000046                     isr@xmask:
   740                           	opt stack 0
   741                           
   742                           ; 1 bytes @ 0x11
   743  000046                     	ds	1
   744  000047                     ??_rnd_get_num:
   745  000047                     ?___awdiv:
   746                           	opt stack 0
   747  000047                     ?___awmod:
   748                           	opt stack 0
   749  000047                     ReadEEByte@address:
   750                           	opt stack 0
   751  000047                     WriteEEByte@data:
   752                           	opt stack 0
   753  000047                     rnd_initialize@seed:
   754                           	opt stack 0
   755  000047                     ___lbmod@divisor:
   756                           	opt stack 0
   757  000047                     swap@a:
   758                           	opt stack 0
   759  000047                     waitms@t:
   760                           	opt stack 0
   761  000047                     clearArray@pArray:
   762                           	opt stack 0
   763  000047                     mergeObjects@pSource:
   764                           	opt stack 0
   765  000047                     moveObject@pObject:
   766                           	opt stack 0
   767  000047                     checkForBottom@pObject:
   768                           	opt stack 0
   769  000047                     checkForLeftWall@pObject:
   770                           	opt stack 0
   771  000047                     checkForRightWall@pObject:
   772                           	opt stack 0
   773  000047                     collisionDetect@pSource:
   774                           	opt stack 0
   775  000047                     pixelCount@pSource:
   776                           	opt stack 0
   777  000047                     removeLine@pObject:
   778                           	opt stack 0
   779  000047                     memcpy@dest:
   780                           	opt stack 0
   781  000047                     ___awdiv@dividend:
   782                           	opt stack 0
   783  000047                     ___awmod@dividend:
   784                           	opt stack 0
   785                           
   786                           ; 2 bytes @ 0x12
   787  000047                     	ds	1
   788  000048                     WriteEEByte@address:
   789                           	opt stack 0
   790  000048                     ___lbmod@dividend:
   791                           	opt stack 0
   792                           
   793                           ; 1 bytes @ 0x13
   794  000048                     	ds	1
   795  000049                     ??_checkForBottom:
   796  000049                     ??_pixelCount:
   797  000049                     moveObject@direction:
   798                           	opt stack 0
   799  000049                     removeLine@pY:
   800                           	opt stack 0
   801  000049                     readHighScore@adress:
   802                           	opt stack 0
   803  000049                     writeHighScore@adress:
   804                           	opt stack 0
   805  000049                     ___lbmod@counter:
   806                           	opt stack 0
   807  000049                     swap@b:
   808                           	opt stack 0
   809  000049                     clearArray@size:
   810                           	opt stack 0
   811  000049                     mergeObjects@pTarget:
   812                           	opt stack 0
   813  000049                     collisionDetect@pTarget:
   814                           	opt stack 0
   815  000049                     memcpy@src:
   816                           	opt stack 0
   817  000049                     ___awdiv@divisor:
   818                           	opt stack 0
   819  000049                     ___awmod@divisor:
   820                           	opt stack 0
   821                           
   822                           ; 2 bytes @ 0x14
   823  000049                     	ds	1
   824  00004A                     ??_removeLine:
   825  00004A                     moveObject@cycles:
   826                           	opt stack 0
   827  00004A                     readHighScore@tmpbyte:
   828                           	opt stack 0
   829  00004A                     ___lbmod@rem:
   830                           	opt stack 0
   831  00004A                     rnd_get_num@b:
   832                           	opt stack 0
   833                           
   834                           ; 2 bytes @ 0x15
   835  00004A                     	ds	1
   836  00004B                     ??_clearArray:
   837  00004B                     ??_moveObject:
   838  00004B                     ??_collisionDetect:
   839  00004B                     swap@t:
   840                           	opt stack 0
   841  00004B                     mergeObjects@mode:
   842                           	opt stack 0
   843  00004B                     checkForBottom@i:
   844                           	opt stack 0
   845  00004B                     ___awdiv@counter:
   846                           	opt stack 0
   847  00004B                     ___awmod@counter:
   848                           	opt stack 0
   849  00004B                     memcpy@n:
   850                           	opt stack 0
   851                           
   852                           ; 2 bytes @ 0x16
   853  00004B                     	ds	1
   854  00004C                     ??_mergeObjects:
   855  00004C                     genBerry@size:
   856                           	opt stack 0
   857  00004C                     ___awdiv@sign:
   858                           	opt stack 0
   859  00004C                     ___awmod@sign:
   860                           	opt stack 0
   861  00004C                     reverse@str:
   862                           	opt stack 0
   863                           
   864                           ; 2 bytes @ 0x17
   865  00004C                     	ds	1
   866  00004D                     ?___wmul:
   867                           	opt stack 0
   868  00004D                     clearArray@i:
   869                           	opt stack 0
   870  00004D                     genBerry@temp:
   871                           	opt stack 0
   872  00004D                     memcpy@d:
   873                           	opt stack 0
   874  00004D                     ___wmul@multiplier:
   875                           	opt stack 0
   876  00004D                     ___awdiv@quotient:
   877                           	opt stack 0
   878                           
   879                           ; 2 bytes @ 0x18
   880  00004D                     	ds	1
   881  00004E                     ??_SnakeGraph:
   882  00004E                     mergeObjects@i:
   883                           	opt stack 0
   884  00004E                     pixelCount@r:
   885                           	opt stack 0
   886  00004E                     reverse@length:
   887                           	opt stack 0
   888                           
   889                           ; 2 bytes @ 0x19
   890  00004E                     	ds	1
   891  00004F                     CreateBerry@randomGood:
   892                           	opt stack 0
   893  00004F                     moveObject@c:
   894                           	opt stack 0
   895  00004F                     collisionDetect@i:
   896                           	opt stack 0
   897  00004F                     pixelCount@x:
   898                           	opt stack 0
   899  00004F                     memcpy@s:
   900                           	opt stack 0
   901  00004F                     ___wmul@multiplicand:
   902                           	opt stack 0
   903  00004F                     choosescreen@mask:
   904                           	opt stack 0
   905                           
   906                           ; 16 bytes @ 0x1A
   907  00004F                     	ds	1
   908  000050                     ??_reverse:
   909  000050                     CreateBerry@i:
   910                           	opt stack 0
   911  000050                     moveObject@i:
   912                           	opt stack 0
   913  000050                     pixelCount@y:
   914                           	opt stack 0
   915                           
   916                           ; 1 bytes @ 0x1B
   917  000050                     	ds	1
   918  000051                     initialise_globals@i:
   919                           	opt stack 0
   920  000051                     reverse@start:
   921                           	opt stack 0
   922  000051                     getNumber@pTarget:
   923                           	opt stack 0
   924  000051                     ___wmul@product:
   925                           	opt stack 0
   926                           
   927                           ; 2 bytes @ 0x1C
   928  000051                     	ds	2
   929  000053                     SnakeGraph@j:
   930                           	opt stack 0
   931  000053                     getNumber@pDigit:
   932                           	opt stack 0
   933  000053                     reverse@end:
   934                           	opt stack 0
   935  000053                     selectNextObject@pTarget:
   936                           	opt stack 0
   937  000053                     newRotation@pSource:
   938                           	opt stack 0
   939                           
   940                           ; 2 bytes @ 0x1E
   941  000053                     	ds	1
   942  000054                     SnakeGraph@i:
   943                           	opt stack 0
   944                           
   945                           ; 1 bytes @ 0x1F
   946  000054                     	ds	1
   947  000055                     ??_MoveSnakes:
   948  000055                     selectNextObject@rndSelection:
   949                           	opt stack 0
   950  000055                     removeLine@currentLine:
   951                           	opt stack 0
   952  000055                     itoa@value:
   953                           	opt stack 0
   954  000055                     newRotation@pTarget:
   955                           	opt stack 0
   956                           
   957                           ; 2 bytes @ 0x20
   958  000055                     	ds	1
   959  000056                     selectNextObject@counter:
   960                           	opt stack 0
   961  000056                     removeLine@y:
   962                           	opt stack 0
   963                           
   964                           ; 1 bytes @ 0x21
   965  000056                     	ds	1
   966  000057                     selectNextObject@selection:
   967                           	opt stack 0
   968  000057                     newRotation@rotation:
   969                           	opt stack 0
   970  000057                     removeLine@x:
   971                           	opt stack 0
   972  000057                     itoa@str:
   973                           	opt stack 0
   974                           
   975                           ; 2 bytes @ 0x22
   976  000057                     	ds	1
   977  000058                     ??_newRotation:
   978  000058                     selectNextObject@s:
   979                           	opt stack 0
   980  000058                     checkForLines@pObject:
   981                           	opt stack 0
   982                           
   983                           ; 2 bytes @ 0x23
   984  000058                     	ds	1
   985  000059                     itoa@bas:
   986                           	opt stack 0
   987                           
   988                           ; 2 bytes @ 0x24
   989  000059                     	ds	1
   990  00005A                     ??_checkForLines:
   991  00005A                     moveObjectDown@pObject:
   992                           	opt stack 0
   993                           
   994                           ; 2 bytes @ 0x25
   995  00005A                     	ds	1
   996  00005B                     _itoa$422:
   997                           	opt stack 0
   998                           
   999                           ; 2 bytes @ 0x26
  1000  00005B                     	ds	1
  1001  00005C                     moveObjectDown@result:
  1002                           	opt stack 0
  1003                           
  1004                           ; 1 bytes @ 0x27
  1005  00005C                     	ds	1
  1006  00005D                     itoa@isNegative:
  1007                           	opt stack 0
  1008  00005D                     MoveSnakes@i:
  1009                           	opt stack 0
  1010  00005D                     newRotation@x2:
  1011                           	opt stack 0
  1012                           
  1013                           ; 1 bytes @ 0x28
  1014  00005D                     	ds	1
  1015  00005E                     newRotation@y2:
  1016                           	opt stack 0
  1017  00005E                     itoa@rem:
  1018                           	opt stack 0
  1019                           
  1020                           ; 2 bytes @ 0x29
  1021  00005E                     	ds	1
  1022  00005F                     newRotation@x1:
  1023                           	opt stack 0
  1024  00005F                     checkForLines@pixels:
  1025                           	opt stack 0
  1026  00005F                     choosescreen@i:
  1027                           	opt stack 0
  1028                           
  1029                           ; 1 bytes @ 0x2A
  1030  00005F                     	ds	1
  1031  000060                     newRotation@y1:
  1032                           	opt stack 0
  1033  000060                     checkForLines@x:
  1034                           	opt stack 0
  1035  000060                     itoa@i:
  1036                           	opt stack 0
  1037                           
  1038                           ; 2 bytes @ 0x2B
  1039  000060                     	ds	1
  1040  000061                     ??_checkButtons:
  1041  000061                     checkForLines@y:
  1042                           	opt stack 0
  1043                           
  1044                           ; 1 bytes @ 0x2C
  1045  000061                     	ds	1
  1046  000062                     tblptru	equ	0xFF8
  1047                           tblptrh	equ	0xFF7
  1048                           tblptrl	equ	0xFF6
  1049                           tablat	equ	0xFF5
  1050                           postinc0	equ	0xFEE
  1051                           wreg	equ	0xFE8
  1052                           postdec1	equ	0xFE5
  1053                           fsr1l	equ	0xFE1
  1054                           
  1055                           ; 1 bytes @ 0x2D
  1056 ;;
  1057 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  1058 ;;
  1059 ;; *************** function _main *****************
  1060 ;; Defined at:
  1061 ;;		line 1430 in file "pictris.c"
  1062 ;; Parameters:    Size  Location     Type
  1063 ;;		None
  1064 ;; Auto vars:     Size  Location     Type
  1065 ;;		None
  1066 ;; Return value:  Size  Location     Type
  1067 ;;                  1    wreg      void 
  1068 ;; Registers used:
  1069 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1070 ;; Tracked objects:
  1071 ;;		On entry : 0/0
  1072 ;;		On exit  : 0/0
  1073 ;;		Unchanged: 0/0
  1074 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1075 ;;      Params:         0       0       0       0       0       0       0
  1076 ;;      Locals:         0       0       0       0       0       0       0
  1077 ;;      Temps:          0       0       0       0       0       0       0
  1078 ;;      Totals:         0       0       0       0       0       0       0
  1079 ;;Total ram usage:        0 bytes
  1080 ;; Hardware stack levels required when called:    7
  1081 ;; This function calls:
  1082 ;;		_choosescreen
  1083 ;;		_initialise_globals
  1084 ;;		_initialise_hardware
  1085 ;;		_mainGameLoop
  1086 ;;		_readHighScore
  1087 ;;		_rnd_initialize
  1088 ;;		_show_score
  1089 ;;		_splash_screen
  1090 ;; This function is called by:
  1091 ;;		Startup code after reset
  1092 ;; This function uses a non-reentrant model
  1093 ;;
  1094                           
  1095                           	psect	text0
  1096  00201E                     __ptext0:
  1097                           	opt stack 0
  1098  00201E                     _main:
  1099                           	opt stack 24
  1100                           
  1101                           ;pictris.c: 1434:     rnd_initialize(0x77);
  1102                           
  1103                           ;incstack = 0
  1104  00201E  0E77               	movlw	119
  1105  002020  ECD0  F010         	call	_rnd_initialize
  1106                           
  1107                           ;pictris.c: 1440:     initialise_hardware();
  1108  002024  EC4C  F00F         	call	_initialise_hardware	;wreg free
  1109                           
  1110                           ;pictris.c: 1441:     initialise_globals();
  1111  002028  EC81  F00B         	call	_initialise_globals	;wreg free
  1112                           
  1113                           ;pictris.c: 1445:     UpdateScreen = 1;
  1114  00202C  0E01               	movlw	1
  1115  00202E  6E06               	movwf	_UpdateScreen,c	;volatile
  1116                           
  1117                           ;pictris.c: 1449:     choosescreen();
  1118  002030  EC70  F008         	call	_choosescreen	;wreg free
  1119                           
  1120                           ;pictris.c: 1451:     splash_screen();
  1121  002034  ECAA  F00E         	call	_splash_screen	;wreg free
  1122                           
  1123                           ;pictris.c: 1454:     readHighScore(10);
  1124  002038  0E0A               	movlw	10
  1125  00203A  EC8E  F00F         	call	_readHighScore
  1126                           
  1127                           ;pictris.c: 1455:     show_score(LastHighScore);
  1128  00203E  5014               	movf	_LastHighScore,w,c
  1129  002040  ECC9  F007         	call	_show_score
  1130  002044                     
  1131                           ;pictris.c: 1459:         mainGameLoop();
  1132  002044  ECE9  F00B         	call	_mainGameLoop	;wreg free
  1133  002048  D7FD               	goto	l497
  1134  00204A                     __end_of_main:
  1135                           	opt stack 0
  1136                           tblptru	equ	0xFF8
  1137                           tblptrh	equ	0xFF7
  1138                           tblptrl	equ	0xFF6
  1139                           tablat	equ	0xFF5
  1140                           postinc0	equ	0xFEE
  1141                           wreg	equ	0xFE8
  1142                           postdec1	equ	0xFE5
  1143                           fsr1l	equ	0xFE1
  1144                           
  1145 ;; *************** function _splash_screen *****************
  1146 ;; Defined at:
  1147 ;;		line 1177 in file "pictris.c"
  1148 ;; Parameters:    Size  Location     Type
  1149 ;;		None
  1150 ;; Auto vars:     Size  Location     Type
  1151 ;;		None
  1152 ;; Return value:  Size  Location     Type
  1153 ;;                  1    wreg      void 
  1154 ;; Registers used:
  1155 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  1156 ;; Tracked objects:
  1157 ;;		On entry : 0/0
  1158 ;;		On exit  : 0/0
  1159 ;;		Unchanged: 0/0
  1160 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1161 ;;      Params:         0       0       0       0       0       0       0
  1162 ;;      Locals:         0       0       0       0       0       0       0
  1163 ;;      Temps:          0       0       0       0       0       0       0
  1164 ;;      Totals:         0       0       0       0       0       0       0
  1165 ;;Total ram usage:        0 bytes
  1166 ;; Hardware stack levels used:    1
  1167 ;; Hardware stack levels required when called:    4
  1168 ;; This function calls:
  1169 ;;		_memcpy
  1170 ;;		_pauseMultiplexing
  1171 ;;		_resumeMultiplexing
  1172 ;;		_waitms
  1173 ;; This function is called by:
  1174 ;;		_main
  1175 ;; This function uses a non-reentrant model
  1176 ;;
  1177                           
  1178                           	psect	text1
  1179  001D54                     __ptext1:
  1180                           	opt stack 0
  1181  001D54                     _splash_screen:
  1182                           	opt stack 26
  1183                           
  1184                           ;pictris.c: 1181:     pauseMultiplexing();
  1185                           
  1186                           ;incstack = 0
  1187  001D54  ECC2  F010         	call	_pauseMultiplexing	;wreg free
  1188                           
  1189                           ;pictris.c: 1183:     if (tetris == 1){ memcpy(ObjectData, TETRIS, 16); }
  1190  001D58  0407               	decf	_tetris,w,c
  1191  001D5A  A4D8               	btfss	status,2,c
  1192  001D5C  D00F               	goto	l410
  1193  001D5E  0E18               	movlw	low _ObjectData
  1194  001D60  6E47               	movwf	memcpy@dest,c
  1195  001D62  0E00               	movlw	high _ObjectData
  1196  001D64  6E48               	movwf	memcpy@dest+1,c
  1197  001D66  0EE1               	movlw	low _TETRIS
  1198  001D68  6E49               	movwf	memcpy@src,c
  1199  001D6A  0E06               	movlw	high _TETRIS
  1200  001D6C  6E4A               	movwf	memcpy@src+1,c
  1201  001D6E  0E00               	movlw	0
  1202  001D70  6E4C               	movwf	memcpy@n+1,c
  1203  001D72  0E10               	movlw	16
  1204  001D74  6E4B               	movwf	memcpy@n,c
  1205  001D76  ECD5  F00E         	call	_memcpy	;wreg free
  1206  001D7A  D00E               	goto	l411
  1207  001D7C                     l410:
  1208  001D7C  0E18               	movlw	low _ObjectData
  1209  001D7E  6E47               	movwf	memcpy@dest,c
  1210  001D80  0E00               	movlw	high _ObjectData
  1211  001D82  6E48               	movwf	memcpy@dest+1,c
  1212  001D84  0ED1               	movlw	low _SNAKE
  1213  001D86  6E49               	movwf	memcpy@src,c
  1214  001D88  0E06               	movlw	high _SNAKE
  1215  001D8A  6E4A               	movwf	memcpy@src+1,c
  1216  001D8C  0E00               	movlw	0
  1217  001D8E  6E4C               	movwf	memcpy@n+1,c
  1218  001D90  0E10               	movlw	16
  1219  001D92  6E4B               	movwf	memcpy@n,c
  1220  001D94  ECD5  F00E         	call	_memcpy	;wreg free
  1221  001D98                     l411:
  1222                           
  1223                           ;pictris.c: 1186:     resumeMultiplexing();
  1224  001D98  ECD4  F010         	call	_resumeMultiplexing	;wreg free
  1225                           
  1226                           ;pictris.c: 1188:     waitms(3500);
  1227  001D9C  0E0D               	movlw	13
  1228  001D9E  6E48               	movwf	waitms@t+1,c
  1229  001DA0  0EAC               	movlw	172
  1230  001DA2  6E47               	movwf	waitms@t,c
  1231  001DA4  ECA9  F010         	call	_waitms	;wreg free
  1232  001DA8  0012               	return		;funcret
  1233  001DAA                     __end_of_splash_screen:
  1234                           	opt stack 0
  1235                           tblptru	equ	0xFF8
  1236                           tblptrh	equ	0xFF7
  1237                           tblptrl	equ	0xFF6
  1238                           tablat	equ	0xFF5
  1239                           postinc0	equ	0xFEE
  1240                           wreg	equ	0xFE8
  1241                           postdec1	equ	0xFE5
  1242                           fsr1l	equ	0xFE1
  1243                           status	equ	0xFD8
  1244                           
  1245 ;; *************** function _waitms *****************
  1246 ;; Defined at:
  1247 ;;		line 411 in file "pictris.c"
  1248 ;; Parameters:    Size  Location     Type
  1249 ;;  t               2   18[COMRAM] unsigned int 
  1250 ;; Auto vars:     Size  Location     Type
  1251 ;;		None
  1252 ;; Return value:  Size  Location     Type
  1253 ;;                  1    wreg      void 
  1254 ;; Registers used:
  1255 ;;		wreg, status,2, status,0
  1256 ;; Tracked objects:
  1257 ;;		On entry : 0/0
  1258 ;;		On exit  : 0/0
  1259 ;;		Unchanged: 0/0
  1260 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1261 ;;      Params:         2       0       0       0       0       0       0
  1262 ;;      Locals:         0       0       0       0       0       0       0
  1263 ;;      Temps:          0       0       0       0       0       0       0
  1264 ;;      Totals:         2       0       0       0       0       0       0
  1265 ;;Total ram usage:        2 bytes
  1266 ;; Hardware stack levels used:    1
  1267 ;; Hardware stack levels required when called:    2
  1268 ;; This function calls:
  1269 ;;		Nothing
  1270 ;; This function is called by:
  1271 ;;		_splash_screen
  1272 ;; This function uses a non-reentrant model
  1273 ;;
  1274                           
  1275                           	psect	text2
  1276  002152                     __ptext2:
  1277                           	opt stack 0
  1278  002152                     _waitms:
  1279                           	opt stack 27
  1280                           
  1281                           ;pictris.c: 411: void waitms(unsigned t);pictris.c: 412: {;pictris.c: 413:     time = t;
  1282                           
  1283                           ;incstack = 0
  1284  002152  C047  F001         	movff	waitms@t,_time	;volatile
  1285  002156  C048  F002         	movff	waitms@t+1,_time+1	;volatile
  1286  00215A                     
  1287                           ;pictris.c: 414:     while(time)
  1288                           
  1289                           ;pictris.c: 415:         continue;
  1290  00215A  5001               	movf	_time,w,c	;volatile
  1291  00215C  1002               	iorwf	_time+1,w,c	;volatile
  1292  00215E  B4D8               	btfsc	status,2,c
  1293  002160  0012               	return	
  1294  002162  D7FB               	goto	l172
  1295  002164                     __end_of_waitms:
  1296                           	opt stack 0
  1297                           tblptru	equ	0xFF8
  1298                           tblptrh	equ	0xFF7
  1299                           tblptrl	equ	0xFF6
  1300                           tablat	equ	0xFF5
  1301                           postinc0	equ	0xFEE
  1302                           wreg	equ	0xFE8
  1303                           postdec1	equ	0xFE5
  1304                           fsr1l	equ	0xFE1
  1305                           status	equ	0xFD8
  1306                           
  1307 ;; *************** function _rnd_initialize *****************
  1308 ;; Defined at:
  1309 ;;		line 24 in file "randgen.c"
  1310 ;; Parameters:    Size  Location     Type
  1311 ;;  seed            1    wreg     unsigned char 
  1312 ;; Auto vars:     Size  Location     Type
  1313 ;;  seed            1   18[COMRAM] unsigned char 
  1314 ;; Return value:  Size  Location     Type
  1315 ;;                  1    wreg      void 
  1316 ;; Registers used:
  1317 ;;		wreg
  1318 ;; Tracked objects:
  1319 ;;		On entry : 0/0
  1320 ;;		On exit  : 0/0
  1321 ;;		Unchanged: 0/0
  1322 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1323 ;;      Params:         0       0       0       0       0       0       0
  1324 ;;      Locals:         1       0       0       0       0       0       0
  1325 ;;      Temps:          0       0       0       0       0       0       0
  1326 ;;      Totals:         1       0       0       0       0       0       0
  1327 ;;Total ram usage:        1 bytes
  1328 ;; Hardware stack levels used:    1
  1329 ;; Hardware stack levels required when called:    2
  1330 ;; This function calls:
  1331 ;;		Nothing
  1332 ;; This function is called by:
  1333 ;;		_main
  1334 ;; This function uses a non-reentrant model
  1335 ;;
  1336                           
  1337                           	psect	text3
  1338  0021A0                     __ptext3:
  1339                           	opt stack 0
  1340  0021A0                     _rnd_initialize:
  1341                           	opt stack 28
  1342                           
  1343                           ;incstack = 0
  1344                           ;rnd_initialize@seed stored from wreg
  1345  0021A0  6E47               	movwf	rnd_initialize@seed,c
  1346                           
  1347                           ;randgen.c: 24: void rnd_initialize(uint8_t seed);randgen.c: 25: {;randgen.c: 26:     _l
      +                          fsr = seed;
  1348  0021A2  C047  F062         	movff	rnd_initialize@seed,__lfsr
  1349  0021A6  0012               	return		;funcret
  1350  0021A8                     __end_of_rnd_initialize:
  1351                           	opt stack 0
  1352                           tblptru	equ	0xFF8
  1353                           tblptrh	equ	0xFF7
  1354                           tblptrl	equ	0xFF6
  1355                           tablat	equ	0xFF5
  1356                           postinc0	equ	0xFEE
  1357                           wreg	equ	0xFE8
  1358                           postdec1	equ	0xFE5
  1359                           fsr1l	equ	0xFE1
  1360                           status	equ	0xFD8
  1361                           
  1362 ;; *************** function _readHighScore *****************
  1363 ;; Defined at:
  1364 ;;		line 1329 in file "pictris.c"
  1365 ;; Parameters:    Size  Location     Type
  1366 ;;  adress          1    wreg     unsigned char 
  1367 ;; Auto vars:     Size  Location     Type
  1368 ;;  adress          1   20[COMRAM] unsigned char 
  1369 ;;  tmpbyte         1   21[COMRAM] unsigned char 
  1370 ;; Return value:  Size  Location     Type
  1371 ;;                  1    wreg      void 
  1372 ;; Registers used:
  1373 ;;		wreg, status,2, status,0, cstack
  1374 ;; Tracked objects:
  1375 ;;		On entry : 0/0
  1376 ;;		On exit  : 0/0
  1377 ;;		Unchanged: 0/0
  1378 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1379 ;;      Params:         0       0       0       0       0       0       0
  1380 ;;      Locals:         2       0       0       0       0       0       0
  1381 ;;      Temps:          0       0       0       0       0       0       0
  1382 ;;      Totals:         2       0       0       0       0       0       0
  1383 ;;Total ram usage:        2 bytes
  1384 ;; Hardware stack levels used:    1
  1385 ;; Hardware stack levels required when called:    3
  1386 ;; This function calls:
  1387 ;;		_ReadEEByte
  1388 ;;		_WriteEEByte
  1389 ;; This function is called by:
  1390 ;;		_main
  1391 ;; This function uses a non-reentrant model
  1392 ;;
  1393                           
  1394                           	psect	text4
  1395  001F1C                     __ptext4:
  1396                           	opt stack 0
  1397  001F1C                     _readHighScore:
  1398                           	opt stack 27
  1399                           
  1400                           ;incstack = 0
  1401                           ;readHighScore@adress stored from wreg
  1402  001F1C  6E49               	movwf	readHighScore@adress,c
  1403                           
  1404                           ;pictris.c: 1329: void readHighScore(uint8_t adress);pictris.c: 1330: {;pictris.c: 1332:
      +                               uint8_t tmpbyte;;pictris.c: 1333:     if (tetris == 0)
  1405  001F1E  5007               	movf	_tetris,w,c
  1406  001F20  A4D8               	btfss	status,2,c
  1407  001F22  D003               	goto	l469
  1408                           
  1409                           ;pictris.c: 1334:     { adress = adress + 10;};
  1410  001F24  5049               	movf	readHighScore@adress,w,c
  1411  001F26  0F0A               	addlw	10
  1412  001F28  6E49               	movwf	readHighScore@adress,c
  1413  001F2A                     l469:
  1414                           
  1415                           ;pictris.c: 1336:     tmpbyte = ReadEEByte(adress);
  1416  001F2A  5049               	movf	readHighScore@adress,w,c
  1417  001F2C  ECBA  F010         	call	_ReadEEByte
  1418  001F30  6E4A               	movwf	readHighScore@tmpbyte,c
  1419                           
  1420                           ;pictris.c: 1337:     if (tmpbyte == 0){
  1421  001F32  504A               	movf	readHighScore@tmpbyte,w,c
  1422  001F34  A4D8               	btfss	status,2,c
  1423  001F36  D005               	goto	l470
  1424                           
  1425                           ;pictris.c: 1338:        WriteEEByte(adress,0);
  1426  001F38  0E00               	movlw	0
  1427  001F3A  6E47               	movwf	WriteEEByte@data,c
  1428  001F3C  5049               	movf	readHighScore@adress,w,c
  1429  001F3E  EC4E  F010         	call	_WriteEEByte
  1430  001F42                     l470:
  1431                           
  1432                           ;pictris.c: 1340:     if (tmpbyte == 255) {
  1433  001F42  284A               	incf	readHighScore@tmpbyte,w,c
  1434  001F44  A4D8               	btfss	status,2,c
  1435  001F46  D002               	goto	l471
  1436                           
  1437                           ;pictris.c: 1341:         tmpbyte = 0;
  1438  001F48  0E00               	movlw	0
  1439  001F4A  6E4A               	movwf	readHighScore@tmpbyte,c
  1440  001F4C                     l471:
  1441                           
  1442                           ;pictris.c: 1343:     LastHighScore = tmpbyte;
  1443  001F4C  C04A  F014         	movff	readHighScore@tmpbyte,_LastHighScore
  1444  001F50  0012               	return		;funcret
  1445  001F52                     __end_of_readHighScore:
  1446                           	opt stack 0
  1447                           tblptru	equ	0xFF8
  1448                           tblptrh	equ	0xFF7
  1449                           tblptrl	equ	0xFF6
  1450                           tablat	equ	0xFF5
  1451                           postinc0	equ	0xFEE
  1452                           wreg	equ	0xFE8
  1453                           postdec1	equ	0xFE5
  1454                           fsr1l	equ	0xFE1
  1455                           status	equ	0xFD8
  1456                           
  1457 ;; *************** function _ReadEEByte *****************
  1458 ;; Defined at:
  1459 ;;		line 1298 in file "pictris.c"
  1460 ;; Parameters:    Size  Location     Type
  1461 ;;  address         1    wreg     unsigned char 
  1462 ;; Auto vars:     Size  Location     Type
  1463 ;;  address         1   18[COMRAM] unsigned char 
  1464 ;; Return value:  Size  Location     Type
  1465 ;;                  1    wreg      unsigned char 
  1466 ;; Registers used:
  1467 ;;		wreg, status,2
  1468 ;; Tracked objects:
  1469 ;;		On entry : 0/0
  1470 ;;		On exit  : 0/0
  1471 ;;		Unchanged: 0/0
  1472 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1473 ;;      Params:         0       0       0       0       0       0       0
  1474 ;;      Locals:         1       0       0       0       0       0       0
  1475 ;;      Temps:          0       0       0       0       0       0       0
  1476 ;;      Totals:         1       0       0       0       0       0       0
  1477 ;;Total ram usage:        1 bytes
  1478 ;; Hardware stack levels used:    1
  1479 ;; Hardware stack levels required when called:    2
  1480 ;; This function calls:
  1481 ;;		Nothing
  1482 ;; This function is called by:
  1483 ;;		_readHighScore
  1484 ;; This function uses a non-reentrant model
  1485 ;;
  1486                           
  1487                           	psect	text5
  1488  002174                     __ptext5:
  1489                           	opt stack 0
  1490  002174                     _ReadEEByte:
  1491                           	opt stack 27
  1492                           
  1493                           ;incstack = 0
  1494                           ;ReadEEByte@address stored from wreg
  1495  002174  6E47               	movwf	ReadEEByte@address,c
  1496                           
  1497                           ;pictris.c: 1298: uint8_t ReadEEByte(uint8_t address);pictris.c: 1299: {;pictris.c: 1300
      +                          : EEADR=address;
  1498  002176  C047  FFA9         	movff	ReadEEByte@address,4009	;volatile
  1499                           
  1500                           ;pictris.c: 1301: EECON1bits.EEPGD=0;
  1501  00217A  9EA6               	bcf	4006,7,c	;volsfr
  1502                           
  1503                           ;pictris.c: 1302: EECON1bits.CFGS=0;
  1504  00217C  9CA6               	bcf	4006,6,c	;volsfr
  1505                           
  1506                           ;pictris.c: 1303: EECON1bits.RD=1;
  1507  00217E  80A6               	bsf	4006,0,c	;volsfr
  1508                           
  1509                           ;pictris.c: 1304: return EEDATA;
  1510  002180  50A8               	movf	4008,w,c	;volatile
  1511  002182  0012               	return	
  1512  002184                     __end_of_ReadEEByte:
  1513                           	opt stack 0
  1514                           tblptru	equ	0xFF8
  1515                           tblptrh	equ	0xFF7
  1516                           tblptrl	equ	0xFF6
  1517                           tablat	equ	0xFF5
  1518                           postinc0	equ	0xFEE
  1519                           wreg	equ	0xFE8
  1520                           postdec1	equ	0xFE5
  1521                           fsr1l	equ	0xFE1
  1522                           status	equ	0xFD8
  1523                           
  1524 ;; *************** function _mainGameLoop *****************
  1525 ;; Defined at:
  1526 ;;		line 1366 in file "pictris.c"
  1527 ;; Parameters:    Size  Location     Type
  1528 ;;		None
  1529 ;; Auto vars:     Size  Location     Type
  1530 ;;		None
  1531 ;; Return value:  Size  Location     Type
  1532 ;;                  1    wreg      void 
  1533 ;; Registers used:
  1534 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1535 ;; Tracked objects:
  1536 ;;		On entry : 0/0
  1537 ;;		On exit  : 0/0
  1538 ;;		Unchanged: 0/0
  1539 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1540 ;;      Params:         0       0       0       0       0       0       0
  1541 ;;      Locals:         0       0       0       0       0       0       0
  1542 ;;      Temps:          0       0       0       0       0       0       0
  1543 ;;      Totals:         0       0       0       0       0       0       0
  1544 ;;Total ram usage:        0 bytes
  1545 ;; Hardware stack levels used:    1
  1546 ;; Hardware stack levels required when called:    6
  1547 ;; This function calls:
  1548 ;;		_MoveSnakes
  1549 ;;		_checkButtons
  1550 ;;		_checkForLines
  1551 ;;		_clearArray
  1552 ;;		_initialise_globals
  1553 ;;		_moveObjectDown
  1554 ;;		_pauseMultiplexing
  1555 ;;		_resumeMultiplexing
  1556 ;;		_selectNextObject
  1557 ;;		_show_score
  1558 ;;		_writeHighScore
  1559 ;; This function is called by:
  1560 ;;		_main
  1561 ;; This function uses a non-reentrant model
  1562 ;;
  1563                           
  1564                           	psect	text6
  1565  0017D2                     __ptext6:
  1566                           	opt stack 0
  1567  0017D2                     _mainGameLoop:
  1568                           	opt stack 24
  1569                           
  1570                           ;pictris.c: 1370:     pauseMultiplexing();
  1571                           
  1572                           ;incstack = 0
  1573  0017D2  ECC2  F010         	call	_pauseMultiplexing	;wreg free
  1574                           
  1575                           ;pictris.c: 1372:     initialise_globals();
  1576  0017D6  EC81  F00B         	call	_initialise_globals	;wreg free
  1577                           
  1578                           ;pictris.c: 1374:     resumeMultiplexing();
  1579  0017DA  ECD4  F010         	call	_resumeMultiplexing	;wreg free
  1580                           
  1581                           ;pictris.c: 1376:     clearArray(ObjectData,8);
  1582  0017DE  0E18               	movlw	low _ObjectData
  1583  0017E0  6E47               	movwf	clearArray@pArray,c
  1584  0017E2  0E00               	movlw	high _ObjectData
  1585  0017E4  6E48               	movwf	clearArray@pArray+1,c
  1586  0017E6  0E00               	movlw	0
  1587  0017E8  6E4A               	movwf	clearArray@size+1,c
  1588  0017EA  0E08               	movlw	8
  1589  0017EC  6E49               	movwf	clearArray@size,c
  1590  0017EE  ECDE  F00F         	call	_clearArray	;wreg free
  1591                           
  1592                           ;pictris.c: 1377:     clearArray(BackgroundData,8);
  1593  0017F2  0E90               	movlw	low _BackgroundData
  1594  0017F4  6E47               	movwf	clearArray@pArray,c
  1595  0017F6  0E00               	movlw	high _BackgroundData
  1596  0017F8  6E48               	movwf	clearArray@pArray+1,c
  1597  0017FA  0E00               	movlw	0
  1598  0017FC  6E4A               	movwf	clearArray@size+1,c
  1599  0017FE  0E08               	movlw	8
  1600  001800  6E49               	movwf	clearArray@size,c
  1601  001802  ECDE  F00F         	call	_clearArray	;wreg free
  1602                           
  1603                           ;pictris.c: 1378:     clearArray(tmpObjectData,8);
  1604  001806  0E80               	movlw	low _tmpObjectData
  1605  001808  6E47               	movwf	clearArray@pArray,c
  1606  00180A  0E00               	movlw	high _tmpObjectData
  1607  00180C  6E48               	movwf	clearArray@pArray+1,c
  1608  00180E  0E00               	movlw	0
  1609  001810  6E4A               	movwf	clearArray@size+1,c
  1610  001812  0E08               	movlw	8
  1611  001814  6E49               	movwf	clearArray@size,c
  1612  001816  ECDE  F00F         	call	_clearArray	;wreg free
  1613                           
  1614                           ;pictris.c: 1380:    if (tetris == 1){
  1615  00181A  0407               	decf	_tetris,w,c
  1616  00181C  A4D8               	btfss	status,2,c
  1617  00181E  D026               	goto	l483
  1618                           
  1619                           ;pictris.c: 1383:     selectNextObject(ObjectData);
  1620  001820  0E18               	movlw	low _ObjectData
  1621  001822  6E53               	movwf	selectNextObject@pTarget,c
  1622  001824  0E00               	movlw	high _ObjectData
  1623  001826  6E54               	movwf	selectNextObject@pTarget+1,c
  1624  001828  EC49  F00C         	call	_selectNextObject	;wreg free
  1625  00182C                     
  1626                           ;pictris.c: 1386:         if (DropObject)
  1627  00182C  5010               	movf	_DropObject,w,c	;volatile
  1628  00182E  B4D8               	btfsc	status,2,c
  1629  001830  D008               	goto	l485
  1630                           
  1631                           ;pictris.c: 1387:         {;pictris.c: 1388:             DropObject = 0;
  1632  001832  0E00               	movlw	0
  1633  001834  6E10               	movwf	_DropObject,c	;volatile
  1634                           
  1635                           ;pictris.c: 1389:             moveObjectDown(ObjectData);
  1636  001836  0E18               	movlw	low _ObjectData
  1637  001838  6E5A               	movwf	moveObjectDown@pObject,c
  1638  00183A  0E00               	movlw	high _ObjectData
  1639  00183C  6E5B               	movwf	moveObjectDown@pObject+1,c
  1640  00183E  EC15  F00B         	call	_moveObjectDown	;wreg free
  1641  001842                     l485:
  1642                           
  1643                           ;pictris.c: 1393:         if (CheckForNewLines)
  1644  001842  5011               	movf	_CheckForNewLines,w,c
  1645  001844  B4D8               	btfsc	status,2,c
  1646  001846  D006               	goto	l486
  1647                           
  1648                           ;pictris.c: 1394:             checkForLines(BackgroundData);
  1649  001848  0E90               	movlw	low _BackgroundData
  1650  00184A  6E58               	movwf	checkForLines@pObject,c
  1651  00184C  0E00               	movlw	high _BackgroundData
  1652  00184E  6E59               	movwf	checkForLines@pObject+1,c
  1653  001850  EC64  F00D         	call	_checkForLines	;wreg free
  1654  001854                     l486:
  1655                           
  1656                           ;pictris.c: 1396:         checkButtons();
  1657  001854  EC79  F003         	call	_checkButtons	;wreg free
  1658                           
  1659                           ;pictris.c: 1402:         } while (!EndOfGame);
  1660  001858  5012               	movf	_EndOfGame,w,c
  1661  00185A  B4D8               	btfsc	status,2,c
  1662  00185C  D7E7               	goto	l484
  1663                           
  1664                           ;pictris.c: 1403:         writeHighScore(10);
  1665  00185E  0E0A               	movlw	10
  1666  001860  ECA9  F00F         	call	_writeHighScore
  1667                           
  1668                           ;pictris.c: 1404:         show_score(NumberOfLines);
  1669  001864  5015               	movf	_NumberOfLines,w,c
  1670  001866  ECC9  F007         	call	_show_score
  1671                           
  1672                           ;pictris.c: 1406:     }
  1673  00186A  0012               	return	
  1674  00186C                     l483:
  1675                           
  1676                           ;pictris.c: 1409:             if (moveSnake == 1) {
  1677                           
  1678                           ;pictris.c: 1408:        do{
  1679  00186C  040C               	decf	_moveSnake,w,c
  1680  00186E  A4D8               	btfss	status,2,c
  1681  001870  D004               	goto	l490
  1682                           
  1683                           ;pictris.c: 1410:                 moveSnake = 0;
  1684  001872  0E00               	movlw	0
  1685  001874  6E0C               	movwf	_moveSnake,c
  1686                           
  1687                           ;pictris.c: 1411:                 MoveSnakes();
  1688  001876  EC9A  F004         	call	_MoveSnakes	;wreg free
  1689  00187A                     l490:
  1690                           
  1691                           ;pictris.c: 1414:             checkButtons();
  1692  00187A  EC79  F003         	call	_checkButtons	;wreg free
  1693                           
  1694                           ;pictris.c: 1419:             } while(!EndOfGame);
  1695  00187E  5012               	movf	_EndOfGame,w,c
  1696  001880  B4D8               	btfsc	status,2,c
  1697  001882  D7F4               	goto	l483
  1698                           
  1699                           ;pictris.c: 1420:             writeHighScore(20);
  1700  001884  0E14               	movlw	20
  1701  001886  ECA9  F00F         	call	_writeHighScore
  1702                           
  1703                           ;pictris.c: 1421:             show_score(snakeLength);
  1704  00188A  500B               	movf	_snakeLength,w,c
  1705  00188C  ECC9  F007         	call	_show_score
  1706  001890  0012               	return	
  1707  001892                     __end_of_mainGameLoop:
  1708                           	opt stack 0
  1709                           tblptru	equ	0xFF8
  1710                           tblptrh	equ	0xFF7
  1711                           tblptrl	equ	0xFF6
  1712                           tablat	equ	0xFF5
  1713                           postinc0	equ	0xFEE
  1714                           wreg	equ	0xFE8
  1715                           postdec1	equ	0xFE5
  1716                           fsr1l	equ	0xFE1
  1717                           status	equ	0xFD8
  1718                           
  1719 ;; *************** function _writeHighScore *****************
  1720 ;; Defined at:
  1721 ;;		line 1347 in file "pictris.c"
  1722 ;; Parameters:    Size  Location     Type
  1723 ;;  adress          1    wreg     unsigned char 
  1724 ;; Auto vars:     Size  Location     Type
  1725 ;;  adress          1   20[COMRAM] unsigned char 
  1726 ;; Return value:  Size  Location     Type
  1727 ;;                  1    wreg      void 
  1728 ;; Registers used:
  1729 ;;		wreg, status,2, status,0, cstack
  1730 ;; Tracked objects:
  1731 ;;		On entry : 0/0
  1732 ;;		On exit  : 0/0
  1733 ;;		Unchanged: 0/0
  1734 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1735 ;;      Params:         0       0       0       0       0       0       0
  1736 ;;      Locals:         1       0       0       0       0       0       0
  1737 ;;      Temps:          0       0       0       0       0       0       0
  1738 ;;      Totals:         1       0       0       0       0       0       0
  1739 ;;Total ram usage:        1 bytes
  1740 ;; Hardware stack levels used:    1
  1741 ;; Hardware stack levels required when called:    3
  1742 ;; This function calls:
  1743 ;;		_WriteEEByte
  1744 ;; This function is called by:
  1745 ;;		_mainGameLoop
  1746 ;; This function uses a non-reentrant model
  1747 ;;
  1748                           
  1749                           	psect	text7
  1750  001F52                     __ptext7:
  1751                           	opt stack 0
  1752  001F52                     _writeHighScore:
  1753                           	opt stack 26
  1754                           
  1755                           ;incstack = 0
  1756                           ;writeHighScore@adress stored from wreg
  1757  001F52  6E49               	movwf	writeHighScore@adress,c
  1758                           
  1759                           ;pictris.c: 1347: void writeHighScore(uint8_t adress);pictris.c: 1348: {;pictris.c: 1350
      +                          :     if (tetris == 1){
  1760  001F54  0407               	decf	_tetris,w,c
  1761  001F56  A4D8               	btfss	status,2,c
  1762  001F58  D00A               	goto	l475
  1763                           
  1764                           ;pictris.c: 1351:     if (NumberOfLines > LastHighScore){
  1765  001F5A  5015               	movf	_NumberOfLines,w,c
  1766  001F5C  5C14               	subwf	_LastHighScore,w,c
  1767  001F5E  B0D8               	btfsc	status,0,c
  1768  001F60  0012               	return	
  1769                           
  1770                           ;pictris.c: 1352:         WriteEEByte(adress,NumberOfLines);
  1771  001F62  C015  F047         	movff	_NumberOfLines,WriteEEByte@data
  1772  001F66  5049               	movf	writeHighScore@adress,w,c
  1773  001F68  EC4E  F010         	call	_WriteEEByte
  1774                           
  1775                           ;pictris.c: 1354:     }
  1776                           
  1777                           ;pictris.c: 1353:     };
  1778  001F6C  0012               	return	
  1779  001F6E                     l475:
  1780  001F6E  5007               	movf	_tetris,w,c
  1781  001F70  A4D8               	btfss	status,2,c
  1782  001F72  0012               	return	
  1783                           
  1784                           ;pictris.c: 1357:         if (snakeLength > LastHighScore){
  1785  001F74  500B               	movf	_snakeLength,w,c
  1786  001F76  5C14               	subwf	_LastHighScore,w,c
  1787  001F78  B0D8               	btfsc	status,0,c
  1788  001F7A  0012               	return	
  1789                           
  1790                           ;pictris.c: 1358:         WriteEEByte(adress,snakeLength);
  1791  001F7C  C00B  F047         	movff	_snakeLength,WriteEEByte@data
  1792  001F80  5049               	movf	writeHighScore@adress,w,c
  1793  001F82  EC4E  F010         	call	_WriteEEByte
  1794                           
  1795                           ;pictris.c: 1360:     };
  1796                           
  1797                           ;pictris.c: 1359:         };
  1798  001F86  0012               	return	
  1799  001F88                     __end_of_writeHighScore:
  1800                           	opt stack 0
  1801                           tblptru	equ	0xFF8
  1802                           tblptrh	equ	0xFF7
  1803                           tblptrl	equ	0xFF6
  1804                           tablat	equ	0xFF5
  1805                           postinc0	equ	0xFEE
  1806                           wreg	equ	0xFE8
  1807                           postdec1	equ	0xFE5
  1808                           fsr1l	equ	0xFE1
  1809                           status	equ	0xFD8
  1810                           
  1811 ;; *************** function _WriteEEByte *****************
  1812 ;; Defined at:
  1813 ;;		line 1308 in file "pictris.c"
  1814 ;; Parameters:    Size  Location     Type
  1815 ;;  address         1    wreg     unsigned char 
  1816 ;;  data            1   18[COMRAM] unsigned char 
  1817 ;; Auto vars:     Size  Location     Type
  1818 ;;  address         1   19[COMRAM] unsigned char 
  1819 ;; Return value:  Size  Location     Type
  1820 ;;                  1    wreg      void 
  1821 ;; Registers used:
  1822 ;;		wreg, status,2
  1823 ;; Tracked objects:
  1824 ;;		On entry : 0/0
  1825 ;;		On exit  : 0/0
  1826 ;;		Unchanged: 0/0
  1827 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1828 ;;      Params:         1       0       0       0       0       0       0
  1829 ;;      Locals:         1       0       0       0       0       0       0
  1830 ;;      Temps:          0       0       0       0       0       0       0
  1831 ;;      Totals:         2       0       0       0       0       0       0
  1832 ;;Total ram usage:        2 bytes
  1833 ;; Hardware stack levels used:    1
  1834 ;; Hardware stack levels required when called:    2
  1835 ;; This function calls:
  1836 ;;		Nothing
  1837 ;; This function is called by:
  1838 ;;		_readHighScore
  1839 ;;		_writeHighScore
  1840 ;; This function uses a non-reentrant model
  1841 ;;
  1842                           
  1843                           	psect	text8
  1844  00209C                     __ptext8:
  1845                           	opt stack 0
  1846  00209C                     _WriteEEByte:
  1847                           	opt stack 27
  1848                           
  1849                           ;incstack = 0
  1850                           ;WriteEEByte@address stored from wreg
  1851  00209C  6E48               	movwf	WriteEEByte@address,c
  1852                           
  1853                           ;pictris.c: 1308: void WriteEEByte(byte address, byte data);pictris.c: 1309: {;pictris.c
      +                          : 1310: EECON1bits.WREN=1;
  1854  00209E  84A6               	bsf	4006,2,c	;volsfr
  1855                           
  1856                           ;pictris.c: 1311: EEADR=address;
  1857  0020A0  C048  FFA9         	movff	WriteEEByte@address,4009	;volatile
  1858                           
  1859                           ;pictris.c: 1312: EEDATA=data;
  1860  0020A4  C047  FFA8         	movff	WriteEEByte@data,4008	;volatile
  1861                           
  1862                           ;pictris.c: 1313: EECON1bits.EEPGD=0;
  1863  0020A8  9EA6               	bcf	4006,7,c	;volsfr
  1864                           
  1865                           ;pictris.c: 1314: EECON1bits.CFGS=0;
  1866  0020AA  9CA6               	bcf	4006,6,c	;volsfr
  1867                           
  1868                           ;pictris.c: 1315: INTCONbits.GIE=0;
  1869  0020AC  9EF2               	bcf	intcon,7,c	;volatile
  1870                           
  1871                           ;pictris.c: 1317: EECON2=0x55;
  1872  0020AE  0E55               	movlw	85
  1873  0020B0  6EA7               	movwf	4007,c	;volsfr
  1874                           
  1875                           ;pictris.c: 1318: EECON2=0xAA;
  1876  0020B2  0EAA               	movlw	170
  1877  0020B4  6EA7               	movwf	4007,c	;volsfr
  1878                           
  1879                           ;pictris.c: 1319: EECON1bits.WR=1;
  1880  0020B6  82A6               	bsf	4006,1,c	;volsfr
  1881                           
  1882                           ;pictris.c: 1321: INTCONbits.GIE=1;
  1883  0020B8  8EF2               	bsf	intcon,7,c	;volatile
  1884  0020BA  B2A6               	btfsc	4006,1,c	;volsfr
  1885  0020BC  D7FE               	goto	l464
  1886                           
  1887                           ;pictris.c: 1323: EECON1bits.WREN=0;
  1888  0020BE  94A6               	bcf	4006,2,c	;volsfr
  1889  0020C0  0012               	return		;funcret
  1890  0020C2                     __end_of_WriteEEByte:
  1891                           	opt stack 0
  1892                           tblptru	equ	0xFF8
  1893                           tblptrh	equ	0xFF7
  1894                           tblptrl	equ	0xFF6
  1895                           tablat	equ	0xFF5
  1896                           intcon	equ	0xFF2
  1897                           postinc0	equ	0xFEE
  1898                           wreg	equ	0xFE8
  1899                           postdec1	equ	0xFE5
  1900                           fsr1l	equ	0xFE1
  1901                           status	equ	0xFD8
  1902                           
  1903 ;; *************** function _show_score *****************
  1904 ;; Defined at:
  1905 ;;		line 1245 in file "pictris.c"
  1906 ;; Parameters:    Size  Location     Type
  1907 ;;  score           1    wreg     unsigned char 
  1908 ;; Auto vars:     Size  Location     Type
  1909 ;;  score           1   16[BANK0 ] unsigned char 
  1910 ;;  mask           16    0[BANK0 ] unsigned short [8]
  1911 ;;  number          4   18[BANK0 ] unsigned char [4]
  1912 ;;  i               1   22[BANK0 ] unsigned char 
  1913 ;;  currentNumbe    1   17[BANK0 ] unsigned char 
  1914 ;; Return value:  Size  Location     Type
  1915 ;;                  1    wreg      void 
  1916 ;; Registers used:
  1917 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1918 ;; Tracked objects:
  1919 ;;		On entry : 0/0
  1920 ;;		On exit  : 0/0
  1921 ;;		Unchanged: 0/0
  1922 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1923 ;;      Params:         0       0       0       0       0       0       0
  1924 ;;      Locals:         0      23       0       0       0       0       0
  1925 ;;      Temps:          0       0       0       0       0       0       0
  1926 ;;      Totals:         0      23       0       0       0       0       0
  1927 ;;Total ram usage:       23 bytes
  1928 ;; Hardware stack levels used:    1
  1929 ;; Hardware stack levels required when called:    5
  1930 ;; This function calls:
  1931 ;;		_clearArray
  1932 ;;		_getNumber
  1933 ;;		_itoa
  1934 ;;		_mergeObjects
  1935 ;;		_moveObject
  1936 ;;		_pauseButtons
  1937 ;;		_pauseMultiplexing
  1938 ;;		_resumeButtons
  1939 ;;		_resumeMultiplexing
  1940 ;; This function is called by:
  1941 ;;		_mainGameLoop
  1942 ;;		_main
  1943 ;; This function uses a non-reentrant model
  1944 ;;
  1945                           
  1946                           	psect	text9
  1947  000F92                     __ptext9:
  1948                           	opt stack 0
  1949  000F92                     _show_score:
  1950                           	opt stack 25
  1951                           
  1952                           ;incstack = 0
  1953                           ;show_score@score stored from wreg
  1954  000F92  0100               	movlb	0	; () banked
  1955  000F94  6FB0               	movwf	show_score@score& (0+255),b
  1956                           
  1957                           ;pictris.c: 1245: void show_score(byte score);pictris.c: 1246: {;pictris.c: 1247:     by
      +                          te i, currentNumber;;pictris.c: 1248:     char number[4];;pictris.c: 1252:     pauseMult
      +                          iplexing();
  1958  000F96  ECC2  F010         	call	_pauseMultiplexing	;wreg free
  1959                           
  1960                           ;pictris.c: 1255:     clearArray(tmpObjectData, 8);
  1961  000F9A  0E80               	movlw	low _tmpObjectData
  1962  000F9C  6E47               	movwf	clearArray@pArray,c
  1963  000F9E  0E00               	movlw	high _tmpObjectData
  1964  000FA0  6E48               	movwf	clearArray@pArray+1,c
  1965  000FA2  0E00               	movlw	0
  1966  000FA4  6E4A               	movwf	clearArray@size+1,c
  1967  000FA6  0E08               	movlw	8
  1968  000FA8  6E49               	movwf	clearArray@size,c
  1969  000FAA  ECDE  F00F         	call	_clearArray	;wreg free
  1970                           
  1971                           ;pictris.c: 1256:     clearArray(ObjectData, 8);
  1972  000FAE  0E18               	movlw	low _ObjectData
  1973  000FB0  6E47               	movwf	clearArray@pArray,c
  1974  000FB2  0E00               	movlw	high _ObjectData
  1975  000FB4  6E48               	movwf	clearArray@pArray+1,c
  1976  000FB6  0E00               	movlw	0
  1977  000FB8  6E4A               	movwf	clearArray@size+1,c
  1978  000FBA  0E08               	movlw	8
  1979  000FBC  6E49               	movwf	clearArray@size,c
  1980  000FBE  ECDE  F00F         	call	_clearArray	;wreg free
  1981                           
  1982                           ;pictris.c: 1257:     clearArray(BackgroundData, 8);
  1983  000FC2  0E90               	movlw	low _BackgroundData
  1984  000FC4  6E47               	movwf	clearArray@pArray,c
  1985  000FC6  0E00               	movlw	high _BackgroundData
  1986  000FC8  6E48               	movwf	clearArray@pArray+1,c
  1987  000FCA  0E00               	movlw	0
  1988  000FCC  6E4A               	movwf	clearArray@size+1,c
  1989  000FCE  0E08               	movlw	8
  1990  000FD0  6E49               	movwf	clearArray@size,c
  1991  000FD2  ECDE  F00F         	call	_clearArray	;wreg free
  1992                           
  1993                           ;pictris.c: 1259:     itoa(score, number, 10);
  1994  000FD6  C0B0  F055         	movff	show_score@score,itoa@value
  1995  000FDA  6A56               	clrf	itoa@value+1,c
  1996  000FDC  0EB2               	movlw	low show_score@number
  1997  000FDE  6E57               	movwf	itoa@str,c
  1998  000FE0  0E00               	movlw	high show_score@number
  1999  000FE2  6E58               	movwf	itoa@str+1,c
  2000  000FE4  0E00               	movlw	0
  2001  000FE6  6E5A               	movwf	itoa@bas+1,c
  2002  000FE8  0E0A               	movlw	10
  2003  000FEA  6E59               	movwf	itoa@bas,c
  2004  000FEC  ECA8  F009         	call	_itoa	;wreg free
  2005                           
  2006                           ;pictris.c: 1260:     for (i = 0; i < 3 && number[i]; i++)
  2007  000FF0  0E00               	movlw	0
  2008  000FF2  0100               	movlb	0	; () banked
  2009  000FF4  6FB6               	movwf	show_score@i& (0+255),b
  2010  000FF6  D039               	goto	l441
  2011  000FF8                     
  2012                           ; BSR set to: 0
  2013                           ;pictris.c: 1261:     {;pictris.c: 1262:         currentNumber = number[i] - '0';
  2014                           
  2015                           ; BSR set to: 0
  2016  000FF8  51B6               	movf	show_score@i& (0+255),w,b
  2017  000FFA  0D01               	mullw	1
  2018  000FFC  0EB2               	movlw	low show_score@number
  2019  000FFE  24F3               	addwf	prodl,w,c
  2020  001000  6ED9               	movwf	fsr2l,c
  2021  001002  0E00               	movlw	high show_score@number
  2022  001004  20F4               	addwfc	prodh,w,c
  2023  001006  6EDA               	movwf	fsr2h,c
  2024  001008  50DF               	movf	indf2,w,c
  2025  00100A  0FD0               	addlw	208
  2026  00100C  6FB1               	movwf	show_score@currentNumber& (0+255),b
  2027                           
  2028                           ; BSR set to: 0
  2029                           ;pictris.c: 1263:         getNumber(currentNumber, tmpObjectData);
  2030  00100E  0E80               	movlw	low _tmpObjectData
  2031  001010  6E51               	movwf	getNumber@pTarget,c
  2032  001012  0E00               	movlw	high _tmpObjectData
  2033  001014  6E52               	movwf	getNumber@pTarget+1,c
  2034  001016  51B1               	movf	show_score@currentNumber& (0+255),w,b
  2035  001018  EC3A  F010         	call	_getNumber
  2036                           
  2037                           ;pictris.c: 1265:         moveObject(tmpObjectData, DOWN, (2-i) * 5);
  2038  00101C  0E80               	movlw	low _tmpObjectData
  2039  00101E  6E47               	movwf	moveObject@pObject,c
  2040  001020  0E00               	movlw	high _tmpObjectData
  2041  001022  6E48               	movwf	moveObject@pObject+1,c
  2042  001024  0E00               	movlw	0
  2043  001026  6E49               	movwf	moveObject@direction,c
  2044  001028  0100               	movlb	0	; () banked
  2045  00102A  51B6               	movf	show_score@i& (0+255),w,b
  2046  00102C  0800               	sublw	0
  2047  00102E  0F02               	addlw	2
  2048  001030  0D05               	mullw	5
  2049  001032  CFF3 F04A          	movff	prodl,moveObject@cycles
  2050  001036  EC52  F006         	call	_moveObject	;wreg free
  2051                           
  2052                           ;pictris.c: 1266:         moveObject(tmpObjectData, RIGHT, i);
  2053  00103A  0E80               	movlw	low _tmpObjectData
  2054  00103C  6E47               	movwf	moveObject@pObject,c
  2055  00103E  0E00               	movlw	high _tmpObjectData
  2056  001040  6E48               	movwf	moveObject@pObject+1,c
  2057  001042  0E03               	movlw	3
  2058  001044  6E49               	movwf	moveObject@direction,c
  2059  001046  C0B6  F04A         	movff	show_score@i,moveObject@cycles
  2060  00104A  EC52  F006         	call	_moveObject	;wreg free
  2061                           
  2062                           ;pictris.c: 1268:         mergeObjects(tmpObjectData, ObjectData, MERGE);
  2063  00104E  0E80               	movlw	low _tmpObjectData
  2064  001050  6E47               	movwf	mergeObjects@pSource,c
  2065  001052  0E00               	movlw	high _tmpObjectData
  2066  001054  6E48               	movwf	mergeObjects@pSource+1,c
  2067  001056  0E18               	movlw	low _ObjectData
  2068  001058  6E49               	movwf	mergeObjects@pTarget,c
  2069  00105A  0E00               	movlw	high _ObjectData
  2070  00105C  6E4A               	movwf	mergeObjects@pTarget+1,c
  2071  00105E  0E01               	movlw	1
  2072  001060  6E4B               	movwf	mergeObjects@mode,c
  2073  001062  ECA6  F00A         	call	_mergeObjects	;wreg free
  2074                           
  2075                           ;pictris.c: 1269:     }
  2076  001066  0100               	movlb	0	; () banked
  2077  001068  2BB6               	incf	show_score@i& (0+255),f,b
  2078  00106A                     l441:
  2079                           
  2080                           ; BSR set to: 0
  2081                           
  2082                           ; BSR set to: 0
  2083  00106A  0E03               	movlw	3
  2084  00106C  61B6               	cpfslt	show_score@i& (0+255),b
  2085  00106E  D00B               	goto	u4870
  2086                           
  2087                           ; BSR set to: 0
  2088  001070  51B6               	movf	show_score@i& (0+255),w,b
  2089  001072  0D01               	mullw	1
  2090  001074  0EB2               	movlw	low show_score@number
  2091  001076  24F3               	addwf	prodl,w,c
  2092  001078  6ED9               	movwf	fsr2l,c
  2093  00107A  0E00               	movlw	high show_score@number
  2094  00107C  20F4               	addwfc	prodh,w,c
  2095  00107E  6EDA               	movwf	fsr2h,c
  2096  001080  50DF               	movf	indf2,w,c
  2097  001082  A4D8               	btfss	status,2,c
  2098  001084  D7B9               	goto	l442
  2099  001086                     u4870:
  2100                           
  2101                           ; BSR set to: 0
  2102                           ;pictris.c: 1272:     resumeMultiplexing();
  2103                           
  2104                           ; BSR set to: 0
  2105                           
  2106                           ; BSR set to: 0
  2107  001086  ECD4  F010         	call	_resumeMultiplexing	;wreg free
  2108  00108A                     
  2109                           ;pictris.c: 1276:      while (Down_Debounced)
  2110                           
  2111                           ;pictris.c: 1277:         continue;
  2112  00108A  5031               	movf	_Down_Debounced,w,c	;volatile
  2113  00108C  A4D8               	btfss	status,2,c
  2114  00108E  D7FD               	goto	l447
  2115  001090                     u4880:
  2116                           
  2117                           ;pictris.c: 1280:     while (!Down_Debounced)
  2118                           
  2119                           ;pictris.c: 1281:         continue;
  2120                           
  2121                           ;pictris.c: 1280:     while (!Down_Debounced)
  2122  001090  5031               	movf	_Down_Debounced,w,c	;volatile
  2123  001092  B4D8               	btfsc	status,2,c
  2124  001094  D7FD               	goto	u4880
  2125                           
  2126                           ;pictris.c: 1284:     pauseMultiplexing();
  2127  001096  ECC2  F010         	call	_pauseMultiplexing	;wreg free
  2128                           
  2129                           ;pictris.c: 1285:     uint16_t mask[] = {0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff,
      +                           0xffff, 0xffff};
  2130  00109A  EE20  F0B7         	lfsr	2,show_score@F2907
  2131  00109E  EE10  F0A0         	lfsr	1,show_score@mask
  2132  0010A2  0E0F               	movlw	15
  2133  0010A4                     u4901:
  2134  0010A4  CFDB FFE3          	movff	plusw2,plusw1
  2135  0010A8  06E8               	decf	wreg,f,c
  2136  0010AA  E2FC               	bc	u4901
  2137                           
  2138                           ;pictris.c: 1286:     mergeObjects(mask, ObjectData, INVERT);
  2139  0010AC  0EA0               	movlw	low show_score@mask
  2140  0010AE  6E47               	movwf	mergeObjects@pSource,c
  2141  0010B0  0E00               	movlw	high show_score@mask
  2142  0010B2  6E48               	movwf	mergeObjects@pSource+1,c
  2143  0010B4  0E18               	movlw	low _ObjectData
  2144  0010B6  6E49               	movwf	mergeObjects@pTarget,c
  2145  0010B8  0E00               	movlw	high _ObjectData
  2146  0010BA  6E4A               	movwf	mergeObjects@pTarget+1,c
  2147  0010BC  0E02               	movlw	2
  2148  0010BE  6E4B               	movwf	mergeObjects@mode,c
  2149  0010C0  ECA6  F00A         	call	_mergeObjects	;wreg free
  2150                           
  2151                           ;pictris.c: 1287:     resumeMultiplexing();
  2152  0010C4  ECD4  F010         	call	_resumeMultiplexing	;wreg free
  2153  0010C8                     
  2154                           ;pictris.c: 1291:     while (Down_Debounced)
  2155                           
  2156                           ;pictris.c: 1292:         continue;
  2157  0010C8  5031               	movf	_Down_Debounced,w,c	;volatile
  2158  0010CA  A4D8               	btfss	status,2,c
  2159  0010CC  D7FD               	goto	l455
  2160                           
  2161                           ;pictris.c: 1293:     pauseButtons();
  2162  0010CE  ECDA  F010         	call	_pauseButtons	;wreg free
  2163                           
  2164                           ;pictris.c: 1294:     Down_Delay = 500;
  2165  0010D2  0E01               	movlw	1
  2166  0010D4  6E29               	movwf	_Down_Delay+1,c	;volatile
  2167  0010D6  0EF4               	movlw	244
  2168  0010D8  6E28               	movwf	_Down_Delay,c	;volatile
  2169                           
  2170                           ;pictris.c: 1295:     resumeButtons();
  2171  0010DA  ECD7  F010         	call	_resumeButtons	;wreg free
  2172  0010DE  0012               	return		;funcret
  2173  0010E0                     __end_of_show_score:
  2174                           	opt stack 0
  2175                           tblptru	equ	0xFF8
  2176                           tblptrh	equ	0xFF7
  2177                           tblptrl	equ	0xFF6
  2178                           tablat	equ	0xFF5
  2179                           prodh	equ	0xFF4
  2180                           prodl	equ	0xFF3
  2181                           intcon	equ	0xFF2
  2182                           postinc0	equ	0xFEE
  2183                           wreg	equ	0xFE8
  2184                           postdec1	equ	0xFE5
  2185                           plusw1	equ	0xFE3
  2186                           fsr1l	equ	0xFE1
  2187                           indf2	equ	0xFDF
  2188                           plusw2	equ	0xFDB
  2189                           fsr2h	equ	0xFDA
  2190                           fsr2l	equ	0xFD9
  2191                           status	equ	0xFD8
  2192                           
  2193 ;; *************** function _itoa *****************
  2194 ;; Defined at:
  2195 ;;		line 314 in file "pictris.c"
  2196 ;; Parameters:    Size  Location     Type
  2197 ;;  value           2   32[COMRAM] int 
  2198 ;;  str             2   34[COMRAM] PTR unsigned char 
  2199 ;;		 -> show_score@number(4), 
  2200 ;;  bas             2   36[COMRAM] int 
  2201 ;; Auto vars:     Size  Location     Type
  2202 ;;  rem             2   41[COMRAM] int 
  2203 ;;  i               2   43[COMRAM] int 
  2204 ;;  isNegative      1   40[COMRAM] _Bool 
  2205 ;; Return value:  Size  Location     Type
  2206 ;;                  2   32[COMRAM] PTR unsigned char 
  2207 ;; Registers used:
  2208 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  2209 ;; Tracked objects:
  2210 ;;		On entry : 0/0
  2211 ;;		On exit  : 0/0
  2212 ;;		Unchanged: 0/0
  2213 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2214 ;;      Params:         6       0       0       0       0       0       0
  2215 ;;      Locals:         7       0       0       0       0       0       0
  2216 ;;      Temps:          0       0       0       0       0       0       0
  2217 ;;      Totals:        13       0       0       0       0       0       0
  2218 ;;Total ram usage:       13 bytes
  2219 ;; Hardware stack levels used:    1
  2220 ;; Hardware stack levels required when called:    4
  2221 ;; This function calls:
  2222 ;;		___awdiv
  2223 ;;		___awmod
  2224 ;;		_reverse
  2225 ;; This function is called by:
  2226 ;;		_show_score
  2227 ;; This function uses a non-reentrant model
  2228 ;;
  2229                           
  2230                           	psect	text10
  2231  001350                     __ptext10:
  2232                           	opt stack 0
  2233  001350                     _itoa:
  2234                           	opt stack 25
  2235                           
  2236                           ;pictris.c: 314: char * itoa(int value, char * str, int bas);pictris.c: 315: {;pictris.c
      +                          : 316:     int i = 0;
  2237                           
  2238                           ;incstack = 0
  2239  001350  0E00               	movlw	0
  2240  001352  6E61               	movwf	itoa@i+1,c
  2241  001354  0E00               	movlw	0
  2242  001356  6E60               	movwf	itoa@i,c
  2243                           
  2244                           ;pictris.c: 317:     _Bool isNegative = 0;
  2245  001358  0E00               	movlw	0
  2246  00135A  6E5D               	movwf	itoa@isNegative,c
  2247                           
  2248                           ;pictris.c: 320:     if (value == 0)
  2249  00135C  5055               	movf	itoa@value,w,c
  2250  00135E  1056               	iorwf	itoa@value+1,w,c
  2251  001360  A4D8               	btfss	status,2,c
  2252  001362  D013               	goto	l142
  2253                           
  2254                           ;pictris.c: 321:     {;pictris.c: 322:         str[i++] = '0';
  2255  001364  5060               	movf	itoa@i,w,c
  2256  001366  2457               	addwf	itoa@str,w,c
  2257  001368  6ED9               	movwf	fsr2l,c
  2258  00136A  5061               	movf	itoa@i+1,w,c
  2259  00136C  2058               	addwfc	itoa@str+1,w,c
  2260  00136E  6EDA               	movwf	fsr2h,c
  2261  001370  0E30               	movlw	48
  2262  001372  6EDF               	movwf	indf2,c
  2263  001374  4A60               	infsnz	itoa@i,f,c
  2264  001376  2A61               	incf	itoa@i+1,f,c
  2265                           
  2266                           ;pictris.c: 323:         str[i] = '\0';
  2267  001378  5060               	movf	itoa@i,w,c
  2268  00137A  2457               	addwf	itoa@str,w,c
  2269  00137C  6ED9               	movwf	fsr2l,c
  2270  00137E  5061               	movf	itoa@i+1,w,c
  2271  001380  2058               	addwfc	itoa@str+1,w,c
  2272  001382  6EDA               	movwf	fsr2h,c
  2273  001384  0E00               	movlw	0
  2274  001386  6EDF               	movwf	indf2,c
  2275                           
  2276                           ;pictris.c: 324:         return str;;	Return value of _itoa is never used
  2277  001388  0012               	return	
  2278  00138A                     l142:
  2279                           
  2280                           ;pictris.c: 329:     if (value < 0 && bas == 10)
  2281  00138A  AE56               	btfss	itoa@value+1,7,c
  2282  00138C  D042               	goto	l145
  2283  00138E  0E0A               	movlw	10
  2284  001390  1859               	xorwf	itoa@bas,w,c
  2285  001392  105A               	iorwf	itoa@bas+1,w,c
  2286  001394  A4D8               	btfss	status,2,c
  2287  001396  D03D               	goto	l145
  2288                           
  2289                           ;pictris.c: 330:     {;pictris.c: 331:         isNegative = 1;
  2290  001398  0E01               	movlw	1
  2291  00139A  6E5D               	movwf	itoa@isNegative,c
  2292                           
  2293                           ;pictris.c: 332:         value = -value;
  2294  00139C  6C55               	negf	itoa@value,c
  2295  00139E  1E56               	comf	itoa@value+1,f,c
  2296  0013A0  B0D8               	btfsc	status,0,c
  2297  0013A2  2A56               	incf	itoa@value+1,f,c
  2298                           
  2299                           ;pictris.c: 336:     while (value != 0)
  2300                           
  2301                           ;pictris.c: 333:     }
  2302  0013A4  D036               	goto	l145
  2303  0013A6                     
  2304                           ;pictris.c: 337:     {;pictris.c: 338:         int rem = value % bas;
  2305  0013A6  C055  F047         	movff	itoa@value,___awmod@dividend
  2306  0013AA  C056  F048         	movff	itoa@value+1,___awmod@dividend+1
  2307  0013AE  C059  F049         	movff	itoa@bas,___awmod@divisor
  2308  0013B2  C05A  F04A         	movff	itoa@bas+1,___awmod@divisor+1
  2309  0013B6  ECA4  F00D         	call	___awmod	;wreg free
  2310  0013BA  C047  F05E         	movff	?___awmod,itoa@rem
  2311  0013BE  C048  F05F         	movff	?___awmod+1,itoa@rem+1
  2312                           
  2313                           ;pictris.c: 339:         str[i++] = (rem > 9)? (rem-10) + 'a' : rem + '0';
  2314  0013C2  BE5F               	btfsc	itoa@rem+1,7,c
  2315  0013C4  D006               	goto	u4250
  2316  0013C6  505F               	movf	itoa@rem+1,w,c
  2317  0013C8  E106               	bnz	l4065
  2318  0013CA  0E0A               	movlw	10
  2319  0013CC  5C5E               	subwf	itoa@rem,w,c
  2320  0013CE  B0D8               	btfsc	status,0,c
  2321  0013D0  D002               	goto	l148
  2322  0013D2                     u4250:
  2323  0013D2  0E30               	movlw	48
  2324  0013D4  D001               	goto	L1
  2325  0013D6                     l148:
  2326  0013D6                     l4065:
  2327  0013D6  0E57               	movlw	87
  2328  0013D8                     L1:
  2329  0013D8  245E               	addwf	itoa@rem,w,c
  2330  0013DA  6E5B               	movwf	_itoa$422,c
  2331  0013DC  0E00               	movlw	0
  2332  0013DE  205F               	addwfc	itoa@rem+1,w,c
  2333  0013E0  6E5C               	movwf	_itoa$422+1,c
  2334  0013E2  5060               	movf	itoa@i,w,c
  2335  0013E4  2457               	addwf	itoa@str,w,c
  2336  0013E6  6ED9               	movwf	fsr2l,c
  2337  0013E8  5061               	movf	itoa@i+1,w,c
  2338  0013EA  2058               	addwfc	itoa@str+1,w,c
  2339  0013EC  6EDA               	movwf	fsr2h,c
  2340  0013EE  C05B  FFDF         	movff	_itoa$422,indf2
  2341  0013F2  4A60               	infsnz	itoa@i,f,c
  2342  0013F4  2A61               	incf	itoa@i+1,f,c
  2343                           
  2344                           ;pictris.c: 340:         value = value/bas;
  2345  0013F6  C055  F047         	movff	itoa@value,___awdiv@dividend
  2346  0013FA  C056  F048         	movff	itoa@value+1,___awdiv@dividend+1
  2347  0013FE  C059  F049         	movff	itoa@bas,___awdiv@divisor
  2348  001402  C05A  F04A         	movff	itoa@bas+1,___awdiv@divisor+1
  2349  001406  EC22  F00D         	call	___awdiv	;wreg free
  2350  00140A  C047  F055         	movff	?___awdiv,itoa@value
  2351  00140E  C048  F056         	movff	?___awdiv+1,itoa@value+1
  2352  001412                     l145:
  2353                           
  2354                           ;pictris.c: 336:     while (value != 0)
  2355  001412  5055               	movf	itoa@value,w,c
  2356  001414  1056               	iorwf	itoa@value+1,w,c
  2357  001416  A4D8               	btfss	status,2,c
  2358  001418  D7C6               	goto	l146
  2359                           
  2360                           ;pictris.c: 344:     if (isNegative)
  2361  00141A  505D               	movf	itoa@isNegative,w,c
  2362  00141C  B4D8               	btfsc	status,2,c
  2363  00141E  D00A               	goto	l152
  2364                           
  2365                           ;pictris.c: 345:         str[i++] = '-';
  2366  001420  5060               	movf	itoa@i,w,c
  2367  001422  2457               	addwf	itoa@str,w,c
  2368  001424  6ED9               	movwf	fsr2l,c
  2369  001426  5061               	movf	itoa@i+1,w,c
  2370  001428  2058               	addwfc	itoa@str+1,w,c
  2371  00142A  6EDA               	movwf	fsr2h,c
  2372  00142C  0E2D               	movlw	45
  2373  00142E  6EDF               	movwf	indf2,c
  2374  001430  4A60               	infsnz	itoa@i,f,c
  2375  001432  2A61               	incf	itoa@i+1,f,c
  2376  001434                     l152:
  2377                           
  2378                           ;pictris.c: 347:     str[i] = '\0';
  2379  001434  5060               	movf	itoa@i,w,c
  2380  001436  2457               	addwf	itoa@str,w,c
  2381  001438  6ED9               	movwf	fsr2l,c
  2382  00143A  5061               	movf	itoa@i+1,w,c
  2383  00143C  2058               	addwfc	itoa@str+1,w,c
  2384  00143E  6EDA               	movwf	fsr2h,c
  2385  001440  0E00               	movlw	0
  2386  001442  6EDF               	movwf	indf2,c
  2387                           
  2388                           ;pictris.c: 350:     reverse(str, i);
  2389  001444  C057  F04C         	movff	itoa@str,reverse@str
  2390  001448  C058  F04D         	movff	itoa@str+1,reverse@str+1
  2391  00144C  C060  F04E         	movff	itoa@i,reverse@length
  2392  001450  C061  F04F         	movff	itoa@i+1,reverse@length+1
  2393  001454  EC00  F00F         	call	_reverse	;wreg free
  2394  001458  0012               	return	
  2395  00145A                     __end_of_itoa:
  2396                           	opt stack 0
  2397                           tblptru	equ	0xFF8
  2398                           tblptrh	equ	0xFF7
  2399                           tblptrl	equ	0xFF6
  2400                           tablat	equ	0xFF5
  2401                           prodh	equ	0xFF4
  2402                           prodl	equ	0xFF3
  2403                           intcon	equ	0xFF2
  2404                           postinc0	equ	0xFEE
  2405                           wreg	equ	0xFE8
  2406                           postdec1	equ	0xFE5
  2407                           plusw1	equ	0xFE3
  2408                           fsr1l	equ	0xFE1
  2409                           indf2	equ	0xFDF
  2410                           plusw2	equ	0xFDB
  2411                           fsr2h	equ	0xFDA
  2412                           fsr2l	equ	0xFD9
  2413                           status	equ	0xFD8
  2414                           
  2415 ;; *************** function _reverse *****************
  2416 ;; Defined at:
  2417 ;;		line 302 in file "pictris.c"
  2418 ;; Parameters:    Size  Location     Type
  2419 ;;  str             2   23[COMRAM] PTR unsigned char 
  2420 ;;		 -> show_score@number(4), 
  2421 ;;  length          2   25[COMRAM] int 
  2422 ;; Auto vars:     Size  Location     Type
  2423 ;;  end             2   30[COMRAM] int 
  2424 ;;  start           2   28[COMRAM] int 
  2425 ;; Return value:  Size  Location     Type
  2426 ;;                  1    wreg      void 
  2427 ;; Registers used:
  2428 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  2429 ;; Tracked objects:
  2430 ;;		On entry : 0/0
  2431 ;;		On exit  : 0/0
  2432 ;;		Unchanged: 0/0
  2433 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2434 ;;      Params:         4       0       0       0       0       0       0
  2435 ;;      Locals:         4       0       0       0       0       0       0
  2436 ;;      Temps:          1       0       0       0       0       0       0
  2437 ;;      Totals:         9       0       0       0       0       0       0
  2438 ;;Total ram usage:        9 bytes
  2439 ;; Hardware stack levels used:    1
  2440 ;; Hardware stack levels required when called:    3
  2441 ;; This function calls:
  2442 ;;		_swap
  2443 ;; This function is called by:
  2444 ;;		_itoa
  2445 ;; This function uses a non-reentrant model
  2446 ;;
  2447                           
  2448                           	psect	text11
  2449  001E00                     __ptext11:
  2450                           	opt stack 0
  2451  001E00                     _reverse:
  2452                           	opt stack 25
  2453                           
  2454                           ;pictris.c: 302: void reverse(char str[], int length);pictris.c: 303: {;pictris.c: 304: 
      +                              int start = 0;
  2455                           
  2456                           ;incstack = 0
  2457  001E00  0E00               	movlw	0
  2458  001E02  6E52               	movwf	reverse@start+1,c
  2459  001E04  0E00               	movlw	0
  2460  001E06  6E51               	movwf	reverse@start,c
  2461                           
  2462                           ;pictris.c: 305:     int end = length -1;
  2463  001E08  0EFF               	movlw	255
  2464  001E0A  244E               	addwf	reverse@length,w,c
  2465  001E0C  6E53               	movwf	reverse@end,c
  2466  001E0E  0EFF               	movlw	255
  2467  001E10  204F               	addwfc	reverse@length+1,w,c
  2468  001E12  6E54               	movwf	reverse@end+1,c
  2469                           
  2470                           ;pictris.c: 306:     while (start < end)
  2471  001E14  D013               	goto	l136
  2472  001E16                     
  2473                           ;pictris.c: 307:     {;pictris.c: 308:         swap(str+start, str+end);
  2474  001E16  5051               	movf	reverse@start,w,c
  2475  001E18  244C               	addwf	reverse@str,w,c
  2476  001E1A  6E47               	movwf	swap@a,c
  2477  001E1C  5052               	movf	reverse@start+1,w,c
  2478  001E1E  204D               	addwfc	reverse@str+1,w,c
  2479  001E20  6E48               	movwf	swap@a+1,c
  2480  001E22  5053               	movf	reverse@end,w,c
  2481  001E24  244C               	addwf	reverse@str,w,c
  2482  001E26  6E49               	movwf	swap@b,c
  2483  001E28  5054               	movf	reverse@end+1,w,c
  2484  001E2A  204D               	addwfc	reverse@str+1,w,c
  2485  001E2C  6E4A               	movwf	swap@b+1,c
  2486  001E2E  ECF8  F00F         	call	_swap	;wreg free
  2487                           
  2488                           ;pictris.c: 309:         start++;
  2489  001E32  4A51               	infsnz	reverse@start,f,c
  2490  001E34  2A52               	incf	reverse@start+1,f,c
  2491                           
  2492                           ;pictris.c: 310:         end--;
  2493  001E36  0653               	decf	reverse@end,f,c
  2494  001E38  A0D8               	btfss	status,0,c
  2495  001E3A  0654               	decf	reverse@end+1,f,c
  2496  001E3C                     l136:
  2497                           
  2498                           ;pictris.c: 306:     while (start < end)
  2499  001E3C  5053               	movf	reverse@end,w,c
  2500  001E3E  5C51               	subwf	reverse@start,w,c
  2501  001E40  5052               	movf	reverse@start+1,w,c
  2502  001E42  0A80               	xorlw	128
  2503  001E44  6E50               	movwf	??_reverse& (0+255),c
  2504  001E46  5054               	movf	reverse@end+1,w,c
  2505  001E48  0A80               	xorlw	128
  2506  001E4A  5850               	subwfb	??_reverse& (0+255),w,c
  2507  001E4C  B0D8               	btfsc	status,0,c
  2508  001E4E  0012               	return	
  2509  001E50  D7E2               	goto	l137
  2510  001E52                     __end_of_reverse:
  2511                           	opt stack 0
  2512                           tblptru	equ	0xFF8
  2513                           tblptrh	equ	0xFF7
  2514                           tblptrl	equ	0xFF6
  2515                           tablat	equ	0xFF5
  2516                           prodh	equ	0xFF4
  2517                           prodl	equ	0xFF3
  2518                           intcon	equ	0xFF2
  2519                           postinc0	equ	0xFEE
  2520                           wreg	equ	0xFE8
  2521                           postdec1	equ	0xFE5
  2522                           plusw1	equ	0xFE3
  2523                           fsr1l	equ	0xFE1
  2524                           indf2	equ	0xFDF
  2525                           plusw2	equ	0xFDB
  2526                           fsr2h	equ	0xFDA
  2527                           fsr2l	equ	0xFD9
  2528                           status	equ	0xFD8
  2529                           
  2530 ;; *************** function _swap *****************
  2531 ;; Defined at:
  2532 ;;		line 294 in file "pictris.c"
  2533 ;; Parameters:    Size  Location     Type
  2534 ;;  a               2   18[COMRAM] PTR unsigned char 
  2535 ;;		 -> show_score@number(4), 
  2536 ;;  b               2   20[COMRAM] PTR unsigned char 
  2537 ;;		 -> show_score@number(4), 
  2538 ;; Auto vars:     Size  Location     Type
  2539 ;;  t               1   22[COMRAM] unsigned char 
  2540 ;; Return value:  Size  Location     Type
  2541 ;;                  1    wreg      void 
  2542 ;; Registers used:
  2543 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2
  2544 ;; Tracked objects:
  2545 ;;		On entry : 0/0
  2546 ;;		On exit  : 0/0
  2547 ;;		Unchanged: 0/0
  2548 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2549 ;;      Params:         4       0       0       0       0       0       0
  2550 ;;      Locals:         1       0       0       0       0       0       0
  2551 ;;      Temps:          0       0       0       0       0       0       0
  2552 ;;      Totals:         5       0       0       0       0       0       0
  2553 ;;Total ram usage:        5 bytes
  2554 ;; Hardware stack levels used:    1
  2555 ;; Hardware stack levels required when called:    2
  2556 ;; This function calls:
  2557 ;;		Nothing
  2558 ;; This function is called by:
  2559 ;;		_reverse
  2560 ;; This function uses a non-reentrant model
  2561 ;;
  2562                           
  2563                           	psect	text12
  2564  001FF0                     __ptext12:
  2565                           	opt stack 0
  2566  001FF0                     _swap:
  2567                           	opt stack 25
  2568                           
  2569                           ;pictris.c: 294: void swap(char* a, char* b);pictris.c: 295: {;pictris.c: 296:     char 
      +                          t = *a;
  2570                           
  2571                           ;incstack = 0
  2572  001FF0  C047  FFD9         	movff	swap@a,fsr2l
  2573  001FF4  C048  FFDA         	movff	swap@a+1,fsr2h
  2574  001FF8  50DF               	movf	indf2,w,c
  2575  001FFA  6E4B               	movwf	swap@t,c
  2576                           
  2577                           ;pictris.c: 297:     *a = *b;
  2578  001FFC  C049  FFD9         	movff	swap@b,fsr2l
  2579  002000  C04A  FFDA         	movff	swap@b+1,fsr2h
  2580  002004  C047  FFE1         	movff	swap@a,fsr1l
  2581  002008  C048  FFE2         	movff	swap@a+1,fsr1h
  2582  00200C  CFDF FFE7          	movff	indf2,indf1
  2583                           
  2584                           ;pictris.c: 298:     *b = t;
  2585  002010  C049  FFD9         	movff	swap@b,fsr2l
  2586  002014  C04A  FFDA         	movff	swap@b+1,fsr2h
  2587  002018  C04B  FFDF         	movff	swap@t,indf2
  2588  00201C  0012               	return		;funcret
  2589  00201E                     __end_of_swap:
  2590                           	opt stack 0
  2591                           tblptru	equ	0xFF8
  2592                           tblptrh	equ	0xFF7
  2593                           tblptrl	equ	0xFF6
  2594                           tablat	equ	0xFF5
  2595                           prodh	equ	0xFF4
  2596                           prodl	equ	0xFF3
  2597                           intcon	equ	0xFF2
  2598                           postinc0	equ	0xFEE
  2599                           wreg	equ	0xFE8
  2600                           indf1	equ	0xFE7
  2601                           postdec1	equ	0xFE5
  2602                           plusw1	equ	0xFE3
  2603                           fsr1h	equ	0xFE2
  2604                           fsr1l	equ	0xFE1
  2605                           indf2	equ	0xFDF
  2606                           plusw2	equ	0xFDB
  2607                           fsr2h	equ	0xFDA
  2608                           fsr2l	equ	0xFD9
  2609                           status	equ	0xFD8
  2610                           
  2611 ;; *************** function ___awdiv *****************
  2612 ;; Defined at:
  2613 ;;		line 7 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c99\common\awdiv.c"
  2614 ;; Parameters:    Size  Location     Type
  2615 ;;  dividend        2   18[COMRAM] int 
  2616 ;;  divisor         2   20[COMRAM] int 
  2617 ;; Auto vars:     Size  Location     Type
  2618 ;;  quotient        2   24[COMRAM] int 
  2619 ;;  sign            1   23[COMRAM] unsigned char 
  2620 ;;  counter         1   22[COMRAM] unsigned char 
  2621 ;; Return value:  Size  Location     Type
  2622 ;;                  2   18[COMRAM] int 
  2623 ;; Registers used:
  2624 ;;		wreg, status,2, status,0
  2625 ;; Tracked objects:
  2626 ;;		On entry : 0/0
  2627 ;;		On exit  : 0/0
  2628 ;;		Unchanged: 0/0
  2629 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2630 ;;      Params:         4       0       0       0       0       0       0
  2631 ;;      Locals:         4       0       0       0       0       0       0
  2632 ;;      Temps:          0       0       0       0       0       0       0
  2633 ;;      Totals:         8       0       0       0       0       0       0
  2634 ;;Total ram usage:        8 bytes
  2635 ;; Hardware stack levels used:    1
  2636 ;; Hardware stack levels required when called:    2
  2637 ;; This function calls:
  2638 ;;		Nothing
  2639 ;; This function is called by:
  2640 ;;		_itoa
  2641 ;; This function uses a non-reentrant model
  2642 ;;
  2643                           
  2644                           	psect	text13
  2645  001A44                     __ptext13:
  2646                           	opt stack 0
  2647  001A44                     ___awdiv:
  2648                           	opt stack 26
  2649                           
  2650                           ;incstack = 0
  2651  001A44  0E00               	movlw	0
  2652  001A46  6E4C               	movwf	___awdiv@sign,c
  2653  001A48  AE4A               	btfss	___awdiv@divisor+1,7,c
  2654  001A4A  D006               	goto	l737
  2655  001A4C  6C49               	negf	___awdiv@divisor,c
  2656  001A4E  1E4A               	comf	___awdiv@divisor+1,f,c
  2657  001A50  B0D8               	btfsc	status,0,c
  2658  001A52  2A4A               	incf	___awdiv@divisor+1,f,c
  2659  001A54  0E01               	movlw	1
  2660  001A56  6E4C               	movwf	___awdiv@sign,c
  2661  001A58                     l737:
  2662  001A58  AE48               	btfss	___awdiv@dividend+1,7,c
  2663  001A5A  D006               	goto	l738
  2664  001A5C  6C47               	negf	___awdiv@dividend,c
  2665  001A5E  1E48               	comf	___awdiv@dividend+1,f,c
  2666  001A60  B0D8               	btfsc	status,0,c
  2667  001A62  2A48               	incf	___awdiv@dividend+1,f,c
  2668  001A64  0E01               	movlw	1
  2669  001A66  1A4C               	xorwf	___awdiv@sign,f,c
  2670  001A68                     l738:
  2671  001A68  0E00               	movlw	0
  2672  001A6A  6E4E               	movwf	___awdiv@quotient+1,c
  2673  001A6C  0E00               	movlw	0
  2674  001A6E  6E4D               	movwf	___awdiv@quotient,c
  2675  001A70  5049               	movf	___awdiv@divisor,w,c
  2676  001A72  104A               	iorwf	___awdiv@divisor+1,w,c
  2677  001A74  B4D8               	btfsc	status,2,c
  2678  001A76  D01C               	goto	l745
  2679  001A78  0E01               	movlw	1
  2680  001A7A  6E4B               	movwf	___awdiv@counter,c
  2681  001A7C  D004               	goto	l740
  2682  001A7E  90D8               	bcf	status,0,c
  2683  001A80  3649               	rlcf	___awdiv@divisor,f,c
  2684  001A82  364A               	rlcf	___awdiv@divisor+1,f,c
  2685  001A84  2A4B               	incf	___awdiv@counter,f,c
  2686  001A86                     l740:
  2687  001A86  AE4A               	btfss	___awdiv@divisor+1,7,c
  2688  001A88  D7FA               	goto	l741
  2689  001A8A                     u4190:
  2690  001A8A  90D8               	bcf	status,0,c
  2691  001A8C  364D               	rlcf	___awdiv@quotient,f,c
  2692  001A8E  364E               	rlcf	___awdiv@quotient+1,f,c
  2693  001A90  5049               	movf	___awdiv@divisor,w,c
  2694  001A92  5C47               	subwf	___awdiv@dividend,w,c
  2695  001A94  504A               	movf	___awdiv@divisor+1,w,c
  2696  001A96  5848               	subwfb	___awdiv@dividend+1,w,c
  2697  001A98  A0D8               	btfss	status,0,c
  2698  001A9A  D005               	goto	l744
  2699  001A9C  5049               	movf	___awdiv@divisor,w,c
  2700  001A9E  5E47               	subwf	___awdiv@dividend,f,c
  2701  001AA0  504A               	movf	___awdiv@divisor+1,w,c
  2702  001AA2  5A48               	subwfb	___awdiv@dividend+1,f,c
  2703  001AA4  804D               	bsf	___awdiv@quotient,0,c
  2704  001AA6                     l744:
  2705  001AA6  90D8               	bcf	status,0,c
  2706  001AA8  324A               	rrcf	___awdiv@divisor+1,f,c
  2707  001AAA  3249               	rrcf	___awdiv@divisor,f,c
  2708  001AAC  2E4B               	decfsz	___awdiv@counter,f,c
  2709  001AAE  D7ED               	goto	u4190
  2710  001AB0                     l745:
  2711  001AB0  504C               	movf	___awdiv@sign,w,c
  2712  001AB2  B4D8               	btfsc	status,2,c
  2713  001AB4  D004               	goto	l746
  2714  001AB6  6C4D               	negf	___awdiv@quotient,c
  2715  001AB8  1E4E               	comf	___awdiv@quotient+1,f,c
  2716  001ABA  B0D8               	btfsc	status,0,c
  2717  001ABC  2A4E               	incf	___awdiv@quotient+1,f,c
  2718  001ABE                     l746:
  2719  001ABE  C04D  F047         	movff	___awdiv@quotient,?___awdiv
  2720  001AC2  C04E  F048         	movff	___awdiv@quotient+1,?___awdiv+1
  2721  001AC6  0012               	return	
  2722  001AC8                     __end_of___awdiv:
  2723                           	opt stack 0
  2724                           tblptru	equ	0xFF8
  2725                           tblptrh	equ	0xFF7
  2726                           tblptrl	equ	0xFF6
  2727                           tablat	equ	0xFF5
  2728                           prodh	equ	0xFF4
  2729                           prodl	equ	0xFF3
  2730                           intcon	equ	0xFF2
  2731                           postinc0	equ	0xFEE
  2732                           wreg	equ	0xFE8
  2733                           indf1	equ	0xFE7
  2734                           postdec1	equ	0xFE5
  2735                           plusw1	equ	0xFE3
  2736                           fsr1h	equ	0xFE2
  2737                           fsr1l	equ	0xFE1
  2738                           indf2	equ	0xFDF
  2739                           plusw2	equ	0xFDB
  2740                           fsr2h	equ	0xFDA
  2741                           fsr2l	equ	0xFD9
  2742                           status	equ	0xFD8
  2743                           
  2744 ;; *************** function _getNumber *****************
  2745 ;; Defined at:
  2746 ;;		line 1240 in file "pictris.c"
  2747 ;; Parameters:    Size  Location     Type
  2748 ;;  pDigit          1    wreg     unsigned char 
  2749 ;;  pTarget         2   28[COMRAM] PTR unsigned short 
  2750 ;;		 -> tmpObjectData(16), 
  2751 ;; Auto vars:     Size  Location     Type
  2752 ;;  pDigit          1   30[COMRAM] unsigned char 
  2753 ;; Return value:  Size  Location     Type
  2754 ;;                  1    wreg      void 
  2755 ;; Registers used:
  2756 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2757 ;; Tracked objects:
  2758 ;;		On entry : 0/0
  2759 ;;		On exit  : 0/0
  2760 ;;		Unchanged: 0/0
  2761 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2762 ;;      Params:         2       0       0       0       0       0       0
  2763 ;;      Locals:         1       0       0       0       0       0       0
  2764 ;;      Temps:          0       0       0       0       0       0       0
  2765 ;;      Totals:         3       0       0       0       0       0       0
  2766 ;;Total ram usage:        3 bytes
  2767 ;; Hardware stack levels used:    1
  2768 ;; Hardware stack levels required when called:    3
  2769 ;; This function calls:
  2770 ;;		_memcpy
  2771 ;; This function is called by:
  2772 ;;		_show_score
  2773 ;; This function uses a non-reentrant model
  2774 ;;
  2775                           
  2776                           	psect	text14
  2777  002074                     __ptext14:
  2778                           	opt stack 0
  2779  002074                     _getNumber:
  2780                           	opt stack 26
  2781                           
  2782                           ;incstack = 0
  2783                           ;getNumber@pDigit stored from wreg
  2784  002074  6E53               	movwf	getNumber@pDigit,c
  2785                           
  2786                           ;pictris.c: 1240: void getNumber(byte pDigit, uint16_t * pTarget);pictris.c: 1241: {;pic
      +                          tris.c: 1242:     memcpy(pTarget, Number[pDigit], 16);
  2787  002076  C051  F047         	movff	getNumber@pTarget,memcpy@dest
  2788  00207A  C052  F048         	movff	getNumber@pTarget+1,memcpy@dest+1
  2789  00207E  5053               	movf	getNumber@pDigit,w,c
  2790  002080  0D10               	mullw	16
  2791  002082  0E31               	movlw	low _Number
  2792  002084  24F3               	addwf	prodl,w,c
  2793  002086  6E49               	movwf	memcpy@src,c
  2794  002088  0E06               	movlw	high _Number
  2795  00208A  20F4               	addwfc	prodh,w,c
  2796  00208C  6E4A               	movwf	memcpy@src+1,c
  2797  00208E  0E00               	movlw	0
  2798  002090  6E4C               	movwf	memcpy@n+1,c
  2799  002092  0E10               	movlw	16
  2800  002094  6E4B               	movwf	memcpy@n,c
  2801  002096  ECD5  F00E         	call	_memcpy	;wreg free
  2802  00209A  0012               	return		;funcret
  2803  00209C                     __end_of_getNumber:
  2804                           	opt stack 0
  2805                           tblptru	equ	0xFF8
  2806                           tblptrh	equ	0xFF7
  2807                           tblptrl	equ	0xFF6
  2808                           tablat	equ	0xFF5
  2809                           prodh	equ	0xFF4
  2810                           prodl	equ	0xFF3
  2811                           intcon	equ	0xFF2
  2812                           postinc0	equ	0xFEE
  2813                           wreg	equ	0xFE8
  2814                           indf1	equ	0xFE7
  2815                           postdec1	equ	0xFE5
  2816                           plusw1	equ	0xFE3
  2817                           fsr1h	equ	0xFE2
  2818                           fsr1l	equ	0xFE1
  2819                           indf2	equ	0xFDF
  2820                           plusw2	equ	0xFDB
  2821                           fsr2h	equ	0xFDA
  2822                           fsr2l	equ	0xFD9
  2823                           status	equ	0xFD8
  2824                           
  2825 ;; *************** function _initialise_globals *****************
  2826 ;; Defined at:
  2827 ;;		line 1113 in file "pictris.c"
  2828 ;; Parameters:    Size  Location     Type
  2829 ;;		None
  2830 ;; Auto vars:     Size  Location     Type
  2831 ;;  i               1   28[COMRAM] unsigned char 
  2832 ;; Return value:  Size  Location     Type
  2833 ;;                  1    wreg      void 
  2834 ;; Registers used:
  2835 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2836 ;; Tracked objects:
  2837 ;;		On entry : 0/0
  2838 ;;		On exit  : 0/0
  2839 ;;		Unchanged: 0/0
  2840 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2841 ;;      Params:         0       0       0       0       0       0       0
  2842 ;;      Locals:         1       0       0       0       0       0       0
  2843 ;;      Temps:          0       0       0       0       0       0       0
  2844 ;;      Totals:         1       0       0       0       0       0       0
  2845 ;;Total ram usage:        1 bytes
  2846 ;; Hardware stack levels used:    1
  2847 ;; Hardware stack levels required when called:    5
  2848 ;; This function calls:
  2849 ;;		_CreateBerry
  2850 ;;		_clearArray
  2851 ;; This function is called by:
  2852 ;;		_mainGameLoop
  2853 ;;		_main
  2854 ;; This function uses a non-reentrant model
  2855 ;;
  2856                           
  2857                           	psect	text15
  2858  001702                     __ptext15:
  2859                           	opt stack 0
  2860  001702                     _initialise_globals:
  2861                           	opt stack 24
  2862                           
  2863                           ;pictris.c: 1116:     clearArray(ObjectData, 8);
  2864                           
  2865                           ;incstack = 0
  2866  001702  0E18               	movlw	low _ObjectData
  2867  001704  6E47               	movwf	clearArray@pArray,c
  2868  001706  0E00               	movlw	high _ObjectData
  2869  001708  6E48               	movwf	clearArray@pArray+1,c
  2870  00170A  0E00               	movlw	0
  2871  00170C  6E4A               	movwf	clearArray@size+1,c
  2872  00170E  0E08               	movlw	8
  2873  001710  6E49               	movwf	clearArray@size,c
  2874  001712  ECDE  F00F         	call	_clearArray	;wreg free
  2875                           
  2876                           ;pictris.c: 1118:     clearArray(BackgroundData, 8);
  2877  001716  0E90               	movlw	low _BackgroundData
  2878  001718  6E47               	movwf	clearArray@pArray,c
  2879  00171A  0E00               	movlw	high _BackgroundData
  2880  00171C  6E48               	movwf	clearArray@pArray+1,c
  2881  00171E  0E00               	movlw	0
  2882  001720  6E4A               	movwf	clearArray@size+1,c
  2883  001722  0E08               	movlw	8
  2884  001724  6E49               	movwf	clearArray@size,c
  2885  001726  ECDE  F00F         	call	_clearArray	;wreg free
  2886                           
  2887                           ;pictris.c: 1122:     OriginX = 0;
  2888  00172A  0E00               	movlw	0
  2889  00172C  6E0F               	movwf	_OriginX,c
  2890                           
  2891                           ;pictris.c: 1123:     OriginY = 0;
  2892  00172E  0E00               	movlw	0
  2893  001730  6E0E               	movwf	_OriginY,c
  2894                           
  2895                           ;pictris.c: 1125:     NumberOfLines = 0;
  2896  001732  0E00               	movlw	0
  2897  001734  6E15               	movwf	_NumberOfLines,c
  2898                           
  2899                           ;pictris.c: 1127:     DropObject = 0;
  2900  001736  0E00               	movlw	0
  2901  001738  6E10               	movwf	_DropObject,c	;volatile
  2902                           
  2903                           ;pictris.c: 1128:     EndOfGame = 0;
  2904  00173A  0E00               	movlw	0
  2905  00173C  6E12               	movwf	_EndOfGame,c
  2906                           
  2907                           ;pictris.c: 1129:     CheckForNewLines = 0;
  2908  00173E  0E00               	movlw	0
  2909  001740  6E11               	movwf	_CheckForNewLines,c
  2910                           
  2911                           ;pictris.c: 1131:     mS = 0;
  2912  001742  0E00               	movlw	0
  2913  001744  6E04               	movwf	_mS+1,c	;volatile
  2914  001746  0E00               	movlw	0
  2915  001748  6E03               	movwf	_mS,c	;volatile
  2916                           
  2917                           ;pictris.c: 1139:     mtxButtons = 1;
  2918  00174A  0E01               	movlw	1
  2919  00174C  6E17               	movwf	_mtxButtons,c	;volatile
  2920                           
  2921                           ;pictris.c: 1141:     Left_Delay = -1;
  2922  00174E  682E               	setf	_Left_Delay,c	;volatile
  2923  001750  682F               	setf	_Left_Delay+1,c	;volatile
  2924                           
  2925                           ;pictris.c: 1142:     Left_Debounced = 0;
  2926  001752  0E00               	movlw	0
  2927  001754  6E34               	movwf	_Left_Debounced,c	;volatile
  2928                           
  2929                           ;pictris.c: 1145:     Right_Delay = -1;
  2930  001756  682C               	setf	_Right_Delay,c	;volatile
  2931  001758  682D               	setf	_Right_Delay+1,c	;volatile
  2932                           
  2933                           ;pictris.c: 1146:     Right_Debounced = 0;
  2934  00175A  0E00               	movlw	0
  2935  00175C  6E33               	movwf	_Right_Debounced,c	;volatile
  2936                           
  2937                           ;pictris.c: 1149:     Rotate_Delay = -1;
  2938  00175E  682A               	setf	_Rotate_Delay,c	;volatile
  2939  001760  682B               	setf	_Rotate_Delay+1,c	;volatile
  2940                           
  2941                           ;pictris.c: 1150:     Rotate_Debounced = 0;
  2942  001762  0E00               	movlw	0
  2943  001764  6E32               	movwf	_Rotate_Debounced,c	;volatile
  2944                           
  2945                           ;pictris.c: 1153:     Down_Delay = -1;
  2946  001766  6828               	setf	_Down_Delay,c	;volatile
  2947  001768  6829               	setf	_Down_Delay+1,c	;volatile
  2948                           
  2949                           ;pictris.c: 1154:     Down_Debounced = 0;
  2950  00176A  0E00               	movlw	0
  2951  00176C  6E31               	movwf	_Down_Debounced,c	;volatile
  2952                           
  2953                           ;pictris.c: 1157:     moveSnake = 0;
  2954  00176E  0E00               	movlw	0
  2955  001770  6E0C               	movwf	_moveSnake,c
  2956                           
  2957                           ;pictris.c: 1159:     snakeLength = 3;
  2958  001772  0E03               	movlw	3
  2959  001774  6E0B               	movwf	_snakeLength,c
  2960                           
  2961                           ;pictris.c: 1160:     previous_direction = 3;
  2962  001776  0E03               	movlw	3
  2963  001778  6E08               	movwf	_previous_direction,c
  2964                           
  2965                           ;pictris.c: 1161:     uint8_t i;;pictris.c: 1162:     for (i=0;i<4;i++){
  2966  00177A  0E00               	movlw	0
  2967  00177C  6E51               	movwf	initialise_globals@i,c
  2968  00177E                     l4439:
  2969  00177E  0E03               	movlw	3
  2970  001780  6451               	cpfsgt	initialise_globals@i,c
  2971  001782  D001               	goto	l405
  2972  001784  D01C               	goto	u4850
  2973  001786                     l405:
  2974                           
  2975                           ;pictris.c: 1163:         positions[i].y = 3;
  2976  001786  5051               	movf	initialise_globals@i,w,c
  2977  001788  0D02               	mullw	2
  2978  00178A  0E01               	movlw	1
  2979  00178C  26F3               	addwf	prodl,f,c
  2980  00178E  0E00               	movlw	0
  2981  001790  22F4               	addwfc	prodh,f,c
  2982  001792  0E00               	movlw	low _positions
  2983  001794  24F3               	addwf	prodl,w,c
  2984  001796  6ED9               	movwf	fsr2l,c
  2985  001798  0E01               	movlw	high _positions
  2986  00179A  20F4               	addwfc	prodh,w,c
  2987  00179C  6EDA               	movwf	fsr2h,c
  2988  00179E  0E03               	movlw	3
  2989  0017A0  6EDF               	movwf	indf2,c
  2990                           
  2991                           ;pictris.c: 1164:         positions[i].x = 4-i;
  2992  0017A2  5051               	movf	initialise_globals@i,w,c
  2993  0017A4  0D02               	mullw	2
  2994  0017A6  0E00               	movlw	low _positions
  2995  0017A8  24F3               	addwf	prodl,w,c
  2996  0017AA  6ED9               	movwf	fsr2l,c
  2997  0017AC  0E01               	movlw	high _positions
  2998  0017AE  20F4               	addwfc	prodh,w,c
  2999  0017B0  6EDA               	movwf	fsr2h,c
  3000  0017B2  5051               	movf	initialise_globals@i,w,c
  3001  0017B4  0800               	sublw	0
  3002  0017B6  0F04               	addlw	4
  3003  0017B8  6EDF               	movwf	indf2,c
  3004                           
  3005                           ;pictris.c: 1165:     }
  3006  0017BA  2A51               	incf	initialise_globals@i,f,c
  3007  0017BC  D7E0               	goto	l4439
  3008  0017BE                     u4850:
  3009                           
  3010                           ;pictris.c: 1166:     positions[0].y = 3;
  3011  0017BE  0E03               	movlw	3
  3012  0017C0  0101               	movlb	1	; () banked
  3013  0017C2  6F01               	movwf	(_positions+1)& (0+255),b
  3014                           
  3015                           ;pictris.c: 1167:     positions[0].x = 3;
  3016  0017C4  0E03               	movlw	3
  3017  0017C6  6F00               	movwf	_positions& (0+255),b
  3018                           
  3019                           ;pictris.c: 1168:     direction = 1;
  3020  0017C8  0E01               	movlw	1
  3021  0017CA  6E0D               	movwf	_direction,c
  3022                           
  3023                           ; BSR set to: 1
  3024                           ;pictris.c: 1169:     CreateBerry();
  3025  0017CC  EC13  F00E         	call	_CreateBerry	;wreg free
  3026  0017D0  0012               	return		;funcret
  3027  0017D2                     __end_of_initialise_globals:
  3028                           	opt stack 0
  3029                           tblptru	equ	0xFF8
  3030                           tblptrh	equ	0xFF7
  3031                           tblptrl	equ	0xFF6
  3032                           tablat	equ	0xFF5
  3033                           prodh	equ	0xFF4
  3034                           prodl	equ	0xFF3
  3035                           intcon	equ	0xFF2
  3036                           postinc0	equ	0xFEE
  3037                           wreg	equ	0xFE8
  3038                           indf1	equ	0xFE7
  3039                           postdec1	equ	0xFE5
  3040                           plusw1	equ	0xFE3
  3041                           fsr1h	equ	0xFE2
  3042                           fsr1l	equ	0xFE1
  3043                           indf2	equ	0xFDF
  3044                           plusw2	equ	0xFDB
  3045                           fsr2h	equ	0xFDA
  3046                           fsr2l	equ	0xFD9
  3047                           status	equ	0xFD8
  3048                           
  3049 ;; *************** function _checkForLines *****************
  3050 ;; Defined at:
  3051 ;;		line 1053 in file "pictris.c"
  3052 ;; Parameters:    Size  Location     Type
  3053 ;;  pObject         2   35[COMRAM] PTR volatile unsigned sh
  3054 ;;		 -> BackgroundData(16), 
  3055 ;; Auto vars:     Size  Location     Type
  3056 ;;  y               1   44[COMRAM] unsigned char 
  3057 ;;  x               1   43[COMRAM] unsigned char 
  3058 ;;  pixels          1   42[COMRAM] unsigned char 
  3059 ;; Return value:  Size  Location     Type
  3060 ;;                  1    wreg      void 
  3061 ;; Registers used:
  3062 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3063 ;; Tracked objects:
  3064 ;;		On entry : 0/0
  3065 ;;		On exit  : 0/0
  3066 ;;		Unchanged: 0/0
  3067 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3068 ;;      Params:         2       0       0       0       0       0       0
  3069 ;;      Locals:         3       0       0       0       0       0       0
  3070 ;;      Temps:          5       0       0       0       0       0       0
  3071 ;;      Totals:        10       0       0       0       0       0       0
  3072 ;;Total ram usage:       10 bytes
  3073 ;; Hardware stack levels used:    1
  3074 ;; Hardware stack levels required when called:    3
  3075 ;; This function calls:
  3076 ;;		_removeLine
  3077 ;; This function is called by:
  3078 ;;		_mainGameLoop
  3079 ;; This function uses a non-reentrant model
  3080 ;;
  3081                           
  3082                           	psect	text16
  3083  001AC8                     __ptext16:
  3084                           	opt stack 0
  3085  001AC8                     _checkForLines:
  3086                           	opt stack 26
  3087                           
  3088                           ;pictris.c: 1053: void checkForLines(volatile uint16_t * pObject);pictris.c: 1054: {;pic
      +                          tris.c: 1055:     byte x, y, pixels;;pictris.c: 1057:     for (y = 0; y < 16; y++)
  3089                           
  3090                           ;incstack = 0
  3091  001AC8  0E00               	movlw	0
  3092  001ACA  6E61               	movwf	checkForLines@y,c
  3093  001ACC                     l3321:
  3094  001ACC  0E0F               	movlw	15
  3095  001ACE  6461               	cpfsgt	checkForLines@y,c
  3096  001AD0  D001               	goto	l390
  3097  001AD2  0012               	return	
  3098  001AD4                     l390:
  3099                           
  3100                           ;pictris.c: 1058:     {;pictris.c: 1059:         pixels = 0;
  3101  001AD4  0E00               	movlw	0
  3102  001AD6  6E5F               	movwf	checkForLines@pixels,c
  3103                           
  3104                           ;pictris.c: 1060:         for (x = 0; x < 8; x++)
  3105  001AD8  0E00               	movlw	0
  3106  001ADA  6E60               	movwf	checkForLines@x,c
  3107  001ADC                     l3327:
  3108  001ADC  0E07               	movlw	7
  3109  001ADE  6460               	cpfsgt	checkForLines@x,c
  3110  001AE0  D001               	goto	l392
  3111  001AE2  D023               	goto	u3280
  3112  001AE4                     l392:
  3113                           
  3114                           ;pictris.c: 1061:             if (pObject[x] & (1<<y))
  3115  001AE4  5060               	movf	checkForLines@x,w,c
  3116  001AE6  0D02               	mullw	2
  3117  001AE8  50F3               	movf	prodl,w,c
  3118  001AEA  2458               	addwf	checkForLines@pObject,w,c
  3119  001AEC  6ED9               	movwf	fsr2l,c
  3120  001AEE  50F4               	movf	prodh,w,c
  3121  001AF0  2059               	addwfc	checkForLines@pObject+1,w,c
  3122  001AF2  6EDA               	movwf	fsr2h,c
  3123  001AF4  CFDE F05A          	movff	postinc2,??_checkForLines
  3124  001AF8  CFDD F05B          	movff	postdec2,??_checkForLines+1
  3125  001AFC  C061  F05C         	movff	checkForLines@y,??_checkForLines+2
  3126  001B00  0E01               	movlw	1
  3127  001B02  6E5D               	movwf	(??_checkForLines+3)& (0+255),c
  3128  001B04  0E00               	movlw	0
  3129  001B06  6E5E               	movwf	(??_checkForLines+4)& (0+255),c
  3130  001B08  2A5C               	incf	??_checkForLines+2,f,c
  3131  001B0A  D003               	goto	u3264
  3132  001B0C                     u3265:
  3133  001B0C  90D8               	bcf	status,0,c
  3134  001B0E  365D               	rlcf	??_checkForLines+3,f,c
  3135  001B10  365E               	rlcf	??_checkForLines+4,f,c
  3136  001B12                     u3264:
  3137  001B12  2E5C               	decfsz	??_checkForLines+2,f,c
  3138  001B14  D7FB               	goto	u3265
  3139  001B16  505A               	movf	??_checkForLines,w,c
  3140  001B18  165D               	andwf	??_checkForLines+3,f,c
  3141  001B1A  505B               	movf	??_checkForLines+1,w,c
  3142  001B1C  165E               	andwf	??_checkForLines+4,f,c
  3143  001B1E  505D               	movf	??_checkForLines+3,w,c
  3144  001B20  105E               	iorwf	??_checkForLines+4,w,c
  3145  001B22  A4D8               	btfss	status,2,c
  3146                           
  3147                           ;pictris.c: 1062:                 pixels++;
  3148  001B24  2A5F               	incf	checkForLines@pixels,f,c
  3149  001B26  2A60               	incf	checkForLines@x,f,c
  3150  001B28  D7D9               	goto	l3327
  3151  001B2A                     u3280:
  3152                           
  3153                           ;pictris.c: 1063:         if (pixels == 8)
  3154  001B2A  0E08               	movlw	8
  3155  001B2C  185F               	xorwf	checkForLines@pixels,w,c
  3156  001B2E  A4D8               	btfss	status,2,c
  3157  001B30  D009               	goto	l395
  3158                           
  3159                           ;pictris.c: 1064:         {;pictris.c: 1065:             removeLine(pObject, y);
  3160  001B32  C058  F047         	movff	checkForLines@pObject,removeLine@pObject
  3161  001B36  C059  F048         	movff	checkForLines@pObject+1,removeLine@pObject+1
  3162  001B3A  C061  F049         	movff	checkForLines@y,removeLine@pY
  3163  001B3E  EC2D  F00A         	call	_removeLine	;wreg free
  3164                           
  3165                           ;pictris.c: 1066:             NumberOfLines++;
  3166  001B42  2A15               	incf	_NumberOfLines,f,c
  3167  001B44                     l395:
  3168                           
  3169                           ;pictris.c: 1068:     }
  3170  001B44  2A61               	incf	checkForLines@y,f,c
  3171  001B46  D7C2               	goto	l3321
  3172  001B48                     __end_of_checkForLines:
  3173                           	opt stack 0
  3174                           tblptru	equ	0xFF8
  3175                           tblptrh	equ	0xFF7
  3176                           tblptrl	equ	0xFF6
  3177                           tablat	equ	0xFF5
  3178                           prodh	equ	0xFF4
  3179                           prodl	equ	0xFF3
  3180                           intcon	equ	0xFF2
  3181                           postinc0	equ	0xFEE
  3182                           wreg	equ	0xFE8
  3183                           indf1	equ	0xFE7
  3184                           postdec1	equ	0xFE5
  3185                           plusw1	equ	0xFE3
  3186                           fsr1h	equ	0xFE2
  3187                           fsr1l	equ	0xFE1
  3188                           indf2	equ	0xFDF
  3189                           postinc2	equ	0xFDE
  3190                           postdec2	equ	0xFDD
  3191                           plusw2	equ	0xFDB
  3192                           fsr2h	equ	0xFDA
  3193                           fsr2l	equ	0xFD9
  3194                           status	equ	0xFD8
  3195                           
  3196 ;; *************** function _removeLine *****************
  3197 ;; Defined at:
  3198 ;;		line 1035 in file "pictris.c"
  3199 ;; Parameters:    Size  Location     Type
  3200 ;;  pObject         2   18[COMRAM] PTR volatile unsigned sh
  3201 ;;		 -> BackgroundData(16), 
  3202 ;;  pY              1   20[COMRAM] unsigned char 
  3203 ;; Auto vars:     Size  Location     Type
  3204 ;;  x               1   34[COMRAM] unsigned char 
  3205 ;;  y               1   33[COMRAM] unsigned char 
  3206 ;;  currentLine     1   32[COMRAM] unsigned char 
  3207 ;; Return value:  Size  Location     Type
  3208 ;;                  1    wreg      void 
  3209 ;; Registers used:
  3210 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  3211 ;; Tracked objects:
  3212 ;;		On entry : 0/0
  3213 ;;		On exit  : 0/0
  3214 ;;		Unchanged: 0/0
  3215 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3216 ;;      Params:         3       0       0       0       0       0       0
  3217 ;;      Locals:         3       0       0       0       0       0       0
  3218 ;;      Temps:         11       0       0       0       0       0       0
  3219 ;;      Totals:        17       0       0       0       0       0       0
  3220 ;;Total ram usage:       17 bytes
  3221 ;; Hardware stack levels used:    1
  3222 ;; Hardware stack levels required when called:    2
  3223 ;; This function calls:
  3224 ;;		Nothing
  3225 ;; This function is called by:
  3226 ;;		_checkForLines
  3227 ;; This function uses a non-reentrant model
  3228 ;;
  3229                           
  3230                           	psect	text17
  3231  00145A                     __ptext17:
  3232                           	opt stack 0
  3233  00145A                     _removeLine:
  3234                           	opt stack 26
  3235                           
  3236                           ;pictris.c: 1035: void removeLine(volatile uint16_t * pObject, byte pY);pictris.c: 1036:
      +                           {;pictris.c: 1037:     byte x, y, currentLine;;pictris.c: 1040:     for (y = pY-1; y < 
      +                          pY; y--)
  3237                           
  3238                           ;incstack = 0
  3239  00145A  0449               	decf	removeLine@pY,w,c
  3240  00145C  6E56               	movwf	removeLine@y,c
  3241  00145E  D05E               	goto	l380
  3242  001460                     
  3243                           ;pictris.c: 1041:     {;pictris.c: 1042:         currentLine = y + 1;
  3244  001460  2856               	incf	removeLine@y,w,c
  3245  001462  6E55               	movwf	removeLine@currentLine,c
  3246                           
  3247                           ;pictris.c: 1043:         for (x = 0; x < 8; x++)
  3248  001464  0E00               	movlw	0
  3249  001466  6E57               	movwf	removeLine@x,c
  3250  001468                     l3091:
  3251  001468  0E07               	movlw	7
  3252  00146A  6457               	cpfsgt	removeLine@x,c
  3253  00146C  D001               	goto	l382
  3254  00146E  D055               	goto	u2850
  3255  001470                     l382:
  3256                           
  3257                           ;pictris.c: 1044:             pObject[x] = (pObject[x] & ~(1<<currentLine)) | ((((pObjec
      +                          t[x] >> y) & 1)&1)<<currentLine);
  3258  001470  C055  F04A         	movff	removeLine@currentLine,??_removeLine
  3259  001474  C056  F04B         	movff	removeLine@y,??_removeLine+1
  3260  001478  5057               	movf	removeLine@x,w,c
  3261  00147A  0D02               	mullw	2
  3262  00147C  50F3               	movf	prodl,w,c
  3263  00147E  2447               	addwf	removeLine@pObject,w,c
  3264  001480  6ED9               	movwf	fsr2l,c
  3265  001482  50F4               	movf	prodh,w,c
  3266  001484  2048               	addwfc	removeLine@pObject+1,w,c
  3267  001486  6EDA               	movwf	fsr2h,c
  3268  001488  CFDE F04C          	movff	postinc2,??_removeLine+2
  3269  00148C  CFDD F04D          	movff	postdec2,??_removeLine+3
  3270  001490  2A4B               	incf	??_removeLine+1,f,c
  3271  001492  D003               	goto	u2824
  3272  001494                     u2825:
  3273  001494  90D8               	bcf	status,0,c
  3274  001496  324D               	rrcf	??_removeLine+3,f,c
  3275  001498  324C               	rrcf	??_removeLine+2,f,c
  3276  00149A                     u2824:
  3277  00149A  2E4B               	decfsz	??_removeLine+1,f,c
  3278  00149C  D7FB               	goto	u2825
  3279  00149E  0E01               	movlw	1
  3280  0014A0  164C               	andwf	??_removeLine+2,f,c
  3281  0014A2  0E00               	movlw	0
  3282  0014A4  164D               	andwf	??_removeLine+3,f,c
  3283  0014A6  2A4A               	incf	??_removeLine,f,c
  3284  0014A8  D003               	goto	u2834
  3285  0014AA                     u2835:
  3286  0014AA  90D8               	bcf	status,0,c
  3287  0014AC  364C               	rlcf	??_removeLine+2,f,c
  3288  0014AE  364D               	rlcf	??_removeLine+3,f,c
  3289  0014B0                     u2834:
  3290  0014B0  2E4A               	decfsz	??_removeLine,f,c
  3291  0014B2  D7FB               	goto	u2835
  3292  0014B4  5057               	movf	removeLine@x,w,c
  3293  0014B6  0D02               	mullw	2
  3294  0014B8  50F3               	movf	prodl,w,c
  3295  0014BA  2447               	addwf	removeLine@pObject,w,c
  3296  0014BC  6ED9               	movwf	fsr2l,c
  3297  0014BE  50F4               	movf	prodh,w,c
  3298  0014C0  2048               	addwfc	removeLine@pObject+1,w,c
  3299  0014C2  6EDA               	movwf	fsr2h,c
  3300  0014C4  CFDE F04E          	movff	postinc2,??_removeLine+4
  3301  0014C8  CFDD F04F          	movff	postdec2,??_removeLine+5
  3302  0014CC  C055  F050         	movff	removeLine@currentLine,??_removeLine+6
  3303  0014D0  0E01               	movlw	1
  3304  0014D2  6E51               	movwf	(??_removeLine+7)& (0+255),c
  3305  0014D4  0E00               	movlw	0
  3306  0014D6  6E52               	movwf	(??_removeLine+8)& (0+255),c
  3307  0014D8  2A50               	incf	??_removeLine+6,f,c
  3308  0014DA  D003               	goto	u2844
  3309  0014DC                     u2845:
  3310  0014DC  90D8               	bcf	status,0,c
  3311  0014DE  3651               	rlcf	??_removeLine+7,f,c
  3312  0014E0  3652               	rlcf	??_removeLine+8,f,c
  3313  0014E2                     u2844:
  3314  0014E2  2E50               	decfsz	??_removeLine+6,f,c
  3315  0014E4  D7FB               	goto	u2845
  3316  0014E6  1C51               	comf	??_removeLine+7,w,c
  3317  0014E8  6E53               	movwf	(??_removeLine+9)& (0+255),c
  3318  0014EA  1C52               	comf	??_removeLine+8,w,c
  3319  0014EC  6E54               	movwf	(??_removeLine+10)& (0+255),c
  3320  0014EE  504E               	movf	??_removeLine+4,w,c
  3321  0014F0  1653               	andwf	??_removeLine+9,f,c
  3322  0014F2  504F               	movf	??_removeLine+5,w,c
  3323  0014F4  1654               	andwf	??_removeLine+10,f,c
  3324  0014F6  504C               	movf	??_removeLine+2,w,c
  3325  0014F8  1253               	iorwf	??_removeLine+9,f,c
  3326  0014FA  504D               	movf	??_removeLine+3,w,c
  3327  0014FC  1254               	iorwf	??_removeLine+10,f,c
  3328  0014FE  5057               	movf	removeLine@x,w,c
  3329  001500  0D02               	mullw	2
  3330  001502  50F3               	movf	prodl,w,c
  3331  001504  2447               	addwf	removeLine@pObject,w,c
  3332  001506  6ED9               	movwf	fsr2l,c
  3333  001508  50F4               	movf	prodh,w,c
  3334  00150A  2048               	addwfc	removeLine@pObject+1,w,c
  3335  00150C  6EDA               	movwf	fsr2h,c
  3336  00150E  C053  FFDE         	movff	??_removeLine+9,postinc2
  3337  001512  C054  FFDD         	movff	??_removeLine+10,postdec2
  3338  001516  2A57               	incf	removeLine@x,f,c
  3339  001518  D7A7               	goto	l3091
  3340  00151A                     u2850:
  3341                           
  3342                           ;pictris.c: 1046:     }
  3343  00151A  0656               	decf	removeLine@y,f,c
  3344  00151C                     l380:
  3345  00151C  5049               	movf	removeLine@pY,w,c
  3346  00151E  5C56               	subwf	removeLine@y,w,c
  3347  001520  A0D8               	btfss	status,0,c
  3348  001522  D79E               	goto	l381
  3349                           
  3350                           ;pictris.c: 1048:     for (x = 0; x < 8; x++)
  3351  001524  0E00               	movlw	0
  3352  001526  6E57               	movwf	removeLine@x,c
  3353  001528                     l3107:
  3354  001528  0E07               	movlw	7
  3355  00152A  6457               	cpfsgt	removeLine@x,c
  3356  00152C  D001               	goto	l385
  3357  00152E  0012               	return	
  3358  001530                     l385:
  3359                           
  3360                           ;pictris.c: 1049:         pObject[x] &= ~(1<<0);
  3361  001530  5057               	movf	removeLine@x,w,c
  3362  001532  0D02               	mullw	2
  3363  001534  50F3               	movf	prodl,w,c
  3364  001536  2447               	addwf	removeLine@pObject,w,c
  3365  001538  6ED9               	movwf	fsr2l,c
  3366  00153A  50F4               	movf	prodh,w,c
  3367  00153C  2048               	addwfc	removeLine@pObject+1,w,c
  3368  00153E  6EDA               	movwf	fsr2h,c
  3369  001540  0EFE               	movlw	254
  3370  001542  16DE               	andwf	postinc2,f,c
  3371  001544  0EFF               	movlw	255
  3372  001546  16DD               	andwf	postdec2,f,c
  3373  001548  2A57               	incf	removeLine@x,f,c
  3374  00154A  D7EE               	goto	l3107
  3375  00154C                     __end_of_removeLine:
  3376                           	opt stack 0
  3377                           tblptru	equ	0xFF8
  3378                           tblptrh	equ	0xFF7
  3379                           tblptrl	equ	0xFF6
  3380                           tablat	equ	0xFF5
  3381                           prodh	equ	0xFF4
  3382                           prodl	equ	0xFF3
  3383                           intcon	equ	0xFF2
  3384                           postinc0	equ	0xFEE
  3385                           wreg	equ	0xFE8
  3386                           indf1	equ	0xFE7
  3387                           postdec1	equ	0xFE5
  3388                           plusw1	equ	0xFE3
  3389                           fsr1h	equ	0xFE2
  3390                           fsr1l	equ	0xFE1
  3391                           indf2	equ	0xFDF
  3392                           postinc2	equ	0xFDE
  3393                           postdec2	equ	0xFDD
  3394                           plusw2	equ	0xFDB
  3395                           fsr2h	equ	0xFDA
  3396                           fsr2l	equ	0xFD9
  3397                           status	equ	0xFD8
  3398                           
  3399 ;; *************** function _checkButtons *****************
  3400 ;; Defined at:
  3401 ;;		line 909 in file "pictris.c"
  3402 ;; Parameters:    Size  Location     Type
  3403 ;;		None
  3404 ;; Auto vars:     Size  Location     Type
  3405 ;;		None
  3406 ;; Return value:  Size  Location     Type
  3407 ;;                  1    wreg      void 
  3408 ;; Registers used:
  3409 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3410 ;; Tracked objects:
  3411 ;;		On entry : 0/0
  3412 ;;		On exit  : 0/0
  3413 ;;		Unchanged: 0/0
  3414 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3415 ;;      Params:         0       0       0       0       0       0       0
  3416 ;;      Locals:         0       0       0       0       0       0       0
  3417 ;;      Temps:          1       0       0       0       0       0       0
  3418 ;;      Totals:         1       0       0       0       0       0       0
  3419 ;;Total ram usage:        1 bytes
  3420 ;; Hardware stack levels used:    1
  3421 ;; Hardware stack levels required when called:    5
  3422 ;; This function calls:
  3423 ;;		_checkForLeftWall
  3424 ;;		_checkForRightWall
  3425 ;;		_collisionDetect
  3426 ;;		_memcpy
  3427 ;;		_mergeObjects
  3428 ;;		_moveObject
  3429 ;;		_moveObjectDown
  3430 ;;		_newRotation
  3431 ;;		_pauseButtons
  3432 ;;		_pauseMultiplexing
  3433 ;;		_pixelCount
  3434 ;;		_resumeButtons
  3435 ;;		_resumeMultiplexing
  3436 ;; This function is called by:
  3437 ;;		_mainGameLoop
  3438 ;; This function uses a non-reentrant model
  3439 ;;
  3440                           
  3441                           	psect	text18
  3442  0006F2                     __ptext18:
  3443                           	opt stack 0
  3444  0006F2                     _checkButtons:
  3445                           	opt stack 24
  3446                           
  3447                           ;pictris.c: 912:     if (Left_Debounced)
  3448                           
  3449                           ;incstack = 0
  3450  0006F2  5034               	movf	_Left_Debounced,w,c	;volatile
  3451  0006F4  B4D8               	btfsc	status,2,c
  3452  0006F6  D053               	goto	l357
  3453                           
  3454                           ;pictris.c: 913:     {;pictris.c: 914:     pauseButtons();
  3455  0006F8  ECDA  F010         	call	_pauseButtons	;wreg free
  3456                           
  3457                           ;pictris.c: 915:         Left_Debounced = 0;
  3458  0006FC  0E00               	movlw	0
  3459  0006FE  6E34               	movwf	_Left_Debounced,c	;volatile
  3460                           
  3461                           ;pictris.c: 916:         Left_Delay = 500;
  3462  000700  0E01               	movlw	1
  3463  000702  6E2F               	movwf	_Left_Delay+1,c	;volatile
  3464  000704  0EF4               	movlw	244
  3465  000706  6E2E               	movwf	_Left_Delay,c	;volatile
  3466                           
  3467                           ;pictris.c: 917:     resumeButtons();
  3468  000708  ECD7  F010         	call	_resumeButtons	;wreg free
  3469                           
  3470                           ;pictris.c: 920:     if (tetris == 1){
  3471  00070C  0407               	decf	_tetris,w,c
  3472  00070E  A4D8               	btfss	status,2,c
  3473  000710  D041               	goto	l353
  3474                           
  3475                           ;pictris.c: 921:         if (!checkForLeftWall(ObjectData))
  3476  000712  0E18               	movlw	low _ObjectData
  3477  000714  6E47               	movwf	checkForLeftWall@pObject,c
  3478  000716  0E00               	movlw	high _ObjectData
  3479  000718  6E48               	movwf	checkForLeftWall@pObject+1,c
  3480  00071A  EC91  F010         	call	_checkForLeftWall	;wreg free
  3481  00071E  0900               	iorlw	0
  3482  000720  A4D8               	btfss	status,2,c
  3483  000722  D03D               	goto	l357
  3484                           
  3485                           ;pictris.c: 922:         {;pictris.c: 925:             memcpy(tmpObjectData, ObjectData,
      +                           16);
  3486  000724  0E80               	movlw	low _tmpObjectData
  3487  000726  6E47               	movwf	memcpy@dest,c
  3488  000728  0E00               	movlw	high _tmpObjectData
  3489  00072A  6E48               	movwf	memcpy@dest+1,c
  3490  00072C  0E18               	movlw	low _ObjectData
  3491  00072E  6E49               	movwf	memcpy@src,c
  3492  000730  0E00               	movlw	high _ObjectData
  3493  000732  6E4A               	movwf	memcpy@src+1,c
  3494  000734  0E00               	movlw	0
  3495  000736  6E4C               	movwf	memcpy@n+1,c
  3496  000738  0E10               	movlw	16
  3497  00073A  6E4B               	movwf	memcpy@n,c
  3498  00073C  ECD5  F00E         	call	_memcpy	;wreg free
  3499                           
  3500                           ;pictris.c: 927:             moveObject(tmpObjectData, LEFT, 1);
  3501  000740  0E80               	movlw	low _tmpObjectData
  3502  000742  6E47               	movwf	moveObject@pObject,c
  3503  000744  0E00               	movlw	high _tmpObjectData
  3504  000746  6E48               	movwf	moveObject@pObject+1,c
  3505  000748  0E02               	movlw	2
  3506  00074A  6E49               	movwf	moveObject@direction,c
  3507  00074C  0E01               	movlw	1
  3508  00074E  6E4A               	movwf	moveObject@cycles,c
  3509  000750  EC52  F006         	call	_moveObject	;wreg free
  3510                           
  3511                           ;pictris.c: 929:             if (!collisionDetect(tmpObjectData, BackgroundData))
  3512  000754  0E80               	movlw	low _tmpObjectData
  3513  000756  6E47               	movwf	collisionDetect@pSource,c
  3514  000758  0E00               	movlw	high _tmpObjectData
  3515  00075A  6E48               	movwf	collisionDetect@pSource+1,c
  3516  00075C  0E90               	movlw	low _BackgroundData
  3517  00075E  6E49               	movwf	collisionDetect@pTarget,c
  3518  000760  0E00               	movlw	high _BackgroundData
  3519  000762  6E4A               	movwf	collisionDetect@pTarget+1,c
  3520  000764  EC7E  F00E         	call	_collisionDetect	;wreg free
  3521  000768  0900               	iorlw	0
  3522  00076A  A4D8               	btfss	status,2,c
  3523  00076C  D018               	goto	l357
  3524                           
  3525                           ;pictris.c: 930:             {;pictris.c: 933:                 pauseMultiplexing();
  3526  00076E  ECC2  F010         	call	_pauseMultiplexing	;wreg free
  3527                           
  3528                           ;pictris.c: 936:                 mergeObjects(tmpObjectData, ObjectData, OVERRIDE);
  3529  000772  0E80               	movlw	low _tmpObjectData
  3530  000774  6E47               	movwf	mergeObjects@pSource,c
  3531  000776  0E00               	movlw	high _tmpObjectData
  3532  000778  6E48               	movwf	mergeObjects@pSource+1,c
  3533  00077A  0E18               	movlw	low _ObjectData
  3534  00077C  6E49               	movwf	mergeObjects@pTarget,c
  3535  00077E  0E00               	movlw	high _ObjectData
  3536  000780  6E4A               	movwf	mergeObjects@pTarget+1,c
  3537  000782  0E00               	movlw	0
  3538  000784  6E4B               	movwf	mergeObjects@mode,c
  3539  000786  ECA6  F00A         	call	_mergeObjects	;wreg free
  3540                           
  3541                           ;pictris.c: 939:                 resumeMultiplexing();
  3542  00078A  ECD4  F010         	call	_resumeMultiplexing	;wreg free
  3543                           
  3544                           ;pictris.c: 942:                 CheckForNewLines = 1;
  3545  00078E  0E01               	movlw	1
  3546  000790  6E11               	movwf	_CheckForNewLines,c
  3547                           
  3548                           ;pictris.c: 945:     }
  3549                           
  3550                           ;pictris.c: 944:         }
  3551                           
  3552                           ;pictris.c: 943:             }
  3553  000792  D005               	goto	l357
  3554  000794                     l353:
  3555  000794  0408               	decf	_previous_direction,w,c
  3556  000796  B4D8               	btfsc	status,2,c
  3557  000798  D002               	goto	l357
  3558  00079A  0E03               	movlw	3
  3559  00079C  6E0D               	movwf	_direction,c
  3560  00079E                     l357:
  3561                           
  3562                           ;pictris.c: 952:     if (Right_Debounced)
  3563                           
  3564                           ;pictris.c: 949:     }
  3565  00079E  5033               	movf	_Right_Debounced,w,c	;volatile
  3566  0007A0  B4D8               	btfsc	status,2,c
  3567  0007A2  D052               	goto	l363
  3568                           
  3569                           ;pictris.c: 953:     {;pictris.c: 954:     pauseButtons();
  3570  0007A4  ECDA  F010         	call	_pauseButtons	;wreg free
  3571                           
  3572                           ;pictris.c: 955:         Right_Debounced = 0;
  3573  0007A8  0E00               	movlw	0
  3574  0007AA  6E33               	movwf	_Right_Debounced,c	;volatile
  3575                           
  3576                           ;pictris.c: 956:         Right_Delay = 500;
  3577  0007AC  0E01               	movlw	1
  3578  0007AE  6E2D               	movwf	_Right_Delay+1,c	;volatile
  3579  0007B0  0EF4               	movlw	244
  3580  0007B2  6E2C               	movwf	_Right_Delay,c	;volatile
  3581                           
  3582                           ;pictris.c: 957:     resumeButtons();
  3583  0007B4  ECD7  F010         	call	_resumeButtons	;wreg free
  3584                           
  3585                           ;pictris.c: 960:     if (tetris == 1) {
  3586  0007B8  0407               	decf	_tetris,w,c
  3587  0007BA  A4D8               	btfss	status,2,c
  3588  0007BC  D03F               	goto	l359
  3589                           
  3590                           ;pictris.c: 961:         if (!checkForRightWall(ObjectData))
  3591  0007BE  0E18               	movlw	low _ObjectData
  3592  0007C0  6E47               	movwf	checkForRightWall@pObject,c
  3593  0007C2  0E00               	movlw	high _ObjectData
  3594  0007C4  6E48               	movwf	checkForRightWall@pObject+1,c
  3595  0007C6  EC83  F010         	call	_checkForRightWall	;wreg free
  3596  0007CA  0900               	iorlw	0
  3597  0007CC  A4D8               	btfss	status,2,c
  3598  0007CE  D03C               	goto	l363
  3599                           
  3600                           ;pictris.c: 962:         {;pictris.c: 963:             mergeObjects(ObjectData, tmpObjec
      +                          tData, OVERRIDE);
  3601  0007D0  0E18               	movlw	low _ObjectData
  3602  0007D2  6E47               	movwf	mergeObjects@pSource,c
  3603  0007D4  0E00               	movlw	high _ObjectData
  3604  0007D6  6E48               	movwf	mergeObjects@pSource+1,c
  3605  0007D8  0E80               	movlw	low _tmpObjectData
  3606  0007DA  6E49               	movwf	mergeObjects@pTarget,c
  3607  0007DC  0E00               	movlw	high _tmpObjectData
  3608  0007DE  6E4A               	movwf	mergeObjects@pTarget+1,c
  3609  0007E0  0E00               	movlw	0
  3610  0007E2  6E4B               	movwf	mergeObjects@mode,c
  3611  0007E4  ECA6  F00A         	call	_mergeObjects	;wreg free
  3612                           
  3613                           ;pictris.c: 964:             moveObject(tmpObjectData, RIGHT, 1);
  3614  0007E8  0E80               	movlw	low _tmpObjectData
  3615  0007EA  6E47               	movwf	moveObject@pObject,c
  3616  0007EC  0E00               	movlw	high _tmpObjectData
  3617  0007EE  6E48               	movwf	moveObject@pObject+1,c
  3618  0007F0  0E03               	movlw	3
  3619  0007F2  6E49               	movwf	moveObject@direction,c
  3620  0007F4  0E01               	movlw	1
  3621  0007F6  6E4A               	movwf	moveObject@cycles,c
  3622  0007F8  EC52  F006         	call	_moveObject	;wreg free
  3623                           
  3624                           ;pictris.c: 966:             if (!collisionDetect(tmpObjectData, BackgroundData))
  3625  0007FC  0E80               	movlw	low _tmpObjectData
  3626  0007FE  6E47               	movwf	collisionDetect@pSource,c
  3627  000800  0E00               	movlw	high _tmpObjectData
  3628  000802  6E48               	movwf	collisionDetect@pSource+1,c
  3629  000804  0E90               	movlw	low _BackgroundData
  3630  000806  6E49               	movwf	collisionDetect@pTarget,c
  3631  000808  0E00               	movlw	high _BackgroundData
  3632  00080A  6E4A               	movwf	collisionDetect@pTarget+1,c
  3633  00080C  EC7E  F00E         	call	_collisionDetect	;wreg free
  3634  000810  0900               	iorlw	0
  3635  000812  A4D8               	btfss	status,2,c
  3636  000814  D019               	goto	l363
  3637                           
  3638                           ;pictris.c: 967:             {;pictris.c: 969:                 pauseMultiplexing();
  3639  000816  ECC2  F010         	call	_pauseMultiplexing	;wreg free
  3640                           
  3641                           ;pictris.c: 971:                 mergeObjects(tmpObjectData, ObjectData, OVERRIDE);
  3642  00081A  0E80               	movlw	low _tmpObjectData
  3643  00081C  6E47               	movwf	mergeObjects@pSource,c
  3644  00081E  0E00               	movlw	high _tmpObjectData
  3645  000820  6E48               	movwf	mergeObjects@pSource+1,c
  3646  000822  0E18               	movlw	low _ObjectData
  3647  000824  6E49               	movwf	mergeObjects@pTarget,c
  3648  000826  0E00               	movlw	high _ObjectData
  3649  000828  6E4A               	movwf	mergeObjects@pTarget+1,c
  3650  00082A  0E00               	movlw	0
  3651  00082C  6E4B               	movwf	mergeObjects@mode,c
  3652  00082E  ECA6  F00A         	call	_mergeObjects	;wreg free
  3653                           
  3654                           ;pictris.c: 973:                 resumeMultiplexing();
  3655  000832  ECD4  F010         	call	_resumeMultiplexing	;wreg free
  3656                           
  3657                           ;pictris.c: 975:                 CheckForNewLines = 1;
  3658  000836  0E01               	movlw	1
  3659  000838  6E11               	movwf	_CheckForNewLines,c
  3660                           
  3661                           ;pictris.c: 978:     }
  3662                           
  3663                           ;pictris.c: 977:         }
  3664                           
  3665                           ;pictris.c: 976:             }
  3666  00083A  D006               	goto	l363
  3667  00083C                     l359:
  3668  00083C  0E03               	movlw	3
  3669  00083E  1808               	xorwf	_previous_direction,w,c
  3670  000840  B4D8               	btfsc	status,2,c
  3671  000842  D002               	goto	l363
  3672  000844  0E01               	movlw	1
  3673  000846  6E0D               	movwf	_direction,c
  3674  000848                     l363:
  3675                           
  3676                           ;pictris.c: 984:     if (Rotate_Debounced)
  3677                           
  3678                           ;pictris.c: 982:     }
  3679  000848  5032               	movf	_Rotate_Debounced,w,c	;volatile
  3680  00084A  B4D8               	btfsc	status,2,c
  3681  00084C  D054               	goto	l369
  3682                           
  3683                           ;pictris.c: 985:     {;pictris.c: 986:     pauseButtons();
  3684  00084E  ECDA  F010         	call	_pauseButtons	;wreg free
  3685                           
  3686                           ;pictris.c: 987:         Rotate_Debounced = 0;
  3687  000852  0E00               	movlw	0
  3688  000854  6E32               	movwf	_Rotate_Debounced,c	;volatile
  3689                           
  3690                           ;pictris.c: 988:         Rotate_Delay = 500;
  3691  000856  0E01               	movlw	1
  3692  000858  6E2B               	movwf	_Rotate_Delay+1,c	;volatile
  3693  00085A  0EF4               	movlw	244
  3694  00085C  6E2A               	movwf	_Rotate_Delay,c	;volatile
  3695                           
  3696                           ;pictris.c: 989:     resumeButtons();
  3697  00085E  ECD7  F010         	call	_resumeButtons	;wreg free
  3698                           
  3699                           ;pictris.c: 991:     if (tetris == 1 ){
  3700  000862  0407               	decf	_tetris,w,c
  3701  000864  A4D8               	btfss	status,2,c
  3702  000866  D041               	goto	l365
  3703                           
  3704                           ;pictris.c: 992:         newRotation(ObjectData, tmpObjectData, CW);
  3705  000868  0E18               	movlw	low _ObjectData
  3706  00086A  6E53               	movwf	newRotation@pSource,c
  3707  00086C  0E00               	movlw	high _ObjectData
  3708  00086E  6E54               	movwf	newRotation@pSource+1,c
  3709  000870  0E80               	movlw	low _tmpObjectData
  3710  000872  6E55               	movwf	newRotation@pTarget,c
  3711  000874  0E00               	movlw	high _tmpObjectData
  3712  000876  6E56               	movwf	newRotation@pTarget+1,c
  3713  000878  0E01               	movlw	1
  3714  00087A  6E57               	movwf	newRotation@rotation,c
  3715  00087C  EC0D  F009         	call	_newRotation	;wreg free
  3716                           
  3717                           ;pictris.c: 994:         if (pixelCount(ObjectData) == pixelCount(tmpObjectData))
  3718  000880  0E18               	movlw	low _ObjectData
  3719  000882  6E47               	movwf	pixelCount@pSource,c
  3720  000884  0E00               	movlw	high _ObjectData
  3721  000886  6E48               	movwf	pixelCount@pSource+1,c
  3722  000888  EC49  F00E         	call	_pixelCount	;wreg free
  3723  00088C  6E61               	movwf	??_checkButtons& (0+255),c
  3724  00088E  0E80               	movlw	low _tmpObjectData
  3725  000890  6E47               	movwf	pixelCount@pSource,c
  3726  000892  0E00               	movlw	high _tmpObjectData
  3727  000894  6E48               	movwf	pixelCount@pSource+1,c
  3728  000896  EC49  F00E         	call	_pixelCount	;wreg free
  3729  00089A  1861               	xorwf	??_checkButtons,w,c
  3730  00089C  A4D8               	btfss	status,2,c
  3731  00089E  D02B               	goto	l369
  3732                           
  3733                           ;pictris.c: 995:         {;pictris.c: 997:             if (!collisionDetect(tmpObjectDat
      +                          a, BackgroundData))
  3734  0008A0  0E80               	movlw	low _tmpObjectData
  3735  0008A2  6E47               	movwf	collisionDetect@pSource,c
  3736  0008A4  0E00               	movlw	high _tmpObjectData
  3737  0008A6  6E48               	movwf	collisionDetect@pSource+1,c
  3738  0008A8  0E90               	movlw	low _BackgroundData
  3739  0008AA  6E49               	movwf	collisionDetect@pTarget,c
  3740  0008AC  0E00               	movlw	high _BackgroundData
  3741  0008AE  6E4A               	movwf	collisionDetect@pTarget+1,c
  3742  0008B0  EC7E  F00E         	call	_collisionDetect	;wreg free
  3743  0008B4  0900               	iorlw	0
  3744  0008B6  A4D8               	btfss	status,2,c
  3745  0008B8  D01E               	goto	l369
  3746                           
  3747                           ;pictris.c: 998:             {;pictris.c: 1002:                 pauseMultiplexing();
  3748  0008BA  ECC2  F010         	call	_pauseMultiplexing	;wreg free
  3749                           
  3750                           ;pictris.c: 1005:                 mergeObjects(tmpObjectData, ObjectData, OVERRIDE);
  3751  0008BE  0E80               	movlw	low _tmpObjectData
  3752  0008C0  6E47               	movwf	mergeObjects@pSource,c
  3753  0008C2  0E00               	movlw	high _tmpObjectData
  3754  0008C4  6E48               	movwf	mergeObjects@pSource+1,c
  3755  0008C6  0E18               	movlw	low _ObjectData
  3756  0008C8  6E49               	movwf	mergeObjects@pTarget,c
  3757  0008CA  0E00               	movlw	high _ObjectData
  3758  0008CC  6E4A               	movwf	mergeObjects@pTarget+1,c
  3759  0008CE  0E00               	movlw	0
  3760  0008D0  6E4B               	movwf	mergeObjects@mode,c
  3761  0008D2  ECA6  F00A         	call	_mergeObjects	;wreg free
  3762                           
  3763                           ;pictris.c: 1007:                 resumeMultiplexing();
  3764  0008D6  ECD4  F010         	call	_resumeMultiplexing	;wreg free
  3765                           
  3766                           ;pictris.c: 1009:                 IsRotated = !IsRotated;
  3767  0008DA  5013               	movf	_IsRotated,w,c
  3768  0008DC  A4D8               	btfss	status,2,c
  3769  0008DE  D002               	goto	u4770
  3770  0008E0  0E01               	movlw	1
  3771  0008E2  D001               	goto	u4780
  3772  0008E4                     u4770:
  3773  0008E4  0E00               	movlw	0
  3774  0008E6                     u4780:
  3775  0008E6  6E13               	movwf	_IsRotated,c
  3776                           
  3777                           ;pictris.c: 1012:     }
  3778                           
  3779                           ;pictris.c: 1011:         }
  3780                           
  3781                           ;pictris.c: 1010:             }
  3782  0008E8  D006               	goto	l369
  3783  0008EA                     l365:
  3784  0008EA  0E02               	movlw	2
  3785  0008EC  1808               	xorwf	_previous_direction,w,c
  3786  0008EE  B4D8               	btfsc	status,2,c
  3787  0008F0  D002               	goto	l369
  3788  0008F2  0E00               	movlw	0
  3789  0008F4  6E0D               	movwf	_direction,c
  3790  0008F6                     l369:
  3791                           
  3792                           ;pictris.c: 1018:     if (Down_Debounced)
  3793                           
  3794                           ;pictris.c: 1016:     }
  3795  0008F6  5031               	movf	_Down_Debounced,w,c	;volatile
  3796  0008F8  B4D8               	btfsc	status,2,c
  3797  0008FA  0012               	return	
  3798                           
  3799                           ;pictris.c: 1019:     {;pictris.c: 1021:         if (tetris == 1) {
  3800  0008FC  0407               	decf	_tetris,w,c
  3801  0008FE  A4D8               	btfss	status,2,c
  3802  000900  D00A               	goto	l371
  3803  000902                     u4810:
  3804                           
  3805                           ;pictris.c: 1022:         while (moveObjectDown(ObjectData))
  3806                           
  3807                           ;pictris.c: 1023:             continue; }
  3808                           
  3809                           ;pictris.c: 1022:         while (moveObjectDown(ObjectData))
  3810  000902  0E18               	movlw	low _ObjectData
  3811  000904  6E5A               	movwf	moveObjectDown@pObject,c
  3812  000906  0E00               	movlw	high _ObjectData
  3813  000908  6E5B               	movwf	moveObjectDown@pObject+1,c
  3814  00090A  EC15  F00B         	call	_moveObjectDown	;wreg free
  3815  00090E  0900               	iorlw	0
  3816  000910  B4D8               	btfsc	status,2,c
  3817  000912  D006               	goto	l376
  3818  000914  D7F6               	goto	u4810
  3819  000916                     l371:
  3820  000916  5008               	movf	_previous_direction,w,c
  3821  000918  B4D8               	btfsc	status,2,c
  3822  00091A  D002               	goto	l376
  3823  00091C  0E02               	movlw	2
  3824  00091E  6E0D               	movwf	_direction,c
  3825  000920                     l376:
  3826                           
  3827                           ;pictris.c: 1027:     pauseButtons();
  3828  000920  ECDA  F010         	call	_pauseButtons	;wreg free
  3829                           
  3830                           ;pictris.c: 1028:         Down_Debounced = 0;
  3831  000924  0E00               	movlw	0
  3832  000926  6E31               	movwf	_Down_Debounced,c	;volatile
  3833                           
  3834                           ;pictris.c: 1029:         Down_Delay = 0x7fff;
  3835  000928  0E7F               	movlw	127
  3836  00092A  6E29               	movwf	_Down_Delay+1,c	;volatile
  3837  00092C  6828               	setf	_Down_Delay,c	;volatile
  3838                           
  3839                           ;pictris.c: 1030:     resumeButtons();
  3840  00092E  ECD7  F010         	call	_resumeButtons	;wreg free
  3841  000932  0012               	return	
  3842  000934                     __end_of_checkButtons:
  3843                           	opt stack 0
  3844                           tblptru	equ	0xFF8
  3845                           tblptrh	equ	0xFF7
  3846                           tblptrl	equ	0xFF6
  3847                           tablat	equ	0xFF5
  3848                           prodh	equ	0xFF4
  3849                           prodl	equ	0xFF3
  3850                           intcon	equ	0xFF2
  3851                           postinc0	equ	0xFEE
  3852                           wreg	equ	0xFE8
  3853                           indf1	equ	0xFE7
  3854                           postdec1	equ	0xFE5
  3855                           plusw1	equ	0xFE3
  3856                           fsr1h	equ	0xFE2
  3857                           fsr1l	equ	0xFE1
  3858                           indf2	equ	0xFDF
  3859                           postinc2	equ	0xFDE
  3860                           postdec2	equ	0xFDD
  3861                           plusw2	equ	0xFDB
  3862                           fsr2h	equ	0xFDA
  3863                           fsr2l	equ	0xFD9
  3864                           status	equ	0xFD8
  3865                           
  3866 ;; *************** function _pixelCount *****************
  3867 ;; Defined at:
  3868 ;;		line 845 in file "pictris.c"
  3869 ;; Parameters:    Size  Location     Type
  3870 ;;  pSource         2   18[COMRAM] PTR volatile unsigned sh
  3871 ;;		 -> tmpObjectData(16), ObjectData(16), 
  3872 ;; Auto vars:     Size  Location     Type
  3873 ;;  y               1   27[COMRAM] unsigned char 
  3874 ;;  x               1   26[COMRAM] unsigned char 
  3875 ;;  r               1   25[COMRAM] unsigned char 
  3876 ;; Return value:  Size  Location     Type
  3877 ;;                  1    wreg      unsigned char 
  3878 ;; Registers used:
  3879 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  3880 ;; Tracked objects:
  3881 ;;		On entry : 0/0
  3882 ;;		On exit  : 0/0
  3883 ;;		Unchanged: 0/0
  3884 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3885 ;;      Params:         2       0       0       0       0       0       0
  3886 ;;      Locals:         3       0       0       0       0       0       0
  3887 ;;      Temps:          5       0       0       0       0       0       0
  3888 ;;      Totals:        10       0       0       0       0       0       0
  3889 ;;Total ram usage:       10 bytes
  3890 ;; Hardware stack levels used:    1
  3891 ;; Hardware stack levels required when called:    2
  3892 ;; This function calls:
  3893 ;;		Nothing
  3894 ;; This function is called by:
  3895 ;;		_checkButtons
  3896 ;; This function uses a non-reentrant model
  3897 ;;
  3898                           
  3899                           	psect	text19
  3900  001C92                     __ptext19:
  3901                           	opt stack 0
  3902  001C92                     _pixelCount:
  3903                           	opt stack 26
  3904                           
  3905                           ;pictris.c: 845: byte pixelCount(volatile uint16_t * pSource);pictris.c: 846: {;pictris.
      +                          c: 847:     byte r = 0, x, y;
  3906                           
  3907                           ;incstack = 0
  3908  001C92  0E00               	movlw	0
  3909  001C94  6E4E               	movwf	pixelCount@r,c
  3910                           
  3911                           ;pictris.c: 849:     for (x = 0; x < 8; x++)
  3912  001C96  0E00               	movlw	0
  3913  001C98  6E4F               	movwf	pixelCount@x,c
  3914  001C9A                     l3023:
  3915  001C9A  0E07               	movlw	7
  3916  001C9C  644F               	cpfsgt	pixelCount@x,c
  3917  001C9E  D001               	goto	l338
  3918  001CA0  D02B               	goto	u2780
  3919  001CA2                     l338:
  3920                           
  3921                           ;pictris.c: 850:         for (y = 0; y < 16; y++)
  3922  001CA2  0E00               	movlw	0
  3923  001CA4  6E50               	movwf	pixelCount@y,c
  3924  001CA6                     l3029:
  3925  001CA6  0E0F               	movlw	15
  3926  001CA8  6450               	cpfsgt	pixelCount@y,c
  3927  001CAA  D001               	goto	l340
  3928  001CAC  D023               	goto	u2770
  3929  001CAE                     l340:
  3930                           
  3931                           ;pictris.c: 851:             if (pSource[x] & (1<<y))
  3932  001CAE  504F               	movf	pixelCount@x,w,c
  3933  001CB0  0D02               	mullw	2
  3934  001CB2  50F3               	movf	prodl,w,c
  3935  001CB4  2447               	addwf	pixelCount@pSource,w,c
  3936  001CB6  6ED9               	movwf	fsr2l,c
  3937  001CB8  50F4               	movf	prodh,w,c
  3938  001CBA  2048               	addwfc	pixelCount@pSource+1,w,c
  3939  001CBC  6EDA               	movwf	fsr2h,c
  3940  001CBE  CFDE F049          	movff	postinc2,??_pixelCount
  3941  001CC2  CFDD F04A          	movff	postdec2,??_pixelCount+1
  3942  001CC6  C050  F04B         	movff	pixelCount@y,??_pixelCount+2
  3943  001CCA  0E01               	movlw	1
  3944  001CCC  6E4C               	movwf	(??_pixelCount+3)& (0+255),c
  3945  001CCE  0E00               	movlw	0
  3946  001CD0  6E4D               	movwf	(??_pixelCount+4)& (0+255),c
  3947  001CD2  2A4B               	incf	??_pixelCount+2,f,c
  3948  001CD4  D003               	goto	u2754
  3949  001CD6                     u2755:
  3950  001CD6  90D8               	bcf	status,0,c
  3951  001CD8  364C               	rlcf	??_pixelCount+3,f,c
  3952  001CDA  364D               	rlcf	??_pixelCount+4,f,c
  3953  001CDC                     u2754:
  3954  001CDC  2E4B               	decfsz	??_pixelCount+2,f,c
  3955  001CDE  D7FB               	goto	u2755
  3956  001CE0  5049               	movf	??_pixelCount,w,c
  3957  001CE2  164C               	andwf	??_pixelCount+3,f,c
  3958  001CE4  504A               	movf	??_pixelCount+1,w,c
  3959  001CE6  164D               	andwf	??_pixelCount+4,f,c
  3960  001CE8  504C               	movf	??_pixelCount+3,w,c
  3961  001CEA  104D               	iorwf	??_pixelCount+4,w,c
  3962  001CEC  A4D8               	btfss	status,2,c
  3963                           
  3964                           ;pictris.c: 852:                 r++;
  3965  001CEE  2A4E               	incf	pixelCount@r,f,c
  3966  001CF0  2A50               	incf	pixelCount@y,f,c
  3967  001CF2  D7D9               	goto	l3029
  3968  001CF4                     u2770:
  3969  001CF4  2A4F               	incf	pixelCount@x,f,c
  3970  001CF6  D7D1               	goto	l3023
  3971  001CF8                     u2780:
  3972                           
  3973                           ;pictris.c: 853:     return r;
  3974  001CF8  504E               	movf	pixelCount@r,w,c
  3975  001CFA  0012               	return	
  3976  001CFC                     __end_of_pixelCount:
  3977                           	opt stack 0
  3978                           tblptru	equ	0xFF8
  3979                           tblptrh	equ	0xFF7
  3980                           tblptrl	equ	0xFF6
  3981                           tablat	equ	0xFF5
  3982                           prodh	equ	0xFF4
  3983                           prodl	equ	0xFF3
  3984                           intcon	equ	0xFF2
  3985                           postinc0	equ	0xFEE
  3986                           wreg	equ	0xFE8
  3987                           indf1	equ	0xFE7
  3988                           postdec1	equ	0xFE5
  3989                           plusw1	equ	0xFE3
  3990                           fsr1h	equ	0xFE2
  3991                           fsr1l	equ	0xFE1
  3992                           indf2	equ	0xFDF
  3993                           postinc2	equ	0xFDE
  3994                           postdec2	equ	0xFDD
  3995                           plusw2	equ	0xFDB
  3996                           fsr2h	equ	0xFDA
  3997                           fsr2l	equ	0xFD9
  3998                           status	equ	0xFD8
  3999                           
  4000 ;; *************** function _newRotation *****************
  4001 ;; Defined at:
  4002 ;;		line 801 in file "pictris.c"
  4003 ;; Parameters:    Size  Location     Type
  4004 ;;  pSource         2   30[COMRAM] PTR volatile unsigned sh
  4005 ;;		 -> ObjectData(16), 
  4006 ;;  pTarget         2   32[COMRAM] PTR unsigned short 
  4007 ;;		 -> tmpObjectData(16), 
  4008 ;;  rotation        1   34[COMRAM] enum E2756
  4009 ;; Auto vars:     Size  Location     Type
  4010 ;;  y1              1   43[COMRAM] unsigned char 
  4011 ;;  x1              1   42[COMRAM] unsigned char 
  4012 ;;  y2              1   41[COMRAM] char 
  4013 ;;  x2              1   40[COMRAM] char 
  4014 ;; Return value:  Size  Location     Type
  4015 ;;                  1    wreg      void 
  4016 ;; Registers used:
  4017 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4018 ;; Tracked objects:
  4019 ;;		On entry : 0/0
  4020 ;;		On exit  : 0/0
  4021 ;;		Unchanged: 0/0
  4022 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4023 ;;      Params:         5       0       0       0       0       0       0
  4024 ;;      Locals:         4       0       0       0       0       0       0
  4025 ;;      Temps:          5       0       0       0       0       0       0
  4026 ;;      Totals:        14       0       0       0       0       0       0
  4027 ;;Total ram usage:       14 bytes
  4028 ;; Hardware stack levels used:    1
  4029 ;; Hardware stack levels required when called:    3
  4030 ;; This function calls:
  4031 ;;		___wmul
  4032 ;;		_clearArray
  4033 ;;		_memcpy
  4034 ;; This function is called by:
  4035 ;;		_checkButtons
  4036 ;; This function uses a non-reentrant model
  4037 ;;
  4038                           
  4039                           	psect	text20
  4040  00121A                     __ptext20:
  4041                           	opt stack 0
  4042  00121A                     _newRotation:
  4043                           	opt stack 25
  4044                           
  4045                           ;pictris.c: 801: void newRotation(volatile uint16_t * pSource, uint16_t * pTarget, rotat
      +                          ion_t rotation);pictris.c: 802: {;pictris.c: 803:     int8_t x2, y2;;pictris.c: 804:    
      +                           byte x1, y1;;pictris.c: 807:     if (LimitedRotation == 2)
  4046                           
  4047                           ;incstack = 0
  4048  00121A  0E02               	movlw	2
  4049  00121C  1816               	xorwf	_LimitedRotation,w,c
  4050  00121E  A4D8               	btfss	status,2,c
  4051  001220  D00F               	goto	l324
  4052                           
  4053                           ;pictris.c: 808:         memcpy(pTarget, pSource, 16);
  4054  001222  C055  F047         	movff	newRotation@pTarget,memcpy@dest
  4055  001226  C056  F048         	movff	newRotation@pTarget+1,memcpy@dest+1
  4056  00122A  C053  F049         	movff	newRotation@pSource,memcpy@src
  4057  00122E  C054  F04A         	movff	newRotation@pSource+1,memcpy@src+1
  4058  001232  0E00               	movlw	0
  4059  001234  6E4C               	movwf	memcpy@n+1,c
  4060  001236  0E10               	movlw	16
  4061  001238  6E4B               	movwf	memcpy@n,c
  4062  00123A  ECD5  F00E         	call	_memcpy	;wreg free
  4063  00123E  0012               	return	
  4064  001240                     l324:
  4065                           
  4066                           ;pictris.c: 810:     {;pictris.c: 812:         clearArray(pTarget, 8);
  4067  001240  C055  F047         	movff	newRotation@pTarget,clearArray@pArray
  4068  001244  C056  F048         	movff	newRotation@pTarget+1,clearArray@pArray+1
  4069  001248  0E00               	movlw	0
  4070  00124A  6E4A               	movwf	clearArray@size+1,c
  4071  00124C  0E08               	movlw	8
  4072  00124E  6E49               	movwf	clearArray@size,c
  4073  001250  ECDE  F00F         	call	_clearArray	;wreg free
  4074                           
  4075                           ;pictris.c: 817:         if (LimitedRotation == 1 && IsRotated)
  4076  001254  0416               	decf	_LimitedRotation,w,c
  4077  001256  A4D8               	btfss	status,2,c
  4078  001258  D005               	goto	l326
  4079  00125A  5013               	movf	_IsRotated,w,c
  4080  00125C  B4D8               	btfsc	status,2,c
  4081  00125E  D002               	goto	l326
  4082                           
  4083                           ;pictris.c: 818:             rotation = CCW;
  4084  001260  0E00               	movlw	0
  4085  001262  6E57               	movwf	newRotation@rotation,c
  4086  001264                     l326:
  4087                           
  4088                           ;pictris.c: 820:         for (x1 = 0; x1 < 8; x1++)
  4089  001264  0E00               	movlw	0
  4090  001266  6E5F               	movwf	newRotation@x1,c
  4091  001268                     l4147:
  4092  001268  0E07               	movlw	7
  4093  00126A  645F               	cpfsgt	newRotation@x1,c
  4094  00126C  D001               	goto	l327
  4095  00126E  0012               	return	
  4096  001270                     l327:
  4097                           
  4098                           ;pictris.c: 821:             for (y1 = 0; y1 < 16; y1++)
  4099  001270  0E00               	movlw	0
  4100  001272  6E60               	movwf	newRotation@y1,c
  4101  001274                     l4153:
  4102  001274  0E0F               	movlw	15
  4103  001276  6460               	cpfsgt	newRotation@y1,c
  4104  001278  D001               	goto	l329
  4105  00127A  D068               	goto	u4470
  4106  00127C                     l329:
  4107                           
  4108                           ;pictris.c: 822:             {;pictris.c: 823:                 if (pSource[x1] & (1<<y1)
      +                          )
  4109  00127C  505F               	movf	newRotation@x1,w,c
  4110  00127E  0D02               	mullw	2
  4111  001280  50F3               	movf	prodl,w,c
  4112  001282  2453               	addwf	newRotation@pSource,w,c
  4113  001284  6ED9               	movwf	fsr2l,c
  4114  001286  50F4               	movf	prodh,w,c
  4115  001288  2054               	addwfc	newRotation@pSource+1,w,c
  4116  00128A  6EDA               	movwf	fsr2h,c
  4117  00128C  CFDE F058          	movff	postinc2,??_newRotation
  4118  001290  CFDD F059          	movff	postdec2,??_newRotation+1
  4119  001294  C060  F05A         	movff	newRotation@y1,??_newRotation+2
  4120  001298  0E01               	movlw	1
  4121  00129A  6E5B               	movwf	(??_newRotation+3)& (0+255),c
  4122  00129C  0E00               	movlw	0
  4123  00129E  6E5C               	movwf	(??_newRotation+4)& (0+255),c
  4124  0012A0  2A5A               	incf	??_newRotation+2,f,c
  4125  0012A2  D003               	goto	u4394
  4126  0012A4                     u4395:
  4127  0012A4  90D8               	bcf	status,0,c
  4128  0012A6  365B               	rlcf	??_newRotation+3,f,c
  4129  0012A8  365C               	rlcf	??_newRotation+4,f,c
  4130  0012AA                     u4394:
  4131  0012AA  2E5A               	decfsz	??_newRotation+2,f,c
  4132  0012AC  D7FB               	goto	u4395
  4133  0012AE  5058               	movf	??_newRotation,w,c
  4134  0012B0  165B               	andwf	??_newRotation+3,f,c
  4135  0012B2  5059               	movf	??_newRotation+1,w,c
  4136  0012B4  165C               	andwf	??_newRotation+4,f,c
  4137  0012B6  505B               	movf	??_newRotation+3,w,c
  4138  0012B8  105C               	iorwf	??_newRotation+4,w,c
  4139  0012BA  B4D8               	btfsc	status,2,c
  4140  0012BC  D045               	goto	l334
  4141                           
  4142                           ;pictris.c: 824:                 {;pictris.c: 825:                     if (rotation == C
      +                          W)
  4143  0012BE  0457               	decf	newRotation@rotation,w,c
  4144  0012C0  A4D8               	btfss	status,2,c
  4145  0012C2  D009               	goto	l332
  4146                           
  4147                           ;pictris.c: 826:                     {;pictris.c: 827:                         x2 = Orig
      +                          inX + OriginY - y1;
  4148  0012C4  5060               	movf	newRotation@y1,w,c
  4149  0012C6  0800               	sublw	0
  4150  0012C8  240F               	addwf	_OriginX,w,c
  4151  0012CA  240E               	addwf	_OriginY,w,c
  4152  0012CC  6E5D               	movwf	newRotation@x2,c
  4153                           
  4154                           ;pictris.c: 828:                         y2 = x1 + OriginY - OriginX;
  4155  0012CE  500F               	movf	_OriginX,w,c
  4156  0012D0  0800               	sublw	0
  4157  0012D2  245F               	addwf	newRotation@x1,w,c
  4158  0012D4  D008               	goto	L2
  4159  0012D6                     l332:
  4160                           
  4161                           ;pictris.c: 831:                     {;pictris.c: 832:                         x2 = y1 +
      +                           OriginX - OriginY;
  4162  0012D6  500E               	movf	_OriginY,w,c
  4163  0012D8  0800               	sublw	0
  4164  0012DA  2460               	addwf	newRotation@y1,w,c
  4165  0012DC  240F               	addwf	_OriginX,w,c
  4166  0012DE  6E5D               	movwf	newRotation@x2,c
  4167                           
  4168                           ;pictris.c: 833:                         y2 = OriginX + OriginY - x1;
  4169  0012E0  505F               	movf	newRotation@x1,w,c
  4170  0012E2  0800               	sublw	0
  4171  0012E4  240F               	addwf	_OriginX,w,c
  4172  0012E6                     L2:
  4173  0012E6  240E               	addwf	_OriginY,w,c
  4174  0012E8  6E5E               	movwf	newRotation@y2,c
  4175                           
  4176                           ;pictris.c: 835:                     if (x2 >= 0 && x2 < 8 &&
  4177                           
  4178                           ;pictris.c: 834:                     }
  4179  0012EA  BE5D               	btfsc	newRotation@x2,7,c
  4180  0012EC  D02D               	goto	l334
  4181  0012EE  505D               	movf	newRotation@x2,w,c
  4182  0012F0  0A80               	xorlw	128
  4183  0012F2  0F78               	addlw	-136
  4184  0012F4  A0D8               	btfss	status,0,c
  4185  0012F6  BE5E               	btfsc	newRotation@y2,7,c
  4186  0012F8  D027               	goto	l334
  4187  0012FA  505E               	movf	newRotation@y2,w,c
  4188  0012FC  0A80               	xorlw	128
  4189  0012FE  0F70               	addlw	-144
  4190  001300  B0D8               	btfsc	status,0,c
  4191  001302  D022               	goto	l334
  4192                           
  4193                           ;pictris.c: 837:                         pTarget[x2] |= (1<<y2);
  4194  001304  C05E  F058         	movff	newRotation@y2,??_newRotation
  4195  001308  0E01               	movlw	1
  4196  00130A  6E59               	movwf	(??_newRotation+1)& (0+255),c
  4197  00130C  0E00               	movlw	0
  4198  00130E  6E5A               	movwf	(??_newRotation+2)& (0+255),c
  4199  001310  2A58               	incf	??_newRotation,f,c
  4200  001312  D003               	goto	u4464
  4201  001314                     u4465:
  4202  001314  90D8               	bcf	status,0,c
  4203  001316  3659               	rlcf	??_newRotation+1,f,c
  4204  001318  365A               	rlcf	??_newRotation+2,f,c
  4205  00131A                     u4464:
  4206  00131A  2E58               	decfsz	??_newRotation,f,c
  4207  00131C  D7FB               	goto	u4465
  4208  00131E  505D               	movf	newRotation@x2,w,c
  4209  001320  6E4D               	movwf	___wmul@multiplier,c
  4210  001322  6A4E               	clrf	___wmul@multiplier+1,c
  4211  001324  BE4D               	btfsc	___wmul@multiplier,7,c
  4212  001326  064E               	decf	___wmul@multiplier+1,f,c
  4213  001328  0E00               	movlw	0
  4214  00132A  6E50               	movwf	___wmul@multiplicand+1,c
  4215  00132C  0E02               	movlw	2
  4216  00132E  6E4F               	movwf	___wmul@multiplicand,c
  4217  001330  EC61  F010         	call	___wmul	;wreg free
  4218  001334  504D               	movf	?___wmul,w,c
  4219  001336  2455               	addwf	newRotation@pTarget,w,c
  4220  001338  6ED9               	movwf	fsr2l,c
  4221  00133A  504E               	movf	?___wmul+1,w,c
  4222  00133C  2056               	addwfc	newRotation@pTarget+1,w,c
  4223  00133E  6EDA               	movwf	fsr2h,c
  4224  001340  5059               	movf	??_newRotation+1,w,c
  4225  001342  12DE               	iorwf	postinc2,f,c
  4226  001344  505A               	movf	??_newRotation+2,w,c
  4227  001346  12DD               	iorwf	postdec2,f,c
  4228  001348                     l334:
  4229                           
  4230                           ;pictris.c: 839:             }
  4231                           
  4232                           ;pictris.c: 838:                 }
  4233  001348  2A60               	incf	newRotation@y1,f,c
  4234  00134A  D794               	goto	l4153
  4235  00134C                     u4470:
  4236  00134C  2A5F               	incf	newRotation@x1,f,c
  4237  00134E  D78C               	goto	l4147
  4238  001350                     __end_of_newRotation:
  4239                           	opt stack 0
  4240                           tblptru	equ	0xFF8
  4241                           tblptrh	equ	0xFF7
  4242                           tblptrl	equ	0xFF6
  4243                           tablat	equ	0xFF5
  4244                           prodh	equ	0xFF4
  4245                           prodl	equ	0xFF3
  4246                           intcon	equ	0xFF2
  4247                           postinc0	equ	0xFEE
  4248                           wreg	equ	0xFE8
  4249                           indf1	equ	0xFE7
  4250                           postdec1	equ	0xFE5
  4251                           plusw1	equ	0xFE3
  4252                           fsr1h	equ	0xFE2
  4253                           fsr1l	equ	0xFE1
  4254                           indf2	equ	0xFDF
  4255                           postinc2	equ	0xFDE
  4256                           postdec2	equ	0xFDD
  4257                           plusw2	equ	0xFDB
  4258                           fsr2h	equ	0xFDA
  4259                           fsr2l	equ	0xFD9
  4260                           status	equ	0xFD8
  4261                           
  4262 ;; *************** function _moveObjectDown *****************
  4263 ;; Defined at:
  4264 ;;		line 857 in file "pictris.c"
  4265 ;; Parameters:    Size  Location     Type
  4266 ;;  pObject         2   37[COMRAM] PTR volatile unsigned sh
  4267 ;;		 -> ObjectData(16), 
  4268 ;; Auto vars:     Size  Location     Type
  4269 ;;  result          1   39[COMRAM] _Bool 
  4270 ;; Return value:  Size  Location     Type
  4271 ;;                  1    wreg      _Bool 
  4272 ;; Registers used:
  4273 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4274 ;; Tracked objects:
  4275 ;;		On entry : 0/0
  4276 ;;		On exit  : 0/0
  4277 ;;		Unchanged: 0/0
  4278 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4279 ;;      Params:         2       0       0       0       0       0       0
  4280 ;;      Locals:         1       0       0       0       0       0       0
  4281 ;;      Temps:          0       0       0       0       0       0       0
  4282 ;;      Totals:         3       0       0       0       0       0       0
  4283 ;;Total ram usage:        3 bytes
  4284 ;; Hardware stack levels used:    1
  4285 ;; Hardware stack levels required when called:    4
  4286 ;; This function calls:
  4287 ;;		_checkForBottom
  4288 ;;		_collisionDetect
  4289 ;;		_mergeObjects
  4290 ;;		_moveObject
  4291 ;;		_pauseMultiplexing
  4292 ;;		_resumeMultiplexing
  4293 ;;		_selectNextObject
  4294 ;; This function is called by:
  4295 ;;		_checkButtons
  4296 ;;		_mainGameLoop
  4297 ;; This function uses a non-reentrant model
  4298 ;;
  4299                           
  4300                           	psect	text21
  4301  00162A                     __ptext21:
  4302                           	opt stack 0
  4303  00162A                     _moveObjectDown:
  4304                           	opt stack 25
  4305                           
  4306                           ;pictris.c: 857: _Bool moveObjectDown(volatile uint16_t * pObject);pictris.c: 858: {;pic
      +                          tris.c: 859:     _Bool result = 1;
  4307                           
  4308                           ;incstack = 0
  4309  00162A  0E01               	movlw	1
  4310  00162C  6E5C               	movwf	moveObjectDown@result,c
  4311                           
  4312                           ;pictris.c: 862:     pauseMultiplexing();
  4313  00162E  ECC2  F010         	call	_pauseMultiplexing	;wreg free
  4314                           
  4315                           ;pictris.c: 865:     if (checkForBottom(pObject))
  4316  001632  C05A  F047         	movff	moveObjectDown@pObject,checkForBottom@pObject
  4317  001636  C05B  F048         	movff	moveObjectDown@pObject+1,checkForBottom@pObject+1
  4318  00163A  ECC4  F00F         	call	_checkForBottom	;wreg free
  4319  00163E  0900               	iorlw	0
  4320  001640  B4D8               	btfsc	status,2,c
  4321  001642  D015               	goto	l346
  4322                           
  4323                           ;pictris.c: 866:     {;pictris.c: 868:         result = 0;
  4324  001644  0E00               	movlw	0
  4325  001646  6E5C               	movwf	moveObjectDown@result,c
  4326                           
  4327                           ;pictris.c: 870:         mergeObjects(pObject, BackgroundData, MERGE);
  4328  001648  C05A  F047         	movff	moveObjectDown@pObject,mergeObjects@pSource
  4329  00164C  C05B  F048         	movff	moveObjectDown@pObject+1,mergeObjects@pSource+1
  4330  001650  0E90               	movlw	low _BackgroundData
  4331  001652  6E49               	movwf	mergeObjects@pTarget,c
  4332  001654  0E00               	movlw	high _BackgroundData
  4333  001656  6E4A               	movwf	mergeObjects@pTarget+1,c
  4334  001658  0E01               	movlw	1
  4335  00165A  6E4B               	movwf	mergeObjects@mode,c
  4336  00165C  ECA6  F00A         	call	_mergeObjects	;wreg free
  4337                           
  4338                           ;pictris.c: 872:         selectNextObject(pObject);
  4339  001660  C05A  F053         	movff	moveObjectDown@pObject,selectNextObject@pTarget
  4340  001664  C05B  F054         	movff	moveObjectDown@pObject+1,selectNextObject@pTarget+1
  4341  001668  EC49  F00C         	call	_selectNextObject	;wreg free
  4342  00166C  D040               	goto	l4209
  4343  00166E                     l346:
  4344                           
  4345                           ;pictris.c: 877:     {;pictris.c: 879:         moveObject(pObject, DOWN, 1);
  4346  00166E  C05A  F047         	movff	moveObjectDown@pObject,moveObject@pObject
  4347  001672  C05B  F048         	movff	moveObjectDown@pObject+1,moveObject@pObject+1
  4348  001676  0E00               	movlw	0
  4349  001678  6E49               	movwf	moveObject@direction,c
  4350  00167A  0E01               	movlw	1
  4351  00167C  6E4A               	movwf	moveObject@cycles,c
  4352  00167E  EC52  F006         	call	_moveObject	;wreg free
  4353                           
  4354                           ;pictris.c: 881:         if (collisionDetect(pObject, BackgroundData))
  4355  001682  C05A  F047         	movff	moveObjectDown@pObject,collisionDetect@pSource
  4356  001686  C05B  F048         	movff	moveObjectDown@pObject+1,collisionDetect@pSource+1
  4357  00168A  0E90               	movlw	low _BackgroundData
  4358  00168C  6E49               	movwf	collisionDetect@pTarget,c
  4359  00168E  0E00               	movlw	high _BackgroundData
  4360  001690  6E4A               	movwf	collisionDetect@pTarget+1,c
  4361  001692  EC7E  F00E         	call	_collisionDetect	;wreg free
  4362  001696  0900               	iorlw	0
  4363  001698  B4D8               	btfsc	status,2,c
  4364  00169A  D02B               	goto	l348
  4365                           
  4366                           ;pictris.c: 882:         {;pictris.c: 885:             result = 0;
  4367  00169C  0E00               	movlw	0
  4368  00169E  6E5C               	movwf	moveObjectDown@result,c
  4369                           
  4370                           ;pictris.c: 887:             moveObject(pObject, UP, 1);
  4371  0016A0  C05A  F047         	movff	moveObjectDown@pObject,moveObject@pObject
  4372  0016A4  C05B  F048         	movff	moveObjectDown@pObject+1,moveObject@pObject+1
  4373  0016A8  0E01               	movlw	1
  4374  0016AA  6E49               	movwf	moveObject@direction,c
  4375  0016AC  0E01               	movlw	1
  4376  0016AE  6E4A               	movwf	moveObject@cycles,c
  4377  0016B0  EC52  F006         	call	_moveObject	;wreg free
  4378                           
  4379                           ;pictris.c: 889:             mergeObjects(pObject, BackgroundData, MERGE);
  4380  0016B4  C05A  F047         	movff	moveObjectDown@pObject,mergeObjects@pSource
  4381  0016B8  C05B  F048         	movff	moveObjectDown@pObject+1,mergeObjects@pSource+1
  4382  0016BC  0E90               	movlw	low _BackgroundData
  4383  0016BE  6E49               	movwf	mergeObjects@pTarget,c
  4384  0016C0  0E00               	movlw	high _BackgroundData
  4385  0016C2  6E4A               	movwf	mergeObjects@pTarget+1,c
  4386  0016C4  0E01               	movlw	1
  4387  0016C6  6E4B               	movwf	mergeObjects@mode,c
  4388  0016C8  ECA6  F00A         	call	_mergeObjects	;wreg free
  4389                           
  4390                           ;pictris.c: 891:             selectNextObject(pObject);
  4391  0016CC  C05A  F053         	movff	moveObjectDown@pObject,selectNextObject@pTarget
  4392  0016D0  C05B  F054         	movff	moveObjectDown@pObject+1,selectNextObject@pTarget+1
  4393  0016D4  EC49  F00C         	call	_selectNextObject	;wreg free
  4394                           
  4395                           ;pictris.c: 894:             EndOfGame = collisionDetect(pObject, BackgroundData);
  4396  0016D8  C05A  F047         	movff	moveObjectDown@pObject,collisionDetect@pSource
  4397  0016DC  C05B  F048         	movff	moveObjectDown@pObject+1,collisionDetect@pSource+1
  4398  0016E0  0E90               	movlw	low _BackgroundData
  4399  0016E2  6E49               	movwf	collisionDetect@pTarget,c
  4400  0016E4  0E00               	movlw	high _BackgroundData
  4401  0016E6  6E4A               	movwf	collisionDetect@pTarget+1,c
  4402  0016E8  EC7E  F00E         	call	_collisionDetect	;wreg free
  4403  0016EC  6E12               	movwf	_EndOfGame,c
  4404  0016EE                     l4209:
  4405                           
  4406                           ;pictris.c: 896:             CheckForNewLines = 1;
  4407  0016EE  0E01               	movlw	1
  4408  0016F0  6E11               	movwf	_CheckForNewLines,c
  4409  0016F2                     l348:
  4410                           
  4411                           ;pictris.c: 899:     mS = 0;
  4412                           
  4413                           ;pictris.c: 898:     }
  4414  0016F2  0E00               	movlw	0
  4415  0016F4  6E04               	movwf	_mS+1,c	;volatile
  4416  0016F6  0E00               	movlw	0
  4417  0016F8  6E03               	movwf	_mS,c	;volatile
  4418                           
  4419                           ;pictris.c: 902:     resumeMultiplexing();
  4420  0016FA  ECD4  F010         	call	_resumeMultiplexing	;wreg free
  4421                           
  4422                           ;pictris.c: 904:     return result;
  4423  0016FE  505C               	movf	moveObjectDown@result,w,c
  4424  001700  0012               	return	
  4425  001702                     __end_of_moveObjectDown:
  4426                           	opt stack 0
  4427                           tblptru	equ	0xFF8
  4428                           tblptrh	equ	0xFF7
  4429                           tblptrl	equ	0xFF6
  4430                           tablat	equ	0xFF5
  4431                           prodh	equ	0xFF4
  4432                           prodl	equ	0xFF3
  4433                           intcon	equ	0xFF2
  4434                           postinc0	equ	0xFEE
  4435                           wreg	equ	0xFE8
  4436                           indf1	equ	0xFE7
  4437                           postdec1	equ	0xFE5
  4438                           plusw1	equ	0xFE3
  4439                           fsr1h	equ	0xFE2
  4440                           fsr1l	equ	0xFE1
  4441                           indf2	equ	0xFDF
  4442                           postinc2	equ	0xFDE
  4443                           postdec2	equ	0xFDD
  4444                           plusw2	equ	0xFDB
  4445                           fsr2h	equ	0xFDA
  4446                           fsr2l	equ	0xFD9
  4447                           status	equ	0xFD8
  4448                           
  4449 ;; *************** function _selectNextObject *****************
  4450 ;; Defined at:
  4451 ;;		line 547 in file "pictris.c"
  4452 ;; Parameters:    Size  Location     Type
  4453 ;;  pTarget         2   30[COMRAM] PTR volatile unsigned sh
  4454 ;;		 -> ObjectData(16), 
  4455 ;; Auto vars:     Size  Location     Type
  4456 ;;  s               2   35[COMRAM] PTR struct shape
  4457 ;;		 -> shapes(133), 
  4458 ;;  selection       1   34[COMRAM] unsigned char 
  4459 ;;  counter         1   33[COMRAM] unsigned char 
  4460 ;;  rndSelection    1   32[COMRAM] unsigned char 
  4461 ;; Return value:  Size  Location     Type
  4462 ;;                  1    wreg      void 
  4463 ;; Registers used:
  4464 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4465 ;; Tracked objects:
  4466 ;;		On entry : 0/0
  4467 ;;		On exit  : 0/0
  4468 ;;		Unchanged: 0/0
  4469 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4470 ;;      Params:         2       0       0       0       0       0       0
  4471 ;;      Locals:         5       0       0       0       0       0       0
  4472 ;;      Temps:          0       0       0       0       0       0       0
  4473 ;;      Totals:         7       0       0       0       0       0       0
  4474 ;;Total ram usage:        7 bytes
  4475 ;; Hardware stack levels used:    1
  4476 ;; Hardware stack levels required when called:    3
  4477 ;; This function calls:
  4478 ;;		___awmod
  4479 ;;		___wmul
  4480 ;;		_memcpy
  4481 ;;		_rnd_get_num
  4482 ;; This function is called by:
  4483 ;;		_moveObjectDown
  4484 ;;		_mainGameLoop
  4485 ;; This function uses a non-reentrant model
  4486 ;;
  4487                           
  4488                           	psect	text22
  4489  001892                     __ptext22:
  4490                           	opt stack 0
  4491  001892                     _selectNextObject:
  4492                           	opt stack 26
  4493                           
  4494                           ;pictris.c: 547: void selectNextObject(volatile uint16_t *pTarget);pictris.c: 548: {;pic
      +                          tris.c: 549:     byte rndSelection, counter, selection;;pictris.c: 550:     struct shape
      +                           * s;;pictris.c: 556:     rndSelection = rnd_get_num();
  4495                           
  4496                           ;incstack = 0
  4497  001892  EC29  F00F         	call	_rnd_get_num	;wreg free
  4498  001896  6E55               	movwf	selectNextObject@rndSelection,c
  4499                           
  4500                           ;pictris.c: 559:     counter = 0;
  4501  001898  0E00               	movlw	0
  4502  00189A  6E56               	movwf	selectNextObject@counter,c
  4503                           
  4504                           ;pictris.c: 560:     selection = 0;
  4505  00189C  0E00               	movlw	0
  4506  00189E  6E57               	movwf	selectNextObject@selection,c
  4507  0018A0                     
  4508                           ;pictris.c: 562:     {;pictris.c: 563:         counter += (55/7);
  4509  0018A0  0E07               	movlw	7
  4510  0018A2  2656               	addwf	selectNextObject@counter,f,c
  4511                           
  4512                           ;pictris.c: 564:         selection++;
  4513  0018A4  2A57               	incf	selectNextObject@selection,f,c
  4514                           
  4515                           ;pictris.c: 565:     } while (counter < rndSelection);
  4516  0018A6  5055               	movf	selectNextObject@rndSelection,w,c
  4517  0018A8  5C56               	subwf	selectNextObject@counter,w,c
  4518  0018AA  A0D8               	btfss	status,0,c
  4519  0018AC  D7F9               	goto	l214
  4520                           
  4521                           ;pictris.c: 569:     s = &shapes[selection % 7];
  4522  0018AE  0E00               	movlw	0
  4523  0018B0  6E4A               	movwf	___awmod@divisor+1,c
  4524  0018B2  0E07               	movlw	7
  4525  0018B4  6E49               	movwf	___awmod@divisor,c
  4526  0018B6  C057  F047         	movff	selectNextObject@selection,___awmod@dividend
  4527  0018BA  6A48               	clrf	___awmod@dividend+1,c
  4528  0018BC  ECA4  F00D         	call	___awmod	;wreg free
  4529  0018C0  C047  F04D         	movff	?___awmod,___wmul@multiplier
  4530  0018C4  C048  F04E         	movff	?___awmod+1,___wmul@multiplier+1
  4531  0018C8  0E00               	movlw	0
  4532  0018CA  6E50               	movwf	___wmul@multiplicand+1,c
  4533  0018CC  0E13               	movlw	19
  4534  0018CE  6E4F               	movwf	___wmul@multiplicand,c
  4535  0018D0  EC61  F010         	call	___wmul	;wreg free
  4536  0018D4  0E00               	movlw	low _shapes
  4537  0018D6  244D               	addwf	?___wmul,w,c
  4538  0018D8  6E58               	movwf	selectNextObject@s,c
  4539  0018DA  0E02               	movlw	high _shapes
  4540  0018DC  204E               	addwfc	?___wmul+1,w,c
  4541  0018DE  6E59               	movwf	selectNextObject@s+1,c
  4542                           
  4543                           ;pictris.c: 570:     memcpy(pTarget, s->graphic, 16);
  4544  0018E0  C053  F047         	movff	selectNextObject@pTarget,memcpy@dest
  4545  0018E4  C054  F048         	movff	selectNextObject@pTarget+1,memcpy@dest+1
  4546  0018E8  C058  F049         	movff	selectNextObject@s,memcpy@src
  4547  0018EC  C059  F04A         	movff	selectNextObject@s+1,memcpy@src+1
  4548  0018F0  0E00               	movlw	0
  4549  0018F2  6E4C               	movwf	memcpy@n+1,c
  4550  0018F4  0E10               	movlw	16
  4551  0018F6  6E4B               	movwf	memcpy@n,c
  4552  0018F8  ECD5  F00E         	call	_memcpy	;wreg free
  4553                           
  4554                           ;pictris.c: 571:     OriginX = s->x;
  4555  0018FC  EE20 F010          	lfsr	2,16
  4556  001900  5058               	movf	selectNextObject@s,w,c
  4557  001902  26D9               	addwf	fsr2l,f,c
  4558  001904  5059               	movf	selectNextObject@s+1,w,c
  4559  001906  22DA               	addwfc	fsr2h,f,c
  4560  001908  50DF               	movf	indf2,w,c
  4561  00190A  6E0F               	movwf	_OriginX,c
  4562                           
  4563                           ;pictris.c: 572:     OriginY = s->y;
  4564  00190C  EE20 F011          	lfsr	2,17
  4565  001910  5058               	movf	selectNextObject@s,w,c
  4566  001912  26D9               	addwf	fsr2l,f,c
  4567  001914  5059               	movf	selectNextObject@s+1,w,c
  4568  001916  22DA               	addwfc	fsr2h,f,c
  4569  001918  50DF               	movf	indf2,w,c
  4570  00191A  6E0E               	movwf	_OriginY,c
  4571                           
  4572                           ;pictris.c: 574:     IsRotated = 0;
  4573  00191C  0E00               	movlw	0
  4574  00191E  6E13               	movwf	_IsRotated,c
  4575                           
  4576                           ;pictris.c: 575:     LimitedRotation = s->limitedRotation;
  4577  001920  EE20 F012          	lfsr	2,18
  4578  001924  5058               	movf	selectNextObject@s,w,c
  4579  001926  26D9               	addwf	fsr2l,f,c
  4580  001928  5059               	movf	selectNextObject@s+1,w,c
  4581  00192A  22DA               	addwfc	fsr2h,f,c
  4582  00192C  50DF               	movf	indf2,w,c
  4583  00192E  6E16               	movwf	_LimitedRotation,c
  4584                           
  4585                           ;pictris.c: 577:     mS = 0;
  4586  001930  0E00               	movlw	0
  4587  001932  6E04               	movwf	_mS+1,c	;volatile
  4588  001934  0E00               	movlw	0
  4589  001936  6E03               	movwf	_mS,c	;volatile
  4590  001938  0012               	return		;funcret
  4591  00193A                     __end_of_selectNextObject:
  4592                           	opt stack 0
  4593                           tblptru	equ	0xFF8
  4594                           tblptrh	equ	0xFF7
  4595                           tblptrl	equ	0xFF6
  4596                           tablat	equ	0xFF5
  4597                           prodh	equ	0xFF4
  4598                           prodl	equ	0xFF3
  4599                           intcon	equ	0xFF2
  4600                           postinc0	equ	0xFEE
  4601                           wreg	equ	0xFE8
  4602                           indf1	equ	0xFE7
  4603                           postdec1	equ	0xFE5
  4604                           plusw1	equ	0xFE3
  4605                           fsr1h	equ	0xFE2
  4606                           fsr1l	equ	0xFE1
  4607                           indf2	equ	0xFDF
  4608                           postinc2	equ	0xFDE
  4609                           postdec2	equ	0xFDD
  4610                           plusw2	equ	0xFDB
  4611                           fsr2h	equ	0xFDA
  4612                           fsr2l	equ	0xFD9
  4613                           status	equ	0xFD8
  4614                           
  4615 ;; *************** function _memcpy *****************
  4616 ;; Defined at:
  4617 ;;		line 10 in file "memcpy.c"
  4618 ;; Parameters:    Size  Location     Type
  4619 ;;  dest            2   18[COMRAM] PTR void 
  4620 ;;		 -> tmpObjectData(16), ObjectData(16), 
  4621 ;;  src             2   20[COMRAM] PTR const void 
  4622 ;;		 -> Number(160), SNAKE(16), TETRIS(16), ObjectData(16), 
  4623 ;;		 -> shapes.graphic(16), shapes(133), 
  4624 ;;  n               2   22[COMRAM] unsigned int 
  4625 ;; Auto vars:     Size  Location     Type
  4626 ;;  s               2   26[COMRAM] PTR unsigned char 
  4627 ;;		 -> Number(160), SNAKE(16), TETRIS(16), ObjectData(16), 
  4628 ;;		 -> shapes.graphic(16), shapes(133), 
  4629 ;;  d               2   24[COMRAM] PTR unsigned char 
  4630 ;;		 -> tmpObjectData(16), ObjectData(16), 
  4631 ;; Return value:  Size  Location     Type
  4632 ;;                  2   18[COMRAM] PTR void 
  4633 ;; Registers used:
  4634 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru
  4635 ;; Tracked objects:
  4636 ;;		On entry : 0/0
  4637 ;;		On exit  : 0/0
  4638 ;;		Unchanged: 0/0
  4639 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4640 ;;      Params:         6       0       0       0       0       0       0
  4641 ;;      Locals:         4       0       0       0       0       0       0
  4642 ;;      Temps:          0       0       0       0       0       0       0
  4643 ;;      Totals:        10       0       0       0       0       0       0
  4644 ;;Total ram usage:       10 bytes
  4645 ;; Hardware stack levels used:    1
  4646 ;; Hardware stack levels required when called:    2
  4647 ;; This function calls:
  4648 ;;		Nothing
  4649 ;; This function is called by:
  4650 ;;		_selectNextObject
  4651 ;;		_newRotation
  4652 ;;		_checkButtons
  4653 ;;		_splash_screen
  4654 ;;		_getNumber
  4655 ;; This function uses a non-reentrant model
  4656 ;;
  4657                           
  4658                           	psect	text23
  4659  001DAA                     __ptext23:
  4660                           	opt stack 0
  4661  001DAA                     _memcpy:
  4662                           	opt stack 27
  4663                           
  4664                           ;memcpy.c: 10: void *memcpy(void *dest, const void *src, size_t n);memcpy.c: 11: {;memcp
      +                          y.c: 12:     char *d = (char*)dest, *s = (char*)src;
  4665                           
  4666                           ;incstack = 0
  4667  001DAA  C047  F04D         	movff	memcpy@dest,memcpy@d
  4668  001DAE  C048  F04E         	movff	memcpy@dest+1,memcpy@d+1
  4669  001DB2  C049  F04F         	movff	memcpy@src,memcpy@s
  4670  001DB6  C04A  F050         	movff	memcpy@src+1,memcpy@s+1
  4671                           
  4672                           ;memcpy.c: 14:     while(n--)
  4673  001DBA  D019               	goto	l510
  4674  001DBC                     l3765:
  4675                           
  4676                           ;memcpy.c: 15:         *d++ = *s++;
  4677  001DBC  C04F  FFF6         	movff	memcpy@s,tblptrl
  4678  001DC0  C050  FFF7         	movff	memcpy@s+1,tblptrh
  4679  001DC4  6AF8               	clrf	tblptru,c
  4680  001DC6  C04D  FFD9         	movff	memcpy@d,fsr2l
  4681  001DCA  C04E  FFDA         	movff	memcpy@d+1,fsr2h
  4682  001DCE  0E05               	movlw	(high __ramtop+-1)
  4683  001DD0  64F7               	cpfsgt	tblptrh,c
  4684  001DD2  D003               	bra	u3867
  4685  001DD4  0008               	tblrd		*
  4686  001DD6  50F5               	movf	tablat,w,c
  4687  001DD8  D005               	bra	u3860
  4688  001DDA                     u3867:
  4689  001DDA  CFF6 FFE1          	movff	tblptrl,fsr1l
  4690  001DDE  CFF7 FFE2          	movff	tblptrh,fsr1h
  4691  001DE2  50E7               	movf	indf1,w,c
  4692  001DE4                     u3860:
  4693  001DE4  6EDF               	movwf	indf2,c
  4694  001DE6  4A4F               	infsnz	memcpy@s,f,c
  4695  001DE8  2A50               	incf	memcpy@s+1,f,c
  4696  001DEA  4A4D               	infsnz	memcpy@d,f,c
  4697  001DEC  2A4E               	incf	memcpy@d+1,f,c
  4698  001DEE                     l510:
  4699                           
  4700                           ;memcpy.c: 14:     while(n--)
  4701  001DEE  064B               	decf	memcpy@n,f,c
  4702  001DF0  A0D8               	btfss	status,0,c
  4703  001DF2  064C               	decf	memcpy@n+1,f,c
  4704  001DF4  284B               	incf	memcpy@n,w,c
  4705  001DF6  E1E2               	bnz	l3765
  4706  001DF8  284C               	incf	memcpy@n+1,w,c
  4707  001DFA  B4D8               	btfsc	status,2,c
  4708  001DFC  0012               	return	
  4709  001DFE  D7DE               	goto	l511
  4710  001E00                     __end_of_memcpy:
  4711                           	opt stack 0
  4712                           tblptru	equ	0xFF8
  4713                           tblptrh	equ	0xFF7
  4714                           tblptrl	equ	0xFF6
  4715                           tablat	equ	0xFF5
  4716                           prodh	equ	0xFF4
  4717                           prodl	equ	0xFF3
  4718                           intcon	equ	0xFF2
  4719                           postinc0	equ	0xFEE
  4720                           wreg	equ	0xFE8
  4721                           indf1	equ	0xFE7
  4722                           postdec1	equ	0xFE5
  4723                           plusw1	equ	0xFE3
  4724                           fsr1h	equ	0xFE2
  4725                           fsr1l	equ	0xFE1
  4726                           indf2	equ	0xFDF
  4727                           postinc2	equ	0xFDE
  4728                           postdec2	equ	0xFDD
  4729                           plusw2	equ	0xFDB
  4730                           fsr2h	equ	0xFDA
  4731                           fsr2l	equ	0xFD9
  4732                           status	equ	0xFD8
  4733                           
  4734 ;; *************** function ___wmul *****************
  4735 ;; Defined at:
  4736 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c99\common\Umul16.c"
  4737 ;; Parameters:    Size  Location     Type
  4738 ;;  multiplier      2   24[COMRAM] unsigned int 
  4739 ;;  multiplicand    2   26[COMRAM] unsigned int 
  4740 ;; Auto vars:     Size  Location     Type
  4741 ;;  product         2   28[COMRAM] unsigned int 
  4742 ;; Return value:  Size  Location     Type
  4743 ;;                  2   24[COMRAM] unsigned int 
  4744 ;; Registers used:
  4745 ;;		wreg, status,2, status,0, prodl, prodh
  4746 ;; Tracked objects:
  4747 ;;		On entry : 0/0
  4748 ;;		On exit  : 0/0
  4749 ;;		Unchanged: 0/0
  4750 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4751 ;;      Params:         4       0       0       0       0       0       0
  4752 ;;      Locals:         2       0       0       0       0       0       0
  4753 ;;      Temps:          0       0       0       0       0       0       0
  4754 ;;      Totals:         6       0       0       0       0       0       0
  4755 ;;Total ram usage:        6 bytes
  4756 ;; Hardware stack levels used:    1
  4757 ;; Hardware stack levels required when called:    2
  4758 ;; This function calls:
  4759 ;;		Nothing
  4760 ;; This function is called by:
  4761 ;;		_selectNextObject
  4762 ;;		_newRotation
  4763 ;; This function uses a non-reentrant model
  4764 ;;
  4765                           
  4766                           	psect	text24
  4767  0020C2                     __ptext24:
  4768                           	opt stack 0
  4769  0020C2                     ___wmul:
  4770                           	opt stack 26
  4771                           
  4772                           ;incstack = 0
  4773  0020C2  504D               	movf	___wmul@multiplier,w,c
  4774  0020C4  024F               	mulwf	___wmul@multiplicand,c
  4775  0020C6  CFF3 F051          	movff	prodl,___wmul@product
  4776  0020CA  CFF4 F052          	movff	prodh,___wmul@product+1
  4777  0020CE  504D               	movf	___wmul@multiplier,w,c
  4778  0020D0  0250               	mulwf	___wmul@multiplicand+1,c
  4779  0020D2  50F3               	movf	prodl,w,c
  4780  0020D4  2652               	addwf	___wmul@product+1,f,c
  4781  0020D6  504E               	movf	___wmul@multiplier+1,w,c
  4782  0020D8  024F               	mulwf	___wmul@multiplicand,c
  4783  0020DA  50F3               	movf	prodl,w,c
  4784  0020DC  2652               	addwf	___wmul@product+1,f,c
  4785  0020DE  C051  F04D         	movff	___wmul@product,?___wmul
  4786  0020E2  C052  F04E         	movff	___wmul@product+1,?___wmul+1
  4787  0020E6  0012               	return	
  4788  0020E8                     __end_of___wmul:
  4789                           	opt stack 0
  4790                           tblptru	equ	0xFF8
  4791                           tblptrh	equ	0xFF7
  4792                           tblptrl	equ	0xFF6
  4793                           tablat	equ	0xFF5
  4794                           prodh	equ	0xFF4
  4795                           prodl	equ	0xFF3
  4796                           intcon	equ	0xFF2
  4797                           postinc0	equ	0xFEE
  4798                           wreg	equ	0xFE8
  4799                           indf1	equ	0xFE7
  4800                           postdec1	equ	0xFE5
  4801                           plusw1	equ	0xFE3
  4802                           fsr1h	equ	0xFE2
  4803                           fsr1l	equ	0xFE1
  4804                           indf2	equ	0xFDF
  4805                           postinc2	equ	0xFDE
  4806                           postdec2	equ	0xFDD
  4807                           plusw2	equ	0xFDB
  4808                           fsr2h	equ	0xFDA
  4809                           fsr2l	equ	0xFD9
  4810                           status	equ	0xFD8
  4811                           
  4812 ;; *************** function ___awmod *****************
  4813 ;; Defined at:
  4814 ;;		line 7 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c99\common\awmod.c"
  4815 ;; Parameters:    Size  Location     Type
  4816 ;;  dividend        2   18[COMRAM] int 
  4817 ;;  divisor         2   20[COMRAM] int 
  4818 ;; Auto vars:     Size  Location     Type
  4819 ;;  sign            1   23[COMRAM] unsigned char 
  4820 ;;  counter         1   22[COMRAM] unsigned char 
  4821 ;; Return value:  Size  Location     Type
  4822 ;;                  2   18[COMRAM] int 
  4823 ;; Registers used:
  4824 ;;		wreg, status,2, status,0
  4825 ;; Tracked objects:
  4826 ;;		On entry : 0/0
  4827 ;;		On exit  : 0/0
  4828 ;;		Unchanged: 0/0
  4829 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4830 ;;      Params:         4       0       0       0       0       0       0
  4831 ;;      Locals:         2       0       0       0       0       0       0
  4832 ;;      Temps:          0       0       0       0       0       0       0
  4833 ;;      Totals:         6       0       0       0       0       0       0
  4834 ;;Total ram usage:        6 bytes
  4835 ;; Hardware stack levels used:    1
  4836 ;; Hardware stack levels required when called:    2
  4837 ;; This function calls:
  4838 ;;		Nothing
  4839 ;; This function is called by:
  4840 ;;		_itoa
  4841 ;;		_selectNextObject
  4842 ;; This function uses a non-reentrant model
  4843 ;;
  4844                           
  4845                           	psect	text25
  4846  001B48                     __ptext25:
  4847                           	opt stack 0
  4848  001B48                     ___awmod:
  4849                           	opt stack 26
  4850                           
  4851                           ;incstack = 0
  4852  001B48  0E00               	movlw	0
  4853  001B4A  6E4C               	movwf	___awmod@sign,c
  4854  001B4C  AE48               	btfss	___awmod@dividend+1,7,c
  4855  001B4E  D006               	goto	l750
  4856  001B50  6C47               	negf	___awmod@dividend,c
  4857  001B52  1E48               	comf	___awmod@dividend+1,f,c
  4858  001B54  B0D8               	btfsc	status,0,c
  4859  001B56  2A48               	incf	___awmod@dividend+1,f,c
  4860  001B58  0E01               	movlw	1
  4861  001B5A  6E4C               	movwf	___awmod@sign,c
  4862  001B5C                     l750:
  4863  001B5C  AE4A               	btfss	___awmod@divisor+1,7,c
  4864  001B5E  D004               	goto	l751
  4865  001B60  6C49               	negf	___awmod@divisor,c
  4866  001B62  1E4A               	comf	___awmod@divisor+1,f,c
  4867  001B64  B0D8               	btfsc	status,0,c
  4868  001B66  2A4A               	incf	___awmod@divisor+1,f,c
  4869  001B68                     l751:
  4870  001B68  5049               	movf	___awmod@divisor,w,c
  4871  001B6A  104A               	iorwf	___awmod@divisor+1,w,c
  4872  001B6C  B4D8               	btfsc	status,2,c
  4873  001B6E  D018               	goto	l758
  4874  001B70  0E01               	movlw	1
  4875  001B72  6E4B               	movwf	___awmod@counter,c
  4876  001B74  D004               	goto	l753
  4877  001B76  90D8               	bcf	status,0,c
  4878  001B78  3649               	rlcf	___awmod@divisor,f,c
  4879  001B7A  364A               	rlcf	___awmod@divisor+1,f,c
  4880  001B7C  2A4B               	incf	___awmod@counter,f,c
  4881  001B7E                     l753:
  4882  001B7E  AE4A               	btfss	___awmod@divisor+1,7,c
  4883  001B80  D7FA               	goto	l754
  4884  001B82                     u3910:
  4885  001B82  5049               	movf	___awmod@divisor,w,c
  4886  001B84  5C47               	subwf	___awmod@dividend,w,c
  4887  001B86  504A               	movf	___awmod@divisor+1,w,c
  4888  001B88  5848               	subwfb	___awmod@dividend+1,w,c
  4889  001B8A  A0D8               	btfss	status,0,c
  4890  001B8C  D004               	goto	l757
  4891  001B8E  5049               	movf	___awmod@divisor,w,c
  4892  001B90  5E47               	subwf	___awmod@dividend,f,c
  4893  001B92  504A               	movf	___awmod@divisor+1,w,c
  4894  001B94  5A48               	subwfb	___awmod@dividend+1,f,c
  4895  001B96                     l757:
  4896  001B96  90D8               	bcf	status,0,c
  4897  001B98  324A               	rrcf	___awmod@divisor+1,f,c
  4898  001B9A  3249               	rrcf	___awmod@divisor,f,c
  4899  001B9C  2E4B               	decfsz	___awmod@counter,f,c
  4900  001B9E  D7F1               	goto	u3910
  4901  001BA0                     l758:
  4902  001BA0  504C               	movf	___awmod@sign,w,c
  4903  001BA2  B4D8               	btfsc	status,2,c
  4904  001BA4  D004               	goto	l759
  4905  001BA6  6C47               	negf	___awmod@dividend,c
  4906  001BA8  1E48               	comf	___awmod@dividend+1,f,c
  4907  001BAA  B0D8               	btfsc	status,0,c
  4908  001BAC  2A48               	incf	___awmod@dividend+1,f,c
  4909  001BAE                     l759:
  4910  001BAE  C047  F047         	movff	___awmod@dividend,?___awmod
  4911  001BB2  C048  F048         	movff	___awmod@dividend+1,?___awmod+1
  4912  001BB6  0012               	return	
  4913  001BB8                     __end_of___awmod:
  4914                           	opt stack 0
  4915                           tblptru	equ	0xFF8
  4916                           tblptrh	equ	0xFF7
  4917                           tblptrl	equ	0xFF6
  4918                           tablat	equ	0xFF5
  4919                           prodh	equ	0xFF4
  4920                           prodl	equ	0xFF3
  4921                           intcon	equ	0xFF2
  4922                           postinc0	equ	0xFEE
  4923                           wreg	equ	0xFE8
  4924                           indf1	equ	0xFE7
  4925                           postdec1	equ	0xFE5
  4926                           plusw1	equ	0xFE3
  4927                           fsr1h	equ	0xFE2
  4928                           fsr1l	equ	0xFE1
  4929                           indf2	equ	0xFDF
  4930                           postinc2	equ	0xFDE
  4931                           postdec2	equ	0xFDD
  4932                           plusw2	equ	0xFDB
  4933                           fsr2h	equ	0xFDA
  4934                           fsr2l	equ	0xFD9
  4935                           status	equ	0xFD8
  4936                           
  4937 ;; *************** function _moveObject *****************
  4938 ;; Defined at:
  4939 ;;		line 711 in file "pictris.c"
  4940 ;; Parameters:    Size  Location     Type
  4941 ;;  pObject         2   18[COMRAM] PTR volatile unsigned sh
  4942 ;;		 -> tmpObjectData(16), ObjectData(16), 
  4943 ;;  direction       1   20[COMRAM] enum E2761
  4944 ;;  cycles          1   21[COMRAM] unsigned char 
  4945 ;; Auto vars:     Size  Location     Type
  4946 ;;  i               1   27[COMRAM] unsigned char 
  4947 ;;  c               1   26[COMRAM] unsigned char 
  4948 ;; Return value:  Size  Location     Type
  4949 ;;                  1    wreg      void 
  4950 ;; Registers used:
  4951 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  4952 ;; Tracked objects:
  4953 ;;		On entry : 0/0
  4954 ;;		On exit  : 0/0
  4955 ;;		Unchanged: 0/0
  4956 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4957 ;;      Params:         4       0       0       0       0       0       0
  4958 ;;      Locals:         2       0       0       0       0       0       0
  4959 ;;      Temps:          4       0       0       0       0       0       0
  4960 ;;      Totals:        10       0       0       0       0       0       0
  4961 ;;Total ram usage:       10 bytes
  4962 ;; Hardware stack levels used:    1
  4963 ;; Hardware stack levels required when called:    2
  4964 ;; This function calls:
  4965 ;;		Nothing
  4966 ;; This function is called by:
  4967 ;;		_moveObjectDown
  4968 ;;		_checkButtons
  4969 ;;		_show_score
  4970 ;; This function uses a non-reentrant model
  4971 ;;
  4972                           
  4973                           	psect	text26
  4974  000CA4                     __ptext26:
  4975                           	opt stack 0
  4976  000CA4                     _moveObject:
  4977                           	opt stack 27
  4978                           
  4979                           ;pictris.c: 711: void moveObject(volatile uint16_t * pObject, direction_t direction, byt
      +                          e cycles);pictris.c: 712: {;pictris.c: 713:     byte i, c;;pictris.c: 715:     switch (d
      +                          irection)
  4980                           
  4981                           ;incstack = 0
  4982  000CA4  D0AC               	goto	l277
  4983  000CA6                     
  4984                           ;pictris.c: 718:         for (c = 0; c < cycles; c++)
  4985  000CA6  0E00               	movlw	0
  4986  000CA8  6E4F               	movwf	moveObject@c,c
  4987  000CAA  D015               	goto	l279
  4988  000CAC                     
  4989                           ;pictris.c: 719:         {;pictris.c: 720:             for (i = 0; i < 8; i++)
  4990  000CAC  0E00               	movlw	0
  4991  000CAE  6E50               	movwf	moveObject@i,c
  4992  000CB0                     l3915:
  4993  000CB0  0E07               	movlw	7
  4994  000CB2  6450               	cpfsgt	moveObject@i,c
  4995  000CB4  D001               	goto	l281
  4996  000CB6  D00D               	goto	u4050
  4997  000CB8                     l281:
  4998                           
  4999                           ;pictris.c: 721:                 pObject[i] <<= 1;
  5000  000CB8  5050               	movf	moveObject@i,w,c
  5001  000CBA  0D02               	mullw	2
  5002  000CBC  50F3               	movf	prodl,w,c
  5003  000CBE  2447               	addwf	moveObject@pObject,w,c
  5004  000CC0  6ED9               	movwf	fsr2l,c
  5005  000CC2  50F4               	movf	prodh,w,c
  5006  000CC4  2048               	addwfc	moveObject@pObject+1,w,c
  5007  000CC6  6EDA               	movwf	fsr2h,c
  5008  000CC8  90D8               	bcf	status,0,c
  5009  000CCA  36DE               	rlcf	postinc2,f,c
  5010  000CCC  36DD               	rlcf	postdec2,f,c
  5011  000CCE  2A50               	incf	moveObject@i,f,c
  5012  000CD0  D7EF               	goto	l3915
  5013  000CD2                     u4050:
  5014                           
  5015                           ;pictris.c: 722:             OriginY++;
  5016  000CD2  2A0E               	incf	_OriginY,f,c
  5017                           
  5018                           ;pictris.c: 723:         }
  5019  000CD4  2A4F               	incf	moveObject@c,f,c
  5020  000CD6                     l279:
  5021  000CD6  504A               	movf	moveObject@cycles,w,c
  5022  000CD8  5C4F               	subwf	moveObject@c,w,c
  5023  000CDA  B0D8               	btfsc	status,0,c
  5024  000CDC  0012               	return	
  5025  000CDE  D7E6               	goto	l280
  5026  000CE0                     
  5027                           ;pictris.c: 726:         for (c = 0; c < cycles; c++)
  5028  000CE0  0E00               	movlw	0
  5029  000CE2  6E4F               	movwf	moveObject@c,c
  5030  000CE4  D016               	goto	l286
  5031  000CE6                     
  5032                           ;pictris.c: 727:         {;pictris.c: 728:             for (i = 0; i < 8; i++)
  5033  000CE6  0E00               	movlw	0
  5034  000CE8  6E50               	movwf	moveObject@i,c
  5035  000CEA                     l3933:
  5036  000CEA  0E07               	movlw	7
  5037  000CEC  6450               	cpfsgt	moveObject@i,c
  5038  000CEE  D001               	goto	l288
  5039  000CF0  D00E               	goto	u4080
  5040  000CF2                     l288:
  5041                           
  5042                           ;pictris.c: 729:                 pObject[i] >>= 1;
  5043  000CF2  5050               	movf	moveObject@i,w,c
  5044  000CF4  0D02               	mullw	2
  5045  000CF6  50F3               	movf	prodl,w,c
  5046  000CF8  2447               	addwf	moveObject@pObject,w,c
  5047  000CFA  6ED9               	movwf	fsr2l,c
  5048  000CFC  50F4               	movf	prodh,w,c
  5049  000CFE  2048               	addwfc	moveObject@pObject+1,w,c
  5050  000D00  6EDA               	movwf	fsr2h,c
  5051  000D02  90D8               	bcf	status,0,c
  5052  000D04  32DC               	rrcf	preinc2,f,c
  5053  000D06  50DD               	movf	postdec2,w,c
  5054  000D08  32DF               	rrcf	indf2,f,c
  5055  000D0A  2A50               	incf	moveObject@i,f,c
  5056  000D0C  D7EE               	goto	l3933
  5057  000D0E                     u4080:
  5058                           
  5059                           ;pictris.c: 730:             OriginY--;
  5060  000D0E  060E               	decf	_OriginY,f,c
  5061                           
  5062                           ;pictris.c: 731:         }
  5063  000D10  2A4F               	incf	moveObject@c,f,c
  5064  000D12                     l286:
  5065  000D12  504A               	movf	moveObject@cycles,w,c
  5066  000D14  5C4F               	subwf	moveObject@c,w,c
  5067  000D16  B0D8               	btfsc	status,0,c
  5068  000D18  0012               	return	
  5069  000D1A  D7E5               	goto	l287
  5070  000D1C                     
  5071                           ;pictris.c: 734:         for (c = 0; c < cycles; c++)
  5072  000D1C  0E00               	movlw	0
  5073  000D1E  6E4F               	movwf	moveObject@c,c
  5074  000D20  D031               	goto	l292
  5075  000D22                     
  5076                           ;pictris.c: 735:         {;pictris.c: 736:             for (i = 7; i > 0; i--)
  5077  000D22  0E07               	movlw	7
  5078  000D24  6E50               	movwf	moveObject@i,c
  5079  000D26  5050               	movf	moveObject@i,w,c
  5080  000D28  B4D8               	btfsc	status,2,c
  5081  000D2A  D022               	goto	u4110
  5082                           
  5083                           ;pictris.c: 737:                 pObject[i] = pObject[i-1];
  5084  000D2C  0EFE               	movlw	254
  5085  000D2E  6E4B               	movwf	??_moveObject& (0+255),c
  5086  000D30  0EFF               	movlw	255
  5087  000D32  6E4C               	movwf	(??_moveObject+1)& (0+255),c
  5088  000D34  5050               	movf	moveObject@i,w,c
  5089  000D36  6E4D               	movwf	(??_moveObject+2)& (0+255),c
  5090  000D38  6A4E               	clrf	(??_moveObject+3)& (0+255),c
  5091  000D3A  90D8               	bcf	status,0,c
  5092  000D3C  364D               	rlcf	??_moveObject+2,f,c
  5093  000D3E  364E               	rlcf	??_moveObject+3,f,c
  5094  000D40  504B               	movf	??_moveObject,w,c
  5095  000D42  264D               	addwf	??_moveObject+2,f,c
  5096  000D44  504C               	movf	??_moveObject+1,w,c
  5097  000D46  224E               	addwfc	??_moveObject+3,f,c
  5098  000D48  504D               	movf	??_moveObject+2,w,c
  5099  000D4A  2447               	addwf	moveObject@pObject,w,c
  5100  000D4C  6ED9               	movwf	fsr2l,c
  5101  000D4E  504E               	movf	??_moveObject+3,w,c
  5102  000D50  2048               	addwfc	moveObject@pObject+1,w,c
  5103  000D52  6EDA               	movwf	fsr2h,c
  5104  000D54  5050               	movf	moveObject@i,w,c
  5105  000D56  0D02               	mullw	2
  5106  000D58  50F3               	movf	prodl,w,c
  5107  000D5A  2447               	addwf	moveObject@pObject,w,c
  5108  000D5C  6EE1               	movwf	fsr1l,c
  5109  000D5E  50F4               	movf	prodh,w,c
  5110  000D60  2048               	addwfc	moveObject@pObject+1,w,c
  5111  000D62  6EE2               	movwf	fsr1h,c
  5112  000D64  CFDE FFE6          	movff	postinc2,postinc1
  5113  000D68  CFDD FFE5          	movff	postdec2,postdec1
  5114  000D6C  0650               	decf	moveObject@i,f,c
  5115  000D6E  D7DB               	goto	L3
  5116  000D70                     u4110:
  5117                           
  5118                           ;pictris.c: 738:             pObject[0] = 0;
  5119  000D70  C047  FFD9         	movff	moveObject@pObject,fsr2l
  5120  000D74  C048  FFDA         	movff	moveObject@pObject+1,fsr2h
  5121  000D78  0E00               	movlw	0
  5122  000D7A  6EDE               	movwf	postinc2,c
  5123  000D7C  0E00               	movlw	0
  5124  000D7E  6EDD               	movwf	postdec2,c
  5125                           
  5126                           ;pictris.c: 739:             OriginX++;
  5127  000D80  2A0F               	incf	_OriginX,f,c
  5128                           
  5129                           ;pictris.c: 740:         }
  5130  000D82  2A4F               	incf	moveObject@c,f,c
  5131  000D84                     l292:
  5132  000D84  504A               	movf	moveObject@cycles,w,c
  5133  000D86  5C4F               	subwf	moveObject@c,w,c
  5134  000D88  B0D8               	btfsc	status,0,c
  5135  000D8A  0012               	return	
  5136  000D8C  D7CA               	goto	l293
  5137  000D8E                     
  5138                           ;pictris.c: 743:         for (c = 0; c < cycles; c++)
  5139  000D8E  0E00               	movlw	0
  5140  000D90  6E4F               	movwf	moveObject@c,c
  5141  000D92  D030               	goto	l298
  5142  000D94                     
  5143                           ;pictris.c: 744:         {;pictris.c: 745:             for (i = 0; i < 7; i++)
  5144  000D94  0E00               	movlw	0
  5145  000D96  6E50               	movwf	moveObject@i,c
  5146  000D98                     l3971:
  5147  000D98  0E06               	movlw	6
  5148  000D9A  6450               	cpfsgt	moveObject@i,c
  5149  000D9C  D001               	goto	l300
  5150  000D9E  D01E               	goto	u4140
  5151  000DA0                     l300:
  5152                           
  5153                           ;pictris.c: 746:                 pObject[i] = pObject[i+1];
  5154  000DA0  5050               	movf	moveObject@i,w,c
  5155  000DA2  6E4B               	movwf	??_moveObject& (0+255),c
  5156  000DA4  6A4C               	clrf	(??_moveObject+1)& (0+255),c
  5157  000DA6  90D8               	bcf	status,0,c
  5158  000DA8  364B               	rlcf	??_moveObject,f,c
  5159  000DAA  364C               	rlcf	??_moveObject+1,f,c
  5160  000DAC  0E02               	movlw	2
  5161  000DAE  264B               	addwf	??_moveObject,f,c
  5162  000DB0  0E00               	movlw	0
  5163  000DB2  224C               	addwfc	??_moveObject+1,f,c
  5164  000DB4  504B               	movf	??_moveObject,w,c
  5165  000DB6  2447               	addwf	moveObject@pObject,w,c
  5166  000DB8  6ED9               	movwf	fsr2l,c
  5167  000DBA  504C               	movf	??_moveObject+1,w,c
  5168  000DBC  2048               	addwfc	moveObject@pObject+1,w,c
  5169  000DBE  6EDA               	movwf	fsr2h,c
  5170  000DC0  5050               	movf	moveObject@i,w,c
  5171  000DC2  0D02               	mullw	2
  5172  000DC4  50F3               	movf	prodl,w,c
  5173  000DC6  2447               	addwf	moveObject@pObject,w,c
  5174  000DC8  6EE1               	movwf	fsr1l,c
  5175  000DCA  50F4               	movf	prodh,w,c
  5176  000DCC  2048               	addwfc	moveObject@pObject+1,w,c
  5177  000DCE  6EE2               	movwf	fsr1h,c
  5178  000DD0  CFDE FFE6          	movff	postinc2,postinc1
  5179  000DD4  CFDD FFE5          	movff	postdec2,postdec1
  5180  000DD8  2A50               	incf	moveObject@i,f,c
  5181  000DDA  D7DE               	goto	l3971
  5182  000DDC                     u4140:
  5183                           
  5184                           ;pictris.c: 747:             pObject[7] = 0;
  5185  000DDC  EE20 F00E          	lfsr	2,14
  5186  000DE0  5047               	movf	moveObject@pObject,w,c
  5187  000DE2  26D9               	addwf	fsr2l,f,c
  5188  000DE4  5048               	movf	moveObject@pObject+1,w,c
  5189  000DE6  22DA               	addwfc	fsr2h,f,c
  5190  000DE8  0E00               	movlw	0
  5191  000DEA  6EDE               	movwf	postinc2,c
  5192  000DEC  0E00               	movlw	0
  5193  000DEE  6EDD               	movwf	postdec2,c
  5194                           
  5195                           ;pictris.c: 748:             OriginX--;
  5196  000DF0  060F               	decf	_OriginX,f,c
  5197                           
  5198                           ;pictris.c: 749:         }
  5199  000DF2  2A4F               	incf	moveObject@c,f,c
  5200  000DF4                     l298:
  5201  000DF4  504A               	movf	moveObject@cycles,w,c
  5202  000DF6  5C4F               	subwf	moveObject@c,w,c
  5203  000DF8  B0D8               	btfsc	status,0,c
  5204  000DFA  0012               	return	
  5205  000DFC  D7CB               	goto	l299
  5206  000DFE                     l277:
  5207  000DFE  5049               	movf	moveObject@direction,w,c
  5208  000E00  6E4B               	movwf	??_moveObject& (0+255),c
  5209  000E02  6A4C               	clrf	(??_moveObject+1)& (0+255),c
  5210                           
  5211                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  5212                           ; Switch size 1, requested type "space"
  5213                           ; Number of cases is 1, Range of values is 0 to 0
  5214                           ; switch strategies available:
  5215                           ; Name         Instructions Cycles
  5216                           ; simple_byte            4     3 (average)
  5217                           ;	Chosen strategy is simple_byte
  5218  000E04  504C               	movf	??_moveObject+1,w,c
  5219  000E06  0A00               	xorlw	0	; case 0
  5220  000E08  A4D8               	btfss	status,2,c
  5221  000E0A  0012               	return	
  5222                           
  5223                           ; Switch size 1, requested type "space"
  5224                           ; Number of cases is 4, Range of values is 0 to 3
  5225                           ; switch strategies available:
  5226                           ; Name         Instructions Cycles
  5227                           ; simple_byte           13     7 (average)
  5228                           ;	Chosen strategy is simple_byte
  5229  000E0C  504B               	movf	??_moveObject,w,c
  5230  000E0E  0A00               	xorlw	0	; case 0
  5231  000E10  B4D8               	btfsc	status,2,c
  5232  000E12  D749               	goto	l278
  5233  000E14  0A01               	xorlw	1	; case 1
  5234  000E16  B4D8               	btfsc	status,2,c
  5235  000E18  D763               	goto	l285
  5236  000E1A  0A03               	xorlw	3	; case 2
  5237  000E1C  B4D8               	btfsc	status,2,c
  5238  000E1E  D7B7               	goto	l297
  5239  000E20  0A01               	xorlw	1	; case 3
  5240  000E22  A4D8               	btfss	status,2,c
  5241  000E24  0012               	return	
  5242  000E26  D77A               	goto	l291
  5243  000E28                     __end_of_moveObject:
  5244                           	opt stack 0
  5245                           tblptru	equ	0xFF8
  5246                           tblptrh	equ	0xFF7
  5247                           tblptrl	equ	0xFF6
  5248                           tablat	equ	0xFF5
  5249                           prodh	equ	0xFF4
  5250                           prodl	equ	0xFF3
  5251                           intcon	equ	0xFF2
  5252                           postinc0	equ	0xFEE
  5253                           wreg	equ	0xFE8
  5254                           indf1	equ	0xFE7
  5255                           postinc1	equ	0xFE6
  5256                           postdec1	equ	0xFE5
  5257                           plusw1	equ	0xFE3
  5258                           fsr1h	equ	0xFE2
  5259                           fsr1l	equ	0xFE1
  5260                           indf2	equ	0xFDF
  5261                           postinc2	equ	0xFDE
  5262                           postdec2	equ	0xFDD
  5263                           preinc2	equ	0xFDC
  5264                           plusw2	equ	0xFDB
  5265                           fsr2h	equ	0xFDA
  5266                           fsr2l	equ	0xFD9
  5267                           status	equ	0xFD8
  5268                           
  5269 ;; *************** function _collisionDetect *****************
  5270 ;; Defined at:
  5271 ;;		line 780 in file "pictris.c"
  5272 ;; Parameters:    Size  Location     Type
  5273 ;;  pSource         2   18[COMRAM] PTR volatile unsigned sh
  5274 ;;		 -> tmpObjectData(16), ObjectData(16), 
  5275 ;;  pTarget         2   20[COMRAM] PTR volatile unsigned sh
  5276 ;;		 -> BackgroundData(16), 
  5277 ;; Auto vars:     Size  Location     Type
  5278 ;;  i               1   26[COMRAM] unsigned char 
  5279 ;; Return value:  Size  Location     Type
  5280 ;;                  1    wreg      _Bool 
  5281 ;; Registers used:
  5282 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  5283 ;; Tracked objects:
  5284 ;;		On entry : 0/0
  5285 ;;		On exit  : 0/0
  5286 ;;		Unchanged: 0/0
  5287 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5288 ;;      Params:         4       0       0       0       0       0       0
  5289 ;;      Locals:         1       0       0       0       0       0       0
  5290 ;;      Temps:          4       0       0       0       0       0       0
  5291 ;;      Totals:         9       0       0       0       0       0       0
  5292 ;;Total ram usage:        9 bytes
  5293 ;; Hardware stack levels used:    1
  5294 ;; Hardware stack levels required when called:    2
  5295 ;; This function calls:
  5296 ;;		Nothing
  5297 ;; This function is called by:
  5298 ;;		_moveObjectDown
  5299 ;;		_checkButtons
  5300 ;; This function uses a non-reentrant model
  5301 ;;
  5302                           
  5303                           	psect	text27
  5304  001CFC                     __ptext27:
  5305                           	opt stack 0
  5306  001CFC                     _collisionDetect:
  5307                           	opt stack 26
  5308                           
  5309                           ;pictris.c: 780: _Bool collisionDetect(volatile uint16_t * pSource, volatile uint16_t * 
      +                          pTarget);pictris.c: 781: {;pictris.c: 782:     for (byte i = 0; i < 8; i++)
  5310                           
  5311                           ;incstack = 0
  5312  001CFC  0E00               	movlw	0
  5313  001CFE  6E4F               	movwf	collisionDetect@i,c
  5314  001D00                     l2791:
  5315  001D00  0E07               	movlw	7
  5316  001D02  644F               	cpfsgt	collisionDetect@i,c
  5317  001D04  D001               	goto	l318
  5318  001D06  D024               	goto	u2310
  5319  001D08                     l318:
  5320                           
  5321                           ;pictris.c: 783:         if (pSource[i] & pTarget[i])
  5322  001D08  504F               	movf	collisionDetect@i,w,c
  5323  001D0A  0D02               	mullw	2
  5324  001D0C  50F3               	movf	prodl,w,c
  5325  001D0E  2449               	addwf	collisionDetect@pTarget,w,c
  5326  001D10  6ED9               	movwf	fsr2l,c
  5327  001D12  50F4               	movf	prodh,w,c
  5328  001D14  204A               	addwfc	collisionDetect@pTarget+1,w,c
  5329  001D16  6EDA               	movwf	fsr2h,c
  5330  001D18  CFDE F04B          	movff	postinc2,??_collisionDetect
  5331  001D1C  CFDD F04C          	movff	postdec2,??_collisionDetect+1
  5332  001D20  504F               	movf	collisionDetect@i,w,c
  5333  001D22  0D02               	mullw	2
  5334  001D24  50F3               	movf	prodl,w,c
  5335  001D26  2447               	addwf	collisionDetect@pSource,w,c
  5336  001D28  6ED9               	movwf	fsr2l,c
  5337  001D2A  50F4               	movf	prodh,w,c
  5338  001D2C  2048               	addwfc	collisionDetect@pSource+1,w,c
  5339  001D2E  6EDA               	movwf	fsr2h,c
  5340  001D30  CFDE F04D          	movff	postinc2,??_collisionDetect+2
  5341  001D34  CFDD F04E          	movff	postdec2,??_collisionDetect+3
  5342  001D38  504B               	movf	??_collisionDetect,w,c
  5343  001D3A  164D               	andwf	??_collisionDetect+2,f,c
  5344  001D3C  504C               	movf	??_collisionDetect+1,w,c
  5345  001D3E  164E               	andwf	??_collisionDetect+3,f,c
  5346  001D40  504D               	movf	??_collisionDetect+2,w,c
  5347  001D42  104E               	iorwf	??_collisionDetect+3,w,c
  5348  001D44  B4D8               	btfsc	status,2,c
  5349  001D46  D002               	goto	l320
  5350                           
  5351                           ;pictris.c: 784:             return 1;
  5352  001D48  0E01               	movlw	1
  5353  001D4A  0012               	return	
  5354  001D4C                     l320:
  5355  001D4C  2A4F               	incf	collisionDetect@i,f,c
  5356  001D4E  D7D8               	goto	l2791
  5357  001D50                     u2310:
  5358                           
  5359                           ;pictris.c: 785:     return 0;
  5360  001D50  0E00               	movlw	0
  5361  001D52  0012               	return	
  5362  001D54                     __end_of_collisionDetect:
  5363                           	opt stack 0
  5364                           tblptru	equ	0xFF8
  5365                           tblptrh	equ	0xFF7
  5366                           tblptrl	equ	0xFF6
  5367                           tablat	equ	0xFF5
  5368                           prodh	equ	0xFF4
  5369                           prodl	equ	0xFF3
  5370                           intcon	equ	0xFF2
  5371                           postinc0	equ	0xFEE
  5372                           wreg	equ	0xFE8
  5373                           indf1	equ	0xFE7
  5374                           postinc1	equ	0xFE6
  5375                           postdec1	equ	0xFE5
  5376                           plusw1	equ	0xFE3
  5377                           fsr1h	equ	0xFE2
  5378                           fsr1l	equ	0xFE1
  5379                           indf2	equ	0xFDF
  5380                           postinc2	equ	0xFDE
  5381                           postdec2	equ	0xFDD
  5382                           preinc2	equ	0xFDC
  5383                           plusw2	equ	0xFDB
  5384                           fsr2h	equ	0xFDA
  5385                           fsr2l	equ	0xFD9
  5386                           status	equ	0xFD8
  5387                           
  5388 ;; *************** function _checkForBottom *****************
  5389 ;; Defined at:
  5390 ;;		line 756 in file "pictris.c"
  5391 ;; Parameters:    Size  Location     Type
  5392 ;;  pObject         2   18[COMRAM] PTR volatile unsigned sh
  5393 ;;		 -> ObjectData(16), 
  5394 ;; Auto vars:     Size  Location     Type
  5395 ;;  i               1   22[COMRAM] unsigned char 
  5396 ;; Return value:  Size  Location     Type
  5397 ;;                  1    wreg      _Bool 
  5398 ;; Registers used:
  5399 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  5400 ;; Tracked objects:
  5401 ;;		On entry : 0/0
  5402 ;;		On exit  : 0/0
  5403 ;;		Unchanged: 0/0
  5404 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5405 ;;      Params:         2       0       0       0       0       0       0
  5406 ;;      Locals:         1       0       0       0       0       0       0
  5407 ;;      Temps:          2       0       0       0       0       0       0
  5408 ;;      Totals:         5       0       0       0       0       0       0
  5409 ;;Total ram usage:        5 bytes
  5410 ;; Hardware stack levels used:    1
  5411 ;; Hardware stack levels required when called:    2
  5412 ;; This function calls:
  5413 ;;		Nothing
  5414 ;; This function is called by:
  5415 ;;		_moveObjectDown
  5416 ;; This function uses a non-reentrant model
  5417 ;;
  5418                           
  5419                           	psect	text28
  5420  001F88                     __ptext28:
  5421                           	opt stack 0
  5422  001F88                     _checkForBottom:
  5423                           	opt stack 26
  5424                           
  5425                           ;pictris.c: 756: _Bool checkForBottom(volatile uint16_t * pObject);pictris.c: 757: {;pic
      +                          tris.c: 758:     for (byte i = 0; i < 8; i++)
  5426                           
  5427                           ;incstack = 0
  5428  001F88  0E00               	movlw	0
  5429  001F8A  6E4B               	movwf	checkForBottom@i,c
  5430  001F8C                     l2771:
  5431  001F8C  0E07               	movlw	7
  5432  001F8E  644B               	cpfsgt	checkForBottom@i,c
  5433  001F90  D001               	goto	l306
  5434  001F92  D012               	goto	u2280
  5435  001F94                     l306:
  5436                           
  5437                           ;pictris.c: 759:         if (pObject[i] & (1<<15))
  5438  001F94  504B               	movf	checkForBottom@i,w,c
  5439  001F96  0D02               	mullw	2
  5440  001F98  50F3               	movf	prodl,w,c
  5441  001F9A  2447               	addwf	checkForBottom@pObject,w,c
  5442  001F9C  6ED9               	movwf	fsr2l,c
  5443  001F9E  50F4               	movf	prodh,w,c
  5444  001FA0  2048               	addwfc	checkForBottom@pObject+1,w,c
  5445  001FA2  6EDA               	movwf	fsr2h,c
  5446  001FA4  CFDE F049          	movff	postinc2,??_checkForBottom
  5447  001FA8  CFDD F04A          	movff	postdec2,??_checkForBottom+1
  5448  001FAC  AE4A               	btfss	??_checkForBottom+1,7,c
  5449  001FAE  D002               	goto	l308
  5450                           
  5451                           ;pictris.c: 760:             return 1;
  5452  001FB0  0E01               	movlw	1
  5453  001FB2  0012               	return	
  5454  001FB4                     l308:
  5455  001FB4  2A4B               	incf	checkForBottom@i,f,c
  5456  001FB6  D7EA               	goto	l2771
  5457  001FB8                     u2280:
  5458                           
  5459                           ;pictris.c: 761:     return 0;
  5460  001FB8  0E00               	movlw	0
  5461  001FBA  0012               	return	
  5462  001FBC                     __end_of_checkForBottom:
  5463                           	opt stack 0
  5464                           tblptru	equ	0xFF8
  5465                           tblptrh	equ	0xFF7
  5466                           tblptrl	equ	0xFF6
  5467                           tablat	equ	0xFF5
  5468                           prodh	equ	0xFF4
  5469                           prodl	equ	0xFF3
  5470                           intcon	equ	0xFF2
  5471                           postinc0	equ	0xFEE
  5472                           wreg	equ	0xFE8
  5473                           indf1	equ	0xFE7
  5474                           postinc1	equ	0xFE6
  5475                           postdec1	equ	0xFE5
  5476                           plusw1	equ	0xFE3
  5477                           fsr1h	equ	0xFE2
  5478                           fsr1l	equ	0xFE1
  5479                           indf2	equ	0xFDF
  5480                           postinc2	equ	0xFDE
  5481                           postdec2	equ	0xFDD
  5482                           preinc2	equ	0xFDC
  5483                           plusw2	equ	0xFDB
  5484                           fsr2h	equ	0xFDA
  5485                           fsr2l	equ	0xFD9
  5486                           status	equ	0xFD8
  5487                           
  5488 ;; *************** function _checkForRightWall *****************
  5489 ;; Defined at:
  5490 ;;		line 773 in file "pictris.c"
  5491 ;; Parameters:    Size  Location     Type
  5492 ;;  pObject         2   18[COMRAM] PTR volatile unsigned sh
  5493 ;;		 -> ObjectData(16), 
  5494 ;; Auto vars:     Size  Location     Type
  5495 ;;		None
  5496 ;; Return value:  Size  Location     Type
  5497 ;;                  1    wreg      _Bool 
  5498 ;; Registers used:
  5499 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  5500 ;; Tracked objects:
  5501 ;;		On entry : 0/0
  5502 ;;		On exit  : 0/0
  5503 ;;		Unchanged: 0/0
  5504 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5505 ;;      Params:         2       0       0       0       0       0       0
  5506 ;;      Locals:         0       0       0       0       0       0       0
  5507 ;;      Temps:          2       0       0       0       0       0       0
  5508 ;;      Totals:         4       0       0       0       0       0       0
  5509 ;;Total ram usage:        4 bytes
  5510 ;; Hardware stack levels used:    1
  5511 ;; Hardware stack levels required when called:    2
  5512 ;; This function calls:
  5513 ;;		Nothing
  5514 ;; This function is called by:
  5515 ;;		_checkButtons
  5516 ;; This function uses a non-reentrant model
  5517 ;;
  5518                           
  5519                           	psect	text29
  5520  002106                     __ptext29:
  5521                           	opt stack 0
  5522  002106                     _checkForRightWall:
  5523                           	opt stack 26
  5524                           
  5525                           ;pictris.c: 773: _Bool checkForRightWall(volatile uint16_t * pObject);pictris.c: 774: {;
      +                          pictris.c: 775:     return pObject[7] != 0;
  5526                           
  5527                           ;incstack = 0
  5528  002106  EE20 F00E          	lfsr	2,14
  5529  00210A  5047               	movf	checkForRightWall@pObject,w,c
  5530  00210C  26D9               	addwf	fsr2l,f,c
  5531  00210E  5048               	movf	checkForRightWall@pObject+1,w,c
  5532  002110  22DA               	addwfc	fsr2h,f,c
  5533  002112  50DE               	movf	postinc2,w,c
  5534  002114  10DE               	iorwf	postinc2,w,c
  5535  002116  B4D8               	btfsc	status,2,c
  5536  002118  D002               	goto	u2560
  5537  00211A  0E01               	movlw	1
  5538  00211C  0012               	return	
  5539  00211E                     u2560:
  5540  00211E  0E00               	movlw	0
  5541  002120  0012               	return	
  5542  002122                     __end_of_checkForRightWall:
  5543                           	opt stack 0
  5544                           tblptru	equ	0xFF8
  5545                           tblptrh	equ	0xFF7
  5546                           tblptrl	equ	0xFF6
  5547                           tablat	equ	0xFF5
  5548                           prodh	equ	0xFF4
  5549                           prodl	equ	0xFF3
  5550                           intcon	equ	0xFF2
  5551                           postinc0	equ	0xFEE
  5552                           wreg	equ	0xFE8
  5553                           indf1	equ	0xFE7
  5554                           postinc1	equ	0xFE6
  5555                           postdec1	equ	0xFE5
  5556                           plusw1	equ	0xFE3
  5557                           fsr1h	equ	0xFE2
  5558                           fsr1l	equ	0xFE1
  5559                           indf2	equ	0xFDF
  5560                           postinc2	equ	0xFDE
  5561                           postdec2	equ	0xFDD
  5562                           preinc2	equ	0xFDC
  5563                           plusw2	equ	0xFDB
  5564                           fsr2h	equ	0xFDA
  5565                           fsr2l	equ	0xFD9
  5566                           status	equ	0xFD8
  5567                           
  5568 ;; *************** function _checkForLeftWall *****************
  5569 ;; Defined at:
  5570 ;;		line 766 in file "pictris.c"
  5571 ;; Parameters:    Size  Location     Type
  5572 ;;  pObject         2   18[COMRAM] PTR volatile unsigned sh
  5573 ;;		 -> ObjectData(16), 
  5574 ;; Auto vars:     Size  Location     Type
  5575 ;;		None
  5576 ;; Return value:  Size  Location     Type
  5577 ;;                  1    wreg      _Bool 
  5578 ;; Registers used:
  5579 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  5580 ;; Tracked objects:
  5581 ;;		On entry : 0/0
  5582 ;;		On exit  : 0/0
  5583 ;;		Unchanged: 0/0
  5584 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5585 ;;      Params:         2       0       0       0       0       0       0
  5586 ;;      Locals:         0       0       0       0       0       0       0
  5587 ;;      Temps:          2       0       0       0       0       0       0
  5588 ;;      Totals:         4       0       0       0       0       0       0
  5589 ;;Total ram usage:        4 bytes
  5590 ;; Hardware stack levels used:    1
  5591 ;; Hardware stack levels required when called:    2
  5592 ;; This function calls:
  5593 ;;		Nothing
  5594 ;; This function is called by:
  5595 ;;		_checkButtons
  5596 ;; This function uses a non-reentrant model
  5597 ;;
  5598                           
  5599                           	psect	text30
  5600  002122                     __ptext30:
  5601                           	opt stack 0
  5602  002122                     _checkForLeftWall:
  5603                           	opt stack 26
  5604                           
  5605                           ;pictris.c: 766: _Bool checkForLeftWall(volatile uint16_t * pObject);pictris.c: 767: {;p
      +                          ictris.c: 768:     return pObject[0] != 0;
  5606                           
  5607                           ;incstack = 0
  5608  002122  C047  FFD9         	movff	checkForLeftWall@pObject,fsr2l
  5609  002126  C048  FFDA         	movff	checkForLeftWall@pObject+1,fsr2h
  5610  00212A  50DE               	movf	postinc2,w,c
  5611  00212C  10DE               	iorwf	postinc2,w,c
  5612  00212E  B4D8               	btfsc	status,2,c
  5613  002130  D002               	goto	u2540
  5614  002132  0E01               	movlw	1
  5615  002134  0012               	return	
  5616  002136                     u2540:
  5617  002136  0E00               	movlw	0
  5618  002138  0012               	return	
  5619  00213A                     __end_of_checkForLeftWall:
  5620                           	opt stack 0
  5621                           tblptru	equ	0xFF8
  5622                           tblptrh	equ	0xFF7
  5623                           tblptrl	equ	0xFF6
  5624                           tablat	equ	0xFF5
  5625                           prodh	equ	0xFF4
  5626                           prodl	equ	0xFF3
  5627                           intcon	equ	0xFF2
  5628                           postinc0	equ	0xFEE
  5629                           wreg	equ	0xFE8
  5630                           indf1	equ	0xFE7
  5631                           postinc1	equ	0xFE6
  5632                           postdec1	equ	0xFE5
  5633                           plusw1	equ	0xFE3
  5634                           fsr1h	equ	0xFE2
  5635                           fsr1l	equ	0xFE1
  5636                           indf2	equ	0xFDF
  5637                           postinc2	equ	0xFDE
  5638                           postdec2	equ	0xFDD
  5639                           preinc2	equ	0xFDC
  5640                           plusw2	equ	0xFDB
  5641                           fsr2h	equ	0xFDA
  5642                           fsr2l	equ	0xFD9
  5643                           status	equ	0xFD8
  5644                           
  5645 ;; *************** function _MoveSnakes *****************
  5646 ;; Defined at:
  5647 ;;		line 638 in file "pictris.c"
  5648 ;; Parameters:    Size  Location     Type
  5649 ;;		None
  5650 ;; Auto vars:     Size  Location     Type
  5651 ;;  i               1   40[COMRAM] unsigned char 
  5652 ;; Return value:  Size  Location     Type
  5653 ;;                  1    wreg      void 
  5654 ;; Registers used:
  5655 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5656 ;; Tracked objects:
  5657 ;;		On entry : 0/0
  5658 ;;		On exit  : 0/0
  5659 ;;		Unchanged: 0/0
  5660 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5661 ;;      Params:         0       0       0       0       0       0       0
  5662 ;;      Locals:         1       0       0       0       0       0       0
  5663 ;;      Temps:          8       0       0       0       0       0       0
  5664 ;;      Totals:         9       0       0       0       0       0       0
  5665 ;;Total ram usage:        9 bytes
  5666 ;; Hardware stack levels used:    1
  5667 ;; Hardware stack levels required when called:    5
  5668 ;; This function calls:
  5669 ;;		_CreateBerry
  5670 ;;		_SnakeGraph
  5671 ;; This function is called by:
  5672 ;;		_mainGameLoop
  5673 ;; This function uses a non-reentrant model
  5674 ;;
  5675                           
  5676                           	psect	text31
  5677  000934                     __ptext31:
  5678                           	opt stack 0
  5679  000934                     _MoveSnakes:
  5680                           	opt stack 24
  5681                           
  5682                           ;pictris.c: 640:     uint8_t i;;pictris.c: 641:     switch (direction){
  5683                           
  5684                           ;incstack = 0
  5685  000934  D030               	goto	l242
  5686  000936                     
  5687                           ;pictris.c: 643:             positions[0].y = positions[0].y - 1;
  5688  000936  0101               	movlb	1	; () banked
  5689  000938  0501               	decf	(_positions+1)& (0+255),w,b
  5690  00093A  6F01               	movwf	(_positions+1)& (0+255),b
  5691                           
  5692                           ; BSR set to: 1
  5693                           ;pictris.c: 644:             previous_direction = 0;
  5694  00093C  0E00               	movlw	0
  5695  00093E  6E08               	movwf	_previous_direction,c
  5696                           
  5697                           ; BSR set to: 1
  5698                           ;pictris.c: 645:             if (positions[0].y >= 200){
  5699  000940  0EC7               	movlw	199
  5700  000942  6501               	cpfsgt	(_positions+1)& (0+255),b
  5701  000944  D03C               	goto	l245
  5702                           
  5703                           ; BSR set to: 1
  5704                           ;pictris.c: 646:                 positions[0].y = 15;
  5705  000946  0E0F               	movlw	15
  5706  000948  D019               	goto	L4
  5707  00094A                     
  5708                           ;pictris.c: 650:             positions[0].x = positions[0].x + 1;
  5709                           
  5710                           ; BSR set to: 1
  5711  00094A  0101               	movlb	1	; () banked
  5712  00094C  2900               	incf	_positions& (0+255),w,b
  5713  00094E  6F00               	movwf	_positions& (0+255),b
  5714                           
  5715                           ; BSR set to: 1
  5716                           ;pictris.c: 651:             previous_direction = 1;
  5717  000950  0E01               	movlw	1
  5718  000952  6E08               	movwf	_previous_direction,c
  5719                           
  5720                           ; BSR set to: 1
  5721                           ;pictris.c: 652:             if (positions[0].x > 7 & positions[0].x < 200){
  5722  000954  0E07               	movlw	7
  5723  000956  6500               	cpfsgt	_positions& (0+255),b
  5724  000958  D032               	goto	l245
  5725                           
  5726                           ; BSR set to: 1
  5727  00095A  0EC8               	movlw	200
  5728  00095C  6100               	cpfslt	_positions& (0+255),b
  5729  00095E  D02F               	goto	l245
  5730                           
  5731                           ; BSR set to: 1
  5732                           ;pictris.c: 653:                 positions[0].x = 0;
  5733  000960  0E00               	movlw	0
  5734  000962  D017               	goto	L5
  5735  000964                     
  5736                           ;pictris.c: 657:             positions[0].y = positions[0].y + 1;
  5737                           
  5738                           ; BSR set to: 1
  5739  000964  0101               	movlb	1	; () banked
  5740  000966  2901               	incf	(_positions+1)& (0+255),w,b
  5741  000968  6F01               	movwf	(_positions+1)& (0+255),b
  5742                           
  5743                           ; BSR set to: 1
  5744                           ;pictris.c: 658:             previous_direction = 2;
  5745  00096A  0E02               	movlw	2
  5746  00096C  6E08               	movwf	_previous_direction,c
  5747                           
  5748                           ; BSR set to: 1
  5749                           ;pictris.c: 659:             if (positions[0].y > 15 & positions[0].y < 200) {
  5750  00096E  0E0F               	movlw	15
  5751  000970  6501               	cpfsgt	(_positions+1)& (0+255),b
  5752  000972  D025               	goto	l245
  5753                           
  5754                           ; BSR set to: 1
  5755  000974  0EC8               	movlw	200
  5756  000976  6101               	cpfslt	(_positions+1)& (0+255),b
  5757  000978  D022               	goto	l245
  5758                           
  5759                           ; BSR set to: 1
  5760                           ;pictris.c: 660:                 positions[0].y = 0;
  5761  00097A  0E00               	movlw	0
  5762  00097C                     L4:
  5763  00097C  6F01               	movwf	(_positions+1)& (0+255),b
  5764                           
  5765                           ; BSR set to: 1
  5766                           ;pictris.c: 662:             break;
  5767                           
  5768                           ;pictris.c: 661:             };
  5769  00097E  D01F               	goto	l245
  5770  000980                     
  5771                           ;pictris.c: 664:             positions[0].x = positions[0].x - 1;
  5772                           
  5773                           ; BSR set to: 1
  5774  000980  0101               	movlb	1	; () banked
  5775  000982  0500               	decf	_positions& (0+255),w,b
  5776  000984  6F00               	movwf	_positions& (0+255),b
  5777                           
  5778                           ; BSR set to: 1
  5779                           ;pictris.c: 665:             previous_direction = 3;
  5780  000986  0E03               	movlw	3
  5781  000988  6E08               	movwf	_previous_direction,c
  5782                           
  5783                           ; BSR set to: 1
  5784                           ;pictris.c: 666:             if (positions[0].x >= 200){
  5785  00098A  0EC7               	movlw	199
  5786  00098C  6500               	cpfsgt	_positions& (0+255),b
  5787  00098E  D017               	goto	l245
  5788                           
  5789                           ; BSR set to: 1
  5790                           ;pictris.c: 667:                 positions[0].x = 7;
  5791  000990  0E07               	movlw	7
  5792  000992                     L5:
  5793  000992  6F00               	movwf	_positions& (0+255),b
  5794                           
  5795                           ; BSR set to: 1
  5796                           ;pictris.c: 670:     };
  5797                           
  5798                           ; BSR set to: 1
  5799                           ;pictris.c: 669:             break;
  5800                           
  5801                           ;pictris.c: 668:             };
  5802  000994  D014               	goto	l245
  5803  000996                     l242:
  5804                           
  5805                           ; BSR set to: 1
  5806  000996  500D               	movf	_direction,w,c
  5807  000998  6E55               	movwf	??_MoveSnakes& (0+255),c
  5808  00099A  6A56               	clrf	(??_MoveSnakes+1)& (0+255),c
  5809                           
  5810                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  5811                           ; Switch size 1, requested type "space"
  5812                           ; Number of cases is 1, Range of values is 0 to 0
  5813                           ; switch strategies available:
  5814                           ; Name         Instructions Cycles
  5815                           ; simple_byte            4     3 (average)
  5816                           ;	Chosen strategy is simple_byte
  5817  00099C  5056               	movf	??_MoveSnakes+1,w,c
  5818  00099E  0A00               	xorlw	0	; case 0
  5819  0009A0  A4D8               	btfss	status,2,c
  5820  0009A2  D00D               	goto	l245
  5821                           
  5822                           ; Switch size 1, requested type "space"
  5823                           ; Number of cases is 4, Range of values is 0 to 3
  5824                           ; switch strategies available:
  5825                           ; Name         Instructions Cycles
  5826                           ; simple_byte           13     7 (average)
  5827                           ;	Chosen strategy is simple_byte
  5828  0009A4  5055               	movf	??_MoveSnakes,w,c
  5829  0009A6  0A00               	xorlw	0	; case 0
  5830  0009A8  B4D8               	btfsc	status,2,c
  5831  0009AA  D7C5               	goto	l243
  5832  0009AC  0A01               	xorlw	1	; case 1
  5833  0009AE  B4D8               	btfsc	status,2,c
  5834  0009B0  D7CC               	goto	l246
  5835  0009B2  0A03               	xorlw	3	; case 2
  5836  0009B4  B4D8               	btfsc	status,2,c
  5837  0009B6  D7D6               	goto	l248
  5838  0009B8  0A01               	xorlw	1	; case 3
  5839  0009BA  B4D8               	btfsc	status,2,c
  5840  0009BC  D7E1               	goto	l250
  5841  0009BE                     l245:
  5842                           
  5843                           ;pictris.c: 671:     for (i=0;i<=snakeLength;i++){
  5844  0009BE  0E00               	movlw	0
  5845  0009C0  6E5D               	movwf	MoveSnakes@i,c
  5846  0009C2  D06D               	goto	l252
  5847  0009C4                     
  5848                           ;pictris.c: 672:         positions[(snakeLength - i)+1].y = positions[snakeLength-i].y;
  5849  0009C4  505D               	movf	MoveSnakes@i,w,c
  5850  0009C6  6E55               	movwf	??_MoveSnakes& (0+255),c
  5851  0009C8  6A56               	clrf	(??_MoveSnakes+1)& (0+255),c
  5852  0009CA  1E55               	comf	??_MoveSnakes,f,c
  5853  0009CC  1E56               	comf	??_MoveSnakes+1,f,c
  5854  0009CE  4A55               	infsnz	??_MoveSnakes,f,c
  5855  0009D0  2A56               	incf	??_MoveSnakes+1,f,c
  5856  0009D2  500B               	movf	_snakeLength,w,c
  5857  0009D4  6E57               	movwf	(??_MoveSnakes+2)& (0+255),c
  5858  0009D6  6A58               	clrf	(??_MoveSnakes+3)& (0+255),c
  5859  0009D8  5055               	movf	??_MoveSnakes,w,c
  5860  0009DA  2657               	addwf	??_MoveSnakes+2,f,c
  5861  0009DC  5056               	movf	??_MoveSnakes+1,w,c
  5862  0009DE  2258               	addwfc	??_MoveSnakes+3,f,c
  5863  0009E0  90D8               	bcf	status,0,c
  5864  0009E2  3657               	rlcf	??_MoveSnakes+2,f,c
  5865  0009E4  3658               	rlcf	??_MoveSnakes+3,f,c
  5866  0009E6  0E01               	movlw	1
  5867  0009E8  2657               	addwf	??_MoveSnakes+2,f,c
  5868  0009EA  0E00               	movlw	0
  5869  0009EC  2258               	addwfc	??_MoveSnakes+3,f,c
  5870  0009EE  0E00               	movlw	low _positions
  5871  0009F0  2457               	addwf	??_MoveSnakes+2,w,c
  5872  0009F2  6ED9               	movwf	fsr2l,c
  5873  0009F4  0E01               	movlw	high _positions
  5874  0009F6  2058               	addwfc	??_MoveSnakes+3,w,c
  5875  0009F8  6EDA               	movwf	fsr2h,c
  5876  0009FA  505D               	movf	MoveSnakes@i,w,c
  5877  0009FC  6E59               	movwf	(??_MoveSnakes+4)& (0+255),c
  5878  0009FE  6A5A               	clrf	(??_MoveSnakes+5)& (0+255),c
  5879  000A00  1E59               	comf	??_MoveSnakes+4,f,c
  5880  000A02  1E5A               	comf	??_MoveSnakes+5,f,c
  5881  000A04  4A59               	infsnz	??_MoveSnakes+4,f,c
  5882  000A06  2A5A               	incf	??_MoveSnakes+5,f,c
  5883  000A08  500B               	movf	_snakeLength,w,c
  5884  000A0A  6E5B               	movwf	(??_MoveSnakes+6)& (0+255),c
  5885  000A0C  6A5C               	clrf	(??_MoveSnakes+7)& (0+255),c
  5886  000A0E  5059               	movf	??_MoveSnakes+4,w,c
  5887  000A10  265B               	addwf	??_MoveSnakes+6,f,c
  5888  000A12  505A               	movf	??_MoveSnakes+5,w,c
  5889  000A14  225C               	addwfc	??_MoveSnakes+7,f,c
  5890  000A16  90D8               	bcf	status,0,c
  5891  000A18  365B               	rlcf	??_MoveSnakes+6,f,c
  5892  000A1A  365C               	rlcf	??_MoveSnakes+7,f,c
  5893  000A1C  0E03               	movlw	3
  5894  000A1E  265B               	addwf	??_MoveSnakes+6,f,c
  5895  000A20  0E00               	movlw	0
  5896  000A22  225C               	addwfc	??_MoveSnakes+7,f,c
  5897  000A24  0E00               	movlw	low _positions
  5898  000A26  245B               	addwf	??_MoveSnakes+6,w,c
  5899  000A28  6EE1               	movwf	fsr1l,c
  5900  000A2A  0E01               	movlw	high _positions
  5901  000A2C  205C               	addwfc	??_MoveSnakes+7,w,c
  5902  000A2E  6EE2               	movwf	fsr1h,c
  5903  000A30  CFDF FFE7          	movff	indf2,indf1
  5904                           
  5905                           ;pictris.c: 673:         positions[(snakeLength - i)+1].x = positions[snakeLength-i].x;
  5906  000A34  505D               	movf	MoveSnakes@i,w,c
  5907  000A36  6E55               	movwf	??_MoveSnakes& (0+255),c
  5908  000A38  6A56               	clrf	(??_MoveSnakes+1)& (0+255),c
  5909  000A3A  1E55               	comf	??_MoveSnakes,f,c
  5910  000A3C  1E56               	comf	??_MoveSnakes+1,f,c
  5911  000A3E  4A55               	infsnz	??_MoveSnakes,f,c
  5912  000A40  2A56               	incf	??_MoveSnakes+1,f,c
  5913  000A42  500B               	movf	_snakeLength,w,c
  5914  000A44  6E57               	movwf	(??_MoveSnakes+2)& (0+255),c
  5915  000A46  6A58               	clrf	(??_MoveSnakes+3)& (0+255),c
  5916  000A48  5055               	movf	??_MoveSnakes,w,c
  5917  000A4A  2657               	addwf	??_MoveSnakes+2,f,c
  5918  000A4C  5056               	movf	??_MoveSnakes+1,w,c
  5919  000A4E  2258               	addwfc	??_MoveSnakes+3,f,c
  5920  000A50  90D8               	bcf	status,0,c
  5921  000A52  3657               	rlcf	??_MoveSnakes+2,f,c
  5922  000A54  3658               	rlcf	??_MoveSnakes+3,f,c
  5923  000A56  0E00               	movlw	low _positions
  5924  000A58  2457               	addwf	??_MoveSnakes+2,w,c
  5925  000A5A  6ED9               	movwf	fsr2l,c
  5926  000A5C  0E01               	movlw	high _positions
  5927  000A5E  2058               	addwfc	??_MoveSnakes+3,w,c
  5928  000A60  6EDA               	movwf	fsr2h,c
  5929  000A62  505D               	movf	MoveSnakes@i,w,c
  5930  000A64  6E59               	movwf	(??_MoveSnakes+4)& (0+255),c
  5931  000A66  6A5A               	clrf	(??_MoveSnakes+5)& (0+255),c
  5932  000A68  1E59               	comf	??_MoveSnakes+4,f,c
  5933  000A6A  1E5A               	comf	??_MoveSnakes+5,f,c
  5934  000A6C  4A59               	infsnz	??_MoveSnakes+4,f,c
  5935  000A6E  2A5A               	incf	??_MoveSnakes+5,f,c
  5936  000A70  500B               	movf	_snakeLength,w,c
  5937  000A72  6E5B               	movwf	(??_MoveSnakes+6)& (0+255),c
  5938  000A74  6A5C               	clrf	(??_MoveSnakes+7)& (0+255),c
  5939  000A76  5059               	movf	??_MoveSnakes+4,w,c
  5940  000A78  265B               	addwf	??_MoveSnakes+6,f,c
  5941  000A7A  505A               	movf	??_MoveSnakes+5,w,c
  5942  000A7C  225C               	addwfc	??_MoveSnakes+7,f,c
  5943  000A7E  90D8               	bcf	status,0,c
  5944  000A80  365B               	rlcf	??_MoveSnakes+6,f,c
  5945  000A82  365C               	rlcf	??_MoveSnakes+7,f,c
  5946  000A84  0E02               	movlw	2
  5947  000A86  265B               	addwf	??_MoveSnakes+6,f,c
  5948  000A88  0E00               	movlw	0
  5949  000A8A  225C               	addwfc	??_MoveSnakes+7,f,c
  5950  000A8C  0E00               	movlw	low _positions
  5951  000A8E  245B               	addwf	??_MoveSnakes+6,w,c
  5952  000A90  6EE1               	movwf	fsr1l,c
  5953  000A92  0E01               	movlw	high _positions
  5954  000A94  205C               	addwfc	??_MoveSnakes+7,w,c
  5955  000A96  6EE2               	movwf	fsr1h,c
  5956  000A98  CFDF FFE7          	movff	indf2,indf1
  5957                           
  5958                           ;pictris.c: 674:     }
  5959  000A9C  2A5D               	incf	MoveSnakes@i,f,c
  5960  000A9E                     l252:
  5961  000A9E  505D               	movf	MoveSnakes@i,w,c
  5962  000AA0  5C0B               	subwf	_snakeLength,w,c
  5963  000AA2  B0D8               	btfsc	status,0,c
  5964  000AA4  D78F               	goto	l253
  5965                           
  5966                           ;pictris.c: 675:     if (positions[0].y == berryY && positions[0].x == berryX){
  5967  000AA6  5009               	movf	_berryY,w,c
  5968  000AA8  0101               	movlb	1	; () banked
  5969  000AAA  1901               	xorwf	(_positions+1)& (0+255),w,b
  5970  000AAC  A4D8               	btfss	status,2,c
  5971  000AAE  D008               	goto	l255
  5972                           
  5973                           ; BSR set to: 1
  5974  000AB0  500A               	movf	_berryX,w,c
  5975  000AB2  1900               	xorwf	_positions& (0+255),w,b
  5976  000AB4  A4D8               	btfss	status,2,c
  5977  000AB6  D004               	goto	l255
  5978                           
  5979                           ; BSR set to: 1
  5980                           ;pictris.c: 676:         snakeLength = snakeLength + 1;
  5981  000AB8  280B               	incf	_snakeLength,w,c
  5982  000ABA  6E0B               	movwf	_snakeLength,c
  5983                           
  5984                           ; BSR set to: 1
  5985                           ;pictris.c: 677:         CreateBerry();
  5986  000ABC  EC13  F00E         	call	_CreateBerry	;wreg free
  5987  000AC0                     l255:
  5988                           
  5989                           ;pictris.c: 679:     for (i=4;i<=snakeLength;i++){
  5990  000AC0  0E04               	movlw	4
  5991  000AC2  6E5D               	movwf	MoveSnakes@i,c
  5992  000AC4  D020               	goto	l256
  5993  000AC6                     
  5994                           ;pictris.c: 680:         if (positions[0].y == positions[i].y && positions[0].x == posit
      +                          ions[i].x){
  5995  000AC6  505D               	movf	MoveSnakes@i,w,c
  5996  000AC8  0D02               	mullw	2
  5997  000ACA  0E01               	movlw	1
  5998  000ACC  26F3               	addwf	prodl,f,c
  5999  000ACE  0E00               	movlw	0
  6000  000AD0  22F4               	addwfc	prodh,f,c
  6001  000AD2  0E00               	movlw	low _positions
  6002  000AD4  24F3               	addwf	prodl,w,c
  6003  000AD6  6ED9               	movwf	fsr2l,c
  6004  000AD8  0E01               	movlw	high _positions
  6005  000ADA  20F4               	addwfc	prodh,w,c
  6006  000ADC  6EDA               	movwf	fsr2h,c
  6007  000ADE  50DE               	movf	postinc2,w,c
  6008  000AE0  0101               	movlb	1	; () banked
  6009  000AE2  1901               	xorwf	(_positions+1)& (0+255),w,b
  6010  000AE4  A4D8               	btfss	status,2,c
  6011  000AE6  D00E               	goto	l258
  6012                           
  6013                           ; BSR set to: 1
  6014  000AE8  505D               	movf	MoveSnakes@i,w,c
  6015  000AEA  0D02               	mullw	2
  6016  000AEC  0E00               	movlw	low _positions
  6017  000AEE  24F3               	addwf	prodl,w,c
  6018  000AF0  6ED9               	movwf	fsr2l,c
  6019  000AF2  0E01               	movlw	high _positions
  6020  000AF4  20F4               	addwfc	prodh,w,c
  6021  000AF6  6EDA               	movwf	fsr2h,c
  6022  000AF8  5100               	movf	_positions& (0+255),w,b
  6023  000AFA  18DE               	xorwf	postinc2,w,c
  6024  000AFC  A4D8               	btfss	status,2,c
  6025  000AFE  D002               	goto	l258
  6026                           
  6027                           ; BSR set to: 1
  6028                           ;pictris.c: 681:             EndOfGame = 1;
  6029  000B00  0E01               	movlw	1
  6030  000B02  6E12               	movwf	_EndOfGame,c
  6031  000B04                     l258:
  6032                           
  6033                           ; BSR set to: 1
  6034                           ;pictris.c: 683:     };
  6035                           
  6036                           ; BSR set to: 1
  6037  000B04  2A5D               	incf	MoveSnakes@i,f,c
  6038  000B06                     l256:
  6039                           
  6040                           ; BSR set to: 1
  6041  000B06  505D               	movf	MoveSnakes@i,w,c
  6042  000B08  5C0B               	subwf	_snakeLength,w,c
  6043  000B0A  B0D8               	btfsc	status,0,c
  6044  000B0C  D7DC               	goto	l257
  6045                           
  6046                           ;pictris.c: 684:     SnakeGraph();
  6047  000B0E  EC14  F007         	call	_SnakeGraph	;wreg free
  6048  000B12  0012               	return		;funcret
  6049  000B14                     __end_of_MoveSnakes:
  6050                           	opt stack 0
  6051                           tblptru	equ	0xFF8
  6052                           tblptrh	equ	0xFF7
  6053                           tblptrl	equ	0xFF6
  6054                           tablat	equ	0xFF5
  6055                           prodh	equ	0xFF4
  6056                           prodl	equ	0xFF3
  6057                           intcon	equ	0xFF2
  6058                           postinc0	equ	0xFEE
  6059                           wreg	equ	0xFE8
  6060                           indf1	equ	0xFE7
  6061                           postinc1	equ	0xFE6
  6062                           postdec1	equ	0xFE5
  6063                           plusw1	equ	0xFE3
  6064                           fsr1h	equ	0xFE2
  6065                           fsr1l	equ	0xFE1
  6066                           indf2	equ	0xFDF
  6067                           postinc2	equ	0xFDE
  6068                           postdec2	equ	0xFDD
  6069                           preinc2	equ	0xFDC
  6070                           plusw2	equ	0xFDB
  6071                           fsr2h	equ	0xFDA
  6072                           fsr2l	equ	0xFD9
  6073                           status	equ	0xFD8
  6074                           
  6075 ;; *************** function _SnakeGraph *****************
  6076 ;; Defined at:
  6077 ;;		line 608 in file "pictris.c"
  6078 ;; Parameters:    Size  Location     Type
  6079 ;;		None
  6080 ;; Auto vars:     Size  Location     Type
  6081 ;;  i               1   31[COMRAM] unsigned char 
  6082 ;;  j               1   30[COMRAM] unsigned char 
  6083 ;; Return value:  Size  Location     Type
  6084 ;;                  1    wreg      void 
  6085 ;; Registers used:
  6086 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6087 ;; Tracked objects:
  6088 ;;		On entry : 0/0
  6089 ;;		On exit  : 0/0
  6090 ;;		Unchanged: 0/0
  6091 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6092 ;;      Params:         0       0       0       0       0       0       0
  6093 ;;      Locals:         2       0       0       0       0       0       0
  6094 ;;      Temps:          5       0       0       0       0       0       0
  6095 ;;      Totals:         7       0       0       0       0       0       0
  6096 ;;Total ram usage:        7 bytes
  6097 ;; Hardware stack levels used:    1
  6098 ;; Hardware stack levels required when called:    4
  6099 ;; This function calls:
  6100 ;;		_clearArray
  6101 ;;		_pauseMultiplexing
  6102 ;;		_resumeMultiplexing
  6103 ;; This function is called by:
  6104 ;;		_MoveSnakes
  6105 ;; This function uses a non-reentrant model
  6106 ;;
  6107                           
  6108                           	psect	text32
  6109  000E28                     __ptext32:
  6110                           	opt stack 0
  6111  000E28                     _SnakeGraph:
  6112                           	opt stack 24
  6113                           
  6114                           ;pictris.c: 610:     uint8_t i;;pictris.c: 611:     uint8_t j;;pictris.c: 612:     clear
      +                          Array(tmpObjectData, 8);
  6115                           
  6116                           ;incstack = 0
  6117  000E28  0E80               	movlw	low _tmpObjectData
  6118  000E2A  6E47               	movwf	clearArray@pArray,c
  6119  000E2C  0E00               	movlw	high _tmpObjectData
  6120  000E2E  6E48               	movwf	clearArray@pArray+1,c
  6121  000E30  0E00               	movlw	0
  6122  000E32  6E4A               	movwf	clearArray@size+1,c
  6123  000E34  0E08               	movlw	8
  6124  000E36  6E49               	movwf	clearArray@size,c
  6125  000E38  ECDE  F00F         	call	_clearArray	;wreg free
  6126                           
  6127                           ;pictris.c: 613:     for(i=0;i<=snakeLength;i++){
  6128  000E3C  0E00               	movlw	0
  6129  000E3E  6E54               	movwf	SnakeGraph@i,c
  6130  000E40  D043               	goto	l231
  6131  000E42                     
  6132                           ;pictris.c: 614:         j = positions[i].x;
  6133  000E42  5054               	movf	SnakeGraph@i,w,c
  6134  000E44  0D02               	mullw	2
  6135  000E46  0E00               	movlw	low _positions
  6136  000E48  24F3               	addwf	prodl,w,c
  6137  000E4A  6ED9               	movwf	fsr2l,c
  6138  000E4C  0E01               	movlw	high _positions
  6139  000E4E  20F4               	addwfc	prodh,w,c
  6140  000E50  6EDA               	movwf	fsr2h,c
  6141  000E52  50DF               	movf	indf2,w,c
  6142  000E54  6E53               	movwf	SnakeGraph@j,c
  6143                           
  6144                           ;pictris.c: 615:         tmpObjectData[j] = (SnakeYtext[positions[i].y] | tmpObjectData[
      +                          j]);
  6145  000E56  5053               	movf	SnakeGraph@j,w,c
  6146  000E58  0D02               	mullw	2
  6147  000E5A  0E80               	movlw	low _tmpObjectData
  6148  000E5C  24F3               	addwf	prodl,w,c
  6149  000E5E  6ED9               	movwf	fsr2l,c
  6150  000E60  0E00               	movlw	high _tmpObjectData
  6151  000E62  20F4               	addwfc	prodh,w,c
  6152  000E64  6EDA               	movwf	fsr2h,c
  6153  000E66  CFDE F04E          	movff	postinc2,??_SnakeGraph
  6154  000E6A  CFDD F04F          	movff	postdec2,??_SnakeGraph+1
  6155  000E6E  5054               	movf	SnakeGraph@i,w,c
  6156  000E70  0D02               	mullw	2
  6157  000E72  0E01               	movlw	1
  6158  000E74  26F3               	addwf	prodl,f,c
  6159  000E76  0E00               	movlw	0
  6160  000E78  22F4               	addwfc	prodh,f,c
  6161  000E7A  0E00               	movlw	low _positions
  6162  000E7C  24F3               	addwf	prodl,w,c
  6163  000E7E  6ED9               	movwf	fsr2l,c
  6164  000E80  0E01               	movlw	high _positions
  6165  000E82  20F4               	addwfc	prodh,w,c
  6166  000E84  6EDA               	movwf	fsr2h,c
  6167  000E86  50DF               	movf	indf2,w,c
  6168  000E88  6E50               	movwf	(??_SnakeGraph+2)& (0+255),c
  6169  000E8A  5050               	movf	??_SnakeGraph+2,w,c
  6170  000E8C  0D02               	mullw	2
  6171  000E8E  0E01               	movlw	low _SnakeYtext
  6172  000E90  24F3               	addwf	prodl,w,c
  6173  000E92  6EF6               	movwf	tblptrl,c
  6174  000E94  0E06               	movlw	high _SnakeYtext
  6175  000E96  20F4               	addwfc	prodh,w,c
  6176  000E98  6EF7               	movwf	tblptrh,c
  6177  000E9A                     	if	0	;There are less than 3 active tblptr bytes
  6178  000E9A                     	endif
  6179  000E9A  0009               	tblrd		*+
  6180  000E9C  CFF5 F051          	movff	tablat,??_SnakeGraph+3
  6181  000EA0  0009               	tblrd		*+
  6182  000EA2  CFF5 F052          	movff	tablat,??_SnakeGraph+4
  6183  000EA6  504E               	movf	??_SnakeGraph,w,c
  6184  000EA8  1251               	iorwf	??_SnakeGraph+3,f,c
  6185  000EAA  504F               	movf	??_SnakeGraph+1,w,c
  6186  000EAC  1252               	iorwf	??_SnakeGraph+4,f,c
  6187  000EAE  5053               	movf	SnakeGraph@j,w,c
  6188  000EB0  0D02               	mullw	2
  6189  000EB2  0E80               	movlw	low _tmpObjectData
  6190  000EB4  24F3               	addwf	prodl,w,c
  6191  000EB6  6ED9               	movwf	fsr2l,c
  6192  000EB8  0E00               	movlw	high _tmpObjectData
  6193  000EBA  20F4               	addwfc	prodh,w,c
  6194  000EBC  6EDA               	movwf	fsr2h,c
  6195  000EBE  C051  FFDE         	movff	??_SnakeGraph+3,postinc2
  6196  000EC2  C052  FFDD         	movff	??_SnakeGraph+4,postdec2
  6197                           
  6198                           ;pictris.c: 624:     }
  6199  000EC6  2A54               	incf	SnakeGraph@i,f,c
  6200  000EC8                     l231:
  6201  000EC8  5054               	movf	SnakeGraph@i,w,c
  6202  000ECA  5C0B               	subwf	_snakeLength,w,c
  6203  000ECC  B0D8               	btfsc	status,0,c
  6204  000ECE  D7B9               	goto	l232
  6205                           
  6206                           ;pictris.c: 625:     for(i=0;i<8;i++){
  6207  000ED0  0E00               	movlw	0
  6208  000ED2  6E54               	movwf	SnakeGraph@i,c
  6209  000ED4                     l4105:
  6210  000ED4  0E07               	movlw	7
  6211  000ED6  6454               	cpfsgt	SnakeGraph@i,c
  6212  000ED8  D001               	goto	l234
  6213  000EDA  D030               	goto	u4310
  6214  000EDC                     l234:
  6215                           
  6216                           ;pictris.c: 626:         if (berryX == i){
  6217  000EDC  5054               	movf	SnakeGraph@i,w,c
  6218  000EDE  180A               	xorwf	_berryX,w,c
  6219  000EE0  A4D8               	btfss	status,2,c
  6220  000EE2  D02A               	goto	l236
  6221                           
  6222                           ;pictris.c: 627:             tmpObjectData[i] = SnakeYtext[berryY] | tmpObjectData[i];
  6223  000EE4  5054               	movf	SnakeGraph@i,w,c
  6224  000EE6  0D02               	mullw	2
  6225  000EE8  0E80               	movlw	low _tmpObjectData
  6226  000EEA  24F3               	addwf	prodl,w,c
  6227  000EEC  6ED9               	movwf	fsr2l,c
  6228  000EEE  0E00               	movlw	high _tmpObjectData
  6229  000EF0  20F4               	addwfc	prodh,w,c
  6230  000EF2  6EDA               	movwf	fsr2h,c
  6231  000EF4  CFDE F04E          	movff	postinc2,??_SnakeGraph
  6232  000EF8  CFDD F04F          	movff	postdec2,??_SnakeGraph+1
  6233  000EFC  5009               	movf	_berryY,w,c
  6234  000EFE  0D02               	mullw	2
  6235  000F00  0E01               	movlw	low _SnakeYtext
  6236  000F02  24F3               	addwf	prodl,w,c
  6237  000F04  6EF6               	movwf	tblptrl,c
  6238  000F06  0E06               	movlw	high _SnakeYtext
  6239  000F08  20F4               	addwfc	prodh,w,c
  6240  000F0A  6EF7               	movwf	tblptrh,c
  6241  000F0C                     	if	0	;There are less than 3 active tblptr bytes
  6242  000F0C                     	endif
  6243  000F0C  0009               	tblrd		*+
  6244  000F0E  CFF5 F050          	movff	tablat,??_SnakeGraph+2
  6245  000F12  0009               	tblrd		*+
  6246  000F14  CFF5 F051          	movff	tablat,??_SnakeGraph+3
  6247  000F18  504E               	movf	??_SnakeGraph,w,c
  6248  000F1A  1250               	iorwf	??_SnakeGraph+2,f,c
  6249  000F1C  504F               	movf	??_SnakeGraph+1,w,c
  6250  000F1E  1251               	iorwf	??_SnakeGraph+3,f,c
  6251  000F20  5054               	movf	SnakeGraph@i,w,c
  6252  000F22  0D02               	mullw	2
  6253  000F24  0E80               	movlw	low _tmpObjectData
  6254  000F26  24F3               	addwf	prodl,w,c
  6255  000F28  6ED9               	movwf	fsr2l,c
  6256  000F2A  0E00               	movlw	high _tmpObjectData
  6257  000F2C  20F4               	addwfc	prodh,w,c
  6258  000F2E  6EDA               	movwf	fsr2h,c
  6259  000F30  C050  FFDE         	movff	??_SnakeGraph+2,postinc2
  6260  000F34  C051  FFDD         	movff	??_SnakeGraph+3,postdec2
  6261  000F38                     l236:
  6262                           
  6263                           ;pictris.c: 629:     }
  6264  000F38  2A54               	incf	SnakeGraph@i,f,c
  6265  000F3A  D7CC               	goto	l4105
  6266  000F3C                     u4310:
  6267                           
  6268                           ;pictris.c: 630:     pauseMultiplexing();
  6269  000F3C  ECC2  F010         	call	_pauseMultiplexing	;wreg free
  6270                           
  6271                           ;pictris.c: 631:     clearArray(ObjectData, 8);
  6272  000F40  0E18               	movlw	low _ObjectData
  6273  000F42  6E47               	movwf	clearArray@pArray,c
  6274  000F44  0E00               	movlw	high _ObjectData
  6275  000F46  6E48               	movwf	clearArray@pArray+1,c
  6276  000F48  0E00               	movlw	0
  6277  000F4A  6E4A               	movwf	clearArray@size+1,c
  6278  000F4C  0E08               	movlw	8
  6279  000F4E  6E49               	movwf	clearArray@size,c
  6280  000F50  ECDE  F00F         	call	_clearArray	;wreg free
  6281                           
  6282                           ;pictris.c: 632:     for(i=0;i<8;i++){
  6283  000F54  0E00               	movlw	0
  6284  000F56  6E54               	movwf	SnakeGraph@i,c
  6285  000F58                     l4123:
  6286  000F58  0E07               	movlw	7
  6287  000F5A  6454               	cpfsgt	SnakeGraph@i,c
  6288  000F5C  D001               	goto	l237
  6289  000F5E  D016               	goto	u4330
  6290  000F60                     l237:
  6291                           
  6292                           ;pictris.c: 633:         ObjectData[i] = tmpObjectData[i];
  6293  000F60  5054               	movf	SnakeGraph@i,w,c
  6294  000F62  0D02               	mullw	2
  6295  000F64  0E80               	movlw	low _tmpObjectData
  6296  000F66  24F3               	addwf	prodl,w,c
  6297  000F68  6ED9               	movwf	fsr2l,c
  6298  000F6A  0E00               	movlw	high _tmpObjectData
  6299  000F6C  20F4               	addwfc	prodh,w,c
  6300  000F6E  6EDA               	movwf	fsr2h,c
  6301  000F70  5054               	movf	SnakeGraph@i,w,c
  6302  000F72  0D02               	mullw	2
  6303  000F74  0E18               	movlw	low _ObjectData
  6304  000F76  24F3               	addwf	prodl,w,c
  6305  000F78  6EE1               	movwf	fsr1l,c
  6306  000F7A  0E00               	movlw	high _ObjectData
  6307  000F7C  20F4               	addwfc	prodh,w,c
  6308  000F7E  6EE2               	movwf	fsr1h,c
  6309  000F80  CFDE FFE6          	movff	postinc2,postinc1
  6310  000F84  CFDD FFE5          	movff	postdec2,postdec1
  6311                           
  6312                           ;pictris.c: 634:     }
  6313  000F88  2A54               	incf	SnakeGraph@i,f,c
  6314  000F8A  D7E6               	goto	l4123
  6315  000F8C                     u4330:
  6316                           
  6317                           ;pictris.c: 635:     resumeMultiplexing();
  6318  000F8C  ECD4  F010         	call	_resumeMultiplexing	;wreg free
  6319  000F90  0012               	return		;funcret
  6320  000F92                     __end_of_SnakeGraph:
  6321                           	opt stack 0
  6322                           tblptru	equ	0xFF8
  6323                           tblptrh	equ	0xFF7
  6324                           tblptrl	equ	0xFF6
  6325                           tablat	equ	0xFF5
  6326                           prodh	equ	0xFF4
  6327                           prodl	equ	0xFF3
  6328                           intcon	equ	0xFF2
  6329                           postinc0	equ	0xFEE
  6330                           wreg	equ	0xFE8
  6331                           indf1	equ	0xFE7
  6332                           postinc1	equ	0xFE6
  6333                           postdec1	equ	0xFE5
  6334                           plusw1	equ	0xFE3
  6335                           fsr1h	equ	0xFE2
  6336                           fsr1l	equ	0xFE1
  6337                           indf2	equ	0xFDF
  6338                           postinc2	equ	0xFDE
  6339                           postdec2	equ	0xFDD
  6340                           preinc2	equ	0xFDC
  6341                           plusw2	equ	0xFDB
  6342                           fsr2h	equ	0xFDA
  6343                           fsr2l	equ	0xFD9
  6344                           status	equ	0xFD8
  6345                           
  6346 ;; *************** function _CreateBerry *****************
  6347 ;; Defined at:
  6348 ;;		line 588 in file "pictris.c"
  6349 ;; Parameters:    Size  Location     Type
  6350 ;;		None
  6351 ;; Auto vars:     Size  Location     Type
  6352 ;;  i               1   27[COMRAM] unsigned char 
  6353 ;;  randomGood      1   26[COMRAM] _Bool 
  6354 ;; Return value:  Size  Location     Type
  6355 ;;                  1    wreg      void 
  6356 ;; Registers used:
  6357 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6358 ;; Tracked objects:
  6359 ;;		On entry : 0/0
  6360 ;;		On exit  : 0/0
  6361 ;;		Unchanged: 0/0
  6362 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6363 ;;      Params:         0       0       0       0       0       0       0
  6364 ;;      Locals:         2       0       0       0       0       0       0
  6365 ;;      Temps:          1       0       0       0       0       0       0
  6366 ;;      Totals:         3       0       0       0       0       0       0
  6367 ;;Total ram usage:        3 bytes
  6368 ;; Hardware stack levels used:    1
  6369 ;; Hardware stack levels required when called:    4
  6370 ;; This function calls:
  6371 ;;		_genBerry
  6372 ;; This function is called by:
  6373 ;;		_MoveSnakes
  6374 ;;		_initialise_globals
  6375 ;; This function uses a non-reentrant model
  6376 ;;
  6377                           
  6378                           	psect	text33
  6379  001C26                     __ptext33:
  6380                           	opt stack 0
  6381  001C26                     _CreateBerry:
  6382                           	opt stack 24
  6383                           
  6384                           ;pictris.c: 590:     _Bool randomGood;;pictris.c: 591:     uint8_t i;;pictris.c: 592:   
      +                            randomGood = 1;
  6385                           
  6386                           ;incstack = 0
  6387  001C26  0E01               	movlw	1
  6388  001C28  6E4F               	movwf	CreateBerry@randomGood,c
  6389  001C2A                     l222:
  6390                           
  6391                           ;pictris.c: 594:     {;pictris.c: 595:         randomGood = 0;
  6392  001C2A  0E00               	movlw	0
  6393  001C2C  6E4F               	movwf	CreateBerry@randomGood,c
  6394                           
  6395                           ;pictris.c: 596:         berryX = genBerry(8);
  6396  001C2E  0E08               	movlw	8
  6397  001C30  EC9D  F010         	call	_genBerry
  6398  001C34  6E0A               	movwf	_berryX,c
  6399                           
  6400                           ;pictris.c: 597:         berryY = genBerry(16);
  6401  001C36  0E10               	movlw	16
  6402  001C38  EC9D  F010         	call	_genBerry
  6403  001C3C  6E09               	movwf	_berryY,c
  6404                           
  6405                           ;pictris.c: 598:         for(i=0;i<snakeLength;i++)
  6406  001C3E  0E00               	movlw	0
  6407  001C40  6E50               	movwf	CreateBerry@i,c
  6408  001C42  D01F               	goto	l223
  6409  001C44                     
  6410                           ;pictris.c: 599:         {;pictris.c: 600:             if (berryX == positions[i].x && b
      +                          erryY == positions[i].y)
  6411  001C44  5050               	movf	CreateBerry@i,w,c
  6412  001C46  0D02               	mullw	2
  6413  001C48  0E00               	movlw	low _positions
  6414  001C4A  24F3               	addwf	prodl,w,c
  6415  001C4C  6ED9               	movwf	fsr2l,c
  6416  001C4E  0E01               	movlw	high _positions
  6417  001C50  20F4               	addwfc	prodh,w,c
  6418  001C52  6EDA               	movwf	fsr2h,c
  6419  001C54  500A               	movf	_berryX,w,c
  6420  001C56  18DE               	xorwf	postinc2,w,c
  6421  001C58  A4D8               	btfss	status,2,c
  6422  001C5A  D012               	goto	l225
  6423  001C5C  5050               	movf	CreateBerry@i,w,c
  6424  001C5E  0D02               	mullw	2
  6425  001C60  0E01               	movlw	1
  6426  001C62  26F3               	addwf	prodl,f,c
  6427  001C64  0E00               	movlw	0
  6428  001C66  22F4               	addwfc	prodh,f,c
  6429  001C68  0E00               	movlw	low _positions
  6430  001C6A  24F3               	addwf	prodl,w,c
  6431  001C6C  6ED9               	movwf	fsr2l,c
  6432  001C6E  0E01               	movlw	high _positions
  6433  001C70  20F4               	addwfc	prodh,w,c
  6434  001C72  6EDA               	movwf	fsr2h,c
  6435  001C74  5009               	movf	_berryY,w,c
  6436  001C76  18DE               	xorwf	postinc2,w,c
  6437  001C78  A4D8               	btfss	status,2,c
  6438  001C7A  D002               	goto	l225
  6439                           
  6440                           ;pictris.c: 601:             {;pictris.c: 602:                 randomGood = 1;
  6441  001C7C  0E01               	movlw	1
  6442  001C7E  6E4F               	movwf	CreateBerry@randomGood,c
  6443  001C80                     l225:
  6444                           
  6445                           ;pictris.c: 604:         }
  6446  001C80  2A50               	incf	CreateBerry@i,f,c
  6447  001C82                     l223:
  6448  001C82  500B               	movf	_snakeLength,w,c
  6449  001C84  5C50               	subwf	CreateBerry@i,w,c
  6450  001C86  A0D8               	btfss	status,0,c
  6451  001C88  D7DD               	goto	l224
  6452                           
  6453                           ;pictris.c: 605:     } while (randomGood == 1);
  6454  001C8A  044F               	decf	CreateBerry@randomGood,w,c
  6455  001C8C  A4D8               	btfss	status,2,c
  6456  001C8E  0012               	return	
  6457  001C90  D7CC               	goto	l222
  6458  001C92                     __end_of_CreateBerry:
  6459                           	opt stack 0
  6460                           tblptru	equ	0xFF8
  6461                           tblptrh	equ	0xFF7
  6462                           tblptrl	equ	0xFF6
  6463                           tablat	equ	0xFF5
  6464                           prodh	equ	0xFF4
  6465                           prodl	equ	0xFF3
  6466                           intcon	equ	0xFF2
  6467                           postinc0	equ	0xFEE
  6468                           wreg	equ	0xFE8
  6469                           indf1	equ	0xFE7
  6470                           postinc1	equ	0xFE6
  6471                           postdec1	equ	0xFE5
  6472                           plusw1	equ	0xFE3
  6473                           fsr1h	equ	0xFE2
  6474                           fsr1l	equ	0xFE1
  6475                           indf2	equ	0xFDF
  6476                           postinc2	equ	0xFDE
  6477                           postdec2	equ	0xFDD
  6478                           preinc2	equ	0xFDC
  6479                           plusw2	equ	0xFDB
  6480                           fsr2h	equ	0xFDA
  6481                           fsr2l	equ	0xFD9
  6482                           status	equ	0xFD8
  6483                           
  6484 ;; *************** function _genBerry *****************
  6485 ;; Defined at:
  6486 ;;		line 581 in file "pictris.c"
  6487 ;; Parameters:    Size  Location     Type
  6488 ;;  size            1    wreg     unsigned char 
  6489 ;; Auto vars:     Size  Location     Type
  6490 ;;  size            1   23[COMRAM] unsigned char 
  6491 ;;  temp            1   24[COMRAM] unsigned char 
  6492 ;; Return value:  Size  Location     Type
  6493 ;;                  1    wreg      unsigned char 
  6494 ;; Registers used:
  6495 ;;		wreg, status,2, status,0, cstack
  6496 ;; Tracked objects:
  6497 ;;		On entry : 0/0
  6498 ;;		On exit  : 0/0
  6499 ;;		Unchanged: 0/0
  6500 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6501 ;;      Params:         0       0       0       0       0       0       0
  6502 ;;      Locals:         2       0       0       0       0       0       0
  6503 ;;      Temps:          0       0       0       0       0       0       0
  6504 ;;      Totals:         2       0       0       0       0       0       0
  6505 ;;Total ram usage:        2 bytes
  6506 ;; Hardware stack levels used:    1
  6507 ;; Hardware stack levels required when called:    3
  6508 ;; This function calls:
  6509 ;;		___lbmod
  6510 ;;		_rnd_get_num
  6511 ;; This function is called by:
  6512 ;;		_CreateBerry
  6513 ;; This function uses a non-reentrant model
  6514 ;;
  6515                           
  6516                           	psect	text34
  6517  00213A                     __ptext34:
  6518                           	opt stack 0
  6519  00213A                     _genBerry:
  6520                           	opt stack 24
  6521                           
  6522                           ;incstack = 0
  6523                           ;genBerry@size stored from wreg
  6524  00213A  6E4C               	movwf	genBerry@size,c
  6525                           
  6526                           ;pictris.c: 581: uint8_t genBerry(uint8_t size);pictris.c: 582: {;pictris.c: 583:     ui
      +                          nt8_t temp;;pictris.c: 584:     temp = rnd_get_num();
  6527  00213C  EC29  F00F         	call	_rnd_get_num	;wreg free
  6528  002140  6E4D               	movwf	genBerry@temp,c
  6529                           
  6530                           ;pictris.c: 585:     temp = temp % size;
  6531  002142  C04C  F047         	movff	genBerry@size,___lbmod@divisor
  6532  002146  504D               	movf	genBerry@temp,w,c
  6533  002148  EC25  F010         	call	___lbmod
  6534  00214C  6E4D               	movwf	genBerry@temp,c
  6535                           
  6536                           ;pictris.c: 586:     return temp;
  6537  00214E  504D               	movf	genBerry@temp,w,c
  6538  002150  0012               	return	
  6539  002152                     __end_of_genBerry:
  6540                           	opt stack 0
  6541                           tblptru	equ	0xFF8
  6542                           tblptrh	equ	0xFF7
  6543                           tblptrl	equ	0xFF6
  6544                           tablat	equ	0xFF5
  6545                           prodh	equ	0xFF4
  6546                           prodl	equ	0xFF3
  6547                           intcon	equ	0xFF2
  6548                           postinc0	equ	0xFEE
  6549                           wreg	equ	0xFE8
  6550                           indf1	equ	0xFE7
  6551                           postinc1	equ	0xFE6
  6552                           postdec1	equ	0xFE5
  6553                           plusw1	equ	0xFE3
  6554                           fsr1h	equ	0xFE2
  6555                           fsr1l	equ	0xFE1
  6556                           indf2	equ	0xFDF
  6557                           postinc2	equ	0xFDE
  6558                           postdec2	equ	0xFDD
  6559                           preinc2	equ	0xFDC
  6560                           plusw2	equ	0xFDB
  6561                           fsr2h	equ	0xFDA
  6562                           fsr2l	equ	0xFD9
  6563                           status	equ	0xFD8
  6564                           
  6565 ;; *************** function _rnd_get_num *****************
  6566 ;; Defined at:
  6567 ;;		line 8 in file "randgen.c"
  6568 ;; Parameters:    Size  Location     Type
  6569 ;;		None
  6570 ;; Auto vars:     Size  Location     Type
  6571 ;;  b               2   21[COMRAM] unsigned int 
  6572 ;; Return value:  Size  Location     Type
  6573 ;;                  1    wreg      unsigned char 
  6574 ;; Registers used:
  6575 ;;		wreg, status,2, status,0
  6576 ;; Tracked objects:
  6577 ;;		On entry : 0/0
  6578 ;;		On exit  : 0/0
  6579 ;;		Unchanged: 0/0
  6580 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6581 ;;      Params:         0       0       0       0       0       0       0
  6582 ;;      Locals:         2       0       0       0       0       0       0
  6583 ;;      Temps:          3       0       0       0       0       0       0
  6584 ;;      Totals:         5       0       0       0       0       0       0
  6585 ;;Total ram usage:        5 bytes
  6586 ;; Hardware stack levels used:    1
  6587 ;; Hardware stack levels required when called:    2
  6588 ;; This function calls:
  6589 ;;		Nothing
  6590 ;; This function is called by:
  6591 ;;		_selectNextObject
  6592 ;;		_genBerry
  6593 ;; This function uses a non-reentrant model
  6594 ;;
  6595                           
  6596                           	psect	text35
  6597  001E52                     __ptext35:
  6598                           	opt stack 0
  6599  001E52                     _rnd_get_num:
  6600                           	opt stack 26
  6601                           
  6602                           ;randgen.c: 11:     unsigned b = ((_lfsr >> 0) ^ (_lfsr >> 2) ^ (_lfsr >> 3) ^ (_lfsr >>
      +                           4) ) & 1;
  6603                           
  6604                           ;incstack = 0
  6605  001E52  C062  F047         	movff	__lfsr,??_rnd_get_num
  6606  001E56  3A47               	swapf	??_rnd_get_num,f,c
  6607  001E58  0E0F               	movlw	15
  6608  001E5A  1647               	andwf	??_rnd_get_num,f,c
  6609  001E5C  C062  F048         	movff	__lfsr,??_rnd_get_num+1
  6610  001E60  90D8               	bcf	status,0,c
  6611  001E62  3248               	rrcf	??_rnd_get_num+1,f,c
  6612  001E64  90D8               	bcf	status,0,c
  6613  001E66  3248               	rrcf	??_rnd_get_num+1,f,c
  6614  001E68  90D8               	bcf	status,0,c
  6615  001E6A  3248               	rrcf	??_rnd_get_num+1,f,c
  6616  001E6C  4062               	rrncf	__lfsr,w,c
  6617  001E6E  42E8               	rrncf	wreg,f,c
  6618  001E70  0B3F               	andlw	63
  6619  001E72  1848               	xorwf	??_rnd_get_num+1,w,c
  6620  001E74  1847               	xorwf	??_rnd_get_num,w,c
  6621  001E76  1862               	xorwf	__lfsr,w,c
  6622  001E78  6E49               	movwf	(??_rnd_get_num+2)& (0+255),c
  6623  001E7A  0E01               	movlw	1
  6624  001E7C  1649               	andwf	??_rnd_get_num+2,f,c
  6625  001E7E  5049               	movf	??_rnd_get_num+2,w,c
  6626  001E80  6E4A               	movwf	rnd_get_num@b,c
  6627  001E82  6A4B               	clrf	rnd_get_num@b+1,c
  6628                           
  6629                           ;randgen.c: 12:     _lfsr = (_lfsr >> 1) | (b << 7);
  6630  001E84  6A47               	clrf	??_rnd_get_num& (0+255),c
  6631  001E86  A04A               	btfss	rnd_get_num@b,0,c
  6632  001E88  D001               	bra	u1945
  6633  001E8A  8E47               	bsf	??_rnd_get_num& (0+255),7,c
  6634  001E8C                     u1945:
  6635  001E8C  90D8               	bcf	status,0,c
  6636  001E8E  3062               	rrcf	__lfsr,w,c
  6637  001E90  1047               	iorwf	??_rnd_get_num,w,c
  6638  001E92  6E62               	movwf	__lfsr,c
  6639                           
  6640                           ;randgen.c: 13:     return _lfsr;
  6641  001E94  5062               	movf	__lfsr,w,c
  6642  001E96  0012               	return	
  6643  001E98                     __end_of_rnd_get_num:
  6644                           	opt stack 0
  6645                           tblptru	equ	0xFF8
  6646                           tblptrh	equ	0xFF7
  6647                           tblptrl	equ	0xFF6
  6648                           tablat	equ	0xFF5
  6649                           prodh	equ	0xFF4
  6650                           prodl	equ	0xFF3
  6651                           intcon	equ	0xFF2
  6652                           postinc0	equ	0xFEE
  6653                           wreg	equ	0xFE8
  6654                           indf1	equ	0xFE7
  6655                           postinc1	equ	0xFE6
  6656                           postdec1	equ	0xFE5
  6657                           plusw1	equ	0xFE3
  6658                           fsr1h	equ	0xFE2
  6659                           fsr1l	equ	0xFE1
  6660                           indf2	equ	0xFDF
  6661                           postinc2	equ	0xFDE
  6662                           postdec2	equ	0xFDD
  6663                           preinc2	equ	0xFDC
  6664                           plusw2	equ	0xFDB
  6665                           fsr2h	equ	0xFDA
  6666                           fsr2l	equ	0xFD9
  6667                           status	equ	0xFD8
  6668                           
  6669 ;; *************** function ___lbmod *****************
  6670 ;; Defined at:
  6671 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c99\common\lbmod.c"
  6672 ;; Parameters:    Size  Location     Type
  6673 ;;  dividend        1    wreg     unsigned char 
  6674 ;;  divisor         1   18[COMRAM] unsigned char 
  6675 ;; Auto vars:     Size  Location     Type
  6676 ;;  dividend        1   19[COMRAM] unsigned char 
  6677 ;;  rem             1   21[COMRAM] unsigned char 
  6678 ;;  counter         1   20[COMRAM] unsigned char 
  6679 ;; Return value:  Size  Location     Type
  6680 ;;                  1    wreg      unsigned char 
  6681 ;; Registers used:
  6682 ;;		wreg, status,2, status,0
  6683 ;; Tracked objects:
  6684 ;;		On entry : 0/0
  6685 ;;		On exit  : 0/0
  6686 ;;		Unchanged: 0/0
  6687 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6688 ;;      Params:         1       0       0       0       0       0       0
  6689 ;;      Locals:         3       0       0       0       0       0       0
  6690 ;;      Temps:          0       0       0       0       0       0       0
  6691 ;;      Totals:         4       0       0       0       0       0       0
  6692 ;;Total ram usage:        4 bytes
  6693 ;; Hardware stack levels used:    1
  6694 ;; Hardware stack levels required when called:    2
  6695 ;; This function calls:
  6696 ;;		Nothing
  6697 ;; This function is called by:
  6698 ;;		_genBerry
  6699 ;; This function uses a non-reentrant model
  6700 ;;
  6701                           
  6702                           	psect	text36
  6703  00204A                     __ptext36:
  6704                           	opt stack 0
  6705  00204A                     ___lbmod:
  6706                           	opt stack 24
  6707                           
  6708                           ;incstack = 0
  6709                           ;___lbmod@dividend stored from wreg
  6710  00204A  6E48               	movwf	___lbmod@dividend,c
  6711  00204C  0E08               	movlw	8
  6712  00204E  6E49               	movwf	___lbmod@counter,c
  6713  002050  0E00               	movlw	0
  6714  002052  6E4A               	movwf	___lbmod@rem,c
  6715  002054  90D8               	bcf	status,0,c
  6716  002056  3448               	rlcf	___lbmod@dividend,w,c
  6717  002058  344A               	rlcf	___lbmod@rem,w,c
  6718  00205A  6E4A               	movwf	___lbmod@rem,c
  6719  00205C  90D8               	bcf	status,0,c
  6720  00205E  3648               	rlcf	___lbmod@dividend,f,c
  6721  002060  5047               	movf	___lbmod@divisor,w,c
  6722  002062  5C4A               	subwf	___lbmod@rem,w,c
  6723  002064  A0D8               	btfss	status,0,c
  6724  002066  D002               	goto	l926
  6725  002068  5047               	movf	___lbmod@divisor,w,c
  6726  00206A  5E4A               	subwf	___lbmod@rem,f,c
  6727  00206C                     l926:
  6728  00206C  2E49               	decfsz	___lbmod@counter,f,c
  6729  00206E  D7F2               	goto	l925
  6730  002070  504A               	movf	___lbmod@rem,w,c
  6731  002072  0012               	return	
  6732  002074                     __end_of___lbmod:
  6733                           	opt stack 0
  6734                           tblptru	equ	0xFF8
  6735                           tblptrh	equ	0xFF7
  6736                           tblptrl	equ	0xFF6
  6737                           tablat	equ	0xFF5
  6738                           prodh	equ	0xFF4
  6739                           prodl	equ	0xFF3
  6740                           intcon	equ	0xFF2
  6741                           postinc0	equ	0xFEE
  6742                           wreg	equ	0xFE8
  6743                           indf1	equ	0xFE7
  6744                           postinc1	equ	0xFE6
  6745                           postdec1	equ	0xFE5
  6746                           plusw1	equ	0xFE3
  6747                           fsr1h	equ	0xFE2
  6748                           fsr1l	equ	0xFE1
  6749                           indf2	equ	0xFDF
  6750                           postinc2	equ	0xFDE
  6751                           postdec2	equ	0xFDD
  6752                           preinc2	equ	0xFDC
  6753                           plusw2	equ	0xFDB
  6754                           fsr2h	equ	0xFDA
  6755                           fsr2l	equ	0xFD9
  6756                           status	equ	0xFD8
  6757                           
  6758 ;; *************** function _initialise_hardware *****************
  6759 ;; Defined at:
  6760 ;;		line 1085 in file "pictris.c"
  6761 ;; Parameters:    Size  Location     Type
  6762 ;;		None
  6763 ;; Auto vars:     Size  Location     Type
  6764 ;;		None
  6765 ;; Return value:  Size  Location     Type
  6766 ;;                  1    wreg      void 
  6767 ;; Registers used:
  6768 ;;		wreg, status,2, cstack
  6769 ;; Tracked objects:
  6770 ;;		On entry : 0/0
  6771 ;;		On exit  : 0/0
  6772 ;;		Unchanged: 0/0
  6773 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6774 ;;      Params:         0       0       0       0       0       0       0
  6775 ;;      Locals:         0       0       0       0       0       0       0
  6776 ;;      Temps:          0       0       0       0       0       0       0
  6777 ;;      Totals:         0       0       0       0       0       0       0
  6778 ;;Total ram usage:        0 bytes
  6779 ;; Hardware stack levels used:    1
  6780 ;; Hardware stack levels required when called:    3
  6781 ;; This function calls:
  6782 ;;		_initialise_TMR0
  6783 ;; This function is called by:
  6784 ;;		_main
  6785 ;; This function uses a non-reentrant model
  6786 ;;
  6787                           
  6788                           	psect	text37
  6789  001E98                     __ptext37:
  6790                           	opt stack 0
  6791  001E98                     _initialise_hardware:
  6792                           	opt stack 27
  6793                           
  6794                           ;pictris.c: 1088:     OSCCONbits.IDLEN = 0;
  6795                           
  6796                           ;incstack = 0
  6797  001E98  9ED3               	bcf	4051,7,c	;volatile
  6798                           
  6799                           ;pictris.c: 1089:     OSCCONbits.IRCF = 0x7;
  6800  001E9A  88D3               	bsf	4051,4,c	;volatile
  6801  001E9C  8AD3               	bsf	4051,5,c	;volatile
  6802  001E9E  8CD3               	bsf	4051,6,c	;volatile
  6803                           
  6804                           ;pictris.c: 1090:     OSCCONbits.SCS = 0x2;
  6805  001EA0  50D3               	movf	4051,w,c	;volatile
  6806  001EA2  0BFC               	andlw	-4
  6807  001EA4  0902               	iorlw	2
  6808  001EA6  6ED3               	movwf	4051,c	;volatile
  6809                           
  6810                           ;pictris.c: 1093:     ADCON1bits.PCFG = 0x0F;
  6811  001EA8  80C1               	bsf	4033,0,c	;volatile
  6812  001EAA  82C1               	bsf	4033,1,c	;volatile
  6813  001EAC  84C1               	bsf	4033,2,c	;volatile
  6814  001EAE  86C1               	bsf	4033,3,c	;volatile
  6815                           
  6816                           ;pictris.c: 1096:     DDRA = 0x00; PORTA = 0x00;
  6817  001EB0  0E00               	movlw	0
  6818  001EB2  6E92               	movwf	3986,c	;volatile
  6819  001EB4  0E00               	movlw	0
  6820  001EB6  6E80               	movwf	3968,c	;volatile
  6821                           
  6822                           ;pictris.c: 1098:     DDRB = 0xFF; PORTB = 0x00; INTCON2bits.RBPU = 0;
  6823  001EB8  6893               	setf	3987,c	;volatile
  6824  001EBA  0E00               	movlw	0
  6825  001EBC  6E81               	movwf	3969,c	;volatile
  6826  001EBE  9EF1               	bcf	intcon2,7,c	;volatile
  6827                           
  6828                           ;pictris.c: 1102:     DDRC = 0x00; PORTC = 0x00;
  6829  001EC0  0E00               	movlw	0
  6830  001EC2  6E94               	movwf	3988,c	;volatile
  6831  001EC4  0E00               	movlw	0
  6832  001EC6  6E82               	movwf	3970,c	;volatile
  6833                           
  6834                           ;pictris.c: 1103:     DDRD = 0x00; PORTD = 0x00;
  6835  001EC8  0E00               	movlw	0
  6836  001ECA  6E95               	movwf	3989,c	;volatile
  6837  001ECC  0E00               	movlw	0
  6838  001ECE  6E83               	movwf	3971,c	;volatile
  6839                           
  6840                           ;pictris.c: 1106:     initialise_TMR0();
  6841  001ED0  EC74  F010         	call	_initialise_TMR0	;wreg free
  6842                           
  6843                           ;pictris.c: 1108:     IPEN = 0;
  6844  001ED4  9ED0               	bcf	4048,7,c	;volatile
  6845                           
  6846                           ;pictris.c: 1109:     GIE = 1;
  6847  001ED6  8EF2               	bsf	intcon,7,c	;volatile
  6848  001ED8  0012               	return		;funcret
  6849  001EDA                     __end_of_initialise_hardware:
  6850                           	opt stack 0
  6851                           tblptru	equ	0xFF8
  6852                           tblptrh	equ	0xFF7
  6853                           tblptrl	equ	0xFF6
  6854                           tablat	equ	0xFF5
  6855                           prodh	equ	0xFF4
  6856                           prodl	equ	0xFF3
  6857                           intcon	equ	0xFF2
  6858                           intcon2	equ	0xFF1
  6859                           postinc0	equ	0xFEE
  6860                           wreg	equ	0xFE8
  6861                           indf1	equ	0xFE7
  6862                           postinc1	equ	0xFE6
  6863                           postdec1	equ	0xFE5
  6864                           plusw1	equ	0xFE3
  6865                           fsr1h	equ	0xFE2
  6866                           fsr1l	equ	0xFE1
  6867                           indf2	equ	0xFDF
  6868                           postinc2	equ	0xFDE
  6869                           postdec2	equ	0xFDD
  6870                           preinc2	equ	0xFDC
  6871                           plusw2	equ	0xFDB
  6872                           fsr2h	equ	0xFDA
  6873                           fsr2l	equ	0xFD9
  6874                           status	equ	0xFD8
  6875                           
  6876 ;; *************** function _initialise_TMR0 *****************
  6877 ;; Defined at:
  6878 ;;		line 1073 in file "pictris.c"
  6879 ;; Parameters:    Size  Location     Type
  6880 ;;		None
  6881 ;; Auto vars:     Size  Location     Type
  6882 ;;		None
  6883 ;; Return value:  Size  Location     Type
  6884 ;;                  1    wreg      void 
  6885 ;; Registers used:
  6886 ;;		wreg, status,2
  6887 ;; Tracked objects:
  6888 ;;		On entry : 0/0
  6889 ;;		On exit  : 0/0
  6890 ;;		Unchanged: 0/0
  6891 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6892 ;;      Params:         0       0       0       0       0       0       0
  6893 ;;      Locals:         0       0       0       0       0       0       0
  6894 ;;      Temps:          0       0       0       0       0       0       0
  6895 ;;      Totals:         0       0       0       0       0       0       0
  6896 ;;Total ram usage:        0 bytes
  6897 ;; Hardware stack levels used:    1
  6898 ;; Hardware stack levels required when called:    2
  6899 ;; This function calls:
  6900 ;;		Nothing
  6901 ;; This function is called by:
  6902 ;;		_initialise_hardware
  6903 ;; This function uses a non-reentrant model
  6904 ;;
  6905                           
  6906                           	psect	text38
  6907  0020E8                     __ptext38:
  6908                           	opt stack 0
  6909  0020E8                     _initialise_TMR0:
  6910                           	opt stack 27
  6911                           
  6912                           ;pictris.c: 1075:     T0CONbits.T0PS = 0x3;
  6913                           
  6914                           ;incstack = 0
  6915  0020E8  50D5               	movf	4053,w,c	;volatile
  6916  0020EA  0BF8               	andlw	-8
  6917  0020EC  0903               	iorlw	3
  6918  0020EE  6ED5               	movwf	4053,c	;volatile
  6919                           
  6920                           ;pictris.c: 1076:     PSA = 0;
  6921  0020F0  96D5               	bcf	4053,3,c	;volatile
  6922                           
  6923                           ;pictris.c: 1077:     T0CS = 0;
  6924  0020F2  9AD5               	bcf	4053,5,c	;volatile
  6925                           
  6926                           ;pictris.c: 1078:     TMR0ON = 1;
  6927  0020F4  8ED5               	bsf	4053,7,c	;volatile
  6928                           
  6929                           ;pictris.c: 1079:     TMR0 = (~125);
  6930  0020F6  0EFF               	movlw	255
  6931  0020F8  6ED7               	movwf	4055,c	;volatile
  6932  0020FA  0E82               	movlw	130
  6933  0020FC  6ED6               	movwf	4054,c	;volatile
  6934                           
  6935                           ;pictris.c: 1080:     INTCONbits.TMR0IF = 0;
  6936  0020FE  94F2               	bcf	intcon,2,c	;volatile
  6937                           
  6938                           ;pictris.c: 1081:     TMR0IE = 1;
  6939  002100  8AF2               	bsf	intcon,5,c	;volatile
  6940                           
  6941                           ;pictris.c: 1082:     TMR0ON = 1;
  6942  002102  8ED5               	bsf	4053,7,c	;volatile
  6943  002104  0012               	return		;funcret
  6944  002106                     __end_of_initialise_TMR0:
  6945                           	opt stack 0
  6946                           tblptru	equ	0xFF8
  6947                           tblptrh	equ	0xFF7
  6948                           tblptrl	equ	0xFF6
  6949                           tablat	equ	0xFF5
  6950                           prodh	equ	0xFF4
  6951                           prodl	equ	0xFF3
  6952                           intcon	equ	0xFF2
  6953                           intcon2	equ	0xFF1
  6954                           postinc0	equ	0xFEE
  6955                           wreg	equ	0xFE8
  6956                           indf1	equ	0xFE7
  6957                           postinc1	equ	0xFE6
  6958                           postdec1	equ	0xFE5
  6959                           plusw1	equ	0xFE3
  6960                           fsr1h	equ	0xFE2
  6961                           fsr1l	equ	0xFE1
  6962                           indf2	equ	0xFDF
  6963                           postinc2	equ	0xFDE
  6964                           postdec2	equ	0xFDD
  6965                           preinc2	equ	0xFDC
  6966                           plusw2	equ	0xFDB
  6967                           fsr2h	equ	0xFDA
  6968                           fsr2l	equ	0xFD9
  6969                           status	equ	0xFD8
  6970                           
  6971 ;; *************** function _choosescreen *****************
  6972 ;; Defined at:
  6973 ;;		line 1192 in file "pictris.c"
  6974 ;; Parameters:    Size  Location     Type
  6975 ;;		None
  6976 ;; Auto vars:     Size  Location     Type
  6977 ;;  mask           16   26[COMRAM] unsigned short [8]
  6978 ;;  i               1   42[COMRAM] unsigned char 
  6979 ;; Return value:  Size  Location     Type
  6980 ;;                  1    wreg      void 
  6981 ;; Registers used:
  6982 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6983 ;; Tracked objects:
  6984 ;;		On entry : 0/0
  6985 ;;		On exit  : 0/0
  6986 ;;		Unchanged: 0/0
  6987 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6988 ;;      Params:         0       0       0       0       0       0       0
  6989 ;;      Locals:        17       0       0       0       0       0       0
  6990 ;;      Temps:          0       0       0       0       0       0       0
  6991 ;;      Totals:        17       0       0       0       0       0       0
  6992 ;;Total ram usage:       17 bytes
  6993 ;; Hardware stack levels used:    1
  6994 ;; Hardware stack levels required when called:    4
  6995 ;; This function calls:
  6996 ;;		_clearArray
  6997 ;;		_mergeObjects
  6998 ;;		_pauseButtons
  6999 ;;		_pauseMultiplexing
  7000 ;;		_resumeButtons
  7001 ;;		_resumeMultiplexing
  7002 ;; This function is called by:
  7003 ;;		_main
  7004 ;; This function uses a non-reentrant model
  7005 ;;
  7006                           
  7007                           	psect	text39
  7008  0010E0                     __ptext39:
  7009                           	opt stack 0
  7010  0010E0                     _choosescreen:
  7011                           	opt stack 26
  7012                           
  7013                           ;pictris.c: 1194:     uint8_t i;;pictris.c: 1197:     pauseMultiplexing();
  7014                           
  7015                           ;incstack = 0
  7016  0010E0  ECC2  F010         	call	_pauseMultiplexing	;wreg free
  7017                           
  7018                           ;pictris.c: 1200:     clearArray(tmpObjectData, 8);
  7019  0010E4  0E80               	movlw	low _tmpObjectData
  7020  0010E6  6E47               	movwf	clearArray@pArray,c
  7021  0010E8  0E00               	movlw	high _tmpObjectData
  7022  0010EA  6E48               	movwf	clearArray@pArray+1,c
  7023  0010EC  0E00               	movlw	0
  7024  0010EE  6E4A               	movwf	clearArray@size+1,c
  7025  0010F0  0E08               	movlw	8
  7026  0010F2  6E49               	movwf	clearArray@size,c
  7027  0010F4  ECDE  F00F         	call	_clearArray	;wreg free
  7028                           
  7029                           ;pictris.c: 1201:     clearArray(ObjectData, 8);
  7030  0010F8  0E18               	movlw	low _ObjectData
  7031  0010FA  6E47               	movwf	clearArray@pArray,c
  7032  0010FC  0E00               	movlw	high _ObjectData
  7033  0010FE  6E48               	movwf	clearArray@pArray+1,c
  7034  001100  0E00               	movlw	0
  7035  001102  6E4A               	movwf	clearArray@size+1,c
  7036  001104  0E08               	movlw	8
  7037  001106  6E49               	movwf	clearArray@size,c
  7038  001108  ECDE  F00F         	call	_clearArray	;wreg free
  7039                           
  7040                           ;pictris.c: 1202:     clearArray(BackgroundData, 8);
  7041  00110C  0E90               	movlw	low _BackgroundData
  7042  00110E  6E47               	movwf	clearArray@pArray,c
  7043  001110  0E00               	movlw	high _BackgroundData
  7044  001112  6E48               	movwf	clearArray@pArray+1,c
  7045  001114  0E00               	movlw	0
  7046  001116  6E4A               	movwf	clearArray@size+1,c
  7047  001118  0E08               	movlw	8
  7048  00111A  6E49               	movwf	clearArray@size,c
  7049  00111C  ECDE  F00F         	call	_clearArray	;wreg free
  7050                           
  7051                           ;pictris.c: 1203:     for (i = 0; i < 8; i++)
  7052  001120  0E00               	movlw	0
  7053  001122  6E5F               	movwf	choosescreen@i,c
  7054  001124                     l4525:
  7055  001124  0E07               	movlw	7
  7056  001126  645F               	cpfsgt	choosescreen@i,c
  7057  001128  D001               	goto	l415
  7058  00112A  D018               	goto	u4940
  7059  00112C                     l415:
  7060                           
  7061                           ;pictris.c: 1204:     {;pictris.c: 1205:         ObjectData[i] = choose_screen[i];
  7062  00112C  505F               	movf	choosescreen@i,w,c
  7063  00112E  0D02               	mullw	2
  7064  001130  0E21               	movlw	low _choose_screen
  7065  001132  24F3               	addwf	prodl,w,c
  7066  001134  6EF6               	movwf	tblptrl,c
  7067  001136  0E06               	movlw	high _choose_screen
  7068  001138  20F4               	addwfc	prodh,w,c
  7069  00113A  6EF7               	movwf	tblptrh,c
  7070  00113C                     	if	0	;There are less than 3 active tblptr bytes
  7071  00113C                     	endif
  7072  00113C  505F               	movf	choosescreen@i,w,c
  7073  00113E  0D02               	mullw	2
  7074  001140  0E18               	movlw	low _ObjectData
  7075  001142  24F3               	addwf	prodl,w,c
  7076  001144  6ED9               	movwf	fsr2l,c
  7077  001146  0E00               	movlw	high _ObjectData
  7078  001148  20F4               	addwfc	prodh,w,c
  7079  00114A  6EDA               	movwf	fsr2h,c
  7080  00114C  0009               	tblrd		*+
  7081  00114E  CFF5 FFDE          	movff	tablat,postinc2
  7082  001152  0008               	tblrd		*
  7083  001154  CFF5 FFDD          	movff	tablat,postdec2
  7084                           
  7085                           ;pictris.c: 1206:     }
  7086  001158  2A5F               	incf	choosescreen@i,f,c
  7087  00115A  D7E4               	goto	l4525
  7088  00115C                     u4940:
  7089                           
  7090                           ;pictris.c: 1209:     resumeMultiplexing();
  7091  00115C  ECD4  F010         	call	_resumeMultiplexing	;wreg free
  7092  001160                     
  7093                           ;pictris.c: 1213:      while (Down_Debounced || Rotate_Debounced)
  7094                           
  7095                           ;pictris.c: 1214:         continue;
  7096  001160  5031               	movf	_Down_Debounced,w,c	;volatile
  7097  001162  A4D8               	btfss	status,2,c
  7098  001164  D7FD               	goto	l418
  7099  001166  5032               	movf	_Rotate_Debounced,w,c	;volatile
  7100  001168  A4D8               	btfss	status,2,c
  7101  00116A  D7FA               	goto	l418
  7102  00116C                     u4960:
  7103                           
  7104                           ;pictris.c: 1217:     while (!Down_Debounced && !Rotate_Debounced)
  7105                           
  7106                           ;pictris.c: 1218:         continue;
  7107                           
  7108                           ;pictris.c: 1217:     while (!Down_Debounced && !Rotate_Debounced)
  7109  00116C  5031               	movf	_Down_Debounced,w,c	;volatile
  7110  00116E  A4D8               	btfss	status,2,c
  7111  001170  D003               	goto	u4980
  7112  001172  5032               	movf	_Rotate_Debounced,w,c	;volatile
  7113  001174  B4D8               	btfsc	status,2,c
  7114  001176  D7FA               	goto	u4960
  7115  001178                     u4980:
  7116                           
  7117                           ;pictris.c: 1219:     uint16_t mask[8];;pictris.c: 1220:     if(Down_Debounced == 1) { t
      +                          etris = 0;
  7118  001178  0431               	decf	_Down_Debounced,w,c	;volatile
  7119  00117A  A4D8               	btfss	status,2,c
  7120  00117C  D016               	goto	l425
  7121  00117E  0E00               	movlw	0
  7122  001180  6E07               	movwf	_tetris,c
  7123                           
  7124                           ;pictris.c: 1221:     for (i=0;i<8;i++){ mask[i] = 0xFF00; }}
  7125  001182  0E00               	movlw	0
  7126  001184  6E5F               	movwf	choosescreen@i,c
  7127  001186                     l4549:
  7128  001186  0E07               	movlw	7
  7129  001188  645F               	cpfsgt	choosescreen@i,c
  7130  00118A  D001               	goto	l426
  7131  00118C  D027               	goto	u5040
  7132  00118E                     l426:
  7133  00118E  505F               	movf	choosescreen@i,w,c
  7134  001190  0D02               	mullw	2
  7135  001192  0E4F               	movlw	low choosescreen@mask
  7136  001194  24F3               	addwf	prodl,w,c
  7137  001196  6ED9               	movwf	fsr2l,c
  7138  001198  0E00               	movlw	high choosescreen@mask
  7139  00119A  20F4               	addwfc	prodh,w,c
  7140  00119C  6EDA               	movwf	fsr2h,c
  7141  00119E  0E00               	movlw	0
  7142  0011A0  6EDE               	movwf	postinc2,c
  7143  0011A2  0EFF               	movlw	255
  7144  0011A4  6EDD               	movwf	postdec2,c
  7145  0011A6  2A5F               	incf	choosescreen@i,f,c
  7146  0011A8  D7EE               	goto	l4549
  7147  0011AA                     l425:
  7148  0011AA  0432               	decf	_Rotate_Debounced,w,c	;volatile
  7149  0011AC  A4D8               	btfss	status,2,c
  7150  0011AE  D016               	goto	u5040
  7151  0011B0  0E01               	movlw	1
  7152  0011B2  6E07               	movwf	_tetris,c
  7153                           
  7154                           ;pictris.c: 1223:     for (i=0;i<8;i++){ mask[i] = 0x00FF; }};}
  7155  0011B4  0E00               	movlw	0
  7156  0011B6  6E5F               	movwf	choosescreen@i,c
  7157  0011B8                     l4563:
  7158  0011B8  0E07               	movlw	7
  7159  0011BA  645F               	cpfsgt	choosescreen@i,c
  7160  0011BC  D001               	goto	l430
  7161  0011BE  D00E               	goto	u5040
  7162  0011C0                     l430:
  7163  0011C0  505F               	movf	choosescreen@i,w,c
  7164  0011C2  0D02               	mullw	2
  7165  0011C4  0E4F               	movlw	low choosescreen@mask
  7166  0011C6  24F3               	addwf	prodl,w,c
  7167  0011C8  6ED9               	movwf	fsr2l,c
  7168  0011CA  0E00               	movlw	high choosescreen@mask
  7169  0011CC  20F4               	addwfc	prodh,w,c
  7170  0011CE  6EDA               	movwf	fsr2h,c
  7171  0011D0  0EFF               	movlw	255
  7172  0011D2  6EDE               	movwf	postinc2,c
  7173  0011D4  0E00               	movlw	0
  7174  0011D6  6EDD               	movwf	postdec2,c
  7175  0011D8  2A5F               	incf	choosescreen@i,f,c
  7176  0011DA  D7EE               	goto	l4563
  7177  0011DC                     u5040:
  7178                           
  7179                           ;pictris.c: 1226:     pauseMultiplexing();
  7180  0011DC  ECC2  F010         	call	_pauseMultiplexing	;wreg free
  7181                           
  7182                           ;pictris.c: 1227:     mergeObjects(mask, ObjectData, INVERT);
  7183  0011E0  0E4F               	movlw	low choosescreen@mask
  7184  0011E2  6E47               	movwf	mergeObjects@pSource,c
  7185  0011E4  0E00               	movlw	high choosescreen@mask
  7186  0011E6  6E48               	movwf	mergeObjects@pSource+1,c
  7187  0011E8  0E18               	movlw	low _ObjectData
  7188  0011EA  6E49               	movwf	mergeObjects@pTarget,c
  7189  0011EC  0E00               	movlw	high _ObjectData
  7190  0011EE  6E4A               	movwf	mergeObjects@pTarget+1,c
  7191  0011F0  0E02               	movlw	2
  7192  0011F2  6E4B               	movwf	mergeObjects@mode,c
  7193  0011F4  ECA6  F00A         	call	_mergeObjects	;wreg free
  7194                           
  7195                           ;pictris.c: 1228:     resumeMultiplexing();
  7196  0011F8  ECD4  F010         	call	_resumeMultiplexing	;wreg free
  7197  0011FC                     
  7198                           ;pictris.c: 1232:     while (Down_Debounced || Rotate_Debounced)
  7199                           
  7200                           ;pictris.c: 1233:         continue;
  7201  0011FC  5031               	movf	_Down_Debounced,w,c	;volatile
  7202  0011FE  A4D8               	btfss	status,2,c
  7203  001200  D7FD               	goto	l433
  7204  001202  5032               	movf	_Rotate_Debounced,w,c	;volatile
  7205  001204  A4D8               	btfss	status,2,c
  7206  001206  D7FA               	goto	l433
  7207                           
  7208                           ;pictris.c: 1234:     pauseButtons();
  7209  001208  ECDA  F010         	call	_pauseButtons	;wreg free
  7210                           
  7211                           ;pictris.c: 1235:     Down_Delay = 500;
  7212  00120C  0E01               	movlw	1
  7213  00120E  6E29               	movwf	_Down_Delay+1,c	;volatile
  7214  001210  0EF4               	movlw	244
  7215  001212  6E28               	movwf	_Down_Delay,c	;volatile
  7216                           
  7217                           ;pictris.c: 1236:     resumeButtons();
  7218  001214  ECD7  F010         	call	_resumeButtons	;wreg free
  7219  001218  0012               	return		;funcret
  7220  00121A                     __end_of_choosescreen:
  7221                           	opt stack 0
  7222                           tblptru	equ	0xFF8
  7223                           tblptrh	equ	0xFF7
  7224                           tblptrl	equ	0xFF6
  7225                           tablat	equ	0xFF5
  7226                           prodh	equ	0xFF4
  7227                           prodl	equ	0xFF3
  7228                           intcon	equ	0xFF2
  7229                           intcon2	equ	0xFF1
  7230                           postinc0	equ	0xFEE
  7231                           wreg	equ	0xFE8
  7232                           indf1	equ	0xFE7
  7233                           postinc1	equ	0xFE6
  7234                           postdec1	equ	0xFE5
  7235                           plusw1	equ	0xFE3
  7236                           fsr1h	equ	0xFE2
  7237                           fsr1l	equ	0xFE1
  7238                           indf2	equ	0xFDF
  7239                           postinc2	equ	0xFDE
  7240                           postdec2	equ	0xFDD
  7241                           preinc2	equ	0xFDC
  7242                           plusw2	equ	0xFDB
  7243                           fsr2h	equ	0xFDA
  7244                           fsr2l	equ	0xFD9
  7245                           status	equ	0xFD8
  7246                           
  7247 ;; *************** function _resumeMultiplexing *****************
  7248 ;; Defined at:
  7249 ;;		line 444 in file "pictris.c"
  7250 ;; Parameters:    Size  Location     Type
  7251 ;;		None
  7252 ;; Auto vars:     Size  Location     Type
  7253 ;;		None
  7254 ;; Return value:  Size  Location     Type
  7255 ;;                  1    wreg      void 
  7256 ;; Registers used:
  7257 ;;		wreg, status,2
  7258 ;; Tracked objects:
  7259 ;;		On entry : 0/0
  7260 ;;		On exit  : 0/0
  7261 ;;		Unchanged: 0/0
  7262 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7263 ;;      Params:         0       0       0       0       0       0       0
  7264 ;;      Locals:         0       0       0       0       0       0       0
  7265 ;;      Temps:          0       0       0       0       0       0       0
  7266 ;;      Totals:         0       0       0       0       0       0       0
  7267 ;;Total ram usage:        0 bytes
  7268 ;; Hardware stack levels used:    1
  7269 ;; Hardware stack levels required when called:    2
  7270 ;; This function calls:
  7271 ;;		Nothing
  7272 ;; This function is called by:
  7273 ;;		_SnakeGraph
  7274 ;;		_moveObjectDown
  7275 ;;		_checkButtons
  7276 ;;		_splash_screen
  7277 ;;		_choosescreen
  7278 ;;		_show_score
  7279 ;;		_mainGameLoop
  7280 ;; This function uses a non-reentrant model
  7281 ;;
  7282                           
  7283                           	psect	text40
  7284  0021A8                     __ptext40:
  7285                           	opt stack 0
  7286  0021A8                     _resumeMultiplexing:
  7287                           	opt stack 27
  7288                           
  7289                           ;pictris.c: 446:     UpdateScreen = 1;
  7290                           
  7291                           ;incstack = 0
  7292  0021A8  0E01               	movlw	1
  7293  0021AA  6E06               	movwf	_UpdateScreen,c	;volatile
  7294  0021AC  0012               	return		;funcret
  7295  0021AE                     __end_of_resumeMultiplexing:
  7296                           	opt stack 0
  7297                           tblptru	equ	0xFF8
  7298                           tblptrh	equ	0xFF7
  7299                           tblptrl	equ	0xFF6
  7300                           tablat	equ	0xFF5
  7301                           prodh	equ	0xFF4
  7302                           prodl	equ	0xFF3
  7303                           intcon	equ	0xFF2
  7304                           intcon2	equ	0xFF1
  7305                           postinc0	equ	0xFEE
  7306                           wreg	equ	0xFE8
  7307                           indf1	equ	0xFE7
  7308                           postinc1	equ	0xFE6
  7309                           postdec1	equ	0xFE5
  7310                           plusw1	equ	0xFE3
  7311                           fsr1h	equ	0xFE2
  7312                           fsr1l	equ	0xFE1
  7313                           indf2	equ	0xFDF
  7314                           postinc2	equ	0xFDE
  7315                           postdec2	equ	0xFDD
  7316                           preinc2	equ	0xFDC
  7317                           plusw2	equ	0xFDB
  7318                           fsr2h	equ	0xFDA
  7319                           fsr2l	equ	0xFD9
  7320                           status	equ	0xFD8
  7321                           
  7322 ;; *************** function _resumeButtons *****************
  7323 ;; Defined at:
  7324 ;;		line 362 in file "pictris.c"
  7325 ;; Parameters:    Size  Location     Type
  7326 ;;		None
  7327 ;; Auto vars:     Size  Location     Type
  7328 ;;		None
  7329 ;; Return value:  Size  Location     Type
  7330 ;;                  1    wreg      void 
  7331 ;; Registers used:
  7332 ;;		wreg, status,2
  7333 ;; Tracked objects:
  7334 ;;		On entry : 0/0
  7335 ;;		On exit  : 0/0
  7336 ;;		Unchanged: 0/0
  7337 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7338 ;;      Params:         0       0       0       0       0       0       0
  7339 ;;      Locals:         0       0       0       0       0       0       0
  7340 ;;      Temps:          0       0       0       0       0       0       0
  7341 ;;      Totals:         0       0       0       0       0       0       0
  7342 ;;Total ram usage:        0 bytes
  7343 ;; Hardware stack levels used:    1
  7344 ;; Hardware stack levels required when called:    2
  7345 ;; This function calls:
  7346 ;;		Nothing
  7347 ;; This function is called by:
  7348 ;;		_checkButtons
  7349 ;;		_choosescreen
  7350 ;;		_show_score
  7351 ;; This function uses a non-reentrant model
  7352 ;;
  7353                           
  7354                           	psect	text41
  7355  0021AE                     __ptext41:
  7356                           	opt stack 0
  7357  0021AE                     _resumeButtons:
  7358                           	opt stack 27
  7359                           
  7360                           ;pictris.c: 365:     mtxButtons = 1;
  7361                           
  7362                           ;incstack = 0
  7363  0021AE  0E01               	movlw	1
  7364  0021B0  6E17               	movwf	_mtxButtons,c	;volatile
  7365  0021B2  0012               	return		;funcret
  7366  0021B4                     __end_of_resumeButtons:
  7367                           	opt stack 0
  7368                           tblptru	equ	0xFF8
  7369                           tblptrh	equ	0xFF7
  7370                           tblptrl	equ	0xFF6
  7371                           tablat	equ	0xFF5
  7372                           prodh	equ	0xFF4
  7373                           prodl	equ	0xFF3
  7374                           intcon	equ	0xFF2
  7375                           intcon2	equ	0xFF1
  7376                           postinc0	equ	0xFEE
  7377                           wreg	equ	0xFE8
  7378                           indf1	equ	0xFE7
  7379                           postinc1	equ	0xFE6
  7380                           postdec1	equ	0xFE5
  7381                           plusw1	equ	0xFE3
  7382                           fsr1h	equ	0xFE2
  7383                           fsr1l	equ	0xFE1
  7384                           indf2	equ	0xFDF
  7385                           postinc2	equ	0xFDE
  7386                           postdec2	equ	0xFDD
  7387                           preinc2	equ	0xFDC
  7388                           plusw2	equ	0xFDB
  7389                           fsr2h	equ	0xFDA
  7390                           fsr2l	equ	0xFD9
  7391                           status	equ	0xFD8
  7392                           
  7393 ;; *************** function _pauseMultiplexing *****************
  7394 ;; Defined at:
  7395 ;;		line 433 in file "pictris.c"
  7396 ;; Parameters:    Size  Location     Type
  7397 ;;		None
  7398 ;; Auto vars:     Size  Location     Type
  7399 ;;		None
  7400 ;; Return value:  Size  Location     Type
  7401 ;;                  1    wreg      void 
  7402 ;; Registers used:
  7403 ;;		wreg, status,2, cstack
  7404 ;; Tracked objects:
  7405 ;;		On entry : 0/0
  7406 ;;		On exit  : 0/0
  7407 ;;		Unchanged: 0/0
  7408 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7409 ;;      Params:         0       0       0       0       0       0       0
  7410 ;;      Locals:         0       0       0       0       0       0       0
  7411 ;;      Temps:          0       0       0       0       0       0       0
  7412 ;;      Totals:         0       0       0       0       0       0       0
  7413 ;;Total ram usage:        0 bytes
  7414 ;; Hardware stack levels used:    1
  7415 ;; Hardware stack levels required when called:    3
  7416 ;; This function calls:
  7417 ;;		_waitForInterrupt
  7418 ;; This function is called by:
  7419 ;;		_SnakeGraph
  7420 ;;		_moveObjectDown
  7421 ;;		_checkButtons
  7422 ;;		_splash_screen
  7423 ;;		_choosescreen
  7424 ;;		_show_score
  7425 ;;		_mainGameLoop
  7426 ;; This function uses a non-reentrant model
  7427 ;;
  7428                           
  7429                           	psect	text42
  7430  002184                     __ptext42:
  7431                           	opt stack 0
  7432  002184                     _pauseMultiplexing:
  7433                           	opt stack 26
  7434                           
  7435                           ;pictris.c: 435:     if (UpdateScreen)
  7436                           
  7437                           ;incstack = 0
  7438  002184  5006               	movf	_UpdateScreen,w,c	;volatile
  7439  002186  B4D8               	btfsc	status,2,c
  7440  002188  0012               	return	
  7441                           
  7442                           ;pictris.c: 436:     {;pictris.c: 437:         waitForInterrupt();
  7443  00218A  ECCA  F010         	call	_waitForInterrupt	;wreg free
  7444                           
  7445                           ;pictris.c: 438:         UpdateScreen = 0;
  7446  00218E  0E00               	movlw	0
  7447  002190  6E06               	movwf	_UpdateScreen,c	;volatile
  7448  002192  0012               	return	
  7449  002194                     __end_of_pauseMultiplexing:
  7450                           	opt stack 0
  7451                           tblptru	equ	0xFF8
  7452                           tblptrh	equ	0xFF7
  7453                           tblptrl	equ	0xFF6
  7454                           tablat	equ	0xFF5
  7455                           prodh	equ	0xFF4
  7456                           prodl	equ	0xFF3
  7457                           intcon	equ	0xFF2
  7458                           intcon2	equ	0xFF1
  7459                           postinc0	equ	0xFEE
  7460                           wreg	equ	0xFE8
  7461                           indf1	equ	0xFE7
  7462                           postinc1	equ	0xFE6
  7463                           postdec1	equ	0xFE5
  7464                           plusw1	equ	0xFE3
  7465                           fsr1h	equ	0xFE2
  7466                           fsr1l	equ	0xFE1
  7467                           indf2	equ	0xFDF
  7468                           postinc2	equ	0xFDE
  7469                           postdec2	equ	0xFDD
  7470                           preinc2	equ	0xFDC
  7471                           plusw2	equ	0xFDB
  7472                           fsr2h	equ	0xFDA
  7473                           fsr2l	equ	0xFD9
  7474                           status	equ	0xFD8
  7475                           
  7476 ;; *************** function _waitForInterrupt *****************
  7477 ;; Defined at:
  7478 ;;		line 425 in file "pictris.c"
  7479 ;; Parameters:    Size  Location     Type
  7480 ;;		None
  7481 ;; Auto vars:     Size  Location     Type
  7482 ;;		None
  7483 ;; Return value:  Size  Location     Type
  7484 ;;                  1    wreg      void 
  7485 ;; Registers used:
  7486 ;;		wreg, status,2
  7487 ;; Tracked objects:
  7488 ;;		On entry : 0/0
  7489 ;;		On exit  : 0/0
  7490 ;;		Unchanged: 0/0
  7491 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7492 ;;      Params:         0       0       0       0       0       0       0
  7493 ;;      Locals:         0       0       0       0       0       0       0
  7494 ;;      Temps:          0       0       0       0       0       0       0
  7495 ;;      Totals:         0       0       0       0       0       0       0
  7496 ;;Total ram usage:        0 bytes
  7497 ;; Hardware stack levels used:    1
  7498 ;; Hardware stack levels required when called:    2
  7499 ;; This function calls:
  7500 ;;		Nothing
  7501 ;; This function is called by:
  7502 ;;		_pauseMultiplexing
  7503 ;; This function uses a non-reentrant model
  7504 ;;
  7505                           
  7506                           	psect	text43
  7507  002194                     __ptext43:
  7508                           	opt stack 0
  7509  002194                     _waitForInterrupt:
  7510                           	opt stack 26
  7511                           
  7512                           ;pictris.c: 427:     InterruptComplete = 0;
  7513                           
  7514                           ;incstack = 0
  7515  002194  0E00               	movlw	0
  7516  002196  6E05               	movwf	_InterruptComplete,c	;volatile
  7517  002198                     
  7518                           ;pictris.c: 428:     while (!InterruptComplete)
  7519                           
  7520                           ;pictris.c: 429:         continue;
  7521  002198  5005               	movf	_InterruptComplete,w,c	;volatile
  7522  00219A  A4D8               	btfss	status,2,c
  7523  00219C  0012               	return	
  7524  00219E  D7FC               	goto	l182
  7525  0021A0                     __end_of_waitForInterrupt:
  7526                           	opt stack 0
  7527                           tblptru	equ	0xFF8
  7528                           tblptrh	equ	0xFF7
  7529                           tblptrl	equ	0xFF6
  7530                           tablat	equ	0xFF5
  7531                           prodh	equ	0xFF4
  7532                           prodl	equ	0xFF3
  7533                           intcon	equ	0xFF2
  7534                           intcon2	equ	0xFF1
  7535                           postinc0	equ	0xFEE
  7536                           wreg	equ	0xFE8
  7537                           indf1	equ	0xFE7
  7538                           postinc1	equ	0xFE6
  7539                           postdec1	equ	0xFE5
  7540                           plusw1	equ	0xFE3
  7541                           fsr1h	equ	0xFE2
  7542                           fsr1l	equ	0xFE1
  7543                           indf2	equ	0xFDF
  7544                           postinc2	equ	0xFDE
  7545                           postdec2	equ	0xFDD
  7546                           preinc2	equ	0xFDC
  7547                           plusw2	equ	0xFDB
  7548                           fsr2h	equ	0xFDA
  7549                           fsr2l	equ	0xFD9
  7550                           status	equ	0xFD8
  7551                           
  7552 ;; *************** function _pauseButtons *****************
  7553 ;; Defined at:
  7554 ;;		line 357 in file "pictris.c"
  7555 ;; Parameters:    Size  Location     Type
  7556 ;;		None
  7557 ;; Auto vars:     Size  Location     Type
  7558 ;;		None
  7559 ;; Return value:  Size  Location     Type
  7560 ;;                  1    wreg      void 
  7561 ;; Registers used:
  7562 ;;		wreg, status,2
  7563 ;; Tracked objects:
  7564 ;;		On entry : 0/0
  7565 ;;		On exit  : 0/0
  7566 ;;		Unchanged: 0/0
  7567 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7568 ;;      Params:         0       0       0       0       0       0       0
  7569 ;;      Locals:         0       0       0       0       0       0       0
  7570 ;;      Temps:          0       0       0       0       0       0       0
  7571 ;;      Totals:         0       0       0       0       0       0       0
  7572 ;;Total ram usage:        0 bytes
  7573 ;; Hardware stack levels used:    1
  7574 ;; Hardware stack levels required when called:    2
  7575 ;; This function calls:
  7576 ;;		Nothing
  7577 ;; This function is called by:
  7578 ;;		_checkButtons
  7579 ;;		_choosescreen
  7580 ;;		_show_score
  7581 ;; This function uses a non-reentrant model
  7582 ;;
  7583                           
  7584                           	psect	text44
  7585  0021B4                     __ptext44:
  7586                           	opt stack 0
  7587  0021B4                     _pauseButtons:
  7588                           	opt stack 27
  7589                           
  7590                           ;pictris.c: 359:     mtxButtons = 0;
  7591                           
  7592                           ;incstack = 0
  7593  0021B4  0E00               	movlw	0
  7594  0021B6  6E17               	movwf	_mtxButtons,c	;volatile
  7595  0021B8  0012               	return		;funcret
  7596  0021BA                     __end_of_pauseButtons:
  7597                           	opt stack 0
  7598                           tblptru	equ	0xFF8
  7599                           tblptrh	equ	0xFF7
  7600                           tblptrl	equ	0xFF6
  7601                           tablat	equ	0xFF5
  7602                           prodh	equ	0xFF4
  7603                           prodl	equ	0xFF3
  7604                           intcon	equ	0xFF2
  7605                           intcon2	equ	0xFF1
  7606                           postinc0	equ	0xFEE
  7607                           wreg	equ	0xFE8
  7608                           indf1	equ	0xFE7
  7609                           postinc1	equ	0xFE6
  7610                           postdec1	equ	0xFE5
  7611                           plusw1	equ	0xFE3
  7612                           fsr1h	equ	0xFE2
  7613                           fsr1l	equ	0xFE1
  7614                           indf2	equ	0xFDF
  7615                           postinc2	equ	0xFDE
  7616                           postdec2	equ	0xFDD
  7617                           preinc2	equ	0xFDC
  7618                           plusw2	equ	0xFDB
  7619                           fsr2h	equ	0xFDA
  7620                           fsr2l	equ	0xFD9
  7621                           status	equ	0xFD8
  7622                           
  7623 ;; *************** function _mergeObjects *****************
  7624 ;; Defined at:
  7625 ;;		line 689 in file "pictris.c"
  7626 ;; Parameters:    Size  Location     Type
  7627 ;;  pSource         2   18[COMRAM] PTR volatile unsigned sh
  7628 ;;		 -> show_score@mask(16), choosescreen@mask(16), tmpObjectData(16), ObjectData(16), 
  7629 ;;  pTarget         2   20[COMRAM] PTR volatile unsigned sh
  7630 ;;		 -> tmpObjectData(16), BackgroundData(16), ObjectData(16), 
  7631 ;;  mode            1   22[COMRAM] enum E2767
  7632 ;; Auto vars:     Size  Location     Type
  7633 ;;  i               1   25[COMRAM] unsigned char 
  7634 ;; Return value:  Size  Location     Type
  7635 ;;                  1    wreg      void 
  7636 ;; Registers used:
  7637 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  7638 ;; Tracked objects:
  7639 ;;		On entry : 0/0
  7640 ;;		On exit  : 0/0
  7641 ;;		Unchanged: 0/0
  7642 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7643 ;;      Params:         5       0       0       0       0       0       0
  7644 ;;      Locals:         1       0       0       0       0       0       0
  7645 ;;      Temps:          2       0       0       0       0       0       0
  7646 ;;      Totals:         8       0       0       0       0       0       0
  7647 ;;Total ram usage:        8 bytes
  7648 ;; Hardware stack levels used:    1
  7649 ;; Hardware stack levels required when called:    2
  7650 ;; This function calls:
  7651 ;;		Nothing
  7652 ;; This function is called by:
  7653 ;;		_moveObjectDown
  7654 ;;		_checkButtons
  7655 ;;		_choosescreen
  7656 ;;		_show_score
  7657 ;; This function uses a non-reentrant model
  7658 ;;
  7659                           
  7660                           	psect	text45
  7661  00154C                     __ptext45:
  7662                           	opt stack 0
  7663  00154C                     _mergeObjects:
  7664                           	opt stack 27
  7665                           
  7666                           ;pictris.c: 689: void mergeObjects(volatile uint16_t * pSource, volatile uint16_t * pTar
      +                          get, mode_t mode);pictris.c: 690: {;pictris.c: 691:     byte i;;pictris.c: 693:     swit
      +                          ch (mode)
  7667                           
  7668                           ;incstack = 0
  7669  00154C  D05C               	goto	l263
  7670  00154E                     
  7671                           ;pictris.c: 696:         for (i = 0; i < 8; i++)
  7672  00154E  0E00               	movlw	0
  7673  001550  6E4E               	movwf	mergeObjects@i,c
  7674  001552                     l3867:
  7675  001552  0E07               	movlw	7
  7676  001554  644E               	cpfsgt	mergeObjects@i,c
  7677  001556  D001               	goto	l265
  7678  001558  0012               	return	
  7679  00155A                     l265:
  7680                           
  7681                           ;pictris.c: 697:             pTarget[i] = pSource[i];
  7682  00155A  504E               	movf	mergeObjects@i,w,c
  7683  00155C  0D02               	mullw	2
  7684  00155E  50F3               	movf	prodl,w,c
  7685  001560  2447               	addwf	mergeObjects@pSource,w,c
  7686  001562  6ED9               	movwf	fsr2l,c
  7687  001564  50F4               	movf	prodh,w,c
  7688  001566  2048               	addwfc	mergeObjects@pSource+1,w,c
  7689  001568  6EDA               	movwf	fsr2h,c
  7690  00156A  504E               	movf	mergeObjects@i,w,c
  7691  00156C  0D02               	mullw	2
  7692  00156E  50F3               	movf	prodl,w,c
  7693  001570  2449               	addwf	mergeObjects@pTarget,w,c
  7694  001572  6EE1               	movwf	fsr1l,c
  7695  001574  50F4               	movf	prodh,w,c
  7696  001576  204A               	addwfc	mergeObjects@pTarget+1,w,c
  7697  001578  6EE2               	movwf	fsr1h,c
  7698  00157A  CFDE FFE6          	movff	postinc2,postinc1
  7699  00157E  CFDD FFE5          	movff	postdec2,postdec1
  7700  001582  2A4E               	incf	mergeObjects@i,f,c
  7701  001584  D7E6               	goto	l3867
  7702  001586                     
  7703                           ;pictris.c: 700:         for (i = 0; i < 8; i++)
  7704  001586  0E00               	movlw	0
  7705  001588  6E4E               	movwf	mergeObjects@i,c
  7706  00158A                     l3879:
  7707  00158A  0E07               	movlw	7
  7708  00158C  644E               	cpfsgt	mergeObjects@i,c
  7709  00158E  D001               	goto	l269
  7710  001590  0012               	return	
  7711  001592                     l269:
  7712                           
  7713                           ;pictris.c: 701:             pTarget[i] |= pSource[i];
  7714  001592  504E               	movf	mergeObjects@i,w,c
  7715  001594  0D02               	mullw	2
  7716  001596  50F3               	movf	prodl,w,c
  7717  001598  2447               	addwf	mergeObjects@pSource,w,c
  7718  00159A  6ED9               	movwf	fsr2l,c
  7719  00159C  50F4               	movf	prodh,w,c
  7720  00159E  2048               	addwfc	mergeObjects@pSource+1,w,c
  7721  0015A0  6EDA               	movwf	fsr2h,c
  7722  0015A2  CFDE F04C          	movff	postinc2,??_mergeObjects
  7723  0015A6  CFDD F04D          	movff	postdec2,??_mergeObjects+1
  7724  0015AA  504E               	movf	mergeObjects@i,w,c
  7725  0015AC  0D02               	mullw	2
  7726  0015AE  50F3               	movf	prodl,w,c
  7727  0015B0  2449               	addwf	mergeObjects@pTarget,w,c
  7728  0015B2  6ED9               	movwf	fsr2l,c
  7729  0015B4  50F4               	movf	prodh,w,c
  7730  0015B6  204A               	addwfc	mergeObjects@pTarget+1,w,c
  7731  0015B8  6EDA               	movwf	fsr2h,c
  7732  0015BA  504C               	movf	??_mergeObjects,w,c
  7733  0015BC  12DE               	iorwf	postinc2,f,c
  7734  0015BE  504D               	movf	??_mergeObjects+1,w,c
  7735  0015C0  12DD               	iorwf	postdec2,f,c
  7736  0015C2  2A4E               	incf	mergeObjects@i,f,c
  7737  0015C4  D7E2               	goto	l3879
  7738  0015C6                     
  7739                           ;pictris.c: 704:         for (i = 0; i < 8; i++)
  7740  0015C6  0E00               	movlw	0
  7741  0015C8  6E4E               	movwf	mergeObjects@i,c
  7742  0015CA                     l3891:
  7743  0015CA  0E07               	movlw	7
  7744  0015CC  644E               	cpfsgt	mergeObjects@i,c
  7745  0015CE  D001               	goto	l272
  7746  0015D0  0012               	return	
  7747  0015D2                     l272:
  7748                           
  7749                           ;pictris.c: 705:             pTarget[i] ^= pSource[i];
  7750  0015D2  504E               	movf	mergeObjects@i,w,c
  7751  0015D4  0D02               	mullw	2
  7752  0015D6  50F3               	movf	prodl,w,c
  7753  0015D8  2447               	addwf	mergeObjects@pSource,w,c
  7754  0015DA  6ED9               	movwf	fsr2l,c
  7755  0015DC  50F4               	movf	prodh,w,c
  7756  0015DE  2048               	addwfc	mergeObjects@pSource+1,w,c
  7757  0015E0  6EDA               	movwf	fsr2h,c
  7758  0015E2  CFDE F04C          	movff	postinc2,??_mergeObjects
  7759  0015E6  CFDD F04D          	movff	postdec2,??_mergeObjects+1
  7760  0015EA  504E               	movf	mergeObjects@i,w,c
  7761  0015EC  0D02               	mullw	2
  7762  0015EE  50F3               	movf	prodl,w,c
  7763  0015F0  2449               	addwf	mergeObjects@pTarget,w,c
  7764  0015F2  6ED9               	movwf	fsr2l,c
  7765  0015F4  50F4               	movf	prodh,w,c
  7766  0015F6  204A               	addwfc	mergeObjects@pTarget+1,w,c
  7767  0015F8  6EDA               	movwf	fsr2h,c
  7768  0015FA  504C               	movf	??_mergeObjects,w,c
  7769  0015FC  1ADE               	xorwf	postinc2,f,c
  7770  0015FE  504D               	movf	??_mergeObjects+1,w,c
  7771  001600  1ADD               	xorwf	postdec2,f,c
  7772  001602  2A4E               	incf	mergeObjects@i,f,c
  7773  001604  D7E2               	goto	l3891
  7774  001606                     l263:
  7775  001606  504B               	movf	mergeObjects@mode,w,c
  7776  001608  6E4C               	movwf	??_mergeObjects& (0+255),c
  7777  00160A  6A4D               	clrf	(??_mergeObjects+1)& (0+255),c
  7778                           
  7779                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  7780                           ; Switch size 1, requested type "space"
  7781                           ; Number of cases is 1, Range of values is 0 to 0
  7782                           ; switch strategies available:
  7783                           ; Name         Instructions Cycles
  7784                           ; simple_byte            4     3 (average)
  7785                           ;	Chosen strategy is simple_byte
  7786  00160C  504D               	movf	??_mergeObjects+1,w,c
  7787  00160E  0A00               	xorlw	0	; case 0
  7788  001610  A4D8               	btfss	status,2,c
  7789  001612  0012               	return	
  7790                           
  7791                           ; Switch size 1, requested type "space"
  7792                           ; Number of cases is 3, Range of values is 0 to 2
  7793                           ; switch strategies available:
  7794                           ; Name         Instructions Cycles
  7795                           ; simple_byte           10     6 (average)
  7796                           ;	Chosen strategy is simple_byte
  7797  001614  504C               	movf	??_mergeObjects,w,c
  7798  001616  0A00               	xorlw	0	; case 0
  7799  001618  B4D8               	btfsc	status,2,c
  7800  00161A  D799               	goto	l264
  7801  00161C  0A01               	xorlw	1	; case 1
  7802  00161E  B4D8               	btfsc	status,2,c
  7803  001620  D7B2               	goto	l268
  7804  001622  0A03               	xorlw	3	; case 2
  7805  001624  A4D8               	btfss	status,2,c
  7806  001626  0012               	return	
  7807  001628  D7CE               	goto	l271
  7808  00162A                     __end_of_mergeObjects:
  7809                           	opt stack 0
  7810                           tblptru	equ	0xFF8
  7811                           tblptrh	equ	0xFF7
  7812                           tblptrl	equ	0xFF6
  7813                           tablat	equ	0xFF5
  7814                           prodh	equ	0xFF4
  7815                           prodl	equ	0xFF3
  7816                           intcon	equ	0xFF2
  7817                           intcon2	equ	0xFF1
  7818                           postinc0	equ	0xFEE
  7819                           wreg	equ	0xFE8
  7820                           indf1	equ	0xFE7
  7821                           postinc1	equ	0xFE6
  7822                           postdec1	equ	0xFE5
  7823                           plusw1	equ	0xFE3
  7824                           fsr1h	equ	0xFE2
  7825                           fsr1l	equ	0xFE1
  7826                           indf2	equ	0xFDF
  7827                           postinc2	equ	0xFDE
  7828                           postdec2	equ	0xFDD
  7829                           preinc2	equ	0xFDC
  7830                           plusw2	equ	0xFDB
  7831                           fsr2h	equ	0xFDA
  7832                           fsr2l	equ	0xFD9
  7833                           status	equ	0xFD8
  7834                           
  7835 ;; *************** function _clearArray *****************
  7836 ;; Defined at:
  7837 ;;		line 538 in file "pictris.c"
  7838 ;; Parameters:    Size  Location     Type
  7839 ;;  pArray          2   18[COMRAM] PTR volatile unsigned sh
  7840 ;;		 -> tmpObjectData(16), BackgroundData(16), ObjectData(16), 
  7841 ;;  size            2   20[COMRAM] unsigned int 
  7842 ;; Auto vars:     Size  Location     Type
  7843 ;;  i               1   24[COMRAM] unsigned char 
  7844 ;; Return value:  Size  Location     Type
  7845 ;;                  1    wreg      void 
  7846 ;; Registers used:
  7847 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  7848 ;; Tracked objects:
  7849 ;;		On entry : 0/0
  7850 ;;		On exit  : 0/0
  7851 ;;		Unchanged: 0/0
  7852 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7853 ;;      Params:         4       0       0       0       0       0       0
  7854 ;;      Locals:         1       0       0       0       0       0       0
  7855 ;;      Temps:          2       0       0       0       0       0       0
  7856 ;;      Totals:         7       0       0       0       0       0       0
  7857 ;;Total ram usage:        7 bytes
  7858 ;; Hardware stack levels used:    1
  7859 ;; Hardware stack levels required when called:    2
  7860 ;; This function calls:
  7861 ;;		Nothing
  7862 ;; This function is called by:
  7863 ;;		_SnakeGraph
  7864 ;;		_newRotation
  7865 ;;		_initialise_globals
  7866 ;;		_choosescreen
  7867 ;;		_show_score
  7868 ;;		_mainGameLoop
  7869 ;; This function uses a non-reentrant model
  7870 ;;
  7871                           
  7872                           	psect	text46
  7873  001FBC                     __ptext46:
  7874                           	opt stack 0
  7875  001FBC                     _clearArray:
  7876                           	opt stack 27
  7877                           
  7878                           ;pictris.c: 538: void clearArray(volatile uint16_t *pArray, size_t size);pictris.c: 539:
      +                           {;pictris.c: 540:     byte i;;pictris.c: 541:     for (i = 0; i < size; i++)
  7879                           
  7880                           ;incstack = 0
  7881  001FBC  0E00               	movlw	0
  7882  001FBE  6E4D               	movwf	clearArray@i,c
  7883  001FC0  D00D               	goto	l208
  7884  001FC2                     
  7885                           ;pictris.c: 542:         pArray[i] = 0;
  7886  001FC2  504D               	movf	clearArray@i,w,c
  7887  001FC4  0D02               	mullw	2
  7888  001FC6  50F3               	movf	prodl,w,c
  7889  001FC8  2447               	addwf	clearArray@pArray,w,c
  7890  001FCA  6ED9               	movwf	fsr2l,c
  7891  001FCC  50F4               	movf	prodh,w,c
  7892  001FCE  2048               	addwfc	clearArray@pArray+1,w,c
  7893  001FD0  6EDA               	movwf	fsr2h,c
  7894  001FD2  0E00               	movlw	0
  7895  001FD4  6EDE               	movwf	postinc2,c
  7896  001FD6  0E00               	movlw	0
  7897  001FD8  6EDD               	movwf	postdec2,c
  7898  001FDA  2A4D               	incf	clearArray@i,f,c
  7899  001FDC                     l208:
  7900  001FDC  504D               	movf	clearArray@i,w,c
  7901  001FDE  6E4B               	movwf	??_clearArray& (0+255),c
  7902  001FE0  6A4C               	clrf	(??_clearArray+1)& (0+255),c
  7903  001FE2  5049               	movf	clearArray@size,w,c
  7904  001FE4  5C4B               	subwf	??_clearArray,w,c
  7905  001FE6  504A               	movf	clearArray@size+1,w,c
  7906  001FE8  584C               	subwfb	??_clearArray+1,w,c
  7907  001FEA  B0D8               	btfsc	status,0,c
  7908  001FEC  0012               	return	
  7909  001FEE  D7E9               	goto	l209
  7910  001FF0                     __end_of_clearArray:
  7911                           	opt stack 0
  7912                           tblptru	equ	0xFF8
  7913                           tblptrh	equ	0xFF7
  7914                           tblptrl	equ	0xFF6
  7915                           tablat	equ	0xFF5
  7916                           prodh	equ	0xFF4
  7917                           prodl	equ	0xFF3
  7918                           intcon	equ	0xFF2
  7919                           intcon2	equ	0xFF1
  7920                           postinc0	equ	0xFEE
  7921                           wreg	equ	0xFE8
  7922                           indf1	equ	0xFE7
  7923                           postinc1	equ	0xFE6
  7924                           postdec1	equ	0xFE5
  7925                           plusw1	equ	0xFE3
  7926                           fsr1h	equ	0xFE2
  7927                           fsr1l	equ	0xFE1
  7928                           indf2	equ	0xFDF
  7929                           postinc2	equ	0xFDE
  7930                           postdec2	equ	0xFDD
  7931                           preinc2	equ	0xFDC
  7932                           plusw2	equ	0xFDB
  7933                           fsr2h	equ	0xFDA
  7934                           fsr2l	equ	0xFD9
  7935                           status	equ	0xFD8
  7936                           
  7937 ;; *************** function _isr *****************
  7938 ;; Defined at:
  7939 ;;		line 453 in file "pictris.c"
  7940 ;; Parameters:    Size  Location     Type
  7941 ;;		None
  7942 ;; Auto vars:     Size  Location     Type
  7943 ;;  ymask           2   15[COMRAM] unsigned short 
  7944 ;;  xmask           1   17[COMRAM] unsigned char 
  7945 ;; Return value:  Size  Location     Type
  7946 ;;                  1    wreg      void 
  7947 ;; Registers used:
  7948 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  7949 ;; Tracked objects:
  7950 ;;		On entry : 0/0
  7951 ;;		On exit  : 0/0
  7952 ;;		Unchanged: 0/0
  7953 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7954 ;;      Params:         0       0       0       0       0       0       0
  7955 ;;      Locals:         3       0       0       0       0       0       0
  7956 ;;      Temps:          8       0       0       0       0       0       0
  7957 ;;      Totals:        11       0       0       0       0       0       0
  7958 ;;Total ram usage:       11 bytes
  7959 ;; Hardware stack levels used:    1
  7960 ;; Hardware stack levels required when called:    1
  7961 ;; This function calls:
  7962 ;;		___lwmod
  7963 ;;		_debounceButton
  7964 ;; This function is called by:
  7965 ;;		Interrupt level 2
  7966 ;; This function uses a non-reentrant model
  7967 ;;
  7968                           
  7969                           	psect	intcode
  7970  000008                     __pintcode:
  7971                           	opt stack 0
  7972  000008                     _isr:
  7973                           	opt stack 24
  7974                           
  7975                           ;incstack = 0
  7976  000008  8263               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
  7977  00000A  ED8A  F005         	call	int_func,f	;refresh shadow registers
  7978                           tblptru	equ	0xFF8
  7979                           tblptrh	equ	0xFF7
  7980                           tblptrl	equ	0xFF6
  7981                           tablat	equ	0xFF5
  7982                           prodh	equ	0xFF4
  7983                           prodl	equ	0xFF3
  7984                           intcon	equ	0xFF2
  7985                           intcon2	equ	0xFF1
  7986                           postinc0	equ	0xFEE
  7987                           wreg	equ	0xFE8
  7988                           indf1	equ	0xFE7
  7989                           postinc1	equ	0xFE6
  7990                           postdec1	equ	0xFE5
  7991                           plusw1	equ	0xFE3
  7992                           fsr1h	equ	0xFE2
  7993                           fsr1l	equ	0xFE1
  7994                           indf2	equ	0xFDF
  7995                           postinc2	equ	0xFDE
  7996                           postdec2	equ	0xFDD
  7997                           preinc2	equ	0xFDC
  7998                           plusw2	equ	0xFDB
  7999                           fsr2h	equ	0xFDA
  8000                           fsr2l	equ	0xFD9
  8001                           status	equ	0xFD8
  8002                           
  8003                           	psect	intcode_body
  8004  000B14                     __pintcode_body:
  8005                           	opt stack 24
  8006  000B14                     int_func:
  8007                           	opt stack 24
  8008  000B14  0006               	pop		; remove dummy address from shadow register refresh
  8009  000B16  CFD9 F040          	movff	fsr2l,??_isr+4
  8010  000B1A  CFDA F041          	movff	fsr2h,??_isr+5
  8011  000B1E  CFF3 F042          	movff	prodl,??_isr+6
  8012  000B22  CFF4 F043          	movff	prodh,??_isr+7
  8013                           
  8014                           ;pictris.c: 456:     if (INTCONbits.TMR0IF)
  8015  000B26  A4F2               	btfss	intcon,2,c	;volatile
  8016  000B28  D0B3               	goto	i2l196
  8017                           
  8018                           ;pictris.c: 457:     {;pictris.c: 458:         INTCONbits.TMR0IF = 0;
  8019  000B2A  94F2               	bcf	intcon,2,c	;volatile
  8020                           
  8021                           ;pictris.c: 459:         TMR0 = (~125);
  8022  000B2C  0EFF               	movlw	255
  8023  000B2E  6ED7               	movwf	4055,c	;volatile
  8024  000B30  0E82               	movlw	130
  8025  000B32  6ED6               	movwf	4054,c	;volatile
  8026                           
  8027                           ;pictris.c: 462:         time--;
  8028  000B34  0601               	decf	_time,f,c	;volatile
  8029  000B36  A0D8               	btfss	status,0,c
  8030  000B38  0602               	decf	_time+1,f,c	;volatile
  8031                           
  8032                           ;pictris.c: 465:         if (++mS >= 1600)
  8033  000B3A  4A03               	infsnz	_mS,f,c	;volatile
  8034  000B3C  2A04               	incf	_mS+1,f,c	;volatile
  8035  000B3E  0E40               	movlw	64
  8036  000B40  5C03               	subwf	_mS,w,c	;volatile
  8037  000B42  0E06               	movlw	6
  8038  000B44  5804               	subwfb	_mS+1,w,c	;volatile
  8039  000B46  A0D8               	btfss	status,0,c
  8040  000B48  D004               	goto	i2l197
  8041                           
  8042                           ;pictris.c: 466:         {;pictris.c: 467:             mS = 0;
  8043  000B4A  0E00               	movlw	0
  8044  000B4C  6E04               	movwf	_mS+1,c	;volatile
  8045  000B4E  0E00               	movlw	0
  8046  000B50  6E03               	movwf	_mS,c	;volatile
  8047  000B52                     i2l197:
  8048                           
  8049                           ;pictris.c: 480:         if (mtxButtons)
  8050  000B52  5017               	movf	_mtxButtons,w,c	;volatile
  8051  000B54  B4D8               	btfsc	status,2,c
  8052  000B56  D03C               	goto	i2l198
  8053                           
  8054                           ;pictris.c: 481:         {;pictris.c: 482:             debounceButton(PORTBbits.RB0, &Le
      +                          ft_Delay, &Left_Debounced );
  8055  000B58  0E2E               	movlw	low _Left_Delay
  8056  000B5A  6E35               	movwf	debounceButton@delay,c
  8057  000B5C  0E00               	movlw	high _Left_Delay
  8058  000B5E  6E36               	movwf	debounceButton@delay+1,c
  8059  000B60  0E34               	movlw	low _Left_Debounced
  8060  000B62  6E37               	movwf	debounceButton@debounced,c
  8061  000B64  0E00               	movlw	high _Left_Debounced
  8062  000B66  6E38               	movwf	debounceButton@debounced+1,c
  8063  000B68  A081               	btfss	3969,0,c	;volatile
  8064  000B6A  D002               	goto	i2u376_40
  8065  000B6C  0E01               	movlw	1
  8066  000B6E  D001               	goto	i2u376_46
  8067  000B70                     i2u376_40:
  8068  000B70  0E00               	movlw	0
  8069  000B72                     i2u376_46:
  8070  000B72  ECDC  F00D         	call	_debounceButton
  8071                           
  8072                           ;pictris.c: 483:             debounceButton(PORTBbits.RB1, &Right_Delay, &Right_Debounce
      +                          d );
  8073  000B76  0E2C               	movlw	low _Right_Delay
  8074  000B78  6E35               	movwf	debounceButton@delay,c
  8075  000B7A  0E00               	movlw	high _Right_Delay
  8076  000B7C  6E36               	movwf	debounceButton@delay+1,c
  8077  000B7E  0E33               	movlw	low _Right_Debounced
  8078  000B80  6E37               	movwf	debounceButton@debounced,c
  8079  000B82  0E00               	movlw	high _Right_Debounced
  8080  000B84  6E38               	movwf	debounceButton@debounced+1,c
  8081  000B86  A281               	btfss	3969,1,c	;volatile
  8082  000B88  D002               	goto	i2u377_40
  8083  000B8A  0E01               	movlw	1
  8084  000B8C  D001               	goto	i2u377_46
  8085  000B8E                     i2u377_40:
  8086  000B8E  0E00               	movlw	0
  8087  000B90                     i2u377_46:
  8088  000B90  ECDC  F00D         	call	_debounceButton
  8089                           
  8090                           ;pictris.c: 484:             debounceButton(PORTBbits.RB2, &Rotate_Delay, &Rotate_Deboun
      +                          ced);
  8091  000B94  0E2A               	movlw	low _Rotate_Delay
  8092  000B96  6E35               	movwf	debounceButton@delay,c
  8093  000B98  0E00               	movlw	high _Rotate_Delay
  8094  000B9A  6E36               	movwf	debounceButton@delay+1,c
  8095  000B9C  0E32               	movlw	low _Rotate_Debounced
  8096  000B9E  6E37               	movwf	debounceButton@debounced,c
  8097  000BA0  0E00               	movlw	high _Rotate_Debounced
  8098  000BA2  6E38               	movwf	debounceButton@debounced+1,c
  8099  000BA4  A481               	btfss	3969,2,c	;volatile
  8100  000BA6  D002               	goto	i2u378_40
  8101  000BA8  0E01               	movlw	1
  8102  000BAA  D001               	goto	i2u378_46
  8103  000BAC                     i2u378_40:
  8104  000BAC  0E00               	movlw	0
  8105  000BAE                     i2u378_46:
  8106  000BAE  ECDC  F00D         	call	_debounceButton
  8107                           
  8108                           ;pictris.c: 485:             debounceButton(PORTBbits.RB3, &Down_Delay, &Down_Debounced 
      +                          );
  8109  000BB2  0E28               	movlw	low _Down_Delay
  8110  000BB4  6E35               	movwf	debounceButton@delay,c
  8111  000BB6  0E00               	movlw	high _Down_Delay
  8112  000BB8  6E36               	movwf	debounceButton@delay+1,c
  8113  000BBA  0E31               	movlw	low _Down_Debounced
  8114  000BBC  6E37               	movwf	debounceButton@debounced,c
  8115  000BBE  0E00               	movlw	high _Down_Debounced
  8116  000BC0  6E38               	movwf	debounceButton@debounced+1,c
  8117  000BC2  A681               	btfss	3969,3,c	;volatile
  8118  000BC4  D002               	goto	i2u379_40
  8119  000BC6  0E01               	movlw	1
  8120  000BC8  D001               	goto	i2u379_46
  8121  000BCA                     i2u379_40:
  8122  000BCA  0E00               	movlw	0
  8123  000BCC                     i2u379_46:
  8124  000BCC  ECDC  F00D         	call	_debounceButton
  8125  000BD0                     i2l198:
  8126                           
  8127                           ;pictris.c: 494:         if (tetris == 1 && mS % 800 == 0){
  8128  000BD0  0407               	decf	_tetris,w,c
  8129  000BD2  A4D8               	btfss	status,2,c
  8130  000BD4  D011               	goto	i2l199
  8131  000BD6  C003  F035         	movff	_mS,___lwmod@dividend	;volatile
  8132  000BDA  C004  F036         	movff	_mS+1,___lwmod@dividend+1	;volatile
  8133  000BDE  0E03               	movlw	3
  8134  000BE0  6E38               	movwf	___lwmod@divisor+1,c
  8135  000BE2  0E20               	movlw	32
  8136  000BE4  6E37               	movwf	___lwmod@divisor,c
  8137  000BE6  EC6D  F00F         	call	___lwmod	;wreg free
  8138  000BEA  5035               	movf	?___lwmod,w,c
  8139  000BEC  1036               	iorwf	?___lwmod+1,w,c
  8140  000BEE  A4D8               	btfss	status,2,c
  8141  000BF0  D003               	goto	i2l199
  8142                           
  8143                           ;pictris.c: 495:         DropObject = 1;}
  8144  000BF2  0E01               	movlw	1
  8145  000BF4  6E10               	movwf	_DropObject,c	;volatile
  8146  000BF6  D010               	goto	i2l201
  8147  000BF8                     i2l199:
  8148  000BF8  C003  F035         	movff	_mS,___lwmod@dividend	;volatile
  8149  000BFC  C004  F036         	movff	_mS+1,___lwmod@dividend+1	;volatile
  8150  000C00  0E00               	movlw	0
  8151  000C02  6E38               	movwf	___lwmod@divisor+1,c
  8152  000C04  0EC8               	movlw	200
  8153  000C06  6E37               	movwf	___lwmod@divisor,c
  8154  000C08  EC6D  F00F         	call	___lwmod	;wreg free
  8155  000C0C  5035               	movf	?___lwmod,w,c
  8156  000C0E  1036               	iorwf	?___lwmod+1,w,c
  8157  000C10  A4D8               	btfss	status,2,c
  8158  000C12  D002               	goto	i2l201
  8159                           
  8160                           ;pictris.c: 498:         moveSnake = 1;
  8161  000C14  0E01               	movlw	1
  8162  000C16  6E0C               	movwf	_moveSnake,c
  8163  000C18                     i2l201:
  8164                           
  8165                           ;pictris.c: 508:         if (UpdateScreen)
  8166  000C18  5006               	movf	_UpdateScreen,w,c	;volatile
  8167  000C1A  B4D8               	btfsc	status,2,c
  8168  000C1C  D037               	goto	i2l202
  8169                           
  8170                           ;pictris.c: 509:         {;pictris.c: 510:             static byte CurrentX = 0;;pictris
      +                          .c: 512:             uint8_t xmask = 1 << CurrentX;
  8171  000C1E  C030  F03C         	movff	isr@CurrentX,??_isr
  8172  000C22  0E01               	movlw	1
  8173  000C24  6E3D               	movwf	(??_isr+1)& (0+255),c
  8174  000C26  2A3C               	incf	??_isr,f,c
  8175  000C28  D002               	goto	i2u384_44
  8176  000C2A                     i2u384_45:
  8177  000C2A  90D8               	bcf	status,0,c
  8178  000C2C  363D               	rlcf	??_isr+1,f,c
  8179  000C2E                     i2u384_44:
  8180  000C2E  2E3C               	decfsz	??_isr,f,c
  8181  000C30  D7FC               	goto	i2u384_45
  8182  000C32  503D               	movf	??_isr+1,w,c
  8183  000C34  6E46               	movwf	isr@xmask,c
  8184                           
  8185                           ;pictris.c: 513:             uint16_t ymask = ObjectData[CurrentX] | BackgroundData[Curr
      +                          entX];
  8186  000C36  5030               	movf	isr@CurrentX,w,c
  8187  000C38  0D02               	mullw	2
  8188  000C3A  0E90               	movlw	low _BackgroundData
  8189  000C3C  24F3               	addwf	prodl,w,c
  8190  000C3E  6ED9               	movwf	fsr2l,c
  8191  000C40  0E00               	movlw	high _BackgroundData
  8192  000C42  20F4               	addwfc	prodh,w,c
  8193  000C44  6EDA               	movwf	fsr2h,c
  8194  000C46  CFDE F03C          	movff	postinc2,??_isr
  8195  000C4A  CFDD F03D          	movff	postdec2,??_isr+1
  8196  000C4E  5030               	movf	isr@CurrentX,w,c
  8197  000C50  0D02               	mullw	2
  8198  000C52  0E18               	movlw	low _ObjectData
  8199  000C54  24F3               	addwf	prodl,w,c
  8200  000C56  6ED9               	movwf	fsr2l,c
  8201  000C58  0E00               	movlw	high _ObjectData
  8202  000C5A  20F4               	addwfc	prodh,w,c
  8203  000C5C  6EDA               	movwf	fsr2h,c
  8204  000C5E  CFDE F03E          	movff	postinc2,??_isr+2
  8205  000C62  CFDD F03F          	movff	postdec2,??_isr+3
  8206  000C66  503C               	movf	??_isr,w,c
  8207  000C68  103E               	iorwf	??_isr+2,w,c
  8208  000C6A  6E44               	movwf	isr@ymask,c
  8209  000C6C  503D               	movf	??_isr+1,w,c
  8210  000C6E  103F               	iorwf	??_isr+3,w,c
  8211  000C70  6E45               	movwf	isr@ymask+1,c
  8212                           
  8213                           ;pictris.c: 515:             port_display = 0;
  8214  000C72  0E00               	movlw	0
  8215  000C74  6E83               	movwf	3971,c	;volatile
  8216  000C76  0E00               	movlw	0
  8217  000C78  6E82               	movwf	3970,c	;volatile
  8218                           
  8219                           ;pictris.c: 517:             PORTA = xmask;
  8220  000C7A  C046  FF80         	movff	isr@xmask,3968	;volatile
  8221                           
  8222                           ;pictris.c: 522:             port_display = ~ymask;
  8223  000C7E  1C44               	comf	isr@ymask,w,c
  8224  000C80  6E82               	movwf	3970,c	;volatile
  8225  000C82  1C45               	comf	isr@ymask+1,w,c
  8226  000C84  6E83               	movwf	3971,c	;volatile
  8227                           
  8228                           ;pictris.c: 525:             CurrentX++;
  8229  000C86  2A30               	incf	isr@CurrentX,f,c
  8230                           
  8231                           ;pictris.c: 526:             CurrentX &= 0x07;
  8232  000C88  0E07               	movlw	7
  8233  000C8A  1630               	andwf	isr@CurrentX,f,c
  8234  000C8C                     i2l202:
  8235                           
  8236                           ;pictris.c: 531:         InterruptComplete = 1;
  8237  000C8C  0E01               	movlw	1
  8238  000C8E  6E05               	movwf	_InterruptComplete,c	;volatile
  8239  000C90                     i2l196:
  8240  000C90  C043  FFF4         	movff	??_isr+7,prodh
  8241  000C94  C042  FFF3         	movff	??_isr+6,prodl
  8242  000C98  C041  FFDA         	movff	??_isr+5,fsr2h
  8243  000C9C  C040  FFD9         	movff	??_isr+4,fsr2l
  8244  000CA0  9263               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
  8245  000CA2  0011               	retfie		f
  8246  000CA4                     __end_of_isr:
  8247                           	opt stack 0
  8248                           tblptru	equ	0xFF8
  8249                           tblptrh	equ	0xFF7
  8250                           tblptrl	equ	0xFF6
  8251                           tablat	equ	0xFF5
  8252                           prodh	equ	0xFF4
  8253                           prodl	equ	0xFF3
  8254                           intcon	equ	0xFF2
  8255                           intcon2	equ	0xFF1
  8256                           postinc0	equ	0xFEE
  8257                           wreg	equ	0xFE8
  8258                           indf1	equ	0xFE7
  8259                           postinc1	equ	0xFE6
  8260                           postdec1	equ	0xFE5
  8261                           plusw1	equ	0xFE3
  8262                           fsr1h	equ	0xFE2
  8263                           fsr1l	equ	0xFE1
  8264                           indf2	equ	0xFDF
  8265                           postinc2	equ	0xFDE
  8266                           postdec2	equ	0xFDD
  8267                           preinc2	equ	0xFDC
  8268                           plusw2	equ	0xFDB
  8269                           fsr2h	equ	0xFDA
  8270                           fsr2l	equ	0xFD9
  8271                           status	equ	0xFD8
  8272                           
  8273 ;; *************** function _debounceButton *****************
  8274 ;; Defined at:
  8275 ;;		line 369 in file "pictris.c"
  8276 ;; Parameters:    Size  Location     Type
  8277 ;;  button          1    wreg     volatile _Bool 
  8278 ;;  delay           2    0[COMRAM] PTR volatile short 
  8279 ;;		 -> Down_Delay(2), Rotate_Delay(2), Right_Delay(2), Left_Delay(2), 
  8280 ;;  debounced       2    2[COMRAM] PTR volatile _Bool 
  8281 ;;		 -> Down_Debounced(1), Rotate_Debounced(1), Right_Debounced(1), Left_Debounced(1), 
  8282 ;; Auto vars:     Size  Location     Type
  8283 ;;  button          1    6[COMRAM] volatile _Bool 
  8284 ;; Return value:  Size  Location     Type
  8285 ;;                  1    wreg      void 
  8286 ;; Registers used:
  8287 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  8288 ;; Tracked objects:
  8289 ;;		On entry : 0/0
  8290 ;;		On exit  : 0/0
  8291 ;;		Unchanged: 0/0
  8292 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8293 ;;      Params:         4       0       0       0       0       0       0
  8294 ;;      Locals:         1       0       0       0       0       0       0
  8295 ;;      Temps:          2       0       0       0       0       0       0
  8296 ;;      Totals:         7       0       0       0       0       0       0
  8297 ;;Total ram usage:        7 bytes
  8298 ;; Hardware stack levels used:    1
  8299 ;; This function calls:
  8300 ;;		Nothing
  8301 ;; This function is called by:
  8302 ;;		_isr
  8303 ;; This function uses a non-reentrant model
  8304 ;;
  8305                           
  8306                           	psect	text48
  8307  001BB8                     __ptext48:
  8308                           	opt stack 0
  8309  001BB8                     _debounceButton:
  8310                           	opt stack 24
  8311                           
  8312                           ;incstack = 0
  8313                           ;debounceButton@button stored from wreg
  8314  001BB8  6E3B               	movwf	debounceButton@button,c	;volatile
  8315                           
  8316                           ;pictris.c: 369: void debounceButton(volatile _Bool button, volatile int16_t *delay, vol
      +                          atile _Bool *debounced);pictris.c: 370: {;pictris.c: 371:     if (button == 0)
  8317  001BBA  503B               	movf	debounceButton@button,w,c	;volatile
  8318  001BBC  A4D8               	btfss	status,2,c
  8319  001BBE  D023               	goto	i2l161
  8320                           
  8321                           ;pictris.c: 372:     {;pictris.c: 373:         if (*delay < 0)
  8322  001BC0  C035  FFD9         	movff	debounceButton@delay,fsr2l
  8323  001BC4  C036  FFDA         	movff	debounceButton@delay+1,fsr2h
  8324  001BC8  0E01               	movlw	1
  8325  001BCA  AEDB               	btfss	plusw2,7,c
  8326  001BCC  D009               	goto	i2l162
  8327                           
  8328                           ;pictris.c: 374:             *delay = 20;
  8329  001BCE  C035  FFD9         	movff	debounceButton@delay,fsr2l
  8330  001BD2  C036  FFDA         	movff	debounceButton@delay+1,fsr2h
  8331  001BD6  0E14               	movlw	20
  8332  001BD8  6EDE               	movwf	postinc2,c
  8333  001BDA  0E00               	movlw	0
  8334  001BDC  6EDD               	movwf	postdec2,c
  8335  001BDE  0012               	return	
  8336  001BE0                     i2l162:
  8337  001BE0  C035  FFD9         	movff	debounceButton@delay,fsr2l
  8338  001BE4  C036  FFDA         	movff	debounceButton@delay+1,fsr2h
  8339  001BE8  06DE               	decf	postinc2,f,c
  8340  001BEA  0E00               	movlw	0
  8341  001BEC  5ADD               	subwfb	postdec2,f,c
  8342  001BEE  28DE               	incf	postinc2,w,c
  8343  001BF0  E119               	bnz	i2l166
  8344  001BF2  28DE               	incf	postinc2,w,c
  8345  001BF4  A4D8               	btfss	status,2,c
  8346  001BF6  0012               	return	
  8347                           
  8348                           ;pictris.c: 376:             *debounced = 1;
  8349  001BF8  C037  FFD9         	movff	debounceButton@debounced,fsr2l
  8350  001BFC  C038  FFDA         	movff	debounceButton@debounced+1,fsr2h
  8351  001C00  0E01               	movlw	1
  8352  001C02  6EDF               	movwf	indf2,c
  8353                           
  8354                           ;pictris.c: 377:     }
  8355  001C04  0012               	return	
  8356  001C06                     i2l161:
  8357                           
  8358                           ;pictris.c: 379:     {;pictris.c: 380:         *delay = -1;
  8359  001C06  C035  FFD9         	movff	debounceButton@delay,fsr2l
  8360  001C0A  C036  FFDA         	movff	debounceButton@delay+1,fsr2h
  8361  001C0E  0EFF               	movlw	255
  8362  001C10  6EDE               	movwf	postinc2,c
  8363  001C12  0EFF               	movlw	255
  8364  001C14  6EDD               	movwf	postdec2,c
  8365                           
  8366                           ;pictris.c: 381:         *debounced = 0;
  8367  001C16  C037  FFD9         	movff	debounceButton@debounced,fsr2l
  8368  001C1A  C038  FFDA         	movff	debounceButton@debounced+1,fsr2h
  8369  001C1E  0E00               	movlw	0
  8370  001C20  6EDF               	movwf	indf2,c
  8371  001C22  0012               	return	
  8372  001C24                     i2l166:
  8373  001C24  0012               	return		;funcret
  8374  001C26                     __end_of_debounceButton:
  8375                           	opt stack 0
  8376                           tblptru	equ	0xFF8
  8377                           tblptrh	equ	0xFF7
  8378                           tblptrl	equ	0xFF6
  8379                           tablat	equ	0xFF5
  8380                           prodh	equ	0xFF4
  8381                           prodl	equ	0xFF3
  8382                           intcon	equ	0xFF2
  8383                           intcon2	equ	0xFF1
  8384                           postinc0	equ	0xFEE
  8385                           wreg	equ	0xFE8
  8386                           indf1	equ	0xFE7
  8387                           postinc1	equ	0xFE6
  8388                           postdec1	equ	0xFE5
  8389                           plusw1	equ	0xFE3
  8390                           fsr1h	equ	0xFE2
  8391                           fsr1l	equ	0xFE1
  8392                           indf2	equ	0xFDF
  8393                           postinc2	equ	0xFDE
  8394                           postdec2	equ	0xFDD
  8395                           preinc2	equ	0xFDC
  8396                           plusw2	equ	0xFDB
  8397                           fsr2h	equ	0xFDA
  8398                           fsr2l	equ	0xFD9
  8399                           status	equ	0xFD8
  8400                           
  8401 ;; *************** function ___lwmod *****************
  8402 ;; Defined at:
  8403 ;;		line 7 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c99\common\lwmod.c"
  8404 ;; Parameters:    Size  Location     Type
  8405 ;;  dividend        2    0[COMRAM] unsigned int 
  8406 ;;  divisor         2    2[COMRAM] unsigned int 
  8407 ;; Auto vars:     Size  Location     Type
  8408 ;;  counter         1    4[COMRAM] unsigned char 
  8409 ;; Return value:  Size  Location     Type
  8410 ;;                  2    0[COMRAM] unsigned int 
  8411 ;; Registers used:
  8412 ;;		wreg, status,2, status,0
  8413 ;; Tracked objects:
  8414 ;;		On entry : 0/0
  8415 ;;		On exit  : 0/0
  8416 ;;		Unchanged: 0/0
  8417 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8418 ;;      Params:         4       0       0       0       0       0       0
  8419 ;;      Locals:         1       0       0       0       0       0       0
  8420 ;;      Temps:          0       0       0       0       0       0       0
  8421 ;;      Totals:         5       0       0       0       0       0       0
  8422 ;;Total ram usage:        5 bytes
  8423 ;; Hardware stack levels used:    1
  8424 ;; This function calls:
  8425 ;;		Nothing
  8426 ;; This function is called by:
  8427 ;;		_isr
  8428 ;; This function uses a non-reentrant model
  8429 ;;
  8430                           
  8431                           	psect	text49
  8432  001EDA                     __ptext49:
  8433                           	opt stack 0
  8434  001EDA                     ___lwmod:
  8435                           	opt stack 24
  8436                           
  8437                           ;incstack = 0
  8438  001EDA  5037               	movf	___lwmod@divisor,w,c
  8439  001EDC  1038               	iorwf	___lwmod@divisor+1,w,c
  8440  001EDE  B4D8               	btfsc	status,2,c
  8441  001EE0  D018               	goto	i2l1023
  8442  001EE2  0E01               	movlw	1
  8443  001EE4  6E39               	movwf	___lwmod@counter,c
  8444  001EE6  D004               	goto	i2l1018
  8445  001EE8  90D8               	bcf	status,0,c
  8446  001EEA  3637               	rlcf	___lwmod@divisor,f,c
  8447  001EEC  3638               	rlcf	___lwmod@divisor+1,f,c
  8448  001EEE  2A39               	incf	___lwmod@counter,f,c
  8449  001EF0                     i2l1018:
  8450  001EF0  AE38               	btfss	___lwmod@divisor+1,7,c
  8451  001EF2  D7FA               	goto	i2l1019
  8452  001EF4                     i2u371_40:
  8453  001EF4  5037               	movf	___lwmod@divisor,w,c
  8454  001EF6  5C35               	subwf	___lwmod@dividend,w,c
  8455  001EF8  5038               	movf	___lwmod@divisor+1,w,c
  8456  001EFA  5836               	subwfb	___lwmod@dividend+1,w,c
  8457  001EFC  A0D8               	btfss	status,0,c
  8458  001EFE  D004               	goto	i2l1022
  8459  001F00  5037               	movf	___lwmod@divisor,w,c
  8460  001F02  5E35               	subwf	___lwmod@dividend,f,c
  8461  001F04  5038               	movf	___lwmod@divisor+1,w,c
  8462  001F06  5A36               	subwfb	___lwmod@dividend+1,f,c
  8463  001F08                     i2l1022:
  8464  001F08  90D8               	bcf	status,0,c
  8465  001F0A  3238               	rrcf	___lwmod@divisor+1,f,c
  8466  001F0C  3237               	rrcf	___lwmod@divisor,f,c
  8467  001F0E  2E39               	decfsz	___lwmod@counter,f,c
  8468  001F10  D7F1               	goto	i2u371_40
  8469  001F12                     i2l1023:
  8470  001F12  C035  F035         	movff	___lwmod@dividend,?___lwmod
  8471  001F16  C036  F036         	movff	___lwmod@dividend+1,?___lwmod+1
  8472  001F1A  0012               	return		;funcret
  8473  001F1C                     __end_of___lwmod:
  8474                           	opt stack 0
  8475                           tblptru	equ	0xFF8
  8476                           tblptrh	equ	0xFF7
  8477                           tblptrl	equ	0xFF6
  8478                           tablat	equ	0xFF5
  8479                           prodh	equ	0xFF4
  8480                           prodl	equ	0xFF3
  8481                           intcon	equ	0xFF2
  8482                           intcon2	equ	0xFF1
  8483                           postinc0	equ	0xFEE
  8484                           wreg	equ	0xFE8
  8485                           indf1	equ	0xFE7
  8486                           postinc1	equ	0xFE6
  8487                           postdec1	equ	0xFE5
  8488                           plusw1	equ	0xFE3
  8489                           fsr1h	equ	0xFE2
  8490                           fsr1l	equ	0xFE1
  8491                           indf2	equ	0xFDF
  8492                           postinc2	equ	0xFDE
  8493                           postdec2	equ	0xFDD
  8494                           preinc2	equ	0xFDC
  8495                           plusw2	equ	0xFDB
  8496                           fsr2h	equ	0xFDA
  8497                           fsr2l	equ	0xFD9
  8498                           status	equ	0xFD8
  8499                           tblptru	equ	0xFF8
  8500                           tblptrh	equ	0xFF7
  8501                           tblptrl	equ	0xFF6
  8502                           tablat	equ	0xFF5
  8503                           prodh	equ	0xFF4
  8504                           prodl	equ	0xFF3
  8505                           intcon	equ	0xFF2
  8506                           intcon2	equ	0xFF1
  8507                           postinc0	equ	0xFEE
  8508                           wreg	equ	0xFE8
  8509                           indf1	equ	0xFE7
  8510                           postinc1	equ	0xFE6
  8511                           postdec1	equ	0xFE5
  8512                           plusw1	equ	0xFE3
  8513                           fsr1h	equ	0xFE2
  8514                           fsr1l	equ	0xFE1
  8515                           indf2	equ	0xFDF
  8516                           postinc2	equ	0xFDE
  8517                           postdec2	equ	0xFDD
  8518                           preinc2	equ	0xFDC
  8519                           plusw2	equ	0xFDB
  8520                           fsr2h	equ	0xFDA
  8521                           fsr2l	equ	0xFD9
  8522                           status	equ	0xFD8
  8523                           
  8524                           	psect	rparam
  8525  0000                     tblptru	equ	0xFF8
  8526                           tblptrh	equ	0xFF7
  8527                           tblptrl	equ	0xFF6
  8528                           tablat	equ	0xFF5
  8529                           prodh	equ	0xFF4
  8530                           prodl	equ	0xFF3
  8531                           intcon	equ	0xFF2
  8532                           intcon2	equ	0xFF1
  8533                           postinc0	equ	0xFEE
  8534                           wreg	equ	0xFE8
  8535                           indf1	equ	0xFE7
  8536                           postinc1	equ	0xFE6
  8537                           postdec1	equ	0xFE5
  8538                           plusw1	equ	0xFE3
  8539                           fsr1h	equ	0xFE2
  8540                           fsr1l	equ	0xFE1
  8541                           indf2	equ	0xFDF
  8542                           postinc2	equ	0xFDE
  8543                           postdec2	equ	0xFDD
  8544                           preinc2	equ	0xFDC
  8545                           plusw2	equ	0xFDB
  8546                           fsr2h	equ	0xFDA
  8547                           fsr2l	equ	0xFD9
  8548                           status	equ	0xFD8
  8549                           
  8550                           	psect	temp
  8551  000063                     btemp:
  8552                           	opt stack 0
  8553  000063                     	ds	1
  8554  0000                     int$flags	set	btemp
  8555  0000                     wtemp8	set	btemp+1
  8556  0000                     ttemp5	set	btemp+1
  8557  0000                     ttemp6	set	btemp+4
  8558  0000                     ttemp7	set	btemp+8
  8559                           tblptru	equ	0xFF8
  8560                           tblptrh	equ	0xFF7
  8561                           tblptrl	equ	0xFF6
  8562                           tablat	equ	0xFF5
  8563                           prodh	equ	0xFF4
  8564                           prodl	equ	0xFF3
  8565                           intcon	equ	0xFF2
  8566                           intcon2	equ	0xFF1
  8567                           postinc0	equ	0xFEE
  8568                           wreg	equ	0xFE8
  8569                           indf1	equ	0xFE7
  8570                           postinc1	equ	0xFE6
  8571                           postdec1	equ	0xFE5
  8572                           plusw1	equ	0xFE3
  8573                           fsr1h	equ	0xFE2
  8574                           fsr1l	equ	0xFE1
  8575                           indf2	equ	0xFDF
  8576                           postinc2	equ	0xFDE
  8577                           postdec2	equ	0xFDD
  8578                           preinc2	equ	0xFDC
  8579                           plusw2	equ	0xFDB
  8580                           fsr2h	equ	0xFDA
  8581                           fsr2l	equ	0xFD9
  8582                           status	equ	0xFD8


Data Sizes:
    Strings     0
    Constant    240
    Data        150
    BSS         284
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          126     45      98
    BANK0           128     23      71
    BANK1           256      0     200
    BANK2           256      0     133
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0

Pointer List with Targets:

    memcpy@src	PTR const void  size(2) Largest target is 160
		 -> Number(CODE[160]), SNAKE(CODE[16]), TETRIS(CODE[16]), ObjectData(COMRAM[16]), 
		 -> shapes.graphic(BANK2[16]), shapes(BANK2[133]), 

    memcpy@s	PTR unsigned char  size(2) Largest target is 160
		 -> Number(CODE[160]), SNAKE(CODE[16]), TETRIS(CODE[16]), ObjectData(COMRAM[16]), 
		 -> shapes.graphic(BANK2[16]), shapes(BANK2[133]), 

    memcpy@dest	PTR void  size(2) Largest target is 16
		 -> tmpObjectData(BANK0[16]), ObjectData(COMRAM[16]), 

    memcpy@d	PTR unsigned char  size(2) Largest target is 16
		 -> tmpObjectData(BANK0[16]), ObjectData(COMRAM[16]), 

    getNumber@pTarget	PTR unsigned short  size(2) Largest target is 16
		 -> tmpObjectData(BANK0[16]), 

    checkForLines@pObject	PTR volatile unsigned short  size(2) Largest target is 16
		 -> BackgroundData(BANK0[16]), 

    removeLine@pObject	PTR volatile unsigned short  size(2) Largest target is 16
		 -> BackgroundData(BANK0[16]), 

    moveObjectDown@pObject	PTR volatile unsigned short  size(2) Largest target is 16
		 -> ObjectData(COMRAM[16]), 

    pixelCount@pSource	PTR volatile unsigned short  size(2) Largest target is 16
		 -> tmpObjectData(BANK0[16]), ObjectData(COMRAM[16]), 

    newRotation@pSource	PTR volatile unsigned short  size(2) Largest target is 16
		 -> ObjectData(COMRAM[16]), 

    newRotation@pTarget	PTR unsigned short  size(2) Largest target is 16
		 -> tmpObjectData(BANK0[16]), 

    collisionDetect@pTarget	PTR volatile unsigned short  size(2) Largest target is 16
		 -> BackgroundData(BANK0[16]), 

    collisionDetect@pSource	PTR volatile unsigned short  size(2) Largest target is 16
		 -> tmpObjectData(BANK0[16]), ObjectData(COMRAM[16]), 

    checkForRightWall@pObject	PTR volatile unsigned short  size(2) Largest target is 16
		 -> ObjectData(COMRAM[16]), 

    checkForLeftWall@pObject	PTR volatile unsigned short  size(2) Largest target is 16
		 -> ObjectData(COMRAM[16]), 

    checkForBottom@pObject	PTR volatile unsigned short  size(2) Largest target is 16
		 -> ObjectData(COMRAM[16]), 

    moveObject@pObject	PTR volatile unsigned short  size(2) Largest target is 16
		 -> tmpObjectData(BANK0[16]), ObjectData(COMRAM[16]), 

    mergeObjects@pSource	PTR volatile unsigned short  size(2) Largest target is 16
		 -> show_score@mask(BANK0[16]), choosescreen@mask(COMRAM[16]), tmpObjectData(BANK0[16]), ObjectData(COMRAM[16]), 

    mergeObjects@pTarget	PTR volatile unsigned short  size(2) Largest target is 16
		 -> tmpObjectData(BANK0[16]), BackgroundData(BANK0[16]), ObjectData(COMRAM[16]), 

    sp__memcpy	PTR void  size(2) Largest target is 16
		 -> tmpObjectData(BANK0[16]), ObjectData(COMRAM[16]), 

    selectNextObject@pTarget	PTR volatile unsigned short  size(2) Largest target is 16
		 -> ObjectData(COMRAM[16]), 

    selectNextObject@s	PTR struct shape size(2) Largest target is 133
		 -> shapes(BANK2[133]), 

    clearArray@pArray	PTR volatile unsigned short  size(2) Largest target is 16
		 -> tmpObjectData(BANK0[16]), BackgroundData(BANK0[16]), ObjectData(COMRAM[16]), 

    debounceButton@debounced	PTR volatile _Bool  size(2) Largest target is 1
		 -> Down_Debounced(COMRAM[1]), Rotate_Debounced(COMRAM[1]), Right_Debounced(COMRAM[1]), Left_Debounced(COMRAM[1]), 

    debounceButton@delay	PTR volatile short  size(2) Largest target is 2
		 -> Down_Delay(COMRAM[2]), Rotate_Delay(COMRAM[2]), Right_Delay(COMRAM[2]), Left_Delay(COMRAM[2]), 

    sp__itoa	PTR unsigned char  size(2) Largest target is 4
		 -> show_score@number(BANK0[4]), 

    itoa@str	PTR unsigned char  size(2) Largest target is 4
		 -> show_score@number(BANK0[4]), 

    reverse@str	PTR unsigned char  size(2) Largest target is 4
		 -> show_score@number(BANK0[4]), 

    swap@b	PTR unsigned char  size(2) Largest target is 4
		 -> show_score@number(BANK0[4]), 

    swap@a	PTR unsigned char  size(2) Largest target is 4
		 -> show_score@number(BANK0[4]), 


Critical Paths under _main in COMRAM

    _splash_screen->_memcpy
    _readHighScore->_WriteEEByte
    _mainGameLoop->_checkButtons
    _mainGameLoop->_checkForLines
    _writeHighScore->_WriteEEByte
    _show_score->_itoa
    _itoa->_reverse
    _reverse->_swap
    _getNumber->_memcpy
    _initialise_globals->_CreateBerry
    _checkForLines->_removeLine
    _checkButtons->_newRotation
    _newRotation->___wmul
    _moveObjectDown->_selectNextObject
    _selectNextObject->___wmul
    ___wmul->___awmod
    _MoveSnakes->_SnakeGraph
    _SnakeGraph->_clearArray
    _CreateBerry->_genBerry
    _genBerry->_rnd_get_num
    _choosescreen->_mergeObjects

Critical Paths under _isr in COMRAM

    _isr->_debounceButton

Critical Paths under _main in BANK0

    _main->_show_score
    _mainGameLoop->_show_score

Critical Paths under _isr in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _isr in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _isr in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _isr in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _isr in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _isr in BANK5

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0   90526
                       _choosescreen
                 _initialise_globals
                _initialise_hardware
                       _mainGameLoop
                      _readHighScore
                     _rnd_initialize
                         _show_score
                      _splash_screen
 ---------------------------------------------------------------------------------
 (1) _splash_screen                                        0     0      0    1892
                             _memcpy
                  _pauseMultiplexing
                 _resumeMultiplexing
                             _waitms
 ---------------------------------------------------------------------------------
 (2) _waitms                                               2     0      2      98
                                             18 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (1) _rnd_initialize                                       1     1      0      15
                                             18 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _readHighScore                                        2     2      0     422
                                             20 COMRAM     2     2      0
                         _ReadEEByte
                        _WriteEEByte
 ---------------------------------------------------------------------------------
 (2) _ReadEEByte                                           1     1      0      15
                                             18 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _mainGameLoop                                         0     0      0   64872
                         _MoveSnakes
                       _checkButtons
                      _checkForLines
                         _clearArray
                 _initialise_globals
                     _moveObjectDown
                  _pauseMultiplexing
                 _resumeMultiplexing
                   _selectNextObject
                         _show_score
                     _writeHighScore
 ---------------------------------------------------------------------------------
 (2) _writeHighScore                                       1     1      0     316
                                             20 COMRAM     1     1      0
                        _WriteEEByte
 ---------------------------------------------------------------------------------
 (2) _WriteEEByte                                          2     1      1     272
                                             18 COMRAM     2     1      1
 ---------------------------------------------------------------------------------
 (1) _show_score                                          23    23      0   13966
                                              0 BANK0     23    23      0
                         _clearArray
                          _getNumber
                               _itoa
                       _mergeObjects
                         _moveObject
                       _pauseButtons
                  _pauseMultiplexing
                      _resumeButtons
                 _resumeMultiplexing
 ---------------------------------------------------------------------------------
 (2) _itoa                                                13     7      6    3288
                                             32 COMRAM    13     7      6
                            ___awdiv
                            ___awmod
                            _reverse
 ---------------------------------------------------------------------------------
 (3) _reverse                                              9     5      4     747
                                             23 COMRAM     9     5      4
                               _swap
 ---------------------------------------------------------------------------------
 (4) _swap                                                 5     1      4     338
                                             18 COMRAM     5     1      4
 ---------------------------------------------------------------------------------
 (3) ___awdiv                                              8     4      4     625
                                             18 COMRAM     8     4      4
 ---------------------------------------------------------------------------------
 (2) _getNumber                                            3     1      2    1946
                                             28 COMRAM     3     1      2
                             _memcpy
 ---------------------------------------------------------------------------------
 (2) _initialise_globals                                   1     1      0    3230
                                             28 COMRAM     1     1      0
                        _CreateBerry
                         _clearArray
 ---------------------------------------------------------------------------------
 (2) _checkForLines                                       10     8      2     879
                                             35 COMRAM    10     8      2
                         _removeLine
 ---------------------------------------------------------------------------------
 (3) _removeLine                                          17    14      3     577
                                             18 COMRAM    17    14      3
 ---------------------------------------------------------------------------------
 (2) _checkButtons                                         1     1      0   25604
                                             44 COMRAM     1     1      0
                   _checkForLeftWall
                  _checkForRightWall
                    _collisionDetect
                             _memcpy
                       _mergeObjects
                         _moveObject
                     _moveObjectDown
                        _newRotation
                       _pauseButtons
                  _pauseMultiplexing
                         _pixelCount
                      _resumeButtons
                 _resumeMultiplexing
 ---------------------------------------------------------------------------------
 (3) _pixelCount                                          10     8      2     334
                                             18 COMRAM    10     8      2
 ---------------------------------------------------------------------------------
 (3) _newRotation                                         14     9      5    5886
                                             30 COMRAM    14     9      5
                             ___wmul
                         _clearArray
                             _memcpy
 ---------------------------------------------------------------------------------
 (2) _moveObjectDown                                       3     1      2   10834
                                             37 COMRAM     3     1      2
                     _checkForBottom
                    _collisionDetect
                       _mergeObjects
                         _moveObject
                  _pauseMultiplexing
                 _resumeMultiplexing
                   _selectNextObject
 ---------------------------------------------------------------------------------
 (2) _selectNextObject                                     7     5      2    3609
                                             30 COMRAM     7     5      2
                            ___awmod
                             ___wmul
                             _memcpy
                        _rnd_get_num
 ---------------------------------------------------------------------------------
 (2) _memcpy                                              10     4      6    1794
                                             18 COMRAM    10     4      6
 ---------------------------------------------------------------------------------
 (3) ___wmul                                               6     2      4     463
                                             24 COMRAM     6     2      4
                            ___awmod (ARG)
 ---------------------------------------------------------------------------------
 (3) ___awmod                                              6     2      4     793
                                             18 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (2) _moveObject                                          10     6      4    2629
                                             18 COMRAM    10     6      4
 ---------------------------------------------------------------------------------
 (3) _collisionDetect                                      9     5      4     894
                                             18 COMRAM     9     5      4
 ---------------------------------------------------------------------------------
 (3) _checkForBottom                                       5     3      2     166
                                             18 COMRAM     5     3      2
 ---------------------------------------------------------------------------------
 (3) _checkForRightWall                                    4     2      2      98
                                             18 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (3) _checkForLeftWall                                     4     2      2      98
                                             18 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (2) _MoveSnakes                                           9     9      0    3784
                                             32 COMRAM     9     9      0
                        _CreateBerry
                         _SnakeGraph
 ---------------------------------------------------------------------------------
 (3) _SnakeGraph                                           7     7      0    3105
                                             25 COMRAM     7     7      0
                         _clearArray
                  _pauseMultiplexing
                 _resumeMultiplexing
 ---------------------------------------------------------------------------------
 (3) _CreateBerry                                          3     3      0     419
                                             25 COMRAM     3     3      0
                           _genBerry
 ---------------------------------------------------------------------------------
 (4) _genBerry                                             2     2      0     326
                                             23 COMRAM     2     2      0
                            ___lbmod
                        _rnd_get_num
 ---------------------------------------------------------------------------------
 (3) _rnd_get_num                                          5     5      0      23
                                             18 COMRAM     5     5      0
 ---------------------------------------------------------------------------------
 (5) ___lbmod                                              4     3      1     235
                                             18 COMRAM     4     3      1
 ---------------------------------------------------------------------------------
 (1) _initialise_hardware                                  0     0      0       0
                    _initialise_TMR0
 ---------------------------------------------------------------------------------
 (2) _initialise_TMR0                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _choosescreen                                        17    17      0    6129
                                             26 COMRAM    17    17      0
                         _clearArray
                       _mergeObjects
                       _pauseButtons
                  _pauseMultiplexing
                      _resumeButtons
                 _resumeMultiplexing
 ---------------------------------------------------------------------------------
 (2) _resumeMultiplexing                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _resumeButtons                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _pauseMultiplexing                                    0     0      0       0
                   _waitForInterrupt
 ---------------------------------------------------------------------------------
 (3) _waitForInterrupt                                     0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _pauseButtons                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _mergeObjects                                         8     3      5    3037
                                             18 COMRAM     8     3      5
 ---------------------------------------------------------------------------------
 (2) _clearArray                                           7     3      4    2650
                                             18 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (6) _isr                                                 11    11      0    1271
                                              7 COMRAM    11    11      0
                            ___lwmod
                     _debounceButton
 ---------------------------------------------------------------------------------
 (7) _debounceButton                                       7     3      4     762
                                              0 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (7) ___lwmod                                              5     1      4     463
                                              0 COMRAM     5     1      4
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 7
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _choosescreen
     _clearArray
     _mergeObjects
     _pauseButtons
     _pauseMultiplexing
       _waitForInterrupt
     _resumeButtons
     _resumeMultiplexing
   _initialise_globals
     _CreateBerry
       _genBerry
         ___lbmod
         _rnd_get_num
     _clearArray
   _initialise_hardware
     _initialise_TMR0
   _mainGameLoop
     _MoveSnakes
       _CreateBerry
         _genBerry
           ___lbmod
           _rnd_get_num
       _SnakeGraph
         _clearArray
         _pauseMultiplexing
           _waitForInterrupt
         _resumeMultiplexing
     _checkButtons
       _checkForLeftWall
       _checkForRightWall
       _collisionDetect
       _memcpy
       _mergeObjects
       _moveObject
       _moveObjectDown
         _checkForBottom
         _collisionDetect
         _mergeObjects
         _moveObject
         _pauseMultiplexing
           _waitForInterrupt
         _resumeMultiplexing
         _selectNextObject
           ___awmod
           ___wmul
             ___awmod (ARG)
           _memcpy
           _rnd_get_num
       _newRotation
         ___wmul
           ___awmod (ARG)
         _clearArray
         _memcpy
       _pauseButtons
       _pauseMultiplexing
         _waitForInterrupt
       _pixelCount
       _resumeButtons
       _resumeMultiplexing
     _checkForLines
       _removeLine
     _clearArray
     _initialise_globals
       _CreateBerry
         _genBerry
           ___lbmod
           _rnd_get_num
       _clearArray
     _moveObjectDown
       _checkForBottom
       _collisionDetect
       _mergeObjects
       _moveObject
       _pauseMultiplexing
         _waitForInterrupt
       _resumeMultiplexing
       _selectNextObject
         ___awmod
         ___wmul
           ___awmod (ARG)
         _memcpy
         _rnd_get_num
     _pauseMultiplexing
       _waitForInterrupt
     _resumeMultiplexing
     _selectNextObject
       ___awmod
       ___wmul
         ___awmod (ARG)
       _memcpy
       _rnd_get_num
     _show_score
       _clearArray
       _getNumber
         _memcpy
       _itoa
         ___awdiv
         ___awmod
         _reverse
           _swap
       _mergeObjects
       _moveObject
       _pauseButtons
       _pauseMultiplexing
         _waitForInterrupt
       _resumeButtons
       _resumeMultiplexing
     _writeHighScore
       _WriteEEByte
   _readHighScore
     _ReadEEByte
     _WriteEEByte
   _rnd_initialize
   _show_score
     _clearArray
     _getNumber
       _memcpy
     _itoa
       ___awdiv
       ___awmod
       _reverse
         _swap
     _mergeObjects
     _moveObject
     _pauseButtons
     _pauseMultiplexing
       _waitForInterrupt
     _resumeButtons
     _resumeMultiplexing
   _splash_screen
     _memcpy
     _pauseMultiplexing
       _waitForInterrupt
     _resumeMultiplexing
     _waitms

 _isr (ROOT)
   ___lwmod
   _debounceButton

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             5FF      0       0      17        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK5           100      0       0      16        0.0%
BANK5              100      0       0      14        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0      85       9       52.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0      C8       7       78.1%
BITBANK0            80      0       0       4        0.0%
BANK0               80     17      47       5       55.5%
BITCOMRAM           7E      0       0       0        0.0%
COMRAM              7E     2D      62       1       77.8%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     1F6      15        0.0%
DATA                 0      0     1F6       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V2.00 build -1524193055 
Symbol Table                                                                                   Tue Jan 29 15:44:54 2019

        __end_of_checkButtons 0934               WriteEEByte@data 0047          __size_of_WriteEEByte 0026  
            moveObject@cycles 004A             moveObject@pObject 0047                 ?_mainGameLoop 0035  
                ___awdiv@sign 004C                            _mS 0003                ??_choosescreen 004F  
         ___wmul@multiplicand 004F                   __CFG_BORV$3 000000                 _splash_screen 1D54  
          WriteEEByte@address 0048          debounceButton@button 003B                  __CFG_CP0$OFF 000000  
                __CFG_CP1$OFF 000000                  __CFG_CP2$OFF 000000                  __CFG_CP3$OFF 000000  
               newRotation@x1 005F                 newRotation@x2 005D                 newRotation@y1 0060  
               newRotation@y2 005E                           l300 0DA0                           l222 1C2A  
                         l214 18A0                           l142 138A                           l223 1C82  
                         l231 0EC8                           l208 1FDC                           l224 1C44  
                         l232 0E42                           l320 1D4C                           l136 1E3C  
                         l152 1434                           l209 1FC2                           l225 1C80  
                         l137 1E16                           l145 1412                           l234 0EDC  
                         l242 0996                           l250 0980                           l306 1F94  
                         l146 13A6                           l410 1D7C                           l243 0936  
                         l411 1D98                           l236 0F38                           l252 0A9E  
                         l308 1FB4                           l332 12D6                           l324 1240  
                         l340 1CAE                           l148 13D6                           l172 215A  
                         l237 0F60                           l253 09C4                           l245 09BE  
                         l405 1786                           l182 2198                           l430 11C0  
                         l246 094A                           l318 1D08                           l510 1DEE  
                         l334 1348                           l326 1264                           l263 1606  
                         l271 15C6                           l415 112C                           l255 0AC0  
                         l511 1DBC                           l327 1270                           l272 15D2  
                         l264 154E                           l256 0B06                           l248 0964  
                         l280 0CAC                           l265 155A                           l433 11FC  
                         l425 11AA                           l257 0AC6                           l281 0CB8  
                         l329 127C                           l353 0794                           l441 106A  
                         l426 118E                           l418 1160                           l258 0B04  
                         l346 166E                           l338 1CA2                           l442 0FF8  
                         l291 0D1C                           l371 0916                           l363 0848  
                         l268 1586                           l292 0D84                           l348 16F2  
                         l380 151C                           l269 1592                           l277 0DFE  
                         l293 0D22                           l285 0CE0                           l365 08EA  
                         l357 079E                           l381 1460                           l286 0D12  
                         l278 0CA6                           l382 1470                           l390 1AD4  
                         l470 1F42                           l287 0CE6                           l279 0CD6  
                         l359 083C                           l455 10C8                           l447 108A  
                         l471 1F4C                           l288 0CF2                           l376 0920  
                         l392 1AE4                           l464 20BA                           l297 0D8E  
                         l369 08F6                           l385 1530                           l298 0DF4  
                         l490 187A                           l299 0D94                           l395 1B44  
                         l475 1F6E                           l483 186C                           l740 1A86  
                         l484 182C                           l741 1A7E                           l485 1842  
                         l469 1F2A                           l750 1B5C                           l486 1854  
                         l751 1B68                           l744 1AA6                           l753 1B7E  
                         l745 1AB0                           l737 1A58                           l497 2044  
                         l754 1B76                           l746 1ABE                           l738 1A68  
                         l925 2054                           l757 1B96                           l926 206C  
                         l758 1BA0                           l759 1BAE                           _GIE 007F97  
                __CFG_CPB$OFF 000000                  __CFG_CPD$OFF 000000                           _PSA 007EAB  
                         _isr 0008            rnd_initialize@seed 0047                  ___awmod@sign 004C  
     __end_of_collisionDetect 1D54                           prod 000FF3                           wreg 000FE8  
     __size_of_moveObjectDown 00D8                  __CFG_LVP$OFF 000000                  __CFG_WDT$OFF 000000  
                        l3023 1C9A                          l3107 1528                          l3029 1CA6  
                        l4105 0ED4                          l3321 1ACC                          l4123 0F58  
                        l3091 1468                          l3327 1ADC                          l4209 16EE  
                        l4153 1274                          l4065 13D6                          l4147 1268  
                        l2771 1F8C                          l4525 1124                          l2791 1D00  
                        l4439 177E                          l4563 11B8                          l3915 0CB0  
                        l4549 1186                          l3933 0CEA                          l3765 1DBC  
                        l3891 15CA                          l3867 1552                          l3971 0D98  
                        l3879 158A                          ?_isr 0035                          _DDRA 000F92  
                        _DDRB 000F93                          _DDRC 000F94                          _DDRD 000F95  
                        _T0CS 007EAD                          u2310 1D50                          u4110 0D70  
                        u2280 1FB8                          u4050 0CD2                          u2540 2136  
                        u4140 0DDC                          u4310 0F3C                          u5040 11DC  
                        u2560 211E                          u4080 0D0E                          u3280 1B2A  
                        u3264 1B12                          _IPEN 007E87                          u3265 1B0C  
                        u4330 0F8C                          u4250 13D2                          u4190 1A8A  
                        u2824 149A                          u1945 1E8C                          u2825 1494  
                        u2770 1CF4                          u2754 1CDC                          u2850 151A  
                        u2834 14B0                          u2755 1CD6                          u2835 14AA  
                        u2780 1CF8                          u2844 14E2                          u2845 14DC  
                        u3910 1B82                          u4470 134C                          u4464 131A  
                        u4465 1314                          u4394 12AA                          u4810 0902  
                        u4395 12A4                          u3860 1DE4                          u4901 10A4  
                        u4770 08E4                          u4850 17BE                          u3867 1DDA  
                        u4940 115C                          u4780 08E6                          u4870 1086  
                        u4960 116C                          u4880 1090                          u4980 1178  
                        _TMR0 000FD6               ?_checkForBottom 0047           __end_of_CreateBerry 1C92  
                        _main 201E                          _itoa 1350                          _time 0001  
                        fsr1h 000FE2                          fsr2h 000FDA                          indf1 000FE7  
                        indf2 000FDF                          fsr1l 000FE1                          fsr2l 000FD9  
                        _swap 1FF0                          btemp 0063              ??_writeHighScore 0049  
                        prodh 000FF4                          prodl 000FF3                          start 000E  
               __CFG_IESO$OFF 000000           initialise_globals@i 0051           moveObject@direction 0049  
               __CFG_MCLRE$ON 000000                  ___param_bank 000000                ??_mainGameLoop 0062  
                       ??_isr 003C   __size_of_initialise_globals 00D0                ?_splash_screen 0035  
                       ?_main 0035             ??_initialise_TMR0 0047                         ?_itoa 0055  
             __end_of___awdiv 1AC8                         _EEADR 000FA9               __end_of___awmod 1BB8  
             __end_of___lbmod 2074                         ?_swap 0047               ___awdiv@divisor 0049  
             __end_of___lwmod 1F1C                         i2l201 0C18                         i2l202 0C8C  
                       i2l161 1C06                         i2l162 1BE0                         i2l166 1C24  
                       i2l196 0C90                         i2l197 0B52                         i2l198 0BD0  
                       i2l199 0BF8               ___awdiv@counter 004B       debounceButton@debounced 0037  
                       _SNAKE 06D1                         _PORTA 000F80                         _PORTB 000F81  
                       _PORTC 000F82                         _PORTD 000F83                 __CFG_PWRT$OFF 000000  
               __CFG_WRT0$OFF 000000                 __CFG_WRT1$OFF 000000                 __CFG_WRT2$OFF 000000  
               __CFG_WRT3$OFF 000000                __CFG_EBTR0$OFF 000000                __CFG_FCMEN$OFF 000000  
              __CFG_EBTR1$OFF 000000                __CFG_EBTR2$OFF 000000                __CFG_EBTR3$OFF 000000  
               __CFG_WRTB$OFF 000000                 __CFG_WRTC$OFF 000000                 __CFG_WRTD$OFF 000000  
              __CFG_EBTRB$OFF 000000                         __lfsr 0062                  ?_newRotation 0053  
                       itoa@i 0060                    _Left_Delay 002E                         tablat 000FF5  
             __end_of_reverse 1E52                    _DropObject 0010                    _Down_Delay 0028  
                       plusw1 000FE3                         plusw2 000FDB                         swap@a 0047  
                       swap@b 0049                         swap@t 004B                         ttemp5 0064  
                       ttemp6 0067                         ttemp7 006B                    _ReadEEByte 2174  
                       status 000FD8                         wtemp8 0064                   isr@CurrentX 0030  
                  _ObjectData 0018        __size_of_readHighScore 0036               __initialization 19C0  
          _resumeMultiplexing 21A8                  __end_of_main 204A                  __end_of_itoa 145A  
                __end_of_swap 201E      __end_of_selectNextObject 193A  __size_of_initialise_hardware 0042  
         ?_resumeMultiplexing 0035                        ??_main 0062                        ??_itoa 005B  
                      ??_swap 004B                 __activetblptr 000002              ?_collisionDetect 0047  
               ?_mergeObjects 0047                   _CreateBerry 1C26                        _EEDATA 000FA8  
                      _EECON2 000FA7              ___awdiv@dividend 0047                _debounceButton 1BB8  
                      i2l1022 1F08                        i2l1023 1F12                        i2l1018 1EF0  
                      i2l1019 1EE8          ??_resumeMultiplexing 0047          __end_of_choosescreen 121A  
                      _TMR0IE 007F95                        _TMR0ON 007EAF                        _TETRIS 06E1  
                  _MoveSnakes 0934                  ?_rnd_get_num 0035         __size_of_checkButtons 0242  
        checkForLines@pObject 0058              __end_of_genBerry 2152                    _SnakeGraph 0E28  
              __CFG_XINST$OFF 000000                        _Number 0631                    _SnakeYtext 0601  
             ??_splash_screen 0051             ?_checkForLeftWall 0047                        ___wmul 20C2  
                   ??___awdiv 004B                __CFG_STVREN$ON 000000                     ??___awmod 004B  
                   ??___lbmod 0048                        _berryX 000A                        _berryY 0009  
                   ??___lwmod 0039            ??_checkForLeftWall 0049                        _memcpy 1DAA  
                      clear_0 1A18                        clear_1 1A24                        clear_2 1A30  
            ___awdiv@quotient 004D               ___awmod@divisor 0049                        _shapes 0200  
                      _waitms 2152               ___awmod@counter 004B                _BackgroundData 0090  
                      _tetris 0007             ?_waitForInterrupt 0035       __size_of_rnd_initialize 0008  
                __pdataCOMRAM 0062            ??_waitForInterrupt 0047                show_score@mask 00A0  
                __mediumconst 0000                 _readHighScore 1F1C                ??_mergeObjects 004C  
                      preinc2 000FDC                _moveObjectDown 162A                        tblptrh 000FF7  
                      tblptrl 000FF6                        tblptru 000FF8                     ??_reverse 0050  
      __end_of_debounceButton 1C26                  _checkButtons 06F2              getNumber@pTarget 0051  
        __end_of_mainGameLoop 1892               ___lbmod@divisor 0047                    __accesstop 0080  
     __end_of__initialization 1A36               ___lbmod@counter 0049                   ?_ReadEEByte 0035  
             __CFG_PBADEN$OFF 000000          writeHighScore@adress 0049                 ___rparam_used 000001  
               __end_of_SNAKE 06E1             _pauseMultiplexing 2184                __pcstackCOMRAM 0035  
                __pidataBANK0 2164                  __pidataBANK2 193A            ?_pauseMultiplexing 0035  
               ?_pauseButtons 0035           ??_pauseMultiplexing 0047        __end_of_moveObjectDown 1702  
              ?_readHighScore 0035            __size_of_getNumber 0028               ?_debounceButton 0035  
            ??_checkForBottom 0049          moveObjectDown@result 005C                   MoveSnakes@i 005D  
                  __pbssBANK0 0080                    __pbssBANK1 0100                   ?_MoveSnakes 0035  
        __size_of_newRotation 0136     __end_of_pauseMultiplexing 2194                 ??_WriteEEByte 0048  
                  _clearArray 1FBC                   ?_SnakeGraph 0035               _initialise_TMR0 20E8  
       __end_of_resumeButtons 21B4                       ?___wmul 004D                ??_pauseButtons 0047  
                     ?_memcpy 0047                   SnakeGraph@i 0054                   SnakeGraph@j 0053  
                     ?_waitms 0047         __end_of_choose_screen 0631           __size_of_ReadEEByte 0010  
             ?_moveObjectDown 005A  selectNextObject@rndSelection 0055           newRotation@rotation 0057  
                   ?_genBerry 0035        __size_of_checkForLines 0080                   _Right_Delay 002C  
       __size_of_choosescreen 013A              _CheckForNewLines 0011                   moveObject@c 004F  
                 moveObject@i 0050           _initialise_hardware 1E98                checkForLines@x 0060  
              checkForLines@y 0061                       __Hparam 0000          __size_of_rnd_get_num 0046  
           __end_of_getNumber 209C                       __Lparam 0000                       _OriginX 000F  
                     _OriginY 000E    __end_of_initialise_globals 17D2          __end_of_mergeObjects 162A  
                     ___awdiv 1A44                       ___awmod 1B48                       ___lbmod 204A  
             __size_of___wmul 0026             removeLine@pObject 0047                       ___lwmod 1EDA  
           ?_selectNextObject 0053                  __psmallconst 0600           __end_of_WriteEEByte 20C2  
                 removeLine@x 0057                   removeLine@y 0056                       __pcinit 19C0  
        ?_initialise_hardware 0035               __size_of_memcpy 0056                       __ramtop 0600  
              _rnd_initialize 21A0                       __ptext0 201E            ??_selectNextObject 0055  
                     __ptext1 1D54                       __ptext2 2152                       __ptext3 21A0  
                     __ptext4 1F1C                       __ptext5 2174                       __ptext6 17D2  
                     __ptext7 1F52                       __ptext8 209C                       __ptext9 0F92  
                _choosescreen 10E0               __size_of_waitms 0012               ??_readHighScore 0049  
                   _T0CONbits 000FD5           __size_of_MoveSnakes 01E0                  __size_of_isr 0C9C  
            ___awmod@dividend 0047                   pixelCount@r 004E                   pixelCount@x 004F  
                 pixelCount@y 0050     selectNextObject@selection 0057                    ??_genBerry 004C  
       __size_of_mainGameLoop 00C0           __size_of_SnakeGraph 016A                       _reverse 1E00  
                ?_CreateBerry 0035               show_score@F2907 00B7             _checkForRightWall 2106  
         mergeObjects@pTarget 0049                __pintcode_body 0B14           mergeObjects@pSource 0047  
        end_of_initialization 1A36            ?_checkForRightWall 0047       __end_of_initialise_TMR0 2106  
                     memcpy@d 004D                       memcpy@n 004B                       memcpy@s 004F  
                     itoa@bas 0059                       itoa@rem 005E                    _moveObject 0CA4  
               __Lmediumconst 0000                       itoa@str 0057                       int_func 0B14  
  __size_of_pauseMultiplexing 0010                   ?_clearArray 0047           ??_checkForRightWall 0049  
             show_score@score 00B0                    _removeLine 145A             pixelCount@pSource 0047  
               _checkForLines 1AC8                    _pixelCount 1C92                    _mtxButtons 0017  
                     waitms@t 0047                       postdec1 000FE5                       postdec2 000FDD  
                     postinc0 000FEE                       postinc1 000FE6                       postinc2 000FDE  
      __end_of_rnd_initialize 21A8         ??_initialise_hardware 0047       __size_of_writeHighScore 0036  
                _mainGameLoop 17D2                     _PORTBbits 000F81                    _show_score 0F92  
   __end_of_checkForRightWall 2122              ___lbmod@dividend 0048     __size_of_checkForLeftWall 0018  
         debounceButton@delay 0035          __end_of_pauseButtons 21BA                   ___lbmod@rem 004A  
    __size_of_collisionDetect 0058   __size_of_resumeMultiplexing 0006     __size_of_waitForInterrupt 000C  
                ??_ReadEEByte 0047                __end_of_TETRIS 06F1         CreateBerry@randomGood 004F  
                   _EndOfGame 0012                ?_checkForLines 0058                   show_score@i 00B6  
                 _WriteEEByte 209C       show_score@currentNumber 00B1                __end_of_Number 06D1  
             ?_rnd_initialize 0035         __end_of_splash_screen 1DAA                __end_of___wmul 20E8  
               __pidataCOMRAM 21BA                __end_of_memcpy 1E00              ??_debounceButton 0039  
            mergeObjects@mode 004B                __end_of_waitms 2164                     _IsRotated 0013  
          __end_of_ReadEEByte 2184           start_initialization 19C0           __size_of_clearArray 0034  
                 __end_of_isr 0CA4              choosescreen@mask 004F              ?_initialise_TMR0 0035  
                ??_MoveSnakes 0055                   ?_moveObject 0047         __size_of_mergeObjects 00DE  
       moveObjectDown@pObject 005A              __CFG_OSC$INTIO67 000000                  ??_SnakeGraph 004E  
                 ?_removeLine 0047                    memcpy@dest 0047                   ?_pixelCount 0047  
         checkForLines@pixels 005F                      ??___wmul 0051              ??_moveObjectDown 005C  
                 __pdataBANK0 00B7                   __pdataBANK2 0200              __CFG_LPT1OSC$OFF 000000  
                    ??_memcpy 004D               getNumber@pDigit 0053                      ??_waitms 0049  
      collisionDetect@pTarget 0049                   ?_show_score 0035        collisionDetect@pSource 0047  
          __end_of_MoveSnakes 0B14    __size_of_checkForRightWall 001C                   __pbssCOMRAM 0001  
               __pcstackBANK0 00A0                 _NumberOfLines 0015            __end_of_SnakeGraph 0F92  
                _mergeObjects 154C             __size_of_genBerry 0018                 ??_newRotation 0058  
          __end_of_SnakeYtext 0621          __size_of_CreateBerry 006C               ??_checkForLines 005A  
          newRotation@pTarget 0055            newRotation@pSource 0053             __CFG_CCP2MX$PORTC 000000  
           ??_collisionDetect 004B                     __pintcode 0008                      ?___awdiv 0047  
                    ?___awmod 0047                      ?___lbmod 0047                     _getNumber 2074  
                    ?___lwmod 0035                _writeHighScore 1F52                     _direction 000D  
         __size_of_moveObject 0184                   __smallconst 0600            _initialise_globals 1702  
     selectNextObject@pTarget 0053           __size_of_removeLine 00F2         __size_of_pauseButtons 0006  
                    ?_reverse 004C              _checkForLeftWall 2122       selectNextObject@counter 0056  
         __size_of_pixelCount 006A     __size_of_selectNextObject 00A8        __size_of_resumeButtons 0006  
         ?_initialise_globals 0035                  genBerry@temp 004D                  genBerry@size 004C  
            _waitForInterrupt 2194                 ??_rnd_get_num 0047                ___wmul@product 0051  
                ??_clearArray 004B           __end_of_newRotation 1350                    reverse@end 0053  
     __size_of_checkForBottom 0034           __size_of_show_score 014E                     _moveSnake 000C  
                  reverse@str 004C                      i2u371_40 1EF4                      i2u376_40 0B70  
                    i2u384_44 0C2E                      i2u384_45 0C2A                      i2u376_46 0B72  
                    i2u377_40 0B8E                      i2u377_46 0B90                      i2u378_40 0BAC  
                    i2u378_46 0BAE                      i2u379_40 0BCA                      i2u379_46 0BCC  
      __end_of_writeHighScore 1F88              __CFG_WDTPS$32768 000000          ??_initialise_globals 0051  
                  ?_getNumber 0051                  _pauseButtons 21B4                     _positions 0100  
                  _ADCON1bits 000FC1         removeLine@currentLine 0055             ___wmul@multiplier 004D  
       __end_of_readHighScore 1F52            __end_of_clearArray 1FF0                 ?_checkButtons 0035  
           ReadEEByte@address 0047                   _INTCON2bits 000FF1                     copy_data0 19D4  
                   copy_data1 19F4               checkForBottom@i 004B                itoa@isNegative 005D  
                  _EECON1bits 000FA6                  ?_WriteEEByte 0047                      __Hrparam 0000  
            ??_rnd_initialize 0047   __end_of_initialise_hardware 1EDA                     memcpy@src 0049  
                    __Lrparam 0000            __CFG_BOREN$SBORDIS 000000               ?_writeHighScore 0035  
         __end_of_rnd_get_num 1E98                _Left_Debounced 0034              collisionDetect@i 004F  
               _resumeButtons 21AE                     itoa@value 0055              __size_of___awdiv 0084  
    checkForRightWall@pObject 0047              __size_of___awmod 0070              __size_of___lbmod 002A  
                CreateBerry@i 0050              __size_of___lwmod 0042                 mergeObjects@i 004E  
                rnd_get_num@b 004A                 _choose_screen 0621                  removeLine@pY 0049  
               _tmpObjectData 0080                 reverse@length 004E                      _genBerry 213A  
              ??_checkButtons 0061                      __ptext10 1350                      __ptext11 1E00  
                    __ptext20 121A                      __ptext12 1FF0                      __ptext21 162A  
                    __ptext13 1A44                      __ptext30 2122                      __ptext22 1892  
                    __ptext14 2074                      __ptext31 0934                      __ptext23 1DAA  
                    __ptext15 1702                      __ptext40 21A8                      __ptext32 0E28  
                    __ptext24 20C2                      __ptext16 1AC8                      __ptext41 21AE  
                    __ptext33 1C26                      __ptext25 1B48                      __ptext17 145A  
                    __ptext42 2184                      __ptext34 213A                      __ptext26 0CA4  
                    __ptext18 06F2                      __ptext43 2194                      __ptext35 1E52  
                    __ptext27 1CFC                      __ptext19 1C92                      __ptext44 21B4  
                    __ptext36 204A                      __ptext28 1F88                      __ptext45 154C  
                    __ptext37 1E98                      __ptext29 2106                      __ptext46 1FBC  
                    __ptext38 20E8                      __ptext39 10E0                      __ptext48 1BB8  
                    __ptext49 1EDA              __size_of_reverse 0052    __end_of_resumeMultiplexing 21AE  
            _Rotate_Debounced 0032                      _itoa$422 005B                   _newRotation 121A  
          _previous_direction 0008               _LimitedRotation 0016                  ??_moveObject 004B  
               __size_of_main 002C                 __size_of_itoa 010A                 __size_of_swap 002E  
                ??_removeLine 004A                  ??_pixelCount 0049                ?_resumeButtons 0035  
              _Down_Debounced 0031                   clearArray@i 004D               _Right_Debounced 0033  
                    int$flags 0063                   ??_getNumber 0053                  ??_show_score 0062  
          __end_of_moveObject 0E28                    _INTCONbits 000FF2              clearArray@pArray 0047  
                    isr@xmask 0046                      isr@ymask 0044            __end_of_removeLine 154C  
          __end_of_pixelCount 1CFC              _selectNextObject 1892          readHighScore@tmpbyte 004A  
             _collisionDetect 1CFC                      intlevel2 0000                  _UpdateScreen 0006  
                reverse@start 0051        __size_of_splash_screen 0056              ___lwmod@dividend 0035  
                 _rnd_get_num 1E52              show_score@number 00B2                _checkForBottom 1F88  
                _Rotate_Delay 002A                    _OSCCONbits 000FD3            __end_of_show_score 10E0  
                 _snakeLength 000B      __end_of_checkForLeftWall 213A      __size_of_initialise_TMR0 001E  
         readHighScore@adress 0049                 choosescreen@i 005F             selectNextObject@s 0058  
    __end_of_waitForInterrupt 21A0                 ?_choosescreen 0035               ___lwmod@divisor 0037  
             ___lwmod@counter 0039                 _LastHighScore 0014         checkForBottom@pObject 0047  
               ??_CreateBerry 004E       checkForLeftWall@pObject 0047             _InterruptComplete 0005  
              clearArray@size 0049       __size_of_debounceButton 006E                  _port_display 000F82  
      __end_of_checkForBottom 1FBC         __end_of_checkForLines 1B48               ??_resumeButtons 0047  
