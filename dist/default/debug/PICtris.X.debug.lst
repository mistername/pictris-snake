

Microchip Technology PIC18 LITE Macro Assembler V2.00 build -1524193055 
                                                                                               Sat Jan 26 02:02:35 2019

Microchip Technology Omniscient Code Generator v2.00 (Free mode) build 20180527130849
     1                           	processor	18F4520
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	idataBANK0,global,class=CODE,delta=1,noexec
     7                           	psect	idataBANK2,global,class=CODE,delta=1,noexec
     8                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     9                           	psect	cinit,global,reloc=2,class=CODE,delta=1
    10                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    11                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    12                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    13                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    14                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    15                           	psect	dataBANK2,global,class=BANK2,space=1,delta=1,lowdata,noexec
    16                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    17                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    18                           	psect	text0,global,reloc=2,class=CODE,delta=1
    19                           	psect	text1,global,reloc=2,class=CODE,delta=1
    20                           	psect	text2,global,reloc=2,class=CODE,delta=1
    21                           	psect	text3,global,reloc=2,class=CODE,delta=1
    22                           	psect	text4,global,reloc=2,class=CODE,delta=1
    23                           	psect	text5,global,reloc=2,class=CODE,delta=1
    24                           	psect	text6,global,reloc=2,class=CODE,delta=1
    25                           	psect	text7,global,reloc=2,class=CODE,delta=1
    26                           	psect	text8,global,reloc=2,class=CODE,delta=1
    27                           	psect	text9,global,reloc=2,class=CODE,delta=1
    28                           	psect	text10,global,reloc=2,class=CODE,delta=1
    29                           	psect	text11,global,reloc=2,class=CODE,delta=1
    30                           	psect	text12,global,reloc=2,class=CODE,delta=1
    31                           	psect	text13,global,reloc=2,class=CODE,delta=1
    32                           	psect	text14,global,reloc=2,class=CODE,delta=1
    33                           	psect	text15,global,reloc=2,class=CODE,delta=1,group=1
    34                           	psect	text16,global,reloc=2,class=CODE,delta=1,group=1
    35                           	psect	text17,global,reloc=2,class=CODE,delta=1
    36                           	psect	text18,global,reloc=2,class=CODE,delta=1
    37                           	psect	text19,global,reloc=2,class=CODE,delta=1
    38                           	psect	text20,global,reloc=2,class=CODE,delta=1
    39                           	psect	text21,global,reloc=2,class=CODE,delta=1
    40                           	psect	text22,global,reloc=2,class=CODE,delta=1
    41                           	psect	text23,global,reloc=2,class=CODE,delta=1
    42                           	psect	text24,global,reloc=2,class=CODE,delta=1
    43                           	psect	text25,global,reloc=2,class=CODE,delta=1
    44                           	psect	text26,global,reloc=2,class=CODE,delta=1
    45                           	psect	text27,global,reloc=2,class=CODE,delta=1
    46                           	psect	text28,global,reloc=2,class=CODE,delta=1
    47                           	psect	text29,global,reloc=2,class=CODE,delta=1
    48                           	psect	text30,global,reloc=2,class=CODE,delta=1
    49                           	psect	text31,global,reloc=2,class=CODE,delta=1
    50                           	psect	text32,global,reloc=2,class=CODE,delta=1
    51                           	psect	text33,global,reloc=2,class=CODE,delta=1
    52                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    53                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    54                           	psect	text35,global,reloc=2,class=CODE,delta=1
    55                           	psect	text36,global,reloc=2,class=CODE,delta=1,group=1
    56                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    57                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    58                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    59  0000                     
    60                           ; Version 2.00
    61                           ; Generated 27/05/2018 GMT
    62                           ; 
    63                           ; Copyright Â© 2018, Microchip Technology Inc. and its subsidiaries ("Microchip")
    64                           ; All rights reserved.
    65                           ; 
    66                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    67                           ; 
    68                           ; Redistribution and use in source and binary forms, with or without modification, are
    69                           ; permitted provided that the following conditions are met:
    70                           ; 
    71                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    72                           ;        conditions and the following disclaimer.
    73                           ; 
    74                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    75                           ;        of conditions and the following disclaimer in the documentation and/or other
    76                           ;        materials provided with the distribution.
    77                           ; 
    78                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    79                           ;        software without specific prior written permission.
    80                           ; 
    81                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    82                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    83                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    84                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    85                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    86                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    87                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    88                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    89                           ; 
    90                           ; 
    91                           ; Code-generator required, PIC18F4520 Definitions
    92                           ; 
    93                           ; SFR Addresses
    94  0000                     
    95                           	psect	idataCOMRAM
    96  001B3E                     __pidataCOMRAM:
    97                           	opt stack 0
    98                           
    99                           ;initializer for __lfsr
   100  001B3E  FF                 	db	255
   101                           
   102                           	psect	idataBANK0
   103  001AE6                     __pidataBANK0:
   104                           	opt stack 0
   105                           
   106                           ;initializer for show_score@F2901
   107  001AE6  FFFF               	dw	65535
   108  001AE8  FFFF               	dw	65535
   109  001AEA  FFFF               	dw	65535
   110  001AEC  FFFF               	dw	65535
   111  001AEE  FFFF               	dw	65535
   112  001AF0  FFFF               	dw	65535
   113  001AF2  FFFF               	dw	65535
   114  001AF4  FFFF               	dw	65535
   115                           
   116                           	psect	idataBANK2
   117  0015BC                     __pidataBANK2:
   118                           	opt stack 0
   119                           
   120                           ;initializer for _shapes
   121  0015BC  0000               	dw	0
   122  0015BE  0000               	dw	0
   123  0015C0  0000               	dw	0
   124  0015C2  0001               	dw	1
   125  0015C4  0003               	dw	3
   126  0015C6  0001               	dw	1
   127  0015C8  0000               	dw	0
   128  0015CA  0000               	dw	0
   129  0015CC  04                 	db	4
   130  0015CD  00                 	db	0
   131  0015CE  00                 	db	0
   132  0015CF  0000               	dw	0
   133  0015D1  0000               	dw	0
   134  0015D3  0001               	dw	1
   135  0015D5  0001               	dw	1
   136  0015D7  0001               	dw	1
   137  0015D9  0001               	dw	1
   138  0015DB  0000               	dw	0
   139  0015DD  0000               	dw	0
   140  0015DF  04                 	db	4
   141  0015E0  00                 	db	0
   142  0015E1  01                 	db	1
   143  0015E2  0000               	dw	0
   144  0015E4  0000               	dw	0
   145  0015E6  0000               	dw	0
   146  0015E8  0003               	dw	3
   147  0015EA  0001               	dw	1
   148  0015EC  0001               	dw	1
   149  0015EE  0000               	dw	0
   150  0015F0  0000               	dw	0
   151  0015F2  04                 	db	4
   152  0015F3  00                 	db	0
   153  0015F4  00                 	db	0
   154  0015F5  0000               	dw	0
   155  0015F7  0000               	dw	0
   156  0015F9  0000               	dw	0
   157  0015FB  0001               	dw	1
   158  0015FD  0001               	dw	1
   159  0015FF  0003               	dw	3
   160  001601  0000               	dw	0
   161  001603  0000               	dw	0
   162  001605  04                 	db	4
   163  001606  00                 	db	0
   164  001607  00                 	db	0
   165  001608  0000               	dw	0
   166  00160A  0000               	dw	0
   167  00160C  0000               	dw	0
   168  00160E  0003               	dw	3
   169  001610  0003               	dw	3
   170  001612  0000               	dw	0
   171  001614  0000               	dw	0
   172  001616  0000               	dw	0
   173  001618  03                 	db	3
   174  001619  01                 	db	1
   175  00161A  02                 	db	2
   176  00161B  0000               	dw	0
   177  00161D  0000               	dw	0
   178  00161F  0000               	dw	0
   179  001621  0002               	dw	2
   180  001623  0003               	dw	3
   181  001625  0001               	dw	1
   182  001627  0000               	dw	0
   183  001629  0000               	dw	0
   184  00162B  04                 	db	4
   185  00162C  01                 	db	1
   186  00162D  01                 	db	1
   187  00162E  0000               	dw	0
   188  001630  0000               	dw	0
   189  001632  0000               	dw	0
   190  001634  0001               	dw	1
   191  001636  0003               	dw	3
   192  001638  0002               	dw	2
   193  00163A  0000               	dw	0
   194  00163C  0000               	dw	0
   195  00163E  04                 	db	4
   196  00163F  01                 	db	1
   197  001640  01                 	db	1
   198                           
   199                           	psect	smallconst
   200  000600                     __psmallconst:
   201                           	opt stack 0
   202  000600  00                 	db	0
   203  000601                     _SnakeYtext:
   204                           	opt stack 0
   205  000601  0001               	dw	1
   206  000603  0002               	dw	2
   207  000605  0004               	dw	4
   208  000607  0008               	dw	8
   209  000609  0010               	dw	16
   210  00060B  0020               	dw	32
   211  00060D  0040               	dw	64
   212  00060F  0080               	dw	128
   213  000611  0100               	dw	256
   214  000613  0200               	dw	512
   215  000615  0400               	dw	1024
   216  000617  0800               	dw	2048
   217  000619  1000               	dw	4096
   218  00061B  2000               	dw	8192
   219  00061D  4000               	dw	16384
   220  00061F  8000               	dw	32768
   221  000621                     __end_of_SnakeYtext:
   222                           	opt stack 0
   223  000621                     _Number:
   224                           	opt stack 0
   225  000621  001E               	dw	30
   226  000623  0012               	dw	18
   227  000625  0012               	dw	18
   228  000627  0012               	dw	18
   229  000629  001E               	dw	30
   230  00062B  0000               	dw	0
   231  00062D  0000               	dw	0
   232  00062F  0000               	dw	0
   233  000631  0004               	dw	4
   234  000633  000C               	dw	12
   235  000635  0004               	dw	4
   236  000637  0004               	dw	4
   237  000639  001E               	dw	30
   238  00063B  0000               	dw	0
   239  00063D  0000               	dw	0
   240  00063F  0000               	dw	0
   241  000641  001E               	dw	30
   242  000643  0002               	dw	2
   243  000645  001E               	dw	30
   244  000647  0010               	dw	16
   245  000649  001E               	dw	30
   246  00064B  0000               	dw	0
   247  00064D  0000               	dw	0
   248  00064F  0000               	dw	0
   249  000651  001E               	dw	30
   250  000653  0002               	dw	2
   251  000655  000E               	dw	14
   252  000657  0002               	dw	2
   253  000659  001E               	dw	30
   254  00065B  0000               	dw	0
   255  00065D  0000               	dw	0
   256  00065F  0000               	dw	0
   257  000661  0012               	dw	18
   258  000663  0012               	dw	18
   259  000665  001E               	dw	30
   260  000667  0002               	dw	2
   261  000669  0002               	dw	2
   262  00066B  0000               	dw	0
   263  00066D  0000               	dw	0
   264  00066F  0000               	dw	0
   265  000671  001E               	dw	30
   266  000673  0010               	dw	16
   267  000675  001E               	dw	30
   268  000677  0002               	dw	2
   269  000679  001E               	dw	30
   270  00067B  0000               	dw	0
   271  00067D  0000               	dw	0
   272  00067F  0000               	dw	0
   273  000681  001E               	dw	30
   274  000683  0010               	dw	16
   275  000685  001E               	dw	30
   276  000687  0012               	dw	18
   277  000689  001E               	dw	30
   278  00068B  0000               	dw	0
   279  00068D  0000               	dw	0
   280  00068F  0000               	dw	0
   281  000691  001E               	dw	30
   282  000693  0002               	dw	2
   283  000695  0004               	dw	4
   284  000697  0008               	dw	8
   285  000699  0010               	dw	16
   286  00069B  0000               	dw	0
   287  00069D  0000               	dw	0
   288  00069F  0000               	dw	0
   289  0006A1  001E               	dw	30
   290  0006A3  0012               	dw	18
   291  0006A5  001E               	dw	30
   292  0006A7  0012               	dw	18
   293  0006A9  001E               	dw	30
   294  0006AB  0000               	dw	0
   295  0006AD  0000               	dw	0
   296  0006AF  0000               	dw	0
   297  0006B1  001E               	dw	30
   298  0006B3  0012               	dw	18
   299  0006B5  001E               	dw	30
   300  0006B7  0002               	dw	2
   301  0006B9  0002               	dw	2
   302  0006BB  0000               	dw	0
   303  0006BD  0000               	dw	0
   304  0006BF  0000               	dw	0
   305  0006C1                     __end_of_Number:
   306                           	opt stack 0
   307  0006C1                     _TETRIS:
   308                           	opt stack 0
   309  0006C1  8841               	dw	34881
   310  0006C3  FBDF               	dw	64479
   311  0006C5  8841               	dw	34881
   312  0006C7  0000               	dw	0
   313  0006C9  9BDF               	dw	39903
   314  0006CB  A955               	dw	43349
   315  0006CD  CA91               	dw	51857
   316  0006CF  0000               	dw	0
   317  0006D1                     __end_of_TETRIS:
   318                           	opt stack 0
   319  0000                     _port_display	set	3970
   320  0000                     _PORTD	set	3971
   321  0000                     _DDRD	set	3989
   322  0000                     _PORTC	set	3970
   323  0000                     _DDRC	set	3988
   324  0000                     _PORTB	set	3969
   325  0000                     _DDRB	set	3987
   326  0000                     _DDRA	set	3986
   327  0000                     _PORTA	set	3968
   328  0000                     _PORTBbits	set	3969
   329  0000                     _ADCON1bits	set	4033
   330  0000                     _OSCCONbits	set	4051
   331  0000                     _IPEN	set	32391
   332  0000                     _TMR0	set	4054
   333  0000                     _T0CONbits	set	4053
   334  0000                     _TMR0ON	set	32431
   335  0000                     _T0CS	set	32429
   336  0000                     _PSA	set	32427
   337  0000                     _INTCON2bits	set	4081
   338  0000                     _INTCONbits	set	4082
   339  0000                     _GIE	set	32663
   340  0000                     _TMR0IE	set	32661
   341                           
   342                           ; #config settings
   343  0006D1  00                 	db	0	; dummy byte at the end
   344  0000                     
   345                           	psect	cinit
   346  001642                     __pcinit:
   347                           	opt stack 0
   348  001642                     start_initialization:
   349                           	opt stack 0
   350  001642                     __initialization:
   351                           	opt stack 0
   352                           
   353                           ; Initialize objects allocated to BANK2 (133 bytes)
   354                           ; load TBLPTR registers with __pidataBANK2
   355  001642  0EBC               	movlw	low __pidataBANK2
   356  001644  6EF6               	movwf	tblptrl,c
   357  001646  0E15               	movlw	high __pidataBANK2
   358  001648  6EF7               	movwf	tblptrh,c
   359  00164A  0E00               	movlw	low (__pidataBANK2 shr (0+16))
   360  00164C  6EF8               	movwf	tblptru,c
   361  00164E  EE02  F000         	lfsr	0,__pdataBANK2
   362  001652  EE10 F085          	lfsr	1,133
   363  001656                     copy_data0:
   364  001656  0009               	tblrd		*+
   365  001658  CFF5 FFEE          	movff	tablat,postinc0
   366  00165C  50E5               	movf	postdec1,w,c
   367  00165E  50E1               	movf	fsr1l,w,c
   368  001660  E1FA               	bnz	copy_data0
   369                           
   370                           ; Initialize objects allocated to BANK0 (16 bytes)
   371                           ; load TBLPTR registers with __pidataBANK0
   372  001662  0EE6               	movlw	low __pidataBANK0
   373  001664  6EF6               	movwf	tblptrl,c
   374  001666  0E1A               	movlw	high __pidataBANK0
   375  001668  6EF7               	movwf	tblptrh,c
   376  00166A  0E00               	movlw	low (__pidataBANK0 shr (0+16))
   377  00166C  6EF8               	movwf	tblptru,c
   378  00166E  EE00  F090         	lfsr	0,__pdataBANK0
   379  001672  EE10 F010          	lfsr	1,16
   380  001676                     copy_data1:
   381  001676  0009               	tblrd		*+
   382  001678  CFF5 FFEE          	movff	tablat,postinc0
   383  00167C  50E5               	movf	postdec1,w,c
   384  00167E  50E1               	movf	fsr1l,w,c
   385  001680  E1FA               	bnz	copy_data1
   386                           
   387                           ; Initialize objects allocated to COMRAM (1 bytes)
   388                           ; load TBLPTR registers with __pidataCOMRAM
   389  001682  0E3E               	movlw	low __pidataCOMRAM
   390  001684  6EF6               	movwf	tblptrl,c
   391  001686  0E1B               	movlw	high __pidataCOMRAM
   392  001688  6EF7               	movwf	tblptrh,c
   393  00168A  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   394  00168C  6EF8               	movwf	tblptru,c
   395  00168E  0009               	tblrd		*+	;fetch initializer
   396  001690  CFF5 F06C          	movff	tablat,__pdataCOMRAM
   397                           
   398                           ; Clear objects allocated to BANK1 (200 bytes)
   399  001694  EE01  F000         	lfsr	0,__pbssBANK1
   400  001698  0EC8               	movlw	200
   401  00169A                     clear_0:
   402  00169A  6AEE               	clrf	postinc0,c
   403  00169C  06E8               	decf	wreg,f,c
   404  00169E  E1FD               	bnz	clear_0
   405                           
   406                           ; Clear objects allocated to BANK0 (16 bytes)
   407  0016A0  EE00  F080         	lfsr	0,__pbssBANK0
   408  0016A4  0E10               	movlw	16
   409  0016A6                     clear_1:
   410  0016A6  6AEE               	clrf	postinc0,c
   411  0016A8  06E8               	decf	wreg,f,c
   412  0016AA  E1FD               	bnz	clear_1
   413                           
   414                           ; Clear objects allocated to COMRAM (68 bytes)
   415  0016AC  EE00  F001         	lfsr	0,__pbssCOMRAM
   416  0016B0  0E44               	movlw	68
   417  0016B2                     clear_2:
   418  0016B2  6AEE               	clrf	postinc0,c
   419  0016B4  06E8               	decf	wreg,f,c
   420  0016B6  E1FD               	bnz	clear_2
   421  0016B8                     end_of_initialization:
   422                           	opt stack 0
   423  0016B8                     __end_of__initialization:
   424                           	opt stack 0
   425  0016B8  906D               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   426  0016BA  926D               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   427  0016BC  0E00               	movlw	low (__Lmediumconst shr (0+16))
   428  0016BE  6EF8               	movwf	tblptru,c
   429  0016C0  0100               	movlb	0
   430  0016C2  EF5B  F00D         	goto	_main	;jump to C main() function
   431                           tblptru	equ	0xFF8
   432                           tblptrh	equ	0xFF7
   433                           tblptrl	equ	0xFF6
   434                           tablat	equ	0xFF5
   435                           postinc0	equ	0xFEE
   436                           wreg	equ	0xFE8
   437                           postdec1	equ	0xFE5
   438                           fsr1l	equ	0xFE1
   439                           
   440                           	psect	bssCOMRAM
   441  000001                     __pbssCOMRAM:
   442                           	opt stack 0
   443  000001                     _time:
   444                           	opt stack 0
   445  000001                     	ds	2
   446  000003                     _mS:
   447                           	opt stack 0
   448  000003                     	ds	2
   449  000005                     _InterruptComplete:
   450                           	opt stack 0
   451  000005                     	ds	1
   452  000006                     _UpdateScreen:
   453                           	opt stack 0
   454  000006                     	ds	1
   455  000007                     _tetris:
   456                           	opt stack 0
   457  000007                     	ds	1
   458  000008                     _previous_direction:
   459                           	opt stack 0
   460  000008                     	ds	1
   461  000009                     _berryY:
   462                           	opt stack 0
   463  000009                     	ds	1
   464  00000A                     _berryX:
   465                           	opt stack 0
   466  00000A                     	ds	1
   467  00000B                     _snakeLength:
   468                           	opt stack 0
   469  00000B                     	ds	1
   470  00000C                     _moveSnake:
   471                           	opt stack 0
   472  00000C                     	ds	1
   473  00000D                     _direction:
   474                           	opt stack 0
   475  00000D                     	ds	1
   476  00000E                     _OriginY:
   477                           	opt stack 0
   478  00000E                     	ds	1
   479  00000F                     _OriginX:
   480                           	opt stack 0
   481  00000F                     	ds	1
   482  000010                     _DropObject:
   483                           	opt stack 0
   484  000010                     	ds	1
   485  000011                     _CheckForNewLines:
   486                           	opt stack 0
   487  000011                     	ds	1
   488  000012                     _EndOfGame:
   489                           	opt stack 0
   490  000012                     	ds	1
   491  000013                     _IsRotated:
   492                           	opt stack 0
   493  000013                     	ds	1
   494  000014                     _LastHighScore:
   495                           	opt stack 0
   496  000014                     	ds	1
   497  000015                     _NumberOfLines:
   498                           	opt stack 0
   499  000015                     	ds	1
   500  000016                     _LimitedRotation:
   501                           	opt stack 0
   502  000016                     	ds	1
   503  000017                     _mtxButtons:
   504                           	opt stack 0
   505  000017                     	ds	1
   506  000018                     _BackgroundData:
   507                           	opt stack 0
   508  000018                     	ds	16
   509  000028                     _ObjectData:
   510                           	opt stack 0
   511  000028                     	ds	16
   512  000038                     _Down_Delay:
   513                           	opt stack 0
   514  000038                     	ds	2
   515  00003A                     _Rotate_Delay:
   516                           	opt stack 0
   517  00003A                     	ds	2
   518  00003C                     _Right_Delay:
   519                           	opt stack 0
   520  00003C                     	ds	2
   521  00003E                     _Left_Delay:
   522                           	opt stack 0
   523  00003E                     	ds	2
   524  000040                     isr@CurrentX:
   525                           	opt stack 0
   526  000040                     	ds	1
   527  000041                     _Down_Debounced:
   528                           	opt stack 0
   529  000041                     	ds	1
   530  000042                     _Rotate_Debounced:
   531                           	opt stack 0
   532  000042                     	ds	1
   533  000043                     _Right_Debounced:
   534                           	opt stack 0
   535  000043                     	ds	1
   536  000044                     _Left_Debounced:
   537                           	opt stack 0
   538  000044                     	ds	1
   539                           tblptru	equ	0xFF8
   540                           tblptrh	equ	0xFF7
   541                           tblptrl	equ	0xFF6
   542                           tablat	equ	0xFF5
   543                           postinc0	equ	0xFEE
   544                           wreg	equ	0xFE8
   545                           postdec1	equ	0xFE5
   546                           fsr1l	equ	0xFE1
   547                           
   548                           	psect	dataCOMRAM
   549  00006C                     __pdataCOMRAM:
   550                           	opt stack 0
   551  00006C                     __lfsr:
   552                           	opt stack 0
   553  00006C                     	ds	1
   554                           tblptru	equ	0xFF8
   555                           tblptrh	equ	0xFF7
   556                           tblptrl	equ	0xFF6
   557                           tablat	equ	0xFF5
   558                           postinc0	equ	0xFEE
   559                           wreg	equ	0xFE8
   560                           postdec1	equ	0xFE5
   561                           fsr1l	equ	0xFE1
   562                           
   563                           	psect	bssBANK0
   564  000080                     __pbssBANK0:
   565                           	opt stack 0
   566  000080                     _tmpObjectData:
   567                           	opt stack 0
   568  000080                     	ds	16
   569                           tblptru	equ	0xFF8
   570                           tblptrh	equ	0xFF7
   571                           tblptrl	equ	0xFF6
   572                           tablat	equ	0xFF5
   573                           postinc0	equ	0xFEE
   574                           wreg	equ	0xFE8
   575                           postdec1	equ	0xFE5
   576                           fsr1l	equ	0xFE1
   577                           
   578                           	psect	dataBANK0
   579  000090                     __pdataBANK0:
   580                           	opt stack 0
   581  000090                     show_score@F2901:
   582                           	opt stack 0
   583  000090                     	ds	16
   584                           tblptru	equ	0xFF8
   585                           tblptrh	equ	0xFF7
   586                           tblptrl	equ	0xFF6
   587                           tablat	equ	0xFF5
   588                           postinc0	equ	0xFEE
   589                           wreg	equ	0xFE8
   590                           postdec1	equ	0xFE5
   591                           fsr1l	equ	0xFE1
   592                           
   593                           	psect	bssBANK1
   594  000100                     __pbssBANK1:
   595                           	opt stack 0
   596  000100                     _positions:
   597                           	opt stack 0
   598  000100                     	ds	200
   599                           tblptru	equ	0xFF8
   600                           tblptrh	equ	0xFF7
   601                           tblptrl	equ	0xFF6
   602                           tablat	equ	0xFF5
   603                           postinc0	equ	0xFEE
   604                           wreg	equ	0xFE8
   605                           postdec1	equ	0xFE5
   606                           fsr1l	equ	0xFE1
   607                           
   608                           	psect	dataBANK2
   609  000200                     __pdataBANK2:
   610                           	opt stack 0
   611  000200                     _shapes:
   612                           	opt stack 0
   613  000200                     	ds	133
   614                           tblptru	equ	0xFF8
   615                           tblptrh	equ	0xFF7
   616                           tblptrl	equ	0xFF6
   617                           tablat	equ	0xFF5
   618                           postinc0	equ	0xFEE
   619                           wreg	equ	0xFE8
   620                           postdec1	equ	0xFE5
   621                           fsr1l	equ	0xFE1
   622                           
   623                           	psect	cstackBANK0
   624  0000A0                     __pcstackBANK0:
   625                           	opt stack 0
   626  0000A0                     ??_newRotation:
   627  0000A0                     ??_checkForLines:
   628  0000A0                     MoveSnakes@i:
   629                           	opt stack 0
   630  0000A0                     moveObjectDown@result:
   631                           	opt stack 0
   632                           
   633                           ; 1 bytes @ 0x0
   634  0000A0                     	ds	5
   635  0000A5                     ??_checkButtons:
   636  0000A5                     checkForLines@pixels:
   637                           	opt stack 0
   638                           
   639                           ; 1 bytes @ 0x5
   640  0000A5                     	ds	1
   641  0000A6                     checkForLines@x:
   642                           	opt stack 0
   643                           
   644                           ; 1 bytes @ 0x6
   645  0000A6                     	ds	1
   646  0000A7                     checkForLines@y:
   647                           	opt stack 0
   648                           
   649                           ; 1 bytes @ 0x7
   650  0000A7                     	ds	1
   651                           tblptru	equ	0xFF8
   652                           tblptrh	equ	0xFF7
   653                           tblptrl	equ	0xFF6
   654                           tablat	equ	0xFF5
   655                           postinc0	equ	0xFEE
   656                           wreg	equ	0xFE8
   657                           postdec1	equ	0xFE5
   658                           fsr1l	equ	0xFE1
   659                           
   660                           	psect	cstackCOMRAM
   661  000045                     __pcstackCOMRAM:
   662                           	opt stack 0
   663  000045                     ?___lwmod:
   664                           	opt stack 0
   665  000045                     debounceButton@delay:
   666                           	opt stack 0
   667  000045                     ___lwmod@dividend:
   668                           	opt stack 0
   669                           
   670                           ; 2 bytes @ 0x0
   671  000045                     	ds	2
   672  000047                     debounceButton@debounced:
   673                           	opt stack 0
   674  000047                     ___lwmod@divisor:
   675                           	opt stack 0
   676                           
   677                           ; 2 bytes @ 0x2
   678  000047                     	ds	2
   679  000049                     ___lwmod@counter:
   680                           	opt stack 0
   681                           
   682                           ; 1 bytes @ 0x4
   683  000049                     	ds	2
   684  00004B                     debounceButton@button:
   685                           	opt stack 0
   686                           
   687                           ; 1 bytes @ 0x6
   688  00004B                     	ds	1
   689  00004C                     ??_isr:
   690                           
   691                           ; 1 bytes @ 0x7
   692  00004C                     	ds	8
   693  000054                     isr@ymask:
   694                           	opt stack 0
   695                           
   696                           ; 2 bytes @ 0xF
   697  000054                     	ds	2
   698  000056                     isr@xmask:
   699                           	opt stack 0
   700                           
   701                           ; 1 bytes @ 0x11
   702  000056                     	ds	1
   703  000057                     ??_rnd_get_num:
   704  000057                     ?___awmod:
   705                           	opt stack 0
   706  000057                     rnd_initialize@seed:
   707                           	opt stack 0
   708  000057                     memcpy@dest:
   709                           	opt stack 0
   710  000057                     clearArray@pArray:
   711                           	opt stack 0
   712  000057                     mergeObjects@pSource:
   713                           	opt stack 0
   714  000057                     moveObject@pObject:
   715                           	opt stack 0
   716  000057                     checkForBottom@pObject:
   717                           	opt stack 0
   718  000057                     checkForLeftWall@pObject:
   719                           	opt stack 0
   720  000057                     checkForRightWall@pObject:
   721                           	opt stack 0
   722  000057                     collisionDetect@pSource:
   723                           	opt stack 0
   724  000057                     pixelCount@pSource:
   725                           	opt stack 0
   726  000057                     removeLine@pObject:
   727                           	opt stack 0
   728  000057                     ___awmod@dividend:
   729                           	opt stack 0
   730                           
   731                           ; 2 bytes @ 0x12
   732  000057                     	ds	2
   733  000059                     ??_checkForBottom:
   734  000059                     ??_pixelCount:
   735  000059                     moveObject@direction:
   736                           	opt stack 0
   737  000059                     removeLine@pY:
   738                           	opt stack 0
   739  000059                     memcpy@src:
   740                           	opt stack 0
   741  000059                     clearArray@size:
   742                           	opt stack 0
   743  000059                     mergeObjects@pTarget:
   744                           	opt stack 0
   745  000059                     collisionDetect@pTarget:
   746                           	opt stack 0
   747  000059                     ___awmod@divisor:
   748                           	opt stack 0
   749                           
   750                           ; 2 bytes @ 0x14
   751  000059                     	ds	1
   752  00005A                     ??_removeLine:
   753  00005A                     moveObject@cycles:
   754                           	opt stack 0
   755  00005A                     rnd_get_num@b:
   756                           	opt stack 0
   757                           
   758                           ; 2 bytes @ 0x15
   759  00005A                     	ds	1
   760  00005B                     ??_clearArray:
   761  00005B                     ??_moveObject:
   762  00005B                     ??_collisionDetect:
   763  00005B                     mergeObjects@mode:
   764                           	opt stack 0
   765  00005B                     checkForBottom@i:
   766                           	opt stack 0
   767  00005B                     ___awmod@counter:
   768                           	opt stack 0
   769  00005B                     memcpy@n:
   770                           	opt stack 0
   771                           
   772                           ; 2 bytes @ 0x16
   773  00005B                     	ds	1
   774  00005C                     ??_mergeObjects:
   775  00005C                     genBerry@temp:
   776                           	opt stack 0
   777  00005C                     ___awmod@sign:
   778                           	opt stack 0
   779                           
   780                           ; 1 bytes @ 0x17
   781  00005C                     	ds	1
   782  00005D                     ?___wmul:
   783                           	opt stack 0
   784  00005D                     clearArray@i:
   785                           	opt stack 0
   786  00005D                     memcpy@d:
   787                           	opt stack 0
   788  00005D                     ___wmul@multiplier:
   789                           	opt stack 0
   790                           
   791                           ; 2 bytes @ 0x18
   792  00005D                     	ds	1
   793  00005E                     ??_SnakeGraph:
   794  00005E                     CreateBerry@randomGood:
   795                           	opt stack 0
   796  00005E                     mergeObjects@i:
   797                           	opt stack 0
   798  00005E                     pixelCount@r:
   799                           	opt stack 0
   800                           
   801                           ; 1 bytes @ 0x19
   802  00005E                     	ds	1
   803  00005F                     CreateBerry@i:
   804                           	opt stack 0
   805  00005F                     moveObject@c:
   806                           	opt stack 0
   807  00005F                     collisionDetect@i:
   808                           	opt stack 0
   809  00005F                     pixelCount@x:
   810                           	opt stack 0
   811  00005F                     memcpy@s:
   812                           	opt stack 0
   813  00005F                     ___wmul@multiplicand:
   814                           	opt stack 0
   815                           
   816                           ; 2 bytes @ 0x1A
   817  00005F                     	ds	1
   818  000060                     _SnakeGraph$461:
   819                           	opt stack 0
   820  000060                     moveObject@i:
   821                           	opt stack 0
   822  000060                     pixelCount@y:
   823                           	opt stack 0
   824  000060                     initialise_globals@i:
   825                           	opt stack 0
   826                           
   827                           ; 1 bytes @ 0x1B
   828  000060                     	ds	1
   829  000061                     _SnakeGraph$462:
   830                           	opt stack 0
   831  000061                     ___wmul@product:
   832                           	opt stack 0
   833                           
   834                           ; 2 bytes @ 0x1C
   835  000061                     	ds	1
   836  000062                     SnakeGraph@j:
   837                           	opt stack 0
   838                           
   839                           ; 1 bytes @ 0x1D
   840  000062                     	ds	1
   841  000063                     SnakeGraph@i:
   842                           	opt stack 0
   843  000063                     selectNextObject@pTarget:
   844                           	opt stack 0
   845  000063                     newRotation@pSource:
   846                           	opt stack 0
   847                           
   848                           ; 2 bytes @ 0x1E
   849  000063                     	ds	1
   850  000064                     ??_MoveSnakes:
   851                           
   852                           ; 1 bytes @ 0x1F
   853  000064                     	ds	1
   854  000065                     selectNextObject@rndSelection:
   855                           	opt stack 0
   856  000065                     removeLine@currentLine:
   857                           	opt stack 0
   858  000065                     newRotation@pTarget:
   859                           	opt stack 0
   860                           
   861                           ; 2 bytes @ 0x20
   862  000065                     	ds	1
   863  000066                     selectNextObject@counter:
   864                           	opt stack 0
   865  000066                     removeLine@y:
   866                           	opt stack 0
   867                           
   868                           ; 1 bytes @ 0x21
   869  000066                     	ds	1
   870  000067                     selectNextObject@selection:
   871                           	opt stack 0
   872  000067                     newRotation@rotation:
   873                           	opt stack 0
   874  000067                     removeLine@x:
   875                           	opt stack 0
   876                           
   877                           ; 1 bytes @ 0x22
   878  000067                     	ds	1
   879  000068                     newRotation@x2:
   880                           	opt stack 0
   881  000068                     selectNextObject@s:
   882                           	opt stack 0
   883  000068                     checkForLines@pObject:
   884                           	opt stack 0
   885                           
   886                           ; 2 bytes @ 0x23
   887  000068                     	ds	1
   888  000069                     newRotation@y2:
   889                           	opt stack 0
   890                           
   891                           ; 1 bytes @ 0x24
   892  000069                     	ds	1
   893  00006A                     newRotation@x1:
   894                           	opt stack 0
   895  00006A                     moveObjectDown@pObject:
   896                           	opt stack 0
   897                           
   898                           ; 2 bytes @ 0x25
   899  00006A                     	ds	1
   900  00006B                     newRotation@y1:
   901                           	opt stack 0
   902                           
   903                           ; 1 bytes @ 0x26
   904  00006B                     	ds	1
   905  00006C                     tblptru	equ	0xFF8
   906                           tblptrh	equ	0xFF7
   907                           tblptrl	equ	0xFF6
   908                           tablat	equ	0xFF5
   909                           postinc0	equ	0xFEE
   910                           wreg	equ	0xFE8
   911                           postdec1	equ	0xFE5
   912                           fsr1l	equ	0xFE1
   913                           
   914                           ; 1 bytes @ 0x27
   915 ;;
   916 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   917 ;;
   918 ;; *************** function _main *****************
   919 ;; Defined at:
   920 ;;		line 1274 in file "pictris.c"
   921 ;; Parameters:    Size  Location     Type
   922 ;;		None
   923 ;; Auto vars:     Size  Location     Type
   924 ;;		None
   925 ;; Return value:  Size  Location     Type
   926 ;;                  1    wreg      void 
   927 ;; Registers used:
   928 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   929 ;; Tracked objects:
   930 ;;		On entry : 0/0
   931 ;;		On exit  : 0/0
   932 ;;		Unchanged: 0/0
   933 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   934 ;;      Params:         0       0       0       0       0       0       0
   935 ;;      Locals:         0       0       0       0       0       0       0
   936 ;;      Temps:          0       0       0       0       0       0       0
   937 ;;      Totals:         0       0       0       0       0       0       0
   938 ;;Total ram usage:        0 bytes
   939 ;; Hardware stack levels required when called:    7
   940 ;; This function calls:
   941 ;;		_initialise_globals
   942 ;;		_initialise_hardware
   943 ;;		_mainGameLoop
   944 ;;		_rnd_initialize
   945 ;; This function is called by:
   946 ;;		Startup code after reset
   947 ;; This function uses a non-reentrant model
   948 ;;
   949                           
   950                           	psect	text0
   951  001AB6                     __ptext0:
   952                           	opt stack 0
   953  001AB6                     _main:
   954                           	opt stack 24
   955                           
   956                           ;pictris.c: 1278:     rnd_initialize(0x77);
   957                           
   958                           ;incstack = 0
   959  001AB6  0E77               	movlw	119
   960  001AB8  EC91  F00D         	call	_rnd_initialize
   961                           
   962                           ;pictris.c: 1284:     initialise_hardware();
   963  001ABC  ECB5  F00C         	call	_initialise_hardware	;wreg free
   964                           
   965                           ;pictris.c: 1285:     initialise_globals();
   966  001AC0  EC83  F009         	call	_initialise_globals	;wreg free
   967                           
   968                           ;pictris.c: 1289:     UpdateScreen = 1;
   969  001AC4  0E01               	movlw	1
   970  001AC6  6E06               	movwf	_UpdateScreen,c	;volatile
   971  001AC8                     
   972                           ;pictris.c: 1300:         mainGameLoop();
   973  001AC8  ECF1  F009         	call	_mainGameLoop	;wreg free
   974  001ACC  D7FD               	goto	l446
   975  001ACE                     __end_of_main:
   976                           	opt stack 0
   977                           tblptru	equ	0xFF8
   978                           tblptrh	equ	0xFF7
   979                           tblptrl	equ	0xFF6
   980                           tablat	equ	0xFF5
   981                           postinc0	equ	0xFEE
   982                           wreg	equ	0xFE8
   983                           postdec1	equ	0xFE5
   984                           fsr1l	equ	0xFE1
   985                           
   986 ;; *************** function _rnd_initialize *****************
   987 ;; Defined at:
   988 ;;		line 24 in file "randgen.c"
   989 ;; Parameters:    Size  Location     Type
   990 ;;  seed            1    wreg     unsigned char 
   991 ;; Auto vars:     Size  Location     Type
   992 ;;  seed            1   18[COMRAM] unsigned char 
   993 ;; Return value:  Size  Location     Type
   994 ;;                  1    wreg      void 
   995 ;; Registers used:
   996 ;;		wreg
   997 ;; Tracked objects:
   998 ;;		On entry : 0/0
   999 ;;		On exit  : 0/0
  1000 ;;		Unchanged: 0/0
  1001 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1002 ;;      Params:         0       0       0       0       0       0       0
  1003 ;;      Locals:         1       0       0       0       0       0       0
  1004 ;;      Temps:          0       0       0       0       0       0       0
  1005 ;;      Totals:         1       0       0       0       0       0       0
  1006 ;;Total ram usage:        1 bytes
  1007 ;; Hardware stack levels used:    1
  1008 ;; Hardware stack levels required when called:    2
  1009 ;; This function calls:
  1010 ;;		Nothing
  1011 ;; This function is called by:
  1012 ;;		_main
  1013 ;; This function uses a non-reentrant model
  1014 ;;
  1015                           
  1016                           	psect	text1
  1017  001B22                     __ptext1:
  1018                           	opt stack 0
  1019  001B22                     _rnd_initialize:
  1020                           	opt stack 28
  1021                           
  1022                           ;incstack = 0
  1023                           ;rnd_initialize@seed stored from wreg
  1024  001B22  6E57               	movwf	rnd_initialize@seed,c
  1025                           
  1026                           ;randgen.c: 24: void rnd_initialize(uint8_t seed);randgen.c: 25: {;randgen.c: 26:     _l
      +                          fsr = seed;
  1027  001B24  C057  F06C         	movff	rnd_initialize@seed,__lfsr
  1028  001B28  0012               	return		;funcret
  1029  001B2A                     __end_of_rnd_initialize:
  1030                           	opt stack 0
  1031                           tblptru	equ	0xFF8
  1032                           tblptrh	equ	0xFF7
  1033                           tblptrl	equ	0xFF6
  1034                           tablat	equ	0xFF5
  1035                           postinc0	equ	0xFEE
  1036                           wreg	equ	0xFE8
  1037                           postdec1	equ	0xFE5
  1038                           fsr1l	equ	0xFE1
  1039                           
  1040 ;; *************** function _mainGameLoop *****************
  1041 ;; Defined at:
  1042 ;;		line 1216 in file "pictris.c"
  1043 ;; Parameters:    Size  Location     Type
  1044 ;;		None
  1045 ;; Auto vars:     Size  Location     Type
  1046 ;;		None
  1047 ;; Return value:  Size  Location     Type
  1048 ;;                  1    wreg      void 
  1049 ;; Registers used:
  1050 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1051 ;; Tracked objects:
  1052 ;;		On entry : 0/0
  1053 ;;		On exit  : 0/0
  1054 ;;		Unchanged: 0/0
  1055 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1056 ;;      Params:         0       0       0       0       0       0       0
  1057 ;;      Locals:         0       0       0       0       0       0       0
  1058 ;;      Temps:          0       0       0       0       0       0       0
  1059 ;;      Totals:         0       0       0       0       0       0       0
  1060 ;;Total ram usage:        0 bytes
  1061 ;; Hardware stack levels used:    1
  1062 ;; Hardware stack levels required when called:    6
  1063 ;; This function calls:
  1064 ;;		_MoveSnakes
  1065 ;;		_checkButtons
  1066 ;;		_checkForLines
  1067 ;;		_clearArray
  1068 ;;		_initialise_globals
  1069 ;;		_moveObjectDown
  1070 ;;		_pauseMultiplexing
  1071 ;;		_resumeMultiplexing
  1072 ;;		_selectNextObject
  1073 ;;		_writeHighScore
  1074 ;; This function is called by:
  1075 ;;		_main
  1076 ;; This function uses a non-reentrant model
  1077 ;;
  1078                           
  1079                           	psect	text2
  1080  0013E2                     __ptext2:
  1081                           	opt stack 0
  1082  0013E2                     _mainGameLoop:
  1083                           	opt stack 24
  1084                           
  1085                           ;pictris.c: 1220:     pauseMultiplexing();
  1086                           
  1087                           ;incstack = 0
  1088  0013E2  EC7B  F00D         	call	_pauseMultiplexing	;wreg free
  1089                           
  1090                           ;pictris.c: 1222:     initialise_globals();
  1091  0013E6  EC83  F009         	call	_initialise_globals	;wreg free
  1092                           
  1093                           ;pictris.c: 1224:     resumeMultiplexing();
  1094  0013EA  EC9B  F00D         	call	_resumeMultiplexing	;wreg free
  1095                           
  1096                           ;pictris.c: 1226:     clearArray(ObjectData,8);
  1097  0013EE  0E28               	movlw	low _ObjectData
  1098  0013F0  6E57               	movwf	clearArray@pArray,c
  1099  0013F2  0E00               	movlw	high _ObjectData
  1100  0013F4  6E58               	movwf	clearArray@pArray+1,c
  1101  0013F6  0E00               	movlw	0
  1102  0013F8  6E5A               	movwf	clearArray@size+1,c
  1103  0013FA  0E08               	movlw	8
  1104  0013FC  6E59               	movwf	clearArray@size,c
  1105  0013FE  EC11  F00D         	call	_clearArray	;wreg free
  1106                           
  1107                           ;pictris.c: 1227:     clearArray(BackgroundData,8);
  1108  001402  0E18               	movlw	low _BackgroundData
  1109  001404  6E57               	movwf	clearArray@pArray,c
  1110  001406  0E00               	movlw	high _BackgroundData
  1111  001408  6E58               	movwf	clearArray@pArray+1,c
  1112  00140A  0E00               	movlw	0
  1113  00140C  6E5A               	movwf	clearArray@size+1,c
  1114  00140E  0E08               	movlw	8
  1115  001410  6E59               	movwf	clearArray@size,c
  1116  001412  EC11  F00D         	call	_clearArray	;wreg free
  1117                           
  1118                           ;pictris.c: 1228:     clearArray(tmpObjectData,8);
  1119  001416  0E80               	movlw	low _tmpObjectData
  1120  001418  6E57               	movwf	clearArray@pArray,c
  1121  00141A  0E00               	movlw	high _tmpObjectData
  1122  00141C  6E58               	movwf	clearArray@pArray+1,c
  1123  00141E  0E00               	movlw	0
  1124  001420  6E5A               	movwf	clearArray@size+1,c
  1125  001422  0E08               	movlw	8
  1126  001424  6E59               	movwf	clearArray@size,c
  1127  001426  EC11  F00D         	call	_clearArray	;wreg free
  1128                           
  1129                           ;pictris.c: 1229:    if (tetris == 1){
  1130  00142A  0407               	decf	_tetris,w,c
  1131  00142C  A4D8               	btfss	status,2,c
  1132  00142E  D020               	goto	l432
  1133                           
  1134                           ;pictris.c: 1231:     selectNextObject(ObjectData);
  1135  001430  0E28               	movlw	low _ObjectData
  1136  001432  6E63               	movwf	selectNextObject@pTarget,c
  1137  001434  0E00               	movlw	high _ObjectData
  1138  001436  6E64               	movwf	selectNextObject@pTarget+1,c
  1139  001438  EC47  F00A         	call	_selectNextObject	;wreg free
  1140  00143C                     
  1141                           ;pictris.c: 1234:         if (DropObject)
  1142  00143C  5010               	movf	_DropObject,w,c	;volatile
  1143  00143E  B4D8               	btfsc	status,2,c
  1144  001440  D008               	goto	l434
  1145                           
  1146                           ;pictris.c: 1235:         {;pictris.c: 1236:             DropObject = 0;
  1147  001442  0E00               	movlw	0
  1148  001444  6E10               	movwf	_DropObject,c	;volatile
  1149                           
  1150                           ;pictris.c: 1237:             moveObjectDown(ObjectData);
  1151  001446  0E28               	movlw	low _ObjectData
  1152  001448  6E6A               	movwf	moveObjectDown@pObject,c
  1153  00144A  0E00               	movlw	high _ObjectData
  1154  00144C  6E6B               	movwf	moveObjectDown@pObject+1,c
  1155  00144E  ECA4  F008         	call	_moveObjectDown	;wreg free
  1156  001452                     l434:
  1157                           
  1158                           ;pictris.c: 1241:         if (CheckForNewLines)
  1159  001452  5011               	movf	_CheckForNewLines,w,c
  1160  001454  B4D8               	btfsc	status,2,c
  1161  001456  D006               	goto	l435
  1162                           
  1163                           ;pictris.c: 1242:             checkForLines(BackgroundData);
  1164  001458  0E18               	movlw	low _BackgroundData
  1165  00145A  6E68               	movwf	checkForLines@pObject,c
  1166  00145C  0E00               	movlw	high _BackgroundData
  1167  00145E  6E69               	movwf	checkForLines@pObject+1,c
  1168  001460  EC9B  F00A         	call	_checkForLines	;wreg free
  1169  001464                     l435:
  1170                           
  1171                           ;pictris.c: 1244:         checkButtons();
  1172  001464  EC69  F003         	call	_checkButtons	;wreg free
  1173                           
  1174                           ;pictris.c: 1250:         } while (!EndOfGame);
  1175  001468  5012               	movf	_EndOfGame,w,c
  1176  00146A  A4D8               	btfss	status,2,c
  1177  00146C  D00D               	goto	u4650
  1178  00146E  D7E6               	goto	l433
  1179  001470                     l432:
  1180                           
  1181                           ;pictris.c: 1254:             if (moveSnake == 1) {
  1182                           
  1183                           ;pictris.c: 1253:        do{
  1184  001470  040C               	decf	_moveSnake,w,c
  1185  001472  A4D8               	btfss	status,2,c
  1186  001474  D004               	goto	l439
  1187                           
  1188                           ;pictris.c: 1255:                 moveSnake = 0;
  1189  001476  0E00               	movlw	0
  1190  001478  6E0C               	movwf	_moveSnake,c
  1191                           
  1192                           ;pictris.c: 1256:                 MoveSnakes();
  1193  00147A  EC72  F004         	call	_MoveSnakes	;wreg free
  1194  00147E                     l439:
  1195                           
  1196                           ;pictris.c: 1259:             checkButtons();
  1197  00147E  EC69  F003         	call	_checkButtons	;wreg free
  1198                           
  1199                           ;pictris.c: 1264:             } while(!EndOfGame);
  1200  001482  5012               	movf	_EndOfGame,w,c
  1201  001484  B4D8               	btfsc	status,2,c
  1202  001486  D7F4               	goto	l432
  1203  001488                     u4650:
  1204                           
  1205                           ;pictris.c: 1267:     writeHighScore();
  1206                           
  1207                           ;pictris.c: 1265:     }
  1208  001488  EC9E  F00D         	call	_writeHighScore	;wreg free
  1209  00148C  0012               	return		;funcret
  1210  00148E                     __end_of_mainGameLoop:
  1211                           	opt stack 0
  1212                           tblptru	equ	0xFF8
  1213                           tblptrh	equ	0xFF7
  1214                           tblptrl	equ	0xFF6
  1215                           tablat	equ	0xFF5
  1216                           postinc0	equ	0xFEE
  1217                           wreg	equ	0xFE8
  1218                           postdec1	equ	0xFE5
  1219                           fsr1l	equ	0xFE1
  1220                           status	equ	0xFD8
  1221                           
  1222 ;; *************** function _writeHighScore *****************
  1223 ;; Defined at:
  1224 ;;		line 1206 in file "pictris.c"
  1225 ;; Parameters:    Size  Location     Type
  1226 ;;		None
  1227 ;; Auto vars:     Size  Location     Type
  1228 ;;		None
  1229 ;; Return value:  Size  Location     Type
  1230 ;;                  1    wreg      void 
  1231 ;; Registers used:
  1232 ;;		None
  1233 ;; Tracked objects:
  1234 ;;		On entry : 0/0
  1235 ;;		On exit  : 0/0
  1236 ;;		Unchanged: 0/0
  1237 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1238 ;;      Params:         0       0       0       0       0       0       0
  1239 ;;      Locals:         0       0       0       0       0       0       0
  1240 ;;      Temps:          0       0       0       0       0       0       0
  1241 ;;      Totals:         0       0       0       0       0       0       0
  1242 ;;Total ram usage:        0 bytes
  1243 ;; Hardware stack levels used:    1
  1244 ;; Hardware stack levels required when called:    2
  1245 ;; This function calls:
  1246 ;;		Nothing
  1247 ;; This function is called by:
  1248 ;;		_mainGameLoop
  1249 ;; This function uses a non-reentrant model
  1250 ;;
  1251                           
  1252                           	psect	text3
  1253  001B3C                     __ptext3:
  1254                           	opt stack 0
  1255  001B3C                     _writeHighScore:
  1256                           	opt stack 27
  1257                           
  1258                           ;incstack = 0
  1259  001B3C  0012               	return		;funcret
  1260  001B3E                     __end_of_writeHighScore:
  1261                           	opt stack 0
  1262                           tblptru	equ	0xFF8
  1263                           tblptrh	equ	0xFF7
  1264                           tblptrl	equ	0xFF6
  1265                           tablat	equ	0xFF5
  1266                           postinc0	equ	0xFEE
  1267                           wreg	equ	0xFE8
  1268                           postdec1	equ	0xFE5
  1269                           fsr1l	equ	0xFE1
  1270                           status	equ	0xFD8
  1271                           
  1272 ;; *************** function _initialise_globals *****************
  1273 ;; Defined at:
  1274 ;;		line 1053 in file "pictris.c"
  1275 ;; Parameters:    Size  Location     Type
  1276 ;;		None
  1277 ;; Auto vars:     Size  Location     Type
  1278 ;;  i               1   27[COMRAM] unsigned char 
  1279 ;; Return value:  Size  Location     Type
  1280 ;;                  1    wreg      void 
  1281 ;; Registers used:
  1282 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1283 ;; Tracked objects:
  1284 ;;		On entry : 0/0
  1285 ;;		On exit  : 0/0
  1286 ;;		Unchanged: 0/0
  1287 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1288 ;;      Params:         0       0       0       0       0       0       0
  1289 ;;      Locals:         1       0       0       0       0       0       0
  1290 ;;      Temps:          0       0       0       0       0       0       0
  1291 ;;      Totals:         1       0       0       0       0       0       0
  1292 ;;Total ram usage:        1 bytes
  1293 ;; Hardware stack levels used:    1
  1294 ;; Hardware stack levels required when called:    5
  1295 ;; This function calls:
  1296 ;;		_CreateBerry
  1297 ;;		_clearArray
  1298 ;; This function is called by:
  1299 ;;		_mainGameLoop
  1300 ;;		_main
  1301 ;; This function uses a non-reentrant model
  1302 ;;
  1303                           
  1304                           	psect	text4
  1305  001306                     __ptext4:
  1306                           	opt stack 0
  1307  001306                     _initialise_globals:
  1308                           	opt stack 24
  1309                           
  1310                           ;pictris.c: 1056:     clearArray(ObjectData, 8);
  1311                           
  1312                           ;incstack = 0
  1313  001306  0E28               	movlw	low _ObjectData
  1314  001308  6E57               	movwf	clearArray@pArray,c
  1315  00130A  0E00               	movlw	high _ObjectData
  1316  00130C  6E58               	movwf	clearArray@pArray+1,c
  1317  00130E  0E00               	movlw	0
  1318  001310  6E5A               	movwf	clearArray@size+1,c
  1319  001312  0E08               	movlw	8
  1320  001314  6E59               	movwf	clearArray@size,c
  1321  001316  EC11  F00D         	call	_clearArray	;wreg free
  1322                           
  1323                           ;pictris.c: 1058:     clearArray(BackgroundData, 8);
  1324  00131A  0E18               	movlw	low _BackgroundData
  1325  00131C  6E57               	movwf	clearArray@pArray,c
  1326  00131E  0E00               	movlw	high _BackgroundData
  1327  001320  6E58               	movwf	clearArray@pArray+1,c
  1328  001322  0E00               	movlw	0
  1329  001324  6E5A               	movwf	clearArray@size+1,c
  1330  001326  0E08               	movlw	8
  1331  001328  6E59               	movwf	clearArray@size,c
  1332  00132A  EC11  F00D         	call	_clearArray	;wreg free
  1333                           
  1334                           ;pictris.c: 1062:     OriginX = 0;
  1335  00132E  0E00               	movlw	0
  1336  001330  6E0F               	movwf	_OriginX,c
  1337                           
  1338                           ;pictris.c: 1063:     OriginY = 0;
  1339  001332  0E00               	movlw	0
  1340  001334  6E0E               	movwf	_OriginY,c
  1341                           
  1342                           ;pictris.c: 1065:     NumberOfLines = 0;
  1343  001336  0E00               	movlw	0
  1344  001338  6E15               	movwf	_NumberOfLines,c
  1345                           
  1346                           ;pictris.c: 1066:     LastHighScore = 0;
  1347  00133A  0E00               	movlw	0
  1348  00133C  6E14               	movwf	_LastHighScore,c
  1349                           
  1350                           ;pictris.c: 1068:     DropObject = 0;
  1351  00133E  0E00               	movlw	0
  1352  001340  6E10               	movwf	_DropObject,c	;volatile
  1353                           
  1354                           ;pictris.c: 1069:     EndOfGame = 0;
  1355  001342  0E00               	movlw	0
  1356  001344  6E12               	movwf	_EndOfGame,c
  1357                           
  1358                           ;pictris.c: 1070:     CheckForNewLines = 0;
  1359  001346  0E00               	movlw	0
  1360  001348  6E11               	movwf	_CheckForNewLines,c
  1361                           
  1362                           ;pictris.c: 1072:     mS = 0;
  1363  00134A  0E00               	movlw	0
  1364  00134C  6E04               	movwf	_mS+1,c	;volatile
  1365  00134E  0E00               	movlw	0
  1366  001350  6E03               	movwf	_mS,c	;volatile
  1367                           
  1368                           ;pictris.c: 1080:     mtxButtons = 1;
  1369  001352  0E01               	movlw	1
  1370  001354  6E17               	movwf	_mtxButtons,c	;volatile
  1371                           
  1372                           ;pictris.c: 1082:     Left_Delay = -1;
  1373  001356  683E               	setf	_Left_Delay,c	;volatile
  1374  001358  683F               	setf	_Left_Delay+1,c	;volatile
  1375                           
  1376                           ;pictris.c: 1083:     Left_Debounced = 0;
  1377  00135A  0E00               	movlw	0
  1378  00135C  6E44               	movwf	_Left_Debounced,c	;volatile
  1379                           
  1380                           ;pictris.c: 1086:     Right_Delay = -1;
  1381  00135E  683C               	setf	_Right_Delay,c	;volatile
  1382  001360  683D               	setf	_Right_Delay+1,c	;volatile
  1383                           
  1384                           ;pictris.c: 1087:     Right_Debounced = 0;
  1385  001362  0E00               	movlw	0
  1386  001364  6E43               	movwf	_Right_Debounced,c	;volatile
  1387                           
  1388                           ;pictris.c: 1090:     Rotate_Delay = -1;
  1389  001366  683A               	setf	_Rotate_Delay,c	;volatile
  1390  001368  683B               	setf	_Rotate_Delay+1,c	;volatile
  1391                           
  1392                           ;pictris.c: 1091:     Rotate_Debounced = 0;
  1393  00136A  0E00               	movlw	0
  1394  00136C  6E42               	movwf	_Rotate_Debounced,c	;volatile
  1395                           
  1396                           ;pictris.c: 1094:     Down_Delay = -1;
  1397  00136E  6838               	setf	_Down_Delay,c	;volatile
  1398  001370  6839               	setf	_Down_Delay+1,c	;volatile
  1399                           
  1400                           ;pictris.c: 1095:     Down_Debounced = 0;
  1401  001372  0E00               	movlw	0
  1402  001374  6E41               	movwf	_Down_Debounced,c	;volatile
  1403                           
  1404                           ;pictris.c: 1098:     moveSnake = 0;
  1405  001376  0E00               	movlw	0
  1406  001378  6E0C               	movwf	_moveSnake,c
  1407                           
  1408                           ;pictris.c: 1100:     snakeLength = 3;
  1409  00137A  0E03               	movlw	3
  1410  00137C  6E0B               	movwf	_snakeLength,c
  1411                           
  1412                           ;pictris.c: 1101:     previous_direction = 1;
  1413  00137E  0E01               	movlw	1
  1414  001380  6E08               	movwf	_previous_direction,c
  1415                           
  1416                           ;pictris.c: 1102:     uint8_t i;;pictris.c: 1103:     for (i=0;i<4;i++){
  1417  001382  0E00               	movlw	0
  1418  001384  6E60               	movwf	initialise_globals@i,c
  1419  001386                     l4057:
  1420  001386  0E03               	movlw	3
  1421  001388  6460               	cpfsgt	initialise_globals@i,c
  1422  00138A  D001               	goto	l396
  1423  00138C  D01C               	goto	u4530
  1424  00138E                     l396:
  1425                           
  1426                           ;pictris.c: 1104:         positions[i].y = 3;
  1427  00138E  5060               	movf	initialise_globals@i,w,c
  1428  001390  0D02               	mullw	2
  1429  001392  0E01               	movlw	1
  1430  001394  26F3               	addwf	prodl,f,c
  1431  001396  0E00               	movlw	0
  1432  001398  22F4               	addwfc	prodh,f,c
  1433  00139A  0E00               	movlw	low _positions
  1434  00139C  24F3               	addwf	prodl,w,c
  1435  00139E  6ED9               	movwf	fsr2l,c
  1436  0013A0  0E01               	movlw	high _positions
  1437  0013A2  20F4               	addwfc	prodh,w,c
  1438  0013A4  6EDA               	movwf	fsr2h,c
  1439  0013A6  0E03               	movlw	3
  1440  0013A8  6EDF               	movwf	indf2,c
  1441                           
  1442                           ;pictris.c: 1105:         positions[i].x = 4-i;
  1443  0013AA  5060               	movf	initialise_globals@i,w,c
  1444  0013AC  0D02               	mullw	2
  1445  0013AE  0E00               	movlw	low _positions
  1446  0013B0  24F3               	addwf	prodl,w,c
  1447  0013B2  6ED9               	movwf	fsr2l,c
  1448  0013B4  0E01               	movlw	high _positions
  1449  0013B6  20F4               	addwfc	prodh,w,c
  1450  0013B8  6EDA               	movwf	fsr2h,c
  1451  0013BA  5060               	movf	initialise_globals@i,w,c
  1452  0013BC  0800               	sublw	0
  1453  0013BE  0F04               	addlw	4
  1454  0013C0  6EDF               	movwf	indf2,c
  1455                           
  1456                           ;pictris.c: 1106:     }
  1457  0013C2  2A60               	incf	initialise_globals@i,f,c
  1458  0013C4  D7E0               	goto	l4057
  1459  0013C6                     u4530:
  1460                           
  1461                           ;pictris.c: 1107:     positions[0].y = 3;
  1462  0013C6  0E03               	movlw	3
  1463  0013C8  0101               	movlb	1	; () banked
  1464  0013CA  6F01               	movwf	(_positions+1)& (0+255),b
  1465                           
  1466                           ;pictris.c: 1108:     positions[0].x = 3;
  1467  0013CC  0E03               	movlw	3
  1468  0013CE  6F00               	movwf	_positions& (0+255),b
  1469                           
  1470                           ;pictris.c: 1109:     direction = 1;
  1471  0013D0  0E01               	movlw	1
  1472  0013D2  6E0D               	movwf	_direction,c
  1473                           
  1474                           ; BSR set to: 1
  1475                           ;pictris.c: 1110:     CreateBerry();
  1476  0013D4  EC07  F00C         	call	_CreateBerry	;wreg free
  1477                           
  1478                           ;pictris.c: 1111:     tetris = 0;
  1479  0013D8  0E00               	movlw	0
  1480  0013DA  6E07               	movwf	_tetris,c
  1481                           
  1482                           ;pictris.c: 1112:     moveSnake = 0;
  1483  0013DC  0E00               	movlw	0
  1484  0013DE  6E0C               	movwf	_moveSnake,c
  1485  0013E0  0012               	return		;funcret
  1486  0013E2                     __end_of_initialise_globals:
  1487                           	opt stack 0
  1488                           tblptru	equ	0xFF8
  1489                           tblptrh	equ	0xFF7
  1490                           tblptrl	equ	0xFF6
  1491                           tablat	equ	0xFF5
  1492                           prodh	equ	0xFF4
  1493                           prodl	equ	0xFF3
  1494                           postinc0	equ	0xFEE
  1495                           wreg	equ	0xFE8
  1496                           postdec1	equ	0xFE5
  1497                           fsr1l	equ	0xFE1
  1498                           indf2	equ	0xFDF
  1499                           fsr2h	equ	0xFDA
  1500                           fsr2l	equ	0xFD9
  1501                           status	equ	0xFD8
  1502                           
  1503 ;; *************** function _checkForLines *****************
  1504 ;; Defined at:
  1505 ;;		line 993 in file "pictris.c"
  1506 ;; Parameters:    Size  Location     Type
  1507 ;;  pObject         2   35[COMRAM] PTR volatile unsigned sh
  1508 ;;		 -> BackgroundData(16), 
  1509 ;; Auto vars:     Size  Location     Type
  1510 ;;  y               1    7[BANK0 ] unsigned char 
  1511 ;;  x               1    6[BANK0 ] unsigned char 
  1512 ;;  pixels          1    5[BANK0 ] unsigned char 
  1513 ;; Return value:  Size  Location     Type
  1514 ;;                  1    wreg      void 
  1515 ;; Registers used:
  1516 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1517 ;; Tracked objects:
  1518 ;;		On entry : 0/0
  1519 ;;		On exit  : 0/0
  1520 ;;		Unchanged: 0/0
  1521 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1522 ;;      Params:         2       0       0       0       0       0       0
  1523 ;;      Locals:         0       3       0       0       0       0       0
  1524 ;;      Temps:          0       5       0       0       0       0       0
  1525 ;;      Totals:         2       8       0       0       0       0       0
  1526 ;;Total ram usage:       10 bytes
  1527 ;; Hardware stack levels used:    1
  1528 ;; Hardware stack levels required when called:    3
  1529 ;; This function calls:
  1530 ;;		_removeLine
  1531 ;; This function is called by:
  1532 ;;		_mainGameLoop
  1533 ;; This function uses a non-reentrant model
  1534 ;;
  1535                           
  1536                           	psect	text5
  1537  001536                     __ptext5:
  1538                           	opt stack 0
  1539  001536                     _checkForLines:
  1540                           	opt stack 26
  1541                           
  1542                           ;pictris.c: 993: void checkForLines(volatile uint16_t * pObject);pictris.c: 994: {;pictr
      +                          is.c: 995:     byte x, y, pixels;;pictris.c: 997:     for (y = 0; y < 16; y++)
  1543                           
  1544                           ;incstack = 0
  1545  001536  0E00               	movlw	0
  1546  001538  0100               	movlb	0	; () banked
  1547  00153A  6FA7               	movwf	checkForLines@y& (0+255),b
  1548  00153C                     l3987:
  1549                           
  1550                           ; BSR set to: 0
  1551  00153C  0E0F               	movlw	15
  1552  00153E  65A7               	cpfsgt	checkForLines@y& (0+255),b
  1553  001540  D001               	goto	l381
  1554  001542  0012               	return	
  1555  001544                     l381:
  1556                           
  1557                           ; BSR set to: 0
  1558                           ;pictris.c: 998:     {;pictris.c: 999:         pixels = 0;
  1559                           
  1560                           ; BSR set to: 0
  1561  001544  0E00               	movlw	0
  1562  001546  6FA5               	movwf	checkForLines@pixels& (0+255),b
  1563                           
  1564                           ;pictris.c: 1000:         for (x = 0; x < 8; x++)
  1565  001548  0E00               	movlw	0
  1566  00154A  6FA6               	movwf	checkForLines@x& (0+255),b
  1567  00154C                     l3993:
  1568                           
  1569                           ; BSR set to: 0
  1570  00154C  0E07               	movlw	7
  1571  00154E  65A6               	cpfsgt	checkForLines@x& (0+255),b
  1572  001550  D001               	goto	l383
  1573  001552  D024               	goto	u4490
  1574  001554                     l383:
  1575                           
  1576                           ; BSR set to: 0
  1577                           ;pictris.c: 1001:             if (pObject[x] & (1<<y))
  1578                           
  1579                           ; BSR set to: 0
  1580  001554  51A6               	movf	checkForLines@x& (0+255),w,b
  1581  001556  0D02               	mullw	2
  1582  001558  50F3               	movf	prodl,w,c
  1583  00155A  2468               	addwf	checkForLines@pObject,w,c
  1584  00155C  6ED9               	movwf	fsr2l,c
  1585  00155E  50F4               	movf	prodh,w,c
  1586  001560  2069               	addwfc	checkForLines@pObject+1,w,c
  1587  001562  6EDA               	movwf	fsr2h,c
  1588  001564  CFDE F0A0          	movff	postinc2,??_checkForLines
  1589  001568  CFDD F0A1          	movff	postdec2,??_checkForLines+1
  1590  00156C  C0A7  F0A2         	movff	checkForLines@y,??_checkForLines+2
  1591  001570  0E01               	movlw	1
  1592  001572  6FA3               	movwf	(??_checkForLines+3)& (0+255),b
  1593  001574  0E00               	movlw	0
  1594  001576  6FA4               	movwf	(??_checkForLines+4)& (0+255),b
  1595  001578  2BA2               	incf	(??_checkForLines+2)& (0+255),f,b
  1596  00157A  D003               	goto	u4474
  1597  00157C                     u4475:
  1598  00157C  90D8               	bcf	status,0,c
  1599  00157E  37A3               	rlcf	(??_checkForLines+3)& (0+255),f,b
  1600  001580  37A4               	rlcf	(??_checkForLines+4)& (0+255),f,b
  1601  001582                     u4474:
  1602  001582  2FA2               	decfsz	(??_checkForLines+2)& (0+255),f,b
  1603  001584  D7FB               	goto	u4475
  1604  001586  0100               	movlb	0	; () banked
  1605  001588  51A0               	movf	??_checkForLines& (0+255),w,b
  1606  00158A  17A3               	andwf	(??_checkForLines+3)& (0+255),f,b
  1607  00158C  51A1               	movf	(??_checkForLines+1)& (0+255),w,b
  1608  00158E  17A4               	andwf	(??_checkForLines+4)& (0+255),f,b
  1609  001590  51A3               	movf	(??_checkForLines+3)& (0+255),w,b
  1610  001592  11A4               	iorwf	(??_checkForLines+4)& (0+255),w,b
  1611  001594  A4D8               	btfss	status,2,c
  1612                           
  1613                           ; BSR set to: 0
  1614                           ;pictris.c: 1002:                 pixels++;
  1615  001596  2BA5               	incf	checkForLines@pixels& (0+255),f,b
  1616                           
  1617                           ; BSR set to: 0
  1618  001598  2BA6               	incf	checkForLines@x& (0+255),f,b
  1619  00159A  D7D8               	goto	l3993
  1620  00159C                     u4490:
  1621                           
  1622                           ; BSR set to: 0
  1623                           ;pictris.c: 1003:         if (pixels == 8)
  1624                           
  1625                           ; BSR set to: 0
  1626  00159C  0E08               	movlw	8
  1627  00159E  19A5               	xorwf	checkForLines@pixels& (0+255),w,b
  1628  0015A0  A4D8               	btfss	status,2,c
  1629  0015A2  D009               	goto	l386
  1630                           
  1631                           ; BSR set to: 0
  1632                           ;pictris.c: 1004:         {;pictris.c: 1005:             removeLine(pObject, y);
  1633  0015A4  C068  F057         	movff	checkForLines@pObject,removeLine@pObject
  1634  0015A8  C069  F058         	movff	checkForLines@pObject+1,removeLine@pObject+1
  1635  0015AC  C0A7  F059         	movff	checkForLines@y,removeLine@pY
  1636  0015B0  EC2B  F008         	call	_removeLine	;wreg free
  1637                           
  1638                           ;pictris.c: 1006:             NumberOfLines++;
  1639  0015B4  2A15               	incf	_NumberOfLines,f,c
  1640  0015B6                     l386:
  1641                           
  1642                           ;pictris.c: 1008:     }
  1643  0015B6  0100               	movlb	0	; () banked
  1644  0015B8  2BA7               	incf	checkForLines@y& (0+255),f,b
  1645  0015BA  D7C0               	goto	l3987
  1646  0015BC                     __end_of_checkForLines:
  1647                           	opt stack 0
  1648                           tblptru	equ	0xFF8
  1649                           tblptrh	equ	0xFF7
  1650                           tblptrl	equ	0xFF6
  1651                           tablat	equ	0xFF5
  1652                           prodh	equ	0xFF4
  1653                           prodl	equ	0xFF3
  1654                           postinc0	equ	0xFEE
  1655                           wreg	equ	0xFE8
  1656                           postdec1	equ	0xFE5
  1657                           fsr1l	equ	0xFE1
  1658                           indf2	equ	0xFDF
  1659                           postinc2	equ	0xFDE
  1660                           postdec2	equ	0xFDD
  1661                           fsr2h	equ	0xFDA
  1662                           fsr2l	equ	0xFD9
  1663                           status	equ	0xFD8
  1664                           
  1665 ;; *************** function _removeLine *****************
  1666 ;; Defined at:
  1667 ;;		line 975 in file "pictris.c"
  1668 ;; Parameters:    Size  Location     Type
  1669 ;;  pObject         2   18[COMRAM] PTR volatile unsigned sh
  1670 ;;		 -> BackgroundData(16), 
  1671 ;;  pY              1   20[COMRAM] unsigned char 
  1672 ;; Auto vars:     Size  Location     Type
  1673 ;;  x               1   34[COMRAM] unsigned char 
  1674 ;;  y               1   33[COMRAM] unsigned char 
  1675 ;;  currentLine     1   32[COMRAM] unsigned char 
  1676 ;; Return value:  Size  Location     Type
  1677 ;;                  1    wreg      void 
  1678 ;; Registers used:
  1679 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  1680 ;; Tracked objects:
  1681 ;;		On entry : 0/0
  1682 ;;		On exit  : 0/0
  1683 ;;		Unchanged: 0/0
  1684 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1685 ;;      Params:         3       0       0       0       0       0       0
  1686 ;;      Locals:         3       0       0       0       0       0       0
  1687 ;;      Temps:         11       0       0       0       0       0       0
  1688 ;;      Totals:        17       0       0       0       0       0       0
  1689 ;;Total ram usage:       17 bytes
  1690 ;; Hardware stack levels used:    1
  1691 ;; Hardware stack levels required when called:    2
  1692 ;; This function calls:
  1693 ;;		Nothing
  1694 ;; This function is called by:
  1695 ;;		_checkForLines
  1696 ;; This function uses a non-reentrant model
  1697 ;;
  1698                           
  1699                           	psect	text6
  1700  001056                     __ptext6:
  1701                           	opt stack 0
  1702  001056                     _removeLine:
  1703                           	opt stack 26
  1704                           
  1705                           ;pictris.c: 975: void removeLine(volatile uint16_t * pObject, byte pY);pictris.c: 976: {
      +                          ;pictris.c: 977:     byte x, y, currentLine;;pictris.c: 980:     for (y = pY-1; y < pY; 
      +                          y--)
  1706                           
  1707                           ; BSR set to: 0
  1708                           ;incstack = 0
  1709  001056  0459               	decf	removeLine@pY,w,c
  1710  001058  6E66               	movwf	removeLine@y,c
  1711  00105A  D05E               	goto	l371
  1712  00105C                     
  1713                           ;pictris.c: 981:     {;pictris.c: 982:         currentLine = y + 1;
  1714  00105C  2866               	incf	removeLine@y,w,c
  1715  00105E  6E65               	movwf	removeLine@currentLine,c
  1716                           
  1717                           ;pictris.c: 983:         for (x = 0; x < 8; x++)
  1718  001060  0E00               	movlw	0
  1719  001062  6E67               	movwf	removeLine@x,c
  1720  001064                     l3803:
  1721  001064  0E07               	movlw	7
  1722  001066  6467               	cpfsgt	removeLine@x,c
  1723  001068  D001               	goto	l373
  1724  00106A  D055               	goto	u4120
  1725  00106C                     l373:
  1726                           
  1727                           ;pictris.c: 984:             pObject[x] = (pObject[x] & ~(1<<currentLine)) | ((((pObject
      +                          [x] >> y) & 1)&1)<<currentLine);
  1728  00106C  C065  F05A         	movff	removeLine@currentLine,??_removeLine
  1729  001070  C066  F05B         	movff	removeLine@y,??_removeLine+1
  1730  001074  5067               	movf	removeLine@x,w,c
  1731  001076  0D02               	mullw	2
  1732  001078  50F3               	movf	prodl,w,c
  1733  00107A  2457               	addwf	removeLine@pObject,w,c
  1734  00107C  6ED9               	movwf	fsr2l,c
  1735  00107E  50F4               	movf	prodh,w,c
  1736  001080  2058               	addwfc	removeLine@pObject+1,w,c
  1737  001082  6EDA               	movwf	fsr2h,c
  1738  001084  CFDE F05C          	movff	postinc2,??_removeLine+2
  1739  001088  CFDD F05D          	movff	postdec2,??_removeLine+3
  1740  00108C  2A5B               	incf	??_removeLine+1,f,c
  1741  00108E  D003               	goto	u4094
  1742  001090                     u4095:
  1743  001090  90D8               	bcf	status,0,c
  1744  001092  325D               	rrcf	??_removeLine+3,f,c
  1745  001094  325C               	rrcf	??_removeLine+2,f,c
  1746  001096                     u4094:
  1747  001096  2E5B               	decfsz	??_removeLine+1,f,c
  1748  001098  D7FB               	goto	u4095
  1749  00109A  0E01               	movlw	1
  1750  00109C  165C               	andwf	??_removeLine+2,f,c
  1751  00109E  0E00               	movlw	0
  1752  0010A0  165D               	andwf	??_removeLine+3,f,c
  1753  0010A2  2A5A               	incf	??_removeLine,f,c
  1754  0010A4  D003               	goto	u4104
  1755  0010A6                     u4105:
  1756  0010A6  90D8               	bcf	status,0,c
  1757  0010A8  365C               	rlcf	??_removeLine+2,f,c
  1758  0010AA  365D               	rlcf	??_removeLine+3,f,c
  1759  0010AC                     u4104:
  1760  0010AC  2E5A               	decfsz	??_removeLine,f,c
  1761  0010AE  D7FB               	goto	u4105
  1762  0010B0  5067               	movf	removeLine@x,w,c
  1763  0010B2  0D02               	mullw	2
  1764  0010B4  50F3               	movf	prodl,w,c
  1765  0010B6  2457               	addwf	removeLine@pObject,w,c
  1766  0010B8  6ED9               	movwf	fsr2l,c
  1767  0010BA  50F4               	movf	prodh,w,c
  1768  0010BC  2058               	addwfc	removeLine@pObject+1,w,c
  1769  0010BE  6EDA               	movwf	fsr2h,c
  1770  0010C0  CFDE F05E          	movff	postinc2,??_removeLine+4
  1771  0010C4  CFDD F05F          	movff	postdec2,??_removeLine+5
  1772  0010C8  C065  F060         	movff	removeLine@currentLine,??_removeLine+6
  1773  0010CC  0E01               	movlw	1
  1774  0010CE  6E61               	movwf	(??_removeLine+7)& (0+255),c
  1775  0010D0  0E00               	movlw	0
  1776  0010D2  6E62               	movwf	(??_removeLine+8)& (0+255),c
  1777  0010D4  2A60               	incf	??_removeLine+6,f,c
  1778  0010D6  D003               	goto	u4114
  1779  0010D8                     u4115:
  1780  0010D8  90D8               	bcf	status,0,c
  1781  0010DA  3661               	rlcf	??_removeLine+7,f,c
  1782  0010DC  3662               	rlcf	??_removeLine+8,f,c
  1783  0010DE                     u4114:
  1784  0010DE  2E60               	decfsz	??_removeLine+6,f,c
  1785  0010E0  D7FB               	goto	u4115
  1786  0010E2  1C61               	comf	??_removeLine+7,w,c
  1787  0010E4  6E63               	movwf	(??_removeLine+9)& (0+255),c
  1788  0010E6  1C62               	comf	??_removeLine+8,w,c
  1789  0010E8  6E64               	movwf	(??_removeLine+10)& (0+255),c
  1790  0010EA  505E               	movf	??_removeLine+4,w,c
  1791  0010EC  1663               	andwf	??_removeLine+9,f,c
  1792  0010EE  505F               	movf	??_removeLine+5,w,c
  1793  0010F0  1664               	andwf	??_removeLine+10,f,c
  1794  0010F2  505C               	movf	??_removeLine+2,w,c
  1795  0010F4  1263               	iorwf	??_removeLine+9,f,c
  1796  0010F6  505D               	movf	??_removeLine+3,w,c
  1797  0010F8  1264               	iorwf	??_removeLine+10,f,c
  1798  0010FA  5067               	movf	removeLine@x,w,c
  1799  0010FC  0D02               	mullw	2
  1800  0010FE  50F3               	movf	prodl,w,c
  1801  001100  2457               	addwf	removeLine@pObject,w,c
  1802  001102  6ED9               	movwf	fsr2l,c
  1803  001104  50F4               	movf	prodh,w,c
  1804  001106  2058               	addwfc	removeLine@pObject+1,w,c
  1805  001108  6EDA               	movwf	fsr2h,c
  1806  00110A  C063  FFDE         	movff	??_removeLine+9,postinc2
  1807  00110E  C064  FFDD         	movff	??_removeLine+10,postdec2
  1808  001112  2A67               	incf	removeLine@x,f,c
  1809  001114  D7A7               	goto	l3803
  1810  001116                     u4120:
  1811                           
  1812                           ;pictris.c: 986:     }
  1813  001116  0666               	decf	removeLine@y,f,c
  1814  001118                     l371:
  1815  001118  5059               	movf	removeLine@pY,w,c
  1816  00111A  5C66               	subwf	removeLine@y,w,c
  1817  00111C  A0D8               	btfss	status,0,c
  1818  00111E  D79E               	goto	l372
  1819                           
  1820                           ;pictris.c: 988:     for (x = 0; x < 8; x++)
  1821  001120  0E00               	movlw	0
  1822  001122  6E67               	movwf	removeLine@x,c
  1823  001124                     l3819:
  1824  001124  0E07               	movlw	7
  1825  001126  6467               	cpfsgt	removeLine@x,c
  1826  001128  D001               	goto	l376
  1827  00112A  0012               	return	
  1828  00112C                     l376:
  1829                           
  1830                           ;pictris.c: 989:         pObject[x] &= ~(1<<0);
  1831  00112C  5067               	movf	removeLine@x,w,c
  1832  00112E  0D02               	mullw	2
  1833  001130  50F3               	movf	prodl,w,c
  1834  001132  2457               	addwf	removeLine@pObject,w,c
  1835  001134  6ED9               	movwf	fsr2l,c
  1836  001136  50F4               	movf	prodh,w,c
  1837  001138  2058               	addwfc	removeLine@pObject+1,w,c
  1838  00113A  6EDA               	movwf	fsr2h,c
  1839  00113C  0EFE               	movlw	254
  1840  00113E  16DE               	andwf	postinc2,f,c
  1841  001140  0EFF               	movlw	255
  1842  001142  16DD               	andwf	postdec2,f,c
  1843  001144  2A67               	incf	removeLine@x,f,c
  1844  001146  D7EE               	goto	l3819
  1845  001148                     __end_of_removeLine:
  1846                           	opt stack 0
  1847                           tblptru	equ	0xFF8
  1848                           tblptrh	equ	0xFF7
  1849                           tblptrl	equ	0xFF6
  1850                           tablat	equ	0xFF5
  1851                           prodh	equ	0xFF4
  1852                           prodl	equ	0xFF3
  1853                           postinc0	equ	0xFEE
  1854                           wreg	equ	0xFE8
  1855                           postdec1	equ	0xFE5
  1856                           fsr1l	equ	0xFE1
  1857                           indf2	equ	0xFDF
  1858                           postinc2	equ	0xFDE
  1859                           postdec2	equ	0xFDD
  1860                           fsr2h	equ	0xFDA
  1861                           fsr2l	equ	0xFD9
  1862                           status	equ	0xFD8
  1863                           
  1864 ;; *************** function _checkButtons *****************
  1865 ;; Defined at:
  1866 ;;		line 860 in file "pictris.c"
  1867 ;; Parameters:    Size  Location     Type
  1868 ;;		None
  1869 ;; Auto vars:     Size  Location     Type
  1870 ;;		None
  1871 ;; Return value:  Size  Location     Type
  1872 ;;                  1    wreg      void 
  1873 ;; Registers used:
  1874 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1875 ;; Tracked objects:
  1876 ;;		On entry : 0/0
  1877 ;;		On exit  : 0/0
  1878 ;;		Unchanged: 0/0
  1879 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1880 ;;      Params:         0       0       0       0       0       0       0
  1881 ;;      Locals:         0       0       0       0       0       0       0
  1882 ;;      Temps:          0       1       0       0       0       0       0
  1883 ;;      Totals:         0       1       0       0       0       0       0
  1884 ;;Total ram usage:        1 bytes
  1885 ;; Hardware stack levels used:    1
  1886 ;; Hardware stack levels required when called:    5
  1887 ;; This function calls:
  1888 ;;		_checkForLeftWall
  1889 ;;		_checkForRightWall
  1890 ;;		_collisionDetect
  1891 ;;		_memcpy
  1892 ;;		_mergeObjects
  1893 ;;		_moveObject
  1894 ;;		_moveObjectDown
  1895 ;;		_newRotation
  1896 ;;		_pauseButtons
  1897 ;;		_pauseMultiplexing
  1898 ;;		_pixelCount
  1899 ;;		_resumeButtons
  1900 ;;		_resumeMultiplexing
  1901 ;; This function is called by:
  1902 ;;		_mainGameLoop
  1903 ;; This function uses a non-reentrant model
  1904 ;;
  1905                           
  1906                           	psect	text7
  1907  0006D2                     __ptext7:
  1908                           	opt stack 0
  1909  0006D2                     _checkButtons:
  1910                           	opt stack 24
  1911                           
  1912                           ;pictris.c: 863:     if (Left_Debounced)
  1913                           
  1914                           ;incstack = 0
  1915  0006D2  5044               	movf	_Left_Debounced,w,c	;volatile
  1916  0006D4  B4D8               	btfsc	status,2,c
  1917  0006D6  D04D               	goto	l354
  1918                           
  1919                           ;pictris.c: 864:     {;pictris.c: 865:     pauseButtons();
  1920  0006D8  EC98  F00D         	call	_pauseButtons	;wreg free
  1921                           
  1922                           ;pictris.c: 866:         Left_Debounced = 0;
  1923  0006DC  0E00               	movlw	0
  1924  0006DE  6E44               	movwf	_Left_Debounced,c	;volatile
  1925                           
  1926                           ;pictris.c: 867:         Left_Delay = 500;
  1927  0006E0  0E01               	movlw	1
  1928  0006E2  6E3F               	movwf	_Left_Delay+1,c	;volatile
  1929  0006E4  0EF4               	movlw	244
  1930  0006E6  6E3E               	movwf	_Left_Delay,c	;volatile
  1931                           
  1932                           ;pictris.c: 868:     resumeButtons();
  1933  0006E8  EC95  F00D         	call	_resumeButtons	;wreg free
  1934                           
  1935                           ;pictris.c: 871:     if (tetris == 1){
  1936  0006EC  0407               	decf	_tetris,w,c
  1937  0006EE  A4D8               	btfss	status,2,c
  1938  0006F0  D040               	goto	l354
  1939                           
  1940                           ;pictris.c: 872:         if (!checkForLeftWall(ObjectData))
  1941  0006F2  0E28               	movlw	low _ObjectData
  1942  0006F4  6E57               	movwf	checkForLeftWall@pObject,c
  1943  0006F6  0E00               	movlw	high _ObjectData
  1944  0006F8  6E58               	movwf	checkForLeftWall@pObject+1,c
  1945  0006FA  EC67  F00D         	call	_checkForLeftWall	;wreg free
  1946  0006FE  0900               	iorlw	0
  1947  000700  A4D8               	btfss	status,2,c
  1948  000702  D037               	goto	l354
  1949                           
  1950                           ;pictris.c: 873:         {;pictris.c: 876:             memcpy(tmpObjectData, ObjectData,
      +                           16);
  1951  000704  0E80               	movlw	low _tmpObjectData
  1952  000706  6E57               	movwf	memcpy@dest,c
  1953  000708  0E00               	movlw	high _tmpObjectData
  1954  00070A  6E58               	movwf	memcpy@dest+1,c
  1955  00070C  0E28               	movlw	low _ObjectData
  1956  00070E  6E59               	movwf	memcpy@src,c
  1957  000710  0E00               	movlw	high _ObjectData
  1958  000712  6E5A               	movwf	memcpy@src+1,c
  1959  000714  0E00               	movlw	0
  1960  000716  6E5C               	movwf	memcpy@n+1,c
  1961  000718  0E10               	movlw	16
  1962  00071A  6E5B               	movwf	memcpy@n,c
  1963  00071C  EC67  F00C         	call	_memcpy	;wreg free
  1964                           
  1965                           ;pictris.c: 878:             moveObject(tmpObjectData, LEFT, 1);
  1966  000720  0E80               	movlw	low _tmpObjectData
  1967  000722  6E57               	movwf	moveObject@pObject,c
  1968  000724  0E00               	movlw	high _tmpObjectData
  1969  000726  6E58               	movwf	moveObject@pObject+1,c
  1970  000728  0E02               	movlw	2
  1971  00072A  6E59               	movwf	moveObject@direction,c
  1972  00072C  0E01               	movlw	1
  1973  00072E  6E5A               	movwf	moveObject@cycles,c
  1974  000730  EC2C  F006         	call	_moveObject	;wreg free
  1975                           
  1976                           ;pictris.c: 880:             if (!collisionDetect(tmpObjectData, BackgroundData))
  1977  000734  0E80               	movlw	low _tmpObjectData
  1978  000736  6E57               	movwf	collisionDetect@pSource,c
  1979  000738  0E00               	movlw	high _tmpObjectData
  1980  00073A  6E58               	movwf	collisionDetect@pSource+1,c
  1981  00073C  0E18               	movlw	low _BackgroundData
  1982  00073E  6E59               	movwf	collisionDetect@pTarget,c
  1983  000740  0E00               	movlw	high _BackgroundData
  1984  000742  6E5A               	movwf	collisionDetect@pTarget+1,c
  1985  000744  EC3B  F00C         	call	_collisionDetect	;wreg free
  1986  000748  0900               	iorlw	0
  1987  00074A  A4D8               	btfss	status,2,c
  1988  00074C  D012               	goto	l354
  1989                           
  1990                           ;pictris.c: 881:             {;pictris.c: 884:                 pauseMultiplexing();
  1991  00074E  EC7B  F00D         	call	_pauseMultiplexing	;wreg free
  1992                           
  1993                           ;pictris.c: 887:                 mergeObjects(tmpObjectData, ObjectData, OVERRIDE);
  1994  000752  0E80               	movlw	low _tmpObjectData
  1995  000754  6E57               	movwf	mergeObjects@pSource,c
  1996  000756  0E00               	movlw	high _tmpObjectData
  1997  000758  6E58               	movwf	mergeObjects@pSource+1,c
  1998  00075A  0E28               	movlw	low _ObjectData
  1999  00075C  6E59               	movwf	mergeObjects@pTarget,c
  2000  00075E  0E00               	movlw	high _ObjectData
  2001  000760  6E5A               	movwf	mergeObjects@pTarget+1,c
  2002  000762  0E00               	movlw	0
  2003  000764  6E5B               	movwf	mergeObjects@mode,c
  2004  000766  EC14  F009         	call	_mergeObjects	;wreg free
  2005                           
  2006                           ;pictris.c: 890:                 resumeMultiplexing();
  2007  00076A  EC9B  F00D         	call	_resumeMultiplexing	;wreg free
  2008                           
  2009                           ;pictris.c: 893:                 CheckForNewLines = 1;
  2010  00076E  0E01               	movlw	1
  2011  000770  6E11               	movwf	_CheckForNewLines,c
  2012  000772                     l354:
  2013                           
  2014                           ;pictris.c: 900:     if (Right_Debounced)
  2015                           
  2016                           ;pictris.c: 897:     }
  2017                           
  2018                           ;pictris.c: 896:     }
  2019                           
  2020                           ;pictris.c: 895:         }
  2021  000772  5043               	movf	_Right_Debounced,w,c	;volatile
  2022  000774  B4D8               	btfsc	status,2,c
  2023  000776  D04B               	goto	l358
  2024                           
  2025                           ;pictris.c: 901:     {;pictris.c: 902:     pauseButtons();
  2026  000778  EC98  F00D         	call	_pauseButtons	;wreg free
  2027                           
  2028                           ;pictris.c: 903:         Right_Debounced = 0;
  2029  00077C  0E00               	movlw	0
  2030  00077E  6E43               	movwf	_Right_Debounced,c	;volatile
  2031                           
  2032                           ;pictris.c: 904:         Right_Delay = 500;
  2033  000780  0E01               	movlw	1
  2034  000782  6E3D               	movwf	_Right_Delay+1,c	;volatile
  2035  000784  0EF4               	movlw	244
  2036  000786  6E3C               	movwf	_Right_Delay,c	;volatile
  2037                           
  2038                           ;pictris.c: 905:     resumeButtons();
  2039  000788  EC95  F00D         	call	_resumeButtons	;wreg free
  2040                           
  2041                           ;pictris.c: 908:     if (tetris == 1) {
  2042  00078C  0407               	decf	_tetris,w,c
  2043  00078E  A4D8               	btfss	status,2,c
  2044  000790  D03E               	goto	l358
  2045                           
  2046                           ;pictris.c: 909:         if (!checkForRightWall(ObjectData))
  2047  000792  0E28               	movlw	low _ObjectData
  2048  000794  6E57               	movwf	checkForRightWall@pObject,c
  2049  000796  0E00               	movlw	high _ObjectData
  2050  000798  6E58               	movwf	checkForRightWall@pObject+1,c
  2051  00079A  EC4D  F00D         	call	_checkForRightWall	;wreg free
  2052  00079E  0900               	iorlw	0
  2053  0007A0  A4D8               	btfss	status,2,c
  2054  0007A2  D035               	goto	l358
  2055                           
  2056                           ;pictris.c: 910:         {;pictris.c: 911:             mergeObjects(ObjectData, tmpObjec
      +                          tData, OVERRIDE);
  2057  0007A4  0E28               	movlw	low _ObjectData
  2058  0007A6  6E57               	movwf	mergeObjects@pSource,c
  2059  0007A8  0E00               	movlw	high _ObjectData
  2060  0007AA  6E58               	movwf	mergeObjects@pSource+1,c
  2061  0007AC  0E80               	movlw	low _tmpObjectData
  2062  0007AE  6E59               	movwf	mergeObjects@pTarget,c
  2063  0007B0  0E00               	movlw	high _tmpObjectData
  2064  0007B2  6E5A               	movwf	mergeObjects@pTarget+1,c
  2065  0007B4  0E00               	movlw	0
  2066  0007B6  6E5B               	movwf	mergeObjects@mode,c
  2067  0007B8  EC14  F009         	call	_mergeObjects	;wreg free
  2068                           
  2069                           ;pictris.c: 912:             moveObject(tmpObjectData, RIGHT, 1);
  2070  0007BC  0E80               	movlw	low _tmpObjectData
  2071  0007BE  6E57               	movwf	moveObject@pObject,c
  2072  0007C0  0E00               	movlw	high _tmpObjectData
  2073  0007C2  6E58               	movwf	moveObject@pObject+1,c
  2074  0007C4  0E03               	movlw	3
  2075  0007C6  6E59               	movwf	moveObject@direction,c
  2076  0007C8  0E01               	movlw	1
  2077  0007CA  6E5A               	movwf	moveObject@cycles,c
  2078  0007CC  EC2C  F006         	call	_moveObject	;wreg free
  2079                           
  2080                           ;pictris.c: 914:             if (!collisionDetect(tmpObjectData, BackgroundData))
  2081  0007D0  0E80               	movlw	low _tmpObjectData
  2082  0007D2  6E57               	movwf	collisionDetect@pSource,c
  2083  0007D4  0E00               	movlw	high _tmpObjectData
  2084  0007D6  6E58               	movwf	collisionDetect@pSource+1,c
  2085  0007D8  0E18               	movlw	low _BackgroundData
  2086  0007DA  6E59               	movwf	collisionDetect@pTarget,c
  2087  0007DC  0E00               	movlw	high _BackgroundData
  2088  0007DE  6E5A               	movwf	collisionDetect@pTarget+1,c
  2089  0007E0  EC3B  F00C         	call	_collisionDetect	;wreg free
  2090  0007E4  0900               	iorlw	0
  2091  0007E6  A4D8               	btfss	status,2,c
  2092  0007E8  D012               	goto	l358
  2093                           
  2094                           ;pictris.c: 915:             {;pictris.c: 917:                 pauseMultiplexing();
  2095  0007EA  EC7B  F00D         	call	_pauseMultiplexing	;wreg free
  2096                           
  2097                           ;pictris.c: 919:                 mergeObjects(tmpObjectData, ObjectData, OVERRIDE);
  2098  0007EE  0E80               	movlw	low _tmpObjectData
  2099  0007F0  6E57               	movwf	mergeObjects@pSource,c
  2100  0007F2  0E00               	movlw	high _tmpObjectData
  2101  0007F4  6E58               	movwf	mergeObjects@pSource+1,c
  2102  0007F6  0E28               	movlw	low _ObjectData
  2103  0007F8  6E59               	movwf	mergeObjects@pTarget,c
  2104  0007FA  0E00               	movlw	high _ObjectData
  2105  0007FC  6E5A               	movwf	mergeObjects@pTarget+1,c
  2106  0007FE  0E00               	movlw	0
  2107  000800  6E5B               	movwf	mergeObjects@mode,c
  2108  000802  EC14  F009         	call	_mergeObjects	;wreg free
  2109                           
  2110                           ;pictris.c: 921:                 resumeMultiplexing();
  2111  000806  EC9B  F00D         	call	_resumeMultiplexing	;wreg free
  2112                           
  2113                           ;pictris.c: 923:                 CheckForNewLines = 1;
  2114  00080A  0E01               	movlw	1
  2115  00080C  6E11               	movwf	_CheckForNewLines,c
  2116  00080E                     l358:
  2117                           
  2118                           ;pictris.c: 929:     if (Rotate_Debounced)
  2119                           
  2120                           ;pictris.c: 927:     }
  2121                           
  2122                           ;pictris.c: 926:     }
  2123                           
  2124                           ;pictris.c: 925:         }
  2125  00080E  5042               	movf	_Rotate_Debounced,w,c	;volatile
  2126  000810  B4D8               	btfsc	status,2,c
  2127  000812  D04F               	goto	l362
  2128                           
  2129                           ;pictris.c: 930:     {;pictris.c: 931:     pauseButtons();
  2130  000814  EC98  F00D         	call	_pauseButtons	;wreg free
  2131                           
  2132                           ;pictris.c: 932:         Rotate_Debounced = 0;
  2133  000818  0E00               	movlw	0
  2134  00081A  6E42               	movwf	_Rotate_Debounced,c	;volatile
  2135                           
  2136                           ;pictris.c: 933:         Rotate_Delay = 500;
  2137  00081C  0E01               	movlw	1
  2138  00081E  6E3B               	movwf	_Rotate_Delay+1,c	;volatile
  2139  000820  0EF4               	movlw	244
  2140  000822  6E3A               	movwf	_Rotate_Delay,c	;volatile
  2141                           
  2142                           ;pictris.c: 934:     resumeButtons();
  2143  000824  EC95  F00D         	call	_resumeButtons	;wreg free
  2144                           
  2145                           ;pictris.c: 936:     if (tetris == 1 ){
  2146  000828  0407               	decf	_tetris,w,c
  2147  00082A  A4D8               	btfss	status,2,c
  2148  00082C  D042               	goto	l362
  2149                           
  2150                           ;pictris.c: 937:         newRotation(ObjectData, tmpObjectData, CW);
  2151  00082E  0E28               	movlw	low _ObjectData
  2152  000830  6E63               	movwf	newRotation@pSource,c
  2153  000832  0E00               	movlw	high _ObjectData
  2154  000834  6E64               	movwf	newRotation@pSource+1,c
  2155  000836  0E80               	movlw	low _tmpObjectData
  2156  000838  6E65               	movwf	newRotation@pTarget,c
  2157  00083A  0E00               	movlw	high _tmpObjectData
  2158  00083C  6E66               	movwf	newRotation@pTarget+1,c
  2159  00083E  0E01               	movlw	1
  2160  000840  6E67               	movwf	newRotation@rotation,c
  2161  000842  EC8D  F007         	call	_newRotation	;wreg free
  2162                           
  2163                           ;pictris.c: 939:         if (pixelCount(ObjectData) == pixelCount(tmpObjectData))
  2164  000846  0E28               	movlw	low _ObjectData
  2165  000848  6E57               	movwf	pixelCount@pSource,c
  2166  00084A  0E00               	movlw	high _ObjectData
  2167  00084C  6E58               	movwf	pixelCount@pSource+1,c
  2168  00084E  ECD2  F00B         	call	_pixelCount	;wreg free
  2169  000852  0100               	movlb	0	; () banked
  2170  000854  6FA5               	movwf	??_checkButtons& (0+255),b
  2171  000856  0E80               	movlw	low _tmpObjectData
  2172  000858  6E57               	movwf	pixelCount@pSource,c
  2173  00085A  0E00               	movlw	high _tmpObjectData
  2174  00085C  6E58               	movwf	pixelCount@pSource+1,c
  2175  00085E  ECD2  F00B         	call	_pixelCount	;wreg free
  2176  000862  0100               	movlb	0	; () banked
  2177  000864  19A5               	xorwf	??_checkButtons& (0+255),w,b
  2178  000866  A4D8               	btfss	status,2,c
  2179  000868  D024               	goto	l362
  2180                           
  2181                           ; BSR set to: 0
  2182                           ;pictris.c: 940:         {;pictris.c: 942:             if (!collisionDetect(tmpObjectDat
      +                          a, BackgroundData))
  2183  00086A  0E80               	movlw	low _tmpObjectData
  2184  00086C  6E57               	movwf	collisionDetect@pSource,c
  2185  00086E  0E00               	movlw	high _tmpObjectData
  2186  000870  6E58               	movwf	collisionDetect@pSource+1,c
  2187  000872  0E18               	movlw	low _BackgroundData
  2188  000874  6E59               	movwf	collisionDetect@pTarget,c
  2189  000876  0E00               	movlw	high _BackgroundData
  2190  000878  6E5A               	movwf	collisionDetect@pTarget+1,c
  2191  00087A  EC3B  F00C         	call	_collisionDetect	;wreg free
  2192  00087E  0900               	iorlw	0
  2193  000880  A4D8               	btfss	status,2,c
  2194  000882  D017               	goto	l362
  2195                           
  2196                           ;pictris.c: 943:             {;pictris.c: 947:                 pauseMultiplexing();
  2197  000884  EC7B  F00D         	call	_pauseMultiplexing	;wreg free
  2198                           
  2199                           ;pictris.c: 950:                 mergeObjects(tmpObjectData, ObjectData, OVERRIDE);
  2200  000888  0E80               	movlw	low _tmpObjectData
  2201  00088A  6E57               	movwf	mergeObjects@pSource,c
  2202  00088C  0E00               	movlw	high _tmpObjectData
  2203  00088E  6E58               	movwf	mergeObjects@pSource+1,c
  2204  000890  0E28               	movlw	low _ObjectData
  2205  000892  6E59               	movwf	mergeObjects@pTarget,c
  2206  000894  0E00               	movlw	high _ObjectData
  2207  000896  6E5A               	movwf	mergeObjects@pTarget+1,c
  2208  000898  0E00               	movlw	0
  2209  00089A  6E5B               	movwf	mergeObjects@mode,c
  2210  00089C  EC14  F009         	call	_mergeObjects	;wreg free
  2211                           
  2212                           ;pictris.c: 952:                 resumeMultiplexing();
  2213  0008A0  EC9B  F00D         	call	_resumeMultiplexing	;wreg free
  2214                           
  2215                           ;pictris.c: 954:                 IsRotated = !IsRotated;
  2216  0008A4  5013               	movf	_IsRotated,w,c
  2217  0008A6  A4D8               	btfss	status,2,c
  2218  0008A8  D002               	goto	u4400
  2219  0008AA  0E01               	movlw	1
  2220  0008AC  D001               	goto	u4410
  2221  0008AE                     u4400:
  2222  0008AE  0E00               	movlw	0
  2223  0008B0                     u4410:
  2224  0008B0  6E13               	movwf	_IsRotated,c
  2225  0008B2                     l362:
  2226                           
  2227                           ;pictris.c: 960:     if (Down_Debounced)
  2228                           
  2229                           ;pictris.c: 958:     }
  2230                           
  2231                           ;pictris.c: 957:     }
  2232                           
  2233                           ;pictris.c: 956:         }
  2234  0008B2  5041               	movf	_Down_Debounced,w,c	;volatile
  2235  0008B4  B4D8               	btfsc	status,2,c
  2236  0008B6  0012               	return	
  2237                           
  2238                           ;pictris.c: 961:     {;pictris.c: 963:         if (tetris == 1) {
  2239  0008B8  0407               	decf	_tetris,w,c
  2240  0008BA  A4D8               	btfss	status,2,c
  2241  0008BC  D009               	goto	u4440
  2242  0008BE                     u4430:
  2243                           
  2244                           ;pictris.c: 964:         while (moveObjectDown(ObjectData))
  2245                           
  2246                           ;pictris.c: 965:             continue; }
  2247                           
  2248                           ;pictris.c: 964:         while (moveObjectDown(ObjectData))
  2249  0008BE  0E28               	movlw	low _ObjectData
  2250  0008C0  6E6A               	movwf	moveObjectDown@pObject,c
  2251  0008C2  0E00               	movlw	high _ObjectData
  2252  0008C4  6E6B               	movwf	moveObjectDown@pObject+1,c
  2253  0008C6  ECA4  F008         	call	_moveObjectDown	;wreg free
  2254  0008CA  0900               	iorlw	0
  2255  0008CC  A4D8               	btfss	status,2,c
  2256  0008CE  D7F7               	goto	u4430
  2257  0008D0                     u4440:
  2258                           
  2259                           ;pictris.c: 966:     pauseButtons();
  2260                           
  2261                           ;pictris.c: 965:             continue; }
  2262  0008D0  EC98  F00D         	call	_pauseButtons	;wreg free
  2263                           
  2264                           ;pictris.c: 967:         Down_Debounced = 0;
  2265  0008D4  0E00               	movlw	0
  2266  0008D6  6E41               	movwf	_Down_Debounced,c	;volatile
  2267                           
  2268                           ;pictris.c: 968:         Down_Delay = 0x7fff;
  2269  0008D8  0E7F               	movlw	127
  2270  0008DA  6E39               	movwf	_Down_Delay+1,c	;volatile
  2271  0008DC  6838               	setf	_Down_Delay,c	;volatile
  2272                           
  2273                           ;pictris.c: 969:     resumeButtons();
  2274  0008DE  EC95  F00D         	call	_resumeButtons	;wreg free
  2275  0008E2  0012               	return	
  2276  0008E4                     __end_of_checkButtons:
  2277                           	opt stack 0
  2278                           tblptru	equ	0xFF8
  2279                           tblptrh	equ	0xFF7
  2280                           tblptrl	equ	0xFF6
  2281                           tablat	equ	0xFF5
  2282                           prodh	equ	0xFF4
  2283                           prodl	equ	0xFF3
  2284                           postinc0	equ	0xFEE
  2285                           wreg	equ	0xFE8
  2286                           postdec1	equ	0xFE5
  2287                           fsr1l	equ	0xFE1
  2288                           indf2	equ	0xFDF
  2289                           postinc2	equ	0xFDE
  2290                           postdec2	equ	0xFDD
  2291                           fsr2h	equ	0xFDA
  2292                           fsr2l	equ	0xFD9
  2293                           status	equ	0xFD8
  2294                           
  2295 ;; *************** function _resumeButtons *****************
  2296 ;; Defined at:
  2297 ;;		line 333 in file "pictris.c"
  2298 ;; Parameters:    Size  Location     Type
  2299 ;;		None
  2300 ;; Auto vars:     Size  Location     Type
  2301 ;;		None
  2302 ;; Return value:  Size  Location     Type
  2303 ;;                  1    wreg      void 
  2304 ;; Registers used:
  2305 ;;		wreg, status,2
  2306 ;; Tracked objects:
  2307 ;;		On entry : 0/0
  2308 ;;		On exit  : 0/0
  2309 ;;		Unchanged: 0/0
  2310 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2311 ;;      Params:         0       0       0       0       0       0       0
  2312 ;;      Locals:         0       0       0       0       0       0       0
  2313 ;;      Temps:          0       0       0       0       0       0       0
  2314 ;;      Totals:         0       0       0       0       0       0       0
  2315 ;;Total ram usage:        0 bytes
  2316 ;; Hardware stack levels used:    1
  2317 ;; Hardware stack levels required when called:    2
  2318 ;; This function calls:
  2319 ;;		Nothing
  2320 ;; This function is called by:
  2321 ;;		_checkButtons
  2322 ;;		_show_score
  2323 ;; This function uses a non-reentrant model
  2324 ;;
  2325                           
  2326                           	psect	text8
  2327  001B2A                     __ptext8:
  2328                           	opt stack 0
  2329  001B2A                     _resumeButtons:
  2330                           	opt stack 26
  2331                           
  2332                           ;pictris.c: 335:     mtxButtons = 1;
  2333                           
  2334                           ;incstack = 0
  2335  001B2A  0E01               	movlw	1
  2336  001B2C  6E17               	movwf	_mtxButtons,c	;volatile
  2337  001B2E  0012               	return		;funcret
  2338  001B30                     __end_of_resumeButtons:
  2339                           	opt stack 0
  2340                           tblptru	equ	0xFF8
  2341                           tblptrh	equ	0xFF7
  2342                           tblptrl	equ	0xFF6
  2343                           tablat	equ	0xFF5
  2344                           prodh	equ	0xFF4
  2345                           prodl	equ	0xFF3
  2346                           postinc0	equ	0xFEE
  2347                           wreg	equ	0xFE8
  2348                           postdec1	equ	0xFE5
  2349                           fsr1l	equ	0xFE1
  2350                           indf2	equ	0xFDF
  2351                           postinc2	equ	0xFDE
  2352                           postdec2	equ	0xFDD
  2353                           fsr2h	equ	0xFDA
  2354                           fsr2l	equ	0xFD9
  2355                           status	equ	0xFD8
  2356                           
  2357 ;; *************** function _pixelCount *****************
  2358 ;; Defined at:
  2359 ;;		line 796 in file "pictris.c"
  2360 ;; Parameters:    Size  Location     Type
  2361 ;;  pSource         2   18[COMRAM] PTR volatile unsigned sh
  2362 ;;		 -> tmpObjectData(16), ObjectData(16), 
  2363 ;; Auto vars:     Size  Location     Type
  2364 ;;  y               1   27[COMRAM] unsigned char 
  2365 ;;  x               1   26[COMRAM] unsigned char 
  2366 ;;  r               1   25[COMRAM] unsigned char 
  2367 ;; Return value:  Size  Location     Type
  2368 ;;                  1    wreg      unsigned char 
  2369 ;; Registers used:
  2370 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  2371 ;; Tracked objects:
  2372 ;;		On entry : 0/0
  2373 ;;		On exit  : 0/0
  2374 ;;		Unchanged: 0/0
  2375 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2376 ;;      Params:         2       0       0       0       0       0       0
  2377 ;;      Locals:         3       0       0       0       0       0       0
  2378 ;;      Temps:          5       0       0       0       0       0       0
  2379 ;;      Totals:        10       0       0       0       0       0       0
  2380 ;;Total ram usage:       10 bytes
  2381 ;; Hardware stack levels used:    1
  2382 ;; Hardware stack levels required when called:    2
  2383 ;; This function calls:
  2384 ;;		Nothing
  2385 ;; This function is called by:
  2386 ;;		_checkButtons
  2387 ;; This function uses a non-reentrant model
  2388 ;;
  2389                           
  2390                           	psect	text9
  2391  0017A4                     __ptext9:
  2392                           	opt stack 0
  2393  0017A4                     _pixelCount:
  2394                           	opt stack 26
  2395                           
  2396                           ;pictris.c: 796: byte pixelCount(volatile uint16_t * pSource);pictris.c: 797: {;pictris.
      +                          c: 798:     byte r = 0, x, y;
  2397                           
  2398                           ;incstack = 0
  2399  0017A4  0E00               	movlw	0
  2400  0017A6  6E5E               	movwf	pixelCount@r,c
  2401                           
  2402                           ;pictris.c: 800:     for (x = 0; x < 8; x++)
  2403  0017A8  0E00               	movlw	0
  2404  0017AA  6E5F               	movwf	pixelCount@x,c
  2405  0017AC                     l2679:
  2406  0017AC  0E07               	movlw	7
  2407  0017AE  645F               	cpfsgt	pixelCount@x,c
  2408  0017B0  D001               	goto	l337
  2409  0017B2  D02B               	goto	u2460
  2410  0017B4                     l337:
  2411                           
  2412                           ;pictris.c: 801:         for (y = 0; y < 16; y++)
  2413  0017B4  0E00               	movlw	0
  2414  0017B6  6E60               	movwf	pixelCount@y,c
  2415  0017B8                     l2685:
  2416  0017B8  0E0F               	movlw	15
  2417  0017BA  6460               	cpfsgt	pixelCount@y,c
  2418  0017BC  D001               	goto	l339
  2419  0017BE  D023               	goto	u2450
  2420  0017C0                     l339:
  2421                           
  2422                           ;pictris.c: 802:             if (pSource[x] & (1<<y))
  2423  0017C0  505F               	movf	pixelCount@x,w,c
  2424  0017C2  0D02               	mullw	2
  2425  0017C4  50F3               	movf	prodl,w,c
  2426  0017C6  2457               	addwf	pixelCount@pSource,w,c
  2427  0017C8  6ED9               	movwf	fsr2l,c
  2428  0017CA  50F4               	movf	prodh,w,c
  2429  0017CC  2058               	addwfc	pixelCount@pSource+1,w,c
  2430  0017CE  6EDA               	movwf	fsr2h,c
  2431  0017D0  CFDE F059          	movff	postinc2,??_pixelCount
  2432  0017D4  CFDD F05A          	movff	postdec2,??_pixelCount+1
  2433  0017D8  C060  F05B         	movff	pixelCount@y,??_pixelCount+2
  2434  0017DC  0E01               	movlw	1
  2435  0017DE  6E5C               	movwf	(??_pixelCount+3)& (0+255),c
  2436  0017E0  0E00               	movlw	0
  2437  0017E2  6E5D               	movwf	(??_pixelCount+4)& (0+255),c
  2438  0017E4  2A5B               	incf	??_pixelCount+2,f,c
  2439  0017E6  D003               	goto	u2434
  2440  0017E8                     u2435:
  2441  0017E8  90D8               	bcf	status,0,c
  2442  0017EA  365C               	rlcf	??_pixelCount+3,f,c
  2443  0017EC  365D               	rlcf	??_pixelCount+4,f,c
  2444  0017EE                     u2434:
  2445  0017EE  2E5B               	decfsz	??_pixelCount+2,f,c
  2446  0017F0  D7FB               	goto	u2435
  2447  0017F2  5059               	movf	??_pixelCount,w,c
  2448  0017F4  165C               	andwf	??_pixelCount+3,f,c
  2449  0017F6  505A               	movf	??_pixelCount+1,w,c
  2450  0017F8  165D               	andwf	??_pixelCount+4,f,c
  2451  0017FA  505C               	movf	??_pixelCount+3,w,c
  2452  0017FC  105D               	iorwf	??_pixelCount+4,w,c
  2453  0017FE  A4D8               	btfss	status,2,c
  2454                           
  2455                           ;pictris.c: 803:                 r++;
  2456  001800  2A5E               	incf	pixelCount@r,f,c
  2457  001802  2A60               	incf	pixelCount@y,f,c
  2458  001804  D7D9               	goto	l2685
  2459  001806                     u2450:
  2460  001806  2A5F               	incf	pixelCount@x,f,c
  2461  001808  D7D1               	goto	l2679
  2462  00180A                     u2460:
  2463                           
  2464                           ;pictris.c: 804:     return r;
  2465  00180A  505E               	movf	pixelCount@r,w,c
  2466  00180C  0012               	return	
  2467  00180E                     __end_of_pixelCount:
  2468                           	opt stack 0
  2469                           tblptru	equ	0xFF8
  2470                           tblptrh	equ	0xFF7
  2471                           tblptrl	equ	0xFF6
  2472                           tablat	equ	0xFF5
  2473                           prodh	equ	0xFF4
  2474                           prodl	equ	0xFF3
  2475                           postinc0	equ	0xFEE
  2476                           wreg	equ	0xFE8
  2477                           postdec1	equ	0xFE5
  2478                           fsr1l	equ	0xFE1
  2479                           indf2	equ	0xFDF
  2480                           postinc2	equ	0xFDE
  2481                           postdec2	equ	0xFDD
  2482                           fsr2h	equ	0xFDA
  2483                           fsr2l	equ	0xFD9
  2484                           status	equ	0xFD8
  2485                           
  2486 ;; *************** function _pauseButtons *****************
  2487 ;; Defined at:
  2488 ;;		line 326 in file "pictris.c"
  2489 ;; Parameters:    Size  Location     Type
  2490 ;;		None
  2491 ;; Auto vars:     Size  Location     Type
  2492 ;;		None
  2493 ;; Return value:  Size  Location     Type
  2494 ;;                  1    wreg      void 
  2495 ;; Registers used:
  2496 ;;		wreg, status,2
  2497 ;; Tracked objects:
  2498 ;;		On entry : 0/0
  2499 ;;		On exit  : 0/0
  2500 ;;		Unchanged: 0/0
  2501 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2502 ;;      Params:         0       0       0       0       0       0       0
  2503 ;;      Locals:         0       0       0       0       0       0       0
  2504 ;;      Temps:          0       0       0       0       0       0       0
  2505 ;;      Totals:         0       0       0       0       0       0       0
  2506 ;;Total ram usage:        0 bytes
  2507 ;; Hardware stack levels used:    1
  2508 ;; Hardware stack levels required when called:    2
  2509 ;; This function calls:
  2510 ;;		Nothing
  2511 ;; This function is called by:
  2512 ;;		_checkButtons
  2513 ;;		_show_score
  2514 ;; This function uses a non-reentrant model
  2515 ;;
  2516                           
  2517                           	psect	text10
  2518  001B30                     __ptext10:
  2519                           	opt stack 0
  2520  001B30                     _pauseButtons:
  2521                           	opt stack 26
  2522                           
  2523                           ;pictris.c: 330:     mtxButtons = 0;
  2524                           
  2525                           ;incstack = 0
  2526  001B30  0E00               	movlw	0
  2527  001B32  6E17               	movwf	_mtxButtons,c	;volatile
  2528  001B34  0012               	return		;funcret
  2529  001B36                     __end_of_pauseButtons:
  2530                           	opt stack 0
  2531                           tblptru	equ	0xFF8
  2532                           tblptrh	equ	0xFF7
  2533                           tblptrl	equ	0xFF6
  2534                           tablat	equ	0xFF5
  2535                           prodh	equ	0xFF4
  2536                           prodl	equ	0xFF3
  2537                           postinc0	equ	0xFEE
  2538                           wreg	equ	0xFE8
  2539                           postdec1	equ	0xFE5
  2540                           fsr1l	equ	0xFE1
  2541                           indf2	equ	0xFDF
  2542                           postinc2	equ	0xFDE
  2543                           postdec2	equ	0xFDD
  2544                           fsr2h	equ	0xFDA
  2545                           fsr2l	equ	0xFD9
  2546                           status	equ	0xFD8
  2547                           
  2548 ;; *************** function _newRotation *****************
  2549 ;; Defined at:
  2550 ;;		line 752 in file "pictris.c"
  2551 ;; Parameters:    Size  Location     Type
  2552 ;;  pSource         2   30[COMRAM] PTR volatile unsigned sh
  2553 ;;		 -> ObjectData(16), 
  2554 ;;  pTarget         2   32[COMRAM] PTR unsigned short 
  2555 ;;		 -> tmpObjectData(16), 
  2556 ;;  rotation        1   34[COMRAM] enum E2755
  2557 ;; Auto vars:     Size  Location     Type
  2558 ;;  y1              1   38[COMRAM] unsigned char 
  2559 ;;  x1              1   37[COMRAM] unsigned char 
  2560 ;;  y2              1   36[COMRAM] char 
  2561 ;;  x2              1   35[COMRAM] char 
  2562 ;; Return value:  Size  Location     Type
  2563 ;;                  1    wreg      void 
  2564 ;; Registers used:
  2565 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2566 ;; Tracked objects:
  2567 ;;		On entry : 0/0
  2568 ;;		On exit  : 0/0
  2569 ;;		Unchanged: 0/0
  2570 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2571 ;;      Params:         5       0       0       0       0       0       0
  2572 ;;      Locals:         4       0       0       0       0       0       0
  2573 ;;      Temps:          0       5       0       0       0       0       0
  2574 ;;      Totals:         9       5       0       0       0       0       0
  2575 ;;Total ram usage:       14 bytes
  2576 ;; Hardware stack levels used:    1
  2577 ;; Hardware stack levels required when called:    3
  2578 ;; This function calls:
  2579 ;;		___wmul
  2580 ;;		_clearArray
  2581 ;;		_memcpy
  2582 ;; This function is called by:
  2583 ;;		_checkButtons
  2584 ;; This function uses a non-reentrant model
  2585 ;;
  2586                           
  2587                           	psect	text11
  2588  000F1A                     __ptext11:
  2589                           	opt stack 0
  2590  000F1A                     _newRotation:
  2591                           	opt stack 25
  2592                           
  2593                           ;pictris.c: 752: void newRotation(volatile uint16_t * pSource, uint16_t * pTarget, rotat
      +                          ion_t rotation);pictris.c: 753: {;pictris.c: 754:     int8_t x2, y2;;pictris.c: 755:    
      +                           byte x1, y1;;pictris.c: 758:     if (LimitedRotation == 2)
  2594                           
  2595                           ;incstack = 0
  2596  000F1A  0E02               	movlw	2
  2597  000F1C  1816               	xorwf	_LimitedRotation,w,c
  2598  000F1E  A4D8               	btfss	status,2,c
  2599  000F20  D00F               	goto	l323
  2600                           
  2601                           ;pictris.c: 759:         memcpy(pTarget, pSource, 16);
  2602  000F22  C065  F057         	movff	newRotation@pTarget,memcpy@dest
  2603  000F26  C066  F058         	movff	newRotation@pTarget+1,memcpy@dest+1
  2604  000F2A  C063  F059         	movff	newRotation@pSource,memcpy@src
  2605  000F2E  C064  F05A         	movff	newRotation@pSource+1,memcpy@src+1
  2606  000F32  0E00               	movlw	0
  2607  000F34  6E5C               	movwf	memcpy@n+1,c
  2608  000F36  0E10               	movlw	16
  2609  000F38  6E5B               	movwf	memcpy@n,c
  2610  000F3A  EC67  F00C         	call	_memcpy	;wreg free
  2611  000F3E  0012               	return	
  2612  000F40                     l323:
  2613                           
  2614                           ;pictris.c: 761:     {;pictris.c: 763:         clearArray(pTarget, 8);
  2615  000F40  C065  F057         	movff	newRotation@pTarget,clearArray@pArray
  2616  000F44  C066  F058         	movff	newRotation@pTarget+1,clearArray@pArray+1
  2617  000F48  0E00               	movlw	0
  2618  000F4A  6E5A               	movwf	clearArray@size+1,c
  2619  000F4C  0E08               	movlw	8
  2620  000F4E  6E59               	movwf	clearArray@size,c
  2621  000F50  EC11  F00D         	call	_clearArray	;wreg free
  2622                           
  2623                           ;pictris.c: 768:         if (LimitedRotation == 1 && IsRotated)
  2624  000F54  0416               	decf	_LimitedRotation,w,c
  2625  000F56  A4D8               	btfss	status,2,c
  2626  000F58  D005               	goto	l325
  2627  000F5A  5013               	movf	_IsRotated,w,c
  2628  000F5C  B4D8               	btfsc	status,2,c
  2629  000F5E  D002               	goto	l325
  2630                           
  2631                           ;pictris.c: 769:             rotation = CCW;
  2632  000F60  0E00               	movlw	0
  2633  000F62  6E67               	movwf	newRotation@rotation,c
  2634  000F64                     l325:
  2635                           
  2636                           ;pictris.c: 771:         for (x1 = 0; x1 < 8; x1++)
  2637  000F64  0E00               	movlw	0
  2638  000F66  6E6A               	movwf	newRotation@x1,c
  2639  000F68                     l3725:
  2640  000F68  0E07               	movlw	7
  2641  000F6A  646A               	cpfsgt	newRotation@x1,c
  2642  000F6C  D001               	goto	l326
  2643  000F6E  0012               	return	
  2644  000F70                     l326:
  2645                           
  2646                           ;pictris.c: 772:             for (y1 = 0; y1 < 16; y1++)
  2647  000F70  0E00               	movlw	0
  2648  000F72  6E6B               	movwf	newRotation@y1,c
  2649  000F74                     l3731:
  2650  000F74  0E0F               	movlw	15
  2651  000F76  646B               	cpfsgt	newRotation@y1,c
  2652  000F78  D001               	goto	l328
  2653  000F7A  D06B               	goto	u4040
  2654  000F7C                     l328:
  2655                           
  2656                           ;pictris.c: 773:             {;pictris.c: 774:                 if (pSource[x1] & (1<<y1)
      +                          )
  2657  000F7C  506A               	movf	newRotation@x1,w,c
  2658  000F7E  0D02               	mullw	2
  2659  000F80  50F3               	movf	prodl,w,c
  2660  000F82  2463               	addwf	newRotation@pSource,w,c
  2661  000F84  6ED9               	movwf	fsr2l,c
  2662  000F86  50F4               	movf	prodh,w,c
  2663  000F88  2064               	addwfc	newRotation@pSource+1,w,c
  2664  000F8A  6EDA               	movwf	fsr2h,c
  2665  000F8C  CFDE F0A0          	movff	postinc2,??_newRotation
  2666  000F90  CFDD F0A1          	movff	postdec2,??_newRotation+1
  2667  000F94  C06B  F0A2         	movff	newRotation@y1,??_newRotation+2
  2668  000F98  0E01               	movlw	1
  2669  000F9A  0100               	movlb	0	; () banked
  2670  000F9C  6FA3               	movwf	(??_newRotation+3)& (0+255),b
  2671  000F9E  0E00               	movlw	0
  2672  000FA0  6FA4               	movwf	(??_newRotation+4)& (0+255),b
  2673  000FA2  2BA2               	incf	(??_newRotation+2)& (0+255),f,b
  2674  000FA4  D003               	goto	u3964
  2675  000FA6                     u3965:
  2676  000FA6  90D8               	bcf	status,0,c
  2677  000FA8  37A3               	rlcf	(??_newRotation+3)& (0+255),f,b
  2678  000FAA  37A4               	rlcf	(??_newRotation+4)& (0+255),f,b
  2679  000FAC                     u3964:
  2680  000FAC  2FA2               	decfsz	(??_newRotation+2)& (0+255),f,b
  2681  000FAE  D7FB               	goto	u3965
  2682  000FB0  0100               	movlb	0	; () banked
  2683  000FB2  51A0               	movf	??_newRotation& (0+255),w,b
  2684  000FB4  17A3               	andwf	(??_newRotation+3)& (0+255),f,b
  2685  000FB6  51A1               	movf	(??_newRotation+1)& (0+255),w,b
  2686  000FB8  17A4               	andwf	(??_newRotation+4)& (0+255),f,b
  2687  000FBA  51A3               	movf	(??_newRotation+3)& (0+255),w,b
  2688  000FBC  11A4               	iorwf	(??_newRotation+4)& (0+255),w,b
  2689  000FBE  B4D8               	btfsc	status,2,c
  2690  000FC0  D046               	goto	l333
  2691                           
  2692                           ; BSR set to: 0
  2693                           ;pictris.c: 775:                 {;pictris.c: 776:                     if (rotation == C
      +                          W)
  2694  000FC2  0467               	decf	newRotation@rotation,w,c
  2695  000FC4  A4D8               	btfss	status,2,c
  2696  000FC6  D009               	goto	l331
  2697                           
  2698                           ; BSR set to: 0
  2699                           ;pictris.c: 777:                     {;pictris.c: 778:                         x2 = Orig
      +                          inX + OriginY - y1;
  2700  000FC8  506B               	movf	newRotation@y1,w,c
  2701  000FCA  0800               	sublw	0
  2702  000FCC  240F               	addwf	_OriginX,w,c
  2703  000FCE  240E               	addwf	_OriginY,w,c
  2704  000FD0  6E68               	movwf	newRotation@x2,c
  2705                           
  2706                           ;pictris.c: 779:                         y2 = x1 + OriginY - OriginX;
  2707  000FD2  500F               	movf	_OriginX,w,c
  2708  000FD4  0800               	sublw	0
  2709  000FD6  246A               	addwf	newRotation@x1,w,c
  2710  000FD8  D008               	goto	L1
  2711  000FDA                     l331:
  2712                           
  2713                           ; BSR set to: 0
  2714                           ;pictris.c: 782:                     {;pictris.c: 783:                         x2 = y1 +
      +                           OriginX - OriginY;
  2715                           
  2716                           ; BSR set to: 0
  2717  000FDA  500E               	movf	_OriginY,w,c
  2718  000FDC  0800               	sublw	0
  2719  000FDE  246B               	addwf	newRotation@y1,w,c
  2720  000FE0  240F               	addwf	_OriginX,w,c
  2721  000FE2  6E68               	movwf	newRotation@x2,c
  2722                           
  2723                           ;pictris.c: 784:                         y2 = OriginX + OriginY - x1;
  2724  000FE4  506A               	movf	newRotation@x1,w,c
  2725  000FE6  0800               	sublw	0
  2726  000FE8  240F               	addwf	_OriginX,w,c
  2727  000FEA                     L1:
  2728  000FEA  240E               	addwf	_OriginY,w,c
  2729  000FEC  6E69               	movwf	newRotation@y2,c
  2730                           
  2731                           ; BSR set to: 0
  2732                           ;pictris.c: 786:                     if (x2 >= 0 && x2 < 8 &&
  2733                           
  2734                           ;pictris.c: 785:                     }
  2735  000FEE  BE68               	btfsc	newRotation@x2,7,c
  2736  000FF0  D02E               	goto	l333
  2737                           
  2738                           ; BSR set to: 0
  2739  000FF2  5068               	movf	newRotation@x2,w,c
  2740  000FF4  0A80               	xorlw	128
  2741  000FF6  0F78               	addlw	-136
  2742  000FF8  A0D8               	btfss	status,0,c
  2743                           
  2744                           ; BSR set to: 0
  2745  000FFA  BE69               	btfsc	newRotation@y2,7,c
  2746  000FFC  D028               	goto	l333
  2747                           
  2748                           ; BSR set to: 0
  2749  000FFE  5069               	movf	newRotation@y2,w,c
  2750  001000  0A80               	xorlw	128
  2751  001002  0F70               	addlw	-144
  2752  001004  B0D8               	btfsc	status,0,c
  2753  001006  D023               	goto	l333
  2754                           
  2755                           ; BSR set to: 0
  2756                           ;pictris.c: 788:                         pTarget[x2] |= (1<<y2);
  2757  001008  C069  F0A0         	movff	newRotation@y2,??_newRotation
  2758  00100C  0E01               	movlw	1
  2759  00100E  6FA1               	movwf	(??_newRotation+1)& (0+255),b
  2760  001010  0E00               	movlw	0
  2761  001012  6FA2               	movwf	(??_newRotation+2)& (0+255),b
  2762  001014  2BA0               	incf	??_newRotation& (0+255),f,b
  2763  001016  D003               	goto	u4034
  2764  001018                     u4035:
  2765  001018  90D8               	bcf	status,0,c
  2766  00101A  37A1               	rlcf	(??_newRotation+1)& (0+255),f,b
  2767  00101C  37A2               	rlcf	(??_newRotation+2)& (0+255),f,b
  2768  00101E                     u4034:
  2769  00101E  2FA0               	decfsz	??_newRotation& (0+255),f,b
  2770  001020  D7FB               	goto	u4035
  2771  001022  5068               	movf	newRotation@x2,w,c
  2772  001024  6E5D               	movwf	___wmul@multiplier,c
  2773  001026  6A5E               	clrf	___wmul@multiplier+1,c
  2774  001028  BE5D               	btfsc	___wmul@multiplier,7,c
  2775  00102A  065E               	decf	___wmul@multiplier+1,f,c
  2776  00102C  0E00               	movlw	0
  2777  00102E  6E60               	movwf	___wmul@multiplicand+1,c
  2778  001030  0E02               	movlw	2
  2779  001032  6E5F               	movwf	___wmul@multiplicand,c
  2780  001034  EC2B  F00D         	call	___wmul	;wreg free
  2781  001038  505D               	movf	?___wmul,w,c
  2782  00103A  2465               	addwf	newRotation@pTarget,w,c
  2783  00103C  6ED9               	movwf	fsr2l,c
  2784  00103E  505E               	movf	?___wmul+1,w,c
  2785  001040  2066               	addwfc	newRotation@pTarget+1,w,c
  2786  001042  6EDA               	movwf	fsr2h,c
  2787  001044  0100               	movlb	0	; () banked
  2788  001046  51A1               	movf	(??_newRotation+1)& (0+255),w,b
  2789  001048  12DE               	iorwf	postinc2,f,c
  2790  00104A  51A2               	movf	(??_newRotation+2)& (0+255),w,b
  2791  00104C  12DD               	iorwf	postdec2,f,c
  2792  00104E                     l333:
  2793                           
  2794                           ; BSR set to: 0
  2795                           ;pictris.c: 790:             }
  2796                           
  2797                           ; BSR set to: 0
  2798                           
  2799                           ;pictris.c: 789:                 }
  2800                           
  2801                           ; BSR set to: 0
  2802  00104E  2A6B               	incf	newRotation@y1,f,c
  2803  001050  D791               	goto	l3731
  2804  001052                     u4040:
  2805                           
  2806                           ; BSR set to: 0
  2807  001052  2A6A               	incf	newRotation@x1,f,c
  2808  001054  D789               	goto	l3725
  2809  001056                     __end_of_newRotation:
  2810                           	opt stack 0
  2811                           tblptru	equ	0xFF8
  2812                           tblptrh	equ	0xFF7
  2813                           tblptrl	equ	0xFF6
  2814                           tablat	equ	0xFF5
  2815                           prodh	equ	0xFF4
  2816                           prodl	equ	0xFF3
  2817                           postinc0	equ	0xFEE
  2818                           wreg	equ	0xFE8
  2819                           postdec1	equ	0xFE5
  2820                           fsr1l	equ	0xFE1
  2821                           indf2	equ	0xFDF
  2822                           postinc2	equ	0xFDE
  2823                           postdec2	equ	0xFDD
  2824                           fsr2h	equ	0xFDA
  2825                           fsr2l	equ	0xFD9
  2826                           status	equ	0xFD8
  2827                           
  2828 ;; *************** function _moveObjectDown *****************
  2829 ;; Defined at:
  2830 ;;		line 808 in file "pictris.c"
  2831 ;; Parameters:    Size  Location     Type
  2832 ;;  pObject         2   37[COMRAM] PTR volatile unsigned sh
  2833 ;;		 -> ObjectData(16), 
  2834 ;; Auto vars:     Size  Location     Type
  2835 ;;  result          1    0[BANK0 ] _Bool 
  2836 ;; Return value:  Size  Location     Type
  2837 ;;                  1    wreg      _Bool 
  2838 ;; Registers used:
  2839 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2840 ;; Tracked objects:
  2841 ;;		On entry : 0/0
  2842 ;;		On exit  : 0/0
  2843 ;;		Unchanged: 0/0
  2844 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2845 ;;      Params:         2       0       0       0       0       0       0
  2846 ;;      Locals:         0       1       0       0       0       0       0
  2847 ;;      Temps:          0       0       0       0       0       0       0
  2848 ;;      Totals:         2       1       0       0       0       0       0
  2849 ;;Total ram usage:        3 bytes
  2850 ;; Hardware stack levels used:    1
  2851 ;; Hardware stack levels required when called:    4
  2852 ;; This function calls:
  2853 ;;		_checkForBottom
  2854 ;;		_collisionDetect
  2855 ;;		_mergeObjects
  2856 ;;		_moveObject
  2857 ;;		_pauseMultiplexing
  2858 ;;		_resumeMultiplexing
  2859 ;;		_selectNextObject
  2860 ;; This function is called by:
  2861 ;;		_checkButtons
  2862 ;;		_mainGameLoop
  2863 ;; This function uses a non-reentrant model
  2864 ;;
  2865                           
  2866                           	psect	text12
  2867  001148                     __ptext12:
  2868                           	opt stack 0
  2869  001148                     _moveObjectDown:
  2870                           	opt stack 25
  2871                           
  2872                           ;pictris.c: 808: _Bool moveObjectDown(volatile uint16_t * pObject);pictris.c: 809: {;pic
      +                          tris.c: 810:     _Bool result = 1;
  2873                           
  2874                           ;incstack = 0
  2875  001148  0E01               	movlw	1
  2876  00114A  0100               	movlb	0	; () banked
  2877  00114C  6FA0               	movwf	moveObjectDown@result& (0+255),b
  2878                           
  2879                           ; BSR set to: 0
  2880                           ;pictris.c: 813:     pauseMultiplexing();
  2881  00114E  EC7B  F00D         	call	_pauseMultiplexing	;wreg free
  2882                           
  2883                           ;pictris.c: 816:     if (checkForBottom(pObject))
  2884  001152  C06A  F057         	movff	moveObjectDown@pObject,checkForBottom@pObject
  2885  001156  C06B  F058         	movff	moveObjectDown@pObject+1,checkForBottom@pObject+1
  2886  00115A  ECF7  F00C         	call	_checkForBottom	;wreg free
  2887  00115E  0900               	iorlw	0
  2888  001160  B4D8               	btfsc	status,2,c
  2889  001162  D016               	goto	l345
  2890                           
  2891                           ;pictris.c: 817:     {;pictris.c: 819:         result = 0;
  2892  001164  0E00               	movlw	0
  2893  001166  0100               	movlb	0	; () banked
  2894  001168  6FA0               	movwf	moveObjectDown@result& (0+255),b
  2895                           
  2896                           ; BSR set to: 0
  2897                           ;pictris.c: 821:         mergeObjects(pObject, BackgroundData, MERGE);
  2898  00116A  C06A  F057         	movff	moveObjectDown@pObject,mergeObjects@pSource
  2899  00116E  C06B  F058         	movff	moveObjectDown@pObject+1,mergeObjects@pSource+1
  2900  001172  0E18               	movlw	low _BackgroundData
  2901  001174  6E59               	movwf	mergeObjects@pTarget,c
  2902  001176  0E00               	movlw	high _BackgroundData
  2903  001178  6E5A               	movwf	mergeObjects@pTarget+1,c
  2904  00117A  0E01               	movlw	1
  2905  00117C  6E5B               	movwf	mergeObjects@mode,c
  2906  00117E  EC14  F009         	call	_mergeObjects	;wreg free
  2907                           
  2908                           ;pictris.c: 823:         selectNextObject(pObject);
  2909  001182  C06A  F063         	movff	moveObjectDown@pObject,selectNextObject@pTarget
  2910  001186  C06B  F064         	movff	moveObjectDown@pObject+1,selectNextObject@pTarget+1
  2911  00118A  EC47  F00A         	call	_selectNextObject	;wreg free
  2912  00118E  D041               	goto	l3787
  2913  001190                     l345:
  2914                           
  2915                           ;pictris.c: 828:     {;pictris.c: 830:         moveObject(pObject, DOWN, 1);
  2916  001190  C06A  F057         	movff	moveObjectDown@pObject,moveObject@pObject
  2917  001194  C06B  F058         	movff	moveObjectDown@pObject+1,moveObject@pObject+1
  2918  001198  0E00               	movlw	0
  2919  00119A  6E59               	movwf	moveObject@direction,c
  2920  00119C  0E01               	movlw	1
  2921  00119E  6E5A               	movwf	moveObject@cycles,c
  2922  0011A0  EC2C  F006         	call	_moveObject	;wreg free
  2923                           
  2924                           ;pictris.c: 832:         if (collisionDetect(pObject, BackgroundData))
  2925  0011A4  C06A  F057         	movff	moveObjectDown@pObject,collisionDetect@pSource
  2926  0011A8  C06B  F058         	movff	moveObjectDown@pObject+1,collisionDetect@pSource+1
  2927  0011AC  0E18               	movlw	low _BackgroundData
  2928  0011AE  6E59               	movwf	collisionDetect@pTarget,c
  2929  0011B0  0E00               	movlw	high _BackgroundData
  2930  0011B2  6E5A               	movwf	collisionDetect@pTarget+1,c
  2931  0011B4  EC3B  F00C         	call	_collisionDetect	;wreg free
  2932  0011B8  0900               	iorlw	0
  2933  0011BA  B4D8               	btfsc	status,2,c
  2934  0011BC  D02C               	goto	l347
  2935                           
  2936                           ;pictris.c: 833:         {;pictris.c: 836:             result = 0;
  2937  0011BE  0E00               	movlw	0
  2938  0011C0  0100               	movlb	0	; () banked
  2939  0011C2  6FA0               	movwf	moveObjectDown@result& (0+255),b
  2940                           
  2941                           ; BSR set to: 0
  2942                           ;pictris.c: 838:             moveObject(pObject, UP, 1);
  2943  0011C4  C06A  F057         	movff	moveObjectDown@pObject,moveObject@pObject
  2944  0011C8  C06B  F058         	movff	moveObjectDown@pObject+1,moveObject@pObject+1
  2945  0011CC  0E01               	movlw	1
  2946  0011CE  6E59               	movwf	moveObject@direction,c
  2947  0011D0  0E01               	movlw	1
  2948  0011D2  6E5A               	movwf	moveObject@cycles,c
  2949  0011D4  EC2C  F006         	call	_moveObject	;wreg free
  2950                           
  2951                           ;pictris.c: 840:             mergeObjects(pObject, BackgroundData, MERGE);
  2952  0011D8  C06A  F057         	movff	moveObjectDown@pObject,mergeObjects@pSource
  2953  0011DC  C06B  F058         	movff	moveObjectDown@pObject+1,mergeObjects@pSource+1
  2954  0011E0  0E18               	movlw	low _BackgroundData
  2955  0011E2  6E59               	movwf	mergeObjects@pTarget,c
  2956  0011E4  0E00               	movlw	high _BackgroundData
  2957  0011E6  6E5A               	movwf	mergeObjects@pTarget+1,c
  2958  0011E8  0E01               	movlw	1
  2959  0011EA  6E5B               	movwf	mergeObjects@mode,c
  2960  0011EC  EC14  F009         	call	_mergeObjects	;wreg free
  2961                           
  2962                           ;pictris.c: 842:             selectNextObject(pObject);
  2963  0011F0  C06A  F063         	movff	moveObjectDown@pObject,selectNextObject@pTarget
  2964  0011F4  C06B  F064         	movff	moveObjectDown@pObject+1,selectNextObject@pTarget+1
  2965  0011F8  EC47  F00A         	call	_selectNextObject	;wreg free
  2966                           
  2967                           ;pictris.c: 845:             EndOfGame = collisionDetect(pObject, BackgroundData);
  2968  0011FC  C06A  F057         	movff	moveObjectDown@pObject,collisionDetect@pSource
  2969  001200  C06B  F058         	movff	moveObjectDown@pObject+1,collisionDetect@pSource+1
  2970  001204  0E18               	movlw	low _BackgroundData
  2971  001206  6E59               	movwf	collisionDetect@pTarget,c
  2972  001208  0E00               	movlw	high _BackgroundData
  2973  00120A  6E5A               	movwf	collisionDetect@pTarget+1,c
  2974  00120C  EC3B  F00C         	call	_collisionDetect	;wreg free
  2975  001210  6E12               	movwf	_EndOfGame,c
  2976  001212                     l3787:
  2977                           
  2978                           ;pictris.c: 847:             CheckForNewLines = 1;
  2979  001212  0E01               	movlw	1
  2980  001214  6E11               	movwf	_CheckForNewLines,c
  2981  001216                     l347:
  2982                           
  2983                           ;pictris.c: 850:     mS = 0;
  2984                           
  2985                           ;pictris.c: 849:     }
  2986  001216  0E00               	movlw	0
  2987  001218  6E04               	movwf	_mS+1,c	;volatile
  2988  00121A  0E00               	movlw	0
  2989  00121C  6E03               	movwf	_mS,c	;volatile
  2990                           
  2991                           ;pictris.c: 853:     resumeMultiplexing();
  2992  00121E  EC9B  F00D         	call	_resumeMultiplexing	;wreg free
  2993                           
  2994                           ;pictris.c: 855:     return result;
  2995  001222  0100               	movlb	0	; () banked
  2996  001224  51A0               	movf	moveObjectDown@result& (0+255),w,b
  2997  001226  0012               	return	
  2998  001228                     __end_of_moveObjectDown:
  2999                           	opt stack 0
  3000                           tblptru	equ	0xFF8
  3001                           tblptrh	equ	0xFF7
  3002                           tblptrl	equ	0xFF6
  3003                           tablat	equ	0xFF5
  3004                           prodh	equ	0xFF4
  3005                           prodl	equ	0xFF3
  3006                           postinc0	equ	0xFEE
  3007                           wreg	equ	0xFE8
  3008                           postdec1	equ	0xFE5
  3009                           fsr1l	equ	0xFE1
  3010                           indf2	equ	0xFDF
  3011                           postinc2	equ	0xFDE
  3012                           postdec2	equ	0xFDD
  3013                           fsr2h	equ	0xFDA
  3014                           fsr2l	equ	0xFD9
  3015                           status	equ	0xFD8
  3016                           
  3017 ;; *************** function _selectNextObject *****************
  3018 ;; Defined at:
  3019 ;;		line 512 in file "pictris.c"
  3020 ;; Parameters:    Size  Location     Type
  3021 ;;  pTarget         2   30[COMRAM] PTR volatile unsigned sh
  3022 ;;		 -> ObjectData(16), 
  3023 ;; Auto vars:     Size  Location     Type
  3024 ;;  s               2   35[COMRAM] PTR struct shape
  3025 ;;		 -> shapes(133), 
  3026 ;;  selection       1   34[COMRAM] unsigned char 
  3027 ;;  counter         1   33[COMRAM] unsigned char 
  3028 ;;  rndSelection    1   32[COMRAM] unsigned char 
  3029 ;; Return value:  Size  Location     Type
  3030 ;;                  1    wreg      void 
  3031 ;; Registers used:
  3032 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3033 ;; Tracked objects:
  3034 ;;		On entry : 0/0
  3035 ;;		On exit  : 0/0
  3036 ;;		Unchanged: 0/0
  3037 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3038 ;;      Params:         2       0       0       0       0       0       0
  3039 ;;      Locals:         5       0       0       0       0       0       0
  3040 ;;      Temps:          0       0       0       0       0       0       0
  3041 ;;      Totals:         7       0       0       0       0       0       0
  3042 ;;Total ram usage:        7 bytes
  3043 ;; Hardware stack levels used:    1
  3044 ;; Hardware stack levels required when called:    3
  3045 ;; This function calls:
  3046 ;;		___awmod
  3047 ;;		___wmul
  3048 ;;		_memcpy
  3049 ;;		_rnd_get_num
  3050 ;; This function is called by:
  3051 ;;		_moveObjectDown
  3052 ;;		_mainGameLoop
  3053 ;; This function uses a non-reentrant model
  3054 ;;
  3055                           
  3056                           	psect	text13
  3057  00148E                     __ptext13:
  3058                           	opt stack 0
  3059  00148E                     _selectNextObject:
  3060                           	opt stack 26
  3061                           
  3062                           ;pictris.c: 512: void selectNextObject(volatile uint16_t *pTarget);pictris.c: 513: {;pic
      +                          tris.c: 514:     byte rndSelection, counter, selection;;pictris.c: 515:     struct shape
      +                           * s;;pictris.c: 521:     rndSelection = rnd_get_num();
  3063                           
  3064                           ; BSR set to: 0
  3065                           ;incstack = 0
  3066  00148E  EC92  F00C         	call	_rnd_get_num	;wreg free
  3067  001492  6E65               	movwf	selectNextObject@rndSelection,c
  3068                           
  3069                           ;pictris.c: 524:     counter = 0;
  3070  001494  0E00               	movlw	0
  3071  001496  6E66               	movwf	selectNextObject@counter,c
  3072                           
  3073                           ;pictris.c: 525:     selection = 0;
  3074  001498  0E00               	movlw	0
  3075  00149A  6E67               	movwf	selectNextObject@selection,c
  3076  00149C                     
  3077                           ;pictris.c: 527:     {;pictris.c: 528:         counter += (55/7);
  3078  00149C  0E07               	movlw	7
  3079  00149E  2666               	addwf	selectNextObject@counter,f,c
  3080                           
  3081                           ;pictris.c: 529:         selection++;
  3082  0014A0  2A67               	incf	selectNextObject@selection,f,c
  3083                           
  3084                           ;pictris.c: 530:     } while (counter < rndSelection);
  3085  0014A2  5065               	movf	selectNextObject@rndSelection,w,c
  3086  0014A4  5C66               	subwf	selectNextObject@counter,w,c
  3087  0014A6  A0D8               	btfss	status,0,c
  3088  0014A8  D7F9               	goto	l208
  3089                           
  3090                           ;pictris.c: 534:     s = &shapes[selection % 7];
  3091  0014AA  0E00               	movlw	0
  3092  0014AC  6E5A               	movwf	___awmod@divisor+1,c
  3093  0014AE  0E07               	movlw	7
  3094  0014B0  6E59               	movwf	___awmod@divisor,c
  3095  0014B2  C067  F057         	movff	selectNextObject@selection,___awmod@dividend
  3096  0014B6  6A58               	clrf	___awmod@dividend+1,c
  3097  0014B8  EC63  F00B         	call	___awmod	;wreg free
  3098  0014BC  C057  F05D         	movff	?___awmod,___wmul@multiplier
  3099  0014C0  C058  F05E         	movff	?___awmod+1,___wmul@multiplier+1
  3100  0014C4  0E00               	movlw	0
  3101  0014C6  6E60               	movwf	___wmul@multiplicand+1,c
  3102  0014C8  0E13               	movlw	19
  3103  0014CA  6E5F               	movwf	___wmul@multiplicand,c
  3104  0014CC  EC2B  F00D         	call	___wmul	;wreg free
  3105  0014D0  0E00               	movlw	low _shapes
  3106  0014D2  245D               	addwf	?___wmul,w,c
  3107  0014D4  6E68               	movwf	selectNextObject@s,c
  3108  0014D6  0E02               	movlw	high _shapes
  3109  0014D8  205E               	addwfc	?___wmul+1,w,c
  3110  0014DA  6E69               	movwf	selectNextObject@s+1,c
  3111                           
  3112                           ;pictris.c: 535:     memcpy(pTarget, s->graphic, 16);
  3113  0014DC  C063  F057         	movff	selectNextObject@pTarget,memcpy@dest
  3114  0014E0  C064  F058         	movff	selectNextObject@pTarget+1,memcpy@dest+1
  3115  0014E4  C068  F059         	movff	selectNextObject@s,memcpy@src
  3116  0014E8  C069  F05A         	movff	selectNextObject@s+1,memcpy@src+1
  3117  0014EC  0E00               	movlw	0
  3118  0014EE  6E5C               	movwf	memcpy@n+1,c
  3119  0014F0  0E10               	movlw	16
  3120  0014F2  6E5B               	movwf	memcpy@n,c
  3121  0014F4  EC67  F00C         	call	_memcpy	;wreg free
  3122                           
  3123                           ;pictris.c: 536:     OriginX = s->x;
  3124  0014F8  EE20 F010          	lfsr	2,16
  3125  0014FC  5068               	movf	selectNextObject@s,w,c
  3126  0014FE  26D9               	addwf	fsr2l,f,c
  3127  001500  5069               	movf	selectNextObject@s+1,w,c
  3128  001502  22DA               	addwfc	fsr2h,f,c
  3129  001504  50DF               	movf	indf2,w,c
  3130  001506  6E0F               	movwf	_OriginX,c
  3131                           
  3132                           ;pictris.c: 537:     OriginY = s->y;
  3133  001508  EE20 F011          	lfsr	2,17
  3134  00150C  5068               	movf	selectNextObject@s,w,c
  3135  00150E  26D9               	addwf	fsr2l,f,c
  3136  001510  5069               	movf	selectNextObject@s+1,w,c
  3137  001512  22DA               	addwfc	fsr2h,f,c
  3138  001514  50DF               	movf	indf2,w,c
  3139  001516  6E0E               	movwf	_OriginY,c
  3140                           
  3141                           ;pictris.c: 539:     IsRotated = 0;
  3142  001518  0E00               	movlw	0
  3143  00151A  6E13               	movwf	_IsRotated,c
  3144                           
  3145                           ;pictris.c: 540:     LimitedRotation = s->limitedRotation;
  3146  00151C  EE20 F012          	lfsr	2,18
  3147  001520  5068               	movf	selectNextObject@s,w,c
  3148  001522  26D9               	addwf	fsr2l,f,c
  3149  001524  5069               	movf	selectNextObject@s+1,w,c
  3150  001526  22DA               	addwfc	fsr2h,f,c
  3151  001528  50DF               	movf	indf2,w,c
  3152  00152A  6E16               	movwf	_LimitedRotation,c
  3153                           
  3154                           ;pictris.c: 542:     mS = 0;
  3155  00152C  0E00               	movlw	0
  3156  00152E  6E04               	movwf	_mS+1,c	;volatile
  3157  001530  0E00               	movlw	0
  3158  001532  6E03               	movwf	_mS,c	;volatile
  3159  001534  0012               	return		;funcret
  3160  001536                     __end_of_selectNextObject:
  3161                           	opt stack 0
  3162                           tblptru	equ	0xFF8
  3163                           tblptrh	equ	0xFF7
  3164                           tblptrl	equ	0xFF6
  3165                           tablat	equ	0xFF5
  3166                           prodh	equ	0xFF4
  3167                           prodl	equ	0xFF3
  3168                           postinc0	equ	0xFEE
  3169                           wreg	equ	0xFE8
  3170                           postdec1	equ	0xFE5
  3171                           fsr1l	equ	0xFE1
  3172                           indf2	equ	0xFDF
  3173                           postinc2	equ	0xFDE
  3174                           postdec2	equ	0xFDD
  3175                           fsr2h	equ	0xFDA
  3176                           fsr2l	equ	0xFD9
  3177                           status	equ	0xFD8
  3178                           
  3179 ;; *************** function _memcpy *****************
  3180 ;; Defined at:
  3181 ;;		line 10 in file "memcpy.c"
  3182 ;; Parameters:    Size  Location     Type
  3183 ;;  dest            2   18[COMRAM] PTR void 
  3184 ;;		 -> tmpObjectData(16), ObjectData(16), 
  3185 ;;  src             2   20[COMRAM] PTR const void 
  3186 ;;		 -> Number(160), TETRIS(16), ObjectData(16), shapes.graphic(16), 
  3187 ;;		 -> shapes(133), 
  3188 ;;  n               2   22[COMRAM] unsigned int 
  3189 ;; Auto vars:     Size  Location     Type
  3190 ;;  s               2   26[COMRAM] PTR unsigned char 
  3191 ;;		 -> Number(160), TETRIS(16), ObjectData(16), shapes.graphic(16), 
  3192 ;;		 -> shapes(133), 
  3193 ;;  d               2   24[COMRAM] PTR unsigned char 
  3194 ;;		 -> tmpObjectData(16), ObjectData(16), 
  3195 ;; Return value:  Size  Location     Type
  3196 ;;                  2   18[COMRAM] PTR void 
  3197 ;; Registers used:
  3198 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru
  3199 ;; Tracked objects:
  3200 ;;		On entry : 0/0
  3201 ;;		On exit  : 0/0
  3202 ;;		Unchanged: 0/0
  3203 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3204 ;;      Params:         6       0       0       0       0       0       0
  3205 ;;      Locals:         4       0       0       0       0       0       0
  3206 ;;      Temps:          0       0       0       0       0       0       0
  3207 ;;      Totals:        10       0       0       0       0       0       0
  3208 ;;Total ram usage:       10 bytes
  3209 ;; Hardware stack levels used:    1
  3210 ;; Hardware stack levels required when called:    2
  3211 ;; This function calls:
  3212 ;;		Nothing
  3213 ;; This function is called by:
  3214 ;;		_selectNextObject
  3215 ;;		_newRotation
  3216 ;;		_checkButtons
  3217 ;;		_splash_screen
  3218 ;;		_getNumber
  3219 ;; This function uses a non-reentrant model
  3220 ;;
  3221                           
  3222                           	psect	text14
  3223  0018CE                     __ptext14:
  3224                           	opt stack 0
  3225  0018CE                     _memcpy:
  3226                           	opt stack 26
  3227                           
  3228                           ;memcpy.c: 10: void *memcpy(void *dest, const void *src, size_t n);memcpy.c: 11: {;memcp
      +                          y.c: 12:     char *d = (char*)dest, *s = (char*)src;
  3229                           
  3230                           ;incstack = 0
  3231  0018CE  C057  F05D         	movff	memcpy@dest,memcpy@d
  3232  0018D2  C058  F05E         	movff	memcpy@dest+1,memcpy@d+1
  3233  0018D6  C059  F05F         	movff	memcpy@src,memcpy@s
  3234  0018DA  C05A  F060         	movff	memcpy@src+1,memcpy@s+1
  3235                           
  3236                           ;memcpy.c: 14:     while(n--)
  3237  0018DE  D019               	goto	l3
  3238  0018E0                     l3357:
  3239                           
  3240                           ;memcpy.c: 15:         *d++ = *s++;
  3241  0018E0  C05F  FFF6         	movff	memcpy@s,tblptrl
  3242  0018E4  C060  FFF7         	movff	memcpy@s+1,tblptrh
  3243  0018E8  6AF8               	clrf	tblptru,c
  3244  0018EA  C05D  FFD9         	movff	memcpy@d,fsr2l
  3245  0018EE  C05E  FFDA         	movff	memcpy@d+1,fsr2h
  3246  0018F2  0E05               	movlw	(high __ramtop+-1)
  3247  0018F4  64F7               	cpfsgt	tblptrh,c
  3248  0018F6  D003               	bra	u3397
  3249  0018F8  0008               	tblrd		*
  3250  0018FA  50F5               	movf	tablat,w,c
  3251  0018FC  D005               	bra	u3390
  3252  0018FE                     u3397:
  3253  0018FE  CFF6 FFE9          	movff	tblptrl,fsr0l
  3254  001902  CFF7 FFEA          	movff	tblptrh,fsr0h
  3255  001906  50EF               	movf	indf0,w,c
  3256  001908                     u3390:
  3257  001908  6EDF               	movwf	indf2,c
  3258  00190A  4A5F               	infsnz	memcpy@s,f,c
  3259  00190C  2A60               	incf	memcpy@s+1,f,c
  3260  00190E  4A5D               	infsnz	memcpy@d,f,c
  3261  001910  2A5E               	incf	memcpy@d+1,f,c
  3262  001912                     l3:
  3263                           
  3264                           ;memcpy.c: 14:     while(n--)
  3265  001912  065B               	decf	memcpy@n,f,c
  3266  001914  A0D8               	btfss	status,0,c
  3267  001916  065C               	decf	memcpy@n+1,f,c
  3268  001918  285B               	incf	memcpy@n,w,c
  3269  00191A  E1E2               	bnz	l3357
  3270  00191C  285C               	incf	memcpy@n+1,w,c
  3271  00191E  B4D8               	btfsc	status,2,c
  3272  001920  0012               	return	
  3273  001922  D7DE               	goto	l4
  3274  001924                     __end_of_memcpy:
  3275                           	opt stack 0
  3276                           tblptru	equ	0xFF8
  3277                           tblptrh	equ	0xFF7
  3278                           tblptrl	equ	0xFF6
  3279                           tablat	equ	0xFF5
  3280                           prodh	equ	0xFF4
  3281                           prodl	equ	0xFF3
  3282                           indf0	equ	0xFEF
  3283                           postinc0	equ	0xFEE
  3284                           fsr0h	equ	0xFEA
  3285                           fsr0l	equ	0xFE9
  3286                           wreg	equ	0xFE8
  3287                           postdec1	equ	0xFE5
  3288                           fsr1l	equ	0xFE1
  3289                           indf2	equ	0xFDF
  3290                           postinc2	equ	0xFDE
  3291                           postdec2	equ	0xFDD
  3292                           fsr2h	equ	0xFDA
  3293                           fsr2l	equ	0xFD9
  3294                           status	equ	0xFD8
  3295                           
  3296 ;; *************** function ___wmul *****************
  3297 ;; Defined at:
  3298 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c99\common\Umul16.c"
  3299 ;; Parameters:    Size  Location     Type
  3300 ;;  multiplier      2   24[COMRAM] unsigned int 
  3301 ;;  multiplicand    2   26[COMRAM] unsigned int 
  3302 ;; Auto vars:     Size  Location     Type
  3303 ;;  product         2   28[COMRAM] unsigned int 
  3304 ;; Return value:  Size  Location     Type
  3305 ;;                  2   24[COMRAM] unsigned int 
  3306 ;; Registers used:
  3307 ;;		wreg, status,2, status,0, prodl, prodh
  3308 ;; Tracked objects:
  3309 ;;		On entry : 0/0
  3310 ;;		On exit  : 0/0
  3311 ;;		Unchanged: 0/0
  3312 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3313 ;;      Params:         4       0       0       0       0       0       0
  3314 ;;      Locals:         2       0       0       0       0       0       0
  3315 ;;      Temps:          0       0       0       0       0       0       0
  3316 ;;      Totals:         6       0       0       0       0       0       0
  3317 ;;Total ram usage:        6 bytes
  3318 ;; Hardware stack levels used:    1
  3319 ;; Hardware stack levels required when called:    2
  3320 ;; This function calls:
  3321 ;;		Nothing
  3322 ;; This function is called by:
  3323 ;;		_selectNextObject
  3324 ;;		_newRotation
  3325 ;; This function uses a non-reentrant model
  3326 ;;
  3327                           
  3328                           	psect	text15
  3329  001A56                     __ptext15:
  3330                           	opt stack 0
  3331  001A56                     ___wmul:
  3332                           	opt stack 26
  3333                           
  3334                           ;incstack = 0
  3335  001A56  505D               	movf	___wmul@multiplier,w,c
  3336  001A58  025F               	mulwf	___wmul@multiplicand,c
  3337  001A5A  CFF3 F061          	movff	prodl,___wmul@product
  3338  001A5E  CFF4 F062          	movff	prodh,___wmul@product+1
  3339  001A62  505D               	movf	___wmul@multiplier,w,c
  3340  001A64  0260               	mulwf	___wmul@multiplicand+1,c
  3341  001A66  50F3               	movf	prodl,w,c
  3342  001A68  2662               	addwf	___wmul@product+1,f,c
  3343  001A6A  505E               	movf	___wmul@multiplier+1,w,c
  3344  001A6C  025F               	mulwf	___wmul@multiplicand,c
  3345  001A6E  50F3               	movf	prodl,w,c
  3346  001A70  2662               	addwf	___wmul@product+1,f,c
  3347  001A72  C061  F05D         	movff	___wmul@product,?___wmul
  3348  001A76  C062  F05E         	movff	___wmul@product+1,?___wmul+1
  3349  001A7A  0012               	return	
  3350  001A7C                     __end_of___wmul:
  3351                           	opt stack 0
  3352                           tblptru	equ	0xFF8
  3353                           tblptrh	equ	0xFF7
  3354                           tblptrl	equ	0xFF6
  3355                           tablat	equ	0xFF5
  3356                           prodh	equ	0xFF4
  3357                           prodl	equ	0xFF3
  3358                           indf0	equ	0xFEF
  3359                           postinc0	equ	0xFEE
  3360                           fsr0h	equ	0xFEA
  3361                           fsr0l	equ	0xFE9
  3362                           wreg	equ	0xFE8
  3363                           postdec1	equ	0xFE5
  3364                           fsr1l	equ	0xFE1
  3365                           indf2	equ	0xFDF
  3366                           postinc2	equ	0xFDE
  3367                           postdec2	equ	0xFDD
  3368                           fsr2h	equ	0xFDA
  3369                           fsr2l	equ	0xFD9
  3370                           status	equ	0xFD8
  3371                           
  3372 ;; *************** function ___awmod *****************
  3373 ;; Defined at:
  3374 ;;		line 7 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c99\common\awmod.c"
  3375 ;; Parameters:    Size  Location     Type
  3376 ;;  dividend        2   18[COMRAM] int 
  3377 ;;  divisor         2   20[COMRAM] int 
  3378 ;; Auto vars:     Size  Location     Type
  3379 ;;  sign            1   23[COMRAM] unsigned char 
  3380 ;;  counter         1   22[COMRAM] unsigned char 
  3381 ;; Return value:  Size  Location     Type
  3382 ;;                  2   18[COMRAM] int 
  3383 ;; Registers used:
  3384 ;;		wreg, status,2, status,0
  3385 ;; Tracked objects:
  3386 ;;		On entry : 0/0
  3387 ;;		On exit  : 0/0
  3388 ;;		Unchanged: 0/0
  3389 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3390 ;;      Params:         4       0       0       0       0       0       0
  3391 ;;      Locals:         2       0       0       0       0       0       0
  3392 ;;      Temps:          0       0       0       0       0       0       0
  3393 ;;      Totals:         6       0       0       0       0       0       0
  3394 ;;Total ram usage:        6 bytes
  3395 ;; Hardware stack levels used:    1
  3396 ;; Hardware stack levels required when called:    2
  3397 ;; This function calls:
  3398 ;;		Nothing
  3399 ;; This function is called by:
  3400 ;;		_selectNextObject
  3401 ;;		_itoa
  3402 ;; This function uses a non-reentrant model
  3403 ;;
  3404                           
  3405                           	psect	text16
  3406  0016C6                     __ptext16:
  3407                           	opt stack 0
  3408  0016C6                     ___awmod:
  3409                           	opt stack 26
  3410                           
  3411                           ;incstack = 0
  3412  0016C6  0E00               	movlw	0
  3413  0016C8  6E5C               	movwf	___awmod@sign,c
  3414  0016CA  AE58               	btfss	___awmod@dividend+1,7,c
  3415  0016CC  D006               	goto	l708
  3416  0016CE  6C57               	negf	___awmod@dividend,c
  3417  0016D0  1E58               	comf	___awmod@dividend+1,f,c
  3418  0016D2  B0D8               	btfsc	status,0,c
  3419  0016D4  2A58               	incf	___awmod@dividend+1,f,c
  3420  0016D6  0E01               	movlw	1
  3421  0016D8  6E5C               	movwf	___awmod@sign,c
  3422  0016DA                     l708:
  3423  0016DA  AE5A               	btfss	___awmod@divisor+1,7,c
  3424  0016DC  D004               	goto	l709
  3425  0016DE  6C59               	negf	___awmod@divisor,c
  3426  0016E0  1E5A               	comf	___awmod@divisor+1,f,c
  3427  0016E2  B0D8               	btfsc	status,0,c
  3428  0016E4  2A5A               	incf	___awmod@divisor+1,f,c
  3429  0016E6                     l709:
  3430  0016E6  5059               	movf	___awmod@divisor,w,c
  3431  0016E8  105A               	iorwf	___awmod@divisor+1,w,c
  3432  0016EA  B4D8               	btfsc	status,2,c
  3433  0016EC  D018               	goto	l716
  3434  0016EE  0E01               	movlw	1
  3435  0016F0  6E5B               	movwf	___awmod@counter,c
  3436  0016F2  D004               	goto	l711
  3437  0016F4  90D8               	bcf	status,0,c
  3438  0016F6  3659               	rlcf	___awmod@divisor,f,c
  3439  0016F8  365A               	rlcf	___awmod@divisor+1,f,c
  3440  0016FA  2A5B               	incf	___awmod@counter,f,c
  3441  0016FC                     l711:
  3442  0016FC  AE5A               	btfss	___awmod@divisor+1,7,c
  3443  0016FE  D7FA               	goto	l712
  3444  001700                     u3460:
  3445  001700  5059               	movf	___awmod@divisor,w,c
  3446  001702  5C57               	subwf	___awmod@dividend,w,c
  3447  001704  505A               	movf	___awmod@divisor+1,w,c
  3448  001706  5858               	subwfb	___awmod@dividend+1,w,c
  3449  001708  A0D8               	btfss	status,0,c
  3450  00170A  D004               	goto	l715
  3451  00170C  5059               	movf	___awmod@divisor,w,c
  3452  00170E  5E57               	subwf	___awmod@dividend,f,c
  3453  001710  505A               	movf	___awmod@divisor+1,w,c
  3454  001712  5A58               	subwfb	___awmod@dividend+1,f,c
  3455  001714                     l715:
  3456  001714  90D8               	bcf	status,0,c
  3457  001716  325A               	rrcf	___awmod@divisor+1,f,c
  3458  001718  3259               	rrcf	___awmod@divisor,f,c
  3459  00171A  2E5B               	decfsz	___awmod@counter,f,c
  3460  00171C  D7F1               	goto	u3460
  3461  00171E                     l716:
  3462  00171E  505C               	movf	___awmod@sign,w,c
  3463  001720  B4D8               	btfsc	status,2,c
  3464  001722  D004               	goto	l717
  3465  001724  6C57               	negf	___awmod@dividend,c
  3466  001726  1E58               	comf	___awmod@dividend+1,f,c
  3467  001728  B0D8               	btfsc	status,0,c
  3468  00172A  2A58               	incf	___awmod@dividend+1,f,c
  3469  00172C                     l717:
  3470  00172C  C057  F057         	movff	___awmod@dividend,?___awmod
  3471  001730  C058  F058         	movff	___awmod@dividend+1,?___awmod+1
  3472  001734  0012               	return	
  3473  001736                     __end_of___awmod:
  3474                           	opt stack 0
  3475                           tblptru	equ	0xFF8
  3476                           tblptrh	equ	0xFF7
  3477                           tblptrl	equ	0xFF6
  3478                           tablat	equ	0xFF5
  3479                           prodh	equ	0xFF4
  3480                           prodl	equ	0xFF3
  3481                           indf0	equ	0xFEF
  3482                           postinc0	equ	0xFEE
  3483                           fsr0h	equ	0xFEA
  3484                           fsr0l	equ	0xFE9
  3485                           wreg	equ	0xFE8
  3486                           postdec1	equ	0xFE5
  3487                           fsr1l	equ	0xFE1
  3488                           indf2	equ	0xFDF
  3489                           postinc2	equ	0xFDE
  3490                           postdec2	equ	0xFDD
  3491                           fsr2h	equ	0xFDA
  3492                           fsr2l	equ	0xFD9
  3493                           status	equ	0xFD8
  3494                           
  3495 ;; *************** function _moveObject *****************
  3496 ;; Defined at:
  3497 ;;		line 662 in file "pictris.c"
  3498 ;; Parameters:    Size  Location     Type
  3499 ;;  pObject         2   18[COMRAM] PTR volatile unsigned sh
  3500 ;;		 -> tmpObjectData(16), ObjectData(16), 
  3501 ;;  direction       1   20[COMRAM] enum E2759
  3502 ;;  cycles          1   21[COMRAM] unsigned char 
  3503 ;; Auto vars:     Size  Location     Type
  3504 ;;  i               1   27[COMRAM] unsigned char 
  3505 ;;  c               1   26[COMRAM] unsigned char 
  3506 ;; Return value:  Size  Location     Type
  3507 ;;                  1    wreg      void 
  3508 ;; Registers used:
  3509 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  3510 ;; Tracked objects:
  3511 ;;		On entry : 0/0
  3512 ;;		On exit  : 0/0
  3513 ;;		Unchanged: 0/0
  3514 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3515 ;;      Params:         4       0       0       0       0       0       0
  3516 ;;      Locals:         2       0       0       0       0       0       0
  3517 ;;      Temps:          4       0       0       0       0       0       0
  3518 ;;      Totals:        10       0       0       0       0       0       0
  3519 ;;Total ram usage:       10 bytes
  3520 ;; Hardware stack levels used:    1
  3521 ;; Hardware stack levels required when called:    2
  3522 ;; This function calls:
  3523 ;;		Nothing
  3524 ;; This function is called by:
  3525 ;;		_moveObjectDown
  3526 ;;		_checkButtons
  3527 ;;		_show_score
  3528 ;; This function uses a non-reentrant model
  3529 ;;
  3530                           
  3531                           	psect	text17
  3532  000C58                     __ptext17:
  3533                           	opt stack 0
  3534  000C58                     _moveObject:
  3535                           	opt stack 26
  3536                           
  3537                           ;pictris.c: 662: void moveObject(volatile uint16_t * pObject, direction_t direction, byt
      +                          e cycles);pictris.c: 663: {;pictris.c: 664:     byte i, c;;pictris.c: 666:     switch (d
      +                          irection)
  3538                           
  3539                           ;incstack = 0
  3540  000C58  D0AC               	goto	l276
  3541  000C5A                     
  3542                           ;pictris.c: 669:         for (c = 0; c < cycles; c++)
  3543  000C5A  0E00               	movlw	0
  3544  000C5C  6E5F               	movwf	moveObject@c,c
  3545  000C5E  D015               	goto	l278
  3546  000C60                     
  3547                           ;pictris.c: 670:         {;pictris.c: 671:             for (i = 0; i < 8; i++)
  3548  000C60  0E00               	movlw	0
  3549  000C62  6E60               	movwf	moveObject@i,c
  3550  000C64                     l3519:
  3551  000C64  0E07               	movlw	7
  3552  000C66  6460               	cpfsgt	moveObject@i,c
  3553  000C68  D001               	goto	l280
  3554  000C6A  D00D               	goto	u3590
  3555  000C6C                     l280:
  3556                           
  3557                           ;pictris.c: 672:                 pObject[i] <<= 1;
  3558  000C6C  5060               	movf	moveObject@i,w,c
  3559  000C6E  0D02               	mullw	2
  3560  000C70  50F3               	movf	prodl,w,c
  3561  000C72  2457               	addwf	moveObject@pObject,w,c
  3562  000C74  6ED9               	movwf	fsr2l,c
  3563  000C76  50F4               	movf	prodh,w,c
  3564  000C78  2058               	addwfc	moveObject@pObject+1,w,c
  3565  000C7A  6EDA               	movwf	fsr2h,c
  3566  000C7C  90D8               	bcf	status,0,c
  3567  000C7E  36DE               	rlcf	postinc2,f,c
  3568  000C80  36DD               	rlcf	postdec2,f,c
  3569  000C82  2A60               	incf	moveObject@i,f,c
  3570  000C84  D7EF               	goto	l3519
  3571  000C86                     u3590:
  3572                           
  3573                           ;pictris.c: 673:             OriginY++;
  3574  000C86  2A0E               	incf	_OriginY,f,c
  3575                           
  3576                           ;pictris.c: 674:         }
  3577  000C88  2A5F               	incf	moveObject@c,f,c
  3578  000C8A                     l278:
  3579  000C8A  505A               	movf	moveObject@cycles,w,c
  3580  000C8C  5C5F               	subwf	moveObject@c,w,c
  3581  000C8E  B0D8               	btfsc	status,0,c
  3582  000C90  0012               	return	
  3583  000C92  D7E6               	goto	l279
  3584  000C94                     
  3585                           ;pictris.c: 677:         for (c = 0; c < cycles; c++)
  3586  000C94  0E00               	movlw	0
  3587  000C96  6E5F               	movwf	moveObject@c,c
  3588  000C98  D016               	goto	l285
  3589  000C9A                     
  3590                           ;pictris.c: 678:         {;pictris.c: 679:             for (i = 0; i < 8; i++)
  3591  000C9A  0E00               	movlw	0
  3592  000C9C  6E60               	movwf	moveObject@i,c
  3593  000C9E                     l3537:
  3594  000C9E  0E07               	movlw	7
  3595  000CA0  6460               	cpfsgt	moveObject@i,c
  3596  000CA2  D001               	goto	l287
  3597  000CA4  D00E               	goto	u3620
  3598  000CA6                     l287:
  3599                           
  3600                           ;pictris.c: 680:                 pObject[i] >>= 1;
  3601  000CA6  5060               	movf	moveObject@i,w,c
  3602  000CA8  0D02               	mullw	2
  3603  000CAA  50F3               	movf	prodl,w,c
  3604  000CAC  2457               	addwf	moveObject@pObject,w,c
  3605  000CAE  6ED9               	movwf	fsr2l,c
  3606  000CB0  50F4               	movf	prodh,w,c
  3607  000CB2  2058               	addwfc	moveObject@pObject+1,w,c
  3608  000CB4  6EDA               	movwf	fsr2h,c
  3609  000CB6  90D8               	bcf	status,0,c
  3610  000CB8  32DC               	rrcf	preinc2,f,c
  3611  000CBA  50DD               	movf	postdec2,w,c
  3612  000CBC  32DF               	rrcf	indf2,f,c
  3613  000CBE  2A60               	incf	moveObject@i,f,c
  3614  000CC0  D7EE               	goto	l3537
  3615  000CC2                     u3620:
  3616                           
  3617                           ;pictris.c: 681:             OriginY--;
  3618  000CC2  060E               	decf	_OriginY,f,c
  3619                           
  3620                           ;pictris.c: 682:         }
  3621  000CC4  2A5F               	incf	moveObject@c,f,c
  3622  000CC6                     l285:
  3623  000CC6  505A               	movf	moveObject@cycles,w,c
  3624  000CC8  5C5F               	subwf	moveObject@c,w,c
  3625  000CCA  B0D8               	btfsc	status,0,c
  3626  000CCC  0012               	return	
  3627  000CCE  D7E5               	goto	l286
  3628  000CD0                     
  3629                           ;pictris.c: 685:         for (c = 0; c < cycles; c++)
  3630  000CD0  0E00               	movlw	0
  3631  000CD2  6E5F               	movwf	moveObject@c,c
  3632  000CD4  D031               	goto	l291
  3633  000CD6                     
  3634                           ;pictris.c: 686:         {;pictris.c: 687:             for (i = 7; i > 0; i--)
  3635  000CD6  0E07               	movlw	7
  3636  000CD8  6E60               	movwf	moveObject@i,c
  3637  000CDA  5060               	movf	moveObject@i,w,c
  3638  000CDC  B4D8               	btfsc	status,2,c
  3639  000CDE  D022               	goto	u3650
  3640                           
  3641                           ;pictris.c: 688:                 pObject[i] = pObject[i-1];
  3642  000CE0  0EFE               	movlw	254
  3643  000CE2  6E5B               	movwf	??_moveObject& (0+255),c
  3644  000CE4  0EFF               	movlw	255
  3645  000CE6  6E5C               	movwf	(??_moveObject+1)& (0+255),c
  3646  000CE8  5060               	movf	moveObject@i,w,c
  3647  000CEA  6E5D               	movwf	(??_moveObject+2)& (0+255),c
  3648  000CEC  6A5E               	clrf	(??_moveObject+3)& (0+255),c
  3649  000CEE  90D8               	bcf	status,0,c
  3650  000CF0  365D               	rlcf	??_moveObject+2,f,c
  3651  000CF2  365E               	rlcf	??_moveObject+3,f,c
  3652  000CF4  505B               	movf	??_moveObject,w,c
  3653  000CF6  265D               	addwf	??_moveObject+2,f,c
  3654  000CF8  505C               	movf	??_moveObject+1,w,c
  3655  000CFA  225E               	addwfc	??_moveObject+3,f,c
  3656  000CFC  505D               	movf	??_moveObject+2,w,c
  3657  000CFE  2457               	addwf	moveObject@pObject,w,c
  3658  000D00  6ED9               	movwf	fsr2l,c
  3659  000D02  505E               	movf	??_moveObject+3,w,c
  3660  000D04  2058               	addwfc	moveObject@pObject+1,w,c
  3661  000D06  6EDA               	movwf	fsr2h,c
  3662  000D08  5060               	movf	moveObject@i,w,c
  3663  000D0A  0D02               	mullw	2
  3664  000D0C  50F3               	movf	prodl,w,c
  3665  000D0E  2457               	addwf	moveObject@pObject,w,c
  3666  000D10  6EE1               	movwf	fsr1l,c
  3667  000D12  50F4               	movf	prodh,w,c
  3668  000D14  2058               	addwfc	moveObject@pObject+1,w,c
  3669  000D16  6EE2               	movwf	fsr1h,c
  3670  000D18  CFDE FFE6          	movff	postinc2,postinc1
  3671  000D1C  CFDD FFE5          	movff	postdec2,postdec1
  3672  000D20  0660               	decf	moveObject@i,f,c
  3673  000D22  D7DB               	goto	L2
  3674  000D24                     u3650:
  3675                           
  3676                           ;pictris.c: 689:             pObject[0] = 0;
  3677  000D24  C057  FFD9         	movff	moveObject@pObject,fsr2l
  3678  000D28  C058  FFDA         	movff	moveObject@pObject+1,fsr2h
  3679  000D2C  0E00               	movlw	0
  3680  000D2E  6EDE               	movwf	postinc2,c
  3681  000D30  0E00               	movlw	0
  3682  000D32  6EDD               	movwf	postdec2,c
  3683                           
  3684                           ;pictris.c: 690:             OriginX++;
  3685  000D34  2A0F               	incf	_OriginX,f,c
  3686                           
  3687                           ;pictris.c: 691:         }
  3688  000D36  2A5F               	incf	moveObject@c,f,c
  3689  000D38                     l291:
  3690  000D38  505A               	movf	moveObject@cycles,w,c
  3691  000D3A  5C5F               	subwf	moveObject@c,w,c
  3692  000D3C  B0D8               	btfsc	status,0,c
  3693  000D3E  0012               	return	
  3694  000D40  D7CA               	goto	l292
  3695  000D42                     
  3696                           ;pictris.c: 694:         for (c = 0; c < cycles; c++)
  3697  000D42  0E00               	movlw	0
  3698  000D44  6E5F               	movwf	moveObject@c,c
  3699  000D46  D030               	goto	l297
  3700  000D48                     
  3701                           ;pictris.c: 695:         {;pictris.c: 696:             for (i = 0; i < 7; i++)
  3702  000D48  0E00               	movlw	0
  3703  000D4A  6E60               	movwf	moveObject@i,c
  3704  000D4C                     l3575:
  3705  000D4C  0E06               	movlw	6
  3706  000D4E  6460               	cpfsgt	moveObject@i,c
  3707  000D50  D001               	goto	l299
  3708  000D52  D01E               	goto	u3680
  3709  000D54                     l299:
  3710                           
  3711                           ;pictris.c: 697:                 pObject[i] = pObject[i+1];
  3712  000D54  5060               	movf	moveObject@i,w,c
  3713  000D56  6E5B               	movwf	??_moveObject& (0+255),c
  3714  000D58  6A5C               	clrf	(??_moveObject+1)& (0+255),c
  3715  000D5A  90D8               	bcf	status,0,c
  3716  000D5C  365B               	rlcf	??_moveObject,f,c
  3717  000D5E  365C               	rlcf	??_moveObject+1,f,c
  3718  000D60  0E02               	movlw	2
  3719  000D62  265B               	addwf	??_moveObject,f,c
  3720  000D64  0E00               	movlw	0
  3721  000D66  225C               	addwfc	??_moveObject+1,f,c
  3722  000D68  505B               	movf	??_moveObject,w,c
  3723  000D6A  2457               	addwf	moveObject@pObject,w,c
  3724  000D6C  6ED9               	movwf	fsr2l,c
  3725  000D6E  505C               	movf	??_moveObject+1,w,c
  3726  000D70  2058               	addwfc	moveObject@pObject+1,w,c
  3727  000D72  6EDA               	movwf	fsr2h,c
  3728  000D74  5060               	movf	moveObject@i,w,c
  3729  000D76  0D02               	mullw	2
  3730  000D78  50F3               	movf	prodl,w,c
  3731  000D7A  2457               	addwf	moveObject@pObject,w,c
  3732  000D7C  6EE1               	movwf	fsr1l,c
  3733  000D7E  50F4               	movf	prodh,w,c
  3734  000D80  2058               	addwfc	moveObject@pObject+1,w,c
  3735  000D82  6EE2               	movwf	fsr1h,c
  3736  000D84  CFDE FFE6          	movff	postinc2,postinc1
  3737  000D88  CFDD FFE5          	movff	postdec2,postdec1
  3738  000D8C  2A60               	incf	moveObject@i,f,c
  3739  000D8E  D7DE               	goto	l3575
  3740  000D90                     u3680:
  3741                           
  3742                           ;pictris.c: 698:             pObject[7] = 0;
  3743  000D90  EE20 F00E          	lfsr	2,14
  3744  000D94  5057               	movf	moveObject@pObject,w,c
  3745  000D96  26D9               	addwf	fsr2l,f,c
  3746  000D98  5058               	movf	moveObject@pObject+1,w,c
  3747  000D9A  22DA               	addwfc	fsr2h,f,c
  3748  000D9C  0E00               	movlw	0
  3749  000D9E  6EDE               	movwf	postinc2,c
  3750  000DA0  0E00               	movlw	0
  3751  000DA2  6EDD               	movwf	postdec2,c
  3752                           
  3753                           ;pictris.c: 699:             OriginX--;
  3754  000DA4  060F               	decf	_OriginX,f,c
  3755                           
  3756                           ;pictris.c: 700:         }
  3757  000DA6  2A5F               	incf	moveObject@c,f,c
  3758  000DA8                     l297:
  3759  000DA8  505A               	movf	moveObject@cycles,w,c
  3760  000DAA  5C5F               	subwf	moveObject@c,w,c
  3761  000DAC  B0D8               	btfsc	status,0,c
  3762  000DAE  0012               	return	
  3763  000DB0  D7CB               	goto	l298
  3764  000DB2                     l276:
  3765  000DB2  5059               	movf	moveObject@direction,w,c
  3766  000DB4  6E5B               	movwf	??_moveObject& (0+255),c
  3767  000DB6  6A5C               	clrf	(??_moveObject+1)& (0+255),c
  3768                           
  3769                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  3770                           ; Switch size 1, requested type "space"
  3771                           ; Number of cases is 1, Range of values is 0 to 0
  3772                           ; switch strategies available:
  3773                           ; Name         Instructions Cycles
  3774                           ; simple_byte            4     3 (average)
  3775                           ;	Chosen strategy is simple_byte
  3776  000DB8  505C               	movf	??_moveObject+1,w,c
  3777  000DBA  0A00               	xorlw	0	; case 0
  3778  000DBC  A4D8               	btfss	status,2,c
  3779  000DBE  0012               	return	
  3780                           
  3781                           ; Switch size 1, requested type "space"
  3782                           ; Number of cases is 4, Range of values is 0 to 3
  3783                           ; switch strategies available:
  3784                           ; Name         Instructions Cycles
  3785                           ; simple_byte           13     7 (average)
  3786                           ;	Chosen strategy is simple_byte
  3787  000DC0  505B               	movf	??_moveObject,w,c
  3788  000DC2  0A00               	xorlw	0	; case 0
  3789  000DC4  B4D8               	btfsc	status,2,c
  3790  000DC6  D749               	goto	l277
  3791  000DC8  0A01               	xorlw	1	; case 1
  3792  000DCA  B4D8               	btfsc	status,2,c
  3793  000DCC  D763               	goto	l284
  3794  000DCE  0A03               	xorlw	3	; case 2
  3795  000DD0  B4D8               	btfsc	status,2,c
  3796  000DD2  D7B7               	goto	l296
  3797  000DD4  0A01               	xorlw	1	; case 3
  3798  000DD6  A4D8               	btfss	status,2,c
  3799  000DD8  0012               	return	
  3800  000DDA  D77A               	goto	l290
  3801  000DDC                     __end_of_moveObject:
  3802                           	opt stack 0
  3803                           tblptru	equ	0xFF8
  3804                           tblptrh	equ	0xFF7
  3805                           tblptrl	equ	0xFF6
  3806                           tablat	equ	0xFF5
  3807                           prodh	equ	0xFF4
  3808                           prodl	equ	0xFF3
  3809                           indf0	equ	0xFEF
  3810                           postinc0	equ	0xFEE
  3811                           fsr0h	equ	0xFEA
  3812                           fsr0l	equ	0xFE9
  3813                           wreg	equ	0xFE8
  3814                           postinc1	equ	0xFE6
  3815                           postdec1	equ	0xFE5
  3816                           fsr1h	equ	0xFE2
  3817                           fsr1l	equ	0xFE1
  3818                           indf2	equ	0xFDF
  3819                           postinc2	equ	0xFDE
  3820                           postdec2	equ	0xFDD
  3821                           preinc2	equ	0xFDC
  3822                           fsr2h	equ	0xFDA
  3823                           fsr2l	equ	0xFD9
  3824                           status	equ	0xFD8
  3825                           
  3826 ;; *************** function _mergeObjects *****************
  3827 ;; Defined at:
  3828 ;;		line 640 in file "pictris.c"
  3829 ;; Parameters:    Size  Location     Type
  3830 ;;  pSource         2   18[COMRAM] PTR volatile unsigned sh
  3831 ;;		 -> show_score@mask(16), tmpObjectData(16), ObjectData(16), 
  3832 ;;  pTarget         2   20[COMRAM] PTR volatile unsigned sh
  3833 ;;		 -> tmpObjectData(16), BackgroundData(16), ObjectData(16), 
  3834 ;;  mode            1   22[COMRAM] enum E2765
  3835 ;; Auto vars:     Size  Location     Type
  3836 ;;  i               1   25[COMRAM] unsigned char 
  3837 ;; Return value:  Size  Location     Type
  3838 ;;                  1    wreg      void 
  3839 ;; Registers used:
  3840 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  3841 ;; Tracked objects:
  3842 ;;		On entry : 0/0
  3843 ;;		On exit  : 0/0
  3844 ;;		Unchanged: 0/0
  3845 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3846 ;;      Params:         5       0       0       0       0       0       0
  3847 ;;      Locals:         1       0       0       0       0       0       0
  3848 ;;      Temps:          2       0       0       0       0       0       0
  3849 ;;      Totals:         8       0       0       0       0       0       0
  3850 ;;Total ram usage:        8 bytes
  3851 ;; Hardware stack levels used:    1
  3852 ;; Hardware stack levels required when called:    2
  3853 ;; This function calls:
  3854 ;;		Nothing
  3855 ;; This function is called by:
  3856 ;;		_moveObjectDown
  3857 ;;		_checkButtons
  3858 ;;		_show_score
  3859 ;; This function uses a non-reentrant model
  3860 ;;
  3861                           
  3862                           	psect	text18
  3863  001228                     __ptext18:
  3864                           	opt stack 0
  3865  001228                     _mergeObjects:
  3866                           	opt stack 26
  3867                           
  3868                           ;pictris.c: 640: void mergeObjects(volatile uint16_t * pSource, volatile uint16_t * pTar
      +                          get, mode_t mode);pictris.c: 641: {;pictris.c: 642:     byte i;;pictris.c: 644:     swit
      +                          ch (mode)
  3869                           
  3870                           ;incstack = 0
  3871  001228  D05C               	goto	l262
  3872  00122A                     
  3873                           ;pictris.c: 647:         for (i = 0; i < 8; i++)
  3874  00122A  0E00               	movlw	0
  3875  00122C  6E5E               	movwf	mergeObjects@i,c
  3876  00122E                     l3471:
  3877  00122E  0E07               	movlw	7
  3878  001230  645E               	cpfsgt	mergeObjects@i,c
  3879  001232  D001               	goto	l264
  3880  001234  0012               	return	
  3881  001236                     l264:
  3882                           
  3883                           ;pictris.c: 648:             pTarget[i] = pSource[i];
  3884  001236  505E               	movf	mergeObjects@i,w,c
  3885  001238  0D02               	mullw	2
  3886  00123A  50F3               	movf	prodl,w,c
  3887  00123C  2457               	addwf	mergeObjects@pSource,w,c
  3888  00123E  6ED9               	movwf	fsr2l,c
  3889  001240  50F4               	movf	prodh,w,c
  3890  001242  2058               	addwfc	mergeObjects@pSource+1,w,c
  3891  001244  6EDA               	movwf	fsr2h,c
  3892  001246  505E               	movf	mergeObjects@i,w,c
  3893  001248  0D02               	mullw	2
  3894  00124A  50F3               	movf	prodl,w,c
  3895  00124C  2459               	addwf	mergeObjects@pTarget,w,c
  3896  00124E  6EE1               	movwf	fsr1l,c
  3897  001250  50F4               	movf	prodh,w,c
  3898  001252  205A               	addwfc	mergeObjects@pTarget+1,w,c
  3899  001254  6EE2               	movwf	fsr1h,c
  3900  001256  CFDE FFE6          	movff	postinc2,postinc1
  3901  00125A  CFDD FFE5          	movff	postdec2,postdec1
  3902  00125E  2A5E               	incf	mergeObjects@i,f,c
  3903  001260  D7E6               	goto	l3471
  3904  001262                     
  3905                           ;pictris.c: 651:         for (i = 0; i < 8; i++)
  3906  001262  0E00               	movlw	0
  3907  001264  6E5E               	movwf	mergeObjects@i,c
  3908  001266                     l3483:
  3909  001266  0E07               	movlw	7
  3910  001268  645E               	cpfsgt	mergeObjects@i,c
  3911  00126A  D001               	goto	l268
  3912  00126C  0012               	return	
  3913  00126E                     l268:
  3914                           
  3915                           ;pictris.c: 652:             pTarget[i] |= pSource[i];
  3916  00126E  505E               	movf	mergeObjects@i,w,c
  3917  001270  0D02               	mullw	2
  3918  001272  50F3               	movf	prodl,w,c
  3919  001274  2457               	addwf	mergeObjects@pSource,w,c
  3920  001276  6ED9               	movwf	fsr2l,c
  3921  001278  50F4               	movf	prodh,w,c
  3922  00127A  2058               	addwfc	mergeObjects@pSource+1,w,c
  3923  00127C  6EDA               	movwf	fsr2h,c
  3924  00127E  CFDE F05C          	movff	postinc2,??_mergeObjects
  3925  001282  CFDD F05D          	movff	postdec2,??_mergeObjects+1
  3926  001286  505E               	movf	mergeObjects@i,w,c
  3927  001288  0D02               	mullw	2
  3928  00128A  50F3               	movf	prodl,w,c
  3929  00128C  2459               	addwf	mergeObjects@pTarget,w,c
  3930  00128E  6ED9               	movwf	fsr2l,c
  3931  001290  50F4               	movf	prodh,w,c
  3932  001292  205A               	addwfc	mergeObjects@pTarget+1,w,c
  3933  001294  6EDA               	movwf	fsr2h,c
  3934  001296  505C               	movf	??_mergeObjects,w,c
  3935  001298  12DE               	iorwf	postinc2,f,c
  3936  00129A  505D               	movf	??_mergeObjects+1,w,c
  3937  00129C  12DD               	iorwf	postdec2,f,c
  3938  00129E  2A5E               	incf	mergeObjects@i,f,c
  3939  0012A0  D7E2               	goto	l3483
  3940  0012A2                     
  3941                           ;pictris.c: 655:         for (i = 0; i < 8; i++)
  3942  0012A2  0E00               	movlw	0
  3943  0012A4  6E5E               	movwf	mergeObjects@i,c
  3944  0012A6                     l3495:
  3945  0012A6  0E07               	movlw	7
  3946  0012A8  645E               	cpfsgt	mergeObjects@i,c
  3947  0012AA  D001               	goto	l271
  3948  0012AC  0012               	return	
  3949  0012AE                     l271:
  3950                           
  3951                           ;pictris.c: 656:             pTarget[i] ^= pSource[i];
  3952  0012AE  505E               	movf	mergeObjects@i,w,c
  3953  0012B0  0D02               	mullw	2
  3954  0012B2  50F3               	movf	prodl,w,c
  3955  0012B4  2457               	addwf	mergeObjects@pSource,w,c
  3956  0012B6  6ED9               	movwf	fsr2l,c
  3957  0012B8  50F4               	movf	prodh,w,c
  3958  0012BA  2058               	addwfc	mergeObjects@pSource+1,w,c
  3959  0012BC  6EDA               	movwf	fsr2h,c
  3960  0012BE  CFDE F05C          	movff	postinc2,??_mergeObjects
  3961  0012C2  CFDD F05D          	movff	postdec2,??_mergeObjects+1
  3962  0012C6  505E               	movf	mergeObjects@i,w,c
  3963  0012C8  0D02               	mullw	2
  3964  0012CA  50F3               	movf	prodl,w,c
  3965  0012CC  2459               	addwf	mergeObjects@pTarget,w,c
  3966  0012CE  6ED9               	movwf	fsr2l,c
  3967  0012D0  50F4               	movf	prodh,w,c
  3968  0012D2  205A               	addwfc	mergeObjects@pTarget+1,w,c
  3969  0012D4  6EDA               	movwf	fsr2h,c
  3970  0012D6  505C               	movf	??_mergeObjects,w,c
  3971  0012D8  1ADE               	xorwf	postinc2,f,c
  3972  0012DA  505D               	movf	??_mergeObjects+1,w,c
  3973  0012DC  1ADD               	xorwf	postdec2,f,c
  3974  0012DE  2A5E               	incf	mergeObjects@i,f,c
  3975  0012E0  D7E2               	goto	l3495
  3976  0012E2                     l262:
  3977  0012E2  505B               	movf	mergeObjects@mode,w,c
  3978  0012E4  6E5C               	movwf	??_mergeObjects& (0+255),c
  3979  0012E6  6A5D               	clrf	(??_mergeObjects+1)& (0+255),c
  3980                           
  3981                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  3982                           ; Switch size 1, requested type "space"
  3983                           ; Number of cases is 1, Range of values is 0 to 0
  3984                           ; switch strategies available:
  3985                           ; Name         Instructions Cycles
  3986                           ; simple_byte            4     3 (average)
  3987                           ;	Chosen strategy is simple_byte
  3988  0012E8  505D               	movf	??_mergeObjects+1,w,c
  3989  0012EA  0A00               	xorlw	0	; case 0
  3990  0012EC  A4D8               	btfss	status,2,c
  3991  0012EE  0012               	return	
  3992                           
  3993                           ; Switch size 1, requested type "space"
  3994                           ; Number of cases is 3, Range of values is 0 to 2
  3995                           ; switch strategies available:
  3996                           ; Name         Instructions Cycles
  3997                           ; simple_byte           10     6 (average)
  3998                           ;	Chosen strategy is simple_byte
  3999  0012F0  505C               	movf	??_mergeObjects,w,c
  4000  0012F2  0A00               	xorlw	0	; case 0
  4001  0012F4  B4D8               	btfsc	status,2,c
  4002  0012F6  D799               	goto	l263
  4003  0012F8  0A01               	xorlw	1	; case 1
  4004  0012FA  B4D8               	btfsc	status,2,c
  4005  0012FC  D7B2               	goto	l267
  4006  0012FE  0A03               	xorlw	3	; case 2
  4007  001300  A4D8               	btfss	status,2,c
  4008  001302  0012               	return	
  4009  001304  D7CE               	goto	l270
  4010  001306                     __end_of_mergeObjects:
  4011                           	opt stack 0
  4012                           tblptru	equ	0xFF8
  4013                           tblptrh	equ	0xFF7
  4014                           tblptrl	equ	0xFF6
  4015                           tablat	equ	0xFF5
  4016                           prodh	equ	0xFF4
  4017                           prodl	equ	0xFF3
  4018                           indf0	equ	0xFEF
  4019                           postinc0	equ	0xFEE
  4020                           fsr0h	equ	0xFEA
  4021                           fsr0l	equ	0xFE9
  4022                           wreg	equ	0xFE8
  4023                           postinc1	equ	0xFE6
  4024                           postdec1	equ	0xFE5
  4025                           fsr1h	equ	0xFE2
  4026                           fsr1l	equ	0xFE1
  4027                           indf2	equ	0xFDF
  4028                           postinc2	equ	0xFDE
  4029                           postdec2	equ	0xFDD
  4030                           preinc2	equ	0xFDC
  4031                           fsr2h	equ	0xFDA
  4032                           fsr2l	equ	0xFD9
  4033                           status	equ	0xFD8
  4034                           
  4035 ;; *************** function _collisionDetect *****************
  4036 ;; Defined at:
  4037 ;;		line 731 in file "pictris.c"
  4038 ;; Parameters:    Size  Location     Type
  4039 ;;  pSource         2   18[COMRAM] PTR volatile unsigned sh
  4040 ;;		 -> tmpObjectData(16), ObjectData(16), 
  4041 ;;  pTarget         2   20[COMRAM] PTR volatile unsigned sh
  4042 ;;		 -> BackgroundData(16), 
  4043 ;; Auto vars:     Size  Location     Type
  4044 ;;  i               1   26[COMRAM] unsigned char 
  4045 ;; Return value:  Size  Location     Type
  4046 ;;                  1    wreg      _Bool 
  4047 ;; Registers used:
  4048 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  4049 ;; Tracked objects:
  4050 ;;		On entry : 0/0
  4051 ;;		On exit  : 0/0
  4052 ;;		Unchanged: 0/0
  4053 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4054 ;;      Params:         4       0       0       0       0       0       0
  4055 ;;      Locals:         1       0       0       0       0       0       0
  4056 ;;      Temps:          4       0       0       0       0       0       0
  4057 ;;      Totals:         9       0       0       0       0       0       0
  4058 ;;Total ram usage:        9 bytes
  4059 ;; Hardware stack levels used:    1
  4060 ;; Hardware stack levels required when called:    2
  4061 ;; This function calls:
  4062 ;;		Nothing
  4063 ;; This function is called by:
  4064 ;;		_moveObjectDown
  4065 ;;		_checkButtons
  4066 ;; This function uses a non-reentrant model
  4067 ;;
  4068                           
  4069                           	psect	text19
  4070  001876                     __ptext19:
  4071                           	opt stack 0
  4072  001876                     _collisionDetect:
  4073                           	opt stack 26
  4074                           
  4075                           ;pictris.c: 731: _Bool collisionDetect(volatile uint16_t * pSource, volatile uint16_t * 
      +                          pTarget);pictris.c: 732: {;pictris.c: 733:     for (byte i = 0; i < 8; i++)
  4076                           
  4077                           ;incstack = 0
  4078  001876  0E00               	movlw	0
  4079  001878  6E5F               	movwf	collisionDetect@i,c
  4080  00187A                     l3621:
  4081  00187A  0E07               	movlw	7
  4082  00187C  645F               	cpfsgt	collisionDetect@i,c
  4083  00187E  D001               	goto	l317
  4084  001880  D024               	goto	u3750
  4085  001882                     l317:
  4086                           
  4087                           ;pictris.c: 734:         if (pSource[i] & pTarget[i])
  4088  001882  505F               	movf	collisionDetect@i,w,c
  4089  001884  0D02               	mullw	2
  4090  001886  50F3               	movf	prodl,w,c
  4091  001888  2459               	addwf	collisionDetect@pTarget,w,c
  4092  00188A  6ED9               	movwf	fsr2l,c
  4093  00188C  50F4               	movf	prodh,w,c
  4094  00188E  205A               	addwfc	collisionDetect@pTarget+1,w,c
  4095  001890  6EDA               	movwf	fsr2h,c
  4096  001892  CFDE F05B          	movff	postinc2,??_collisionDetect
  4097  001896  CFDD F05C          	movff	postdec2,??_collisionDetect+1
  4098  00189A  505F               	movf	collisionDetect@i,w,c
  4099  00189C  0D02               	mullw	2
  4100  00189E  50F3               	movf	prodl,w,c
  4101  0018A0  2457               	addwf	collisionDetect@pSource,w,c
  4102  0018A2  6ED9               	movwf	fsr2l,c
  4103  0018A4  50F4               	movf	prodh,w,c
  4104  0018A6  2058               	addwfc	collisionDetect@pSource+1,w,c
  4105  0018A8  6EDA               	movwf	fsr2h,c
  4106  0018AA  CFDE F05D          	movff	postinc2,??_collisionDetect+2
  4107  0018AE  CFDD F05E          	movff	postdec2,??_collisionDetect+3
  4108  0018B2  505B               	movf	??_collisionDetect,w,c
  4109  0018B4  165D               	andwf	??_collisionDetect+2,f,c
  4110  0018B6  505C               	movf	??_collisionDetect+1,w,c
  4111  0018B8  165E               	andwf	??_collisionDetect+3,f,c
  4112  0018BA  505D               	movf	??_collisionDetect+2,w,c
  4113  0018BC  105E               	iorwf	??_collisionDetect+3,w,c
  4114  0018BE  B4D8               	btfsc	status,2,c
  4115  0018C0  D002               	goto	l319
  4116                           
  4117                           ;pictris.c: 735:             return 1;
  4118  0018C2  0E01               	movlw	1
  4119  0018C4  0012               	return	
  4120  0018C6                     l319:
  4121  0018C6  2A5F               	incf	collisionDetect@i,f,c
  4122  0018C8  D7D8               	goto	l3621
  4123  0018CA                     u3750:
  4124                           
  4125                           ;pictris.c: 736:     return 0;
  4126  0018CA  0E00               	movlw	0
  4127  0018CC  0012               	return	
  4128  0018CE                     __end_of_collisionDetect:
  4129                           	opt stack 0
  4130                           tblptru	equ	0xFF8
  4131                           tblptrh	equ	0xFF7
  4132                           tblptrl	equ	0xFF6
  4133                           tablat	equ	0xFF5
  4134                           prodh	equ	0xFF4
  4135                           prodl	equ	0xFF3
  4136                           indf0	equ	0xFEF
  4137                           postinc0	equ	0xFEE
  4138                           fsr0h	equ	0xFEA
  4139                           fsr0l	equ	0xFE9
  4140                           wreg	equ	0xFE8
  4141                           postinc1	equ	0xFE6
  4142                           postdec1	equ	0xFE5
  4143                           fsr1h	equ	0xFE2
  4144                           fsr1l	equ	0xFE1
  4145                           indf2	equ	0xFDF
  4146                           postinc2	equ	0xFDE
  4147                           postdec2	equ	0xFDD
  4148                           preinc2	equ	0xFDC
  4149                           fsr2h	equ	0xFDA
  4150                           fsr2l	equ	0xFD9
  4151                           status	equ	0xFD8
  4152                           
  4153 ;; *************** function _checkForBottom *****************
  4154 ;; Defined at:
  4155 ;;		line 707 in file "pictris.c"
  4156 ;; Parameters:    Size  Location     Type
  4157 ;;  pObject         2   18[COMRAM] PTR volatile unsigned sh
  4158 ;;		 -> ObjectData(16), 
  4159 ;; Auto vars:     Size  Location     Type
  4160 ;;  i               1   22[COMRAM] unsigned char 
  4161 ;; Return value:  Size  Location     Type
  4162 ;;                  1    wreg      _Bool 
  4163 ;; Registers used:
  4164 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  4165 ;; Tracked objects:
  4166 ;;		On entry : 0/0
  4167 ;;		On exit  : 0/0
  4168 ;;		Unchanged: 0/0
  4169 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4170 ;;      Params:         2       0       0       0       0       0       0
  4171 ;;      Locals:         1       0       0       0       0       0       0
  4172 ;;      Temps:          2       0       0       0       0       0       0
  4173 ;;      Totals:         5       0       0       0       0       0       0
  4174 ;;Total ram usage:        5 bytes
  4175 ;; Hardware stack levels used:    1
  4176 ;; Hardware stack levels required when called:    2
  4177 ;; This function calls:
  4178 ;;		Nothing
  4179 ;; This function is called by:
  4180 ;;		_moveObjectDown
  4181 ;; This function uses a non-reentrant model
  4182 ;;
  4183                           
  4184                           	psect	text20
  4185  0019EE                     __ptext20:
  4186                           	opt stack 0
  4187  0019EE                     _checkForBottom:
  4188                           	opt stack 26
  4189                           
  4190                           ;pictris.c: 707: _Bool checkForBottom(volatile uint16_t * pObject);pictris.c: 708: {;pic
      +                          tris.c: 709:     for (byte i = 0; i < 8; i++)
  4191                           
  4192                           ;incstack = 0
  4193  0019EE  0E00               	movlw	0
  4194  0019F0  6E5B               	movwf	checkForBottom@i,c
  4195  0019F2                     l3601:
  4196  0019F2  0E07               	movlw	7
  4197  0019F4  645B               	cpfsgt	checkForBottom@i,c
  4198  0019F6  D001               	goto	l305
  4199  0019F8  D012               	goto	u3720
  4200  0019FA                     l305:
  4201                           
  4202                           ;pictris.c: 710:         if (pObject[i] & (1<<15))
  4203  0019FA  505B               	movf	checkForBottom@i,w,c
  4204  0019FC  0D02               	mullw	2
  4205  0019FE  50F3               	movf	prodl,w,c
  4206  001A00  2457               	addwf	checkForBottom@pObject,w,c
  4207  001A02  6ED9               	movwf	fsr2l,c
  4208  001A04  50F4               	movf	prodh,w,c
  4209  001A06  2058               	addwfc	checkForBottom@pObject+1,w,c
  4210  001A08  6EDA               	movwf	fsr2h,c
  4211  001A0A  CFDE F059          	movff	postinc2,??_checkForBottom
  4212  001A0E  CFDD F05A          	movff	postdec2,??_checkForBottom+1
  4213  001A12  AE5A               	btfss	??_checkForBottom+1,7,c
  4214  001A14  D002               	goto	l307
  4215                           
  4216                           ;pictris.c: 711:             return 1;
  4217  001A16  0E01               	movlw	1
  4218  001A18  0012               	return	
  4219  001A1A                     l307:
  4220  001A1A  2A5B               	incf	checkForBottom@i,f,c
  4221  001A1C  D7EA               	goto	l3601
  4222  001A1E                     u3720:
  4223                           
  4224                           ;pictris.c: 712:     return 0;
  4225  001A1E  0E00               	movlw	0
  4226  001A20  0012               	return	
  4227  001A22                     __end_of_checkForBottom:
  4228                           	opt stack 0
  4229                           tblptru	equ	0xFF8
  4230                           tblptrh	equ	0xFF7
  4231                           tblptrl	equ	0xFF6
  4232                           tablat	equ	0xFF5
  4233                           prodh	equ	0xFF4
  4234                           prodl	equ	0xFF3
  4235                           indf0	equ	0xFEF
  4236                           postinc0	equ	0xFEE
  4237                           fsr0h	equ	0xFEA
  4238                           fsr0l	equ	0xFE9
  4239                           wreg	equ	0xFE8
  4240                           postinc1	equ	0xFE6
  4241                           postdec1	equ	0xFE5
  4242                           fsr1h	equ	0xFE2
  4243                           fsr1l	equ	0xFE1
  4244                           indf2	equ	0xFDF
  4245                           postinc2	equ	0xFDE
  4246                           postdec2	equ	0xFDD
  4247                           preinc2	equ	0xFDC
  4248                           fsr2h	equ	0xFDA
  4249                           fsr2l	equ	0xFD9
  4250                           status	equ	0xFD8
  4251                           
  4252 ;; *************** function _checkForRightWall *****************
  4253 ;; Defined at:
  4254 ;;		line 724 in file "pictris.c"
  4255 ;; Parameters:    Size  Location     Type
  4256 ;;  pObject         2   18[COMRAM] PTR volatile unsigned sh
  4257 ;;		 -> ObjectData(16), 
  4258 ;; Auto vars:     Size  Location     Type
  4259 ;;		None
  4260 ;; Return value:  Size  Location     Type
  4261 ;;                  1    wreg      _Bool 
  4262 ;; Registers used:
  4263 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  4264 ;; Tracked objects:
  4265 ;;		On entry : 0/0
  4266 ;;		On exit  : 0/0
  4267 ;;		Unchanged: 0/0
  4268 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4269 ;;      Params:         2       0       0       0       0       0       0
  4270 ;;      Locals:         0       0       0       0       0       0       0
  4271 ;;      Temps:          2       0       0       0       0       0       0
  4272 ;;      Totals:         4       0       0       0       0       0       0
  4273 ;;Total ram usage:        4 bytes
  4274 ;; Hardware stack levels used:    1
  4275 ;; Hardware stack levels required when called:    2
  4276 ;; This function calls:
  4277 ;;		Nothing
  4278 ;; This function is called by:
  4279 ;;		_checkButtons
  4280 ;; This function uses a non-reentrant model
  4281 ;;
  4282                           
  4283                           	psect	text21
  4284  001A9A                     __ptext21:
  4285                           	opt stack 0
  4286  001A9A                     _checkForRightWall:
  4287                           	opt stack 26
  4288                           
  4289                           ;pictris.c: 724: _Bool checkForRightWall(volatile uint16_t * pObject);pictris.c: 725: {;
      +                          pictris.c: 726:     return pObject[7] != 0;
  4290                           
  4291                           ;incstack = 0
  4292  001A9A  EE20 F00E          	lfsr	2,14
  4293  001A9E  5057               	movf	checkForRightWall@pObject,w,c
  4294  001AA0  26D9               	addwf	fsr2l,f,c
  4295  001AA2  5058               	movf	checkForRightWall@pObject+1,w,c
  4296  001AA4  22DA               	addwfc	fsr2h,f,c
  4297  001AA6  50DE               	movf	postinc2,w,c
  4298  001AA8  10DE               	iorwf	postinc2,w,c
  4299  001AAA  B4D8               	btfsc	status,2,c
  4300  001AAC  D002               	goto	u2240
  4301  001AAE  0E01               	movlw	1
  4302  001AB0  0012               	return	
  4303  001AB2                     u2240:
  4304  001AB2  0E00               	movlw	0
  4305  001AB4  0012               	return	
  4306  001AB6                     __end_of_checkForRightWall:
  4307                           	opt stack 0
  4308                           tblptru	equ	0xFF8
  4309                           tblptrh	equ	0xFF7
  4310                           tblptrl	equ	0xFF6
  4311                           tablat	equ	0xFF5
  4312                           prodh	equ	0xFF4
  4313                           prodl	equ	0xFF3
  4314                           indf0	equ	0xFEF
  4315                           postinc0	equ	0xFEE
  4316                           fsr0h	equ	0xFEA
  4317                           fsr0l	equ	0xFE9
  4318                           wreg	equ	0xFE8
  4319                           postinc1	equ	0xFE6
  4320                           postdec1	equ	0xFE5
  4321                           fsr1h	equ	0xFE2
  4322                           fsr1l	equ	0xFE1
  4323                           indf2	equ	0xFDF
  4324                           postinc2	equ	0xFDE
  4325                           postdec2	equ	0xFDD
  4326                           preinc2	equ	0xFDC
  4327                           fsr2h	equ	0xFDA
  4328                           fsr2l	equ	0xFD9
  4329                           status	equ	0xFD8
  4330                           
  4331 ;; *************** function _checkForLeftWall *****************
  4332 ;; Defined at:
  4333 ;;		line 717 in file "pictris.c"
  4334 ;; Parameters:    Size  Location     Type
  4335 ;;  pObject         2   18[COMRAM] PTR volatile unsigned sh
  4336 ;;		 -> ObjectData(16), 
  4337 ;; Auto vars:     Size  Location     Type
  4338 ;;		None
  4339 ;; Return value:  Size  Location     Type
  4340 ;;                  1    wreg      _Bool 
  4341 ;; Registers used:
  4342 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  4343 ;; Tracked objects:
  4344 ;;		On entry : 0/0
  4345 ;;		On exit  : 0/0
  4346 ;;		Unchanged: 0/0
  4347 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4348 ;;      Params:         2       0       0       0       0       0       0
  4349 ;;      Locals:         0       0       0       0       0       0       0
  4350 ;;      Temps:          2       0       0       0       0       0       0
  4351 ;;      Totals:         4       0       0       0       0       0       0
  4352 ;;Total ram usage:        4 bytes
  4353 ;; Hardware stack levels used:    1
  4354 ;; Hardware stack levels required when called:    2
  4355 ;; This function calls:
  4356 ;;		Nothing
  4357 ;; This function is called by:
  4358 ;;		_checkButtons
  4359 ;; This function uses a non-reentrant model
  4360 ;;
  4361                           
  4362                           	psect	text22
  4363  001ACE                     __ptext22:
  4364                           	opt stack 0
  4365  001ACE                     _checkForLeftWall:
  4366                           	opt stack 26
  4367                           
  4368                           ;pictris.c: 717: _Bool checkForLeftWall(volatile uint16_t * pObject);pictris.c: 718: {;p
      +                          ictris.c: 719:     return pObject[0] != 0;
  4369                           
  4370                           ;incstack = 0
  4371  001ACE  C057  FFD9         	movff	checkForLeftWall@pObject,fsr2l
  4372  001AD2  C058  FFDA         	movff	checkForLeftWall@pObject+1,fsr2h
  4373  001AD6  50DE               	movf	postinc2,w,c
  4374  001AD8  10DE               	iorwf	postinc2,w,c
  4375  001ADA  B4D8               	btfsc	status,2,c
  4376  001ADC  D002               	goto	u2220
  4377  001ADE  0E01               	movlw	1
  4378  001AE0  0012               	return	
  4379  001AE2                     u2220:
  4380  001AE2  0E00               	movlw	0
  4381  001AE4  0012               	return	
  4382  001AE6                     __end_of_checkForLeftWall:
  4383                           	opt stack 0
  4384                           tblptru	equ	0xFF8
  4385                           tblptrh	equ	0xFF7
  4386                           tblptrl	equ	0xFF6
  4387                           tablat	equ	0xFF5
  4388                           prodh	equ	0xFF4
  4389                           prodl	equ	0xFF3
  4390                           indf0	equ	0xFEF
  4391                           postinc0	equ	0xFEE
  4392                           fsr0h	equ	0xFEA
  4393                           fsr0l	equ	0xFE9
  4394                           wreg	equ	0xFE8
  4395                           postinc1	equ	0xFE6
  4396                           postdec1	equ	0xFE5
  4397                           fsr1h	equ	0xFE2
  4398                           fsr1l	equ	0xFE1
  4399                           indf2	equ	0xFDF
  4400                           postinc2	equ	0xFDE
  4401                           postdec2	equ	0xFDD
  4402                           preinc2	equ	0xFDC
  4403                           fsr2h	equ	0xFDA
  4404                           fsr2l	equ	0xFD9
  4405                           status	equ	0xFD8
  4406                           
  4407 ;; *************** function _MoveSnakes *****************
  4408 ;; Defined at:
  4409 ;;		line 593 in file "pictris.c"
  4410 ;; Parameters:    Size  Location     Type
  4411 ;;		None
  4412 ;; Auto vars:     Size  Location     Type
  4413 ;;  i               1    0[BANK0 ] unsigned char 
  4414 ;; Return value:  Size  Location     Type
  4415 ;;                  1    wreg      void 
  4416 ;; Registers used:
  4417 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4418 ;; Tracked objects:
  4419 ;;		On entry : 0/0
  4420 ;;		On exit  : 0/0
  4421 ;;		Unchanged: 0/0
  4422 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4423 ;;      Params:         0       0       0       0       0       0       0
  4424 ;;      Locals:         0       1       0       0       0       0       0
  4425 ;;      Temps:          8       0       0       0       0       0       0
  4426 ;;      Totals:         8       1       0       0       0       0       0
  4427 ;;Total ram usage:        9 bytes
  4428 ;; Hardware stack levels used:    1
  4429 ;; Hardware stack levels required when called:    5
  4430 ;; This function calls:
  4431 ;;		_CreateBerry
  4432 ;;		_SnakeGraph
  4433 ;; This function is called by:
  4434 ;;		_mainGameLoop
  4435 ;; This function uses a non-reentrant model
  4436 ;;
  4437                           
  4438                           	psect	text23
  4439  0008E4                     __ptext23:
  4440                           	opt stack 0
  4441  0008E4                     _MoveSnakes:
  4442                           	opt stack 24
  4443                           
  4444                           ;pictris.c: 595:     uint8_t i;;pictris.c: 596:     switch (direction){
  4445                           
  4446                           ;incstack = 0
  4447  0008E4  D02F               	goto	l241
  4448  0008E6                     
  4449                           ;pictris.c: 598:             positions[0].y = positions[0].y - 1;
  4450  0008E6  0101               	movlb	1	; () banked
  4451  0008E8  0501               	decf	(_positions+1)& (0+255),w,b
  4452  0008EA  6F01               	movwf	(_positions+1)& (0+255),b
  4453                           
  4454                           ; BSR set to: 1
  4455                           ;pictris.c: 599:             previous_direction = 0;
  4456  0008EC  0E00               	movlw	0
  4457  0008EE  6E08               	movwf	_previous_direction,c
  4458                           
  4459                           ; BSR set to: 1
  4460                           ;pictris.c: 600:             if (positions[0].y >= 200){
  4461  0008F0  0EC7               	movlw	199
  4462  0008F2  6501               	cpfsgt	(_positions+1)& (0+255),b
  4463  0008F4  D002               	goto	l243
  4464                           
  4465                           ; BSR set to: 1
  4466                           ;pictris.c: 601:                 positions[0].y = 15;
  4467  0008F6  0E0F               	movlw	15
  4468  0008F8  6F01               	movwf	(_positions+1)& (0+255),b
  4469  0008FA                     l243:
  4470                           
  4471                           ;pictris.c: 604:             positions[0].x = positions[0].x + 1;
  4472                           
  4473                           ; BSR set to: 1
  4474                           
  4475                           ;pictris.c: 603:         case 1:
  4476                           
  4477                           ; BSR set to: 1
  4478  0008FA  0101               	movlb	1	; () banked
  4479  0008FC  2900               	incf	_positions& (0+255),w,b
  4480  0008FE  6F00               	movwf	_positions& (0+255),b
  4481                           
  4482                           ; BSR set to: 1
  4483                           ;pictris.c: 605:             previous_direction = 1;
  4484  000900  0E01               	movlw	1
  4485  000902  6E08               	movwf	_previous_direction,c
  4486                           
  4487                           ;pictris.c: 606:             if (positions[0].x > 7 && positions[0].x < 200){
  4488  000904  0E07               	movlw	7
  4489  000906  6500               	cpfsgt	_positions& (0+255),b
  4490  000908  D005               	goto	l245
  4491                           
  4492                           ; BSR set to: 1
  4493  00090A  0EC8               	movlw	200
  4494  00090C  6100               	cpfslt	_positions& (0+255),b
  4495  00090E  D002               	goto	l245
  4496                           
  4497                           ; BSR set to: 1
  4498                           ;pictris.c: 607:                 positions[0].x = 0;
  4499  000910  0E00               	movlw	0
  4500  000912  6F00               	movwf	_positions& (0+255),b
  4501  000914                     l245:
  4502                           
  4503                           ;pictris.c: 610:             positions[0].y = positions[0].y + 1;
  4504                           
  4505                           ; BSR set to: 1
  4506                           
  4507                           ;pictris.c: 609:         case 2:
  4508                           
  4509                           ; BSR set to: 1
  4510  000914  0101               	movlb	1	; () banked
  4511  000916  2901               	incf	(_positions+1)& (0+255),w,b
  4512  000918  6F01               	movwf	(_positions+1)& (0+255),b
  4513                           
  4514                           ; BSR set to: 1
  4515                           ;pictris.c: 611:             previous_direction = 2;
  4516  00091A  0E02               	movlw	2
  4517  00091C  6E08               	movwf	_previous_direction,c
  4518                           
  4519                           ;pictris.c: 612:             if (positions[0].y > 15 && positions[0].y < 200) {
  4520  00091E  0E0F               	movlw	15
  4521  000920  6501               	cpfsgt	(_positions+1)& (0+255),b
  4522  000922  D005               	goto	l247
  4523                           
  4524                           ; BSR set to: 1
  4525  000924  0EC8               	movlw	200
  4526  000926  6101               	cpfslt	(_positions+1)& (0+255),b
  4527  000928  D002               	goto	l247
  4528                           
  4529                           ; BSR set to: 1
  4530                           ;pictris.c: 613:                 positions[0].y = 0;
  4531  00092A  0E00               	movlw	0
  4532  00092C  6F01               	movwf	(_positions+1)& (0+255),b
  4533  00092E                     l247:
  4534                           
  4535                           ;pictris.c: 616:             positions[0].x = positions[0].x - 1;
  4536                           
  4537                           ; BSR set to: 1
  4538                           
  4539                           ;pictris.c: 615:         case 3:
  4540                           
  4541                           ; BSR set to: 1
  4542  00092E  0101               	movlb	1	; () banked
  4543  000930  0500               	decf	_positions& (0+255),w,b
  4544  000932  6F00               	movwf	_positions& (0+255),b
  4545                           
  4546                           ; BSR set to: 1
  4547                           ;pictris.c: 617:             previous_direction = 3;
  4548  000934  0E03               	movlw	3
  4549  000936  6E08               	movwf	_previous_direction,c
  4550                           
  4551                           ;pictris.c: 618:             if (positions[0].x >= 200){
  4552  000938  0EC7               	movlw	199
  4553  00093A  6500               	cpfsgt	_positions& (0+255),b
  4554  00093C  D017               	goto	l250
  4555                           
  4556                           ; BSR set to: 1
  4557                           ;pictris.c: 619:                 positions[0].x = 7;
  4558  00093E  0E07               	movlw	7
  4559  000940  6F00               	movwf	_positions& (0+255),b
  4560                           
  4561                           ; BSR set to: 1
  4562                           ;pictris.c: 621:     };
  4563                           
  4564                           ;pictris.c: 620:             };
  4565  000942  D014               	goto	l250
  4566  000944                     l241:
  4567                           
  4568                           ; BSR set to: 1
  4569  000944  500D               	movf	_direction,w,c
  4570  000946  6E64               	movwf	??_MoveSnakes& (0+255),c
  4571  000948  6A65               	clrf	(??_MoveSnakes+1)& (0+255),c
  4572                           
  4573                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  4574                           ; Switch size 1, requested type "space"
  4575                           ; Number of cases is 1, Range of values is 0 to 0
  4576                           ; switch strategies available:
  4577                           ; Name         Instructions Cycles
  4578                           ; simple_byte            4     3 (average)
  4579                           ;	Chosen strategy is simple_byte
  4580  00094A  5065               	movf	??_MoveSnakes+1,w,c
  4581  00094C  0A00               	xorlw	0	; case 0
  4582  00094E  A4D8               	btfss	status,2,c
  4583  000950  D00D               	goto	l250
  4584                           
  4585                           ; Switch size 1, requested type "space"
  4586                           ; Number of cases is 4, Range of values is 0 to 3
  4587                           ; switch strategies available:
  4588                           ; Name         Instructions Cycles
  4589                           ; simple_byte           13     7 (average)
  4590                           ;	Chosen strategy is simple_byte
  4591  000952  5064               	movf	??_MoveSnakes,w,c
  4592  000954  0A00               	xorlw	0	; case 0
  4593  000956  B4D8               	btfsc	status,2,c
  4594  000958  D7C6               	goto	l242
  4595  00095A  0A01               	xorlw	1	; case 1
  4596  00095C  B4D8               	btfsc	status,2,c
  4597  00095E  D7CD               	goto	l243
  4598  000960  0A03               	xorlw	3	; case 2
  4599  000962  B4D8               	btfsc	status,2,c
  4600  000964  D7D7               	goto	l245
  4601  000966  0A01               	xorlw	1	; case 3
  4602  000968  B4D8               	btfsc	status,2,c
  4603  00096A  D7E1               	goto	l247
  4604  00096C                     l250:
  4605                           
  4606                           ;pictris.c: 622:     for (i=0;i<=snakeLength;i++){
  4607  00096C  0E00               	movlw	0
  4608  00096E  0100               	movlb	0	; () banked
  4609  000970  6FA0               	movwf	MoveSnakes@i& (0+255),b
  4610  000972  D06D               	goto	l251
  4611  000974                     
  4612                           ; BSR set to: 0
  4613                           ;pictris.c: 623:         positions[(snakeLength - i)+1].y = positions[snakeLength-i].y;
  4614                           
  4615                           ; BSR set to: 0
  4616  000974  51A0               	movf	MoveSnakes@i& (0+255),w,b
  4617  000976  6E64               	movwf	??_MoveSnakes& (0+255),c
  4618  000978  6A65               	clrf	(??_MoveSnakes+1)& (0+255),c
  4619  00097A  1E64               	comf	??_MoveSnakes,f,c
  4620  00097C  1E65               	comf	??_MoveSnakes+1,f,c
  4621  00097E  4A64               	infsnz	??_MoveSnakes,f,c
  4622  000980  2A65               	incf	??_MoveSnakes+1,f,c
  4623  000982  500B               	movf	_snakeLength,w,c
  4624  000984  6E66               	movwf	(??_MoveSnakes+2)& (0+255),c
  4625  000986  6A67               	clrf	(??_MoveSnakes+3)& (0+255),c
  4626  000988  5064               	movf	??_MoveSnakes,w,c
  4627  00098A  2666               	addwf	??_MoveSnakes+2,f,c
  4628  00098C  5065               	movf	??_MoveSnakes+1,w,c
  4629  00098E  2267               	addwfc	??_MoveSnakes+3,f,c
  4630  000990  90D8               	bcf	status,0,c
  4631  000992  3666               	rlcf	??_MoveSnakes+2,f,c
  4632  000994  3667               	rlcf	??_MoveSnakes+3,f,c
  4633  000996  0E01               	movlw	1
  4634  000998  2666               	addwf	??_MoveSnakes+2,f,c
  4635  00099A  0E00               	movlw	0
  4636  00099C  2267               	addwfc	??_MoveSnakes+3,f,c
  4637  00099E  0E00               	movlw	low _positions
  4638  0009A0  2466               	addwf	??_MoveSnakes+2,w,c
  4639  0009A2  6ED9               	movwf	fsr2l,c
  4640  0009A4  0E01               	movlw	high _positions
  4641  0009A6  2067               	addwfc	??_MoveSnakes+3,w,c
  4642  0009A8  6EDA               	movwf	fsr2h,c
  4643  0009AA  51A0               	movf	MoveSnakes@i& (0+255),w,b
  4644  0009AC  6E68               	movwf	(??_MoveSnakes+4)& (0+255),c
  4645  0009AE  6A69               	clrf	(??_MoveSnakes+5)& (0+255),c
  4646  0009B0  1E68               	comf	??_MoveSnakes+4,f,c
  4647  0009B2  1E69               	comf	??_MoveSnakes+5,f,c
  4648  0009B4  4A68               	infsnz	??_MoveSnakes+4,f,c
  4649  0009B6  2A69               	incf	??_MoveSnakes+5,f,c
  4650  0009B8  500B               	movf	_snakeLength,w,c
  4651  0009BA  6E6A               	movwf	(??_MoveSnakes+6)& (0+255),c
  4652  0009BC  6A6B               	clrf	(??_MoveSnakes+7)& (0+255),c
  4653  0009BE  5068               	movf	??_MoveSnakes+4,w,c
  4654  0009C0  266A               	addwf	??_MoveSnakes+6,f,c
  4655  0009C2  5069               	movf	??_MoveSnakes+5,w,c
  4656  0009C4  226B               	addwfc	??_MoveSnakes+7,f,c
  4657  0009C6  90D8               	bcf	status,0,c
  4658  0009C8  366A               	rlcf	??_MoveSnakes+6,f,c
  4659  0009CA  366B               	rlcf	??_MoveSnakes+7,f,c
  4660  0009CC  0E03               	movlw	3
  4661  0009CE  266A               	addwf	??_MoveSnakes+6,f,c
  4662  0009D0  0E00               	movlw	0
  4663  0009D2  226B               	addwfc	??_MoveSnakes+7,f,c
  4664  0009D4  0E00               	movlw	low _positions
  4665  0009D6  246A               	addwf	??_MoveSnakes+6,w,c
  4666  0009D8  6EE1               	movwf	fsr1l,c
  4667  0009DA  0E01               	movlw	high _positions
  4668  0009DC  206B               	addwfc	??_MoveSnakes+7,w,c
  4669  0009DE  6EE2               	movwf	fsr1h,c
  4670  0009E0  CFDF FFE7          	movff	indf2,indf1
  4671                           
  4672                           ;pictris.c: 624:         positions[(snakeLength - i)+1].x = positions[snakeLength-i].x;
  4673  0009E4  51A0               	movf	MoveSnakes@i& (0+255),w,b
  4674  0009E6  6E64               	movwf	??_MoveSnakes& (0+255),c
  4675  0009E8  6A65               	clrf	(??_MoveSnakes+1)& (0+255),c
  4676  0009EA  1E64               	comf	??_MoveSnakes,f,c
  4677  0009EC  1E65               	comf	??_MoveSnakes+1,f,c
  4678  0009EE  4A64               	infsnz	??_MoveSnakes,f,c
  4679  0009F0  2A65               	incf	??_MoveSnakes+1,f,c
  4680  0009F2  500B               	movf	_snakeLength,w,c
  4681  0009F4  6E66               	movwf	(??_MoveSnakes+2)& (0+255),c
  4682  0009F6  6A67               	clrf	(??_MoveSnakes+3)& (0+255),c
  4683  0009F8  5064               	movf	??_MoveSnakes,w,c
  4684  0009FA  2666               	addwf	??_MoveSnakes+2,f,c
  4685  0009FC  5065               	movf	??_MoveSnakes+1,w,c
  4686  0009FE  2267               	addwfc	??_MoveSnakes+3,f,c
  4687  000A00  90D8               	bcf	status,0,c
  4688  000A02  3666               	rlcf	??_MoveSnakes+2,f,c
  4689  000A04  3667               	rlcf	??_MoveSnakes+3,f,c
  4690  000A06  0E00               	movlw	low _positions
  4691  000A08  2466               	addwf	??_MoveSnakes+2,w,c
  4692  000A0A  6ED9               	movwf	fsr2l,c
  4693  000A0C  0E01               	movlw	high _positions
  4694  000A0E  2067               	addwfc	??_MoveSnakes+3,w,c
  4695  000A10  6EDA               	movwf	fsr2h,c
  4696  000A12  51A0               	movf	MoveSnakes@i& (0+255),w,b
  4697  000A14  6E68               	movwf	(??_MoveSnakes+4)& (0+255),c
  4698  000A16  6A69               	clrf	(??_MoveSnakes+5)& (0+255),c
  4699  000A18  1E68               	comf	??_MoveSnakes+4,f,c
  4700  000A1A  1E69               	comf	??_MoveSnakes+5,f,c
  4701  000A1C  4A68               	infsnz	??_MoveSnakes+4,f,c
  4702  000A1E  2A69               	incf	??_MoveSnakes+5,f,c
  4703  000A20  500B               	movf	_snakeLength,w,c
  4704  000A22  6E6A               	movwf	(??_MoveSnakes+6)& (0+255),c
  4705  000A24  6A6B               	clrf	(??_MoveSnakes+7)& (0+255),c
  4706  000A26  5068               	movf	??_MoveSnakes+4,w,c
  4707  000A28  266A               	addwf	??_MoveSnakes+6,f,c
  4708  000A2A  5069               	movf	??_MoveSnakes+5,w,c
  4709  000A2C  226B               	addwfc	??_MoveSnakes+7,f,c
  4710  000A2E  90D8               	bcf	status,0,c
  4711  000A30  366A               	rlcf	??_MoveSnakes+6,f,c
  4712  000A32  366B               	rlcf	??_MoveSnakes+7,f,c
  4713  000A34  0E02               	movlw	2
  4714  000A36  266A               	addwf	??_MoveSnakes+6,f,c
  4715  000A38  0E00               	movlw	0
  4716  000A3A  226B               	addwfc	??_MoveSnakes+7,f,c
  4717  000A3C  0E00               	movlw	low _positions
  4718  000A3E  246A               	addwf	??_MoveSnakes+6,w,c
  4719  000A40  6EE1               	movwf	fsr1l,c
  4720  000A42  0E01               	movlw	high _positions
  4721  000A44  206B               	addwfc	??_MoveSnakes+7,w,c
  4722  000A46  6EE2               	movwf	fsr1h,c
  4723  000A48  CFDF FFE7          	movff	indf2,indf1
  4724                           
  4725                           ; BSR set to: 0
  4726                           ;pictris.c: 625:     }
  4727  000A4C  2BA0               	incf	MoveSnakes@i& (0+255),f,b
  4728  000A4E                     l251:
  4729                           
  4730                           ; BSR set to: 0
  4731                           
  4732                           ; BSR set to: 0
  4733  000A4E  51A0               	movf	MoveSnakes@i& (0+255),w,b
  4734  000A50  5C0B               	subwf	_snakeLength,w,c
  4735  000A52  B0D8               	btfsc	status,0,c
  4736  000A54  D78F               	goto	l252
  4737                           
  4738                           ; BSR set to: 0
  4739                           ;pictris.c: 626:     if (positions[0].y == berryY && positions[0].x == berryX){
  4740                           
  4741                           ; BSR set to: 0
  4742  000A56  5009               	movf	_berryY,w,c
  4743  000A58  0101               	movlb	1	; () banked
  4744  000A5A  1901               	xorwf	(_positions+1)& (0+255),w,b
  4745  000A5C  A4D8               	btfss	status,2,c
  4746  000A5E  D008               	goto	l254
  4747                           
  4748                           ; BSR set to: 1
  4749  000A60  500A               	movf	_berryX,w,c
  4750  000A62  1900               	xorwf	_positions& (0+255),w,b
  4751  000A64  A4D8               	btfss	status,2,c
  4752  000A66  D004               	goto	l254
  4753                           
  4754                           ; BSR set to: 1
  4755                           ;pictris.c: 627:         snakeLength = snakeLength + 1;
  4756  000A68  280B               	incf	_snakeLength,w,c
  4757  000A6A  6E0B               	movwf	_snakeLength,c
  4758                           
  4759                           ; BSR set to: 1
  4760                           ;pictris.c: 628:         CreateBerry();
  4761  000A6C  EC07  F00C         	call	_CreateBerry	;wreg free
  4762  000A70                     l254:
  4763                           
  4764                           ;pictris.c: 630:     for (i=4;i<=snakeLength;i++){
  4765  000A70  0E04               	movlw	4
  4766  000A72  0100               	movlb	0	; () banked
  4767  000A74  6FA0               	movwf	MoveSnakes@i& (0+255),b
  4768  000A76  D023               	goto	l255
  4769  000A78                     
  4770                           ; BSR set to: 0
  4771                           ;pictris.c: 631:         if (positions[0].y == positions[i].y && positions[0].x == posit
      +                          ions[i].x){
  4772                           
  4773                           ; BSR set to: 0
  4774  000A78  51A0               	movf	MoveSnakes@i& (0+255),w,b
  4775  000A7A  0D02               	mullw	2
  4776  000A7C  0E01               	movlw	1
  4777  000A7E  26F3               	addwf	prodl,f,c
  4778  000A80  0E00               	movlw	0
  4779  000A82  22F4               	addwfc	prodh,f,c
  4780  000A84  0E00               	movlw	low _positions
  4781  000A86  24F3               	addwf	prodl,w,c
  4782  000A88  6ED9               	movwf	fsr2l,c
  4783  000A8A  0E01               	movlw	high _positions
  4784  000A8C  20F4               	addwfc	prodh,w,c
  4785  000A8E  6EDA               	movwf	fsr2h,c
  4786  000A90  50DE               	movf	postinc2,w,c
  4787  000A92  0101               	movlb	1	; () banked
  4788  000A94  1901               	xorwf	(_positions+1)& (0+255),w,b
  4789  000A96  A4D8               	btfss	status,2,c
  4790  000A98  D010               	goto	l257
  4791                           
  4792                           ; BSR set to: 1
  4793  000A9A  0100               	movlb	0	; () banked
  4794  000A9C  51A0               	movf	MoveSnakes@i& (0+255),w,b
  4795  000A9E  0D02               	mullw	2
  4796  000AA0  0E00               	movlw	low _positions
  4797  000AA2  24F3               	addwf	prodl,w,c
  4798  000AA4  6ED9               	movwf	fsr2l,c
  4799  000AA6  0E01               	movlw	high _positions
  4800  000AA8  20F4               	addwfc	prodh,w,c
  4801  000AAA  6EDA               	movwf	fsr2h,c
  4802  000AAC  0101               	movlb	1	; () banked
  4803  000AAE  5100               	movf	_positions& (0+255),w,b
  4804  000AB0  18DE               	xorwf	postinc2,w,c
  4805  000AB2  A4D8               	btfss	status,2,c
  4806  000AB4  D002               	goto	l257
  4807                           
  4808                           ; BSR set to: 1
  4809                           ;pictris.c: 632:             EndOfGame = 1;
  4810  000AB6  0E01               	movlw	1
  4811  000AB8  6E12               	movwf	_EndOfGame,c
  4812  000ABA                     l257:
  4813                           
  4814                           ; BSR set to: 1
  4815                           ;pictris.c: 634:     };
  4816                           
  4817                           ; BSR set to: 1
  4818  000ABA  0100               	movlb	0	; () banked
  4819  000ABC  2BA0               	incf	MoveSnakes@i& (0+255),f,b
  4820  000ABE                     l255:
  4821                           
  4822                           ; BSR set to: 0
  4823                           
  4824                           ; BSR set to: 0
  4825  000ABE  51A0               	movf	MoveSnakes@i& (0+255),w,b
  4826  000AC0  5C0B               	subwf	_snakeLength,w,c
  4827  000AC2  B0D8               	btfsc	status,0,c
  4828  000AC4  D7D9               	goto	l256
  4829                           
  4830                           ; BSR set to: 0
  4831                           ;pictris.c: 635:     SnakeGraph();
  4832                           
  4833                           ; BSR set to: 0
  4834  000AC6  ECEE  F006         	call	_SnakeGraph	;wreg free
  4835  000ACA  0012               	return		;funcret
  4836  000ACC                     __end_of_MoveSnakes:
  4837                           	opt stack 0
  4838                           tblptru	equ	0xFF8
  4839                           tblptrh	equ	0xFF7
  4840                           tblptrl	equ	0xFF6
  4841                           tablat	equ	0xFF5
  4842                           prodh	equ	0xFF4
  4843                           prodl	equ	0xFF3
  4844                           indf0	equ	0xFEF
  4845                           postinc0	equ	0xFEE
  4846                           fsr0h	equ	0xFEA
  4847                           fsr0l	equ	0xFE9
  4848                           wreg	equ	0xFE8
  4849                           indf1	equ	0xFE7
  4850                           postinc1	equ	0xFE6
  4851                           postdec1	equ	0xFE5
  4852                           fsr1h	equ	0xFE2
  4853                           fsr1l	equ	0xFE1
  4854                           indf2	equ	0xFDF
  4855                           postinc2	equ	0xFDE
  4856                           postdec2	equ	0xFDD
  4857                           preinc2	equ	0xFDC
  4858                           fsr2h	equ	0xFDA
  4859                           fsr2l	equ	0xFD9
  4860                           status	equ	0xFD8
  4861                           
  4862 ;; *************** function _SnakeGraph *****************
  4863 ;; Defined at:
  4864 ;;		line 572 in file "pictris.c"
  4865 ;; Parameters:    Size  Location     Type
  4866 ;;		None
  4867 ;; Auto vars:     Size  Location     Type
  4868 ;;  i               1   30[COMRAM] unsigned char 
  4869 ;;  j               1   29[COMRAM] unsigned char 
  4870 ;; Return value:  Size  Location     Type
  4871 ;;                  1    wreg      void 
  4872 ;; Registers used:
  4873 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4874 ;; Tracked objects:
  4875 ;;		On entry : 0/0
  4876 ;;		On exit  : 0/0
  4877 ;;		Unchanged: 0/0
  4878 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4879 ;;      Params:         0       0       0       0       0       0       0
  4880 ;;      Locals:         4       0       0       0       0       0       0
  4881 ;;      Temps:          2       0       0       0       0       0       0
  4882 ;;      Totals:         6       0       0       0       0       0       0
  4883 ;;Total ram usage:        6 bytes
  4884 ;; Hardware stack levels used:    1
  4885 ;; Hardware stack levels required when called:    4
  4886 ;; This function calls:
  4887 ;;		_clearArray
  4888 ;;		_pauseMultiplexing
  4889 ;;		_resumeMultiplexing
  4890 ;; This function is called by:
  4891 ;;		_MoveSnakes
  4892 ;; This function uses a non-reentrant model
  4893 ;;
  4894                           
  4895                           	psect	text24
  4896  000DDC                     __ptext24:
  4897                           	opt stack 0
  4898  000DDC                     _SnakeGraph:
  4899                           	opt stack 24
  4900                           
  4901                           ;pictris.c: 574:     uint8_t i;;pictris.c: 575:     uint8_t j;;pictris.c: 576:     pause
      +                          Multiplexing();
  4902                           
  4903                           ;incstack = 0
  4904  000DDC  EC7B  F00D         	call	_pauseMultiplexing	;wreg free
  4905                           
  4906                           ;pictris.c: 577:     clearArray(ObjectData, 8);
  4907  000DE0  0E28               	movlw	low _ObjectData
  4908  000DE2  6E57               	movwf	clearArray@pArray,c
  4909  000DE4  0E00               	movlw	high _ObjectData
  4910  000DE6  6E58               	movwf	clearArray@pArray+1,c
  4911  000DE8  0E00               	movlw	0
  4912  000DEA  6E5A               	movwf	clearArray@size+1,c
  4913  000DEC  0E08               	movlw	8
  4914  000DEE  6E59               	movwf	clearArray@size,c
  4915  000DF0  EC11  F00D         	call	_clearArray	;wreg free
  4916                           
  4917                           ;pictris.c: 578:     for(i=0;i<=snakeLength;i++){
  4918  000DF4  0E00               	movlw	0
  4919  000DF6  6E63               	movwf	SnakeGraph@i,c
  4920  000DF8  D050               	goto	l225
  4921  000DFA                     
  4922                           ;pictris.c: 579:         for(j=0;j<8;j++){
  4923  000DFA  0E00               	movlw	0
  4924  000DFC  6E62               	movwf	SnakeGraph@j,c
  4925  000DFE                     l3665:
  4926  000DFE  0E07               	movlw	7
  4927  000E00  6462               	cpfsgt	SnakeGraph@j,c
  4928  000E02  D001               	goto	l227
  4929  000E04  D049               	goto	u3840
  4930  000E06                     l227:
  4931                           
  4932                           ;pictris.c: 580:             if (positions[i].x == j) {
  4933  000E06  5063               	movf	SnakeGraph@i,w,c
  4934  000E08  0D02               	mullw	2
  4935  000E0A  0E00               	movlw	low _positions
  4936  000E0C  24F3               	addwf	prodl,w,c
  4937  000E0E  6ED9               	movwf	fsr2l,c
  4938  000E10  0E01               	movlw	high _positions
  4939  000E12  20F4               	addwfc	prodh,w,c
  4940  000E14  6EDA               	movwf	fsr2h,c
  4941  000E16  5062               	movf	SnakeGraph@j,w,c
  4942  000E18  18DE               	xorwf	postinc2,w,c
  4943  000E1A  A4D8               	btfss	status,2,c
  4944  000E1C  D03B               	goto	l229
  4945                           
  4946                           ;pictris.c: 581:                 ObjectData[j] = (SnakeYtext[positions[i].y] || ObjectDa
      +                          ta[j]);
  4947  000E1E  0E01               	movlw	1
  4948  000E20  6E60               	movwf	_SnakeGraph$461,c
  4949  000E22  5063               	movf	SnakeGraph@i,w,c
  4950  000E24  0D02               	mullw	2
  4951  000E26  0E01               	movlw	1
  4952  000E28  26F3               	addwf	prodl,f,c
  4953  000E2A  0E00               	movlw	0
  4954  000E2C  22F4               	addwfc	prodh,f,c
  4955  000E2E  0E00               	movlw	low _positions
  4956  000E30  24F3               	addwf	prodl,w,c
  4957  000E32  6ED9               	movwf	fsr2l,c
  4958  000E34  0E01               	movlw	high _positions
  4959  000E36  20F4               	addwfc	prodh,w,c
  4960  000E38  6EDA               	movwf	fsr2h,c
  4961  000E3A  50DF               	movf	indf2,w,c
  4962  000E3C  6E5E               	movwf	??_SnakeGraph& (0+255),c
  4963  000E3E  505E               	movf	??_SnakeGraph,w,c
  4964  000E40  0D02               	mullw	2
  4965  000E42  0E01               	movlw	low _SnakeYtext
  4966  000E44  24F3               	addwf	prodl,w,c
  4967  000E46  6EF6               	movwf	tblptrl,c
  4968  000E48  0E06               	movlw	high _SnakeYtext
  4969  000E4A  20F4               	addwfc	prodh,w,c
  4970  000E4C  6EF7               	movwf	tblptrh,c
  4971  000E4E                     	if	0	;There are less than 3 active tblptr bytes
  4972  000E4E                     	endif
  4973  000E4E  0009               	tblrd		*+
  4974  000E50  50F5               	movf	tablat,w,c
  4975  000E52  0009               	tblrd		*+
  4976  000E54  10F5               	iorwf	tablat,w,c
  4977  000E56  A4D8               	btfss	status,2,c
  4978  000E58  D00E               	goto	l231
  4979  000E5A  5062               	movf	SnakeGraph@j,w,c
  4980  000E5C  0D02               	mullw	2
  4981  000E5E  0E28               	movlw	low _ObjectData
  4982  000E60  24F3               	addwf	prodl,w,c
  4983  000E62  6ED9               	movwf	fsr2l,c
  4984  000E64  0E00               	movlw	high _ObjectData
  4985  000E66  20F4               	addwfc	prodh,w,c
  4986  000E68  6EDA               	movwf	fsr2h,c
  4987  000E6A  50DE               	movf	postinc2,w,c
  4988  000E6C  10DE               	iorwf	postinc2,w,c
  4989  000E6E  A4D8               	btfss	status,2,c
  4990  000E70  D002               	goto	l231
  4991  000E72  0E00               	movlw	0
  4992  000E74  6E60               	movwf	_SnakeGraph$461,c
  4993  000E76                     l231:
  4994  000E76  5060               	movf	_SnakeGraph$461,w,c
  4995  000E78  6E5E               	movwf	??_SnakeGraph& (0+255),c
  4996  000E7A  6A5F               	clrf	(??_SnakeGraph+1)& (0+255),c
  4997  000E7C  5062               	movf	SnakeGraph@j,w,c
  4998  000E7E  0D02               	mullw	2
  4999  000E80  0E28               	movlw	low _ObjectData
  5000  000E82  24F3               	addwf	prodl,w,c
  5001  000E84  6ED9               	movwf	fsr2l,c
  5002  000E86  0E00               	movlw	high _ObjectData
  5003  000E88  20F4               	addwfc	prodh,w,c
  5004  000E8A  6EDA               	movwf	fsr2h,c
  5005  000E8C  C05E  FFDE         	movff	??_SnakeGraph,postinc2
  5006  000E90  C05F  FFDD         	movff	??_SnakeGraph+1,postdec2
  5007  000E94                     l229:
  5008                           
  5009                           ;pictris.c: 583:         }
  5010  000E94  2A62               	incf	SnakeGraph@j,f,c
  5011  000E96  D7B3               	goto	l3665
  5012  000E98                     u3840:
  5013                           
  5014                           ;pictris.c: 584:     }
  5015  000E98  2A63               	incf	SnakeGraph@i,f,c
  5016  000E9A                     l225:
  5017  000E9A  5063               	movf	SnakeGraph@i,w,c
  5018  000E9C  5C0B               	subwf	_snakeLength,w,c
  5019  000E9E  B0D8               	btfsc	status,0,c
  5020  000EA0  D7AC               	goto	l226
  5021                           
  5022                           ;pictris.c: 585:     for(i=0;i<8;i++){
  5023  000EA2  0E00               	movlw	0
  5024  000EA4  6E63               	movwf	SnakeGraph@i,c
  5025  000EA6                     l3691:
  5026  000EA6  0E07               	movlw	7
  5027  000EA8  6463               	cpfsgt	SnakeGraph@i,c
  5028  000EAA  D001               	goto	l233
  5029  000EAC  D033               	goto	u3900
  5030  000EAE                     l233:
  5031                           
  5032                           ;pictris.c: 586:         if (berryX == i){
  5033  000EAE  5063               	movf	SnakeGraph@i,w,c
  5034  000EB0  180A               	xorwf	_berryX,w,c
  5035  000EB2  A4D8               	btfss	status,2,c
  5036  000EB4  D02D               	goto	l235
  5037                           
  5038                           ;pictris.c: 587:             ObjectData[i] = SnakeYtext[berryY] || ObjectData[i];
  5039  000EB6  0E01               	movlw	1
  5040  000EB8  6E61               	movwf	_SnakeGraph$462,c
  5041  000EBA  5009               	movf	_berryY,w,c
  5042  000EBC  0D02               	mullw	2
  5043  000EBE  0E01               	movlw	low _SnakeYtext
  5044  000EC0  24F3               	addwf	prodl,w,c
  5045  000EC2  6EF6               	movwf	tblptrl,c
  5046  000EC4  0E06               	movlw	high _SnakeYtext
  5047  000EC6  20F4               	addwfc	prodh,w,c
  5048  000EC8  6EF7               	movwf	tblptrh,c
  5049  000ECA                     	if	0	;There are less than 3 active tblptr bytes
  5050  000ECA                     	endif
  5051  000ECA  0009               	tblrd		*+
  5052  000ECC  50F5               	movf	tablat,w,c
  5053  000ECE  0009               	tblrd		*+
  5054  000ED0  10F5               	iorwf	tablat,w,c
  5055  000ED2  A4D8               	btfss	status,2,c
  5056  000ED4  D00E               	goto	l237
  5057  000ED6  5063               	movf	SnakeGraph@i,w,c
  5058  000ED8  0D02               	mullw	2
  5059  000EDA  0E28               	movlw	low _ObjectData
  5060  000EDC  24F3               	addwf	prodl,w,c
  5061  000EDE  6ED9               	movwf	fsr2l,c
  5062  000EE0  0E00               	movlw	high _ObjectData
  5063  000EE2  20F4               	addwfc	prodh,w,c
  5064  000EE4  6EDA               	movwf	fsr2h,c
  5065  000EE6  50DE               	movf	postinc2,w,c
  5066  000EE8  10DE               	iorwf	postinc2,w,c
  5067  000EEA  A4D8               	btfss	status,2,c
  5068  000EEC  D002               	goto	l237
  5069  000EEE  0E00               	movlw	0
  5070  000EF0  6E61               	movwf	_SnakeGraph$462,c
  5071  000EF2                     l237:
  5072  000EF2  5061               	movf	_SnakeGraph$462,w,c
  5073  000EF4  6E5E               	movwf	??_SnakeGraph& (0+255),c
  5074  000EF6  6A5F               	clrf	(??_SnakeGraph+1)& (0+255),c
  5075  000EF8  5063               	movf	SnakeGraph@i,w,c
  5076  000EFA  0D02               	mullw	2
  5077  000EFC  0E28               	movlw	low _ObjectData
  5078  000EFE  24F3               	addwf	prodl,w,c
  5079  000F00  6ED9               	movwf	fsr2l,c
  5080  000F02  0E00               	movlw	high _ObjectData
  5081  000F04  20F4               	addwfc	prodh,w,c
  5082  000F06  6EDA               	movwf	fsr2h,c
  5083  000F08  C05E  FFDE         	movff	??_SnakeGraph,postinc2
  5084  000F0C  C05F  FFDD         	movff	??_SnakeGraph+1,postdec2
  5085  000F10                     l235:
  5086                           
  5087                           ;pictris.c: 589:     }
  5088  000F10  2A63               	incf	SnakeGraph@i,f,c
  5089  000F12  D7C9               	goto	l3691
  5090  000F14                     u3900:
  5091                           
  5092                           ;pictris.c: 590:     resumeMultiplexing();
  5093  000F14  EC9B  F00D         	call	_resumeMultiplexing	;wreg free
  5094  000F18  0012               	return		;funcret
  5095  000F1A                     __end_of_SnakeGraph:
  5096                           	opt stack 0
  5097                           tblptru	equ	0xFF8
  5098                           tblptrh	equ	0xFF7
  5099                           tblptrl	equ	0xFF6
  5100                           tablat	equ	0xFF5
  5101                           prodh	equ	0xFF4
  5102                           prodl	equ	0xFF3
  5103                           indf0	equ	0xFEF
  5104                           postinc0	equ	0xFEE
  5105                           fsr0h	equ	0xFEA
  5106                           fsr0l	equ	0xFE9
  5107                           wreg	equ	0xFE8
  5108                           indf1	equ	0xFE7
  5109                           postinc1	equ	0xFE6
  5110                           postdec1	equ	0xFE5
  5111                           fsr1h	equ	0xFE2
  5112                           fsr1l	equ	0xFE1
  5113                           indf2	equ	0xFDF
  5114                           postinc2	equ	0xFDE
  5115                           postdec2	equ	0xFDD
  5116                           preinc2	equ	0xFDC
  5117                           fsr2h	equ	0xFDA
  5118                           fsr2l	equ	0xFD9
  5119                           status	equ	0xFD8
  5120                           
  5121 ;; *************** function _resumeMultiplexing *****************
  5122 ;; Defined at:
  5123 ;;		line 412 in file "pictris.c"
  5124 ;; Parameters:    Size  Location     Type
  5125 ;;		None
  5126 ;; Auto vars:     Size  Location     Type
  5127 ;;		None
  5128 ;; Return value:  Size  Location     Type
  5129 ;;                  1    wreg      void 
  5130 ;; Registers used:
  5131 ;;		wreg, status,2
  5132 ;; Tracked objects:
  5133 ;;		On entry : 0/0
  5134 ;;		On exit  : 0/0
  5135 ;;		Unchanged: 0/0
  5136 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5137 ;;      Params:         0       0       0       0       0       0       0
  5138 ;;      Locals:         0       0       0       0       0       0       0
  5139 ;;      Temps:          0       0       0       0       0       0       0
  5140 ;;      Totals:         0       0       0       0       0       0       0
  5141 ;;Total ram usage:        0 bytes
  5142 ;; Hardware stack levels used:    1
  5143 ;; Hardware stack levels required when called:    2
  5144 ;; This function calls:
  5145 ;;		Nothing
  5146 ;; This function is called by:
  5147 ;;		_SnakeGraph
  5148 ;;		_moveObjectDown
  5149 ;;		_checkButtons
  5150 ;;		_mainGameLoop
  5151 ;;		_splash_screen
  5152 ;;		_show_score
  5153 ;; This function uses a non-reentrant model
  5154 ;;
  5155                           
  5156                           	psect	text25
  5157  001B36                     __ptext25:
  5158                           	opt stack 0
  5159  001B36                     _resumeMultiplexing:
  5160                           	opt stack 27
  5161                           
  5162                           ;pictris.c: 414:     UpdateScreen = 1;
  5163                           
  5164                           ;incstack = 0
  5165  001B36  0E01               	movlw	1
  5166  001B38  6E06               	movwf	_UpdateScreen,c	;volatile
  5167  001B3A  0012               	return		;funcret
  5168  001B3C                     __end_of_resumeMultiplexing:
  5169                           	opt stack 0
  5170                           tblptru	equ	0xFF8
  5171                           tblptrh	equ	0xFF7
  5172                           tblptrl	equ	0xFF6
  5173                           tablat	equ	0xFF5
  5174                           prodh	equ	0xFF4
  5175                           prodl	equ	0xFF3
  5176                           indf0	equ	0xFEF
  5177                           postinc0	equ	0xFEE
  5178                           fsr0h	equ	0xFEA
  5179                           fsr0l	equ	0xFE9
  5180                           wreg	equ	0xFE8
  5181                           indf1	equ	0xFE7
  5182                           postinc1	equ	0xFE6
  5183                           postdec1	equ	0xFE5
  5184                           fsr1h	equ	0xFE2
  5185                           fsr1l	equ	0xFE1
  5186                           indf2	equ	0xFDF
  5187                           postinc2	equ	0xFDE
  5188                           postdec2	equ	0xFDD
  5189                           preinc2	equ	0xFDC
  5190                           fsr2h	equ	0xFDA
  5191                           fsr2l	equ	0xFD9
  5192                           status	equ	0xFD8
  5193                           
  5194 ;; *************** function _pauseMultiplexing *****************
  5195 ;; Defined at:
  5196 ;;		line 401 in file "pictris.c"
  5197 ;; Parameters:    Size  Location     Type
  5198 ;;		None
  5199 ;; Auto vars:     Size  Location     Type
  5200 ;;		None
  5201 ;; Return value:  Size  Location     Type
  5202 ;;                  1    wreg      void 
  5203 ;; Registers used:
  5204 ;;		wreg, status,2, cstack
  5205 ;; Tracked objects:
  5206 ;;		On entry : 0/0
  5207 ;;		On exit  : 0/0
  5208 ;;		Unchanged: 0/0
  5209 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5210 ;;      Params:         0       0       0       0       0       0       0
  5211 ;;      Locals:         0       0       0       0       0       0       0
  5212 ;;      Temps:          0       0       0       0       0       0       0
  5213 ;;      Totals:         0       0       0       0       0       0       0
  5214 ;;Total ram usage:        0 bytes
  5215 ;; Hardware stack levels used:    1
  5216 ;; Hardware stack levels required when called:    3
  5217 ;; This function calls:
  5218 ;;		_waitForInterrupt
  5219 ;; This function is called by:
  5220 ;;		_SnakeGraph
  5221 ;;		_moveObjectDown
  5222 ;;		_checkButtons
  5223 ;;		_mainGameLoop
  5224 ;;		_splash_screen
  5225 ;;		_show_score
  5226 ;; This function uses a non-reentrant model
  5227 ;;
  5228                           
  5229                           	psect	text26
  5230  001AF6                     __ptext26:
  5231                           	opt stack 0
  5232  001AF6                     _pauseMultiplexing:
  5233                           	opt stack 26
  5234                           
  5235                           ;pictris.c: 403:     if (UpdateScreen)
  5236                           
  5237                           ;incstack = 0
  5238  001AF6  5006               	movf	_UpdateScreen,w,c	;volatile
  5239  001AF8  B4D8               	btfsc	status,2,c
  5240  001AFA  0012               	return	
  5241                           
  5242                           ;pictris.c: 404:     {;pictris.c: 405:         waitForInterrupt();
  5243  001AFC  EC8B  F00D         	call	_waitForInterrupt	;wreg free
  5244                           
  5245                           ;pictris.c: 406:         UpdateScreen = 0;
  5246  001B00  0E00               	movlw	0
  5247  001B02  6E06               	movwf	_UpdateScreen,c	;volatile
  5248  001B04  0012               	return	
  5249  001B06                     __end_of_pauseMultiplexing:
  5250                           	opt stack 0
  5251                           tblptru	equ	0xFF8
  5252                           tblptrh	equ	0xFF7
  5253                           tblptrl	equ	0xFF6
  5254                           tablat	equ	0xFF5
  5255                           prodh	equ	0xFF4
  5256                           prodl	equ	0xFF3
  5257                           indf0	equ	0xFEF
  5258                           postinc0	equ	0xFEE
  5259                           fsr0h	equ	0xFEA
  5260                           fsr0l	equ	0xFE9
  5261                           wreg	equ	0xFE8
  5262                           indf1	equ	0xFE7
  5263                           postinc1	equ	0xFE6
  5264                           postdec1	equ	0xFE5
  5265                           fsr1h	equ	0xFE2
  5266                           fsr1l	equ	0xFE1
  5267                           indf2	equ	0xFDF
  5268                           postinc2	equ	0xFDE
  5269                           postdec2	equ	0xFDD
  5270                           preinc2	equ	0xFDC
  5271                           fsr2h	equ	0xFDA
  5272                           fsr2l	equ	0xFD9
  5273                           status	equ	0xFD8
  5274                           
  5275 ;; *************** function _waitForInterrupt *****************
  5276 ;; Defined at:
  5277 ;;		line 393 in file "pictris.c"
  5278 ;; Parameters:    Size  Location     Type
  5279 ;;		None
  5280 ;; Auto vars:     Size  Location     Type
  5281 ;;		None
  5282 ;; Return value:  Size  Location     Type
  5283 ;;                  1    wreg      void 
  5284 ;; Registers used:
  5285 ;;		wreg, status,2
  5286 ;; Tracked objects:
  5287 ;;		On entry : 0/0
  5288 ;;		On exit  : 0/0
  5289 ;;		Unchanged: 0/0
  5290 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5291 ;;      Params:         0       0       0       0       0       0       0
  5292 ;;      Locals:         0       0       0       0       0       0       0
  5293 ;;      Temps:          0       0       0       0       0       0       0
  5294 ;;      Totals:         0       0       0       0       0       0       0
  5295 ;;Total ram usage:        0 bytes
  5296 ;; Hardware stack levels used:    1
  5297 ;; Hardware stack levels required when called:    2
  5298 ;; This function calls:
  5299 ;;		Nothing
  5300 ;; This function is called by:
  5301 ;;		_pauseMultiplexing
  5302 ;; This function uses a non-reentrant model
  5303 ;;
  5304                           
  5305                           	psect	text27
  5306  001B16                     __ptext27:
  5307                           	opt stack 0
  5308  001B16                     _waitForInterrupt:
  5309                           	opt stack 26
  5310                           
  5311                           ;pictris.c: 395:     InterruptComplete = 0;
  5312                           
  5313                           ;incstack = 0
  5314  001B16  0E00               	movlw	0
  5315  001B18  6E05               	movwf	_InterruptComplete,c	;volatile
  5316  001B1A                     
  5317                           ;pictris.c: 396:     while (!InterruptComplete)
  5318                           
  5319                           ;pictris.c: 397:         continue;
  5320  001B1A  5005               	movf	_InterruptComplete,w,c	;volatile
  5321  001B1C  A4D8               	btfss	status,2,c
  5322  001B1E  0012               	return	
  5323  001B20  D7FC               	goto	l176
  5324  001B22                     __end_of_waitForInterrupt:
  5325                           	opt stack 0
  5326                           tblptru	equ	0xFF8
  5327                           tblptrh	equ	0xFF7
  5328                           tblptrl	equ	0xFF6
  5329                           tablat	equ	0xFF5
  5330                           prodh	equ	0xFF4
  5331                           prodl	equ	0xFF3
  5332                           indf0	equ	0xFEF
  5333                           postinc0	equ	0xFEE
  5334                           fsr0h	equ	0xFEA
  5335                           fsr0l	equ	0xFE9
  5336                           wreg	equ	0xFE8
  5337                           indf1	equ	0xFE7
  5338                           postinc1	equ	0xFE6
  5339                           postdec1	equ	0xFE5
  5340                           fsr1h	equ	0xFE2
  5341                           fsr1l	equ	0xFE1
  5342                           indf2	equ	0xFDF
  5343                           postinc2	equ	0xFDE
  5344                           postdec2	equ	0xFDD
  5345                           preinc2	equ	0xFDC
  5346                           fsr2h	equ	0xFDA
  5347                           fsr2l	equ	0xFD9
  5348                           status	equ	0xFD8
  5349                           
  5350 ;; *************** function _clearArray *****************
  5351 ;; Defined at:
  5352 ;;		line 503 in file "pictris.c"
  5353 ;; Parameters:    Size  Location     Type
  5354 ;;  pArray          2   18[COMRAM] PTR volatile unsigned sh
  5355 ;;		 -> tmpObjectData(16), BackgroundData(16), ObjectData(16), 
  5356 ;;  size            2   20[COMRAM] unsigned int 
  5357 ;; Auto vars:     Size  Location     Type
  5358 ;;  i               1   24[COMRAM] unsigned char 
  5359 ;; Return value:  Size  Location     Type
  5360 ;;                  1    wreg      void 
  5361 ;; Registers used:
  5362 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  5363 ;; Tracked objects:
  5364 ;;		On entry : 0/0
  5365 ;;		On exit  : 0/0
  5366 ;;		Unchanged: 0/0
  5367 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5368 ;;      Params:         4       0       0       0       0       0       0
  5369 ;;      Locals:         1       0       0       0       0       0       0
  5370 ;;      Temps:          2       0       0       0       0       0       0
  5371 ;;      Totals:         7       0       0       0       0       0       0
  5372 ;;Total ram usage:        7 bytes
  5373 ;; Hardware stack levels used:    1
  5374 ;; Hardware stack levels required when called:    2
  5375 ;; This function calls:
  5376 ;;		Nothing
  5377 ;; This function is called by:
  5378 ;;		_SnakeGraph
  5379 ;;		_newRotation
  5380 ;;		_initialise_globals
  5381 ;;		_mainGameLoop
  5382 ;;		_show_score
  5383 ;; This function uses a non-reentrant model
  5384 ;;
  5385                           
  5386                           	psect	text28
  5387  001A22                     __ptext28:
  5388                           	opt stack 0
  5389  001A22                     _clearArray:
  5390                           	opt stack 26
  5391                           
  5392                           ;pictris.c: 503: void clearArray(volatile uint16_t *pArray, size_t size);pictris.c: 504:
      +                           {;pictris.c: 505:     byte i;;pictris.c: 506:     for (i = 0; i < size; i++)
  5393                           
  5394                           ;incstack = 0
  5395  001A22  0E00               	movlw	0
  5396  001A24  6E5D               	movwf	clearArray@i,c
  5397  001A26  D00D               	goto	l202
  5398  001A28                     
  5399                           ;pictris.c: 507:         pArray[i] = 0;
  5400  001A28  505D               	movf	clearArray@i,w,c
  5401  001A2A  0D02               	mullw	2
  5402  001A2C  50F3               	movf	prodl,w,c
  5403  001A2E  2457               	addwf	clearArray@pArray,w,c
  5404  001A30  6ED9               	movwf	fsr2l,c
  5405  001A32  50F4               	movf	prodh,w,c
  5406  001A34  2058               	addwfc	clearArray@pArray+1,w,c
  5407  001A36  6EDA               	movwf	fsr2h,c
  5408  001A38  0E00               	movlw	0
  5409  001A3A  6EDE               	movwf	postinc2,c
  5410  001A3C  0E00               	movlw	0
  5411  001A3E  6EDD               	movwf	postdec2,c
  5412  001A40  2A5D               	incf	clearArray@i,f,c
  5413  001A42                     l202:
  5414  001A42  505D               	movf	clearArray@i,w,c
  5415  001A44  6E5B               	movwf	??_clearArray& (0+255),c
  5416  001A46  6A5C               	clrf	(??_clearArray+1)& (0+255),c
  5417  001A48  5059               	movf	clearArray@size,w,c
  5418  001A4A  5C5B               	subwf	??_clearArray,w,c
  5419  001A4C  505A               	movf	clearArray@size+1,w,c
  5420  001A4E  585C               	subwfb	??_clearArray+1,w,c
  5421  001A50  B0D8               	btfsc	status,0,c
  5422  001A52  0012               	return	
  5423  001A54  D7E9               	goto	l203
  5424  001A56                     __end_of_clearArray:
  5425                           	opt stack 0
  5426                           tblptru	equ	0xFF8
  5427                           tblptrh	equ	0xFF7
  5428                           tblptrl	equ	0xFF6
  5429                           tablat	equ	0xFF5
  5430                           prodh	equ	0xFF4
  5431                           prodl	equ	0xFF3
  5432                           indf0	equ	0xFEF
  5433                           postinc0	equ	0xFEE
  5434                           fsr0h	equ	0xFEA
  5435                           fsr0l	equ	0xFE9
  5436                           wreg	equ	0xFE8
  5437                           indf1	equ	0xFE7
  5438                           postinc1	equ	0xFE6
  5439                           postdec1	equ	0xFE5
  5440                           fsr1h	equ	0xFE2
  5441                           fsr1l	equ	0xFE1
  5442                           indf2	equ	0xFDF
  5443                           postinc2	equ	0xFDE
  5444                           postdec2	equ	0xFDD
  5445                           preinc2	equ	0xFDC
  5446                           fsr2h	equ	0xFDA
  5447                           fsr2l	equ	0xFD9
  5448                           status	equ	0xFD8
  5449                           
  5450 ;; *************** function _CreateBerry *****************
  5451 ;; Defined at:
  5452 ;;		line 552 in file "pictris.c"
  5453 ;; Parameters:    Size  Location     Type
  5454 ;;		None
  5455 ;; Auto vars:     Size  Location     Type
  5456 ;;  i               1   26[COMRAM] unsigned char 
  5457 ;;  randomGood      1   25[COMRAM] _Bool 
  5458 ;; Return value:  Size  Location     Type
  5459 ;;                  1    wreg      void 
  5460 ;; Registers used:
  5461 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  5462 ;; Tracked objects:
  5463 ;;		On entry : 0/0
  5464 ;;		On exit  : 0/0
  5465 ;;		Unchanged: 0/0
  5466 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5467 ;;      Params:         0       0       0       0       0       0       0
  5468 ;;      Locals:         2       0       0       0       0       0       0
  5469 ;;      Temps:          1       0       0       0       0       0       0
  5470 ;;      Totals:         3       0       0       0       0       0       0
  5471 ;;Total ram usage:        3 bytes
  5472 ;; Hardware stack levels used:    1
  5473 ;; Hardware stack levels required when called:    4
  5474 ;; This function calls:
  5475 ;;		_genBerry
  5476 ;; This function is called by:
  5477 ;;		_MoveSnakes
  5478 ;;		_initialise_globals
  5479 ;; This function uses a non-reentrant model
  5480 ;;
  5481                           
  5482                           	psect	text29
  5483  00180E                     __ptext29:
  5484                           	opt stack 0
  5485  00180E                     _CreateBerry:
  5486                           	opt stack 24
  5487                           
  5488                           ;pictris.c: 554:     _Bool randomGood;;pictris.c: 555:     uint8_t i;;pictris.c: 556:   
      +                            randomGood = 1;
  5489                           
  5490                           ;incstack = 0
  5491  00180E  0E01               	movlw	1
  5492  001810  6E5E               	movwf	CreateBerry@randomGood,c
  5493  001812                     l216:
  5494                           
  5495                           ;pictris.c: 558:     {;pictris.c: 559:         randomGood = 0;
  5496  001812  0E00               	movlw	0
  5497  001814  6E5E               	movwf	CreateBerry@randomGood,c
  5498                           
  5499                           ;pictris.c: 560:         berryX = genBerry();
  5500  001816  EC83  F00D         	call	_genBerry	;wreg free
  5501  00181A  6E0A               	movwf	_berryX,c
  5502                           
  5503                           ;pictris.c: 561:         berryY = genBerry();
  5504  00181C  EC83  F00D         	call	_genBerry	;wreg free
  5505  001820  6E09               	movwf	_berryY,c
  5506                           
  5507                           ;pictris.c: 562:         for(i=0;i<snakeLength;i++)
  5508  001822  0E00               	movlw	0
  5509  001824  6E5F               	movwf	CreateBerry@i,c
  5510  001826  D01F               	goto	l217
  5511  001828                     
  5512                           ;pictris.c: 563:         {;pictris.c: 564:             if (berryX == positions[i].x && b
      +                          erryY == positions[i].y)
  5513  001828  505F               	movf	CreateBerry@i,w,c
  5514  00182A  0D02               	mullw	2
  5515  00182C  0E00               	movlw	low _positions
  5516  00182E  24F3               	addwf	prodl,w,c
  5517  001830  6ED9               	movwf	fsr2l,c
  5518  001832  0E01               	movlw	high _positions
  5519  001834  20F4               	addwfc	prodh,w,c
  5520  001836  6EDA               	movwf	fsr2h,c
  5521  001838  500A               	movf	_berryX,w,c
  5522  00183A  18DE               	xorwf	postinc2,w,c
  5523  00183C  A4D8               	btfss	status,2,c
  5524  00183E  D012               	goto	l219
  5525  001840  505F               	movf	CreateBerry@i,w,c
  5526  001842  0D02               	mullw	2
  5527  001844  0E01               	movlw	1
  5528  001846  26F3               	addwf	prodl,f,c
  5529  001848  0E00               	movlw	0
  5530  00184A  22F4               	addwfc	prodh,f,c
  5531  00184C  0E00               	movlw	low _positions
  5532  00184E  24F3               	addwf	prodl,w,c
  5533  001850  6ED9               	movwf	fsr2l,c
  5534  001852  0E01               	movlw	high _positions
  5535  001854  20F4               	addwfc	prodh,w,c
  5536  001856  6EDA               	movwf	fsr2h,c
  5537  001858  5009               	movf	_berryY,w,c
  5538  00185A  18DE               	xorwf	postinc2,w,c
  5539  00185C  A4D8               	btfss	status,2,c
  5540  00185E  D002               	goto	l219
  5541                           
  5542                           ;pictris.c: 565:             {;pictris.c: 566:                 randomGood = 1;
  5543  001860  0E01               	movlw	1
  5544  001862  6E5E               	movwf	CreateBerry@randomGood,c
  5545  001864                     l219:
  5546                           
  5547                           ;pictris.c: 568:         }
  5548  001864  2A5F               	incf	CreateBerry@i,f,c
  5549  001866                     l217:
  5550  001866  500B               	movf	_snakeLength,w,c
  5551  001868  5C5F               	subwf	CreateBerry@i,w,c
  5552  00186A  A0D8               	btfss	status,0,c
  5553  00186C  D7DD               	goto	l218
  5554                           
  5555                           ;pictris.c: 569:     } while (randomGood == 1);
  5556  00186E  045E               	decf	CreateBerry@randomGood,w,c
  5557  001870  A4D8               	btfss	status,2,c
  5558  001872  0012               	return	
  5559  001874  D7CE               	goto	l216
  5560  001876                     __end_of_CreateBerry:
  5561                           	opt stack 0
  5562                           tblptru	equ	0xFF8
  5563                           tblptrh	equ	0xFF7
  5564                           tblptrl	equ	0xFF6
  5565                           tablat	equ	0xFF5
  5566                           prodh	equ	0xFF4
  5567                           prodl	equ	0xFF3
  5568                           indf0	equ	0xFEF
  5569                           postinc0	equ	0xFEE
  5570                           fsr0h	equ	0xFEA
  5571                           fsr0l	equ	0xFE9
  5572                           wreg	equ	0xFE8
  5573                           indf1	equ	0xFE7
  5574                           postinc1	equ	0xFE6
  5575                           postdec1	equ	0xFE5
  5576                           fsr1h	equ	0xFE2
  5577                           fsr1l	equ	0xFE1
  5578                           indf2	equ	0xFDF
  5579                           postinc2	equ	0xFDE
  5580                           postdec2	equ	0xFDD
  5581                           preinc2	equ	0xFDC
  5582                           fsr2h	equ	0xFDA
  5583                           fsr2l	equ	0xFD9
  5584                           status	equ	0xFD8
  5585                           
  5586 ;; *************** function _genBerry *****************
  5587 ;; Defined at:
  5588 ;;		line 546 in file "pictris.c"
  5589 ;; Parameters:    Size  Location     Type
  5590 ;;		None
  5591 ;; Auto vars:     Size  Location     Type
  5592 ;;  temp            1   23[COMRAM] unsigned char 
  5593 ;; Return value:  Size  Location     Type
  5594 ;;                  1    wreg      unsigned char 
  5595 ;; Registers used:
  5596 ;;		wreg, status,2, status,0, cstack
  5597 ;; Tracked objects:
  5598 ;;		On entry : 0/0
  5599 ;;		On exit  : 0/0
  5600 ;;		Unchanged: 0/0
  5601 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5602 ;;      Params:         0       0       0       0       0       0       0
  5603 ;;      Locals:         1       0       0       0       0       0       0
  5604 ;;      Temps:          0       0       0       0       0       0       0
  5605 ;;      Totals:         1       0       0       0       0       0       0
  5606 ;;Total ram usage:        1 bytes
  5607 ;; Hardware stack levels used:    1
  5608 ;; Hardware stack levels required when called:    3
  5609 ;; This function calls:
  5610 ;;		_rnd_get_num
  5611 ;; This function is called by:
  5612 ;;		_CreateBerry
  5613 ;; This function uses a non-reentrant model
  5614 ;;
  5615                           
  5616                           	psect	text30
  5617  001B06                     __ptext30:
  5618                           	opt stack 0
  5619  001B06                     _genBerry:
  5620                           	opt stack 24
  5621                           
  5622                           ;pictris.c: 547:     uint8_t temp;;pictris.c: 548:     temp = rnd_get_num();
  5623                           
  5624                           ;incstack = 0
  5625  001B06  EC92  F00C         	call	_rnd_get_num	;wreg free
  5626  001B0A  6E5C               	movwf	genBerry@temp,c
  5627                           
  5628                           ;pictris.c: 549:     temp = temp % 8;
  5629  001B0C  505C               	movf	genBerry@temp,w,c
  5630  001B0E  0B07               	andlw	7
  5631  001B10  6E5C               	movwf	genBerry@temp,c
  5632                           
  5633                           ;pictris.c: 550:     return temp;
  5634  001B12  505C               	movf	genBerry@temp,w,c
  5635  001B14  0012               	return	
  5636  001B16                     __end_of_genBerry:
  5637                           	opt stack 0
  5638                           tblptru	equ	0xFF8
  5639                           tblptrh	equ	0xFF7
  5640                           tblptrl	equ	0xFF6
  5641                           tablat	equ	0xFF5
  5642                           prodh	equ	0xFF4
  5643                           prodl	equ	0xFF3
  5644                           indf0	equ	0xFEF
  5645                           postinc0	equ	0xFEE
  5646                           fsr0h	equ	0xFEA
  5647                           fsr0l	equ	0xFE9
  5648                           wreg	equ	0xFE8
  5649                           indf1	equ	0xFE7
  5650                           postinc1	equ	0xFE6
  5651                           postdec1	equ	0xFE5
  5652                           fsr1h	equ	0xFE2
  5653                           fsr1l	equ	0xFE1
  5654                           indf2	equ	0xFDF
  5655                           postinc2	equ	0xFDE
  5656                           postdec2	equ	0xFDD
  5657                           preinc2	equ	0xFDC
  5658                           fsr2h	equ	0xFDA
  5659                           fsr2l	equ	0xFD9
  5660                           status	equ	0xFD8
  5661                           
  5662 ;; *************** function _rnd_get_num *****************
  5663 ;; Defined at:
  5664 ;;		line 8 in file "randgen.c"
  5665 ;; Parameters:    Size  Location     Type
  5666 ;;		None
  5667 ;; Auto vars:     Size  Location     Type
  5668 ;;  b               2   21[COMRAM] unsigned int 
  5669 ;; Return value:  Size  Location     Type
  5670 ;;                  1    wreg      unsigned char 
  5671 ;; Registers used:
  5672 ;;		wreg, status,2, status,0
  5673 ;; Tracked objects:
  5674 ;;		On entry : 0/0
  5675 ;;		On exit  : 0/0
  5676 ;;		Unchanged: 0/0
  5677 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5678 ;;      Params:         0       0       0       0       0       0       0
  5679 ;;      Locals:         2       0       0       0       0       0       0
  5680 ;;      Temps:          3       0       0       0       0       0       0
  5681 ;;      Totals:         5       0       0       0       0       0       0
  5682 ;;Total ram usage:        5 bytes
  5683 ;; Hardware stack levels used:    1
  5684 ;; Hardware stack levels required when called:    2
  5685 ;; This function calls:
  5686 ;;		Nothing
  5687 ;; This function is called by:
  5688 ;;		_selectNextObject
  5689 ;;		_genBerry
  5690 ;; This function uses a non-reentrant model
  5691 ;;
  5692                           
  5693                           	psect	text31
  5694  001924                     __ptext31:
  5695                           	opt stack 0
  5696  001924                     _rnd_get_num:
  5697                           	opt stack 26
  5698                           
  5699                           ;randgen.c: 11:     unsigned b = ((_lfsr >> 0) ^ (_lfsr >> 2) ^ (_lfsr >> 3) ^ (_lfsr >>
      +                           4) ) & 1;
  5700                           
  5701                           ;incstack = 0
  5702  001924  C06C  F057         	movff	__lfsr,??_rnd_get_num
  5703  001928  3A57               	swapf	??_rnd_get_num,f,c
  5704  00192A  0E0F               	movlw	15
  5705  00192C  1657               	andwf	??_rnd_get_num,f,c
  5706  00192E  C06C  F058         	movff	__lfsr,??_rnd_get_num+1
  5707  001932  90D8               	bcf	status,0,c
  5708  001934  3258               	rrcf	??_rnd_get_num+1,f,c
  5709  001936  90D8               	bcf	status,0,c
  5710  001938  3258               	rrcf	??_rnd_get_num+1,f,c
  5711  00193A  90D8               	bcf	status,0,c
  5712  00193C  3258               	rrcf	??_rnd_get_num+1,f,c
  5713  00193E  406C               	rrncf	__lfsr,w,c
  5714  001940  42E8               	rrncf	wreg,f,c
  5715  001942  0B3F               	andlw	63
  5716  001944  1858               	xorwf	??_rnd_get_num+1,w,c
  5717  001946  1857               	xorwf	??_rnd_get_num,w,c
  5718  001948  186C               	xorwf	__lfsr,w,c
  5719  00194A  6E59               	movwf	(??_rnd_get_num+2)& (0+255),c
  5720  00194C  0E01               	movlw	1
  5721  00194E  1659               	andwf	??_rnd_get_num+2,f,c
  5722  001950  5059               	movf	??_rnd_get_num+2,w,c
  5723  001952  6E5A               	movwf	rnd_get_num@b,c
  5724  001954  6A5B               	clrf	rnd_get_num@b+1,c
  5725                           
  5726                           ;randgen.c: 12:     _lfsr = (_lfsr >> 1) | (b << 7);
  5727  001956  6A57               	clrf	??_rnd_get_num& (0+255),c
  5728  001958  A05A               	btfss	rnd_get_num@b,0,c
  5729  00195A  D001               	bra	u3425
  5730  00195C  8E57               	bsf	??_rnd_get_num& (0+255),7,c
  5731  00195E                     u3425:
  5732  00195E  90D8               	bcf	status,0,c
  5733  001960  306C               	rrcf	__lfsr,w,c
  5734  001962  1057               	iorwf	??_rnd_get_num,w,c
  5735  001964  6E6C               	movwf	__lfsr,c
  5736                           
  5737                           ;randgen.c: 13:     return _lfsr;
  5738  001966  506C               	movf	__lfsr,w,c
  5739  001968  0012               	return	
  5740  00196A                     __end_of_rnd_get_num:
  5741                           	opt stack 0
  5742                           tblptru	equ	0xFF8
  5743                           tblptrh	equ	0xFF7
  5744                           tblptrl	equ	0xFF6
  5745                           tablat	equ	0xFF5
  5746                           prodh	equ	0xFF4
  5747                           prodl	equ	0xFF3
  5748                           indf0	equ	0xFEF
  5749                           postinc0	equ	0xFEE
  5750                           fsr0h	equ	0xFEA
  5751                           fsr0l	equ	0xFE9
  5752                           wreg	equ	0xFE8
  5753                           indf1	equ	0xFE7
  5754                           postinc1	equ	0xFE6
  5755                           postdec1	equ	0xFE5
  5756                           fsr1h	equ	0xFE2
  5757                           fsr1l	equ	0xFE1
  5758                           indf2	equ	0xFDF
  5759                           postinc2	equ	0xFDE
  5760                           postdec2	equ	0xFDD
  5761                           preinc2	equ	0xFDC
  5762                           fsr2h	equ	0xFDA
  5763                           fsr2l	equ	0xFD9
  5764                           status	equ	0xFD8
  5765                           
  5766 ;; *************** function _initialise_hardware *****************
  5767 ;; Defined at:
  5768 ;;		line 1025 in file "pictris.c"
  5769 ;; Parameters:    Size  Location     Type
  5770 ;;		None
  5771 ;; Auto vars:     Size  Location     Type
  5772 ;;		None
  5773 ;; Return value:  Size  Location     Type
  5774 ;;                  1    wreg      void 
  5775 ;; Registers used:
  5776 ;;		wreg, status,2, cstack
  5777 ;; Tracked objects:
  5778 ;;		On entry : 0/0
  5779 ;;		On exit  : 0/0
  5780 ;;		Unchanged: 0/0
  5781 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5782 ;;      Params:         0       0       0       0       0       0       0
  5783 ;;      Locals:         0       0       0       0       0       0       0
  5784 ;;      Temps:          0       0       0       0       0       0       0
  5785 ;;      Totals:         0       0       0       0       0       0       0
  5786 ;;Total ram usage:        0 bytes
  5787 ;; Hardware stack levels used:    1
  5788 ;; Hardware stack levels required when called:    3
  5789 ;; This function calls:
  5790 ;;		_initialise_TMR0
  5791 ;; This function is called by:
  5792 ;;		_main
  5793 ;; This function uses a non-reentrant model
  5794 ;;
  5795                           
  5796                           	psect	text32
  5797  00196A                     __ptext32:
  5798                           	opt stack 0
  5799  00196A                     _initialise_hardware:
  5800                           	opt stack 27
  5801                           
  5802                           ;pictris.c: 1028:     OSCCONbits.IDLEN = 0;
  5803                           
  5804                           ;incstack = 0
  5805  00196A  9ED3               	bcf	4051,7,c	;volatile
  5806                           
  5807                           ;pictris.c: 1029:     OSCCONbits.IRCF = 0x7;
  5808  00196C  88D3               	bsf	4051,4,c	;volatile
  5809  00196E  8AD3               	bsf	4051,5,c	;volatile
  5810  001970  8CD3               	bsf	4051,6,c	;volatile
  5811                           
  5812                           ;pictris.c: 1030:     OSCCONbits.SCS = 0x2;
  5813  001972  50D3               	movf	4051,w,c	;volatile
  5814  001974  0BFC               	andlw	-4
  5815  001976  0902               	iorlw	2
  5816  001978  6ED3               	movwf	4051,c	;volatile
  5817                           
  5818                           ;pictris.c: 1033:     ADCON1bits.PCFG = 0x0F;
  5819  00197A  80C1               	bsf	4033,0,c	;volatile
  5820  00197C  82C1               	bsf	4033,1,c	;volatile
  5821  00197E  84C1               	bsf	4033,2,c	;volatile
  5822  001980  86C1               	bsf	4033,3,c	;volatile
  5823                           
  5824                           ;pictris.c: 1036:     DDRA = 0x00; PORTA = 0x00;
  5825  001982  0E00               	movlw	0
  5826  001984  6E92               	movwf	3986,c	;volatile
  5827  001986  0E00               	movlw	0
  5828  001988  6E80               	movwf	3968,c	;volatile
  5829                           
  5830                           ;pictris.c: 1038:     DDRB = 0xFF; PORTB = 0x00; INTCON2bits.RBPU = 0;
  5831  00198A  6893               	setf	3987,c	;volatile
  5832  00198C  0E00               	movlw	0
  5833  00198E  6E81               	movwf	3969,c	;volatile
  5834  001990  9EF1               	bcf	intcon2,7,c	;volatile
  5835                           
  5836                           ;pictris.c: 1042:     DDRC = 0x00; PORTC = 0x00;
  5837  001992  0E00               	movlw	0
  5838  001994  6E94               	movwf	3988,c	;volatile
  5839  001996  0E00               	movlw	0
  5840  001998  6E82               	movwf	3970,c	;volatile
  5841                           
  5842                           ;pictris.c: 1043:     DDRD = 0x00; PORTD = 0x00;
  5843  00199A  0E00               	movlw	0
  5844  00199C  6E95               	movwf	3989,c	;volatile
  5845  00199E  0E00               	movlw	0
  5846  0019A0  6E83               	movwf	3971,c	;volatile
  5847                           
  5848                           ;pictris.c: 1046:     initialise_TMR0();
  5849  0019A2  EC3E  F00D         	call	_initialise_TMR0	;wreg free
  5850                           
  5851                           ;pictris.c: 1048:     IPEN = 0;
  5852  0019A6  9ED0               	bcf	4048,7,c	;volatile
  5853                           
  5854                           ;pictris.c: 1049:     GIE = 1;
  5855  0019A8  8EF2               	bsf	intcon,7,c	;volatile
  5856  0019AA  0012               	return		;funcret
  5857  0019AC                     __end_of_initialise_hardware:
  5858                           	opt stack 0
  5859                           tblptru	equ	0xFF8
  5860                           tblptrh	equ	0xFF7
  5861                           tblptrl	equ	0xFF6
  5862                           tablat	equ	0xFF5
  5863                           prodh	equ	0xFF4
  5864                           prodl	equ	0xFF3
  5865                           intcon	equ	0xFF2
  5866                           intcon2	equ	0xFF1
  5867                           indf0	equ	0xFEF
  5868                           postinc0	equ	0xFEE
  5869                           fsr0h	equ	0xFEA
  5870                           fsr0l	equ	0xFE9
  5871                           wreg	equ	0xFE8
  5872                           indf1	equ	0xFE7
  5873                           postinc1	equ	0xFE6
  5874                           postdec1	equ	0xFE5
  5875                           fsr1h	equ	0xFE2
  5876                           fsr1l	equ	0xFE1
  5877                           indf2	equ	0xFDF
  5878                           postinc2	equ	0xFDE
  5879                           postdec2	equ	0xFDD
  5880                           preinc2	equ	0xFDC
  5881                           fsr2h	equ	0xFDA
  5882                           fsr2l	equ	0xFD9
  5883                           status	equ	0xFD8
  5884                           
  5885 ;; *************** function _initialise_TMR0 *****************
  5886 ;; Defined at:
  5887 ;;		line 1013 in file "pictris.c"
  5888 ;; Parameters:    Size  Location     Type
  5889 ;;		None
  5890 ;; Auto vars:     Size  Location     Type
  5891 ;;		None
  5892 ;; Return value:  Size  Location     Type
  5893 ;;                  1    wreg      void 
  5894 ;; Registers used:
  5895 ;;		wreg, status,2
  5896 ;; Tracked objects:
  5897 ;;		On entry : 0/0
  5898 ;;		On exit  : 0/0
  5899 ;;		Unchanged: 0/0
  5900 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5901 ;;      Params:         0       0       0       0       0       0       0
  5902 ;;      Locals:         0       0       0       0       0       0       0
  5903 ;;      Temps:          0       0       0       0       0       0       0
  5904 ;;      Totals:         0       0       0       0       0       0       0
  5905 ;;Total ram usage:        0 bytes
  5906 ;; Hardware stack levels used:    1
  5907 ;; Hardware stack levels required when called:    2
  5908 ;; This function calls:
  5909 ;;		Nothing
  5910 ;; This function is called by:
  5911 ;;		_initialise_hardware
  5912 ;; This function uses a non-reentrant model
  5913 ;;
  5914                           
  5915                           	psect	text33
  5916  001A7C                     __ptext33:
  5917                           	opt stack 0
  5918  001A7C                     _initialise_TMR0:
  5919                           	opt stack 27
  5920                           
  5921                           ;pictris.c: 1015:     T0CONbits.T0PS = 0x3;
  5922                           
  5923                           ;incstack = 0
  5924  001A7C  50D5               	movf	4053,w,c	;volatile
  5925  001A7E  0BF8               	andlw	-8
  5926  001A80  0903               	iorlw	3
  5927  001A82  6ED5               	movwf	4053,c	;volatile
  5928                           
  5929                           ;pictris.c: 1016:     PSA = 0;
  5930  001A84  96D5               	bcf	4053,3,c	;volatile
  5931                           
  5932                           ;pictris.c: 1017:     T0CS = 0;
  5933  001A86  9AD5               	bcf	4053,5,c	;volatile
  5934                           
  5935                           ;pictris.c: 1018:     TMR0ON = 1;
  5936  001A88  8ED5               	bsf	4053,7,c	;volatile
  5937                           
  5938                           ;pictris.c: 1019:     TMR0 = (~125);
  5939  001A8A  0EFF               	movlw	255
  5940  001A8C  6ED7               	movwf	4055,c	;volatile
  5941  001A8E  0E82               	movlw	130
  5942  001A90  6ED6               	movwf	4054,c	;volatile
  5943                           
  5944                           ;pictris.c: 1020:     INTCONbits.TMR0IF = 0;
  5945  001A92  94F2               	bcf	intcon,2,c	;volatile
  5946                           
  5947                           ;pictris.c: 1021:     TMR0IE = 1;
  5948  001A94  8AF2               	bsf	intcon,5,c	;volatile
  5949                           
  5950                           ;pictris.c: 1022:     TMR0ON = 1;
  5951  001A96  8ED5               	bsf	4053,7,c	;volatile
  5952  001A98  0012               	return		;funcret
  5953  001A9A                     __end_of_initialise_TMR0:
  5954                           	opt stack 0
  5955                           tblptru	equ	0xFF8
  5956                           tblptrh	equ	0xFF7
  5957                           tblptrl	equ	0xFF6
  5958                           tablat	equ	0xFF5
  5959                           prodh	equ	0xFF4
  5960                           prodl	equ	0xFF3
  5961                           intcon	equ	0xFF2
  5962                           intcon2	equ	0xFF1
  5963                           indf0	equ	0xFEF
  5964                           postinc0	equ	0xFEE
  5965                           fsr0h	equ	0xFEA
  5966                           fsr0l	equ	0xFE9
  5967                           wreg	equ	0xFE8
  5968                           indf1	equ	0xFE7
  5969                           postinc1	equ	0xFE6
  5970                           postdec1	equ	0xFE5
  5971                           fsr1h	equ	0xFE2
  5972                           fsr1l	equ	0xFE1
  5973                           indf2	equ	0xFDF
  5974                           postinc2	equ	0xFDE
  5975                           postdec2	equ	0xFDD
  5976                           preinc2	equ	0xFDC
  5977                           fsr2h	equ	0xFDA
  5978                           fsr2l	equ	0xFD9
  5979                           status	equ	0xFD8
  5980                           
  5981 ;; *************** function _isr *****************
  5982 ;; Defined at:
  5983 ;;		line 421 in file "pictris.c"
  5984 ;; Parameters:    Size  Location     Type
  5985 ;;		None
  5986 ;; Auto vars:     Size  Location     Type
  5987 ;;  ymask           2   15[COMRAM] unsigned short 
  5988 ;;  xmask           1   17[COMRAM] unsigned char 
  5989 ;; Return value:  Size  Location     Type
  5990 ;;                  1    wreg      void 
  5991 ;; Registers used:
  5992 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  5993 ;; Tracked objects:
  5994 ;;		On entry : 0/0
  5995 ;;		On exit  : 0/0
  5996 ;;		Unchanged: 0/0
  5997 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5998 ;;      Params:         0       0       0       0       0       0       0
  5999 ;;      Locals:         3       0       0       0       0       0       0
  6000 ;;      Temps:          8       0       0       0       0       0       0
  6001 ;;      Totals:        11       0       0       0       0       0       0
  6002 ;;Total ram usage:       11 bytes
  6003 ;; Hardware stack levels used:    1
  6004 ;; Hardware stack levels required when called:    1
  6005 ;; This function calls:
  6006 ;;		___lwmod
  6007 ;;		_debounceButton
  6008 ;; This function is called by:
  6009 ;;		Interrupt level 2
  6010 ;; This function uses a non-reentrant model
  6011 ;;
  6012                           
  6013                           	psect	intcode
  6014  000008                     __pintcode:
  6015                           	opt stack 0
  6016  000008                     _isr:
  6017                           	opt stack 24
  6018                           
  6019                           ;incstack = 0
  6020  000008  826D               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
  6021  00000A  ED66  F005         	call	int_func,f	;refresh shadow registers
  6022                           tblptru	equ	0xFF8
  6023                           tblptrh	equ	0xFF7
  6024                           tblptrl	equ	0xFF6
  6025                           tablat	equ	0xFF5
  6026                           prodh	equ	0xFF4
  6027                           prodl	equ	0xFF3
  6028                           intcon	equ	0xFF2
  6029                           intcon2	equ	0xFF1
  6030                           indf0	equ	0xFEF
  6031                           postinc0	equ	0xFEE
  6032                           fsr0h	equ	0xFEA
  6033                           fsr0l	equ	0xFE9
  6034                           wreg	equ	0xFE8
  6035                           indf1	equ	0xFE7
  6036                           postinc1	equ	0xFE6
  6037                           postdec1	equ	0xFE5
  6038                           fsr1h	equ	0xFE2
  6039                           fsr1l	equ	0xFE1
  6040                           indf2	equ	0xFDF
  6041                           postinc2	equ	0xFDE
  6042                           postdec2	equ	0xFDD
  6043                           preinc2	equ	0xFDC
  6044                           fsr2h	equ	0xFDA
  6045                           fsr2l	equ	0xFD9
  6046                           status	equ	0xFD8
  6047                           
  6048                           	psect	intcode_body
  6049  000ACC                     __pintcode_body:
  6050                           	opt stack 24
  6051  000ACC                     int_func:
  6052                           	opt stack 24
  6053  000ACC  0006               	pop		; remove dummy address from shadow register refresh
  6054  000ACE  CFD9 F050          	movff	fsr2l,??_isr+4
  6055  000AD2  CFDA F051          	movff	fsr2h,??_isr+5
  6056  000AD6  CFF3 F052          	movff	prodl,??_isr+6
  6057  000ADA  CFF4 F053          	movff	prodh,??_isr+7
  6058                           
  6059                           ;pictris.c: 424:     if (INTCONbits.TMR0IF)
  6060  000ADE  A4F2               	btfss	intcon,2,c	;volatile
  6061  000AE0  D0B1               	goto	i2l190
  6062                           
  6063                           ;pictris.c: 425:     {;pictris.c: 426:         INTCONbits.TMR0IF = 0;
  6064  000AE2  94F2               	bcf	intcon,2,c	;volatile
  6065                           
  6066                           ;pictris.c: 427:         TMR0 = (~125);
  6067  000AE4  0EFF               	movlw	255
  6068  000AE6  6ED7               	movwf	4055,c	;volatile
  6069  000AE8  0E82               	movlw	130
  6070  000AEA  6ED6               	movwf	4054,c	;volatile
  6071                           
  6072                           ;pictris.c: 430:         time--;
  6073  000AEC  0601               	decf	_time,f,c	;volatile
  6074  000AEE  A0D8               	btfss	status,0,c
  6075  000AF0  0602               	decf	_time+1,f,c	;volatile
  6076                           
  6077                           ;pictris.c: 433:         if (++mS >= 1000)
  6078  000AF2  4A03               	infsnz	_mS,f,c	;volatile
  6079  000AF4  2A04               	incf	_mS+1,f,c	;volatile
  6080  000AF6  0EE8               	movlw	232
  6081  000AF8  5C03               	subwf	_mS,w,c	;volatile
  6082  000AFA  0E03               	movlw	3
  6083  000AFC  5804               	subwfb	_mS+1,w,c	;volatile
  6084  000AFE  A0D8               	btfss	status,0,c
  6085  000B00  D004               	goto	i2l191
  6086                           
  6087                           ;pictris.c: 434:         {;pictris.c: 435:             mS = 0;
  6088  000B02  0E00               	movlw	0
  6089  000B04  6E04               	movwf	_mS+1,c	;volatile
  6090  000B06  0E00               	movlw	0
  6091  000B08  6E03               	movwf	_mS,c	;volatile
  6092  000B0A                     i2l191:
  6093                           
  6094                           ;pictris.c: 448:         if (mtxButtons)
  6095  000B0A  5017               	movf	_mtxButtons,w,c	;volatile
  6096  000B0C  B4D8               	btfsc	status,2,c
  6097  000B0E  D03C               	goto	i2l192
  6098                           
  6099                           ;pictris.c: 449:         {;pictris.c: 450:             debounceButton(PORTBbits.RB0, &Le
      +                          ft_Delay, &Left_Debounced );
  6100  000B10  0E3E               	movlw	low _Left_Delay
  6101  000B12  6E45               	movwf	debounceButton@delay,c
  6102  000B14  0E00               	movlw	high _Left_Delay
  6103  000B16  6E46               	movwf	debounceButton@delay+1,c
  6104  000B18  0E44               	movlw	low _Left_Debounced
  6105  000B1A  6E47               	movwf	debounceButton@debounced,c
  6106  000B1C  0E00               	movlw	high _Left_Debounced
  6107  000B1E  6E48               	movwf	debounceButton@debounced+1,c
  6108  000B20  A081               	btfss	3969,0,c	;volatile
  6109  000B22  D002               	goto	i2u317_40
  6110  000B24  0E01               	movlw	1
  6111  000B26  D001               	goto	i2u317_46
  6112  000B28                     i2u317_40:
  6113  000B28  0E00               	movlw	0
  6114  000B2A                     i2u317_46:
  6115  000B2A  EC9B  F00B         	call	_debounceButton
  6116                           
  6117                           ;pictris.c: 451:             debounceButton(PORTBbits.RB1, &Right_Delay, &Right_Debounce
      +                          d );
  6118  000B2E  0E3C               	movlw	low _Right_Delay
  6119  000B30  6E45               	movwf	debounceButton@delay,c
  6120  000B32  0E00               	movlw	high _Right_Delay
  6121  000B34  6E46               	movwf	debounceButton@delay+1,c
  6122  000B36  0E43               	movlw	low _Right_Debounced
  6123  000B38  6E47               	movwf	debounceButton@debounced,c
  6124  000B3A  0E00               	movlw	high _Right_Debounced
  6125  000B3C  6E48               	movwf	debounceButton@debounced+1,c
  6126  000B3E  A281               	btfss	3969,1,c	;volatile
  6127  000B40  D002               	goto	i2u318_40
  6128  000B42  0E01               	movlw	1
  6129  000B44  D001               	goto	i2u318_46
  6130  000B46                     i2u318_40:
  6131  000B46  0E00               	movlw	0
  6132  000B48                     i2u318_46:
  6133  000B48  EC9B  F00B         	call	_debounceButton
  6134                           
  6135                           ;pictris.c: 452:             debounceButton(PORTBbits.RB2, &Rotate_Delay, &Rotate_Deboun
      +                          ced);
  6136  000B4C  0E3A               	movlw	low _Rotate_Delay
  6137  000B4E  6E45               	movwf	debounceButton@delay,c
  6138  000B50  0E00               	movlw	high _Rotate_Delay
  6139  000B52  6E46               	movwf	debounceButton@delay+1,c
  6140  000B54  0E42               	movlw	low _Rotate_Debounced
  6141  000B56  6E47               	movwf	debounceButton@debounced,c
  6142  000B58  0E00               	movlw	high _Rotate_Debounced
  6143  000B5A  6E48               	movwf	debounceButton@debounced+1,c
  6144  000B5C  A481               	btfss	3969,2,c	;volatile
  6145  000B5E  D002               	goto	i2u319_40
  6146  000B60  0E01               	movlw	1
  6147  000B62  D001               	goto	i2u319_46
  6148  000B64                     i2u319_40:
  6149  000B64  0E00               	movlw	0
  6150  000B66                     i2u319_46:
  6151  000B66  EC9B  F00B         	call	_debounceButton
  6152                           
  6153                           ;pictris.c: 453:             debounceButton(PORTBbits.RB3, &Down_Delay, &Down_Debounced 
      +                          );
  6154  000B6A  0E38               	movlw	low _Down_Delay
  6155  000B6C  6E45               	movwf	debounceButton@delay,c
  6156  000B6E  0E00               	movlw	high _Down_Delay
  6157  000B70  6E46               	movwf	debounceButton@delay+1,c
  6158  000B72  0E41               	movlw	low _Down_Debounced
  6159  000B74  6E47               	movwf	debounceButton@debounced,c
  6160  000B76  0E00               	movlw	high _Down_Debounced
  6161  000B78  6E48               	movwf	debounceButton@debounced+1,c
  6162  000B7A  A681               	btfss	3969,3,c	;volatile
  6163  000B7C  D002               	goto	i2u320_40
  6164  000B7E  0E01               	movlw	1
  6165  000B80  D001               	goto	i2u320_46
  6166  000B82                     i2u320_40:
  6167  000B82  0E00               	movlw	0
  6168  000B84                     i2u320_46:
  6169  000B84  EC9B  F00B         	call	_debounceButton
  6170  000B88                     i2l192:
  6171                           
  6172                           ;pictris.c: 461:         if (tetris == 1){
  6173  000B88  0407               	decf	_tetris,w,c
  6174  000B8A  A4D8               	btfss	status,2,c
  6175  000B8C  D00F               	goto	i2l193
  6176                           
  6177                           ;pictris.c: 462:         DropObject |= mS == 800;}
  6178  000B8E  0E20               	movlw	32
  6179  000B90  1803               	xorwf	_mS,w,c	;volatile
  6180  000B92  E106               	bnz	i2u322_40
  6181  000B94  0E03               	movlw	3
  6182  000B96  1804               	xorwf	_mS+1,w,c	;volatile
  6183  000B98  A4D8               	btfss	status,2,c
  6184  000B9A  D002               	goto	i2u322_40
  6185  000B9C  0E01               	movlw	1
  6186  000B9E  D001               	goto	i2u323_40
  6187  000BA0                     i2u322_40:
  6188  000BA0  0E00               	movlw	0
  6189  000BA2                     i2u323_40:
  6190  000BA2  6E4C               	movwf	??_isr& (0+255),c
  6191  000BA4  6A4D               	clrf	(??_isr+1)& (0+255),c
  6192  000BA6  504C               	movf	??_isr,w,c
  6193  000BA8  1210               	iorwf	_DropObject,f,c	;volatile
  6194  000BAA  D010               	goto	i2l195
  6195  000BAC                     i2l193:
  6196  000BAC  C003  F045         	movff	_mS,___lwmod@dividend	;volatile
  6197  000BB0  C004  F046         	movff	_mS+1,___lwmod@dividend+1	;volatile
  6198  000BB4  0E00               	movlw	0
  6199  000BB6  6E48               	movwf	___lwmod@divisor+1,c
  6200  000BB8  0EC8               	movlw	200
  6201  000BBA  6E47               	movwf	___lwmod@divisor,c
  6202  000BBC  ECD6  F00C         	call	___lwmod	;wreg free
  6203  000BC0  5045               	movf	?___lwmod,w,c
  6204  000BC2  1046               	iorwf	?___lwmod+1,w,c
  6205  000BC4  A4D8               	btfss	status,2,c
  6206  000BC6  D002               	goto	i2l195
  6207                           
  6208                           ;pictris.c: 464:         moveSnake = 1;
  6209  000BC8  0E01               	movlw	1
  6210  000BCA  6E0C               	movwf	_moveSnake,c
  6211  000BCC                     i2l195:
  6212                           
  6213                           ;pictris.c: 473:         if (UpdateScreen)
  6214  000BCC  5006               	movf	_UpdateScreen,w,c	;volatile
  6215  000BCE  B4D8               	btfsc	status,2,c
  6216  000BD0  D037               	goto	i2l196
  6217                           
  6218                           ;pictris.c: 474:         {;pictris.c: 475:             static byte CurrentX = 0;;pictris
      +                          .c: 477:             uint8_t xmask = 1 << CurrentX;
  6219  000BD2  C040  F04C         	movff	isr@CurrentX,??_isr
  6220  000BD6  0E01               	movlw	1
  6221  000BD8  6E4D               	movwf	(??_isr+1)& (0+255),c
  6222  000BDA  2A4C               	incf	??_isr,f,c
  6223  000BDC  D002               	goto	i2u326_44
  6224  000BDE                     i2u326_45:
  6225  000BDE  90D8               	bcf	status,0,c
  6226  000BE0  364D               	rlcf	??_isr+1,f,c
  6227  000BE2                     i2u326_44:
  6228  000BE2  2E4C               	decfsz	??_isr,f,c
  6229  000BE4  D7FC               	goto	i2u326_45
  6230  000BE6  504D               	movf	??_isr+1,w,c
  6231  000BE8  6E56               	movwf	isr@xmask,c
  6232                           
  6233                           ;pictris.c: 478:             uint16_t ymask = ObjectData[CurrentX] | BackgroundData[Curr
      +                          entX];
  6234  000BEA  5040               	movf	isr@CurrentX,w,c
  6235  000BEC  0D02               	mullw	2
  6236  000BEE  0E18               	movlw	low _BackgroundData
  6237  000BF0  24F3               	addwf	prodl,w,c
  6238  000BF2  6ED9               	movwf	fsr2l,c
  6239  000BF4  0E00               	movlw	high _BackgroundData
  6240  000BF6  20F4               	addwfc	prodh,w,c
  6241  000BF8  6EDA               	movwf	fsr2h,c
  6242  000BFA  CFDE F04C          	movff	postinc2,??_isr
  6243  000BFE  CFDD F04D          	movff	postdec2,??_isr+1
  6244  000C02  5040               	movf	isr@CurrentX,w,c
  6245  000C04  0D02               	mullw	2
  6246  000C06  0E28               	movlw	low _ObjectData
  6247  000C08  24F3               	addwf	prodl,w,c
  6248  000C0A  6ED9               	movwf	fsr2l,c
  6249  000C0C  0E00               	movlw	high _ObjectData
  6250  000C0E  20F4               	addwfc	prodh,w,c
  6251  000C10  6EDA               	movwf	fsr2h,c
  6252  000C12  CFDE F04E          	movff	postinc2,??_isr+2
  6253  000C16  CFDD F04F          	movff	postdec2,??_isr+3
  6254  000C1A  504C               	movf	??_isr,w,c
  6255  000C1C  104E               	iorwf	??_isr+2,w,c
  6256  000C1E  6E54               	movwf	isr@ymask,c
  6257  000C20  504D               	movf	??_isr+1,w,c
  6258  000C22  104F               	iorwf	??_isr+3,w,c
  6259  000C24  6E55               	movwf	isr@ymask+1,c
  6260                           
  6261                           ;pictris.c: 480:             port_display = 0;
  6262  000C26  0E00               	movlw	0
  6263  000C28  6E83               	movwf	3971,c	;volatile
  6264  000C2A  0E00               	movlw	0
  6265  000C2C  6E82               	movwf	3970,c	;volatile
  6266                           
  6267                           ;pictris.c: 482:             PORTA = xmask;
  6268  000C2E  C056  FF80         	movff	isr@xmask,3968	;volatile
  6269                           
  6270                           ;pictris.c: 487:             port_display = ~ymask;
  6271  000C32  1C54               	comf	isr@ymask,w,c
  6272  000C34  6E82               	movwf	3970,c	;volatile
  6273  000C36  1C55               	comf	isr@ymask+1,w,c
  6274  000C38  6E83               	movwf	3971,c	;volatile
  6275                           
  6276                           ;pictris.c: 490:             CurrentX++;
  6277  000C3A  2A40               	incf	isr@CurrentX,f,c
  6278                           
  6279                           ;pictris.c: 491:             CurrentX &= 0x07;
  6280  000C3C  0E07               	movlw	7
  6281  000C3E  1640               	andwf	isr@CurrentX,f,c
  6282  000C40                     i2l196:
  6283                           
  6284                           ;pictris.c: 496:         InterruptComplete = 1;
  6285  000C40  0E01               	movlw	1
  6286  000C42  6E05               	movwf	_InterruptComplete,c	;volatile
  6287  000C44                     i2l190:
  6288  000C44  C053  FFF4         	movff	??_isr+7,prodh
  6289  000C48  C052  FFF3         	movff	??_isr+6,prodl
  6290  000C4C  C051  FFDA         	movff	??_isr+5,fsr2h
  6291  000C50  C050  FFD9         	movff	??_isr+4,fsr2l
  6292  000C54  926D               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
  6293  000C56  0011               	retfie		f
  6294  000C58                     __end_of_isr:
  6295                           	opt stack 0
  6296                           tblptru	equ	0xFF8
  6297                           tblptrh	equ	0xFF7
  6298                           tblptrl	equ	0xFF6
  6299                           tablat	equ	0xFF5
  6300                           prodh	equ	0xFF4
  6301                           prodl	equ	0xFF3
  6302                           intcon	equ	0xFF2
  6303                           intcon2	equ	0xFF1
  6304                           indf0	equ	0xFEF
  6305                           postinc0	equ	0xFEE
  6306                           fsr0h	equ	0xFEA
  6307                           fsr0l	equ	0xFE9
  6308                           wreg	equ	0xFE8
  6309                           indf1	equ	0xFE7
  6310                           postinc1	equ	0xFE6
  6311                           postdec1	equ	0xFE5
  6312                           fsr1h	equ	0xFE2
  6313                           fsr1l	equ	0xFE1
  6314                           indf2	equ	0xFDF
  6315                           postinc2	equ	0xFDE
  6316                           postdec2	equ	0xFDD
  6317                           preinc2	equ	0xFDC
  6318                           fsr2h	equ	0xFDA
  6319                           fsr2l	equ	0xFD9
  6320                           status	equ	0xFD8
  6321                           
  6322 ;; *************** function _debounceButton *****************
  6323 ;; Defined at:
  6324 ;;		line 338 in file "pictris.c"
  6325 ;; Parameters:    Size  Location     Type
  6326 ;;  button          1    wreg     volatile _Bool 
  6327 ;;  delay           2    0[COMRAM] PTR volatile short 
  6328 ;;		 -> Down_Delay(2), Rotate_Delay(2), Right_Delay(2), Left_Delay(2), 
  6329 ;;  debounced       2    2[COMRAM] PTR volatile _Bool 
  6330 ;;		 -> Down_Debounced(1), Rotate_Debounced(1), Right_Debounced(1), Left_Debounced(1), 
  6331 ;; Auto vars:     Size  Location     Type
  6332 ;;  button          1    6[COMRAM] volatile _Bool 
  6333 ;; Return value:  Size  Location     Type
  6334 ;;                  1    wreg      void 
  6335 ;; Registers used:
  6336 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  6337 ;; Tracked objects:
  6338 ;;		On entry : 0/0
  6339 ;;		On exit  : 0/0
  6340 ;;		Unchanged: 0/0
  6341 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6342 ;;      Params:         4       0       0       0       0       0       0
  6343 ;;      Locals:         1       0       0       0       0       0       0
  6344 ;;      Temps:          2       0       0       0       0       0       0
  6345 ;;      Totals:         7       0       0       0       0       0       0
  6346 ;;Total ram usage:        7 bytes
  6347 ;; Hardware stack levels used:    1
  6348 ;; This function calls:
  6349 ;;		Nothing
  6350 ;; This function is called by:
  6351 ;;		_isr
  6352 ;; This function uses a non-reentrant model
  6353 ;;
  6354                           
  6355                           	psect	text35
  6356  001736                     __ptext35:
  6357                           	opt stack 0
  6358  001736                     _debounceButton:
  6359                           	opt stack 24
  6360                           
  6361                           ;incstack = 0
  6362                           ;debounceButton@button stored from wreg
  6363  001736  6E4B               	movwf	debounceButton@button,c	;volatile
  6364                           
  6365                           ;pictris.c: 338: void debounceButton(volatile _Bool button, volatile int16_t *delay, vol
      +                          atile _Bool *debounced);pictris.c: 339: {;pictris.c: 340:     if (button == 0)
  6366  001738  504B               	movf	debounceButton@button,w,c	;volatile
  6367  00173A  A4D8               	btfss	status,2,c
  6368  00173C  D023               	goto	i2l155
  6369                           
  6370                           ;pictris.c: 341:     {;pictris.c: 342:         if (*delay < 0)
  6371  00173E  C045  FFD9         	movff	debounceButton@delay,fsr2l
  6372  001742  C046  FFDA         	movff	debounceButton@delay+1,fsr2h
  6373  001746  0E01               	movlw	1
  6374  001748  AEDB               	btfss	plusw2,7,c
  6375  00174A  D009               	goto	i2l156
  6376                           
  6377                           ;pictris.c: 343:             *delay = 10;
  6378  00174C  C045  FFD9         	movff	debounceButton@delay,fsr2l
  6379  001750  C046  FFDA         	movff	debounceButton@delay+1,fsr2h
  6380  001754  0E0A               	movlw	10
  6381  001756  6EDE               	movwf	postinc2,c
  6382  001758  0E00               	movlw	0
  6383  00175A  6EDD               	movwf	postdec2,c
  6384  00175C  0012               	return	
  6385  00175E                     i2l156:
  6386  00175E  C045  FFD9         	movff	debounceButton@delay,fsr2l
  6387  001762  C046  FFDA         	movff	debounceButton@delay+1,fsr2h
  6388  001766  06DE               	decf	postinc2,f,c
  6389  001768  0E00               	movlw	0
  6390  00176A  5ADD               	subwfb	postdec2,f,c
  6391  00176C  28DE               	incf	postinc2,w,c
  6392  00176E  E119               	bnz	i2l160
  6393  001770  28DE               	incf	postinc2,w,c
  6394  001772  A4D8               	btfss	status,2,c
  6395  001774  0012               	return	
  6396                           
  6397                           ;pictris.c: 345:             *debounced = 1;
  6398  001776  C047  FFD9         	movff	debounceButton@debounced,fsr2l
  6399  00177A  C048  FFDA         	movff	debounceButton@debounced+1,fsr2h
  6400  00177E  0E01               	movlw	1
  6401  001780  6EDF               	movwf	indf2,c
  6402                           
  6403                           ;pictris.c: 346:     }
  6404  001782  0012               	return	
  6405  001784                     i2l155:
  6406                           
  6407                           ;pictris.c: 348:     {;pictris.c: 349:         *delay = -1;
  6408  001784  C045  FFD9         	movff	debounceButton@delay,fsr2l
  6409  001788  C046  FFDA         	movff	debounceButton@delay+1,fsr2h
  6410  00178C  0EFF               	movlw	255
  6411  00178E  6EDE               	movwf	postinc2,c
  6412  001790  0EFF               	movlw	255
  6413  001792  6EDD               	movwf	postdec2,c
  6414                           
  6415                           ;pictris.c: 350:         *debounced = 0;
  6416  001794  C047  FFD9         	movff	debounceButton@debounced,fsr2l
  6417  001798  C048  FFDA         	movff	debounceButton@debounced+1,fsr2h
  6418  00179C  0E00               	movlw	0
  6419  00179E  6EDF               	movwf	indf2,c
  6420  0017A0  0012               	return	
  6421  0017A2                     i2l160:
  6422  0017A2  0012               	return		;funcret
  6423  0017A4                     __end_of_debounceButton:
  6424                           	opt stack 0
  6425                           tblptru	equ	0xFF8
  6426                           tblptrh	equ	0xFF7
  6427                           tblptrl	equ	0xFF6
  6428                           tablat	equ	0xFF5
  6429                           prodh	equ	0xFF4
  6430                           prodl	equ	0xFF3
  6431                           intcon	equ	0xFF2
  6432                           intcon2	equ	0xFF1
  6433                           indf0	equ	0xFEF
  6434                           postinc0	equ	0xFEE
  6435                           fsr0h	equ	0xFEA
  6436                           fsr0l	equ	0xFE9
  6437                           wreg	equ	0xFE8
  6438                           indf1	equ	0xFE7
  6439                           postinc1	equ	0xFE6
  6440                           postdec1	equ	0xFE5
  6441                           fsr1h	equ	0xFE2
  6442                           fsr1l	equ	0xFE1
  6443                           indf2	equ	0xFDF
  6444                           postinc2	equ	0xFDE
  6445                           postdec2	equ	0xFDD
  6446                           preinc2	equ	0xFDC
  6447                           plusw2	equ	0xFDB
  6448                           fsr2h	equ	0xFDA
  6449                           fsr2l	equ	0xFD9
  6450                           status	equ	0xFD8
  6451                           
  6452 ;; *************** function ___lwmod *****************
  6453 ;; Defined at:
  6454 ;;		line 7 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c99\common\lwmod.c"
  6455 ;; Parameters:    Size  Location     Type
  6456 ;;  dividend        2    0[COMRAM] unsigned int 
  6457 ;;  divisor         2    2[COMRAM] unsigned int 
  6458 ;; Auto vars:     Size  Location     Type
  6459 ;;  counter         1    4[COMRAM] unsigned char 
  6460 ;; Return value:  Size  Location     Type
  6461 ;;                  2    0[COMRAM] unsigned int 
  6462 ;; Registers used:
  6463 ;;		wreg, status,2, status,0
  6464 ;; Tracked objects:
  6465 ;;		On entry : 0/0
  6466 ;;		On exit  : 0/0
  6467 ;;		Unchanged: 0/0
  6468 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6469 ;;      Params:         4       0       0       0       0       0       0
  6470 ;;      Locals:         1       0       0       0       0       0       0
  6471 ;;      Temps:          0       0       0       0       0       0       0
  6472 ;;      Totals:         5       0       0       0       0       0       0
  6473 ;;Total ram usage:        5 bytes
  6474 ;; Hardware stack levels used:    1
  6475 ;; This function calls:
  6476 ;;		Nothing
  6477 ;; This function is called by:
  6478 ;;		_isr
  6479 ;; This function uses a non-reentrant model
  6480 ;;
  6481                           
  6482                           	psect	text36
  6483  0019AC                     __ptext36:
  6484                           	opt stack 0
  6485  0019AC                     ___lwmod:
  6486                           	opt stack 24
  6487                           
  6488                           ;incstack = 0
  6489  0019AC  5047               	movf	___lwmod@divisor,w,c
  6490  0019AE  1048               	iorwf	___lwmod@divisor+1,w,c
  6491  0019B0  B4D8               	btfsc	status,2,c
  6492  0019B2  D018               	goto	i2l981
  6493  0019B4  0E01               	movlw	1
  6494  0019B6  6E49               	movwf	___lwmod@counter,c
  6495  0019B8  D004               	goto	i2l976
  6496  0019BA  90D8               	bcf	status,0,c
  6497  0019BC  3647               	rlcf	___lwmod@divisor,f,c
  6498  0019BE  3648               	rlcf	___lwmod@divisor+1,f,c
  6499  0019C0  2A49               	incf	___lwmod@counter,f,c
  6500  0019C2                     i2l976:
  6501  0019C2  AE48               	btfss	___lwmod@divisor+1,7,c
  6502  0019C4  D7FA               	goto	i2l977
  6503  0019C6                     i2u312_40:
  6504  0019C6  5047               	movf	___lwmod@divisor,w,c
  6505  0019C8  5C45               	subwf	___lwmod@dividend,w,c
  6506  0019CA  5048               	movf	___lwmod@divisor+1,w,c
  6507  0019CC  5846               	subwfb	___lwmod@dividend+1,w,c
  6508  0019CE  A0D8               	btfss	status,0,c
  6509  0019D0  D004               	goto	i2l980
  6510  0019D2  5047               	movf	___lwmod@divisor,w,c
  6511  0019D4  5E45               	subwf	___lwmod@dividend,f,c
  6512  0019D6  5048               	movf	___lwmod@divisor+1,w,c
  6513  0019D8  5A46               	subwfb	___lwmod@dividend+1,f,c
  6514  0019DA                     i2l980:
  6515  0019DA  90D8               	bcf	status,0,c
  6516  0019DC  3248               	rrcf	___lwmod@divisor+1,f,c
  6517  0019DE  3247               	rrcf	___lwmod@divisor,f,c
  6518  0019E0  2E49               	decfsz	___lwmod@counter,f,c
  6519  0019E2  D7F1               	goto	i2u312_40
  6520  0019E4                     i2l981:
  6521  0019E4  C045  F045         	movff	___lwmod@dividend,?___lwmod
  6522  0019E8  C046  F046         	movff	___lwmod@dividend+1,?___lwmod+1
  6523  0019EC  0012               	return		;funcret
  6524  0019EE                     __end_of___lwmod:
  6525                           	opt stack 0
  6526                           tblptru	equ	0xFF8
  6527                           tblptrh	equ	0xFF7
  6528                           tblptrl	equ	0xFF6
  6529                           tablat	equ	0xFF5
  6530                           prodh	equ	0xFF4
  6531                           prodl	equ	0xFF3
  6532                           intcon	equ	0xFF2
  6533                           intcon2	equ	0xFF1
  6534                           indf0	equ	0xFEF
  6535                           postinc0	equ	0xFEE
  6536                           fsr0h	equ	0xFEA
  6537                           fsr0l	equ	0xFE9
  6538                           wreg	equ	0xFE8
  6539                           indf1	equ	0xFE7
  6540                           postinc1	equ	0xFE6
  6541                           postdec1	equ	0xFE5
  6542                           fsr1h	equ	0xFE2
  6543                           fsr1l	equ	0xFE1
  6544                           indf2	equ	0xFDF
  6545                           postinc2	equ	0xFDE
  6546                           postdec2	equ	0xFDD
  6547                           preinc2	equ	0xFDC
  6548                           plusw2	equ	0xFDB
  6549                           fsr2h	equ	0xFDA
  6550                           fsr2l	equ	0xFD9
  6551                           status	equ	0xFD8
  6552                           tblptru	equ	0xFF8
  6553                           tblptrh	equ	0xFF7
  6554                           tblptrl	equ	0xFF6
  6555                           tablat	equ	0xFF5
  6556                           prodh	equ	0xFF4
  6557                           prodl	equ	0xFF3
  6558                           intcon	equ	0xFF2
  6559                           intcon2	equ	0xFF1
  6560                           indf0	equ	0xFEF
  6561                           postinc0	equ	0xFEE
  6562                           fsr0h	equ	0xFEA
  6563                           fsr0l	equ	0xFE9
  6564                           wreg	equ	0xFE8
  6565                           indf1	equ	0xFE7
  6566                           postinc1	equ	0xFE6
  6567                           postdec1	equ	0xFE5
  6568                           fsr1h	equ	0xFE2
  6569                           fsr1l	equ	0xFE1
  6570                           indf2	equ	0xFDF
  6571                           postinc2	equ	0xFDE
  6572                           postdec2	equ	0xFDD
  6573                           preinc2	equ	0xFDC
  6574                           plusw2	equ	0xFDB
  6575                           fsr2h	equ	0xFDA
  6576                           fsr2l	equ	0xFD9
  6577                           status	equ	0xFD8
  6578                           
  6579                           	psect	rparam
  6580  0000                     tblptru	equ	0xFF8
  6581                           tblptrh	equ	0xFF7
  6582                           tblptrl	equ	0xFF6
  6583                           tablat	equ	0xFF5
  6584                           prodh	equ	0xFF4
  6585                           prodl	equ	0xFF3
  6586                           intcon	equ	0xFF2
  6587                           intcon2	equ	0xFF1
  6588                           indf0	equ	0xFEF
  6589                           postinc0	equ	0xFEE
  6590                           fsr0h	equ	0xFEA
  6591                           fsr0l	equ	0xFE9
  6592                           wreg	equ	0xFE8
  6593                           indf1	equ	0xFE7
  6594                           postinc1	equ	0xFE6
  6595                           postdec1	equ	0xFE5
  6596                           fsr1h	equ	0xFE2
  6597                           fsr1l	equ	0xFE1
  6598                           indf2	equ	0xFDF
  6599                           postinc2	equ	0xFDE
  6600                           postdec2	equ	0xFDD
  6601                           preinc2	equ	0xFDC
  6602                           plusw2	equ	0xFDB
  6603                           fsr2h	equ	0xFDA
  6604                           fsr2l	equ	0xFD9
  6605                           status	equ	0xFD8
  6606                           
  6607                           	psect	temp
  6608  00006D                     btemp:
  6609                           	opt stack 0
  6610  00006D                     	ds	1
  6611  0000                     int$flags	set	btemp
  6612  0000                     wtemp8	set	btemp+1
  6613  0000                     ttemp5	set	btemp+1
  6614  0000                     ttemp6	set	btemp+4
  6615  0000                     ttemp7	set	btemp+8
  6616                           tblptru	equ	0xFF8
  6617                           tblptrh	equ	0xFF7
  6618                           tblptrl	equ	0xFF6
  6619                           tablat	equ	0xFF5
  6620                           prodh	equ	0xFF4
  6621                           prodl	equ	0xFF3
  6622                           intcon	equ	0xFF2
  6623                           intcon2	equ	0xFF1
  6624                           indf0	equ	0xFEF
  6625                           postinc0	equ	0xFEE
  6626                           fsr0h	equ	0xFEA
  6627                           fsr0l	equ	0xFE9
  6628                           wreg	equ	0xFE8
  6629                           indf1	equ	0xFE7
  6630                           postinc1	equ	0xFE6
  6631                           postdec1	equ	0xFE5
  6632                           fsr1h	equ	0xFE2
  6633                           fsr1l	equ	0xFE1
  6634                           indf2	equ	0xFDF
  6635                           postinc2	equ	0xFDE
  6636                           postdec2	equ	0xFDD
  6637                           preinc2	equ	0xFDC
  6638                           plusw2	equ	0xFDB
  6639                           fsr2h	equ	0xFDA
  6640                           fsr2l	equ	0xFD9
  6641                           status	equ	0xFD8


Data Sizes:
    Strings     0
    Constant    208
    Data        150
    BSS         284
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          126     39     108
    BANK0           128      8      40
    BANK1           256      0     200
    BANK2           256      0     133
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           244      0       0

Pointer List with Targets:

    sp__memmove	PTR void  size(2) Largest target is 0

    checkForLines@pObject	PTR volatile unsigned short  size(2) Largest target is 16
		 -> BackgroundData(COMRAM[16]), 

    removeLine@pObject	PTR volatile unsigned short  size(2) Largest target is 16
		 -> BackgroundData(COMRAM[16]), 

    moveObjectDown@pObject	PTR volatile unsigned short  size(2) Largest target is 16
		 -> ObjectData(COMRAM[16]), 

    pixelCount@pSource	PTR volatile unsigned short  size(2) Largest target is 16
		 -> tmpObjectData(BANK0[16]), ObjectData(COMRAM[16]), 

    newRotation@pSource	PTR volatile unsigned short  size(2) Largest target is 16
		 -> ObjectData(COMRAM[16]), 

    newRotation@pTarget	PTR unsigned short  size(2) Largest target is 16
		 -> tmpObjectData(BANK0[16]), 

    collisionDetect@pTarget	PTR volatile unsigned short  size(2) Largest target is 16
		 -> BackgroundData(COMRAM[16]), 

    collisionDetect@pSource	PTR volatile unsigned short  size(2) Largest target is 16
		 -> tmpObjectData(BANK0[16]), ObjectData(COMRAM[16]), 

    checkForRightWall@pObject	PTR volatile unsigned short  size(2) Largest target is 16
		 -> ObjectData(COMRAM[16]), 

    checkForLeftWall@pObject	PTR volatile unsigned short  size(2) Largest target is 16
		 -> ObjectData(COMRAM[16]), 

    checkForBottom@pObject	PTR volatile unsigned short  size(2) Largest target is 16
		 -> ObjectData(COMRAM[16]), 

    moveObject@pObject	PTR volatile unsigned short  size(2) Largest target is 16
		 -> tmpObjectData(BANK0[16]), ObjectData(COMRAM[16]), 

    mergeObjects@pSource	PTR volatile unsigned short  size(2) Largest target is 16
		 -> show_score@mask(COMRAM[16]), tmpObjectData(BANK0[16]), ObjectData(COMRAM[16]), 

    mergeObjects@pTarget	PTR volatile unsigned short  size(2) Largest target is 16
		 -> tmpObjectData(BANK0[16]), BackgroundData(COMRAM[16]), ObjectData(COMRAM[16]), 

    selectNextObject@pTarget	PTR volatile unsigned short  size(2) Largest target is 16
		 -> ObjectData(COMRAM[16]), 

    selectNextObject@s	PTR struct shape size(2) Largest target is 133
		 -> shapes(BANK2[133]), 

    clearArray@pArray	PTR volatile unsigned short  size(2) Largest target is 16
		 -> tmpObjectData(BANK0[16]), BackgroundData(COMRAM[16]), ObjectData(COMRAM[16]), 

    debounceButton@debounced	PTR volatile _Bool  size(2) Largest target is 1
		 -> Down_Debounced(COMRAM[1]), Rotate_Debounced(COMRAM[1]), Right_Debounced(COMRAM[1]), Left_Debounced(COMRAM[1]), 

    debounceButton@delay	PTR volatile short  size(2) Largest target is 2
		 -> Down_Delay(COMRAM[2]), Rotate_Delay(COMRAM[2]), Right_Delay(COMRAM[2]), Left_Delay(COMRAM[2]), 

    sp__itoa	PTR unsigned char  size(2) Largest target is 4
		 -> show_score@number(COMRAM[4]), 

    sp__memcpy	PTR void  size(2) Largest target is 16
		 -> tmpObjectData(BANK0[16]), ObjectData(COMRAM[16]), 

    memcpy@src	PTR const void  size(2) Largest target is 160
		 -> Number(CODE[160]), TETRIS(CODE[16]), ObjectData(COMRAM[16]), shapes.graphic(BANK2[16]), 
		 -> shapes(BANK2[133]), 

    memcpy@s	PTR unsigned char  size(2) Largest target is 160
		 -> Number(CODE[160]), TETRIS(CODE[16]), ObjectData(COMRAM[16]), shapes.graphic(BANK2[16]), 
		 -> shapes(BANK2[133]), 

    memcpy@dest	PTR void  size(2) Largest target is 16
		 -> tmpObjectData(BANK0[16]), ObjectData(COMRAM[16]), 

    memcpy@d	PTR unsigned char  size(2) Largest target is 16
		 -> tmpObjectData(BANK0[16]), ObjectData(COMRAM[16]), 


Critical Paths under _main in COMRAM

    _mainGameLoop->_MoveSnakes
    _mainGameLoop->_moveObjectDown
    _initialise_globals->_CreateBerry
    _checkForLines->_removeLine
    _checkButtons->_moveObjectDown
    _checkButtons->_newRotation
    _newRotation->___wmul
    _moveObjectDown->_selectNextObject
    _selectNextObject->___wmul
    ___wmul->___awmod
    _MoveSnakes->_SnakeGraph
    _SnakeGraph->_clearArray
    _CreateBerry->_genBerry
    _genBerry->_rnd_get_num

Critical Paths under _isr in COMRAM

    _isr->_debounceButton

Critical Paths under _main in BANK0

    _mainGameLoop->_checkForLines
    _checkButtons->_newRotation

Critical Paths under _isr in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _isr in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _isr in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _isr in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _isr in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _isr in BANK5

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0   49161
                 _initialise_globals
                _initialise_hardware
                       _mainGameLoop
                     _rnd_initialize
 ---------------------------------------------------------------------------------
 (1) _rnd_initialize                                       1     1      0      15
                                             18 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _mainGameLoop                                         0     0      0   46814
                         _MoveSnakes
                       _checkButtons
                      _checkForLines
                         _clearArray
                 _initialise_globals
                     _moveObjectDown
                  _pauseMultiplexing
                 _resumeMultiplexing
                   _selectNextObject
                     _writeHighScore
 ---------------------------------------------------------------------------------
 (2) _writeHighScore                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _initialise_globals                                   1     1      0    2332
                                             27 COMRAM     1     1      0
                        _CreateBerry
                         _clearArray
 ---------------------------------------------------------------------------------
 (2) _checkForLines                                       10     8      2    1208
                                             35 COMRAM     2     0      2
                                              0 BANK0      8     8      0
                         _removeLine
 ---------------------------------------------------------------------------------
 (3) _removeLine                                          17    14      3     790
                                             18 COMRAM    17    14      3
 ---------------------------------------------------------------------------------
 (2) _checkButtons                                         1     1      0   24253
                                              5 BANK0      1     1      0
                   _checkForLeftWall
                  _checkForRightWall
                    _collisionDetect
                             _memcpy
                       _mergeObjects
                         _moveObject
                     _moveObjectDown
                        _newRotation
                       _pauseButtons
                  _pauseMultiplexing
                         _pixelCount
                      _resumeButtons
                 _resumeMultiplexing
 ---------------------------------------------------------------------------------
 (3) _resumeButtons                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _pixelCount                                          10     8      2     334
                                             18 COMRAM    10     8      2
 ---------------------------------------------------------------------------------
 (3) _pauseButtons                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _newRotation                                         14     9      5    5025
                                             30 COMRAM     9     4      5
                                              0 BANK0      5     5      0
                             ___wmul
                         _clearArray
                             _memcpy
 ---------------------------------------------------------------------------------
 (2) _moveObjectDown                                       3     1      2   10686
                                             37 COMRAM     2     0      2
                                              0 BANK0      1     1      0
                     _checkForBottom
                    _collisionDetect
                       _mergeObjects
                         _moveObject
                  _pauseMultiplexing
                 _resumeMultiplexing
                   _selectNextObject
 ---------------------------------------------------------------------------------
 (2) _selectNextObject                                     7     5      2    3479
                                             30 COMRAM     7     5      2
                            ___awmod
                             ___wmul
                             _memcpy
                        _rnd_get_num
 ---------------------------------------------------------------------------------
 (3) _memcpy                                              10     4      6    1524
                                             18 COMRAM    10     4      6
 ---------------------------------------------------------------------------------
 (3) ___wmul                                               6     2      4     592
                                             24 COMRAM     6     2      4
                            ___awmod (ARG)
 ---------------------------------------------------------------------------------
 (3) ___awmod                                              6     2      4     793
                                             18 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (3) _moveObject                                          10     6      4    2629
                                             18 COMRAM    10     6      4
 ---------------------------------------------------------------------------------
 (3) _mergeObjects                                         8     3      5    2767
                                             18 COMRAM     8     3      5
 ---------------------------------------------------------------------------------
 (3) _collisionDetect                                      9     5      4    1092
                                             18 COMRAM     9     5      4
 ---------------------------------------------------------------------------------
 (3) _checkForBottom                                       5     3      2     220
                                             18 COMRAM     5     3      2
 ---------------------------------------------------------------------------------
 (3) _checkForRightWall                                    4     2      2      98
                                             18 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (3) _checkForLeftWall                                     4     2      2      98
                                             18 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (2) _MoveSnakes                                           9     9      0    2926
                                             31 COMRAM     8     8      0
                                              0 BANK0      1     1      0
                        _CreateBerry
                         _SnakeGraph
 ---------------------------------------------------------------------------------
 (3) _SnakeGraph                                           6     6      0    2425
                                             25 COMRAM     6     6      0
                         _clearArray
                  _pauseMultiplexing
                 _resumeMultiplexing
 ---------------------------------------------------------------------------------
 (2) _resumeMultiplexing                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _pauseMultiplexing                                    0     0      0       0
                   _waitForInterrupt
 ---------------------------------------------------------------------------------
 (3) _waitForInterrupt                                     0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _clearArray                                           7     3      4    1930
                                             18 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (3) _CreateBerry                                          3     3      0     241
                                             24 COMRAM     3     3      0
                           _genBerry
 ---------------------------------------------------------------------------------
 (4) _genBerry                                             1     1      0     102
                                             23 COMRAM     1     1      0
                        _rnd_get_num
 ---------------------------------------------------------------------------------
 (3) _rnd_get_num                                          5     5      0      34
                                             18 COMRAM     5     5      0
 ---------------------------------------------------------------------------------
 (1) _initialise_hardware                                  0     0      0       0
                    _initialise_TMR0
 ---------------------------------------------------------------------------------
 (2) _initialise_TMR0                                      0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (6) _isr                                                 11    11      0    1119
                                              7 COMRAM    11    11      0
                            ___lwmod
                     _debounceButton
 ---------------------------------------------------------------------------------
 (7) _debounceButton                                       7     3      4     762
                                              0 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (7) ___lwmod                                              5     1      4     311
                                              0 COMRAM     5     1      4
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 7
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _initialise_globals
     _CreateBerry
       _genBerry
         _rnd_get_num
     _clearArray
   _initialise_hardware
     _initialise_TMR0
   _mainGameLoop
     _MoveSnakes
       _CreateBerry
         _genBerry
           _rnd_get_num
       _SnakeGraph
         _clearArray
         _pauseMultiplexing
           _waitForInterrupt
         _resumeMultiplexing
     _checkButtons
       _checkForLeftWall
       _checkForRightWall
       _collisionDetect
       _memcpy
       _mergeObjects
       _moveObject
       _moveObjectDown
         _checkForBottom
         _collisionDetect
         _mergeObjects
         _moveObject
         _pauseMultiplexing
           _waitForInterrupt
         _resumeMultiplexing
         _selectNextObject
           ___awmod
           ___wmul
             ___awmod (ARG)
           _memcpy
           _rnd_get_num
       _newRotation
         ___wmul
           ___awmod (ARG)
         _clearArray
         _memcpy
       _pauseButtons
       _pauseMultiplexing
         _waitForInterrupt
       _pixelCount
       _resumeButtons
       _resumeMultiplexing
     _checkForLines
       _removeLine
     _clearArray
     _initialise_globals
       _CreateBerry
         _genBerry
           _rnd_get_num
       _clearArray
     _moveObjectDown
       _checkForBottom
       _collisionDetect
       _mergeObjects
       _moveObject
       _pauseMultiplexing
         _waitForInterrupt
       _resumeMultiplexing
       _selectNextObject
         ___awmod
         ___wmul
           ___awmod (ARG)
         _memcpy
         _rnd_get_num
     _pauseMultiplexing
       _waitForInterrupt
     _resumeMultiplexing
     _selectNextObject
       ___awmod
       ___wmul
         ___awmod (ARG)
       _memcpy
       _rnd_get_num
     _writeHighScore
   _rnd_initialize

 _isr (ROOT)
   ___lwmod
   _debounceButton

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             5F3      0       0      16        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK4           100      0       0      11        0.0%
BANK4              100      0       0      12        0.0%
BITBANK3           100      0       0       9        0.0%
BANK3              100      0       0      10        0.0%
BITBANK2           100      0       0       7        0.0%
BANK2              100      0      85       8       52.0%
BITBANK1           100      0       0       5        0.0%
BANK1              100      0      C8       6       78.1%
BITBANK5            F4      0       0      15        0.0%
BANK5               F4      0       0      13        0.0%
BITBANK0            80      0       0       3        0.0%
BANK0               80      8      28       4       31.3%
BITCOMRAM           7E      0       0       0        0.0%
COMRAM              7E     27      6C       1       85.7%
BITSFR_5             0      0       0     200        0.0%
SFR_5                0      0       0     200        0.0%
BITSFR_4             0      0       0     200        0.0%
SFR_4                0      0       0     200        0.0%
BITSFR_3             0      0       0     200        0.0%
SFR_3                0      0       0     200        0.0%
BITSFR_2             0      0       0     200        0.0%
SFR_2                0      0       0     200        0.0%
BITSFR_1             0      0       0     200        0.0%
SFR_1                0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     1E1      14        0.0%
DATA                 0      0     1E1      17        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V2.00 build -1524193055 
Symbol Table                                                                                   Sat Jan 26 02:02:35 2019

        __end_of_checkButtons 08E4                             l3 1912                             l4 18E0  
            moveObject@cycles 005A             moveObject@pObject 0057                 ?_mainGameLoop 0045  
                          _mS 0003           ___wmul@multiplicand 005F                   __CFG_BORV$3 000000  
        debounceButton@button 004B                  __CFG_CP0$OFF 000000                  __CFG_CP1$OFF 000000  
                __CFG_CP2$OFF 000000                  __CFG_CP3$OFF 000000                 newRotation@x1 006A  
               newRotation@x2 0068                 newRotation@y1 006B                 newRotation@y2 0069  
                         l202 1A42                           l203 1A28                           l231 0E76  
                         l216 1812                           l208 149C                           l217 1866  
                         l233 0EAE                           l225 0E9A                           l241 0944  
                         l305 19FA                           l218 1828                           l226 0DFA  
                         l250 096C                           l242 08E6                           l219 1864  
                         l235 0F10                           l227 0E06                           l251 0A4E  
                         l243 08FA                           l307 1A1A                           l331 0FDA  
                         l323 0F40                           l252 0974                           l237 0EF2  
                         l229 0E94                           l245 0914                           l317 1882  
                         l333 104E                           l325 0F64                           l254 0A70  
                         l262 12E2                           l270 12A2                           l326 0F70  
                         l255 0ABE                           l247 092E                           l319 18C6  
                         l271 12AE                           l263 122A                           l176 1B1A  
                         l256 0A78                           l264 1236                           l280 0C6C  
                         l328 0F7C                           l432 1470                           l257 0ABA  
                         l345 1190                           l337 17B4                           l433 143C  
                         l290 0CD0                           l362 08B2                           l354 0772  
                         l434 1452                           l267 1262                           l291 0D38  
                         l347 1216                           l339 17C0                           l371 1118  
                         l435 1464                           l268 126E                           l276 0DB2  
                         l292 0CD6                           l284 0C94                           l372 105C  
                         l285 0CC6                           l277 0C5A                           l373 106C  
                         l381 1544                           l286 0C9A                           l278 0C8A  
                         l358 080E                           l446 1AC8                           l287 0CA6  
                         l279 0C60                           l711 16FC                           l383 1554  
                         l439 147E                           l296 0D42                           l712 16F4  
                         l376 112C                           l297 0DA8                           l298 0D48  
                         l386 15B6                           l299 0D54                           l715 1714  
                         l716 171E                           l708 16DA                           l396 138E  
                         l717 172C                           l709 16E6                           _GIE 007F97  
                __CFG_CPB$OFF 000000                  __CFG_CPD$OFF 000000                           _PSA 007EAB  
                         _isr 0008            rnd_initialize@seed 0057                  ___awmod@sign 005C  
     __end_of_collisionDetect 18CE                           prod 000FF3                           wreg 000FE8  
     __size_of_moveObjectDown 00E0                  __CFG_LVP$OFF 000000                  __CFG_WDT$OFF 000000  
                        l3601 19F2                          l4057 1386                          l3621 187A  
                        l3357 18E0                          l3471 122E                          l3519 0C64  
                        l3537 0C9E                          l3483 1266                          l3731 0F74  
                        l3803 1064                          l3725 0F68                          l2685 17B8  
                        l3495 12A6                          l3575 0D4C                          l2679 17AC  
                        l3665 0DFE                          l3691 0EA6                          l3819 1124  
                        l3787 1212                          l3993 154C                          l3987 153C  
                        ?_isr 0045                          _DDRA 000F92                          _DDRB 000F93  
                        _DDRC 000F94                          _DDRD 000F95                          _T0CS 007EAD  
                        u2220 1AE2                          u2240 1AB2                          u4040 1052  
                        u4120 1116                          u4104 10AC                          u4105 10A6  
                        u4034 101E                          u2450 1806                          u2434 17EE  
                        u4114 10DE                          u4035 1018                          u2435 17E8  
                        u4115 10D8                          u2460 180A                          u4400 08AE  
                        _IPEN 007E87                          u3425 195E                          u4410 08B0  
                        u3620 0CC2                          u3460 1700                          u3390 1908  
                        u4430 08BE                          u4094 1096                          u4095 1090  
                        u3720 1A1E                          u4440 08D0                          u3650 0D24  
                        u4530 13C6                          u3900 0F14                          u3397 18FE  
                        u3750 18CA                          u3590 0C86                          u3840 0E98  
                        u3680 0D90                          u4490 159C                          u4474 1582  
                        u4650 1488                          u4475 157C                          u3964 0FAC  
                        u3965 0FA6                          _TMR0 000FD6               ?_checkForBottom 0057  
         __end_of_CreateBerry 1876                          _main 1AB6                          _time 0001  
                        fsr0h 000FEA                          indf0 000FEF                          fsr2h 000FDA  
                        fsr0l 000FE9                          indf1 000FE7                          indf2 000FDF  
                        fsr1l 000FE1                          fsr2l 000FD9                          btemp 006D  
            ??_writeHighScore 0057                          prodh 000FF4                          prodl 000FF3  
                        start 000E                 __CFG_IESO$OFF 000000           initialise_globals@i 0060  
         moveObject@direction 0059                 __CFG_MCLRE$ON 000000                  ___param_bank 000000  
              ??_mainGameLoop 006C                         ??_isr 004C   __size_of_initialise_globals 00DC  
                       ?_main 0045             ??_initialise_TMR0 0057               __end_of___awmod 1736  
             __end_of___lwmod 19EE                         i2l160 17A2                         i2l155 1784  
                       i2l156 175E                         i2l190 0C44                         i2l191 0B0A  
                       i2l192 0B88                         i2l193 0BAC                         i2l195 0BCC  
                       i2l196 0C40                         i2l980 19DA                         i2l981 19E4  
                       i2l976 19C2                         i2l977 19BA       debounceButton@debounced 0047  
                       _PORTA 000F80                         _PORTB 000F81                         _PORTC 000F82  
                       _PORTD 000F83                 __CFG_PWRT$OFF 000000                 __CFG_WRT0$OFF 000000  
               __CFG_WRT1$OFF 000000                 __CFG_WRT2$OFF 000000                 __CFG_WRT3$OFF 000000  
              __CFG_EBTR0$OFF 000000                __CFG_FCMEN$OFF 000000                __CFG_EBTR1$OFF 000000  
              __CFG_EBTR2$OFF 000000                __CFG_EBTR3$OFF 000000                 __CFG_WRTB$OFF 000000  
               __CFG_WRTC$OFF 000000                 __CFG_WRTD$OFF 000000                __CFG_EBTRB$OFF 000000  
                       __lfsr 006C                  ?_newRotation 0063                _SnakeGraph$461 0060  
              _SnakeGraph$462 0061                    _Left_Delay 003E                         tablat 000FF5  
                  _DropObject 0010                    _Down_Delay 0038                         plusw2 000FDB  
                       ttemp5 006E                         ttemp6 0071                         ttemp7 0075  
                       status 000FD8                         wtemp8 006E                   isr@CurrentX 0040  
                  _ObjectData 0028               __initialization 1642            _resumeMultiplexing 1B36  
                __end_of_main 1ACE      __end_of_selectNextObject 1536  __size_of_initialise_hardware 0042  
         ?_resumeMultiplexing 0045                        ??_main 006C                 __activetblptr 000002  
            ?_collisionDetect 0057                 ?_mergeObjects 0057                   _CreateBerry 180E  
              _debounceButton 1736          ??_resumeMultiplexing 0057                        _TMR0IE 007F95  
                      _TMR0ON 007EAF                        _TETRIS 06C1                    _MoveSnakes 08E4  
                ?_rnd_get_num 0045         __size_of_checkButtons 0212          checkForLines@pObject 0068  
            __end_of_genBerry 1B16                    _SnakeGraph 0DDC                __CFG_XINST$OFF 000000  
                      _Number 0621                    _SnakeYtext 0601             ?_checkForLeftWall 0057  
                      ___wmul 1A56                __CFG_STVREN$ON 000000                     ??___awmod 005B  
                      _berryX 000A                        _berryY 0009                     ??___lwmod 0049  
          ??_checkForLeftWall 0059                        _memcpy 18CE                        clear_0 169A  
                      clear_1 16A6                        clear_2 16B2               ___awmod@divisor 0059  
                      _shapes 0200               ___awmod@counter 005B                _BackgroundData 0018  
                      _tetris 0007             ?_waitForInterrupt 0045       __size_of_rnd_initialize 0008  
                __pdataCOMRAM 006C            ??_waitForInterrupt 0057                  __mediumconst 0000  
              ??_mergeObjects 005C                        preinc2 000FDC                _moveObjectDown 1148  
                      tblptrh 000FF7                        tblptrl 000FF6                        tblptru 000FF8  
      __end_of_debounceButton 17A4                  _checkButtons 06D2          __end_of_mainGameLoop 148E  
                  __accesstop 0080       __end_of__initialization 16B8               __CFG_PBADEN$OFF 000000  
               ___rparam_used 000001             _pauseMultiplexing 1AF6                __pcstackCOMRAM 0045  
                __pidataBANK0 1AE6                  __pidataBANK2 15BC            ?_pauseMultiplexing 0045  
               ?_pauseButtons 0045           ??_pauseMultiplexing 0057        __end_of_moveObjectDown 1228  
             ?_debounceButton 0045              ??_checkForBottom 0059          moveObjectDown@result 00A0  
                 MoveSnakes@i 00A0                    __pbssBANK0 0080                    __pbssBANK1 0100  
                 ?_MoveSnakes 0045          __size_of_newRotation 013C     __end_of_pauseMultiplexing 1B06  
                  _clearArray 1A22                   ?_SnakeGraph 0045               _initialise_TMR0 1A7C  
       __end_of_resumeButtons 1B30                       ?___wmul 005D                ??_pauseButtons 0057  
                     ?_memcpy 0057                   SnakeGraph@i 0063                   SnakeGraph@j 0062  
             ?_moveObjectDown 006A  selectNextObject@rndSelection 0065           newRotation@rotation 0067  
                   ?_genBerry 0045        __size_of_checkForLines 0086                   _Right_Delay 003C  
            _CheckForNewLines 0011                   moveObject@c 005F                   moveObject@i 0060  
         _initialise_hardware 196A                checkForLines@x 00A6                checkForLines@y 00A7  
                     __Hparam 0000          __size_of_rnd_get_num 0046                       __Lparam 0000  
                     _OriginX 000F                       _OriginY 000E    __end_of_initialise_globals 13E2  
        __end_of_mergeObjects 1306                       ___awmod 16C6               __size_of___wmul 0026  
           removeLine@pObject 0057                       ___lwmod 19AC             ?_selectNextObject 0063  
                __psmallconst 0600                   removeLine@x 0067                   removeLine@y 0066  
                     __pcinit 1642          ?_initialise_hardware 0045               __size_of_memcpy 0056  
                     __ramtop 0600                _rnd_initialize 1B22                       __ptext0 1AB6  
          ??_selectNextObject 0065                       __ptext1 1B22                       __ptext2 13E2  
                     __ptext3 1B3C                       __ptext4 1306                       __ptext5 1536  
                     __ptext6 1056                       __ptext7 06D2                       __ptext8 1B2A  
                     __ptext9 17A4                     _T0CONbits 000FD5           __size_of_MoveSnakes 01E8  
                __size_of_isr 0C50              ___awmod@dividend 0057                   pixelCount@r 005E  
                 pixelCount@x 005F                   pixelCount@y 0060     selectNextObject@selection 0067  
                  ??_genBerry 005C         __size_of_mainGameLoop 00AC           __size_of_SnakeGraph 013E  
                ?_CreateBerry 0045               show_score@F2901 0090             _checkForRightWall 1A9A  
         mergeObjects@pTarget 0059                __pintcode_body 0ACC           mergeObjects@pSource 0057  
        end_of_initialization 16B8            ?_checkForRightWall 0057       __end_of_initialise_TMR0 1A9A  
                     memcpy@d 005D                       memcpy@n 005B                       memcpy@s 005F  
                  _moveObject 0C58                 __Lmediumconst 0000                       int_func 0ACC  
  __size_of_pauseMultiplexing 0010                   ?_clearArray 0057           ??_checkForRightWall 0059  
                  _removeLine 1056             pixelCount@pSource 0057                 _checkForLines 1536  
                  _pixelCount 17A4                    _mtxButtons 0017                       postdec1 000FE5  
                     postdec2 000FDD                       postinc0 000FEE                       postinc1 000FE6  
                     postinc2 000FDE        __end_of_rnd_initialize 1B2A         ??_initialise_hardware 0057  
     __size_of_writeHighScore 0002                  _mainGameLoop 13E2                     _PORTBbits 000F81  
   __end_of_checkForRightWall 1AB6     __size_of_checkForLeftWall 0018           debounceButton@delay 0045  
        __end_of_pauseButtons 1B36      __size_of_collisionDetect 0058   __size_of_resumeMultiplexing 0006  
   __size_of_waitForInterrupt 000C                __end_of_TETRIS 06D1         CreateBerry@randomGood 005E  
                   _EndOfGame 0012                ?_checkForLines 0068                __end_of_Number 06C1  
             ?_rnd_initialize 0045                __end_of___wmul 1A7C                 __pidataCOMRAM 1B3E  
              __end_of_memcpy 1924              ??_debounceButton 0049              mergeObjects@mode 005B  
                   _IsRotated 0013           start_initialization 1642           __size_of_clearArray 0034  
                 __end_of_isr 0C58              ?_initialise_TMR0 0045                  ??_MoveSnakes 0064  
                 ?_moveObject 0057         __size_of_mergeObjects 00DE         moveObjectDown@pObject 006A  
            __CFG_OSC$INTIO67 000000                  ??_SnakeGraph 005E                   ?_removeLine 0057  
                  memcpy@dest 0057                   ?_pixelCount 0057           checkForLines@pixels 00A5  
                    ??___wmul 0061              ??_moveObjectDown 006C                   __pdataBANK0 0090  
                 __pdataBANK2 0200              __CFG_LPT1OSC$OFF 000000                      ??_memcpy 005D  
      collisionDetect@pTarget 0059        collisionDetect@pSource 0057            __end_of_MoveSnakes 0ACC  
  __size_of_checkForRightWall 001C                   __pbssCOMRAM 0001                 __pcstackBANK0 00A0  
               _NumberOfLines 0015            __end_of_SnakeGraph 0F1A                  _mergeObjects 1228  
           __size_of_genBerry 0010                 ??_newRotation 00A0            __end_of_SnakeYtext 0621  
        __size_of_CreateBerry 0068               ??_checkForLines 00A0            newRotation@pTarget 0065  
          newRotation@pSource 0063             __CFG_CCP2MX$PORTC 000000             ??_collisionDetect 005B  
                   __pintcode 0008                      ?___awmod 0057                      ?___lwmod 0045  
              _writeHighScore 1B3C                     _direction 000D           __size_of_moveObject 0184  
                 __smallconst 0600            _initialise_globals 1306       selectNextObject@pTarget 0063  
         __size_of_removeLine 00F2         __size_of_pauseButtons 0006              _checkForLeftWall 1ACE  
     selectNextObject@counter 0066           __size_of_pixelCount 006A     __size_of_selectNextObject 00A8  
      __size_of_resumeButtons 0006           ?_initialise_globals 0045                  genBerry@temp 005C  
            _waitForInterrupt 1B16                 ??_rnd_get_num 0057                ___wmul@product 0061  
                ??_clearArray 005B           __end_of_newRotation 1056       __size_of_checkForBottom 0034  
                   _moveSnake 000C                      i2u312_40 19C6                      i2u320_40 0B82  
                    i2u320_46 0B84                      i2u322_40 0BA0                      i2u323_40 0BA2  
                    i2u317_40 0B28                      i2u317_46 0B2A                      i2u318_40 0B46  
                    i2u326_44 0BE2                      i2u326_45 0BDE                      i2u318_46 0B48  
                    i2u319_40 0B64                      i2u319_46 0B66        __end_of_writeHighScore 1B3E  
            __CFG_WDTPS$32768 000000          ??_initialise_globals 0060                  _pauseButtons 1B30  
                   _positions 0100                    _ADCON1bits 000FC1         removeLine@currentLine 0065  
           ___wmul@multiplier 005D            __end_of_clearArray 1A56                 ?_checkButtons 0045  
                 _INTCON2bits 000FF1                     copy_data0 1656                     copy_data1 1676  
             checkForBottom@i 005B                      __Hrparam 0000              ??_rnd_initialize 0057  
 __end_of_initialise_hardware 19AC                     memcpy@src 0059                      __Lrparam 0000  
          __CFG_BOREN$SBORDIS 000000               ?_writeHighScore 0045           __end_of_rnd_get_num 196A  
              _Left_Debounced 0044              collisionDetect@i 005F                 _resumeButtons 1B2A  
    checkForRightWall@pObject 0057              __size_of___awmod 0070                  CreateBerry@i 005F  
            __size_of___lwmod 0042                 mergeObjects@i 005E                  rnd_get_num@b 005A  
                removeLine@pY 0059                 _tmpObjectData 0080                      _genBerry 1B06  
              ??_checkButtons 00A5                      __ptext10 1B30                      __ptext11 0F1A  
                    __ptext20 19EE                      __ptext12 1148                      __ptext21 1A9A  
                    __ptext13 148E                      __ptext30 1B06                      __ptext22 1ACE  
                    __ptext14 18CE                      __ptext31 1924                      __ptext23 08E4  
                    __ptext15 1A56                      __ptext32 196A                      __ptext24 0DDC  
                    __ptext16 16C6                      __ptext33 1A7C                      __ptext25 1B36  
                    __ptext17 0C58                      __ptext26 1AF6                      __ptext18 1228  
                    __ptext35 1736                      __ptext27 1B16                      __ptext19 1876  
                    __ptext36 19AC                      __ptext28 1A22                      __ptext29 180E  
  __end_of_resumeMultiplexing 1B3C              _Rotate_Debounced 0042                   _newRotation 0F1A  
          _previous_direction 0008               _LimitedRotation 0016                  ??_moveObject 005B  
               __size_of_main 0018                  ??_removeLine 005A                  ??_pixelCount 0059  
              ?_resumeButtons 0045                _Down_Debounced 0041                   clearArray@i 005D  
             _Right_Debounced 0043                      int$flags 006D            __end_of_moveObject 0DDC  
                  _INTCONbits 000FF2              clearArray@pArray 0057                      isr@xmask 0056  
                    isr@ymask 0054            __end_of_removeLine 1148            __end_of_pixelCount 180E  
            _selectNextObject 148E               _collisionDetect 1876                      intlevel2 0000  
                _UpdateScreen 0006              ___lwmod@dividend 0045                   _rnd_get_num 1924  
              _checkForBottom 19EE                  _Rotate_Delay 003A                    _OSCCONbits 000FD3  
                 _snakeLength 000B      __end_of_checkForLeftWall 1AE6      __size_of_initialise_TMR0 001E  
           selectNextObject@s 0068      __end_of_waitForInterrupt 1B22               ___lwmod@divisor 0047  
             ___lwmod@counter 0049                 _LastHighScore 0014         checkForBottom@pObject 0057  
               ??_CreateBerry 005D       checkForLeftWall@pObject 0057             _InterruptComplete 0005  
              clearArray@size 0059       __size_of_debounceButton 006E                  _port_display 000F82  
      __end_of_checkForBottom 1A22         __end_of_checkForLines 15BC               ??_resumeButtons 0057  
